
pduu_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001820c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035a8  080184ac  080184ac  000194ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ba54  0801ba54  0001d0b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801ba54  0801ba54  0001ca54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ba5c  0801ba5c  0001d0b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ba5c  0801ba5c  0001ca5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ba60  0801ba60  0001ca60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  24000000  0801ba64  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007c7c  240000b0  0801bb14  0001d0b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24007d2c  0801bb14  0001dd2c  2**0
                  ALLOC
 11 .lwip_sec     00004b83  30000000  30000000  0001e000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0001d0b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003bac0  00000000  00000000  0001d0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000086d1  00000000  00000000  00058b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002810  00000000  00000000  00061270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001fc8  00000000  00000000  00063a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004d19b  00000000  00000000  00065a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00040c9b  00000000  00000000  000b2be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001afe5f  00000000  00000000  000f387e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  002a36dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000af18  00000000  00000000  002a3720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  002ae638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000b0 	.word	0x240000b0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018494 	.word	0x08018494

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000b4 	.word	0x240000b4
 80002dc:	08018494 	.word	0x08018494

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006c0:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <SystemInit+0x12c>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c6:	4a48      	ldr	r2, [pc, #288]	@ (80007e8 <SystemInit+0x12c>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006d0:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <SystemInit+0x12c>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	4a44      	ldr	r2, [pc, #272]	@ (80007e8 <SystemInit+0x12c>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006dc:	4b43      	ldr	r3, [pc, #268]	@ (80007ec <SystemInit+0x130>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d807      	bhi.n	80006f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e8:	4b40      	ldr	r3, [pc, #256]	@ (80007ec <SystemInit+0x130>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	4a3e      	ldr	r2, [pc, #248]	@ (80007ec <SystemInit+0x130>)
 80006f2:	f043 0307 	orr.w	r3, r3, #7
 80006f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f8:	4b3d      	ldr	r3, [pc, #244]	@ (80007f0 <SystemInit+0x134>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a3c      	ldr	r2, [pc, #240]	@ (80007f0 <SystemInit+0x134>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000704:	4b3a      	ldr	r3, [pc, #232]	@ (80007f0 <SystemInit+0x134>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800070a:	4b39      	ldr	r3, [pc, #228]	@ (80007f0 <SystemInit+0x134>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4938      	ldr	r1, [pc, #224]	@ (80007f0 <SystemInit+0x134>)
 8000710:	4b38      	ldr	r3, [pc, #224]	@ (80007f4 <SystemInit+0x138>)
 8000712:	4013      	ands	r3, r2
 8000714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000716:	4b35      	ldr	r3, [pc, #212]	@ (80007ec <SystemInit+0x130>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000722:	4b32      	ldr	r3, [pc, #200]	@ (80007ec <SystemInit+0x130>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 030f 	bic.w	r3, r3, #15
 800072a:	4a30      	ldr	r2, [pc, #192]	@ (80007ec <SystemInit+0x130>)
 800072c:	f043 0307 	orr.w	r3, r3, #7
 8000730:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <SystemInit+0x134>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000738:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <SystemInit+0x134>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073e:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <SystemInit+0x134>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000744:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <SystemInit+0x134>)
 8000746:	4a2c      	ldr	r2, [pc, #176]	@ (80007f8 <SystemInit+0x13c>)
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800074a:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <SystemInit+0x134>)
 800074c:	4a2b      	ldr	r2, [pc, #172]	@ (80007fc <SystemInit+0x140>)
 800074e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <SystemInit+0x134>)
 8000752:	4a2b      	ldr	r2, [pc, #172]	@ (8000800 <SystemInit+0x144>)
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <SystemInit+0x134>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800075c:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <SystemInit+0x134>)
 800075e:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <SystemInit+0x144>)
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000762:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <SystemInit+0x134>)
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <SystemInit+0x134>)
 800076a:	4a25      	ldr	r2, [pc, #148]	@ (8000800 <SystemInit+0x144>)
 800076c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076e:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <SystemInit+0x134>)
 8000770:	2200      	movs	r2, #0
 8000772:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <SystemInit+0x134>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a1d      	ldr	r2, [pc, #116]	@ (80007f0 <SystemInit+0x134>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <SystemInit+0x134>)
 8000782:	2200      	movs	r2, #0
 8000784:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <SystemInit+0x148>)
 8000788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800078a:	4a1e      	ldr	r2, [pc, #120]	@ (8000804 <SystemInit+0x148>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000790:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <SystemInit+0x14c>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <SystemInit+0x150>)
 8000798:	4013      	ands	r3, r2
 800079a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800079e:	d202      	bcs.n	80007a6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <SystemInit+0x154>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <SystemInit+0x134>)
 80007a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d113      	bne.n	80007dc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007b4:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <SystemInit+0x134>)
 80007b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ba:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <SystemInit+0x134>)
 80007bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <SystemInit+0x158>)
 80007c6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <SystemInit+0x134>)
 80007ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007d2:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <SystemInit+0x134>)
 80007d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00
 80007ec:	52002000 	.word	0x52002000
 80007f0:	58024400 	.word	0x58024400
 80007f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007f8:	02020200 	.word	0x02020200
 80007fc:	01ff0000 	.word	0x01ff0000
 8000800:	01010280 	.word	0x01010280
 8000804:	580000c0 	.word	0x580000c0
 8000808:	5c001000 	.word	0x5c001000
 800080c:	ffff0000 	.word	0xffff0000
 8000810:	51008108 	.word	0x51008108
 8000814:	52004000 	.word	0x52004000

08000818 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <ExitRun0Mode+0x2c>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <ExitRun0Mode+0x2c>)
 8000822:	f023 0302 	bic.w	r3, r3, #2
 8000826:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000828:	bf00      	nop
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <ExitRun0Mode+0x2c>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0f9      	beq.n	800082a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	58024800 	.word	0x58024800

08000848 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4a07      	ldr	r2, [pc, #28]	@ (8000874 <vApplicationGetIdleTaskMemory+0x2c>)
 8000858:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	4a06      	ldr	r2, [pc, #24]	@ (8000878 <vApplicationGetIdleTaskMemory+0x30>)
 800085e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2280      	movs	r2, #128	@ 0x80
 8000864:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	240000cc 	.word	0x240000cc
 8000878:	2400016c 	.word	0x2400016c

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b5b0      	push	{r4, r5, r7, lr}
 800087e:	b08c      	sub	sp, #48	@ 0x30
 8000880:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000882:	f000 fa1b 	bl	8000cbc <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000886:	4b71      	ldr	r3, [pc, #452]	@ (8000a4c <main+0x1d0>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800088e:	2b00      	cmp	r3, #0
 8000890:	d11b      	bne.n	80008ca <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000892:	f3bf 8f4f 	dsb	sy
}
 8000896:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000898:	f3bf 8f6f 	isb	sy
}
 800089c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800089e:	4b6b      	ldr	r3, [pc, #428]	@ (8000a4c <main+0x1d0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008a6:	f3bf 8f4f 	dsb	sy
}
 80008aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008ac:	f3bf 8f6f 	isb	sy
}
 80008b0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008b2:	4b66      	ldr	r3, [pc, #408]	@ (8000a4c <main+0x1d0>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	4a65      	ldr	r2, [pc, #404]	@ (8000a4c <main+0x1d0>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008be:	f3bf 8f4f 	dsb	sy
}
 80008c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008c4:	f3bf 8f6f 	isb	sy
}
 80008c8:	e000      	b.n	80008cc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008ca:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008cc:	4b5f      	ldr	r3, [pc, #380]	@ (8000a4c <main+0x1d0>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d138      	bne.n	800094a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008d8:	4b5c      	ldr	r3, [pc, #368]	@ (8000a4c <main+0x1d0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008e0:	f3bf 8f4f 	dsb	sy
}
 80008e4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008e6:	4b59      	ldr	r3, [pc, #356]	@ (8000a4c <main+0x1d0>)
 80008e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80008ec:	62bb      	str	r3, [r7, #40]	@ 0x28

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008f0:	0b5b      	lsrs	r3, r3, #13
 80008f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008fa:	08db      	lsrs	r3, r3, #3
 80008fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000900:	623b      	str	r3, [r7, #32]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000904:	015a      	lsls	r2, r3, #5
 8000906:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800090a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800090c:	6a3a      	ldr	r2, [r7, #32]
 800090e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000910:	494e      	ldr	r1, [pc, #312]	@ (8000a4c <main+0x1d0>)
 8000912:	4313      	orrs	r3, r2
 8000914:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000918:	6a3b      	ldr	r3, [r7, #32]
 800091a:	1e5a      	subs	r2, r3, #1
 800091c:	623a      	str	r2, [r7, #32]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1ef      	bne.n	8000902 <main+0x86>
    } while(sets-- != 0U);
 8000922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000924:	1e5a      	subs	r2, r3, #1
 8000926:	627a      	str	r2, [r7, #36]	@ 0x24
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1e5      	bne.n	80008f8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800092c:	f3bf 8f4f 	dsb	sy
}
 8000930:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000932:	4b46      	ldr	r3, [pc, #280]	@ (8000a4c <main+0x1d0>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4a45      	ldr	r2, [pc, #276]	@ (8000a4c <main+0x1d0>)
 8000938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800093c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800093e:	f3bf 8f4f 	dsb	sy
}
 8000942:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000944:	f3bf 8f6f 	isb	sy
}
 8000948:	e000      	b.n	800094c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800094a:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800094c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000952:	bf00      	nop
 8000954:	4b3e      	ldr	r3, [pc, #248]	@ (8000a50 <main+0x1d4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800095c:	2b00      	cmp	r3, #0
 800095e:	d004      	beq.n	800096a <main+0xee>
 8000960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000962:	1e5a      	subs	r2, r3, #1
 8000964:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000966:	2b00      	cmp	r3, #0
 8000968:	dcf4      	bgt.n	8000954 <main+0xd8>
  if ( timeout < 0 )
 800096a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800096c:	2b00      	cmp	r3, #0
 800096e:	da01      	bge.n	8000974 <main+0xf8>
  {
  Error_Handler();
 8000970:	f000 fa1c 	bl	8000dac <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000974:	f000 fec0 	bl	80016f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000978:	f000 f872 	bl	8000a60 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800097c:	4b34      	ldr	r3, [pc, #208]	@ (8000a50 <main+0x1d4>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	4a33      	ldr	r2, [pc, #204]	@ (8000a50 <main+0x1d4>)
 8000984:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098c:	4b30      	ldr	r3, [pc, #192]	@ (8000a50 <main+0x1d4>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800099a:	2000      	movs	r0, #0
 800099c:	f003 f84a 	bl	8003a34 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80009a0:	2100      	movs	r1, #0
 80009a2:	2000      	movs	r0, #0
 80009a4:	f003 f860 	bl	8003a68 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80009a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009ae:	bf00      	nop
 80009b0:	4b27      	ldr	r3, [pc, #156]	@ (8000a50 <main+0x1d4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d104      	bne.n	80009c6 <main+0x14a>
 80009bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009be:	1e5a      	subs	r2, r3, #1
 80009c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	dcf4      	bgt.n	80009b0 <main+0x134>
if ( timeout < 0 )
 80009c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	da01      	bge.n	80009d0 <main+0x154>
{
Error_Handler();
 80009cc:	f000 f9ee 	bl	8000dac <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d0:	f000 f8b2 	bl	8000b38 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80009d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <main+0x1d8>)
 80009d6:	1d3c      	adds	r4, r7, #4
 80009d8:	461d      	mov	r5, r3
 80009da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f006 fc96 	bl	800731c <osThreadCreate>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4a19      	ldr	r2, [pc, #100]	@ (8000a58 <main+0x1dc>)
 80009f4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 fc9a 	bl	8001330 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80009fc:	2001      	movs	r0, #1
 80009fe:	f000 fc97 	bl	8001330 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000a02:	2002      	movs	r0, #2
 8000a04:	f000 fc94 	bl	8001330 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000a08:	2101      	movs	r1, #1
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f000 fd06 	bl	800141c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <main+0x1e0>)
 8000a12:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a16:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000a18:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <main+0x1e0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <main+0x1e0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000a24:	4b0d      	ldr	r3, [pc, #52]	@ (8000a5c <main+0x1e0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <main+0x1e0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000a30:	490a      	ldr	r1, [pc, #40]	@ (8000a5c <main+0x1e0>)
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 fd82 	bl	800153c <BSP_COM_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <main+0x1c6>
  {
    Error_Handler();
 8000a3e:	f000 f9b5 	bl	8000dac <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 8000a42:	f006 fc54 	bl	80072ee <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a46:	bf00      	nop
 8000a48:	e7fd      	b.n	8000a46 <main+0x1ca>
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00
 8000a50:	58024400 	.word	0x58024400
 8000a54:	080184b8 	.word	0x080184b8
 8000a58:	2400037c 	.word	0x2400037c
 8000a5c:	2400036c 	.word	0x2400036c

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b09c      	sub	sp, #112	@ 0x70
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a6a:	224c      	movs	r2, #76	@ 0x4c
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f016 fea4 	bl	80177bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2220      	movs	r2, #32
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f016 fe9e 	bl	80177bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a80:	2004      	movs	r0, #4
 8000a82:	f003 f805 	bl	8003a90 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <SystemClock_Config+0xd0>)
 8000a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a8e:	4a28      	ldr	r2, [pc, #160]	@ (8000b30 <SystemClock_Config+0xd0>)
 8000a90:	f023 0301 	bic.w	r3, r3, #1
 8000a94:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a96:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <SystemClock_Config+0xd0>)
 8000a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	4b24      	ldr	r3, [pc, #144]	@ (8000b34 <SystemClock_Config+0xd4>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000aa8:	4a22      	ldr	r2, [pc, #136]	@ (8000b34 <SystemClock_Config+0xd4>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b20      	ldr	r3, [pc, #128]	@ (8000b34 <SystemClock_Config+0xd4>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000abc:	bf00      	nop
 8000abe:	4b1d      	ldr	r3, [pc, #116]	@ (8000b34 <SystemClock_Config+0xd4>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000aca:	d1f8      	bne.n	8000abe <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000acc:	2302      	movs	r3, #2
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad4:	2340      	movs	r3, #64	@ 0x40
 8000ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 f82f 	bl	8003b44 <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000aec:	f000 f95e 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	233f      	movs	r3, #63	@ 0x3f
 8000af2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b04:	2340      	movs	r3, #64	@ 0x40
 8000b06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2101      	movs	r1, #1
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 fc6e 	bl	80043f8 <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b22:	f000 f943 	bl	8000dac <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3770      	adds	r7, #112	@ 0x70
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	58000400 	.word	0x58000400
 8000b34:	58024800 	.word	0x58024800

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	4b28      	ldr	r3, [pc, #160]	@ (8000bf0 <MX_GPIO_Init+0xb8>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b54:	4a26      	ldr	r2, [pc, #152]	@ (8000bf0 <MX_GPIO_Init+0xb8>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b5e:	4b24      	ldr	r3, [pc, #144]	@ (8000bf0 <MX_GPIO_Init+0xb8>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <MX_GPIO_Init+0xb8>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b72:	4a1f      	ldr	r2, [pc, #124]	@ (8000bf0 <MX_GPIO_Init+0xb8>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <MX_GPIO_Init+0xb8>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <MX_GPIO_Init+0xb8>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b90:	4a17      	ldr	r2, [pc, #92]	@ (8000bf0 <MX_GPIO_Init+0xb8>)
 8000b92:	f043 0302 	orr.w	r3, r3, #2
 8000b96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <MX_GPIO_Init+0xb8>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba8:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <MX_GPIO_Init+0xb8>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bae:	4a10      	ldr	r2, [pc, #64]	@ (8000bf0 <MX_GPIO_Init+0xb8>)
 8000bb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <MX_GPIO_Init+0xb8>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bc6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bd8:	230a      	movs	r3, #10
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4804      	ldr	r0, [pc, #16]	@ (8000bf4 <MX_GPIO_Init+0xbc>)
 8000be4:	f002 fd5c 	bl	80036a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	@ 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	58024400 	.word	0x58024400
 8000bf4:	58020000 	.word	0x58020000

08000bf8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000c00:	f005 fdbe 	bl	8006780 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  osDelay(1000);
 8000c04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c08:	f006 fbd4 	bl	80073b4 <osDelay>
  /* Infinite loop */
  for(;;)
  {

	  if (netif_is_link_up(&gnetif)) {
 8000c0c:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <StartDefaultTask+0x98>)
 8000c0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <StartDefaultTask+0x2e>
	     	     printf("Ethernet link is up\r\n");
 8000c1e:	481d      	ldr	r0, [pc, #116]	@ (8000c94 <StartDefaultTask+0x9c>)
 8000c20:	f016 fcdc 	bl	80175dc <puts>
 8000c24:	e002      	b.n	8000c2c <StartDefaultTask+0x34>
	     	 } else {
	     	     printf("Ethernet link is down\r\n");
 8000c26:	481c      	ldr	r0, [pc, #112]	@ (8000c98 <StartDefaultTask+0xa0>)
 8000c28:	f016 fcd8 	bl	80175dc <puts>
	     	 }

	     	 printf("Current IP: %s\r\n", ipaddr_ntoa(&gnetif.ip_addr));
 8000c2c:	481b      	ldr	r0, [pc, #108]	@ (8000c9c <StartDefaultTask+0xa4>)
 8000c2e:	f00d fa3f 	bl	800e0b0 <ip4addr_ntoa>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4619      	mov	r1, r3
 8000c36:	481a      	ldr	r0, [pc, #104]	@ (8000ca0 <StartDefaultTask+0xa8>)
 8000c38:	f016 fc68 	bl	801750c <iprintf>

	     	 if (dhcp_supplied_address(&gnetif)) {
 8000c3c:	4814      	ldr	r0, [pc, #80]	@ (8000c90 <StartDefaultTask+0x98>)
 8000c3e:	f00b f97d 	bl	800bf3c <dhcp_supplied_address>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d01c      	beq.n	8000c82 <StartDefaultTask+0x8a>
	     	 		        printf("IP Address: %s\r\n", ipaddr_ntoa(&gnetif.ip_addr));
 8000c48:	4814      	ldr	r0, [pc, #80]	@ (8000c9c <StartDefaultTask+0xa4>)
 8000c4a:	f00d fa31 	bl	800e0b0 <ip4addr_ntoa>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4619      	mov	r1, r3
 8000c52:	4814      	ldr	r0, [pc, #80]	@ (8000ca4 <StartDefaultTask+0xac>)
 8000c54:	f016 fc5a 	bl	801750c <iprintf>
	     	 		        printf("Netmask: %s\r\n", ipaddr_ntoa(&gnetif.netmask));
 8000c58:	4813      	ldr	r0, [pc, #76]	@ (8000ca8 <StartDefaultTask+0xb0>)
 8000c5a:	f00d fa29 	bl	800e0b0 <ip4addr_ntoa>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4619      	mov	r1, r3
 8000c62:	4812      	ldr	r0, [pc, #72]	@ (8000cac <StartDefaultTask+0xb4>)
 8000c64:	f016 fc52 	bl	801750c <iprintf>
	     	 		        printf("Gateway: %s\r\n", ipaddr_ntoa(&gnetif.gw));
 8000c68:	4811      	ldr	r0, [pc, #68]	@ (8000cb0 <StartDefaultTask+0xb8>)
 8000c6a:	f00d fa21 	bl	800e0b0 <ip4addr_ntoa>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4619      	mov	r1, r3
 8000c72:	4810      	ldr	r0, [pc, #64]	@ (8000cb4 <StartDefaultTask+0xbc>)
 8000c74:	f016 fc4a 	bl	801750c <iprintf>
	     	 		       osDelay(1000);
 8000c78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c7c:	f006 fb9a 	bl	80073b4 <osDelay>
 8000c80:	e002      	b.n	8000c88 <StartDefaultTask+0x90>

	     	 		    } else {
	     	 		        printf("DHCP not ready or failed.\r\n");
 8000c82:	480d      	ldr	r0, [pc, #52]	@ (8000cb8 <StartDefaultTask+0xc0>)
 8000c84:	f016 fcaa 	bl	80175dc <puts>
	     	 		    }

    osDelay(100);
 8000c88:	2064      	movs	r0, #100	@ 0x64
 8000c8a:	f006 fb93 	bl	80073b4 <osDelay>
	  if (netif_is_link_up(&gnetif)) {
 8000c8e:	e7bd      	b.n	8000c0c <StartDefaultTask+0x14>
 8000c90:	24000474 	.word	0x24000474
 8000c94:	080184d4 	.word	0x080184d4
 8000c98:	080184ec 	.word	0x080184ec
 8000c9c:	24000478 	.word	0x24000478
 8000ca0:	08018504 	.word	0x08018504
 8000ca4:	08018518 	.word	0x08018518
 8000ca8:	2400047c 	.word	0x2400047c
 8000cac:	0801852c 	.word	0x0801852c
 8000cb0:	24000480 	.word	0x24000480
 8000cb4:	0801853c 	.word	0x0801853c
 8000cb8:	0801854c 	.word	0x0801854c

08000cbc <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000cce:	f000 fe6f 	bl	80019b0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cde:	231f      	movs	r3, #31
 8000ce0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ce2:	2387      	movs	r3, #135	@ 0x87
 8000ce4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000cea:	2300      	movs	r3, #0
 8000cec:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cfe:	463b      	mov	r3, r7
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 fe8d 	bl	8001a20 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000d06:	2301      	movs	r3, #1
 8000d08:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x08000000;
 8000d0a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d0e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000d10:	2313      	movs	r3, #19
 8000d12:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 8000d1c:	2305      	movs	r3, #5
 8000d1e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 fe76 	bl	8001a20 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000d38:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <MPU_Config+0xc8>)
 8000d3a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000d3c:	2311      	movs	r3, #17
 8000d3e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d40:	2303      	movs	r3, #3
 8000d42:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d44:	2301      	movs	r3, #1
 8000d46:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 fe66 	bl	8001a20 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000d54:	2303      	movs	r3, #3
 8000d56:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000d58:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000d5c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000d5e:	2308      	movs	r3, #8
 8000d60:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d66:	2301      	movs	r3, #1
 8000d68:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d6e:	463b      	mov	r3, r7
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 fe55 	bl	8001a20 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d76:	2004      	movs	r0, #4
 8000d78:	f000 fe32 	bl	80019e0 <HAL_MPU_Enable>

}
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	30020000 	.word	0x30020000

08000d88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d101      	bne.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d9a:	f000 fce9 	bl	8001770 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40001400 	.word	0x40001400

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <Error_Handler+0x8>

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <HAL_MspInit+0x38>)
 8000dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <HAL_MspInit+0x38>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <HAL_MspInit+0x38>)
 8000dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	210f      	movs	r1, #15
 8000de0:	f06f 0001 	mvn.w	r0, #1
 8000de4:	f000 fdbc 	bl	8001960 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	58024400 	.word	0x58024400

08000df4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b090      	sub	sp, #64	@ 0x40
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b0f      	cmp	r3, #15
 8000e00:	d827      	bhi.n	8000e52 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	2037      	movs	r0, #55	@ 0x37
 8000e08:	f000 fdaa 	bl	8001960 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e0c:	2037      	movs	r0, #55	@ 0x37
 8000e0e:	f000 fdc1 	bl	8001994 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000e12:	4a29      	ldr	r2, [pc, #164]	@ (8000eb8 <HAL_InitTick+0xc4>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000e18:	4b28      	ldr	r3, [pc, #160]	@ (8000ebc <HAL_InitTick+0xc8>)
 8000e1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e1e:	4a27      	ldr	r2, [pc, #156]	@ (8000ebc <HAL_InitTick+0xc8>)
 8000e20:	f043 0320 	orr.w	r3, r3, #32
 8000e24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e28:	4b24      	ldr	r3, [pc, #144]	@ (8000ebc <HAL_InitTick+0xc8>)
 8000e2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e2e:	f003 0320 	and.w	r3, r3, #32
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e36:	f107 0210 	add.w	r2, r7, #16
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f003 fe65 	bl	8004b10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e48:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d106      	bne.n	8000e5e <HAL_InitTick+0x6a>
 8000e50:	e001      	b.n	8000e56 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e02b      	b.n	8000eae <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e56:	f003 fe2f 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8000e5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000e5c:	e004      	b.n	8000e68 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e5e:	f003 fe2b 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8000e62:	4603      	mov	r3, r0
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e6a:	4a15      	ldr	r2, [pc, #84]	@ (8000ec0 <HAL_InitTick+0xcc>)
 8000e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e70:	0c9b      	lsrs	r3, r3, #18
 8000e72:	3b01      	subs	r3, #1
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000e76:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <HAL_InitTick+0xd0>)
 8000e78:	4a13      	ldr	r2, [pc, #76]	@ (8000ec8 <HAL_InitTick+0xd4>)
 8000e7a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <HAL_InitTick+0xd0>)
 8000e7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e82:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000e84:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec4 <HAL_InitTick+0xd0>)
 8000e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e88:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <HAL_InitTick+0xd0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <HAL_InitTick+0xd0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000e96:	480b      	ldr	r0, [pc, #44]	@ (8000ec4 <HAL_InitTick+0xd0>)
 8000e98:	f004 f93a 	bl	8005110 <HAL_TIM_Base_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d104      	bne.n	8000eac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000ea2:	4808      	ldr	r0, [pc, #32]	@ (8000ec4 <HAL_InitTick+0xd0>)
 8000ea4:	f004 f996 	bl	80051d4 <HAL_TIM_Base_Start_IT>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	e000      	b.n	8000eae <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3740      	adds	r7, #64	@ 0x40
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	24000024 	.word	0x24000024
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	431bde83 	.word	0x431bde83
 8000ec4:	24000380 	.word	0x24000380
 8000ec8:	40001400 	.word	0x40001400

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <HardFault_Handler+0x4>

08000edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <MemManage_Handler+0x4>

08000ee4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f000 fafa 	bl	8001500 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <TIM7_IRQHandler+0x10>)
 8000f16:	f004 f9d5 	bl	80052c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	24000380 	.word	0x24000380

08000f24 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f28:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <ETH_IRQHandler+0x10>)
 8000f2a:	f001 f99f 	bl	800226c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	240004cc 	.word	0x240004cc

08000f38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return 1;
 8000f3c:	2301      	movs	r3, #1
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <_kill>:

int _kill(int pid, int sig)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f52:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <_kill+0x20>)
 8000f54:	2216      	movs	r2, #22
 8000f56:	601a      	str	r2, [r3, #0]
  return -1;
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	24007d1c 	.word	0x24007d1c

08000f6c <_exit>:

void _exit (int status)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ffe5 	bl	8000f48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f7e:	bf00      	nop
 8000f80:	e7fd      	b.n	8000f7e <_exit+0x12>

08000f82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	e00a      	b.n	8000faa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f94:	f3af 8000 	nop.w
 8000f98:	4601      	mov	r1, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1c5a      	adds	r2, r3, #1
 8000f9e:	60ba      	str	r2, [r7, #8]
 8000fa0:	b2ca      	uxtb	r2, r1
 8000fa2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	dbf0      	blt.n	8000f94 <_read+0x12>
  }

  return len;
 8000fb2:	687b      	ldr	r3, [r7, #4]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	e009      	b.n	8000fe2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	60ba      	str	r2, [r7, #8]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fb12 	bl	8001600 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	dbf1      	blt.n	8000fce <_write+0x12>
  }
  return len;
 8000fea:	687b      	ldr	r3, [r7, #4]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_close>:

int _close(int file)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800101c:	605a      	str	r2, [r3, #4]
  return 0;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <_isatty>:

int _isatty(int file)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001034:	2301      	movs	r3, #1
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001042:	b480      	push	{r7}
 8001044:	b085      	sub	sp, #20
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001064:	4a14      	ldr	r2, [pc, #80]	@ (80010b8 <_sbrk+0x5c>)
 8001066:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <_sbrk+0x60>)
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001070:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001078:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <_sbrk+0x64>)
 800107a:	4a12      	ldr	r2, [pc, #72]	@ (80010c4 <_sbrk+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107e:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	429a      	cmp	r2, r3
 800108a:	d205      	bcs.n	8001098 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800108c:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <_sbrk+0x6c>)
 800108e:	220c      	movs	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	e009      	b.n	80010ac <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001098:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a06      	ldr	r2, [pc, #24]	@ (80010c0 <_sbrk+0x64>)
 80010a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	371c      	adds	r7, #28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	24080000 	.word	0x24080000
 80010bc:	00000400 	.word	0x00000400
 80010c0:	240003cc 	.word	0x240003cc
 80010c4:	24007d30 	.word	0x24007d30
 80010c8:	24007d1c 	.word	0x24007d1c

080010cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010cc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001108 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80010d0:	f7ff fba2 	bl	8000818 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010d4:	f7ff faf2 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d8:	480c      	ldr	r0, [pc, #48]	@ (800110c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010da:	490d      	ldr	r1, [pc, #52]	@ (8001110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f0:	4c0a      	ldr	r4, [pc, #40]	@ (800111c <LoopFillZerobss+0x22>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fe:	f016 fc09 	bl	8017914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001102:	f7ff fbbb 	bl	800087c <main>
  bx  lr
 8001106:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001108:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800110c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001110:	240000b0 	.word	0x240000b0
  ldr r2, =_sidata
 8001114:	0801ba64 	.word	0x0801ba64
  ldr r2, =_sbss
 8001118:	240000b0 	.word	0x240000b0
  ldr r4, =_ebss
 800111c:	24007d2c 	.word	0x24007d2c

08001120 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC3_IRQHandler>

08001122 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00b      	beq.n	800114a <LAN8742_RegisterBusIO+0x28>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d007      	beq.n	800114a <LAN8742_RegisterBusIO+0x28>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <LAN8742_RegisterBusIO+0x28>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d102      	bne.n	8001150 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	e014      	b.n	800117a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d139      	bne.n	8001216 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2220      	movs	r2, #32
 80011b4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	e01c      	b.n	80011f6 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	f107 020c 	add.w	r2, r7, #12
 80011c4:	2112      	movs	r1, #18
 80011c6:	6978      	ldr	r0, [r7, #20]
 80011c8:	4798      	blx	r3
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	da03      	bge.n	80011d8 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80011d0:	f06f 0304 	mvn.w	r3, #4
 80011d4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80011d6:	e00b      	b.n	80011f0 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 031f 	and.w	r3, r3, #31
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d105      	bne.n	80011f0 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
         break;
 80011ee:	e005      	b.n	80011fc <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3301      	adds	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2b1f      	cmp	r3, #31
 80011fa:	d9df      	bls.n	80011bc <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b1f      	cmp	r3, #31
 8001202:	d902      	bls.n	800120a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001204:	f06f 0302 	mvn.w	r3, #2
 8001208:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001216:	693b      	ldr	r3, [r7, #16]
 }
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6810      	ldr	r0, [r2, #0]
 8001234:	f107 020c 	add.w	r2, r7, #12
 8001238:	2101      	movs	r1, #1
 800123a:	4798      	blx	r3
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	da02      	bge.n	8001248 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001242:	f06f 0304 	mvn.w	r3, #4
 8001246:	e06e      	b.n	8001326 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6810      	ldr	r0, [r2, #0]
 8001250:	f107 020c 	add.w	r2, r7, #12
 8001254:	2101      	movs	r1, #1
 8001256:	4798      	blx	r3
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	da02      	bge.n	8001264 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800125e:	f06f 0304 	mvn.w	r3, #4
 8001262:	e060      	b.n	8001326 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800126e:	2301      	movs	r3, #1
 8001270:	e059      	b.n	8001326 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6810      	ldr	r0, [r2, #0]
 800127a:	f107 020c 	add.w	r2, r7, #12
 800127e:	2100      	movs	r1, #0
 8001280:	4798      	blx	r3
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	da02      	bge.n	800128e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001288:	f06f 0304 	mvn.w	r3, #4
 800128c:	e04b      	b.n	8001326 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d11b      	bne.n	80012d0 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d006      	beq.n	80012b0 <LAN8742_GetLinkState+0x90>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012ac:	2302      	movs	r3, #2
 80012ae:	e03a      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e033      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80012c8:	2304      	movs	r3, #4
 80012ca:	e02c      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80012cc:	2305      	movs	r3, #5
 80012ce:	e02a      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6810      	ldr	r0, [r2, #0]
 80012d8:	f107 020c 	add.w	r2, r7, #12
 80012dc:	211f      	movs	r1, #31
 80012de:	4798      	blx	r3
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	da02      	bge.n	80012ec <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80012e6:	f06f 0304 	mvn.w	r3, #4
 80012ea:	e01c      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80012f6:	2306      	movs	r3, #6
 80012f8:	e015      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f003 031c 	and.w	r3, r3, #28
 8001300:	2b18      	cmp	r3, #24
 8001302:	d101      	bne.n	8001308 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001304:	2302      	movs	r3, #2
 8001306:	e00e      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 031c 	and.w	r3, r3, #28
 800130e:	2b08      	cmp	r3, #8
 8001310:	d101      	bne.n	8001316 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001312:	2303      	movs	r3, #3
 8001314:	e007      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f003 031c 	and.w	r3, r3, #28
 800131c:	2b14      	cmp	r3, #20
 800131e:	d101      	bne.n	8001324 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001320:	2304      	movs	r3, #4
 8001322:	e000      	b.n	8001326 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001324:	2305      	movs	r3, #5
    }
  }
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	@ 0x30
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d009      	beq.n	8001358 <BSP_LED_Init+0x28>
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d006      	beq.n	8001358 <BSP_LED_Init+0x28>
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d003      	beq.n	8001358 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001350:	f06f 0301 	mvn.w	r3, #1
 8001354:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001356:	e055      	b.n	8001404 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10f      	bne.n	800137e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800135e:	4b2c      	ldr	r3, [pc, #176]	@ (8001410 <BSP_LED_Init+0xe0>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001364:	4a2a      	ldr	r2, [pc, #168]	@ (8001410 <BSP_LED_Init+0xe0>)
 8001366:	f043 0302 	orr.w	r3, r3, #2
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800136e:	4b28      	ldr	r3, [pc, #160]	@ (8001410 <BSP_LED_Init+0xe0>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	e021      	b.n	80013c2 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d10f      	bne.n	80013a4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001384:	4b22      	ldr	r3, [pc, #136]	@ (8001410 <BSP_LED_Init+0xe0>)
 8001386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138a:	4a21      	ldr	r2, [pc, #132]	@ (8001410 <BSP_LED_Init+0xe0>)
 800138c:	f043 0310 	orr.w	r3, r3, #16
 8001390:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001394:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <BSP_LED_Init+0xe0>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	e00e      	b.n	80013c2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80013a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <BSP_LED_Init+0xe0>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013aa:	4a19      	ldr	r2, [pc, #100]	@ (8001410 <BSP_LED_Init+0xe0>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b4:	4b16      	ldr	r3, [pc, #88]	@ (8001410 <BSP_LED_Init+0xe0>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	4a13      	ldr	r2, [pc, #76]	@ (8001414 <BSP_LED_Init+0xe4>)
 80013c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ca:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4a0f      	ldr	r2, [pc, #60]	@ (8001418 <BSP_LED_Init+0xe8>)
 80013dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e0:	f107 0218 	add.w	r2, r7, #24
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 f95a 	bl	80036a0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <BSP_LED_Init+0xe8>)
 80013f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	4a07      	ldr	r2, [pc, #28]	@ (8001414 <BSP_LED_Init+0xe4>)
 80013f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013fc:	2200      	movs	r2, #0
 80013fe:	4619      	mov	r1, r3
 8001400:	f002 fafe 	bl	8003a00 <HAL_GPIO_WritePin>
  }

  return ret;
 8001404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001406:	4618      	mov	r0, r3
 8001408:	3730      	adds	r7, #48	@ 0x30
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	58024400 	.word	0x58024400
 8001414:	0801b7ec 	.word	0x0801b7ec
 8001418:	2400000c 	.word	0x2400000c

0800141c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	460a      	mov	r2, r1
 8001426:	71fb      	strb	r3, [r7, #7]
 8001428:	4613      	mov	r3, r2
 800142a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800142c:	4b2e      	ldr	r3, [pc, #184]	@ (80014e8 <BSP_PB_Init+0xcc>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001432:	4a2d      	ldr	r2, [pc, #180]	@ (80014e8 <BSP_PB_Init+0xcc>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800143c:	4b2a      	ldr	r3, [pc, #168]	@ (80014e8 <BSP_PB_Init+0xcc>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800144a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800144e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001450:	2302      	movs	r3, #2
 8001452:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001454:	2302      	movs	r3, #2
 8001456:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10c      	bne.n	8001478 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	4a21      	ldr	r2, [pc, #132]	@ (80014ec <BSP_PB_Init+0xd0>)
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	f107 020c 	add.w	r2, r7, #12
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f002 f915 	bl	80036a0 <HAL_GPIO_Init>
 8001476:	e031      	b.n	80014dc <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001478:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800147c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	4a1a      	ldr	r2, [pc, #104]	@ (80014ec <BSP_PB_Init+0xd0>)
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	f107 020c 	add.w	r2, r7, #12
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f002 f907 	bl	80036a0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4a16      	ldr	r2, [pc, #88]	@ (80014f0 <BSP_PB_Init+0xd4>)
 8001498:	441a      	add	r2, r3
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	4915      	ldr	r1, [pc, #84]	@ (80014f4 <BSP_PB_Init+0xd8>)
 800149e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4610      	mov	r0, r2
 80014a6:	f002 f8aa 	bl	80035fe <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4a10      	ldr	r2, [pc, #64]	@ (80014f0 <BSP_PB_Init+0xd4>)
 80014b0:	1898      	adds	r0, r3, r2
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	4a10      	ldr	r2, [pc, #64]	@ (80014f8 <BSP_PB_Init+0xdc>)
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	461a      	mov	r2, r3
 80014bc:	2100      	movs	r1, #0
 80014be:	f002 f87f 	bl	80035c0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80014c2:	2028      	movs	r0, #40	@ 0x28
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	4a0d      	ldr	r2, [pc, #52]	@ (80014fc <BSP_PB_Init+0xe0>)
 80014c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014cc:	2200      	movs	r2, #0
 80014ce:	4619      	mov	r1, r3
 80014d0:	f000 fa46 	bl	8001960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80014d4:	2328      	movs	r3, #40	@ 0x28
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fa5c 	bl	8001994 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3720      	adds	r7, #32
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	58024400 	.word	0x58024400
 80014ec:	24000018 	.word	0x24000018
 80014f0:	240003d0 	.word	0x240003d0
 80014f4:	0801b7f4 	.word	0x0801b7f4
 80014f8:	2400001c 	.word	0x2400001c
 80014fc:	24000020 	.word	0x24000020

08001500 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <BSP_PB_IRQHandler+0x20>)
 8001510:	4413      	add	r3, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f002 f888 	bl	8003628 <HAL_EXTI_IRQHandler>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	240003d0 	.word	0x240003d0

08001524 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001552:	f06f 0301 	mvn.w	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	e018      	b.n	800158c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2294      	movs	r2, #148	@ 0x94
 800155e:	fb02 f303 	mul.w	r3, r2, r3
 8001562:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <BSP_COM_Init+0x5c>)
 8001564:	4413      	add	r3, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f86e 	bl	8001648 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2294      	movs	r2, #148	@ 0x94
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	4a08      	ldr	r2, [pc, #32]	@ (8001598 <BSP_COM_Init+0x5c>)
 8001576:	4413      	add	r3, r2
 8001578:	6839      	ldr	r1, [r7, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f80e 	bl	800159c <MX_USART3_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d002      	beq.n	800158c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001586:	f06f 0303 	mvn.w	r3, #3
 800158a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800158c:	68fb      	ldr	r3, [r7, #12]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	240003d8 	.word	0x240003d8

0800159c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <MX_USART3_Init+0x60>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	220c      	movs	r2, #12
 80015ba:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	895b      	ldrh	r3, [r3, #10]
 80015c0:	461a      	mov	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	891b      	ldrh	r3, [r3, #8]
 80015d2:	461a      	mov	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	899b      	ldrh	r3, [r3, #12]
 80015dc:	461a      	mov	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015e8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f004 f858 	bl	80056a0 <HAL_UART_Init>
 80015f0:	4603      	mov	r3, r0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	24000008 	.word	0x24000008

08001600 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001608:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <__io_putchar+0x30>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	2394      	movs	r3, #148	@ 0x94
 8001610:	fb02 f303 	mul.w	r3, r2, r3
 8001614:	4a07      	ldr	r2, [pc, #28]	@ (8001634 <__io_putchar+0x34>)
 8001616:	1898      	adds	r0, r3, r2
 8001618:	1d39      	adds	r1, r7, #4
 800161a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800161e:	2201      	movs	r2, #1
 8001620:	f004 f898 	bl	8005754 <HAL_UART_Transmit>
  return ch;
 8001624:	687b      	ldr	r3, [r7, #4]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2400046c 	.word	0x2400046c
 8001634:	240003d8 	.word	0x240003d8

08001638 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff ff71 	bl	8001524 <BSP_PB_Callback>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	@ 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001650:	4b27      	ldr	r3, [pc, #156]	@ (80016f0 <COM1_MspInit+0xa8>)
 8001652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001656:	4a26      	ldr	r2, [pc, #152]	@ (80016f0 <COM1_MspInit+0xa8>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001660:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <COM1_MspInit+0xa8>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800166e:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <COM1_MspInit+0xa8>)
 8001670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001674:	4a1e      	ldr	r2, [pc, #120]	@ (80016f0 <COM1_MspInit+0xa8>)
 8001676:	f043 0308 	orr.w	r3, r3, #8
 800167a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800167e:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <COM1_MspInit+0xa8>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800168c:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <COM1_MspInit+0xa8>)
 800168e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001692:	4a17      	ldr	r2, [pc, #92]	@ (80016f0 <COM1_MspInit+0xa8>)
 8001694:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001698:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <COM1_MspInit+0xa8>)
 800169e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80016aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016ae:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b4:	2302      	movs	r3, #2
 80016b6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80016b8:	2301      	movs	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80016bc:	2307      	movs	r3, #7
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	480b      	ldr	r0, [pc, #44]	@ (80016f4 <COM1_MspInit+0xac>)
 80016c8:	f001 ffea 	bl	80036a0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80016cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016d0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80016d6:	2307      	movs	r3, #7
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <COM1_MspInit+0xac>)
 80016e2:	f001 ffdd 	bl	80036a0 <HAL_GPIO_Init>
}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	@ 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	58024400 	.word	0x58024400
 80016f4:	58020c00 	.word	0x58020c00

080016f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fe:	2003      	movs	r0, #3
 8001700:	f000 f923 	bl	800194a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001704:	f003 f82e 	bl	8004764 <HAL_RCC_GetSysClockFreq>
 8001708:	4602      	mov	r2, r0
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <HAL_Init+0x68>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	4913      	ldr	r1, [pc, #76]	@ (8001764 <HAL_Init+0x6c>)
 8001716:	5ccb      	ldrb	r3, [r1, r3]
 8001718:	f003 031f 	and.w	r3, r3, #31
 800171c:	fa22 f303 	lsr.w	r3, r2, r3
 8001720:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001722:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <HAL_Init+0x68>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	4a0e      	ldr	r2, [pc, #56]	@ (8001764 <HAL_Init+0x6c>)
 800172c:	5cd3      	ldrb	r3, [r2, r3]
 800172e:	f003 031f 	and.w	r3, r3, #31
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
 8001738:	4a0b      	ldr	r2, [pc, #44]	@ (8001768 <HAL_Init+0x70>)
 800173a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800173c:	4a0b      	ldr	r2, [pc, #44]	@ (800176c <HAL_Init+0x74>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001742:	200f      	movs	r0, #15
 8001744:	f7ff fb56 	bl	8000df4 <HAL_InitTick>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e002      	b.n	8001758 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001752:	f7ff fb31 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	58024400 	.word	0x58024400
 8001764:	0801b7dc 	.word	0x0801b7dc
 8001768:	24000004 	.word	0x24000004
 800176c:	24000000 	.word	0x24000000

08001770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_IncTick+0x20>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_IncTick+0x24>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	4a04      	ldr	r2, [pc, #16]	@ (8001794 <HAL_IncTick+0x24>)
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	24000028 	.word	0x24000028
 8001794:	24000470 	.word	0x24000470

08001798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return uwTick;
 800179c:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <HAL_GetTick+0x14>)
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	24000470 	.word	0x24000470

080017b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017b4:	4b03      	ldr	r3, [pc, #12]	@ (80017c4 <HAL_GetREVID+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0c1b      	lsrs	r3, r3, #16
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	5c001000 	.word	0x5c001000

080017c8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80017d8:	4904      	ldr	r1, [pc, #16]	@ (80017ec <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	58000400 	.word	0x58000400

080017f0 <__NVIC_SetPriorityGrouping>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <__NVIC_SetPriorityGrouping+0x40>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 800181a:	4313      	orrs	r3, r2
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <__NVIC_SetPriorityGrouping+0x40>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00
 8001834:	05fa0000 	.word	0x05fa0000

08001838 <__NVIC_GetPriorityGrouping>:
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_EnableIRQ>:
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800185e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db0b      	blt.n	800187e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	4907      	ldr	r1, [pc, #28]	@ (800188c <__NVIC_EnableIRQ+0x38>)
 800186e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2001      	movs	r0, #1
 8001876:	fa00 f202 	lsl.w	r2, r0, r2
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100

08001890 <__NVIC_SetPriority>:
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800189c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0a      	blt.n	80018ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	490c      	ldr	r1, [pc, #48]	@ (80018dc <__NVIC_SetPriority+0x4c>)
 80018aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ae:	0112      	lsls	r2, r2, #4
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80018b8:	e00a      	b.n	80018d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4908      	ldr	r1, [pc, #32]	@ (80018e0 <__NVIC_SetPriority+0x50>)
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	3b04      	subs	r3, #4
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	440b      	add	r3, r1
 80018ce:	761a      	strb	r2, [r3, #24]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <NVIC_EncodePriority>:
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	@ 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	2b04      	cmp	r3, #4
 8001900:	bf28      	it	cs
 8001902:	2304      	movcs	r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3304      	adds	r3, #4
 800190a:	2b06      	cmp	r3, #6
 800190c:	d902      	bls.n	8001914 <NVIC_EncodePriority+0x30>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3b03      	subs	r3, #3
 8001912:	e000      	b.n	8001916 <NVIC_EncodePriority+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43d9      	mvns	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	4313      	orrs	r3, r2
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	@ 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ff4c 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800196e:	f7ff ff63 	bl	8001838 <__NVIC_GetPriorityGrouping>
 8001972:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	68b9      	ldr	r1, [r7, #8]
 8001978:	6978      	ldr	r0, [r7, #20]
 800197a:	f7ff ffb3 	bl	80018e4 <NVIC_EncodePriority>
 800197e:	4602      	mov	r2, r0
 8001980:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001984:	4611      	mov	r1, r2
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff82 	bl	8001890 <__NVIC_SetPriority>
}
 800198c:	bf00      	nop
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ff56 	bl	8001854 <__NVIC_EnableIRQ>
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019b4:	f3bf 8f5f 	dmb	sy
}
 80019b8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80019ba:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <HAL_MPU_Disable+0x28>)
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	4a06      	ldr	r2, [pc, #24]	@ (80019d8 <HAL_MPU_Disable+0x28>)
 80019c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019c4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80019c6:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <HAL_MPU_Disable+0x2c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	605a      	str	r2, [r3, #4]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00
 80019dc:	e000ed90 	.word	0xe000ed90

080019e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80019e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001a18 <HAL_MPU_Enable+0x38>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80019f2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <HAL_MPU_Enable+0x3c>)
 80019f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f6:	4a09      	ldr	r2, [pc, #36]	@ (8001a1c <HAL_MPU_Enable+0x3c>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019fc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80019fe:	f3bf 8f4f 	dsb	sy
}
 8001a02:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a04:	f3bf 8f6f 	isb	sy
}
 8001a08:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000ed90 	.word	0xe000ed90
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	785a      	ldrb	r2, [r3, #1]
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <HAL_MPU_ConfigRegion+0x7c>)
 8001a2e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001a30:	4b1a      	ldr	r3, [pc, #104]	@ (8001a9c <HAL_MPU_ConfigRegion+0x7c>)
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	4a19      	ldr	r2, [pc, #100]	@ (8001a9c <HAL_MPU_ConfigRegion+0x7c>)
 8001a36:	f023 0301 	bic.w	r3, r3, #1
 8001a3a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001a3c:	4a17      	ldr	r2, [pc, #92]	@ (8001a9c <HAL_MPU_ConfigRegion+0x7c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7b1b      	ldrb	r3, [r3, #12]
 8001a48:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	7adb      	ldrb	r3, [r3, #11]
 8001a4e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7a9b      	ldrb	r3, [r3, #10]
 8001a56:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7b5b      	ldrb	r3, [r3, #13]
 8001a5e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7b9b      	ldrb	r3, [r3, #14]
 8001a66:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7bdb      	ldrb	r3, [r3, #15]
 8001a6e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7a5b      	ldrb	r3, [r3, #9]
 8001a76:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7a1b      	ldrb	r3, [r3, #8]
 8001a7e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a80:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	7812      	ldrb	r2, [r2, #0]
 8001a86:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a88:	4a04      	ldr	r2, [pc, #16]	@ (8001a9c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a8a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a8c:	6113      	str	r3, [r2, #16]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed90 	.word	0xe000ed90

08001aa0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_GetCurrentCPUID+0x20>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aac:	2b70      	cmp	r3, #112	@ 0x70
 8001aae:	d101      	bne.n	8001ab4 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8001ab4:	2301      	movs	r3, #1
  }
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e0e3      	b.n	8001c9e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d106      	bne.n	8001aee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f005 f971 	bl	8006dd0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	4b6e      	ldr	r3, [pc, #440]	@ (8001ca8 <HAL_ETH_Init+0x1e4>)
 8001af0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001af4:	4a6c      	ldr	r2, [pc, #432]	@ (8001ca8 <HAL_ETH_Init+0x1e4>)
 8001af6:	f043 0302 	orr.w	r3, r3, #2
 8001afa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001afe:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca8 <HAL_ETH_Init+0x1e4>)
 8001b00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	7a1b      	ldrb	r3, [r3, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d103      	bne.n	8001b1c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001b14:	2000      	movs	r0, #0
 8001b16:	f7ff fe57 	bl	80017c8 <HAL_SYSCFG_ETHInterfaceSelect>
 8001b1a:	e003      	b.n	8001b24 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001b1c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001b20:	f7ff fe52 	bl	80017c8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001b24:	4b61      	ldr	r3, [pc, #388]	@ (8001cac <HAL_ETH_Init+0x1e8>)
 8001b26:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b3e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b40:	f7ff fe2a 	bl	8001798 <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001b46:	e011      	b.n	8001b6c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001b48:	f7ff fe26 	bl	8001798 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b56:	d909      	bls.n	8001b6c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	22e0      	movs	r2, #224	@ 0xe0
 8001b64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e098      	b.n	8001c9e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1e4      	bne.n	8001b48 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 ff32 	bl	80029e8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001b84:	f002 ff68 	bl	8004a58 <HAL_RCC_GetHCLKFreq>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4a49      	ldr	r2, [pc, #292]	@ (8001cb0 <HAL_ETH_Init+0x1ec>)
 8001b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b90:	0c9a      	lsrs	r2, r3, #18
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3a01      	subs	r2, #1
 8001b98:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f001 f92f 	bl	8002e00 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001baa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001bae:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001bba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bbe:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d009      	beq.n	8001be2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	22e0      	movs	r2, #224	@ 0xe0
 8001bda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e05d      	b.n	8001c9e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bea:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001bee:	4b31      	ldr	r3, [pc, #196]	@ (8001cb4 <HAL_ETH_Init+0x1f0>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6952      	ldr	r2, [r2, #20]
 8001bf6:	0051      	lsls	r1, r2, #1
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c02:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f001 f997 	bl	8002f3a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f001 f9dd 	bl	8002fcc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	3305      	adds	r3, #5
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	021a      	lsls	r2, r3, #8
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	3304      	adds	r3, #4
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	3303      	adds	r3, #3
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	061a      	lsls	r2, r3, #24
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	3302      	adds	r3, #2
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	041b      	lsls	r3, r3, #16
 8001c44:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c50:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c5e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c60:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_ETH_Init+0x1f4>)
 8001c72:	430b      	orrs	r3, r1
 8001c74:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <HAL_ETH_Init+0x1f8>)
 8001c86:	430b      	orrs	r3, r1
 8001c88:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2210      	movs	r2, #16
 8001c98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	58024400 	.word	0x58024400
 8001cac:	58000400 	.word	0x58000400
 8001cb0:	431bde83 	.word	0x431bde83
 8001cb4:	ffff8001 	.word	0xffff8001
 8001cb8:	0c020060 	.word	0x0c020060
 8001cbc:	0c20c000 	.word	0x0c20c000

08001cc0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cce:	2b10      	cmp	r3, #16
 8001cd0:	d165      	bne.n	8001d9e <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f9e4 	bl	80020b4 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cf4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d04:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d10:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d20:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d2c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8001d38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d3c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0202 	orr.w	r2, r2, #2
 8001d62:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d7c:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d8e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2240      	movs	r2, #64	@ 0x40
 8001d96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e000      	b.n	8001da0 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
  }
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001db6:	2b40      	cmp	r3, #64	@ 0x40
 8001db8:	d165      	bne.n	8001e86 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dca:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b30      	ldr	r3, [pc, #192]	@ (8001e94 <HAL_ETH_Stop_IT+0xec>)
 8001dd4:	400b      	ands	r3, r1
 8001dd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001dda:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001de6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	f023 0301 	bic.w	r3, r3, #1
 8001df2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001df6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e02:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e12:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0201 	bic.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0202 	bic.w	r2, r2, #2
 8001e48:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	e00e      	b.n	8001e6e <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	3212      	adds	r2, #18
 8001e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5a:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d9ed      	bls.n	8001e50 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2210      	movs	r2, #16
 8001e7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
  }
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	ffff2f3e 	.word	0xffff2f3e

08001e98 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eae:	f043 0201 	orr.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e03a      	b.n	8001f32 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ec2:	2b40      	cmp	r3, #64	@ 0x40
 8001ec4:	d134      	bne.n	8001f30 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	6839      	ldr	r1, [r7, #0]
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f001 f8d8 	bl	8003088 <ETH_Prepare_Tx_Descriptors>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee4:	f043 0202 	orr.w	r2, r3, #2
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e01f      	b.n	8001f32 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ef2:	f3bf 8f4f 	dsb	sy
}
 8001ef6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d904      	bls.n	8001f14 <HAL_ETH_Transmit_IT+0x7c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0e:	1f1a      	subs	r2, r3, #4
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3106      	adds	r1, #6
 8001f20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f28:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e000      	b.n	8001f32 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b088      	sub	sp, #32
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f58:	f043 0201 	orr.w	r2, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e0a2      	b.n	80020ac <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f6c:	2b40      	cmp	r3, #64	@ 0x40
 8001f6e:	d001      	beq.n	8001f74 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e09b      	b.n	80020ac <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f78:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	3212      	adds	r2, #18
 8001f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f84:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f8a:	f1c3 0304 	rsb	r3, r3, #4
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f90:	e064      	b.n	800205c <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d007      	beq.n	8001fae <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d103      	bne.n	8001fc2 <HAL_ETH_ReadData+0x88>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d03a      	beq.n	8002038 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001ffe:	2301      	movs	r3, #1
 8002000:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002012:	461a      	mov	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	b29b      	uxth	r3, r3
 8002018:	f005 f8cc 	bl	80071b4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	441a      	add	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	2200      	movs	r2, #0
 8002036:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	3301      	adds	r3, #1
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d902      	bls.n	800204a <HAL_ETH_ReadData+0x110>
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	3b04      	subs	r3, #4
 8002048:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69fa      	ldr	r2, [r7, #28]
 800204e:	3212      	adds	r2, #18
 8002050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002054:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3301      	adds	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8002060:	2b00      	cmp	r3, #0
 8002062:	db06      	blt.n	8002072 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	429a      	cmp	r2, r3
 800206a:	d202      	bcs.n	8002072 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d08f      	beq.n	8001f92 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	441a      	add	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f814 	bl	80020b4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002092:	7cfb      	ldrb	r3, [r7, #19]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d108      	bne.n	80020aa <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e000      	b.n	80020ac <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3720      	adds	r7, #32
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80020c0:	2301      	movs	r3, #1
 80020c2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020c8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	3212      	adds	r2, #18
 80020d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020da:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80020dc:	e038      	b.n	8002150 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d112      	bne.n	800210c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80020e6:	f107 0308 	add.w	r3, r7, #8
 80020ea:	4618      	mov	r0, r3
 80020ec:	f005 f832 	bl	8007154 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	74fb      	strb	r3, [r7, #19]
 80020fa:	e007      	b.n	800210c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	461a      	mov	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	461a      	mov	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d01e      	beq.n	8002150 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	2b00      	cmp	r3, #0
 8002118:	d004      	beq.n	8002124 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	e003      	b.n	800212c <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 800212a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	3301      	adds	r3, #1
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d902      	bls.n	800213e <ETH_UpdateDescriptor+0x8a>
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	3b04      	subs	r3, #4
 800213c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	3212      	adds	r2, #18
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	617b      	str	r3, [r7, #20]
      desccount--;
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	3b01      	subs	r3, #1
 800214e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <ETH_UpdateDescriptor+0xa8>
 8002156:	7cfb      	ldrb	r3, [r7, #19]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1c0      	bne.n	80020de <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	429a      	cmp	r2, r3
 8002164:	d01b      	beq.n	800219e <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3303      	adds	r3, #3
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002170:	f3bf 8f5f 	dmb	sy
}
 8002174:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6919      	ldr	r1, [r3, #16]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4613      	mov	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	18ca      	adds	r2, r1, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800218e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800219e:	bf00      	nop
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3318      	adds	r3, #24
 80021b2:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b8:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021be:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80021c4:	e047      	b.n	8002256 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80021c6:	2301      	movs	r3, #1
 80021c8:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	3304      	adds	r3, #4
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10a      	bne.n	80021f6 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	3301      	adds	r3, #1
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d902      	bls.n	80021f2 <HAL_ETH_ReleaseTxPacket+0x4c>
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	3b04      	subs	r3, #4
 80021f0:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80021f6:	7bbb      	ldrb	r3, [r7, #14]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d02c      	beq.n	8002256 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68d9      	ldr	r1, [r3, #12]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	440b      	add	r3, r1
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	db1f      	blt.n	8002252 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	3304      	adds	r3, #4
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4618      	mov	r0, r3
 8002220:	f005 f830 	bl	8007284 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	3304      	adds	r3, #4
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	2200      	movs	r2, #0
 8002230:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	3301      	adds	r3, #1
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d902      	bls.n	8002244 <HAL_ETH_ReleaseTxPacket+0x9e>
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	3b04      	subs	r3, #4
 8002242:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002250:	e001      	b.n	8002256 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <HAL_ETH_ReleaseTxPacket+0xbc>
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1b1      	bne.n	80021c6 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800227c:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002286:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800228a:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002294:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002298:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 800229a:	4b77      	ldr	r3, [pc, #476]	@ (8002478 <HAL_ETH_IRQHandler+0x20c>)
 800229c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229e:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 80022a0:	4b76      	ldr	r3, [pc, #472]	@ (800247c <HAL_ETH_IRQHandler+0x210>)
 80022a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a4:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d010      	beq.n	80022d2 <HAL_ETH_IRQHandler+0x66>
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00b      	beq.n	80022d2 <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022c2:	461a      	mov	r2, r3
 80022c4:	f248 0340 	movw	r3, #32832	@ 0x8040
 80022c8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f004 faad 	bl	800682c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d010      	beq.n	80022fe <HAL_ETH_IRQHandler+0x92>
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ee:	461a      	mov	r2, r3
 80022f0:	f248 0301 	movw	r3, #32769	@ 0x8001
 80022f4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f004 faa7 	bl	800684c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d047      	beq.n	8002398 <HAL_ETH_IRQHandler+0x12c>
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d042      	beq.n	8002398 <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002318:	f043 0208 	orr.w	r2, r3, #8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01e      	beq.n	800236a <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002334:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8002338:	f241 1302 	movw	r3, #4354	@ 0x1102
 800233c:	4013      	ands	r3, r2
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800234c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002358:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800235c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	22e0      	movs	r2, #224	@ 0xe0
 8002364:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002368:	e013      	b.n	8002392 <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002372:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002376:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002388:	461a      	mov	r2, r3
 800238a:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 800238e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f004 fa6a 	bl	800686c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d104      	bne.n	80023ac <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d019      	beq.n	80023e0 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b2:	f043 0210 	orr.w	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	22e0      	movs	r2, #224	@ 0xe0
 80023ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f004 fa4a 	bl	800686c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00f      	beq.n	800240a <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80023f2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f83f 	bl	8002480 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00f      	beq.n	8002434 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800241c:	f003 020f 	and.w	r2, r3, #15
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f834 	bl	8002494 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8002434:	f7ff fb34 	bl	8001aa0 <HAL_GetCurrentCPUID>
 8002438:	4603      	mov	r3, r0
 800243a:	2b03      	cmp	r3, #3
 800243c:	d10c      	bne.n	8002458 <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002448:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <HAL_ETH_IRQHandler+0x20c>)
 800244a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800244e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f829 	bl	80024a8 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8002456:	e00b      	b.n	8002470 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d006      	beq.n	8002470 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002462:	4b06      	ldr	r3, [pc, #24]	@ (800247c <HAL_ETH_IRQHandler+0x210>)
 8002464:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002468:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f81c 	bl	80024a8 <HAL_ETH_WakeUpCallback>
}
 8002470:	bf00      	nop
 8002472:	3720      	adds	r7, #32
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	58000080 	.word	0x58000080
 800247c:	580000c0 	.word	0x580000c0

08002480 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e03e      	b.n	800255c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024e6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	055b      	lsls	r3, r3, #21
 80024f2:	4313      	orrs	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	041b      	lsls	r3, r3, #16
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f043 030c 	orr.w	r3, r3, #12
 800250a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800251e:	f7ff f93b 	bl	8001798 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002524:	e009      	b.n	800253a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002526:	f7ff f937 	bl	8001798 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002534:	d901      	bls.n	800253a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e010      	b.n	800255c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1ed      	bne.n	8002526 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002552:	b29b      	uxth	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e03c      	b.n	8002600 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800258e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	055b      	lsls	r3, r3, #21
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	041b      	lsls	r3, r3, #16
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f023 030c 	bic.w	r3, r3, #12
 80025b2:	f043 0304 	orr.w	r3, r3, #4
 80025b6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <HAL_ETH_WritePHYRegister+0xa4>)
 80025c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80025ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002608 <HAL_ETH_WritePHYRegister+0xa4>)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80025d2:	f7ff f8e1 	bl	8001798 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80025d8:	e009      	b.n	80025ee <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80025da:	f7ff f8dd 	bl	8001798 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025e8:	d901      	bls.n	80025ee <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e008      	b.n	8002600 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1ed      	bne.n	80025da <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40028000 	.word	0x40028000

0800260c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e1c3      	b.n	80029a8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 020c 	and.w	r2, r3, #12
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf14      	ite	ne
 800263c:	2301      	movne	r3, #1
 800263e:	2300      	moveq	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	461a      	mov	r2, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	bf0c      	ite	eq
 8002666:	2301      	moveq	r3, #1
 8002668:	2300      	movne	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 800267e:	2b00      	cmp	r3, #0
 8002680:	bf14      	ite	ne
 8002682:	2301      	movne	r3, #1
 8002684:	2300      	moveq	r3, #0
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	461a      	mov	r2, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80026ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bf14      	ite	ne
 80026b6:	2301      	movne	r3, #1
 80026b8:	2300      	moveq	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf14      	ite	ne
 80026d0:	2301      	movne	r3, #1
 80026d2:	2300      	moveq	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf14      	ite	ne
 8002706:	2301      	movne	r3, #1
 8002708:	2300      	moveq	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002736:	2b00      	cmp	r3, #0
 8002738:	bf0c      	ite	eq
 800273a:	2301      	moveq	r3, #1
 800273c:	2300      	movne	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf14      	ite	ne
 800276e:	2301      	movne	r3, #1
 8002770:	2300      	moveq	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf14      	ite	ne
 8002788:	2301      	movne	r3, #1
 800278a:	2300      	moveq	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800279a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf14      	ite	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	2300      	moveq	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bf14      	ite	ne
 80027ca:	2301      	movne	r3, #1
 80027cc:	2300      	moveq	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf0c      	ite	eq
 8002800:	2301      	moveq	r3, #1
 8002802:	2300      	movne	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf14      	ite	ne
 800281c:	2301      	movne	r3, #1
 800281e:	2300      	moveq	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002830:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf14      	ite	ne
 8002838:	2301      	movne	r3, #1
 800283a:	2300      	moveq	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf14      	ite	ne
 8002854:	2301      	movne	r3, #1
 8002856:	2300      	moveq	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	0e5b      	lsrs	r3, r3, #25
 800286a:	f003 021f 	and.w	r2, r3, #31
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf14      	ite	ne
 8002880:	2301      	movne	r3, #1
 8002882:	2300      	moveq	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 020f 	and.w	r2, r3, #15
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	bf14      	ite	ne
 80028aa:	2301      	movne	r3, #1
 80028ac:	2300      	moveq	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf0c      	ite	eq
 80028c6:	2301      	moveq	r3, #1
 80028c8:	2300      	movne	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028da:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e8:	0c1b      	lsrs	r3, r3, #16
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002916:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800291a:	2b00      	cmp	r3, #0
 800291c:	bf14      	ite	ne
 800291e:	2301      	movne	r3, #1
 8002920:	2300      	moveq	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002934:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002944:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf14      	ite	ne
 800295c:	2301      	movne	r3, #1
 800295e:	2300      	moveq	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	bf14      	ite	ne
 800297a:	2301      	movne	r3, #1
 800297c:	2300      	moveq	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e00b      	b.n	80029e0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d105      	bne.n	80029de <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80029d2:	6839      	ldr	r1, [r7, #0]
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f871 	bl	8002abc <ETH_SetMACConfig>

    return HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	e000      	b.n	80029e0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
  }
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002a02:	f002 f829 	bl	8004a58 <HAL_RCC_GetHCLKFreq>
 8002a06:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002a74 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d804      	bhi.n	8002a1a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e022      	b.n	8002a60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	4a16      	ldr	r2, [pc, #88]	@ (8002a78 <HAL_ETH_SetMDIOClockRange+0x90>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d204      	bcs.n	8002a2c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	e019      	b.n	8002a60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4a13      	ldr	r2, [pc, #76]	@ (8002a7c <HAL_ETH_SetMDIOClockRange+0x94>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d915      	bls.n	8002a60 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4a12      	ldr	r2, [pc, #72]	@ (8002a80 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d804      	bhi.n	8002a46 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	e00c      	b.n	8002a60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	4a0e      	ldr	r2, [pc, #56]	@ (8002a84 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d804      	bhi.n	8002a58 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	e003      	b.n	8002a60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	02160ebf 	.word	0x02160ebf
 8002a78:	03938700 	.word	0x03938700
 8002a7c:	05f5e0ff 	.word	0x05f5e0ff
 8002a80:	08f0d17f 	.word	0x08f0d17f
 8002a84:	0ee6b27f 	.word	0x0ee6b27f

08002a88 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002ace:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	791b      	ldrb	r3, [r3, #4]
 8002ad4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002ad6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	7b1b      	ldrb	r3, [r3, #12]
 8002adc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002ade:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	7b5b      	ldrb	r3, [r3, #13]
 8002ae4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002ae6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	7b9b      	ldrb	r3, [r3, #14]
 8002aec:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002aee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	7bdb      	ldrb	r3, [r3, #15]
 8002af4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002af6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	7c12      	ldrb	r2, [r2, #16]
 8002afc:	2a00      	cmp	r2, #0
 8002afe:	d102      	bne.n	8002b06 <ETH_SetMACConfig+0x4a>
 8002b00:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002b04:	e000      	b.n	8002b08 <ETH_SetMACConfig+0x4c>
 8002b06:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002b08:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	7c52      	ldrb	r2, [r2, #17]
 8002b0e:	2a00      	cmp	r2, #0
 8002b10:	d102      	bne.n	8002b18 <ETH_SetMACConfig+0x5c>
 8002b12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b16:	e000      	b.n	8002b1a <ETH_SetMACConfig+0x5e>
 8002b18:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002b1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	7c9b      	ldrb	r3, [r3, #18]
 8002b20:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002b22:	431a      	orrs	r2, r3
               macconf->Speed |
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002b28:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002b2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	7f1b      	ldrb	r3, [r3, #28]
 8002b34:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002b36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	7f5b      	ldrb	r3, [r3, #29]
 8002b3c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002b3e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	7f92      	ldrb	r2, [r2, #30]
 8002b44:	2a00      	cmp	r2, #0
 8002b46:	d102      	bne.n	8002b4e <ETH_SetMACConfig+0x92>
 8002b48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b4c:	e000      	b.n	8002b50 <ETH_SetMACConfig+0x94>
 8002b4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002b50:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	7fdb      	ldrb	r3, [r3, #31]
 8002b56:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002b58:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002b60:	2a00      	cmp	r2, #0
 8002b62:	d102      	bne.n	8002b6a <ETH_SetMACConfig+0xae>
 8002b64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b68:	e000      	b.n	8002b6c <ETH_SetMACConfig+0xb0>
 8002b6a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002b6c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002b72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b7a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002b7c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b56      	ldr	r3, [pc, #344]	@ (8002ce8 <ETH_SetMACConfig+0x22c>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	68f9      	ldr	r1, [r7, #12]
 8002b96:	430b      	orrs	r3, r1
 8002b98:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ba6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002ba8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bb0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002bb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002bba:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002bbc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002bc4:	2a00      	cmp	r2, #0
 8002bc6:	d102      	bne.n	8002bce <ETH_SetMACConfig+0x112>
 8002bc8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002bcc:	e000      	b.n	8002bd0 <ETH_SetMACConfig+0x114>
 8002bce:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002bd0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	4b42      	ldr	r3, [pc, #264]	@ (8002cec <ETH_SetMACConfig+0x230>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	68f9      	ldr	r1, [r7, #12]
 8002bea:	430b      	orrs	r3, r1
 8002bec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bf4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf0 <ETH_SetMACConfig+0x234>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	68f9      	ldr	r1, [r7, #12]
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002c18:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c1e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002c26:	2a00      	cmp	r2, #0
 8002c28:	d101      	bne.n	8002c2e <ETH_SetMACConfig+0x172>
 8002c2a:	2280      	movs	r2, #128	@ 0x80
 8002c2c:	e000      	b.n	8002c30 <ETH_SetMACConfig+0x174>
 8002c2e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002c30:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c36:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c42:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002c46:	4013      	ands	r3, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	68f9      	ldr	r1, [r7, #12]
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002c58:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002c60:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6e:	f023 0103 	bic.w	r1, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002c86:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002ca2:	2a00      	cmp	r2, #0
 8002ca4:	d101      	bne.n	8002caa <ETH_SetMACConfig+0x1ee>
 8002ca6:	2240      	movs	r2, #64	@ 0x40
 8002ca8:	e000      	b.n	8002cac <ETH_SetMACConfig+0x1f0>
 8002caa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002cac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002cb4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002cb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002cbe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002ccc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	00048083 	.word	0x00048083
 8002cec:	c0f88000 	.word	0xc0f88000
 8002cf0:	fffffef0 	.word	0xfffffef0

08002cf4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b38      	ldr	r3, [pc, #224]	@ (8002dec <ETH_SetDMAConfig+0xf8>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	6811      	ldr	r1, [r2, #0]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	430b      	orrs	r3, r1
 8002d16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d1a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	791b      	ldrb	r3, [r3, #4]
 8002d20:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d26:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	7b1b      	ldrb	r3, [r3, #12]
 8002d2c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8002df0 <ETH_SetDMAConfig+0xfc>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	68f9      	ldr	r1, [r7, #12]
 8002d46:	430b      	orrs	r3, r1
 8002d48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d4c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	7b5b      	ldrb	r3, [r3, #13]
 8002d52:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d64:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002d68:	4b22      	ldr	r3, [pc, #136]	@ (8002df4 <ETH_SetDMAConfig+0x100>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	68f9      	ldr	r1, [r7, #12]
 8002d72:	430b      	orrs	r3, r1
 8002d74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d78:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	7d1b      	ldrb	r3, [r3, #20]
 8002d84:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d86:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	7f5b      	ldrb	r3, [r3, #29]
 8002d8c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002d9e:	4b16      	ldr	r3, [pc, #88]	@ (8002df8 <ETH_SetDMAConfig+0x104>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	68f9      	ldr	r1, [r7, #12]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dae:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	7f1b      	ldrb	r3, [r3, #28]
 8002db6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dc8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <ETH_SetDMAConfig+0x108>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	68f9      	ldr	r1, [r7, #12]
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ddc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	ffff87fd 	.word	0xffff87fd
 8002df0:	ffff2ffe 	.word	0xffff2ffe
 8002df4:	fffec000 	.word	0xfffec000
 8002df8:	ffc0efef 	.word	0xffc0efef
 8002dfc:	7fc0ffff 	.word	0x7fc0ffff

08002e00 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b0a4      	sub	sp, #144	@ 0x90
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002e24:	2301      	movs	r3, #1
 8002e26:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002e36:	2301      	movs	r3, #1
 8002e38:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e40:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002e58:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002e5c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002e64:	2300      	movs	r3, #0
 8002e66:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002e82:	2300      	movs	r3, #0
 8002e84:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e92:	2301      	movs	r3, #1
 8002e94:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002e98:	2320      	movs	r3, #32
 8002e9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002eaa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002eb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002eb4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002eda:	2300      	movs	r3, #0
 8002edc:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ee4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ee8:	4619      	mov	r1, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff fde6 	bl	8002abc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002f0a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002f0e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002f14:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002f18:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002f20:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002f24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002f26:	f107 0308 	add.w	r3, r7, #8
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff fee1 	bl	8002cf4 <ETH_SetDMAConfig>
}
 8002f32:	bf00      	nop
 8002f34:	3790      	adds	r7, #144	@ 0x90
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b085      	sub	sp, #20
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	e01d      	b.n	8002f84 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68d9      	ldr	r1, [r3, #12]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4413      	add	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	440b      	add	r3, r1
 8002f58:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2200      	movs	r2, #0
 8002f64:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	3206      	adds	r2, #6
 8002f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	3301      	adds	r3, #1
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d9de      	bls.n	8002f48 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fac:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fbc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	e023      	b.n	8003022 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6919      	ldr	r1, [r3, #16]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	440b      	add	r3, r1
 8002fea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2200      	movs	r2, #0
 8003002:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2200      	movs	r2, #0
 8003008:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2200      	movs	r2, #0
 800300e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	3212      	adds	r2, #18
 8003018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3301      	adds	r3, #1
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b03      	cmp	r3, #3
 8003026:	d9d8      	bls.n	8002fda <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800304e:	461a      	mov	r2, r3
 8003050:	2303      	movs	r3, #3
 8003052:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003062:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003076:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003088:	b480      	push	{r7}
 800308a:	b091      	sub	sp, #68	@ 0x44
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3318      	adds	r3, #24
 8003098:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80030a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b2:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80030be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030ca:	d007      	beq.n	80030dc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80030cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030d0:	3304      	adds	r3, #4
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80030dc:	2302      	movs	r3, #2
 80030de:	e266      	b.n	80035ae <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d044      	beq.n	8003176 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80030ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	4b75      	ldr	r3, [pc, #468]	@ (80032c8 <ETH_Prepare_Tx_Descriptors+0x240>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030f8:	431a      	orrs	r2, r3
 80030fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fc:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80030fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003108:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003118:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d027      	beq.n	8003176 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	b29a      	uxth	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003130:	041b      	lsls	r3, r3, #16
 8003132:	431a      	orrs	r2, r3
 8003134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003136:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003142:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003150:	431a      	orrs	r2, r3
 8003152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003154:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003164:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003174:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00e      	beq.n	80031a0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	4b51      	ldr	r3, [pc, #324]	@ (80032cc <ETH_Prepare_Tx_Descriptors+0x244>)
 8003188:	4013      	ands	r3, r2
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	6992      	ldr	r2, [r2, #24]
 800318e:	431a      	orrs	r2, r3
 8003190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003192:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800319c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d105      	bne.n	80031b8 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d036      	beq.n	8003226 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80031b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80031c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80031c4:	f3bf 8f5f 	dmb	sy
}
 80031c8:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80031ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d4:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80031d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031d8:	3301      	adds	r3, #1
 80031da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d902      	bls.n	80031e8 <ETH_Prepare_Tx_Descriptors+0x160>
 80031e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031e4:	3b04      	subs	r3, #4
 80031e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80031ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f0:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 80031f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f4:	3301      	adds	r3, #1
 80031f6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80031f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003200:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003204:	d10f      	bne.n	8003226 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	6a3a      	ldr	r2, [r7, #32]
 800320a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800320e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003210:	f3bf 8f5f 	dmb	sy
}
 8003214:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800321e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003220:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003222:	2302      	movs	r3, #2
 8003224:	e1c3      	b.n	80035ae <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003228:	3301      	adds	r3, #1
 800322a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800322c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003234:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	4b24      	ldr	r3, [pc, #144]	@ (80032cc <ETH_Prepare_Tx_Descriptors+0x244>)
 800323c:	4013      	ands	r3, r2
 800323e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003240:	6852      	ldr	r2, [r2, #4]
 8003242:	431a      	orrs	r2, r3
 8003244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003246:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8003248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d012      	beq.n	8003276 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8003250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	4b1a      	ldr	r3, [pc, #104]	@ (80032d0 <ETH_Prepare_Tx_Descriptors+0x248>)
 8003266:	4013      	ands	r3, r2
 8003268:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800326a:	6852      	ldr	r2, [r2, #4]
 800326c:	0412      	lsls	r2, r2, #16
 800326e:	431a      	orrs	r2, r3
 8003270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	e008      	b.n	8003288 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003278:	2200      	movs	r2, #0
 800327a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800327c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	4b13      	ldr	r3, [pc, #76]	@ (80032d0 <ETH_Prepare_Tx_Descriptors+0x248>)
 8003282:	4013      	ands	r3, r2
 8003284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003286:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2b00      	cmp	r3, #0
 8003292:	d021      	beq.n	80032d8 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	04db      	lsls	r3, r3, #19
 80032a2:	431a      	orrs	r2, r3
 80032a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80032a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	4b09      	ldr	r3, [pc, #36]	@ (80032d4 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	69d2      	ldr	r2, [r2, #28]
 80032b4:	431a      	orrs	r2, r3
 80032b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80032ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80032c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	e02e      	b.n	8003326 <ETH_Prepare_Tx_Descriptors+0x29e>
 80032c8:	ffff0000 	.word	0xffff0000
 80032cc:	ffffc000 	.word	0xffffc000
 80032d0:	c000ffff 	.word	0xc000ffff
 80032d4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80032d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	4b7b      	ldr	r3, [pc, #492]	@ (80034cc <ETH_Prepare_Tx_Descriptors+0x444>)
 80032de:	4013      	ands	r3, r2
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	6852      	ldr	r2, [r2, #4]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e8:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80032f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	431a      	orrs	r2, r3
 8003304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003306:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	431a      	orrs	r2, r3
 8003322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003324:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333e:	431a      	orrs	r2, r3
 8003340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003342:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800334c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800335c:	f3bf 8f5f 	dmb	sy
}
 8003360:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800336a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336c:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 80da 	beq.w	8003530 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800337c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	431a      	orrs	r2, r3
 800338a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338c:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800338e:	e0cf      	b.n	8003530 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800339a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800339c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800339e:	3301      	adds	r3, #1
 80033a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d902      	bls.n	80033ae <ETH_Prepare_Tx_Descriptors+0x326>
 80033a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033aa:	3b04      	subs	r3, #4
 80033ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80033b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80033c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c2:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80033c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033d0:	d007      	beq.n	80033e2 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80033d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d6:	3304      	adds	r3, #4
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d029      	beq.n	8003436 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ee:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80033f0:	2300      	movs	r3, #0
 80033f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033f4:	e019      	b.n	800342a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80033f6:	f3bf 8f5f 	dmb	sy
}
 80033fa:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80033fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003406:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800340a:	3301      	adds	r3, #1
 800340c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800340e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003410:	2b03      	cmp	r3, #3
 8003412:	d902      	bls.n	800341a <ETH_Prepare_Tx_Descriptors+0x392>
 8003414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003416:	3b04      	subs	r3, #4
 8003418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800341e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003422:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003426:	3301      	adds	r3, #1
 8003428:	63bb      	str	r3, [r7, #56]	@ 0x38
 800342a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800342c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800342e:	429a      	cmp	r2, r3
 8003430:	d3e1      	bcc.n	80033f6 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8003432:	2302      	movs	r3, #2
 8003434:	e0bb      	b.n	80035ae <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8003436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003438:	3301      	adds	r3, #1
 800343a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800343c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800344c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	4b1f      	ldr	r3, [pc, #124]	@ (80034d0 <ETH_Prepare_Tx_Descriptors+0x448>)
 8003452:	4013      	ands	r3, r2
 8003454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003456:	6852      	ldr	r2, [r2, #4]
 8003458:	431a      	orrs	r2, r3
 800345a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800345e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d012      	beq.n	800348c <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800346c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003474:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	4b16      	ldr	r3, [pc, #88]	@ (80034d4 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800347c:	4013      	ands	r3, r2
 800347e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003480:	6852      	ldr	r2, [r2, #4]
 8003482:	0412      	lsls	r2, r2, #16
 8003484:	431a      	orrs	r2, r3
 8003486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003488:	609a      	str	r2, [r3, #8]
 800348a:	e008      	b.n	800349e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800348c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348e:	2200      	movs	r2, #0
 8003490:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	4b0f      	ldr	r3, [pc, #60]	@ (80034d4 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003498:	4013      	ands	r3, r2
 800349a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800349c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d018      	beq.n	80034dc <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80034aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <ETH_Prepare_Tx_Descriptors+0x450>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	69d2      	ldr	r2, [r2, #28]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ba:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80034bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80034c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c6:	60da      	str	r2, [r3, #12]
 80034c8:	e020      	b.n	800350c <ETH_Prepare_Tx_Descriptors+0x484>
 80034ca:	bf00      	nop
 80034cc:	ffff8000 	.word	0xffff8000
 80034d0:	ffffc000 	.word	0xffffc000
 80034d4:	c000ffff 	.word	0xc000ffff
 80034d8:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80034dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	4b36      	ldr	r3, [pc, #216]	@ (80035bc <ETH_Prepare_Tx_Descriptors+0x534>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	6852      	ldr	r2, [r2, #4]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ec:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80034fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	431a      	orrs	r2, r3
 8003508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800350c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350e:	3301      	adds	r3, #1
 8003510:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003512:	f3bf 8f5f 	dmb	sy
}
 8003516:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003522:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800352c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	f47f af2b 	bne.w	8003390 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d006      	beq.n	800354e <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	e005      	b.n	800355a <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003558:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800355a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003564:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003568:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800356a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800356c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800356e:	3304      	adds	r3, #4
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800357a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357c:	f3ef 8310 	mrs	r3, PRIMASK
 8003580:	61bb      	str	r3, [r7, #24]
  return(result);
 8003582:	69bb      	ldr	r3, [r7, #24]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003584:	61fb      	str	r3, [r7, #28]
 8003586:	2301      	movs	r3, #1
 8003588:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f383 8810 	msr	PRIMASK, r3
}
 8003590:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003598:	4413      	add	r3, r2
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	629a      	str	r2, [r3, #40]	@ 0x28
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f383 8810 	msr	PRIMASK, r3
}
 80035aa:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3744      	adds	r7, #68	@ 0x44
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	ffff8000 	.word	0xffff8000

080035c0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	460b      	mov	r3, r1
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e00a      	b.n	80035f2 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80035dc:	7afb      	ldrb	r3, [r7, #11]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d103      	bne.n	80035ea <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	605a      	str	r2, [r3, #4]
      break;
 80035e8:	e002      	b.n	80035f0 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
      break;
 80035ee:	bf00      	nop
  }

  return status;
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e003      	b.n	800361a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003618:	2300      	movs	r3, #0
  }
}
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 031f 	and.w	r3, r3, #31
 8003644:	2201      	movs	r2, #1
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 800364c:	f7fe fa28 	bl	8001aa0 <HAL_GetCurrentCPUID>
 8003650:	4603      	mov	r3, r0
 8003652:	2b03      	cmp	r3, #3
 8003654:	d105      	bne.n	8003662 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	011a      	lsls	r2, r3, #4
 800365a:	4b0f      	ldr	r3, [pc, #60]	@ (8003698 <HAL_EXTI_IRQHandler+0x70>)
 800365c:	4413      	add	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	e004      	b.n	800366c <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	011a      	lsls	r2, r3, #4
 8003666:	4b0d      	ldr	r3, [pc, #52]	@ (800369c <HAL_EXTI_IRQHandler+0x74>)
 8003668:	4413      	add	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4013      	ands	r3, r2
 8003674:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d009      	beq.n	8003690 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4798      	blx	r3
    }
  }
}
 8003690:	bf00      	nop
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	58000088 	.word	0x58000088
 800369c:	580000c8 	.word	0x580000c8

080036a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	@ 0x24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80036ae:	4b89      	ldr	r3, [pc, #548]	@ (80038d4 <HAL_GPIO_Init+0x234>)
 80036b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036b2:	e194      	b.n	80039de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	2101      	movs	r1, #1
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	fa01 f303 	lsl.w	r3, r1, r3
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8186 	beq.w	80039d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d005      	beq.n	80036e4 <HAL_GPIO_Init+0x44>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d130      	bne.n	8003746 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	2203      	movs	r2, #3
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800371a:	2201      	movs	r2, #1
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	091b      	lsrs	r3, r3, #4
 8003730:	f003 0201 	and.w	r2, r3, #1
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b03      	cmp	r3, #3
 8003750:	d017      	beq.n	8003782 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	2203      	movs	r2, #3
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d123      	bne.n	80037d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	08da      	lsrs	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3208      	adds	r2, #8
 8003796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800379a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	220f      	movs	r2, #15
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	08da      	lsrs	r2, r3, #3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3208      	adds	r2, #8
 80037d0:	69b9      	ldr	r1, [r7, #24]
 80037d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	2203      	movs	r2, #3
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0203 	and.w	r2, r3, #3
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4313      	orrs	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 80e0 	beq.w	80039d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003818:	4b2f      	ldr	r3, [pc, #188]	@ (80038d8 <HAL_GPIO_Init+0x238>)
 800381a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800381e:	4a2e      	ldr	r2, [pc, #184]	@ (80038d8 <HAL_GPIO_Init+0x238>)
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003828:	4b2b      	ldr	r3, [pc, #172]	@ (80038d8 <HAL_GPIO_Init+0x238>)
 800382a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003836:	4a29      	ldr	r2, [pc, #164]	@ (80038dc <HAL_GPIO_Init+0x23c>)
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	089b      	lsrs	r3, r3, #2
 800383c:	3302      	adds	r3, #2
 800383e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	220f      	movs	r2, #15
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a20      	ldr	r2, [pc, #128]	@ (80038e0 <HAL_GPIO_Init+0x240>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d052      	beq.n	8003908 <HAL_GPIO_Init+0x268>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a1f      	ldr	r2, [pc, #124]	@ (80038e4 <HAL_GPIO_Init+0x244>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d031      	beq.n	80038ce <HAL_GPIO_Init+0x22e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a1e      	ldr	r2, [pc, #120]	@ (80038e8 <HAL_GPIO_Init+0x248>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d02b      	beq.n	80038ca <HAL_GPIO_Init+0x22a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a1d      	ldr	r2, [pc, #116]	@ (80038ec <HAL_GPIO_Init+0x24c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d025      	beq.n	80038c6 <HAL_GPIO_Init+0x226>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a1c      	ldr	r2, [pc, #112]	@ (80038f0 <HAL_GPIO_Init+0x250>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d01f      	beq.n	80038c2 <HAL_GPIO_Init+0x222>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a1b      	ldr	r2, [pc, #108]	@ (80038f4 <HAL_GPIO_Init+0x254>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d019      	beq.n	80038be <HAL_GPIO_Init+0x21e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a1a      	ldr	r2, [pc, #104]	@ (80038f8 <HAL_GPIO_Init+0x258>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <HAL_GPIO_Init+0x21a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a19      	ldr	r2, [pc, #100]	@ (80038fc <HAL_GPIO_Init+0x25c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00d      	beq.n	80038b6 <HAL_GPIO_Init+0x216>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a18      	ldr	r2, [pc, #96]	@ (8003900 <HAL_GPIO_Init+0x260>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d007      	beq.n	80038b2 <HAL_GPIO_Init+0x212>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a17      	ldr	r2, [pc, #92]	@ (8003904 <HAL_GPIO_Init+0x264>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <HAL_GPIO_Init+0x20e>
 80038aa:	2309      	movs	r3, #9
 80038ac:	e02d      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038ae:	230a      	movs	r3, #10
 80038b0:	e02b      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038b2:	2308      	movs	r3, #8
 80038b4:	e029      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038b6:	2307      	movs	r3, #7
 80038b8:	e027      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038ba:	2306      	movs	r3, #6
 80038bc:	e025      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038be:	2305      	movs	r3, #5
 80038c0:	e023      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038c2:	2304      	movs	r3, #4
 80038c4:	e021      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038c6:	2303      	movs	r3, #3
 80038c8:	e01f      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e01d      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e01b      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038d2:	bf00      	nop
 80038d4:	58000080 	.word	0x58000080
 80038d8:	58024400 	.word	0x58024400
 80038dc:	58000400 	.word	0x58000400
 80038e0:	58020000 	.word	0x58020000
 80038e4:	58020400 	.word	0x58020400
 80038e8:	58020800 	.word	0x58020800
 80038ec:	58020c00 	.word	0x58020c00
 80038f0:	58021000 	.word	0x58021000
 80038f4:	58021400 	.word	0x58021400
 80038f8:	58021800 	.word	0x58021800
 80038fc:	58021c00 	.word	0x58021c00
 8003900:	58022000 	.word	0x58022000
 8003904:	58022400 	.word	0x58022400
 8003908:	2300      	movs	r3, #0
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	f002 0203 	and.w	r2, r2, #3
 8003910:	0092      	lsls	r2, r2, #2
 8003912:	4093      	lsls	r3, r2
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800391a:	4938      	ldr	r1, [pc, #224]	@ (80039fc <HAL_GPIO_Init+0x35c>)
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	3302      	adds	r3, #2
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	43db      	mvns	r3, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4013      	ands	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800394e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800397c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	43db      	mvns	r3, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4013      	ands	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	3301      	adds	r3, #1
 80039dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f47f ae63 	bne.w	80036b4 <HAL_GPIO_Init+0x14>
  }
}
 80039ee:	bf00      	nop
 80039f0:	bf00      	nop
 80039f2:	3724      	adds	r7, #36	@ 0x24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	58000400 	.word	0x58000400

08003a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a10:	787b      	ldrb	r3, [r7, #1]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a16:	887a      	ldrh	r2, [r7, #2]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003a1c:	e003      	b.n	8003a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a1e:	887b      	ldrh	r3, [r7, #2]
 8003a20:	041a      	lsls	r2, r3, #16
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	619a      	str	r2, [r3, #24]
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003a3c:	4a08      	ldr	r2, [pc, #32]	@ (8003a60 <HAL_HSEM_FastTake+0x2c>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3320      	adds	r3, #32
 8003a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a46:	4a07      	ldr	r2, [pc, #28]	@ (8003a64 <HAL_HSEM_FastTake+0x30>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d101      	bne.n	8003a50 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e000      	b.n	8003a52 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	58026400 	.word	0x58026400
 8003a64:	80000300 	.word	0x80000300

08003a68 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003a72:	4906      	ldr	r1, [pc, #24]	@ (8003a8c <HAL_HSEM_Release+0x24>)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	58026400 	.word	0x58026400

08003a90 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003a98:	4b29      	ldr	r3, [pc, #164]	@ (8003b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	2b06      	cmp	r3, #6
 8003aa2:	d00a      	beq.n	8003aba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003aa4:	4b26      	ldr	r3, [pc, #152]	@ (8003b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d001      	beq.n	8003ab6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e040      	b.n	8003b38 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e03e      	b.n	8003b38 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003aba:	4b21      	ldr	r3, [pc, #132]	@ (8003b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003ac2:	491f      	ldr	r1, [pc, #124]	@ (8003b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003aca:	f7fd fe65 	bl	8001798 <HAL_GetTick>
 8003ace:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ad0:	e009      	b.n	8003ae6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ad2:	f7fd fe61 	bl	8001798 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ae0:	d901      	bls.n	8003ae6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e028      	b.n	8003b38 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ae6:	4b16      	ldr	r3, [pc, #88]	@ (8003b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003af2:	d1ee      	bne.n	8003ad2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b1e      	cmp	r3, #30
 8003af8:	d008      	beq.n	8003b0c <HAL_PWREx_ConfigSupply+0x7c>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b2e      	cmp	r3, #46	@ 0x2e
 8003afe:	d005      	beq.n	8003b0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b1d      	cmp	r3, #29
 8003b04:	d002      	beq.n	8003b0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b2d      	cmp	r3, #45	@ 0x2d
 8003b0a:	d114      	bne.n	8003b36 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003b0c:	f7fd fe44 	bl	8001798 <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b12:	e009      	b.n	8003b28 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b14:	f7fd fe40 	bl	8001798 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b22:	d901      	bls.n	8003b28 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e007      	b.n	8003b38 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b28:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b34:	d1ee      	bne.n	8003b14 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	58024800 	.word	0x58024800

08003b44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08c      	sub	sp, #48	@ 0x30
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f000 bc48 	b.w	80043e8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8088 	beq.w	8003c76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b66:	4b99      	ldr	r3, [pc, #612]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b70:	4b96      	ldr	r3, [pc, #600]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b74:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d007      	beq.n	8003b8c <HAL_RCC_OscConfig+0x48>
 8003b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7e:	2b18      	cmp	r3, #24
 8003b80:	d111      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x62>
 8003b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d10c      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b8c:	4b8f      	ldr	r3, [pc, #572]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d06d      	beq.n	8003c74 <HAL_RCC_OscConfig+0x130>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d169      	bne.n	8003c74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f000 bc21 	b.w	80043e8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bae:	d106      	bne.n	8003bbe <HAL_RCC_OscConfig+0x7a>
 8003bb0:	4b86      	ldr	r3, [pc, #536]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a85      	ldr	r2, [pc, #532]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	e02e      	b.n	8003c1c <HAL_RCC_OscConfig+0xd8>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10c      	bne.n	8003be0 <HAL_RCC_OscConfig+0x9c>
 8003bc6:	4b81      	ldr	r3, [pc, #516]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a80      	ldr	r2, [pc, #512]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003bcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	4b7e      	ldr	r3, [pc, #504]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a7d      	ldr	r2, [pc, #500]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003bd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	e01d      	b.n	8003c1c <HAL_RCC_OscConfig+0xd8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003be8:	d10c      	bne.n	8003c04 <HAL_RCC_OscConfig+0xc0>
 8003bea:	4b78      	ldr	r3, [pc, #480]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a77      	ldr	r2, [pc, #476]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003bf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	4b75      	ldr	r3, [pc, #468]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a74      	ldr	r2, [pc, #464]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e00b      	b.n	8003c1c <HAL_RCC_OscConfig+0xd8>
 8003c04:	4b71      	ldr	r3, [pc, #452]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a70      	ldr	r2, [pc, #448]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003c0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	4b6e      	ldr	r3, [pc, #440]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a6d      	ldr	r2, [pc, #436]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003c16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d013      	beq.n	8003c4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c24:	f7fd fdb8 	bl	8001798 <HAL_GetTick>
 8003c28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c2c:	f7fd fdb4 	bl	8001798 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b64      	cmp	r3, #100	@ 0x64
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e3d4      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c3e:	4b63      	ldr	r3, [pc, #396]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0xe8>
 8003c4a:	e014      	b.n	8003c76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7fd fda4 	bl	8001798 <HAL_GetTick>
 8003c50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fd fda0 	bl	8001798 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	@ 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e3c0      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c66:	4b59      	ldr	r3, [pc, #356]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x110>
 8003c72:	e000      	b.n	8003c76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 80ca 	beq.w	8003e18 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c84:	4b51      	ldr	r3, [pc, #324]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c8e:	4b4f      	ldr	r3, [pc, #316]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c92:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <HAL_RCC_OscConfig+0x166>
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	2b18      	cmp	r3, #24
 8003c9e:	d156      	bne.n	8003d4e <HAL_RCC_OscConfig+0x20a>
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d151      	bne.n	8003d4e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003caa:	4b48      	ldr	r3, [pc, #288]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x17e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e392      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cc2:	4b42      	ldr	r3, [pc, #264]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 0219 	bic.w	r2, r3, #25
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	493f      	ldr	r1, [pc, #252]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fd fd60 	bl	8001798 <HAL_GetTick>
 8003cd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cdc:	f7fd fd5c 	bl	8001798 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e37c      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cee:	4b37      	ldr	r3, [pc, #220]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfa:	f7fd fd59 	bl	80017b0 <HAL_GetREVID>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d817      	bhi.n	8003d38 <HAL_RCC_OscConfig+0x1f4>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	2b40      	cmp	r3, #64	@ 0x40
 8003d0e:	d108      	bne.n	8003d22 <HAL_RCC_OscConfig+0x1de>
 8003d10:	4b2e      	ldr	r3, [pc, #184]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003d18:	4a2c      	ldr	r2, [pc, #176]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d1e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d20:	e07a      	b.n	8003e18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d22:	4b2a      	ldr	r3, [pc, #168]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	031b      	lsls	r3, r3, #12
 8003d30:	4926      	ldr	r1, [pc, #152]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d36:	e06f      	b.n	8003e18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d38:	4b24      	ldr	r3, [pc, #144]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	061b      	lsls	r3, r3, #24
 8003d46:	4921      	ldr	r1, [pc, #132]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d4c:	e064      	b.n	8003e18 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d047      	beq.n	8003de6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d56:	4b1d      	ldr	r3, [pc, #116]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f023 0219 	bic.w	r2, r3, #25
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	491a      	ldr	r1, [pc, #104]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fd fd16 	bl	8001798 <HAL_GetTick>
 8003d6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d70:	f7fd fd12 	bl	8001798 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e332      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d82:	4b12      	ldr	r3, [pc, #72]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8e:	f7fd fd0f 	bl	80017b0 <HAL_GetREVID>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d819      	bhi.n	8003dd0 <HAL_RCC_OscConfig+0x28c>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	2b40      	cmp	r3, #64	@ 0x40
 8003da2:	d108      	bne.n	8003db6 <HAL_RCC_OscConfig+0x272>
 8003da4:	4b09      	ldr	r3, [pc, #36]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003dac:	4a07      	ldr	r2, [pc, #28]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003db2:	6053      	str	r3, [r2, #4]
 8003db4:	e030      	b.n	8003e18 <HAL_RCC_OscConfig+0x2d4>
 8003db6:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	031b      	lsls	r3, r3, #12
 8003dc4:	4901      	ldr	r1, [pc, #4]	@ (8003dcc <HAL_RCC_OscConfig+0x288>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	604b      	str	r3, [r1, #4]
 8003dca:	e025      	b.n	8003e18 <HAL_RCC_OscConfig+0x2d4>
 8003dcc:	58024400 	.word	0x58024400
 8003dd0:	4b9a      	ldr	r3, [pc, #616]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	061b      	lsls	r3, r3, #24
 8003dde:	4997      	ldr	r1, [pc, #604]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	604b      	str	r3, [r1, #4]
 8003de4:	e018      	b.n	8003e18 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003de6:	4b95      	ldr	r3, [pc, #596]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a94      	ldr	r2, [pc, #592]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7fd fcd1 	bl	8001798 <HAL_GetTick>
 8003df6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dfa:	f7fd fccd 	bl	8001798 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e2ed      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e0c:	4b8b      	ldr	r3, [pc, #556]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f0      	bne.n	8003dfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 80a9 	beq.w	8003f78 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e26:	4b85      	ldr	r3, [pc, #532]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e30:	4b82      	ldr	r3, [pc, #520]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e34:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d007      	beq.n	8003e4c <HAL_RCC_OscConfig+0x308>
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b18      	cmp	r3, #24
 8003e40:	d13a      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x374>
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d135      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e4c:	4b7b      	ldr	r3, [pc, #492]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_RCC_OscConfig+0x320>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	2b80      	cmp	r3, #128	@ 0x80
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e2c1      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e64:	f7fd fca4 	bl	80017b0 <HAL_GetREVID>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d817      	bhi.n	8003ea2 <HAL_RCC_OscConfig+0x35e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d108      	bne.n	8003e8c <HAL_RCC_OscConfig+0x348>
 8003e7a:	4b70      	ldr	r3, [pc, #448]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003e82:	4a6e      	ldr	r2, [pc, #440]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003e84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e88:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e8a:	e075      	b.n	8003f78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e8c:	4b6b      	ldr	r3, [pc, #428]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	069b      	lsls	r3, r3, #26
 8003e9a:	4968      	ldr	r1, [pc, #416]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ea0:	e06a      	b.n	8003f78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ea2:	4b66      	ldr	r3, [pc, #408]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	061b      	lsls	r3, r3, #24
 8003eb0:	4962      	ldr	r1, [pc, #392]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003eb6:	e05f      	b.n	8003f78 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d042      	beq.n	8003f46 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ec0:	4b5e      	ldr	r3, [pc, #376]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a5d      	ldr	r2, [pc, #372]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ecc:	f7fd fc64 	bl	8001798 <HAL_GetTick>
 8003ed0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ed4:	f7fd fc60 	bl	8001798 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e280      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ee6:	4b55      	ldr	r3, [pc, #340]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ef2:	f7fd fc5d 	bl	80017b0 <HAL_GetREVID>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d817      	bhi.n	8003f30 <HAL_RCC_OscConfig+0x3ec>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	d108      	bne.n	8003f1a <HAL_RCC_OscConfig+0x3d6>
 8003f08:	4b4c      	ldr	r3, [pc, #304]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003f10:	4a4a      	ldr	r2, [pc, #296]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003f12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f16:	6053      	str	r3, [r2, #4]
 8003f18:	e02e      	b.n	8003f78 <HAL_RCC_OscConfig+0x434>
 8003f1a:	4b48      	ldr	r3, [pc, #288]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	069b      	lsls	r3, r3, #26
 8003f28:	4944      	ldr	r1, [pc, #272]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]
 8003f2e:	e023      	b.n	8003f78 <HAL_RCC_OscConfig+0x434>
 8003f30:	4b42      	ldr	r3, [pc, #264]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	493f      	ldr	r1, [pc, #252]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60cb      	str	r3, [r1, #12]
 8003f44:	e018      	b.n	8003f78 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003f46:	4b3d      	ldr	r3, [pc, #244]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a3c      	ldr	r2, [pc, #240]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003f4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fd fc21 	bl	8001798 <HAL_GetTick>
 8003f56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f5a:	f7fd fc1d 	bl	8001798 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e23d      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f6c:	4b33      	ldr	r3, [pc, #204]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d036      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d019      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f90:	4a2a      	ldr	r2, [pc, #168]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f98:	f7fd fbfe 	bl	8001798 <HAL_GetTick>
 8003f9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa0:	f7fd fbfa 	bl	8001798 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e21a      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fb2:	4b22      	ldr	r3, [pc, #136]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x45c>
 8003fbe:	e018      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003fc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fcc:	f7fd fbe4 	bl	8001798 <HAL_GetTick>
 8003fd0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd4:	f7fd fbe0 	bl	8001798 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e200      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fe6:	4b15      	ldr	r3, [pc, #84]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8003fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d039      	beq.n	8004072 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d01c      	beq.n	8004040 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004006:	4b0d      	ldr	r3, [pc, #52]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a0c      	ldr	r2, [pc, #48]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 800400c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004010:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004012:	f7fd fbc1 	bl	8001798 <HAL_GetTick>
 8004016:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800401a:	f7fd fbbd 	bl	8001798 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e1dd      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800402c:	4b03      	ldr	r3, [pc, #12]	@ (800403c <HAL_RCC_OscConfig+0x4f8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x4d6>
 8004038:	e01b      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
 800403a:	bf00      	nop
 800403c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004040:	4b9b      	ldr	r3, [pc, #620]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a9a      	ldr	r2, [pc, #616]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004046:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800404a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800404c:	f7fd fba4 	bl	8001798 <HAL_GetTick>
 8004050:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004054:	f7fd fba0 	bl	8001798 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e1c0      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004066:	4b92      	ldr	r3, [pc, #584]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 8081 	beq.w	8004182 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004080:	4b8c      	ldr	r3, [pc, #560]	@ (80042b4 <HAL_RCC_OscConfig+0x770>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a8b      	ldr	r2, [pc, #556]	@ (80042b4 <HAL_RCC_OscConfig+0x770>)
 8004086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800408a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800408c:	f7fd fb84 	bl	8001798 <HAL_GetTick>
 8004090:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004094:	f7fd fb80 	bl	8001798 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	@ 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e1a0      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040a6:	4b83      	ldr	r3, [pc, #524]	@ (80042b4 <HAL_RCC_OscConfig+0x770>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d106      	bne.n	80040c8 <HAL_RCC_OscConfig+0x584>
 80040ba:	4b7d      	ldr	r3, [pc, #500]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040be:	4a7c      	ldr	r2, [pc, #496]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c6:	e02d      	b.n	8004124 <HAL_RCC_OscConfig+0x5e0>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10c      	bne.n	80040ea <HAL_RCC_OscConfig+0x5a6>
 80040d0:	4b77      	ldr	r3, [pc, #476]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 80040d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d4:	4a76      	ldr	r2, [pc, #472]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	6713      	str	r3, [r2, #112]	@ 0x70
 80040dc:	4b74      	ldr	r3, [pc, #464]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e0:	4a73      	ldr	r2, [pc, #460]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 80040e2:	f023 0304 	bic.w	r3, r3, #4
 80040e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e8:	e01c      	b.n	8004124 <HAL_RCC_OscConfig+0x5e0>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b05      	cmp	r3, #5
 80040f0:	d10c      	bne.n	800410c <HAL_RCC_OscConfig+0x5c8>
 80040f2:	4b6f      	ldr	r3, [pc, #444]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f6:	4a6e      	ldr	r2, [pc, #440]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 80040f8:	f043 0304 	orr.w	r3, r3, #4
 80040fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80040fe:	4b6c      	ldr	r3, [pc, #432]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004102:	4a6b      	ldr	r2, [pc, #428]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6713      	str	r3, [r2, #112]	@ 0x70
 800410a:	e00b      	b.n	8004124 <HAL_RCC_OscConfig+0x5e0>
 800410c:	4b68      	ldr	r3, [pc, #416]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004110:	4a67      	ldr	r2, [pc, #412]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004112:	f023 0301 	bic.w	r3, r3, #1
 8004116:	6713      	str	r3, [r2, #112]	@ 0x70
 8004118:	4b65      	ldr	r3, [pc, #404]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411c:	4a64      	ldr	r2, [pc, #400]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 800411e:	f023 0304 	bic.w	r3, r3, #4
 8004122:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d015      	beq.n	8004158 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fd fb34 	bl	8001798 <HAL_GetTick>
 8004130:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004132:	e00a      	b.n	800414a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004134:	f7fd fb30 	bl	8001798 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e14e      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800414a:	4b59      	ldr	r3, [pc, #356]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 800414c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0ee      	beq.n	8004134 <HAL_RCC_OscConfig+0x5f0>
 8004156:	e014      	b.n	8004182 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004158:	f7fd fb1e 	bl	8001798 <HAL_GetTick>
 800415c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004160:	f7fd fb1a 	bl	8001798 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e138      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004176:	4b4e      	ldr	r3, [pc, #312]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1ee      	bne.n	8004160 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 812d 	beq.w	80043e6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800418c:	4b48      	ldr	r3, [pc, #288]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004194:	2b18      	cmp	r3, #24
 8004196:	f000 80bd 	beq.w	8004314 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	2b02      	cmp	r3, #2
 80041a0:	f040 809e 	bne.w	80042e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a4:	4b42      	ldr	r3, [pc, #264]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a41      	ldr	r2, [pc, #260]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 80041aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7fd faf2 	bl	8001798 <HAL_GetTick>
 80041b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b8:	f7fd faee 	bl	8001798 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e10e      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041ca:	4b39      	ldr	r3, [pc, #228]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041d6:	4b36      	ldr	r3, [pc, #216]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 80041d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041da:	4b37      	ldr	r3, [pc, #220]	@ (80042b8 <HAL_RCC_OscConfig+0x774>)
 80041dc:	4013      	ands	r3, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80041e6:	0112      	lsls	r2, r2, #4
 80041e8:	430a      	orrs	r2, r1
 80041ea:	4931      	ldr	r1, [pc, #196]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f4:	3b01      	subs	r3, #1
 80041f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fe:	3b01      	subs	r3, #1
 8004200:	025b      	lsls	r3, r3, #9
 8004202:	b29b      	uxth	r3, r3
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420a:	3b01      	subs	r3, #1
 800420c:	041b      	lsls	r3, r3, #16
 800420e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004218:	3b01      	subs	r3, #1
 800421a:	061b      	lsls	r3, r3, #24
 800421c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004220:	4923      	ldr	r1, [pc, #140]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004222:	4313      	orrs	r3, r2
 8004224:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004226:	4b22      	ldr	r3, [pc, #136]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422a:	4a21      	ldr	r2, [pc, #132]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004232:	4b1f      	ldr	r3, [pc, #124]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004234:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004236:	4b21      	ldr	r3, [pc, #132]	@ (80042bc <HAL_RCC_OscConfig+0x778>)
 8004238:	4013      	ands	r3, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800423e:	00d2      	lsls	r2, r2, #3
 8004240:	491b      	ldr	r1, [pc, #108]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004242:	4313      	orrs	r3, r2
 8004244:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004246:	4b1a      	ldr	r3, [pc, #104]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424a:	f023 020c 	bic.w	r2, r3, #12
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004252:	4917      	ldr	r1, [pc, #92]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004254:	4313      	orrs	r3, r2
 8004256:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004258:	4b15      	ldr	r3, [pc, #84]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 800425a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425c:	f023 0202 	bic.w	r2, r3, #2
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004264:	4912      	ldr	r1, [pc, #72]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004266:	4313      	orrs	r3, r2
 8004268:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800426a:	4b11      	ldr	r3, [pc, #68]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	4a10      	ldr	r2, [pc, #64]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004274:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004276:	4b0e      	ldr	r3, [pc, #56]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427a:	4a0d      	ldr	r2, [pc, #52]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 800427c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004280:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004282:	4b0b      	ldr	r3, [pc, #44]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004286:	4a0a      	ldr	r2, [pc, #40]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800428c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800428e:	4b08      	ldr	r3, [pc, #32]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004292:	4a07      	ldr	r2, [pc, #28]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800429a:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a04      	ldr	r2, [pc, #16]	@ (80042b0 <HAL_RCC_OscConfig+0x76c>)
 80042a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a6:	f7fd fa77 	bl	8001798 <HAL_GetTick>
 80042aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042ac:	e011      	b.n	80042d2 <HAL_RCC_OscConfig+0x78e>
 80042ae:	bf00      	nop
 80042b0:	58024400 	.word	0x58024400
 80042b4:	58024800 	.word	0x58024800
 80042b8:	fffffc0c 	.word	0xfffffc0c
 80042bc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c0:	f7fd fa6a 	bl	8001798 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e08a      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042d2:	4b47      	ldr	r3, [pc, #284]	@ (80043f0 <HAL_RCC_OscConfig+0x8ac>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCC_OscConfig+0x77c>
 80042de:	e082      	b.n	80043e6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e0:	4b43      	ldr	r3, [pc, #268]	@ (80043f0 <HAL_RCC_OscConfig+0x8ac>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a42      	ldr	r2, [pc, #264]	@ (80043f0 <HAL_RCC_OscConfig+0x8ac>)
 80042e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fd fa54 	bl	8001798 <HAL_GetTick>
 80042f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f4:	f7fd fa50 	bl	8001798 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e070      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004306:	4b3a      	ldr	r3, [pc, #232]	@ (80043f0 <HAL_RCC_OscConfig+0x8ac>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x7b0>
 8004312:	e068      	b.n	80043e6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004314:	4b36      	ldr	r3, [pc, #216]	@ (80043f0 <HAL_RCC_OscConfig+0x8ac>)
 8004316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004318:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800431a:	4b35      	ldr	r3, [pc, #212]	@ (80043f0 <HAL_RCC_OscConfig+0x8ac>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	2b01      	cmp	r3, #1
 8004326:	d031      	beq.n	800438c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f003 0203 	and.w	r2, r3, #3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004332:	429a      	cmp	r2, r3
 8004334:	d12a      	bne.n	800438c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	091b      	lsrs	r3, r3, #4
 800433a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004342:	429a      	cmp	r2, r3
 8004344:	d122      	bne.n	800438c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004350:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d11a      	bne.n	800438c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	0a5b      	lsrs	r3, r3, #9
 800435a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004362:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d111      	bne.n	800438c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	0c1b      	lsrs	r3, r3, #16
 800436c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004374:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004376:	429a      	cmp	r2, r3
 8004378:	d108      	bne.n	800438c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	0e1b      	lsrs	r3, r3, #24
 800437e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004386:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e02b      	b.n	80043e8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004390:	4b17      	ldr	r3, [pc, #92]	@ (80043f0 <HAL_RCC_OscConfig+0x8ac>)
 8004392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004394:	08db      	lsrs	r3, r3, #3
 8004396:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800439a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d01f      	beq.n	80043e6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80043a6:	4b12      	ldr	r3, [pc, #72]	@ (80043f0 <HAL_RCC_OscConfig+0x8ac>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043aa:	4a11      	ldr	r2, [pc, #68]	@ (80043f0 <HAL_RCC_OscConfig+0x8ac>)
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043b2:	f7fd f9f1 	bl	8001798 <HAL_GetTick>
 80043b6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80043b8:	bf00      	nop
 80043ba:	f7fd f9ed 	bl	8001798 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d0f9      	beq.n	80043ba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043c6:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <HAL_RCC_OscConfig+0x8ac>)
 80043c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043ca:	4b0a      	ldr	r3, [pc, #40]	@ (80043f4 <HAL_RCC_OscConfig+0x8b0>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80043d2:	00d2      	lsls	r2, r2, #3
 80043d4:	4906      	ldr	r1, [pc, #24]	@ (80043f0 <HAL_RCC_OscConfig+0x8ac>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80043da:	4b05      	ldr	r3, [pc, #20]	@ (80043f0 <HAL_RCC_OscConfig+0x8ac>)
 80043dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043de:	4a04      	ldr	r2, [pc, #16]	@ (80043f0 <HAL_RCC_OscConfig+0x8ac>)
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3730      	adds	r7, #48	@ 0x30
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	58024400 	.word	0x58024400
 80043f4:	ffff0007 	.word	0xffff0007

080043f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e19c      	b.n	8004746 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800440c:	4b8a      	ldr	r3, [pc, #552]	@ (8004638 <HAL_RCC_ClockConfig+0x240>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d910      	bls.n	800443c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b87      	ldr	r3, [pc, #540]	@ (8004638 <HAL_RCC_ClockConfig+0x240>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 020f 	bic.w	r2, r3, #15
 8004422:	4985      	ldr	r1, [pc, #532]	@ (8004638 <HAL_RCC_ClockConfig+0x240>)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800442a:	4b83      	ldr	r3, [pc, #524]	@ (8004638 <HAL_RCC_ClockConfig+0x240>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d001      	beq.n	800443c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e184      	b.n	8004746 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d010      	beq.n	800446a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	4b7b      	ldr	r3, [pc, #492]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004454:	429a      	cmp	r2, r3
 8004456:	d908      	bls.n	800446a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004458:	4b78      	ldr	r3, [pc, #480]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	4975      	ldr	r1, [pc, #468]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 8004466:	4313      	orrs	r3, r2
 8004468:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b00      	cmp	r3, #0
 8004474:	d010      	beq.n	8004498 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695a      	ldr	r2, [r3, #20]
 800447a:	4b70      	ldr	r3, [pc, #448]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004482:	429a      	cmp	r2, r3
 8004484:	d908      	bls.n	8004498 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004486:	4b6d      	ldr	r3, [pc, #436]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	496a      	ldr	r1, [pc, #424]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 8004494:	4313      	orrs	r3, r2
 8004496:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d010      	beq.n	80044c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699a      	ldr	r2, [r3, #24]
 80044a8:	4b64      	ldr	r3, [pc, #400]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d908      	bls.n	80044c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044b4:	4b61      	ldr	r3, [pc, #388]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	495e      	ldr	r1, [pc, #376]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d010      	beq.n	80044f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	4b59      	ldr	r3, [pc, #356]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044de:	429a      	cmp	r2, r3
 80044e0:	d908      	bls.n	80044f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80044e2:	4b56      	ldr	r3, [pc, #344]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	4953      	ldr	r1, [pc, #332]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d010      	beq.n	8004522 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	4b4d      	ldr	r3, [pc, #308]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	f003 030f 	and.w	r3, r3, #15
 800450c:	429a      	cmp	r2, r3
 800450e:	d908      	bls.n	8004522 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004510:	4b4a      	ldr	r3, [pc, #296]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f023 020f 	bic.w	r2, r3, #15
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	4947      	ldr	r1, [pc, #284]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 800451e:	4313      	orrs	r3, r2
 8004520:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d055      	beq.n	80045da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800452e:	4b43      	ldr	r3, [pc, #268]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	4940      	ldr	r1, [pc, #256]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 800453c:	4313      	orrs	r3, r2
 800453e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d107      	bne.n	8004558 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004548:	4b3c      	ldr	r3, [pc, #240]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d121      	bne.n	8004598 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0f6      	b.n	8004746 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b03      	cmp	r3, #3
 800455e:	d107      	bne.n	8004570 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004560:	4b36      	ldr	r3, [pc, #216]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d115      	bne.n	8004598 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0ea      	b.n	8004746 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d107      	bne.n	8004588 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004578:	4b30      	ldr	r3, [pc, #192]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004580:	2b00      	cmp	r3, #0
 8004582:	d109      	bne.n	8004598 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0de      	b.n	8004746 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004588:	4b2c      	ldr	r3, [pc, #176]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0d6      	b.n	8004746 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004598:	4b28      	ldr	r3, [pc, #160]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f023 0207 	bic.w	r2, r3, #7
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	4925      	ldr	r1, [pc, #148]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045aa:	f7fd f8f5 	bl	8001798 <HAL_GetTick>
 80045ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b0:	e00a      	b.n	80045c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b2:	f7fd f8f1 	bl	8001798 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e0be      	b.n	8004746 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c8:	4b1c      	ldr	r3, [pc, #112]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d1eb      	bne.n	80045b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d010      	beq.n	8004608 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	4b14      	ldr	r3, [pc, #80]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d208      	bcs.n	8004608 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f6:	4b11      	ldr	r3, [pc, #68]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	f023 020f 	bic.w	r2, r3, #15
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	490e      	ldr	r1, [pc, #56]	@ (800463c <HAL_RCC_ClockConfig+0x244>)
 8004604:	4313      	orrs	r3, r2
 8004606:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004608:	4b0b      	ldr	r3, [pc, #44]	@ (8004638 <HAL_RCC_ClockConfig+0x240>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d214      	bcs.n	8004640 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b08      	ldr	r3, [pc, #32]	@ (8004638 <HAL_RCC_ClockConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 020f 	bic.w	r2, r3, #15
 800461e:	4906      	ldr	r1, [pc, #24]	@ (8004638 <HAL_RCC_ClockConfig+0x240>)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004626:	4b04      	ldr	r3, [pc, #16]	@ (8004638 <HAL_RCC_ClockConfig+0x240>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d005      	beq.n	8004640 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e086      	b.n	8004746 <HAL_RCC_ClockConfig+0x34e>
 8004638:	52002000 	.word	0x52002000
 800463c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d010      	beq.n	800466e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	4b3f      	ldr	r3, [pc, #252]	@ (8004750 <HAL_RCC_ClockConfig+0x358>)
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004658:	429a      	cmp	r2, r3
 800465a:	d208      	bcs.n	800466e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800465c:	4b3c      	ldr	r3, [pc, #240]	@ (8004750 <HAL_RCC_ClockConfig+0x358>)
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	4939      	ldr	r1, [pc, #228]	@ (8004750 <HAL_RCC_ClockConfig+0x358>)
 800466a:	4313      	orrs	r3, r2
 800466c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d010      	beq.n	800469c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695a      	ldr	r2, [r3, #20]
 800467e:	4b34      	ldr	r3, [pc, #208]	@ (8004750 <HAL_RCC_ClockConfig+0x358>)
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004686:	429a      	cmp	r2, r3
 8004688:	d208      	bcs.n	800469c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800468a:	4b31      	ldr	r3, [pc, #196]	@ (8004750 <HAL_RCC_ClockConfig+0x358>)
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	492e      	ldr	r1, [pc, #184]	@ (8004750 <HAL_RCC_ClockConfig+0x358>)
 8004698:	4313      	orrs	r3, r2
 800469a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d010      	beq.n	80046ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699a      	ldr	r2, [r3, #24]
 80046ac:	4b28      	ldr	r3, [pc, #160]	@ (8004750 <HAL_RCC_ClockConfig+0x358>)
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d208      	bcs.n	80046ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046b8:	4b25      	ldr	r3, [pc, #148]	@ (8004750 <HAL_RCC_ClockConfig+0x358>)
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	4922      	ldr	r1, [pc, #136]	@ (8004750 <HAL_RCC_ClockConfig+0x358>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d010      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69da      	ldr	r2, [r3, #28]
 80046da:	4b1d      	ldr	r3, [pc, #116]	@ (8004750 <HAL_RCC_ClockConfig+0x358>)
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d208      	bcs.n	80046f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80046e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004750 <HAL_RCC_ClockConfig+0x358>)
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	4917      	ldr	r1, [pc, #92]	@ (8004750 <HAL_RCC_ClockConfig+0x358>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046f8:	f000 f834 	bl	8004764 <HAL_RCC_GetSysClockFreq>
 80046fc:	4602      	mov	r2, r0
 80046fe:	4b14      	ldr	r3, [pc, #80]	@ (8004750 <HAL_RCC_ClockConfig+0x358>)
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	0a1b      	lsrs	r3, r3, #8
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	4912      	ldr	r1, [pc, #72]	@ (8004754 <HAL_RCC_ClockConfig+0x35c>)
 800470a:	5ccb      	ldrb	r3, [r1, r3]
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	fa22 f303 	lsr.w	r3, r2, r3
 8004714:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004716:	4b0e      	ldr	r3, [pc, #56]	@ (8004750 <HAL_RCC_ClockConfig+0x358>)
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	4a0d      	ldr	r2, [pc, #52]	@ (8004754 <HAL_RCC_ClockConfig+0x35c>)
 8004720:	5cd3      	ldrb	r3, [r2, r3]
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
 800472c:	4a0a      	ldr	r2, [pc, #40]	@ (8004758 <HAL_RCC_ClockConfig+0x360>)
 800472e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004730:	4a0a      	ldr	r2, [pc, #40]	@ (800475c <HAL_RCC_ClockConfig+0x364>)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004736:	4b0a      	ldr	r3, [pc, #40]	@ (8004760 <HAL_RCC_ClockConfig+0x368>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7fc fb5a 	bl	8000df4 <HAL_InitTick>
 8004740:	4603      	mov	r3, r0
 8004742:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004744:	7bfb      	ldrb	r3, [r7, #15]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	58024400 	.word	0x58024400
 8004754:	0801b7dc 	.word	0x0801b7dc
 8004758:	24000004 	.word	0x24000004
 800475c:	24000000 	.word	0x24000000
 8004760:	24000024 	.word	0x24000024

08004764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004764:	b480      	push	{r7}
 8004766:	b089      	sub	sp, #36	@ 0x24
 8004768:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800476a:	4bb3      	ldr	r3, [pc, #716]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004772:	2b18      	cmp	r3, #24
 8004774:	f200 8155 	bhi.w	8004a22 <HAL_RCC_GetSysClockFreq+0x2be>
 8004778:	a201      	add	r2, pc, #4	@ (adr r2, 8004780 <HAL_RCC_GetSysClockFreq+0x1c>)
 800477a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477e:	bf00      	nop
 8004780:	080047e5 	.word	0x080047e5
 8004784:	08004a23 	.word	0x08004a23
 8004788:	08004a23 	.word	0x08004a23
 800478c:	08004a23 	.word	0x08004a23
 8004790:	08004a23 	.word	0x08004a23
 8004794:	08004a23 	.word	0x08004a23
 8004798:	08004a23 	.word	0x08004a23
 800479c:	08004a23 	.word	0x08004a23
 80047a0:	0800480b 	.word	0x0800480b
 80047a4:	08004a23 	.word	0x08004a23
 80047a8:	08004a23 	.word	0x08004a23
 80047ac:	08004a23 	.word	0x08004a23
 80047b0:	08004a23 	.word	0x08004a23
 80047b4:	08004a23 	.word	0x08004a23
 80047b8:	08004a23 	.word	0x08004a23
 80047bc:	08004a23 	.word	0x08004a23
 80047c0:	08004811 	.word	0x08004811
 80047c4:	08004a23 	.word	0x08004a23
 80047c8:	08004a23 	.word	0x08004a23
 80047cc:	08004a23 	.word	0x08004a23
 80047d0:	08004a23 	.word	0x08004a23
 80047d4:	08004a23 	.word	0x08004a23
 80047d8:	08004a23 	.word	0x08004a23
 80047dc:	08004a23 	.word	0x08004a23
 80047e0:	08004817 	.word	0x08004817
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047e4:	4b94      	ldr	r3, [pc, #592]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d009      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047f0:	4b91      	ldr	r3, [pc, #580]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	08db      	lsrs	r3, r3, #3
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	4a90      	ldr	r2, [pc, #576]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004800:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004802:	e111      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004804:	4b8d      	ldr	r3, [pc, #564]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004806:	61bb      	str	r3, [r7, #24]
      break;
 8004808:	e10e      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800480a:	4b8d      	ldr	r3, [pc, #564]	@ (8004a40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800480c:	61bb      	str	r3, [r7, #24]
      break;
 800480e:	e10b      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004810:	4b8c      	ldr	r3, [pc, #560]	@ (8004a44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004812:	61bb      	str	r3, [r7, #24]
      break;
 8004814:	e108      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004816:	4b88      	ldr	r3, [pc, #544]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004820:	4b85      	ldr	r3, [pc, #532]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004824:	091b      	lsrs	r3, r3, #4
 8004826:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800482a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800482c:	4b82      	ldr	r3, [pc, #520]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800482e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004836:	4b80      	ldr	r3, [pc, #512]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800483a:	08db      	lsrs	r3, r3, #3
 800483c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	fb02 f303 	mul.w	r3, r2, r3
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80e1 	beq.w	8004a1c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b02      	cmp	r3, #2
 800485e:	f000 8083 	beq.w	8004968 <HAL_RCC_GetSysClockFreq+0x204>
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2b02      	cmp	r3, #2
 8004866:	f200 80a1 	bhi.w	80049ac <HAL_RCC_GetSysClockFreq+0x248>
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_RCC_GetSysClockFreq+0x114>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d056      	beq.n	8004924 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004876:	e099      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004878:	4b6f      	ldr	r3, [pc, #444]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d02d      	beq.n	80048e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004884:	4b6c      	ldr	r3, [pc, #432]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	08db      	lsrs	r3, r3, #3
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	4a6b      	ldr	r2, [pc, #428]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004890:	fa22 f303 	lsr.w	r3, r2, r3
 8004894:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	ee07 3a90 	vmov	s15, r3
 800489c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ae:	4b62      	ldr	r3, [pc, #392]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048be:	ed97 6a02 	vldr	s12, [r7, #8]
 80048c2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80048de:	e087      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004a4c <HAL_RCC_GetSysClockFreq+0x2e8>
 80048ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f2:	4b51      	ldr	r3, [pc, #324]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004902:	ed97 6a02 	vldr	s12, [r7, #8]
 8004906:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 800490a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004922:	e065      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004a50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004936:	4b40      	ldr	r3, [pc, #256]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004946:	ed97 6a02 	vldr	s12, [r7, #8]
 800494a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 800494e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800495a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004962:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004966:	e043      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004972:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004a54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498a:	ed97 6a02 	vldr	s12, [r7, #8]
 800498e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800499e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049aa:	e021      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004a50 <HAL_RCC_GetSysClockFreq+0x2ec>
 80049ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049be:	4b1e      	ldr	r3, [pc, #120]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80049d2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80049f0:	4b11      	ldr	r3, [pc, #68]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f4:	0a5b      	lsrs	r3, r3, #9
 80049f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049fa:	3301      	adds	r3, #1
 80049fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	ee07 3a90 	vmov	s15, r3
 8004a04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a08:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a14:	ee17 3a90 	vmov	r3, s15
 8004a18:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004a1a:	e005      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61bb      	str	r3, [r7, #24]
      break;
 8004a20:	e002      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004a22:	4b07      	ldr	r3, [pc, #28]	@ (8004a40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a24:	61bb      	str	r3, [r7, #24]
      break;
 8004a26:	bf00      	nop
  }

  return sysclockfreq;
 8004a28:	69bb      	ldr	r3, [r7, #24]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3724      	adds	r7, #36	@ 0x24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	58024400 	.word	0x58024400
 8004a3c:	03d09000 	.word	0x03d09000
 8004a40:	003d0900 	.word	0x003d0900
 8004a44:	017d7840 	.word	0x017d7840
 8004a48:	46000000 	.word	0x46000000
 8004a4c:	4c742400 	.word	0x4c742400
 8004a50:	4a742400 	.word	0x4a742400
 8004a54:	4bbebc20 	.word	0x4bbebc20

08004a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004a5e:	f7ff fe81 	bl	8004764 <HAL_RCC_GetSysClockFreq>
 8004a62:	4602      	mov	r2, r0
 8004a64:	4b10      	ldr	r3, [pc, #64]	@ (8004aa8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	0a1b      	lsrs	r3, r3, #8
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	490f      	ldr	r1, [pc, #60]	@ (8004aac <HAL_RCC_GetHCLKFreq+0x54>)
 8004a70:	5ccb      	ldrb	r3, [r1, r3]
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	4a09      	ldr	r2, [pc, #36]	@ (8004aac <HAL_RCC_GetHCLKFreq+0x54>)
 8004a86:	5cd3      	ldrb	r3, [r2, r3]
 8004a88:	f003 031f 	and.w	r3, r3, #31
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a92:	4a07      	ldr	r2, [pc, #28]	@ (8004ab0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a96:	4a07      	ldr	r2, [pc, #28]	@ (8004ab4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004a9c:	4b04      	ldr	r3, [pc, #16]	@ (8004ab0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	58024400 	.word	0x58024400
 8004aac:	0801b7dc 	.word	0x0801b7dc
 8004ab0:	24000004 	.word	0x24000004
 8004ab4:	24000000 	.word	0x24000000

08004ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004abc:	f7ff ffcc 	bl	8004a58 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	091b      	lsrs	r3, r3, #4
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	4904      	ldr	r1, [pc, #16]	@ (8004ae0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ace:	5ccb      	ldrb	r3, [r1, r3]
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	58024400 	.word	0x58024400
 8004ae0:	0801b7dc 	.word	0x0801b7dc

08004ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004ae8:	f7ff ffb6 	bl	8004a58 <HAL_RCC_GetHCLKFreq>
 8004aec:	4602      	mov	r2, r0
 8004aee:	4b06      	ldr	r3, [pc, #24]	@ (8004b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	0a1b      	lsrs	r3, r3, #8
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	4904      	ldr	r1, [pc, #16]	@ (8004b0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004afa:	5ccb      	ldrb	r3, [r1, r3]
 8004afc:	f003 031f 	and.w	r3, r3, #31
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	58024400 	.word	0x58024400
 8004b0c:	0801b7dc 	.word	0x0801b7dc

08004b10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	223f      	movs	r2, #63	@ 0x3f
 8004b1e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b20:	4b1a      	ldr	r3, [pc, #104]	@ (8004b8c <HAL_RCC_GetClockConfig+0x7c>)
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f003 0207 	and.w	r2, r3, #7
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004b2c:	4b17      	ldr	r3, [pc, #92]	@ (8004b8c <HAL_RCC_GetClockConfig+0x7c>)
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004b38:	4b14      	ldr	r3, [pc, #80]	@ (8004b8c <HAL_RCC_GetClockConfig+0x7c>)
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f003 020f 	and.w	r2, r3, #15
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004b44:	4b11      	ldr	r3, [pc, #68]	@ (8004b8c <HAL_RCC_GetClockConfig+0x7c>)
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004b50:	4b0e      	ldr	r3, [pc, #56]	@ (8004b8c <HAL_RCC_GetClockConfig+0x7c>)
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b8c <HAL_RCC_GetClockConfig+0x7c>)
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004b68:	4b08      	ldr	r3, [pc, #32]	@ (8004b8c <HAL_RCC_GetClockConfig+0x7c>)
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b74:	4b06      	ldr	r3, [pc, #24]	@ (8004b90 <HAL_RCC_GetClockConfig+0x80>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 020f 	and.w	r2, r3, #15
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	601a      	str	r2, [r3, #0]
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	58024400 	.word	0x58024400
 8004b90:	52002000 	.word	0x52002000

08004b94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b98:	f7ff ff5e 	bl	8004a58 <HAL_RCC_GetHCLKFreq>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	4b06      	ldr	r3, [pc, #24]	@ (8004bb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	091b      	lsrs	r3, r3, #4
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	4904      	ldr	r1, [pc, #16]	@ (8004bbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004baa:	5ccb      	ldrb	r3, [r1, r3]
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	58024400 	.word	0x58024400
 8004bbc:	0801b7dc 	.word	0x0801b7dc

08004bc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b089      	sub	sp, #36	@ 0x24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bc8:	4ba1      	ldr	r3, [pc, #644]	@ (8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004bd2:	4b9f      	ldr	r3, [pc, #636]	@ (8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd6:	0b1b      	lsrs	r3, r3, #12
 8004bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bdc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004bde:	4b9c      	ldr	r3, [pc, #624]	@ (8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be2:	091b      	lsrs	r3, r3, #4
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004bea:	4b99      	ldr	r3, [pc, #612]	@ (8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bee:	08db      	lsrs	r3, r3, #3
 8004bf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	fb02 f303 	mul.w	r3, r2, r3
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8111 	beq.w	8004e30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	f000 8083 	beq.w	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	f200 80a1 	bhi.w	8004d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d056      	beq.n	8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c2a:	e099      	b.n	8004d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c2c:	4b88      	ldr	r3, [pc, #544]	@ (8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0320 	and.w	r3, r3, #32
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d02d      	beq.n	8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c38:	4b85      	ldr	r3, [pc, #532]	@ (8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	08db      	lsrs	r3, r3, #3
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	4a84      	ldr	r2, [pc, #528]	@ (8004e54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c44:	fa22 f303 	lsr.w	r3, r2, r3
 8004c48:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	ee07 3a90 	vmov	s15, r3
 8004c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c62:	4b7b      	ldr	r3, [pc, #492]	@ (8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c92:	e087      	b.n	8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca6:	4b6a      	ldr	r3, [pc, #424]	@ (8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cd6:	e065      	b.n	8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cea:	4b59      	ldr	r3, [pc, #356]	@ (8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cfe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d1a:	e043      	b.n	8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d2e:	4b48      	ldr	r3, [pc, #288]	@ (8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d5e:	e021      	b.n	8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d72:	4b37      	ldr	r3, [pc, #220]	@ (8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004da2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004da4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da8:	0a5b      	lsrs	r3, r3, #9
 8004daa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dae:	ee07 3a90 	vmov	s15, r3
 8004db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dca:	ee17 2a90 	vmov	r2, s15
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd6:	0c1b      	lsrs	r3, r3, #16
 8004dd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ddc:	ee07 3a90 	vmov	s15, r3
 8004de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004de8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dec:	edd7 6a07 	vldr	s13, [r7, #28]
 8004df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004df8:	ee17 2a90 	vmov	r2, s15
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004e00:	4b13      	ldr	r3, [pc, #76]	@ (8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e04:	0e1b      	lsrs	r3, r3, #24
 8004e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e26:	ee17 2a90 	vmov	r2, s15
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e2e:	e008      	b.n	8004e42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	609a      	str	r2, [r3, #8]
}
 8004e42:	bf00      	nop
 8004e44:	3724      	adds	r7, #36	@ 0x24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	58024400 	.word	0x58024400
 8004e54:	03d09000 	.word	0x03d09000
 8004e58:	46000000 	.word	0x46000000
 8004e5c:	4c742400 	.word	0x4c742400
 8004e60:	4a742400 	.word	0x4a742400
 8004e64:	4bbebc20 	.word	0x4bbebc20

08004e68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b089      	sub	sp, #36	@ 0x24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e70:	4ba1      	ldr	r3, [pc, #644]	@ (80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004e7a:	4b9f      	ldr	r3, [pc, #636]	@ (80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7e:	0d1b      	lsrs	r3, r3, #20
 8004e80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e86:	4b9c      	ldr	r3, [pc, #624]	@ (80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8a:	0a1b      	lsrs	r3, r3, #8
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004e92:	4b99      	ldr	r3, [pc, #612]	@ (80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e96:	08db      	lsrs	r3, r3, #3
 8004e98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eaa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 8111 	beq.w	80050d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	f000 8083 	beq.w	8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	f200 80a1 	bhi.w	8005008 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d056      	beq.n	8004f80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004ed2:	e099      	b.n	8005008 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ed4:	4b88      	ldr	r3, [pc, #544]	@ (80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0320 	and.w	r3, r3, #32
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d02d      	beq.n	8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ee0:	4b85      	ldr	r3, [pc, #532]	@ (80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	08db      	lsrs	r3, r3, #3
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	4a84      	ldr	r2, [pc, #528]	@ (80050fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004eec:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	ee07 3a90 	vmov	s15, r3
 8004ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0a:	4b7b      	ldr	r3, [pc, #492]	@ (80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f3a:	e087      	b.n	800504c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f46:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005104 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4e:	4b6a      	ldr	r3, [pc, #424]	@ (80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f62:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f7e:	e065      	b.n	800504c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f92:	4b59      	ldr	r3, [pc, #356]	@ (80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fa6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fc2:	e043      	b.n	800504c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800510c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd6:	4b48      	ldr	r3, [pc, #288]	@ (80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005006:	e021      	b.n	800504c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	ee07 3a90 	vmov	s15, r3
 800500e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005012:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800501a:	4b37      	ldr	r3, [pc, #220]	@ (80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800501c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800502a:	ed97 6a03 	vldr	s12, [r7, #12]
 800502e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800503a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800503e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800504a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800504c:	4b2a      	ldr	r3, [pc, #168]	@ (80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800504e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005050:	0a5b      	lsrs	r3, r3, #9
 8005052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005062:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005066:	edd7 6a07 	vldr	s13, [r7, #28]
 800506a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800506e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005072:	ee17 2a90 	vmov	r2, s15
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800507a:	4b1f      	ldr	r3, [pc, #124]	@ (80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800507c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507e:	0c1b      	lsrs	r3, r3, #16
 8005080:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005084:	ee07 3a90 	vmov	s15, r3
 8005088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005090:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005094:	edd7 6a07 	vldr	s13, [r7, #28]
 8005098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800509c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050a0:	ee17 2a90 	vmov	r2, s15
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80050a8:	4b13      	ldr	r3, [pc, #76]	@ (80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ac:	0e1b      	lsrs	r3, r3, #24
 80050ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80050c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ce:	ee17 2a90 	vmov	r2, s15
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80050d6:	e008      	b.n	80050ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	609a      	str	r2, [r3, #8]
}
 80050ea:	bf00      	nop
 80050ec:	3724      	adds	r7, #36	@ 0x24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	58024400 	.word	0x58024400
 80050fc:	03d09000 	.word	0x03d09000
 8005100:	46000000 	.word	0x46000000
 8005104:	4c742400 	.word	0x4c742400
 8005108:	4a742400 	.word	0x4a742400
 800510c:	4bbebc20 	.word	0x4bbebc20

08005110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e049      	b.n	80051b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f841 	bl	80051be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3304      	adds	r3, #4
 800514c:	4619      	mov	r1, r3
 800514e:	4610      	mov	r0, r2
 8005150:	f000 f9e8 	bl	8005524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d001      	beq.n	80051ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e054      	b.n	8005296 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a26      	ldr	r2, [pc, #152]	@ (80052a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d022      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x80>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005216:	d01d      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x80>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a22      	ldr	r2, [pc, #136]	@ (80052a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d018      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x80>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a21      	ldr	r2, [pc, #132]	@ (80052ac <HAL_TIM_Base_Start_IT+0xd8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d013      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x80>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1f      	ldr	r2, [pc, #124]	@ (80052b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00e      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x80>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1e      	ldr	r2, [pc, #120]	@ (80052b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d009      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x80>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1c      	ldr	r2, [pc, #112]	@ (80052b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x80>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1b      	ldr	r2, [pc, #108]	@ (80052bc <HAL_TIM_Base_Start_IT+0xe8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d115      	bne.n	8005280 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689a      	ldr	r2, [r3, #8]
 800525a:	4b19      	ldr	r3, [pc, #100]	@ (80052c0 <HAL_TIM_Base_Start_IT+0xec>)
 800525c:	4013      	ands	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b06      	cmp	r3, #6
 8005264:	d015      	beq.n	8005292 <HAL_TIM_Base_Start_IT+0xbe>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526c:	d011      	beq.n	8005292 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f042 0201 	orr.w	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527e:	e008      	b.n	8005292 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	e000      	b.n	8005294 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005292:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40000400 	.word	0x40000400
 80052ac:	40000800 	.word	0x40000800
 80052b0:	40000c00 	.word	0x40000c00
 80052b4:	40010400 	.word	0x40010400
 80052b8:	40001800 	.word	0x40001800
 80052bc:	40014000 	.word	0x40014000
 80052c0:	00010007 	.word	0x00010007

080052c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d020      	beq.n	8005328 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01b      	beq.n	8005328 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0202 	mvn.w	r2, #2
 80052f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f8e9 	bl	80054e6 <HAL_TIM_IC_CaptureCallback>
 8005314:	e005      	b.n	8005322 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f8db 	bl	80054d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f8ec 	bl	80054fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	d020      	beq.n	8005374 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01b      	beq.n	8005374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0204 	mvn.w	r2, #4
 8005344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2202      	movs	r2, #2
 800534a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f8c3 	bl	80054e6 <HAL_TIM_IC_CaptureCallback>
 8005360:	e005      	b.n	800536e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f8b5 	bl	80054d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f8c6 	bl	80054fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d020      	beq.n	80053c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01b      	beq.n	80053c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0208 	mvn.w	r2, #8
 8005390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2204      	movs	r2, #4
 8005396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f89d 	bl	80054e6 <HAL_TIM_IC_CaptureCallback>
 80053ac:	e005      	b.n	80053ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f88f 	bl	80054d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f8a0 	bl	80054fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 0310 	and.w	r3, r3, #16
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d020      	beq.n	800540c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01b      	beq.n	800540c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0210 	mvn.w	r2, #16
 80053dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2208      	movs	r2, #8
 80053e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f877 	bl	80054e6 <HAL_TIM_IC_CaptureCallback>
 80053f8:	e005      	b.n	8005406 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f869 	bl	80054d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f87a 	bl	80054fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00c      	beq.n	8005430 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d007      	beq.n	8005430 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f06f 0201 	mvn.w	r2, #1
 8005428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fb fcac 	bl	8000d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005436:	2b00      	cmp	r3, #0
 8005438:	d104      	bne.n	8005444 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00c      	beq.n	800545e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f90d 	bl	8005678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00c      	beq.n	8005482 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546e:	2b00      	cmp	r3, #0
 8005470:	d007      	beq.n	8005482 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800547a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f905 	bl	800568c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00c      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800549e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f834 	bl	800550e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00c      	beq.n	80054ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f06f 0220 	mvn.w	r2, #32
 80054c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f8cd 	bl	8005664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ca:	bf00      	nop
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a43      	ldr	r2, [pc, #268]	@ (8005644 <TIM_Base_SetConfig+0x120>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d013      	beq.n	8005564 <TIM_Base_SetConfig+0x40>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005542:	d00f      	beq.n	8005564 <TIM_Base_SetConfig+0x40>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a40      	ldr	r2, [pc, #256]	@ (8005648 <TIM_Base_SetConfig+0x124>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00b      	beq.n	8005564 <TIM_Base_SetConfig+0x40>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a3f      	ldr	r2, [pc, #252]	@ (800564c <TIM_Base_SetConfig+0x128>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d007      	beq.n	8005564 <TIM_Base_SetConfig+0x40>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a3e      	ldr	r2, [pc, #248]	@ (8005650 <TIM_Base_SetConfig+0x12c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <TIM_Base_SetConfig+0x40>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a3d      	ldr	r2, [pc, #244]	@ (8005654 <TIM_Base_SetConfig+0x130>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d108      	bne.n	8005576 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800556a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a32      	ldr	r2, [pc, #200]	@ (8005644 <TIM_Base_SetConfig+0x120>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d01f      	beq.n	80055be <TIM_Base_SetConfig+0x9a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005584:	d01b      	beq.n	80055be <TIM_Base_SetConfig+0x9a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a2f      	ldr	r2, [pc, #188]	@ (8005648 <TIM_Base_SetConfig+0x124>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d017      	beq.n	80055be <TIM_Base_SetConfig+0x9a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a2e      	ldr	r2, [pc, #184]	@ (800564c <TIM_Base_SetConfig+0x128>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d013      	beq.n	80055be <TIM_Base_SetConfig+0x9a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a2d      	ldr	r2, [pc, #180]	@ (8005650 <TIM_Base_SetConfig+0x12c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00f      	beq.n	80055be <TIM_Base_SetConfig+0x9a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005654 <TIM_Base_SetConfig+0x130>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00b      	beq.n	80055be <TIM_Base_SetConfig+0x9a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005658 <TIM_Base_SetConfig+0x134>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d007      	beq.n	80055be <TIM_Base_SetConfig+0x9a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a2a      	ldr	r2, [pc, #168]	@ (800565c <TIM_Base_SetConfig+0x138>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d003      	beq.n	80055be <TIM_Base_SetConfig+0x9a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a29      	ldr	r2, [pc, #164]	@ (8005660 <TIM_Base_SetConfig+0x13c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d108      	bne.n	80055d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a14      	ldr	r2, [pc, #80]	@ (8005644 <TIM_Base_SetConfig+0x120>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00f      	beq.n	8005616 <TIM_Base_SetConfig+0xf2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a16      	ldr	r2, [pc, #88]	@ (8005654 <TIM_Base_SetConfig+0x130>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00b      	beq.n	8005616 <TIM_Base_SetConfig+0xf2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a15      	ldr	r2, [pc, #84]	@ (8005658 <TIM_Base_SetConfig+0x134>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d007      	beq.n	8005616 <TIM_Base_SetConfig+0xf2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a14      	ldr	r2, [pc, #80]	@ (800565c <TIM_Base_SetConfig+0x138>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d003      	beq.n	8005616 <TIM_Base_SetConfig+0xf2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a13      	ldr	r2, [pc, #76]	@ (8005660 <TIM_Base_SetConfig+0x13c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d103      	bne.n	800561e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f043 0204 	orr.w	r2, r3, #4
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	601a      	str	r2, [r3, #0]
}
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40010000 	.word	0x40010000
 8005648:	40000400 	.word	0x40000400
 800564c:	40000800 	.word	0x40000800
 8005650:	40000c00 	.word	0x40000c00
 8005654:	40010400 	.word	0x40010400
 8005658:	40014000 	.word	0x40014000
 800565c:	40014400 	.word	0x40014400
 8005660:	40014800 	.word	0x40014800

08005664 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e042      	b.n	8005738 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d106      	bne.n	80056ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f83b 	bl	8005740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2224      	movs	r2, #36	@ 0x24
 80056ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0201 	bic.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fe28 	bl	8006340 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f8bd 	bl	8005870 <UART_SetConfig>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e01b      	b.n	8005738 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800570e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800571e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fea7 	bl	8006484 <UART_CheckIdleState>
 8005736:	4603      	mov	r3, r0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08a      	sub	sp, #40	@ 0x28
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	4613      	mov	r3, r2
 8005762:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576a:	2b20      	cmp	r3, #32
 800576c:	d17b      	bne.n	8005866 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <HAL_UART_Transmit+0x26>
 8005774:	88fb      	ldrh	r3, [r7, #6]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e074      	b.n	8005868 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2221      	movs	r2, #33	@ 0x21
 800578a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800578e:	f7fc f803 	bl	8001798 <HAL_GetTick>
 8005792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	88fa      	ldrh	r2, [r7, #6]
 8005798:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	88fa      	ldrh	r2, [r7, #6]
 80057a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ac:	d108      	bne.n	80057c0 <HAL_UART_Transmit+0x6c>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d104      	bne.n	80057c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	e003      	b.n	80057c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057c4:	2300      	movs	r3, #0
 80057c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057c8:	e030      	b.n	800582c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2200      	movs	r2, #0
 80057d2:	2180      	movs	r1, #128	@ 0x80
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 feff 	bl	80065d8 <UART_WaitOnFlagUntilTimeout>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d005      	beq.n	80057ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e03d      	b.n	8005868 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10b      	bne.n	800580a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005800:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	3302      	adds	r3, #2
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	e007      	b.n	800581a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	781a      	ldrb	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	3301      	adds	r3, #1
 8005818:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1c8      	bne.n	80057ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2200      	movs	r2, #0
 8005840:	2140      	movs	r1, #64	@ 0x40
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fec8 	bl	80065d8 <UART_WaitOnFlagUntilTimeout>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d005      	beq.n	800585a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2220      	movs	r2, #32
 8005852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e006      	b.n	8005868 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2220      	movs	r2, #32
 800585e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	e000      	b.n	8005868 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005866:	2302      	movs	r3, #2
  }
}
 8005868:	4618      	mov	r0, r3
 800586a:	3720      	adds	r7, #32
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005874:	b092      	sub	sp, #72	@ 0x48
 8005876:	af00      	add	r7, sp, #0
 8005878:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	431a      	orrs	r2, r3
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	431a      	orrs	r2, r3
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	4313      	orrs	r3, r2
 8005896:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4bbe      	ldr	r3, [pc, #760]	@ (8005b98 <UART_SetConfig+0x328>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80058a8:	430b      	orrs	r3, r1
 80058aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4ab3      	ldr	r2, [pc, #716]	@ (8005b9c <UART_SetConfig+0x32c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d004      	beq.n	80058dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058d8:	4313      	orrs	r3, r2
 80058da:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	4baf      	ldr	r3, [pc, #700]	@ (8005ba0 <UART_SetConfig+0x330>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	6812      	ldr	r2, [r2, #0]
 80058ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80058ec:	430b      	orrs	r3, r1
 80058ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f6:	f023 010f 	bic.w	r1, r3, #15
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4aa6      	ldr	r2, [pc, #664]	@ (8005ba4 <UART_SetConfig+0x334>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d177      	bne.n	8005a00 <UART_SetConfig+0x190>
 8005910:	4ba5      	ldr	r3, [pc, #660]	@ (8005ba8 <UART_SetConfig+0x338>)
 8005912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005914:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005918:	2b28      	cmp	r3, #40	@ 0x28
 800591a:	d86d      	bhi.n	80059f8 <UART_SetConfig+0x188>
 800591c:	a201      	add	r2, pc, #4	@ (adr r2, 8005924 <UART_SetConfig+0xb4>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	080059c9 	.word	0x080059c9
 8005928:	080059f9 	.word	0x080059f9
 800592c:	080059f9 	.word	0x080059f9
 8005930:	080059f9 	.word	0x080059f9
 8005934:	080059f9 	.word	0x080059f9
 8005938:	080059f9 	.word	0x080059f9
 800593c:	080059f9 	.word	0x080059f9
 8005940:	080059f9 	.word	0x080059f9
 8005944:	080059d1 	.word	0x080059d1
 8005948:	080059f9 	.word	0x080059f9
 800594c:	080059f9 	.word	0x080059f9
 8005950:	080059f9 	.word	0x080059f9
 8005954:	080059f9 	.word	0x080059f9
 8005958:	080059f9 	.word	0x080059f9
 800595c:	080059f9 	.word	0x080059f9
 8005960:	080059f9 	.word	0x080059f9
 8005964:	080059d9 	.word	0x080059d9
 8005968:	080059f9 	.word	0x080059f9
 800596c:	080059f9 	.word	0x080059f9
 8005970:	080059f9 	.word	0x080059f9
 8005974:	080059f9 	.word	0x080059f9
 8005978:	080059f9 	.word	0x080059f9
 800597c:	080059f9 	.word	0x080059f9
 8005980:	080059f9 	.word	0x080059f9
 8005984:	080059e1 	.word	0x080059e1
 8005988:	080059f9 	.word	0x080059f9
 800598c:	080059f9 	.word	0x080059f9
 8005990:	080059f9 	.word	0x080059f9
 8005994:	080059f9 	.word	0x080059f9
 8005998:	080059f9 	.word	0x080059f9
 800599c:	080059f9 	.word	0x080059f9
 80059a0:	080059f9 	.word	0x080059f9
 80059a4:	080059e9 	.word	0x080059e9
 80059a8:	080059f9 	.word	0x080059f9
 80059ac:	080059f9 	.word	0x080059f9
 80059b0:	080059f9 	.word	0x080059f9
 80059b4:	080059f9 	.word	0x080059f9
 80059b8:	080059f9 	.word	0x080059f9
 80059bc:	080059f9 	.word	0x080059f9
 80059c0:	080059f9 	.word	0x080059f9
 80059c4:	080059f1 	.word	0x080059f1
 80059c8:	2301      	movs	r3, #1
 80059ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ce:	e222      	b.n	8005e16 <UART_SetConfig+0x5a6>
 80059d0:	2304      	movs	r3, #4
 80059d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059d6:	e21e      	b.n	8005e16 <UART_SetConfig+0x5a6>
 80059d8:	2308      	movs	r3, #8
 80059da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059de:	e21a      	b.n	8005e16 <UART_SetConfig+0x5a6>
 80059e0:	2310      	movs	r3, #16
 80059e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e6:	e216      	b.n	8005e16 <UART_SetConfig+0x5a6>
 80059e8:	2320      	movs	r3, #32
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ee:	e212      	b.n	8005e16 <UART_SetConfig+0x5a6>
 80059f0:	2340      	movs	r3, #64	@ 0x40
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f6:	e20e      	b.n	8005e16 <UART_SetConfig+0x5a6>
 80059f8:	2380      	movs	r3, #128	@ 0x80
 80059fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fe:	e20a      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a69      	ldr	r2, [pc, #420]	@ (8005bac <UART_SetConfig+0x33c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d130      	bne.n	8005a6c <UART_SetConfig+0x1fc>
 8005a0a:	4b67      	ldr	r3, [pc, #412]	@ (8005ba8 <UART_SetConfig+0x338>)
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	2b05      	cmp	r3, #5
 8005a14:	d826      	bhi.n	8005a64 <UART_SetConfig+0x1f4>
 8005a16:	a201      	add	r2, pc, #4	@ (adr r2, 8005a1c <UART_SetConfig+0x1ac>)
 8005a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1c:	08005a35 	.word	0x08005a35
 8005a20:	08005a3d 	.word	0x08005a3d
 8005a24:	08005a45 	.word	0x08005a45
 8005a28:	08005a4d 	.word	0x08005a4d
 8005a2c:	08005a55 	.word	0x08005a55
 8005a30:	08005a5d 	.word	0x08005a5d
 8005a34:	2300      	movs	r3, #0
 8005a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a3a:	e1ec      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005a3c:	2304      	movs	r3, #4
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a42:	e1e8      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005a44:	2308      	movs	r3, #8
 8005a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a4a:	e1e4      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005a4c:	2310      	movs	r3, #16
 8005a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a52:	e1e0      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005a54:	2320      	movs	r3, #32
 8005a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5a:	e1dc      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005a5c:	2340      	movs	r3, #64	@ 0x40
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a62:	e1d8      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005a64:	2380      	movs	r3, #128	@ 0x80
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6a:	e1d4      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a4f      	ldr	r2, [pc, #316]	@ (8005bb0 <UART_SetConfig+0x340>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d130      	bne.n	8005ad8 <UART_SetConfig+0x268>
 8005a76:	4b4c      	ldr	r3, [pc, #304]	@ (8005ba8 <UART_SetConfig+0x338>)
 8005a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	2b05      	cmp	r3, #5
 8005a80:	d826      	bhi.n	8005ad0 <UART_SetConfig+0x260>
 8005a82:	a201      	add	r2, pc, #4	@ (adr r2, 8005a88 <UART_SetConfig+0x218>)
 8005a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a88:	08005aa1 	.word	0x08005aa1
 8005a8c:	08005aa9 	.word	0x08005aa9
 8005a90:	08005ab1 	.word	0x08005ab1
 8005a94:	08005ab9 	.word	0x08005ab9
 8005a98:	08005ac1 	.word	0x08005ac1
 8005a9c:	08005ac9 	.word	0x08005ac9
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa6:	e1b6      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005aa8:	2304      	movs	r3, #4
 8005aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aae:	e1b2      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005ab0:	2308      	movs	r3, #8
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab6:	e1ae      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005ab8:	2310      	movs	r3, #16
 8005aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005abe:	e1aa      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005ac0:	2320      	movs	r3, #32
 8005ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac6:	e1a6      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005ac8:	2340      	movs	r3, #64	@ 0x40
 8005aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ace:	e1a2      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005ad0:	2380      	movs	r3, #128	@ 0x80
 8005ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad6:	e19e      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a35      	ldr	r2, [pc, #212]	@ (8005bb4 <UART_SetConfig+0x344>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d130      	bne.n	8005b44 <UART_SetConfig+0x2d4>
 8005ae2:	4b31      	ldr	r3, [pc, #196]	@ (8005ba8 <UART_SetConfig+0x338>)
 8005ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	2b05      	cmp	r3, #5
 8005aec:	d826      	bhi.n	8005b3c <UART_SetConfig+0x2cc>
 8005aee:	a201      	add	r2, pc, #4	@ (adr r2, 8005af4 <UART_SetConfig+0x284>)
 8005af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af4:	08005b0d 	.word	0x08005b0d
 8005af8:	08005b15 	.word	0x08005b15
 8005afc:	08005b1d 	.word	0x08005b1d
 8005b00:	08005b25 	.word	0x08005b25
 8005b04:	08005b2d 	.word	0x08005b2d
 8005b08:	08005b35 	.word	0x08005b35
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b12:	e180      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005b14:	2304      	movs	r3, #4
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b1a:	e17c      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005b1c:	2308      	movs	r3, #8
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b22:	e178      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005b24:	2310      	movs	r3, #16
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2a:	e174      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005b2c:	2320      	movs	r3, #32
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b32:	e170      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005b34:	2340      	movs	r3, #64	@ 0x40
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3a:	e16c      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005b3c:	2380      	movs	r3, #128	@ 0x80
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b42:	e168      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1b      	ldr	r2, [pc, #108]	@ (8005bb8 <UART_SetConfig+0x348>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d142      	bne.n	8005bd4 <UART_SetConfig+0x364>
 8005b4e:	4b16      	ldr	r3, [pc, #88]	@ (8005ba8 <UART_SetConfig+0x338>)
 8005b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	2b05      	cmp	r3, #5
 8005b58:	d838      	bhi.n	8005bcc <UART_SetConfig+0x35c>
 8005b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b60 <UART_SetConfig+0x2f0>)
 8005b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b60:	08005b79 	.word	0x08005b79
 8005b64:	08005b81 	.word	0x08005b81
 8005b68:	08005b89 	.word	0x08005b89
 8005b6c:	08005b91 	.word	0x08005b91
 8005b70:	08005bbd 	.word	0x08005bbd
 8005b74:	08005bc5 	.word	0x08005bc5
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b7e:	e14a      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005b80:	2304      	movs	r3, #4
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b86:	e146      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005b88:	2308      	movs	r3, #8
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8e:	e142      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005b90:	2310      	movs	r3, #16
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b96:	e13e      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005b98:	cfff69f3 	.word	0xcfff69f3
 8005b9c:	58000c00 	.word	0x58000c00
 8005ba0:	11fff4ff 	.word	0x11fff4ff
 8005ba4:	40011000 	.word	0x40011000
 8005ba8:	58024400 	.word	0x58024400
 8005bac:	40004400 	.word	0x40004400
 8005bb0:	40004800 	.word	0x40004800
 8005bb4:	40004c00 	.word	0x40004c00
 8005bb8:	40005000 	.word	0x40005000
 8005bbc:	2320      	movs	r3, #32
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc2:	e128      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005bc4:	2340      	movs	r3, #64	@ 0x40
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bca:	e124      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005bcc:	2380      	movs	r3, #128	@ 0x80
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd2:	e120      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4acb      	ldr	r2, [pc, #812]	@ (8005f08 <UART_SetConfig+0x698>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d176      	bne.n	8005ccc <UART_SetConfig+0x45c>
 8005bde:	4bcb      	ldr	r3, [pc, #812]	@ (8005f0c <UART_SetConfig+0x69c>)
 8005be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005be6:	2b28      	cmp	r3, #40	@ 0x28
 8005be8:	d86c      	bhi.n	8005cc4 <UART_SetConfig+0x454>
 8005bea:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf0 <UART_SetConfig+0x380>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005c95 	.word	0x08005c95
 8005bf4:	08005cc5 	.word	0x08005cc5
 8005bf8:	08005cc5 	.word	0x08005cc5
 8005bfc:	08005cc5 	.word	0x08005cc5
 8005c00:	08005cc5 	.word	0x08005cc5
 8005c04:	08005cc5 	.word	0x08005cc5
 8005c08:	08005cc5 	.word	0x08005cc5
 8005c0c:	08005cc5 	.word	0x08005cc5
 8005c10:	08005c9d 	.word	0x08005c9d
 8005c14:	08005cc5 	.word	0x08005cc5
 8005c18:	08005cc5 	.word	0x08005cc5
 8005c1c:	08005cc5 	.word	0x08005cc5
 8005c20:	08005cc5 	.word	0x08005cc5
 8005c24:	08005cc5 	.word	0x08005cc5
 8005c28:	08005cc5 	.word	0x08005cc5
 8005c2c:	08005cc5 	.word	0x08005cc5
 8005c30:	08005ca5 	.word	0x08005ca5
 8005c34:	08005cc5 	.word	0x08005cc5
 8005c38:	08005cc5 	.word	0x08005cc5
 8005c3c:	08005cc5 	.word	0x08005cc5
 8005c40:	08005cc5 	.word	0x08005cc5
 8005c44:	08005cc5 	.word	0x08005cc5
 8005c48:	08005cc5 	.word	0x08005cc5
 8005c4c:	08005cc5 	.word	0x08005cc5
 8005c50:	08005cad 	.word	0x08005cad
 8005c54:	08005cc5 	.word	0x08005cc5
 8005c58:	08005cc5 	.word	0x08005cc5
 8005c5c:	08005cc5 	.word	0x08005cc5
 8005c60:	08005cc5 	.word	0x08005cc5
 8005c64:	08005cc5 	.word	0x08005cc5
 8005c68:	08005cc5 	.word	0x08005cc5
 8005c6c:	08005cc5 	.word	0x08005cc5
 8005c70:	08005cb5 	.word	0x08005cb5
 8005c74:	08005cc5 	.word	0x08005cc5
 8005c78:	08005cc5 	.word	0x08005cc5
 8005c7c:	08005cc5 	.word	0x08005cc5
 8005c80:	08005cc5 	.word	0x08005cc5
 8005c84:	08005cc5 	.word	0x08005cc5
 8005c88:	08005cc5 	.word	0x08005cc5
 8005c8c:	08005cc5 	.word	0x08005cc5
 8005c90:	08005cbd 	.word	0x08005cbd
 8005c94:	2301      	movs	r3, #1
 8005c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9a:	e0bc      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca2:	e0b8      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005ca4:	2308      	movs	r3, #8
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005caa:	e0b4      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005cac:	2310      	movs	r3, #16
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb2:	e0b0      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005cb4:	2320      	movs	r3, #32
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cba:	e0ac      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005cbc:	2340      	movs	r3, #64	@ 0x40
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc2:	e0a8      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005cc4:	2380      	movs	r3, #128	@ 0x80
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cca:	e0a4      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a8f      	ldr	r2, [pc, #572]	@ (8005f10 <UART_SetConfig+0x6a0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d130      	bne.n	8005d38 <UART_SetConfig+0x4c8>
 8005cd6:	4b8d      	ldr	r3, [pc, #564]	@ (8005f0c <UART_SetConfig+0x69c>)
 8005cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	2b05      	cmp	r3, #5
 8005ce0:	d826      	bhi.n	8005d30 <UART_SetConfig+0x4c0>
 8005ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce8 <UART_SetConfig+0x478>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005d01 	.word	0x08005d01
 8005cec:	08005d09 	.word	0x08005d09
 8005cf0:	08005d11 	.word	0x08005d11
 8005cf4:	08005d19 	.word	0x08005d19
 8005cf8:	08005d21 	.word	0x08005d21
 8005cfc:	08005d29 	.word	0x08005d29
 8005d00:	2300      	movs	r3, #0
 8005d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d06:	e086      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005d08:	2304      	movs	r3, #4
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0e:	e082      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005d10:	2308      	movs	r3, #8
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d16:	e07e      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005d18:	2310      	movs	r3, #16
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1e:	e07a      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005d20:	2320      	movs	r3, #32
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d26:	e076      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005d28:	2340      	movs	r3, #64	@ 0x40
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2e:	e072      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005d30:	2380      	movs	r3, #128	@ 0x80
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d36:	e06e      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a75      	ldr	r2, [pc, #468]	@ (8005f14 <UART_SetConfig+0x6a4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d130      	bne.n	8005da4 <UART_SetConfig+0x534>
 8005d42:	4b72      	ldr	r3, [pc, #456]	@ (8005f0c <UART_SetConfig+0x69c>)
 8005d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	2b05      	cmp	r3, #5
 8005d4c:	d826      	bhi.n	8005d9c <UART_SetConfig+0x52c>
 8005d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d54 <UART_SetConfig+0x4e4>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005d6d 	.word	0x08005d6d
 8005d58:	08005d75 	.word	0x08005d75
 8005d5c:	08005d7d 	.word	0x08005d7d
 8005d60:	08005d85 	.word	0x08005d85
 8005d64:	08005d8d 	.word	0x08005d8d
 8005d68:	08005d95 	.word	0x08005d95
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d72:	e050      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005d74:	2304      	movs	r3, #4
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7a:	e04c      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005d7c:	2308      	movs	r3, #8
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d82:	e048      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005d84:	2310      	movs	r3, #16
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8a:	e044      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005d8c:	2320      	movs	r3, #32
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d92:	e040      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005d94:	2340      	movs	r3, #64	@ 0x40
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9a:	e03c      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005d9c:	2380      	movs	r3, #128	@ 0x80
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da2:	e038      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a5b      	ldr	r2, [pc, #364]	@ (8005f18 <UART_SetConfig+0x6a8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d130      	bne.n	8005e10 <UART_SetConfig+0x5a0>
 8005dae:	4b57      	ldr	r3, [pc, #348]	@ (8005f0c <UART_SetConfig+0x69c>)
 8005db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	2b05      	cmp	r3, #5
 8005db8:	d826      	bhi.n	8005e08 <UART_SetConfig+0x598>
 8005dba:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc0 <UART_SetConfig+0x550>)
 8005dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc0:	08005dd9 	.word	0x08005dd9
 8005dc4:	08005de1 	.word	0x08005de1
 8005dc8:	08005de9 	.word	0x08005de9
 8005dcc:	08005df1 	.word	0x08005df1
 8005dd0:	08005df9 	.word	0x08005df9
 8005dd4:	08005e01 	.word	0x08005e01
 8005dd8:	2302      	movs	r3, #2
 8005dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dde:	e01a      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005de0:	2304      	movs	r3, #4
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de6:	e016      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005de8:	2308      	movs	r3, #8
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dee:	e012      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005df0:	2310      	movs	r3, #16
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df6:	e00e      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005df8:	2320      	movs	r3, #32
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfe:	e00a      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005e00:	2340      	movs	r3, #64	@ 0x40
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e06:	e006      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005e08:	2380      	movs	r3, #128	@ 0x80
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0e:	e002      	b.n	8005e16 <UART_SetConfig+0x5a6>
 8005e10:	2380      	movs	r3, #128	@ 0x80
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8005f18 <UART_SetConfig+0x6a8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	f040 80f8 	bne.w	8006012 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005e26:	2b20      	cmp	r3, #32
 8005e28:	dc46      	bgt.n	8005eb8 <UART_SetConfig+0x648>
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	f2c0 8082 	blt.w	8005f34 <UART_SetConfig+0x6c4>
 8005e30:	3b02      	subs	r3, #2
 8005e32:	2b1e      	cmp	r3, #30
 8005e34:	d87e      	bhi.n	8005f34 <UART_SetConfig+0x6c4>
 8005e36:	a201      	add	r2, pc, #4	@ (adr r2, 8005e3c <UART_SetConfig+0x5cc>)
 8005e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3c:	08005ebf 	.word	0x08005ebf
 8005e40:	08005f35 	.word	0x08005f35
 8005e44:	08005ec7 	.word	0x08005ec7
 8005e48:	08005f35 	.word	0x08005f35
 8005e4c:	08005f35 	.word	0x08005f35
 8005e50:	08005f35 	.word	0x08005f35
 8005e54:	08005ed7 	.word	0x08005ed7
 8005e58:	08005f35 	.word	0x08005f35
 8005e5c:	08005f35 	.word	0x08005f35
 8005e60:	08005f35 	.word	0x08005f35
 8005e64:	08005f35 	.word	0x08005f35
 8005e68:	08005f35 	.word	0x08005f35
 8005e6c:	08005f35 	.word	0x08005f35
 8005e70:	08005f35 	.word	0x08005f35
 8005e74:	08005ee7 	.word	0x08005ee7
 8005e78:	08005f35 	.word	0x08005f35
 8005e7c:	08005f35 	.word	0x08005f35
 8005e80:	08005f35 	.word	0x08005f35
 8005e84:	08005f35 	.word	0x08005f35
 8005e88:	08005f35 	.word	0x08005f35
 8005e8c:	08005f35 	.word	0x08005f35
 8005e90:	08005f35 	.word	0x08005f35
 8005e94:	08005f35 	.word	0x08005f35
 8005e98:	08005f35 	.word	0x08005f35
 8005e9c:	08005f35 	.word	0x08005f35
 8005ea0:	08005f35 	.word	0x08005f35
 8005ea4:	08005f35 	.word	0x08005f35
 8005ea8:	08005f35 	.word	0x08005f35
 8005eac:	08005f35 	.word	0x08005f35
 8005eb0:	08005f35 	.word	0x08005f35
 8005eb4:	08005f27 	.word	0x08005f27
 8005eb8:	2b40      	cmp	r3, #64	@ 0x40
 8005eba:	d037      	beq.n	8005f2c <UART_SetConfig+0x6bc>
 8005ebc:	e03a      	b.n	8005f34 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005ebe:	f7fe fe69 	bl	8004b94 <HAL_RCCEx_GetD3PCLK1Freq>
 8005ec2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ec4:	e03c      	b.n	8005f40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fe fe78 	bl	8004bc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ed4:	e034      	b.n	8005f40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ed6:	f107 0318 	add.w	r3, r7, #24
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe ffc4 	bl	8004e68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ee4:	e02c      	b.n	8005f40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ee6:	4b09      	ldr	r3, [pc, #36]	@ (8005f0c <UART_SetConfig+0x69c>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0320 	and.w	r3, r3, #32
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d016      	beq.n	8005f20 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ef2:	4b06      	ldr	r3, [pc, #24]	@ (8005f0c <UART_SetConfig+0x69c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	08db      	lsrs	r3, r3, #3
 8005ef8:	f003 0303 	and.w	r3, r3, #3
 8005efc:	4a07      	ldr	r2, [pc, #28]	@ (8005f1c <UART_SetConfig+0x6ac>)
 8005efe:	fa22 f303 	lsr.w	r3, r2, r3
 8005f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f04:	e01c      	b.n	8005f40 <UART_SetConfig+0x6d0>
 8005f06:	bf00      	nop
 8005f08:	40011400 	.word	0x40011400
 8005f0c:	58024400 	.word	0x58024400
 8005f10:	40007800 	.word	0x40007800
 8005f14:	40007c00 	.word	0x40007c00
 8005f18:	58000c00 	.word	0x58000c00
 8005f1c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005f20:	4b9d      	ldr	r3, [pc, #628]	@ (8006198 <UART_SetConfig+0x928>)
 8005f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f24:	e00c      	b.n	8005f40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f26:	4b9d      	ldr	r3, [pc, #628]	@ (800619c <UART_SetConfig+0x92c>)
 8005f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f2a:	e009      	b.n	8005f40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f32:	e005      	b.n	8005f40 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005f3e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 81de 	beq.w	8006304 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4c:	4a94      	ldr	r2, [pc, #592]	@ (80061a0 <UART_SetConfig+0x930>)
 8005f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f52:	461a      	mov	r2, r3
 8005f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f56:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f5a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	4413      	add	r3, r2
 8005f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d305      	bcc.n	8005f78 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d903      	bls.n	8005f80 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005f7e:	e1c1      	b.n	8006304 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f82:	2200      	movs	r2, #0
 8005f84:	60bb      	str	r3, [r7, #8]
 8005f86:	60fa      	str	r2, [r7, #12]
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8c:	4a84      	ldr	r2, [pc, #528]	@ (80061a0 <UART_SetConfig+0x930>)
 8005f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	2200      	movs	r2, #0
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	607a      	str	r2, [r7, #4]
 8005f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005fa2:	f7fa f9f5 	bl	8000390 <__aeabi_uldivmod>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4610      	mov	r0, r2
 8005fac:	4619      	mov	r1, r3
 8005fae:	f04f 0200 	mov.w	r2, #0
 8005fb2:	f04f 0300 	mov.w	r3, #0
 8005fb6:	020b      	lsls	r3, r1, #8
 8005fb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fbc:	0202      	lsls	r2, r0, #8
 8005fbe:	6979      	ldr	r1, [r7, #20]
 8005fc0:	6849      	ldr	r1, [r1, #4]
 8005fc2:	0849      	lsrs	r1, r1, #1
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	4605      	mov	r5, r0
 8005fca:	eb12 0804 	adds.w	r8, r2, r4
 8005fce:	eb43 0905 	adc.w	r9, r3, r5
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	469a      	mov	sl, r3
 8005fda:	4693      	mov	fp, r2
 8005fdc:	4652      	mov	r2, sl
 8005fde:	465b      	mov	r3, fp
 8005fe0:	4640      	mov	r0, r8
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	f7fa f9d4 	bl	8000390 <__aeabi_uldivmod>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4613      	mov	r3, r2
 8005fee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ff6:	d308      	bcc.n	800600a <UART_SetConfig+0x79a>
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ffe:	d204      	bcs.n	800600a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006006:	60da      	str	r2, [r3, #12]
 8006008:	e17c      	b.n	8006304 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006010:	e178      	b.n	8006304 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800601a:	f040 80c5 	bne.w	80061a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800601e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006022:	2b20      	cmp	r3, #32
 8006024:	dc48      	bgt.n	80060b8 <UART_SetConfig+0x848>
 8006026:	2b00      	cmp	r3, #0
 8006028:	db7b      	blt.n	8006122 <UART_SetConfig+0x8b2>
 800602a:	2b20      	cmp	r3, #32
 800602c:	d879      	bhi.n	8006122 <UART_SetConfig+0x8b2>
 800602e:	a201      	add	r2, pc, #4	@ (adr r2, 8006034 <UART_SetConfig+0x7c4>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	080060bf 	.word	0x080060bf
 8006038:	080060c7 	.word	0x080060c7
 800603c:	08006123 	.word	0x08006123
 8006040:	08006123 	.word	0x08006123
 8006044:	080060cf 	.word	0x080060cf
 8006048:	08006123 	.word	0x08006123
 800604c:	08006123 	.word	0x08006123
 8006050:	08006123 	.word	0x08006123
 8006054:	080060df 	.word	0x080060df
 8006058:	08006123 	.word	0x08006123
 800605c:	08006123 	.word	0x08006123
 8006060:	08006123 	.word	0x08006123
 8006064:	08006123 	.word	0x08006123
 8006068:	08006123 	.word	0x08006123
 800606c:	08006123 	.word	0x08006123
 8006070:	08006123 	.word	0x08006123
 8006074:	080060ef 	.word	0x080060ef
 8006078:	08006123 	.word	0x08006123
 800607c:	08006123 	.word	0x08006123
 8006080:	08006123 	.word	0x08006123
 8006084:	08006123 	.word	0x08006123
 8006088:	08006123 	.word	0x08006123
 800608c:	08006123 	.word	0x08006123
 8006090:	08006123 	.word	0x08006123
 8006094:	08006123 	.word	0x08006123
 8006098:	08006123 	.word	0x08006123
 800609c:	08006123 	.word	0x08006123
 80060a0:	08006123 	.word	0x08006123
 80060a4:	08006123 	.word	0x08006123
 80060a8:	08006123 	.word	0x08006123
 80060ac:	08006123 	.word	0x08006123
 80060b0:	08006123 	.word	0x08006123
 80060b4:	08006115 	.word	0x08006115
 80060b8:	2b40      	cmp	r3, #64	@ 0x40
 80060ba:	d02e      	beq.n	800611a <UART_SetConfig+0x8aa>
 80060bc:	e031      	b.n	8006122 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060be:	f7fe fcfb 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 80060c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80060c4:	e033      	b.n	800612e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060c6:	f7fe fd0d 	bl	8004ae4 <HAL_RCC_GetPCLK2Freq>
 80060ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80060cc:	e02f      	b.n	800612e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fe fd74 	bl	8004bc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060dc:	e027      	b.n	800612e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060de:	f107 0318 	add.w	r3, r7, #24
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe fec0 	bl	8004e68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ec:	e01f      	b.n	800612e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060ee:	4b2d      	ldr	r3, [pc, #180]	@ (80061a4 <UART_SetConfig+0x934>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d009      	beq.n	800610e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060fa:	4b2a      	ldr	r3, [pc, #168]	@ (80061a4 <UART_SetConfig+0x934>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	08db      	lsrs	r3, r3, #3
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	4a24      	ldr	r2, [pc, #144]	@ (8006198 <UART_SetConfig+0x928>)
 8006106:	fa22 f303 	lsr.w	r3, r2, r3
 800610a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800610c:	e00f      	b.n	800612e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800610e:	4b22      	ldr	r3, [pc, #136]	@ (8006198 <UART_SetConfig+0x928>)
 8006110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006112:	e00c      	b.n	800612e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006114:	4b21      	ldr	r3, [pc, #132]	@ (800619c <UART_SetConfig+0x92c>)
 8006116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006118:	e009      	b.n	800612e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800611a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800611e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006120:	e005      	b.n	800612e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800612c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800612e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80e7 	beq.w	8006304 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613a:	4a19      	ldr	r2, [pc, #100]	@ (80061a0 <UART_SetConfig+0x930>)
 800613c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006140:	461a      	mov	r2, r3
 8006142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006144:	fbb3 f3f2 	udiv	r3, r3, r2
 8006148:	005a      	lsls	r2, r3, #1
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	441a      	add	r2, r3
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	fbb2 f3f3 	udiv	r3, r2, r3
 800615a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800615c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800615e:	2b0f      	cmp	r3, #15
 8006160:	d916      	bls.n	8006190 <UART_SetConfig+0x920>
 8006162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006168:	d212      	bcs.n	8006190 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800616a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616c:	b29b      	uxth	r3, r3
 800616e:	f023 030f 	bic.w	r3, r3, #15
 8006172:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006176:	085b      	lsrs	r3, r3, #1
 8006178:	b29b      	uxth	r3, r3
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	b29a      	uxth	r2, r3
 8006180:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006182:	4313      	orrs	r3, r2
 8006184:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800618c:	60da      	str	r2, [r3, #12]
 800618e:	e0b9      	b.n	8006304 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006196:	e0b5      	b.n	8006304 <UART_SetConfig+0xa94>
 8006198:	03d09000 	.word	0x03d09000
 800619c:	003d0900 	.word	0x003d0900
 80061a0:	0801b7f8 	.word	0x0801b7f8
 80061a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80061a8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	dc49      	bgt.n	8006244 <UART_SetConfig+0x9d4>
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	db7c      	blt.n	80062ae <UART_SetConfig+0xa3e>
 80061b4:	2b20      	cmp	r3, #32
 80061b6:	d87a      	bhi.n	80062ae <UART_SetConfig+0xa3e>
 80061b8:	a201      	add	r2, pc, #4	@ (adr r2, 80061c0 <UART_SetConfig+0x950>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	0800624b 	.word	0x0800624b
 80061c4:	08006253 	.word	0x08006253
 80061c8:	080062af 	.word	0x080062af
 80061cc:	080062af 	.word	0x080062af
 80061d0:	0800625b 	.word	0x0800625b
 80061d4:	080062af 	.word	0x080062af
 80061d8:	080062af 	.word	0x080062af
 80061dc:	080062af 	.word	0x080062af
 80061e0:	0800626b 	.word	0x0800626b
 80061e4:	080062af 	.word	0x080062af
 80061e8:	080062af 	.word	0x080062af
 80061ec:	080062af 	.word	0x080062af
 80061f0:	080062af 	.word	0x080062af
 80061f4:	080062af 	.word	0x080062af
 80061f8:	080062af 	.word	0x080062af
 80061fc:	080062af 	.word	0x080062af
 8006200:	0800627b 	.word	0x0800627b
 8006204:	080062af 	.word	0x080062af
 8006208:	080062af 	.word	0x080062af
 800620c:	080062af 	.word	0x080062af
 8006210:	080062af 	.word	0x080062af
 8006214:	080062af 	.word	0x080062af
 8006218:	080062af 	.word	0x080062af
 800621c:	080062af 	.word	0x080062af
 8006220:	080062af 	.word	0x080062af
 8006224:	080062af 	.word	0x080062af
 8006228:	080062af 	.word	0x080062af
 800622c:	080062af 	.word	0x080062af
 8006230:	080062af 	.word	0x080062af
 8006234:	080062af 	.word	0x080062af
 8006238:	080062af 	.word	0x080062af
 800623c:	080062af 	.word	0x080062af
 8006240:	080062a1 	.word	0x080062a1
 8006244:	2b40      	cmp	r3, #64	@ 0x40
 8006246:	d02e      	beq.n	80062a6 <UART_SetConfig+0xa36>
 8006248:	e031      	b.n	80062ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800624a:	f7fe fc35 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 800624e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006250:	e033      	b.n	80062ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006252:	f7fe fc47 	bl	8004ae4 <HAL_RCC_GetPCLK2Freq>
 8006256:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006258:	e02f      	b.n	80062ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800625a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800625e:	4618      	mov	r0, r3
 8006260:	f7fe fcae 	bl	8004bc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006268:	e027      	b.n	80062ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800626a:	f107 0318 	add.w	r3, r7, #24
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe fdfa 	bl	8004e68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006278:	e01f      	b.n	80062ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800627a:	4b2d      	ldr	r3, [pc, #180]	@ (8006330 <UART_SetConfig+0xac0>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d009      	beq.n	800629a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006286:	4b2a      	ldr	r3, [pc, #168]	@ (8006330 <UART_SetConfig+0xac0>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	08db      	lsrs	r3, r3, #3
 800628c:	f003 0303 	and.w	r3, r3, #3
 8006290:	4a28      	ldr	r2, [pc, #160]	@ (8006334 <UART_SetConfig+0xac4>)
 8006292:	fa22 f303 	lsr.w	r3, r2, r3
 8006296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006298:	e00f      	b.n	80062ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800629a:	4b26      	ldr	r3, [pc, #152]	@ (8006334 <UART_SetConfig+0xac4>)
 800629c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800629e:	e00c      	b.n	80062ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062a0:	4b25      	ldr	r3, [pc, #148]	@ (8006338 <UART_SetConfig+0xac8>)
 80062a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062a4:	e009      	b.n	80062ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062ac:	e005      	b.n	80062ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80062b8:	bf00      	nop
    }

    if (pclk != 0U)
 80062ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d021      	beq.n	8006304 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c4:	4a1d      	ldr	r2, [pc, #116]	@ (800633c <UART_SetConfig+0xacc>)
 80062c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ca:	461a      	mov	r2, r3
 80062cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	085b      	lsrs	r3, r3, #1
 80062d8:	441a      	add	r2, r3
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e6:	2b0f      	cmp	r3, #15
 80062e8:	d909      	bls.n	80062fe <UART_SetConfig+0xa8e>
 80062ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f0:	d205      	bcs.n	80062fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60da      	str	r2, [r3, #12]
 80062fc:	e002      	b.n	8006304 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2201      	movs	r2, #1
 8006308:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	2201      	movs	r2, #1
 8006310:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	2200      	movs	r2, #0
 8006318:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2200      	movs	r2, #0
 800631e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006320:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006324:	4618      	mov	r0, r3
 8006326:	3748      	adds	r7, #72	@ 0x48
 8006328:	46bd      	mov	sp, r7
 800632a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800632e:	bf00      	nop
 8006330:	58024400 	.word	0x58024400
 8006334:	03d09000 	.word	0x03d09000
 8006338:	003d0900 	.word	0x003d0900
 800633c:	0801b7f8 	.word	0x0801b7f8

08006340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634c:	f003 0308 	and.w	r3, r3, #8
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00a      	beq.n	800636a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00a      	beq.n	80063ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b2:	f003 0304 	and.w	r3, r3, #4
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00a      	beq.n	80063d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d4:	f003 0310 	and.w	r3, r3, #16
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00a      	beq.n	80063f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641c:	2b00      	cmp	r3, #0
 800641e:	d01a      	beq.n	8006456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800643a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800643e:	d10a      	bne.n	8006456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	605a      	str	r2, [r3, #4]
  }
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b098      	sub	sp, #96	@ 0x60
 8006488:	af02      	add	r7, sp, #8
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006494:	f7fb f980 	bl	8001798 <HAL_GetTick>
 8006498:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d12f      	bne.n	8006508 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064b0:	2200      	movs	r2, #0
 80064b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f88e 	bl	80065d8 <UART_WaitOnFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d022      	beq.n	8006508 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ca:	e853 3f00 	ldrex	r3, [r3]
 80064ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	461a      	mov	r2, r3
 80064de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064e8:	e841 2300 	strex	r3, r2, [r1]
 80064ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1e6      	bne.n	80064c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2220      	movs	r2, #32
 80064f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e063      	b.n	80065d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b04      	cmp	r3, #4
 8006514:	d149      	bne.n	80065aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006516:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800651e:	2200      	movs	r2, #0
 8006520:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f857 	bl	80065d8 <UART_WaitOnFlagUntilTimeout>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d03c      	beq.n	80065aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	623b      	str	r3, [r7, #32]
   return(result);
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006544:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800654e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006550:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006552:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006554:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006556:	e841 2300 	strex	r3, r2, [r1]
 800655a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800655c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1e6      	bne.n	8006530 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3308      	adds	r3, #8
 8006568:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	e853 3f00 	ldrex	r3, [r3]
 8006570:	60fb      	str	r3, [r7, #12]
   return(result);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f023 0301 	bic.w	r3, r3, #1
 8006578:	64bb      	str	r3, [r7, #72]	@ 0x48
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3308      	adds	r3, #8
 8006580:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006582:	61fa      	str	r2, [r7, #28]
 8006584:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006586:	69b9      	ldr	r1, [r7, #24]
 8006588:	69fa      	ldr	r2, [r7, #28]
 800658a:	e841 2300 	strex	r3, r2, [r1]
 800658e:	617b      	str	r3, [r7, #20]
   return(result);
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1e5      	bne.n	8006562 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2220      	movs	r2, #32
 800659a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e012      	b.n	80065d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2220      	movs	r2, #32
 80065ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3758      	adds	r7, #88	@ 0x58
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	4613      	mov	r3, r2
 80065e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065e8:	e04f      	b.n	800668a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f0:	d04b      	beq.n	800668a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f2:	f7fb f8d1 	bl	8001798 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d302      	bcc.n	8006608 <UART_WaitOnFlagUntilTimeout+0x30>
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e04e      	b.n	80066aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0304 	and.w	r3, r3, #4
 8006616:	2b00      	cmp	r3, #0
 8006618:	d037      	beq.n	800668a <UART_WaitOnFlagUntilTimeout+0xb2>
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b80      	cmp	r3, #128	@ 0x80
 800661e:	d034      	beq.n	800668a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b40      	cmp	r3, #64	@ 0x40
 8006624:	d031      	beq.n	800668a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	f003 0308 	and.w	r3, r3, #8
 8006630:	2b08      	cmp	r3, #8
 8006632:	d110      	bne.n	8006656 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2208      	movs	r2, #8
 800663a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f839 	bl	80066b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2208      	movs	r2, #8
 8006646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e029      	b.n	80066aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006660:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006664:	d111      	bne.n	800668a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800666e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f81f 	bl	80066b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2220      	movs	r2, #32
 800667a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e00f      	b.n	80066aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	69da      	ldr	r2, [r3, #28]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	4013      	ands	r3, r2
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	429a      	cmp	r2, r3
 8006698:	bf0c      	ite	eq
 800669a:	2301      	moveq	r3, #1
 800669c:	2300      	movne	r3, #0
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d0a0      	beq.n	80065ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b095      	sub	sp, #84	@ 0x54
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	461a      	mov	r2, r3
 80066d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066da:	643b      	str	r3, [r7, #64]	@ 0x40
 80066dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e6      	bne.n	80066bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3308      	adds	r3, #8
 80066f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	4b1e      	ldr	r3, [pc, #120]	@ (800677c <UART_EndRxTransfer+0xc8>)
 8006702:	4013      	ands	r3, r2
 8006704:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3308      	adds	r3, #8
 800670c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800670e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006710:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006714:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800671c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e5      	bne.n	80066ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006726:	2b01      	cmp	r3, #1
 8006728:	d118      	bne.n	800675c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	e853 3f00 	ldrex	r3, [r3]
 8006736:	60bb      	str	r3, [r7, #8]
   return(result);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f023 0310 	bic.w	r3, r3, #16
 800673e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	461a      	mov	r2, r3
 8006746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006748:	61bb      	str	r3, [r7, #24]
 800674a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	6979      	ldr	r1, [r7, #20]
 800674e:	69ba      	ldr	r2, [r7, #24]
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	613b      	str	r3, [r7, #16]
   return(result);
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e6      	bne.n	800672a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2220      	movs	r2, #32
 8006760:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006770:	bf00      	nop
 8006772:	3754      	adds	r7, #84	@ 0x54
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	effffffe 	.word	0xeffffffe

08006780 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006780:	b5b0      	push	{r4, r5, r7, lr}
 8006782:	b08c      	sub	sp, #48	@ 0x30
 8006784:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006786:	2100      	movs	r1, #0
 8006788:	2000      	movs	r0, #0
 800678a:	f00f febf 	bl	801650c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800678e:	4b1a      	ldr	r3, [pc, #104]	@ (80067f8 <MX_LWIP_Init+0x78>)
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8006794:	4b19      	ldr	r3, [pc, #100]	@ (80067fc <MX_LWIP_Init+0x7c>)
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800679a:	4b19      	ldr	r3, [pc, #100]	@ (8006800 <MX_LWIP_Init+0x80>)
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80067a0:	4b18      	ldr	r3, [pc, #96]	@ (8006804 <MX_LWIP_Init+0x84>)
 80067a2:	9302      	str	r3, [sp, #8]
 80067a4:	4b18      	ldr	r3, [pc, #96]	@ (8006808 <MX_LWIP_Init+0x88>)
 80067a6:	9301      	str	r3, [sp, #4]
 80067a8:	2300      	movs	r3, #0
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	4b14      	ldr	r3, [pc, #80]	@ (8006800 <MX_LWIP_Init+0x80>)
 80067ae:	4a13      	ldr	r2, [pc, #76]	@ (80067fc <MX_LWIP_Init+0x7c>)
 80067b0:	4911      	ldr	r1, [pc, #68]	@ (80067f8 <MX_LWIP_Init+0x78>)
 80067b2:	4816      	ldr	r0, [pc, #88]	@ (800680c <MX_LWIP_Init+0x8c>)
 80067b4:	f009 f86e 	bl	800f894 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80067b8:	4814      	ldr	r0, [pc, #80]	@ (800680c <MX_LWIP_Init+0x8c>)
 80067ba:	f009 fa2f 	bl	800fc1c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80067be:	4813      	ldr	r0, [pc, #76]	@ (800680c <MX_LWIP_Init+0x8c>)
 80067c0:	f009 fa3c 	bl	800fc3c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80067c4:	4912      	ldr	r1, [pc, #72]	@ (8006810 <MX_LWIP_Init+0x90>)
 80067c6:	4811      	ldr	r0, [pc, #68]	@ (800680c <MX_LWIP_Init+0x8c>)
 80067c8:	f009 fb4e 	bl	800fe68 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80067cc:	4b11      	ldr	r3, [pc, #68]	@ (8006814 <MX_LWIP_Init+0x94>)
 80067ce:	1d3c      	adds	r4, r7, #4
 80067d0:	461d      	mov	r5, r3
 80067d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80067da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80067de:	1d3b      	adds	r3, r7, #4
 80067e0:	490a      	ldr	r1, [pc, #40]	@ (800680c <MX_LWIP_Init+0x8c>)
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fd9a 	bl	800731c <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80067e8:	4808      	ldr	r0, [pc, #32]	@ (800680c <MX_LWIP_Init+0x8c>)
 80067ea:	f004 f88d 	bl	800a908 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80067ee:	bf00      	nop
 80067f0:	3720      	adds	r7, #32
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bdb0      	pop	{r4, r5, r7, pc}
 80067f6:	bf00      	nop
 80067f8:	240004b0 	.word	0x240004b0
 80067fc:	240004b4 	.word	0x240004b4
 8006800:	240004b8 	.word	0x240004b8
 8006804:	08016449 	.word	0x08016449
 8006808:	08006d25 	.word	0x08006d25
 800680c:	24000474 	.word	0x24000474
 8006810:	08006819 	.word	0x08006819
 8006814:	08018570 	.word	0x08018570

08006818 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8006834:	4b04      	ldr	r3, [pc, #16]	@ (8006848 <HAL_ETH_RxCpltCallback+0x1c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f000 feeb 	bl	8007614 <osSemaphoreRelease>
}
 800683e:	bf00      	nop
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	240004c4 	.word	0x240004c4

0800684c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8006854:	4b04      	ldr	r3, [pc, #16]	@ (8006868 <HAL_ETH_TxCpltCallback+0x1c>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4618      	mov	r0, r3
 800685a:	f000 fedb 	bl	8007614 <osSemaphoreRelease>
}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	240004c8 	.word	0x240004c8

0800686c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7fc f914 	bl	8002aa2 <HAL_ETH_GetDMAError>
 800687a:	4603      	mov	r3, r0
 800687c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006880:	2b80      	cmp	r3, #128	@ 0x80
 8006882:	d104      	bne.n	800688e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8006884:	4b04      	ldr	r3, [pc, #16]	@ (8006898 <HAL_ETH_ErrorCallback+0x2c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4618      	mov	r0, r3
 800688a:	f000 fec3 	bl	8007614 <osSemaphoreRelease>
  }
}
 800688e:	bf00      	nop
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	240004c4 	.word	0x240004c4

0800689c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800689c:	b5b0      	push	{r4, r5, r7, lr}
 800689e:	b0ac      	sub	sp, #176	@ 0xb0
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uint32_t duplex, speed = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int32_t PHYLinkState = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 80068b6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80068ba:	2264      	movs	r2, #100	@ 0x64
 80068bc:	2100      	movs	r1, #0
 80068be:	4618      	mov	r0, r3
 80068c0:	f010 ff7c 	bl	80177bc <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80068c4:	4b93      	ldr	r3, [pc, #588]	@ (8006b14 <low_level_init+0x278>)
 80068c6:	4a94      	ldr	r2, [pc, #592]	@ (8006b18 <low_level_init+0x27c>)
 80068c8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80068ca:	2300      	movs	r3, #0
 80068cc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 80068d0:	2380      	movs	r3, #128	@ 0x80
 80068d2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 80068d6:	23e1      	movs	r3, #225	@ 0xe1
 80068d8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0x00;
 80068dc:	2300      	movs	r3, #0
 80068de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0x00;
 80068e2:	2300      	movs	r3, #0
 80068e4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x00;
 80068e8:	2300      	movs	r3, #0
 80068ea:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 80068ee:	4a89      	ldr	r2, [pc, #548]	@ (8006b14 <low_level_init+0x278>)
 80068f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80068f4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80068f6:	4b87      	ldr	r3, [pc, #540]	@ (8006b14 <low_level_init+0x278>)
 80068f8:	2201      	movs	r2, #1
 80068fa:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80068fc:	4b85      	ldr	r3, [pc, #532]	@ (8006b14 <low_level_init+0x278>)
 80068fe:	4a87      	ldr	r2, [pc, #540]	@ (8006b1c <low_level_init+0x280>)
 8006900:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006902:	4b84      	ldr	r3, [pc, #528]	@ (8006b14 <low_level_init+0x278>)
 8006904:	4a86      	ldr	r2, [pc, #536]	@ (8006b20 <low_level_init+0x284>)
 8006906:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006908:	4b82      	ldr	r3, [pc, #520]	@ (8006b14 <low_level_init+0x278>)
 800690a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800690e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006910:	4880      	ldr	r0, [pc, #512]	@ (8006b14 <low_level_init+0x278>)
 8006912:	f7fb f8d7 	bl	8001ac4 <HAL_ETH_Init>
 8006916:	4603      	mov	r3, r0
 8006918:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800691c:	2238      	movs	r2, #56	@ 0x38
 800691e:	2100      	movs	r1, #0
 8006920:	4880      	ldr	r0, [pc, #512]	@ (8006b24 <low_level_init+0x288>)
 8006922:	f010 ff4b 	bl	80177bc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006926:	4b7f      	ldr	r3, [pc, #508]	@ (8006b24 <low_level_init+0x288>)
 8006928:	2221      	movs	r2, #33	@ 0x21
 800692a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800692c:	4b7d      	ldr	r3, [pc, #500]	@ (8006b24 <low_level_init+0x288>)
 800692e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006932:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006934:	4b7b      	ldr	r3, [pc, #492]	@ (8006b24 <low_level_init+0x288>)
 8006936:	2200      	movs	r2, #0
 8006938:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800693a:	487b      	ldr	r0, [pc, #492]	@ (8006b28 <low_level_init+0x28c>)
 800693c:	f008 fe64 	bl	800f608 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET
  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2206      	movs	r2, #6
 8006944:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006948:	4b72      	ldr	r3, [pc, #456]	@ (8006b14 <low_level_init+0x278>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	781a      	ldrb	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006954:	4b6f      	ldr	r3, [pc, #444]	@ (8006b14 <low_level_init+0x278>)
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	785a      	ldrb	r2, [r3, #1]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006960:	4b6c      	ldr	r3, [pc, #432]	@ (8006b14 <low_level_init+0x278>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	789a      	ldrb	r2, [r3, #2]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800696c:	4b69      	ldr	r3, [pc, #420]	@ (8006b14 <low_level_init+0x278>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	78da      	ldrb	r2, [r3, #3]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006978:	4b66      	ldr	r3, [pc, #408]	@ (8006b14 <low_level_init+0x278>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	791a      	ldrb	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006984:	4b63      	ldr	r3, [pc, #396]	@ (8006b14 <low_level_init+0x278>)
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	795a      	ldrb	r2, [r3, #5]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006996:	859a      	strh	r2, [r3, #44]	@ 0x2c

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800699e:	f043 030a 	orr.w	r3, r3, #10
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 80069aa:	2300      	movs	r3, #0
 80069ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069ae:	2300      	movs	r3, #0
 80069b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 80069b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80069b6:	2101      	movs	r1, #1
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fdab 	bl	8007514 <osSemaphoreCreate>
 80069be:	4603      	mov	r3, r0
 80069c0:	4a5a      	ldr	r2, [pc, #360]	@ (8006b2c <low_level_init+0x290>)
 80069c2:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 80069c4:	2300      	movs	r3, #0
 80069c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80069c8:	2300      	movs	r3, #0
 80069ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 80069cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069d0:	2101      	movs	r1, #1
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 fd9e 	bl	8007514 <osSemaphoreCreate>
 80069d8:	4603      	mov	r3, r0
 80069da:	4a55      	ldr	r2, [pc, #340]	@ (8006b30 <low_level_init+0x294>)
 80069dc:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 80069de:	4b53      	ldr	r3, [pc, #332]	@ (8006b2c <low_level_init+0x290>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2100      	movs	r1, #0
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fdc7 	bl	8007578 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 80069ea:	4b51      	ldr	r3, [pc, #324]	@ (8006b30 <low_level_init+0x294>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2100      	movs	r1, #0
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fdc1 	bl	8007578 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80069f6:	4b4f      	ldr	r3, [pc, #316]	@ (8006b34 <low_level_init+0x298>)
 80069f8:	f107 0408 	add.w	r4, r7, #8
 80069fc:	461d      	mov	r5, r3
 80069fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006a06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006a0a:	f107 0308 	add.w	r3, r7, #8
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 fc83 	bl	800731c <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006a16:	4948      	ldr	r1, [pc, #288]	@ (8006b38 <low_level_init+0x29c>)
 8006a18:	4848      	ldr	r0, [pc, #288]	@ (8006b3c <low_level_init+0x2a0>)
 8006a1a:	f7fa fb82 	bl	8001122 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8006a1e:	4847      	ldr	r0, [pc, #284]	@ (8006b3c <low_level_init+0x2a0>)
 8006a20:	f7fa fbb1 	bl	8001186 <LAN8742_Init>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d006      	beq.n	8006a38 <low_level_init+0x19c>
  {
    netif_set_link_down(netif);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f009 f9ec 	bl	800fe08 <netif_set_link_down>
    netif_set_down(netif);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f009 f977 	bl	800fd24 <netif_set_down>
 8006a36:	e06a      	b.n	8006b0e <low_level_init+0x272>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8006a38:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d164      	bne.n	8006b0a <low_level_init+0x26e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006a40:	483e      	ldr	r0, [pc, #248]	@ (8006b3c <low_level_init+0x2a0>)
 8006a42:	f7fa fbed 	bl	8001220 <LAN8742_GetLinkState>
 8006a46:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	dc06      	bgt.n	8006a60 <low_level_init+0x1c4>
    {
      netif_set_link_down(netif);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f009 f9d8 	bl	800fe08 <netif_set_link_down>
      netif_set_down(netif);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f009 f963 	bl	800fd24 <netif_set_down>
 8006a5e:	e056      	b.n	8006b0e <low_level_init+0x272>
    }
    else
    {
      switch (PHYLinkState)
 8006a60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a64:	3b02      	subs	r3, #2
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	d82a      	bhi.n	8006ac0 <low_level_init+0x224>
 8006a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a70 <low_level_init+0x1d4>)
 8006a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a70:	08006a81 	.word	0x08006a81
 8006a74:	08006a93 	.word	0x08006a93
 8006a78:	08006aa3 	.word	0x08006aa3
 8006a7c:	08006ab3 	.word	0x08006ab3
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8006a80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006a84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8006a88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8006a90:	e01f      	b.n	8006ad2 <low_level_init+0x236>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8006a92:	2300      	movs	r3, #0
 8006a94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8006a98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8006aa0:	e017      	b.n	8006ad2 <low_level_init+0x236>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8006aa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8006ab0:	e00f      	b.n	8006ad2 <low_level_init+0x236>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8006abe:	e008      	b.n	8006ad2 <low_level_init+0x236>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8006ac0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006ac4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8006ac8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006acc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8006ad0:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006ad2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	480e      	ldr	r0, [pc, #56]	@ (8006b14 <low_level_init+0x278>)
 8006ada:	f7fb fd97 	bl	800260c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8006ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ae2:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 8006ae4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ae8:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006aea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006aee:	4619      	mov	r1, r3
 8006af0:	4808      	ldr	r0, [pc, #32]	@ (8006b14 <low_level_init+0x278>)
 8006af2:	f7fb ff5f 	bl	80029b4 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8006af6:	4807      	ldr	r0, [pc, #28]	@ (8006b14 <low_level_init+0x278>)
 8006af8:	f7fb f8e2 	bl	8001cc0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f009 f89d 	bl	800fc3c <netif_set_up>
    netif_set_link_up(netif);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f009 f948 	bl	800fd98 <netif_set_link_up>
 8006b08:	e001      	b.n	8006b0e <low_level_init+0x272>
    }

  }
  else
  {
    Error_Handler();
 8006b0a:	f7fa f94f 	bl	8000dac <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006b0e:	37b0      	adds	r7, #176	@ 0xb0
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bdb0      	pop	{r4, r5, r7, pc}
 8006b14:	240004cc 	.word	0x240004cc
 8006b18:	40028000 	.word	0x40028000
 8006b1c:	30000100 	.word	0x30000100
 8006b20:	30000000 	.word	0x30000000
 8006b24:	2400057c 	.word	0x2400057c
 8006b28:	0801b810 	.word	0x0801b810
 8006b2c:	240004c4 	.word	0x240004c4
 8006b30:	240004c8 	.word	0x240004c8
 8006b34:	08018594 	.word	0x08018594
 8006b38:	2400002c 	.word	0x2400002c
 8006b3c:	240005b4 	.word	0x240005b4

08006b40 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b092      	sub	sp, #72	@ 0x48
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006b58:	f107 030c 	add.w	r3, r7, #12
 8006b5c:	2230      	movs	r2, #48	@ 0x30
 8006b5e:	2100      	movs	r1, #0
 8006b60:	4618      	mov	r0, r3
 8006b62:	f010 fe2b 	bl	80177bc <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006b66:	f107 030c 	add.w	r3, r7, #12
 8006b6a:	2230      	movs	r2, #48	@ 0x30
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f010 fe24 	bl	80177bc <memset>

  for(q = p; q != NULL; q = q->next)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b78:	e045      	b.n	8006c06 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d902      	bls.n	8006b86 <low_level_output+0x46>
      return ERR_IF;
 8006b80:	f06f 030b 	mvn.w	r3, #11
 8006b84:	e07f      	b.n	8006c86 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8006b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b88:	6859      	ldr	r1, [r3, #4]
 8006b8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	4413      	add	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	3348      	adds	r3, #72	@ 0x48
 8006b96:	443b      	add	r3, r7
 8006b98:	3b3c      	subs	r3, #60	@ 0x3c
 8006b9a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006b9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b9e:	895b      	ldrh	r3, [r3, #10]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	3348      	adds	r3, #72	@ 0x48
 8006bae:	443b      	add	r3, r7
 8006bb0:	3b38      	subs	r3, #56	@ 0x38
 8006bb2:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d011      	beq.n	8006bde <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006bba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bbc:	1e5a      	subs	r2, r3, #1
 8006bbe:	f107 000c 	add.w	r0, r7, #12
 8006bc2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	440b      	add	r3, r1
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	18c1      	adds	r1, r0, r3
 8006bce:	4613      	mov	r3, r2
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	3348      	adds	r3, #72	@ 0x48
 8006bd8:	443b      	add	r3, r7
 8006bda:	3b34      	subs	r3, #52	@ 0x34
 8006bdc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d109      	bne.n	8006bfa <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006be6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006be8:	4613      	mov	r3, r2
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	4413      	add	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	3348      	adds	r3, #72	@ 0x48
 8006bf2:	443b      	add	r3, r7
 8006bf4:	3b34      	subs	r3, #52	@ 0x34
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006bfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8006c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1b6      	bne.n	8006b7a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	891b      	ldrh	r3, [r3, #8]
 8006c10:	461a      	mov	r2, r3
 8006c12:	4b1f      	ldr	r3, [pc, #124]	@ (8006c90 <low_level_output+0x150>)
 8006c14:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006c16:	4a1e      	ldr	r2, [pc, #120]	@ (8006c90 <low_level_output+0x150>)
 8006c18:	f107 030c 	add.w	r3, r7, #12
 8006c1c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8006c90 <low_level_output+0x150>)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8006c24:	6838      	ldr	r0, [r7, #0]
 8006c26:	f009 fd71 	bl	801070c <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8006c2a:	4919      	ldr	r1, [pc, #100]	@ (8006c90 <low_level_output+0x150>)
 8006c2c:	4819      	ldr	r0, [pc, #100]	@ (8006c94 <low_level_output+0x154>)
 8006c2e:	f7fb f933 	bl	8001e98 <HAL_ETH_Transmit_IT>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d103      	bne.n	8006c40 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006c3e:	e01b      	b.n	8006c78 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8006c40:	4814      	ldr	r0, [pc, #80]	@ (8006c94 <low_level_output+0x154>)
 8006c42:	f7fb ff21 	bl	8002a88 <HAL_ETH_GetError>
 8006c46:	4603      	mov	r3, r0
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00d      	beq.n	8006c6c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8006c50:	4b11      	ldr	r3, [pc, #68]	@ (8006c98 <low_level_output+0x158>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 fc8d 	bl	8007578 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8006c5e:	480d      	ldr	r0, [pc, #52]	@ (8006c94 <low_level_output+0x154>)
 8006c60:	f7fb faa1 	bl	80021a6 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8006c64:	23fe      	movs	r3, #254	@ 0xfe
 8006c66:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006c6a:	e005      	b.n	8006c78 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8006c6c:	6838      	ldr	r0, [r7, #0]
 8006c6e:	f009 fca7 	bl	80105c0 <pbuf_free>
        errval =  ERR_IF;
 8006c72:	23f4      	movs	r3, #244	@ 0xf4
 8006c74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8006c78:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006c7c:	f113 0f02 	cmn.w	r3, #2
 8006c80:	d0d3      	beq.n	8006c2a <low_level_output+0xea>

  return errval;
 8006c82:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3748      	adds	r7, #72	@ 0x48
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	2400057c 	.word	0x2400057c
 8006c94:	240004cc 	.word	0x240004cc
 8006c98:	240004c8 	.word	0x240004c8

08006c9c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006ca8:	4b07      	ldr	r3, [pc, #28]	@ (8006cc8 <low_level_input+0x2c>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d105      	bne.n	8006cbc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006cb0:	f107 030c 	add.w	r3, r7, #12
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4805      	ldr	r0, [pc, #20]	@ (8006ccc <low_level_input+0x30>)
 8006cb8:	f7fb f93f 	bl	8001f3a <HAL_ETH_ReadData>
  }

  return p;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	240004c0 	.word	0x240004c0
 8006ccc:	240004cc 	.word	0x240004cc

08006cd0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8006d20 <ethernetif_input+0x50>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 fc45 	bl	8007578 <osSemaphoreWait>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1f5      	bne.n	8006ce0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006cf4:	68b8      	ldr	r0, [r7, #8]
 8006cf6:	f7ff ffd1 	bl	8006c9c <low_level_input>
 8006cfa:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	68b9      	ldr	r1, [r7, #8]
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	4798      	blx	r3
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d002      	beq.n	8006d18 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f009 fc54 	bl	80105c0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1ea      	bne.n	8006cf4 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006d1e:	e7df      	b.n	8006ce0 <ethernetif_input+0x10>
 8006d20:	240004c4 	.word	0x240004c4

08006d24 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d106      	bne.n	8006d40 <ethernetif_init+0x1c>
 8006d32:	4b0e      	ldr	r3, [pc, #56]	@ (8006d6c <ethernetif_init+0x48>)
 8006d34:	f44f 7208 	mov.w	r2, #544	@ 0x220
 8006d38:	490d      	ldr	r1, [pc, #52]	@ (8006d70 <ethernetif_init+0x4c>)
 8006d3a:	480e      	ldr	r0, [pc, #56]	@ (8006d74 <ethernetif_init+0x50>)
 8006d3c:	f010 fbe6 	bl	801750c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2273      	movs	r2, #115	@ 0x73
 8006d44:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  netif->name[1] = IFNAME1;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2274      	movs	r2, #116	@ 0x74
 8006d4c:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a09      	ldr	r2, [pc, #36]	@ (8006d78 <ethernetif_init+0x54>)
 8006d54:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a08      	ldr	r2, [pc, #32]	@ (8006d7c <ethernetif_init+0x58>)
 8006d5a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff fd9d 	bl	800689c <low_level_init>

  return ERR_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	080185b0 	.word	0x080185b0
 8006d70:	080185cc 	.word	0x080185cc
 8006d74:	080185dc 	.word	0x080185dc
 8006d78:	0800ce05 	.word	0x0800ce05
 8006d7c:	08006b41 	.word	0x08006b41

08006d80 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006d8c:	68f9      	ldr	r1, [r7, #12]
 8006d8e:	4809      	ldr	r0, [pc, #36]	@ (8006db4 <pbuf_free_custom+0x34>)
 8006d90:	f008 fd2a 	bl	800f7e8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006d94:	4b08      	ldr	r3, [pc, #32]	@ (8006db8 <pbuf_free_custom+0x38>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d107      	bne.n	8006dac <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006d9c:	4b06      	ldr	r3, [pc, #24]	@ (8006db8 <pbuf_free_custom+0x38>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8006da2:	4b06      	ldr	r3, [pc, #24]	@ (8006dbc <pbuf_free_custom+0x3c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fc34 	bl	8007614 <osSemaphoreRelease>
  }
}
 8006dac:	bf00      	nop
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	0801b810 	.word	0x0801b810
 8006db8:	240004c0 	.word	0x240004c0
 8006dbc:	240004c4 	.word	0x240004c4

08006dc0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006dc4:	f7fa fce8 	bl	8001798 <HAL_GetTick>
 8006dc8:	4603      	mov	r3, r0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08e      	sub	sp, #56	@ 0x38
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	605a      	str	r2, [r3, #4]
 8006de2:	609a      	str	r2, [r3, #8]
 8006de4:	60da      	str	r2, [r3, #12]
 8006de6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a65      	ldr	r2, [pc, #404]	@ (8006f84 <HAL_ETH_MspInit+0x1b4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	f040 80c3 	bne.w	8006f7a <HAL_ETH_MspInit+0x1aa>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006df4:	4b64      	ldr	r3, [pc, #400]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006df6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006dfa:	4a63      	ldr	r2, [pc, #396]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006dfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e00:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006e04:	4b60      	ldr	r3, [pc, #384]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006e06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006e0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e0e:	623b      	str	r3, [r7, #32]
 8006e10:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8006e12:	4b5d      	ldr	r3, [pc, #372]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006e14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006e18:	4a5b      	ldr	r2, [pc, #364]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006e22:	4b59      	ldr	r3, [pc, #356]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006e24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006e28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e2c:	61fb      	str	r3, [r7, #28]
 8006e2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8006e30:	4b55      	ldr	r3, [pc, #340]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006e32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006e36:	4a54      	ldr	r2, [pc, #336]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e3c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006e40:	4b51      	ldr	r3, [pc, #324]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006e42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e4a:	61bb      	str	r3, [r7, #24]
 8006e4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e4e:	4b4e      	ldr	r3, [pc, #312]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e54:	4a4c      	ldr	r2, [pc, #304]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006e56:	f043 0304 	orr.w	r3, r3, #4
 8006e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	617b      	str	r3, [r7, #20]
 8006e6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e6c:	4b46      	ldr	r3, [pc, #280]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e72:	4a45      	ldr	r2, [pc, #276]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006e74:	f043 0301 	orr.w	r3, r3, #1
 8006e78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e7c:	4b42      	ldr	r3, [pc, #264]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e8a:	4b3f      	ldr	r3, [pc, #252]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e90:	4a3d      	ldr	r2, [pc, #244]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006e92:	f043 0302 	orr.w	r3, r3, #2
 8006e96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006ea8:	4b37      	ldr	r3, [pc, #220]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eae:	4a36      	ldr	r2, [pc, #216]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006eb8:	4b33      	ldr	r3, [pc, #204]	@ (8006f88 <HAL_ETH_MspInit+0x1b8>)
 8006eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec2:	60bb      	str	r3, [r7, #8]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eca:	2302      	movs	r3, #2
 8006ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006ed6:	230b      	movs	r3, #11
 8006ed8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ede:	4619      	mov	r1, r3
 8006ee0:	482a      	ldr	r0, [pc, #168]	@ (8006f8c <HAL_ETH_MspInit+0x1bc>)
 8006ee2:	f7fc fbdd 	bl	80036a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006ee6:	2386      	movs	r3, #134	@ 0x86
 8006ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eea:	2302      	movs	r3, #2
 8006eec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006ef6:	230b      	movs	r3, #11
 8006ef8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006efe:	4619      	mov	r1, r3
 8006f00:	4823      	ldr	r0, [pc, #140]	@ (8006f90 <HAL_ETH_MspInit+0x1c0>)
 8006f02:	f7fc fbcd 	bl	80036a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006f06:	2330      	movs	r3, #48	@ 0x30
 8006f08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f12:	2303      	movs	r3, #3
 8006f14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006f16:	230b      	movs	r3, #11
 8006f18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f1e:	4619      	mov	r1, r3
 8006f20:	481a      	ldr	r0, [pc, #104]	@ (8006f8c <HAL_ETH_MspInit+0x1bc>)
 8006f22:	f7fc fbbd 	bl	80036a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006f26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f30:	2300      	movs	r3, #0
 8006f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f34:	2303      	movs	r3, #3
 8006f36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006f38:	230b      	movs	r3, #11
 8006f3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f40:	4619      	mov	r1, r3
 8006f42:	4814      	ldr	r0, [pc, #80]	@ (8006f94 <HAL_ETH_MspInit+0x1c4>)
 8006f44:	f7fc fbac 	bl	80036a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8006f48:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f4e:	2302      	movs	r3, #2
 8006f50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f56:	2303      	movs	r3, #3
 8006f58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006f5a:	230b      	movs	r3, #11
 8006f5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f62:	4619      	mov	r1, r3
 8006f64:	480c      	ldr	r0, [pc, #48]	@ (8006f98 <HAL_ETH_MspInit+0x1c8>)
 8006f66:	f7fc fb9b 	bl	80036a0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2105      	movs	r1, #5
 8006f6e:	203d      	movs	r0, #61	@ 0x3d
 8006f70:	f7fa fcf6 	bl	8001960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006f74:	203d      	movs	r0, #61	@ 0x3d
 8006f76:	f7fa fd0d 	bl	8001994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006f7a:	bf00      	nop
 8006f7c:	3738      	adds	r7, #56	@ 0x38
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	40028000 	.word	0x40028000
 8006f88:	58024400 	.word	0x58024400
 8006f8c:	58020800 	.word	0x58020800
 8006f90:	58020000 	.word	0x58020000
 8006f94:	58020400 	.word	0x58020400
 8006f98:	58021800 	.word	0x58021800

08006f9c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006fa0:	4802      	ldr	r0, [pc, #8]	@ (8006fac <ETH_PHY_IO_Init+0x10>)
 8006fa2:	f7fb fd21 	bl	80029e8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	240004cc 	.word	0x240004cc

08006fb0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  return 0;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	68f9      	ldr	r1, [r7, #12]
 8006fd2:	4807      	ldr	r0, [pc, #28]	@ (8006ff0 <ETH_PHY_IO_ReadReg+0x30>)
 8006fd4:	f7fb fa72 	bl	80024bc <HAL_ETH_ReadPHYRegister>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006fde:	f04f 33ff 	mov.w	r3, #4294967295
 8006fe2:	e000      	b.n	8006fe6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	240004cc 	.word	0x240004cc

08006ff4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	68f9      	ldr	r1, [r7, #12]
 8007006:	4807      	ldr	r0, [pc, #28]	@ (8007024 <ETH_PHY_IO_WriteReg+0x30>)
 8007008:	f7fb faac 	bl	8002564 <HAL_ETH_WritePHYRegister>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007012:	f04f 33ff 	mov.w	r3, #4294967295
 8007016:	e000      	b.n	800701a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	240004cc 	.word	0x240004cc

08007028 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800702c:	f7fa fbb4 	bl	8001798 <HAL_GetTick>
 8007030:	4603      	mov	r3, r0
}
 8007032:	4618      	mov	r0, r3
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b0a0      	sub	sp, #128	@ 0x80
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007040:	f107 0308 	add.w	r3, r7, #8
 8007044:	2264      	movs	r2, #100	@ 0x64
 8007046:	2100      	movs	r1, #0
 8007048:	4618      	mov	r0, r3
 800704a:	f010 fbb7 	bl	80177bc <memset>
  int32_t PHYLinkState = 0;
 800704e:	2300      	movs	r3, #0
 8007050:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007056:	2300      	movs	r3, #0
 8007058:	67bb      	str	r3, [r7, #120]	@ 0x78
 800705a:	2300      	movs	r3, #0
 800705c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007062:	483a      	ldr	r0, [pc, #232]	@ (800714c <ethernet_link_thread+0x114>)
 8007064:	f7fa f8dc 	bl	8001220 <LAN8742_GetLinkState>
 8007068:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800706a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800706c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007070:	089b      	lsrs	r3, r3, #2
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00c      	beq.n	8007096 <ethernet_link_thread+0x5e>
 800707c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800707e:	2b01      	cmp	r3, #1
 8007080:	dc09      	bgt.n	8007096 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8007082:	4833      	ldr	r0, [pc, #204]	@ (8007150 <ethernet_link_thread+0x118>)
 8007084:	f7fa fe90 	bl	8001da8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8007088:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800708a:	f008 fe4b 	bl	800fd24 <netif_set_down>
    netif_set_link_down(netif);
 800708e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007090:	f008 feba 	bl	800fe08 <netif_set_link_down>
 8007094:	e055      	b.n	8007142 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007096:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007098:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800709c:	f003 0304 	and.w	r3, r3, #4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d14e      	bne.n	8007142 <ethernet_link_thread+0x10a>
 80070a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	dd4b      	ble.n	8007142 <ethernet_link_thread+0x10a>
  {

    switch (PHYLinkState)
 80070aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070ac:	3b02      	subs	r3, #2
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d82a      	bhi.n	8007108 <ethernet_link_thread+0xd0>
 80070b2:	a201      	add	r2, pc, #4	@ (adr r2, 80070b8 <ethernet_link_thread+0x80>)
 80070b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b8:	080070c9 	.word	0x080070c9
 80070bc:	080070db 	.word	0x080070db
 80070c0:	080070eb 	.word	0x080070eb
 80070c4:	080070fb 	.word	0x080070fb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80070c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80070cc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80070ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80070d2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80070d4:	2301      	movs	r3, #1
 80070d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80070d8:	e017      	b.n	800710a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80070da:	2300      	movs	r3, #0
 80070dc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80070de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80070e2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80070e4:	2301      	movs	r3, #1
 80070e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80070e8:	e00f      	b.n	800710a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80070ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80070ee:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80070f0:	2300      	movs	r3, #0
 80070f2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80070f4:	2301      	movs	r3, #1
 80070f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80070f8:	e007      	b.n	800710a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80070fa:	2300      	movs	r3, #0
 80070fc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80070fe:	2300      	movs	r3, #0
 8007100:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007102:	2301      	movs	r3, #1
 8007104:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007106:	e000      	b.n	800710a <ethernet_link_thread+0xd2>
    default:
      break;
 8007108:	bf00      	nop
    }

    if(linkchanged)
 800710a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800710c:	2b00      	cmp	r3, #0
 800710e:	d018      	beq.n	8007142 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007110:	f107 0308 	add.w	r3, r7, #8
 8007114:	4619      	mov	r1, r3
 8007116:	480e      	ldr	r0, [pc, #56]	@ (8007150 <ethernet_link_thread+0x118>)
 8007118:	f7fb fa78 	bl	800260c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800711c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800711e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8007120:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007122:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007124:	f107 0308 	add.w	r3, r7, #8
 8007128:	4619      	mov	r1, r3
 800712a:	4809      	ldr	r0, [pc, #36]	@ (8007150 <ethernet_link_thread+0x118>)
 800712c:	f7fb fc42 	bl	80029b4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8007130:	4807      	ldr	r0, [pc, #28]	@ (8007150 <ethernet_link_thread+0x118>)
 8007132:	f7fa fdc5 	bl	8001cc0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8007136:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007138:	f008 fd80 	bl	800fc3c <netif_set_up>
      netif_set_link_up(netif);
 800713c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800713e:	f008 fe2b 	bl	800fd98 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8007142:	2064      	movs	r0, #100	@ 0x64
 8007144:	f000 f936 	bl	80073b4 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007148:	e78b      	b.n	8007062 <ethernet_link_thread+0x2a>
 800714a:	bf00      	nop
 800714c:	240005b4 	.word	0x240005b4
 8007150:	240004cc 	.word	0x240004cc

08007154 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af02      	add	r7, sp, #8
 800715a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800715c:	4812      	ldr	r0, [pc, #72]	@ (80071a8 <HAL_ETH_RxAllocateCallback+0x54>)
 800715e:	f008 facf 	bl	800f700 <memp_malloc_pool>
 8007162:	60f8      	str	r0, [r7, #12]
  if (p)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d014      	beq.n	8007194 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f103 0220 	add.w	r2, r3, #32
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4a0d      	ldr	r2, [pc, #52]	@ (80071ac <HAL_ETH_RxAllocateCallback+0x58>)
 8007178:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007182:	9201      	str	r2, [sp, #4]
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2241      	movs	r2, #65	@ 0x41
 800718a:	2100      	movs	r1, #0
 800718c:	2000      	movs	r0, #0
 800718e:	f009 f85f 	bl	8010250 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007192:	e005      	b.n	80071a0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007194:	4b06      	ldr	r3, [pc, #24]	@ (80071b0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007196:	2201      	movs	r2, #1
 8007198:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	601a      	str	r2, [r3, #0]
}
 80071a0:	bf00      	nop
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	0801b810 	.word	0x0801b810
 80071ac:	08006d81 	.word	0x08006d81
 80071b0:	240004c0 	.word	0x240004c0

080071b4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b08d      	sub	sp, #52	@ 0x34
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 80071ca:	2300      	movs	r3, #0
 80071cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	3b20      	subs	r3, #32
 80071d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 80071d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071d6:	2200      	movs	r2, #0
 80071d8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80071da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071dc:	2200      	movs	r2, #0
 80071de:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80071e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e2:	887a      	ldrh	r2, [r7, #2]
 80071e4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80071e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d103      	bne.n	80071f6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80071ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	e003      	b.n	80071fe <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80071f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071fc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80071fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007202:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800720a:	e009      	b.n	8007220 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800720c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800720e:	891a      	ldrh	r2, [r3, #8]
 8007210:	887b      	ldrh	r3, [r7, #2]
 8007212:	4413      	add	r3, r2
 8007214:	b29a      	uxth	r2, r3
 8007216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007218:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800721a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1f2      	bne.n	800720c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007226:	887b      	ldrh	r3, [r7, #2]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	623a      	str	r2, [r7, #32]
 800722c:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	2b00      	cmp	r3, #0
 8007232:	dd1d      	ble.n	8007270 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	f003 021f 	and.w	r2, r3, #31
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	4413      	add	r3, r2
 800723e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007244:	f3bf 8f4f 	dsb	sy
}
 8007248:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800724a:	4a0d      	ldr	r2, [pc, #52]	@ (8007280 <HAL_ETH_RxLinkCallback+0xcc>)
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	3320      	adds	r3, #32
 8007256:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	3b20      	subs	r3, #32
 800725c:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	2b00      	cmp	r3, #0
 8007262:	dcf2      	bgt.n	800724a <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8007264:	f3bf 8f4f 	dsb	sy
}
 8007268:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800726a:	f3bf 8f6f 	isb	sy
}
 800726e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8007270:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007272:	bf00      	nop
 8007274:	3734      	adds	r7, #52	@ 0x34
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	e000ed00 	.word	0xe000ed00

08007284 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f009 f997 	bl	80105c0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8007292:	bf00      	nop
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800729a:	b480      	push	{r7}
 800729c:	b085      	sub	sp, #20
 800729e:	af00      	add	r7, sp, #0
 80072a0:	4603      	mov	r3, r0
 80072a2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80072a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072ac:	2b84      	cmp	r3, #132	@ 0x84
 80072ae:	d005      	beq.n	80072bc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80072b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	3303      	adds	r3, #3
 80072ba:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80072bc:	68fb      	ldr	r3, [r7, #12]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b083      	sub	sp, #12
 80072ce:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072d0:	f3ef 8305 	mrs	r3, IPSR
 80072d4:	607b      	str	r3, [r7, #4]
  return(result);
 80072d6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80072d8:	2b00      	cmp	r3, #0
 80072da:	bf14      	ite	ne
 80072dc:	2301      	movne	r3, #1
 80072de:	2300      	moveq	r3, #0
 80072e0:	b2db      	uxtb	r3, r3
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80072f2:	f002 f8d3 	bl	800949c <vTaskStartScheduler>
  
  return osOK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	bd80      	pop	{r7, pc}

080072fc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007300:	f7ff ffe3 	bl	80072ca <inHandlerMode>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800730a:	f002 f9ed 	bl	80096e8 <xTaskGetTickCountFromISR>
 800730e:	4603      	mov	r3, r0
 8007310:	e002      	b.n	8007318 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007312:	f002 f9d9 	bl	80096c8 <xTaskGetTickCount>
 8007316:	4603      	mov	r3, r0
  }
}
 8007318:	4618      	mov	r0, r3
 800731a:	bd80      	pop	{r7, pc}

0800731c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800731c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800731e:	b089      	sub	sp, #36	@ 0x24
 8007320:	af04      	add	r7, sp, #16
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d020      	beq.n	8007370 <osThreadCreate+0x54>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d01c      	beq.n	8007370 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685c      	ldr	r4, [r3, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691e      	ldr	r6, [r3, #16]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007348:	4618      	mov	r0, r3
 800734a:	f7ff ffa6 	bl	800729a <makeFreeRtosPriority>
 800734e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007358:	9202      	str	r2, [sp, #8]
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	9100      	str	r1, [sp, #0]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	4632      	mov	r2, r6
 8007362:	4629      	mov	r1, r5
 8007364:	4620      	mov	r0, r4
 8007366:	f001 feb3 	bl	80090d0 <xTaskCreateStatic>
 800736a:	4603      	mov	r3, r0
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	e01c      	b.n	80073aa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685c      	ldr	r4, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800737c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff ff88 	bl	800729a <makeFreeRtosPriority>
 800738a:	4602      	mov	r2, r0
 800738c:	f107 030c 	add.w	r3, r7, #12
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	9200      	str	r2, [sp, #0]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	4632      	mov	r2, r6
 8007398:	4629      	mov	r1, r5
 800739a:	4620      	mov	r0, r4
 800739c:	f001 fef8 	bl	8009190 <xTaskCreate>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d001      	beq.n	80073aa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	e000      	b.n	80073ac <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80073aa:	68fb      	ldr	r3, [r7, #12]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073b4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <osDelay+0x16>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	e000      	b.n	80073cc <osDelay+0x18>
 80073ca:	2301      	movs	r3, #1
 80073cc:	4618      	mov	r0, r3
 80073ce:	f002 f82f 	bl	8009430 <vTaskDelay>
  
  return osOK;
 80073d2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d007      	beq.n	80073fc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	4619      	mov	r1, r3
 80073f2:	2001      	movs	r0, #1
 80073f4:	f001 f885 	bl	8008502 <xQueueCreateMutexStatic>
 80073f8:	4603      	mov	r3, r0
 80073fa:	e003      	b.n	8007404 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80073fc:	2001      	movs	r0, #1
 80073fe:	f001 f868 	bl	80084d2 <xQueueCreateMutex>
 8007402:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007404:	4618      	mov	r0, r3
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007416:	2300      	movs	r3, #0
 8007418:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <osMutexWait+0x18>
    return osErrorParameter;
 8007420:	2380      	movs	r3, #128	@ 0x80
 8007422:	e03a      	b.n	800749a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742e:	d103      	bne.n	8007438 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007430:	f04f 33ff 	mov.w	r3, #4294967295
 8007434:	60fb      	str	r3, [r7, #12]
 8007436:	e009      	b.n	800744c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d006      	beq.n	800744c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <osMutexWait+0x40>
      ticks = 1;
 8007448:	2301      	movs	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800744c:	f7ff ff3d 	bl	80072ca <inHandlerMode>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d017      	beq.n	8007486 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007456:	f107 0308 	add.w	r3, r7, #8
 800745a:	461a      	mov	r2, r3
 800745c:	2100      	movs	r1, #0
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f001 fc8c 	bl	8008d7c <xQueueReceiveFromISR>
 8007464:	4603      	mov	r3, r0
 8007466:	2b01      	cmp	r3, #1
 8007468:	d001      	beq.n	800746e <osMutexWait+0x62>
      return osErrorOS;
 800746a:	23ff      	movs	r3, #255	@ 0xff
 800746c:	e015      	b.n	800749a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d011      	beq.n	8007498 <osMutexWait+0x8c>
 8007474:	4b0b      	ldr	r3, [pc, #44]	@ (80074a4 <osMutexWait+0x98>)
 8007476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	e008      	b.n	8007498 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007486:	68f9      	ldr	r1, [r7, #12]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f001 fb67 	bl	8008b5c <xQueueSemaphoreTake>
 800748e:	4603      	mov	r3, r0
 8007490:	2b01      	cmp	r3, #1
 8007492:	d001      	beq.n	8007498 <osMutexWait+0x8c>
    return osErrorOS;
 8007494:	23ff      	movs	r3, #255	@ 0xff
 8007496:	e000      	b.n	800749a <osMutexWait+0x8e>
  }
  
  return osOK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	e000ed04 	.word	0xe000ed04

080074a8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80074b8:	f7ff ff07 	bl	80072ca <inHandlerMode>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d016      	beq.n	80074f0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80074c2:	f107 0308 	add.w	r3, r7, #8
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 f9d5 	bl	8008878 <xQueueGiveFromISR>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d001      	beq.n	80074d8 <osMutexRelease+0x30>
      return osErrorOS;
 80074d4:	23ff      	movs	r3, #255	@ 0xff
 80074d6:	e017      	b.n	8007508 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d013      	beq.n	8007506 <osMutexRelease+0x5e>
 80074de:	4b0c      	ldr	r3, [pc, #48]	@ (8007510 <osMutexRelease+0x68>)
 80074e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	e00a      	b.n	8007506 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80074f0:	2300      	movs	r3, #0
 80074f2:	2200      	movs	r2, #0
 80074f4:	2100      	movs	r1, #0
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f001 f81e 	bl	8008538 <xQueueGenericSend>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d001      	beq.n	8007506 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007502:	23ff      	movs	r3, #255	@ 0xff
 8007504:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007506:	68fb      	ldr	r3, [r7, #12]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	e000ed04 	.word	0xe000ed04

08007514 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af02      	add	r7, sp, #8
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00f      	beq.n	8007546 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d10a      	bne.n	8007542 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	2203      	movs	r2, #3
 8007532:	9200      	str	r2, [sp, #0]
 8007534:	2200      	movs	r2, #0
 8007536:	2100      	movs	r1, #0
 8007538:	2001      	movs	r0, #1
 800753a:	f000 fed9 	bl	80082f0 <xQueueGenericCreateStatic>
 800753e:	4603      	mov	r3, r0
 8007540:	e016      	b.n	8007570 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007542:	2300      	movs	r3, #0
 8007544:	e014      	b.n	8007570 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d110      	bne.n	800756e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800754c:	2203      	movs	r2, #3
 800754e:	2100      	movs	r1, #0
 8007550:	2001      	movs	r0, #1
 8007552:	f000 ff4a 	bl	80083ea <xQueueGenericCreate>
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d005      	beq.n	800756a <osSemaphoreCreate+0x56>
 800755e:	2300      	movs	r3, #0
 8007560:	2200      	movs	r2, #0
 8007562:	2100      	movs	r1, #0
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 ffe7 	bl	8008538 <xQueueGenericSend>
      return sema;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	e000      	b.n	8007570 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800756e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007582:	2300      	movs	r3, #0
 8007584:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800758c:	2380      	movs	r3, #128	@ 0x80
 800758e:	e03a      	b.n	8007606 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759a:	d103      	bne.n	80075a4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800759c:	f04f 33ff 	mov.w	r3, #4294967295
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	e009      	b.n	80075b8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d006      	beq.n	80075b8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <osSemaphoreWait+0x40>
      ticks = 1;
 80075b4:	2301      	movs	r3, #1
 80075b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80075b8:	f7ff fe87 	bl	80072ca <inHandlerMode>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d017      	beq.n	80075f2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80075c2:	f107 0308 	add.w	r3, r7, #8
 80075c6:	461a      	mov	r2, r3
 80075c8:	2100      	movs	r1, #0
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f001 fbd6 	bl	8008d7c <xQueueReceiveFromISR>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d001      	beq.n	80075da <osSemaphoreWait+0x62>
      return osErrorOS;
 80075d6:	23ff      	movs	r3, #255	@ 0xff
 80075d8:	e015      	b.n	8007606 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d011      	beq.n	8007604 <osSemaphoreWait+0x8c>
 80075e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007610 <osSemaphoreWait+0x98>)
 80075e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	e008      	b.n	8007604 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80075f2:	68f9      	ldr	r1, [r7, #12]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 fab1 	bl	8008b5c <xQueueSemaphoreTake>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d001      	beq.n	8007604 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007600:	23ff      	movs	r3, #255	@ 0xff
 8007602:	e000      	b.n	8007606 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	e000ed04 	.word	0xe000ed04

08007614 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800761c:	2300      	movs	r3, #0
 800761e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007620:	2300      	movs	r3, #0
 8007622:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007624:	f7ff fe51 	bl	80072ca <inHandlerMode>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d016      	beq.n	800765c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800762e:	f107 0308 	add.w	r3, r7, #8
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 f91f 	bl	8008878 <xQueueGiveFromISR>
 800763a:	4603      	mov	r3, r0
 800763c:	2b01      	cmp	r3, #1
 800763e:	d001      	beq.n	8007644 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007640:	23ff      	movs	r3, #255	@ 0xff
 8007642:	e017      	b.n	8007674 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d013      	beq.n	8007672 <osSemaphoreRelease+0x5e>
 800764a:	4b0c      	ldr	r3, [pc, #48]	@ (800767c <osSemaphoreRelease+0x68>)
 800764c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	e00a      	b.n	8007672 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800765c:	2300      	movs	r3, #0
 800765e:	2200      	movs	r2, #0
 8007660:	2100      	movs	r1, #0
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 ff68 	bl	8008538 <xQueueGenericSend>
 8007668:	4603      	mov	r3, r0
 800766a:	2b01      	cmp	r3, #1
 800766c:	d001      	beq.n	8007672 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800766e:	23ff      	movs	r3, #255	@ 0xff
 8007670:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007672:	68fb      	ldr	r3, [r7, #12]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	e000ed04 	.word	0xe000ed04

08007680 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007680:	b590      	push	{r4, r7, lr}
 8007682:	b085      	sub	sp, #20
 8007684:	af02      	add	r7, sp, #8
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d011      	beq.n	80076b6 <osMessageCreate+0x36>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00d      	beq.n	80076b6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6818      	ldr	r0, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6859      	ldr	r1, [r3, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689a      	ldr	r2, [r3, #8]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	2400      	movs	r4, #0
 80076ac:	9400      	str	r4, [sp, #0]
 80076ae:	f000 fe1f 	bl	80082f0 <xQueueGenericCreateStatic>
 80076b2:	4603      	mov	r3, r0
 80076b4:	e008      	b.n	80076c8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	4619      	mov	r1, r3
 80076c2:	f000 fe92 	bl	80083ea <xQueueGenericCreate>
 80076c6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd90      	pop	{r4, r7, pc}

080076d0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80076dc:	2300      	movs	r3, #0
 80076de:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <osMessagePut+0x1e>
    ticks = 1;
 80076ea:	2301      	movs	r3, #1
 80076ec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80076ee:	f7ff fdec 	bl	80072ca <inHandlerMode>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d018      	beq.n	800772a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80076f8:	f107 0210 	add.w	r2, r7, #16
 80076fc:	f107 0108 	add.w	r1, r7, #8
 8007700:	2300      	movs	r3, #0
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f001 f81a 	bl	800873c <xQueueGenericSendFromISR>
 8007708:	4603      	mov	r3, r0
 800770a:	2b01      	cmp	r3, #1
 800770c:	d001      	beq.n	8007712 <osMessagePut+0x42>
      return osErrorOS;
 800770e:	23ff      	movs	r3, #255	@ 0xff
 8007710:	e018      	b.n	8007744 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d014      	beq.n	8007742 <osMessagePut+0x72>
 8007718:	4b0c      	ldr	r3, [pc, #48]	@ (800774c <osMessagePut+0x7c>)
 800771a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	e00b      	b.n	8007742 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800772a:	f107 0108 	add.w	r1, r7, #8
 800772e:	2300      	movs	r3, #0
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f000 ff00 	bl	8008538 <xQueueGenericSend>
 8007738:	4603      	mov	r3, r0
 800773a:	2b01      	cmp	r3, #1
 800773c:	d001      	beq.n	8007742 <osMessagePut+0x72>
      return osErrorOS;
 800773e:	23ff      	movs	r3, #255	@ 0xff
 8007740:	e000      	b.n	8007744 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	e000ed04 	.word	0xe000ed04

08007750 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007750:	b590      	push	{r4, r7, lr}
 8007752:	b08b      	sub	sp, #44	@ 0x2c
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007760:	2300      	movs	r3, #0
 8007762:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10a      	bne.n	8007780 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800776a:	2380      	movs	r3, #128	@ 0x80
 800776c:	617b      	str	r3, [r7, #20]
    return event;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	461c      	mov	r4, r3
 8007772:	f107 0314 	add.w	r3, r7, #20
 8007776:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800777a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800777e:	e054      	b.n	800782a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007780:	2300      	movs	r3, #0
 8007782:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007784:	2300      	movs	r3, #0
 8007786:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778e:	d103      	bne.n	8007798 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007790:	f04f 33ff 	mov.w	r3, #4294967295
 8007794:	627b      	str	r3, [r7, #36]	@ 0x24
 8007796:	e009      	b.n	80077ac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d006      	beq.n	80077ac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80077a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <osMessageGet+0x5c>
      ticks = 1;
 80077a8:	2301      	movs	r3, #1
 80077aa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80077ac:	f7ff fd8d 	bl	80072ca <inHandlerMode>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d01c      	beq.n	80077f0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80077b6:	f107 0220 	add.w	r2, r7, #32
 80077ba:	f107 0314 	add.w	r3, r7, #20
 80077be:	3304      	adds	r3, #4
 80077c0:	4619      	mov	r1, r3
 80077c2:	68b8      	ldr	r0, [r7, #8]
 80077c4:	f001 fada 	bl	8008d7c <xQueueReceiveFromISR>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d102      	bne.n	80077d4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80077ce:	2310      	movs	r3, #16
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	e001      	b.n	80077d8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d01d      	beq.n	800781a <osMessageGet+0xca>
 80077de:	4b15      	ldr	r3, [pc, #84]	@ (8007834 <osMessageGet+0xe4>)
 80077e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	e014      	b.n	800781a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80077f0:	f107 0314 	add.w	r3, r7, #20
 80077f4:	3304      	adds	r3, #4
 80077f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077f8:	4619      	mov	r1, r3
 80077fa:	68b8      	ldr	r0, [r7, #8]
 80077fc:	f001 f8cc 	bl	8008998 <xQueueReceive>
 8007800:	4603      	mov	r3, r0
 8007802:	2b01      	cmp	r3, #1
 8007804:	d102      	bne.n	800780c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007806:	2310      	movs	r3, #16
 8007808:	617b      	str	r3, [r7, #20]
 800780a:	e006      	b.n	800781a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800780c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <osMessageGet+0xc6>
 8007812:	2300      	movs	r3, #0
 8007814:	e000      	b.n	8007818 <osMessageGet+0xc8>
 8007816:	2340      	movs	r3, #64	@ 0x40
 8007818:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	461c      	mov	r4, r3
 800781e:	f107 0314 	add.w	r3, r7, #20
 8007822:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007826:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	372c      	adds	r7, #44	@ 0x2c
 800782e:	46bd      	mov	sp, r7
 8007830:	bd90      	pop	{r4, r7, pc}
 8007832:	bf00      	nop
 8007834:	e000ed04 	.word	0xe000ed04

08007838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b08a      	sub	sp, #40	@ 0x28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007840:	2300      	movs	r3, #0
 8007842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007844:	f001 fe94 	bl	8009570 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007848:	4b5c      	ldr	r3, [pc, #368]	@ (80079bc <pvPortMalloc+0x184>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007850:	f000 f924 	bl	8007a9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007854:	4b5a      	ldr	r3, [pc, #360]	@ (80079c0 <pvPortMalloc+0x188>)
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4013      	ands	r3, r2
 800785c:	2b00      	cmp	r3, #0
 800785e:	f040 8095 	bne.w	800798c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01e      	beq.n	80078a6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007868:	2208      	movs	r2, #8
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4413      	add	r3, r2
 800786e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f003 0307 	and.w	r3, r3, #7
 8007876:	2b00      	cmp	r3, #0
 8007878:	d015      	beq.n	80078a6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f023 0307 	bic.w	r3, r3, #7
 8007880:	3308      	adds	r3, #8
 8007882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00b      	beq.n	80078a6 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	e7fd      	b.n	80078a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d06f      	beq.n	800798c <pvPortMalloc+0x154>
 80078ac:	4b45      	ldr	r3, [pc, #276]	@ (80079c4 <pvPortMalloc+0x18c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d86a      	bhi.n	800798c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078b6:	4b44      	ldr	r3, [pc, #272]	@ (80079c8 <pvPortMalloc+0x190>)
 80078b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078ba:	4b43      	ldr	r3, [pc, #268]	@ (80079c8 <pvPortMalloc+0x190>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078c0:	e004      	b.n	80078cc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80078c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d903      	bls.n	80078de <pvPortMalloc+0xa6>
 80078d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1f1      	bne.n	80078c2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078de:	4b37      	ldr	r3, [pc, #220]	@ (80079bc <pvPortMalloc+0x184>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d051      	beq.n	800798c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2208      	movs	r2, #8
 80078ee:	4413      	add	r3, r2
 80078f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	1ad2      	subs	r2, r2, r3
 8007902:	2308      	movs	r3, #8
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	429a      	cmp	r2, r3
 8007908:	d920      	bls.n	800794c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800790a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4413      	add	r3, r2
 8007910:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	f003 0307 	and.w	r3, r3, #7
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00b      	beq.n	8007934 <pvPortMalloc+0xfc>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	613b      	str	r3, [r7, #16]
}
 800792e:	bf00      	nop
 8007930:	bf00      	nop
 8007932:	e7fd      	b.n	8007930 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	1ad2      	subs	r2, r2, r3
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007946:	69b8      	ldr	r0, [r7, #24]
 8007948:	f000 f90a 	bl	8007b60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800794c:	4b1d      	ldr	r3, [pc, #116]	@ (80079c4 <pvPortMalloc+0x18c>)
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	4a1b      	ldr	r2, [pc, #108]	@ (80079c4 <pvPortMalloc+0x18c>)
 8007958:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800795a:	4b1a      	ldr	r3, [pc, #104]	@ (80079c4 <pvPortMalloc+0x18c>)
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	4b1b      	ldr	r3, [pc, #108]	@ (80079cc <pvPortMalloc+0x194>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	429a      	cmp	r2, r3
 8007964:	d203      	bcs.n	800796e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007966:	4b17      	ldr	r3, [pc, #92]	@ (80079c4 <pvPortMalloc+0x18c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a18      	ldr	r2, [pc, #96]	@ (80079cc <pvPortMalloc+0x194>)
 800796c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	4b13      	ldr	r3, [pc, #76]	@ (80079c0 <pvPortMalloc+0x188>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	431a      	orrs	r2, r3
 8007978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800797c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797e:	2200      	movs	r2, #0
 8007980:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007982:	4b13      	ldr	r3, [pc, #76]	@ (80079d0 <pvPortMalloc+0x198>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3301      	adds	r3, #1
 8007988:	4a11      	ldr	r2, [pc, #68]	@ (80079d0 <pvPortMalloc+0x198>)
 800798a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800798c:	f001 fdfe 	bl	800958c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00b      	beq.n	80079b2 <pvPortMalloc+0x17a>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	60fb      	str	r3, [r7, #12]
}
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	e7fd      	b.n	80079ae <pvPortMalloc+0x176>
	return pvReturn;
 80079b2:	69fb      	ldr	r3, [r7, #28]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3728      	adds	r7, #40	@ 0x28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	240041dc 	.word	0x240041dc
 80079c0:	240041f0 	.word	0x240041f0
 80079c4:	240041e0 	.word	0x240041e0
 80079c8:	240041d4 	.word	0x240041d4
 80079cc:	240041e4 	.word	0x240041e4
 80079d0:	240041e8 	.word	0x240041e8

080079d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d04f      	beq.n	8007a86 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079e6:	2308      	movs	r3, #8
 80079e8:	425b      	negs	r3, r3
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	4413      	add	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	4b25      	ldr	r3, [pc, #148]	@ (8007a90 <vPortFree+0xbc>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4013      	ands	r3, r2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10b      	bne.n	8007a1a <vPortFree+0x46>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	60fb      	str	r3, [r7, #12]
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	e7fd      	b.n	8007a16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <vPortFree+0x66>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	60bb      	str	r3, [r7, #8]
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	e7fd      	b.n	8007a36 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	4b14      	ldr	r3, [pc, #80]	@ (8007a90 <vPortFree+0xbc>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4013      	ands	r3, r2
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d01e      	beq.n	8007a86 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d11a      	bne.n	8007a86 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	4b0e      	ldr	r3, [pc, #56]	@ (8007a90 <vPortFree+0xbc>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	43db      	mvns	r3, r3
 8007a5a:	401a      	ands	r2, r3
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a60:	f001 fd86 	bl	8009570 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	4b0a      	ldr	r3, [pc, #40]	@ (8007a94 <vPortFree+0xc0>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	4a09      	ldr	r2, [pc, #36]	@ (8007a94 <vPortFree+0xc0>)
 8007a70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a72:	6938      	ldr	r0, [r7, #16]
 8007a74:	f000 f874 	bl	8007b60 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a78:	4b07      	ldr	r3, [pc, #28]	@ (8007a98 <vPortFree+0xc4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	4a06      	ldr	r2, [pc, #24]	@ (8007a98 <vPortFree+0xc4>)
 8007a80:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a82:	f001 fd83 	bl	800958c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a86:	bf00      	nop
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	240041f0 	.word	0x240041f0
 8007a94:	240041e0 	.word	0x240041e0
 8007a98:	240041ec 	.word	0x240041ec

08007a9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007aa2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007aa6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007aa8:	4b27      	ldr	r3, [pc, #156]	@ (8007b48 <prvHeapInit+0xac>)
 8007aaa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f003 0307 	and.w	r3, r3, #7
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00c      	beq.n	8007ad0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3307      	adds	r3, #7
 8007aba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 0307 	bic.w	r3, r3, #7
 8007ac2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	4a1f      	ldr	r2, [pc, #124]	@ (8007b48 <prvHeapInit+0xac>)
 8007acc:	4413      	add	r3, r2
 8007ace:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8007b4c <prvHeapInit+0xb0>)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ada:	4b1c      	ldr	r3, [pc, #112]	@ (8007b4c <prvHeapInit+0xb0>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ae8:	2208      	movs	r2, #8
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	1a9b      	subs	r3, r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f023 0307 	bic.w	r3, r3, #7
 8007af6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4a15      	ldr	r2, [pc, #84]	@ (8007b50 <prvHeapInit+0xb4>)
 8007afc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007afe:	4b14      	ldr	r3, [pc, #80]	@ (8007b50 <prvHeapInit+0xb4>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2200      	movs	r2, #0
 8007b04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b06:	4b12      	ldr	r3, [pc, #72]	@ (8007b50 <prvHeapInit+0xb4>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	1ad2      	subs	r2, r2, r3
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b50 <prvHeapInit+0xb4>)
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	4a0a      	ldr	r2, [pc, #40]	@ (8007b54 <prvHeapInit+0xb8>)
 8007b2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	4a09      	ldr	r2, [pc, #36]	@ (8007b58 <prvHeapInit+0xbc>)
 8007b32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b34:	4b09      	ldr	r3, [pc, #36]	@ (8007b5c <prvHeapInit+0xc0>)
 8007b36:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b3a:	601a      	str	r2, [r3, #0]
}
 8007b3c:	bf00      	nop
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	240005d4 	.word	0x240005d4
 8007b4c:	240041d4 	.word	0x240041d4
 8007b50:	240041dc 	.word	0x240041dc
 8007b54:	240041e4 	.word	0x240041e4
 8007b58:	240041e0 	.word	0x240041e0
 8007b5c:	240041f0 	.word	0x240041f0

08007b60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b68:	4b28      	ldr	r3, [pc, #160]	@ (8007c0c <prvInsertBlockIntoFreeList+0xac>)
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	e002      	b.n	8007b74 <prvInsertBlockIntoFreeList+0x14>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d8f7      	bhi.n	8007b6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	4413      	add	r3, r2
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d108      	bne.n	8007ba2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	441a      	add	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	441a      	add	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d118      	bne.n	8007be8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	4b15      	ldr	r3, [pc, #84]	@ (8007c10 <prvInsertBlockIntoFreeList+0xb0>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d00d      	beq.n	8007bde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	441a      	add	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	e008      	b.n	8007bf0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bde:	4b0c      	ldr	r3, [pc, #48]	@ (8007c10 <prvInsertBlockIntoFreeList+0xb0>)
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	e003      	b.n	8007bf0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d002      	beq.n	8007bfe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bfe:	bf00      	nop
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	240041d4 	.word	0x240041d4
 8007c10:	240041dc 	.word	0x240041dc

08007c14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f103 0208 	add.w	r2, r3, #8
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f04f 32ff 	mov.w	r2, #4294967295
 8007c2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f103 0208 	add.w	r2, r3, #8
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f103 0208 	add.w	r2, r3, #8
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c62:	bf00      	nop
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b085      	sub	sp, #20
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	1c5a      	adds	r2, r3, #1
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	601a      	str	r2, [r3, #0]
}
 8007caa:	bf00      	nop
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b085      	sub	sp, #20
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ccc:	d103      	bne.n	8007cd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	e00c      	b.n	8007cf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3308      	adds	r3, #8
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	e002      	b.n	8007ce4 <vListInsert+0x2e>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d2f6      	bcs.n	8007cde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	601a      	str	r2, [r3, #0]
}
 8007d1c:	bf00      	nop
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	6892      	ldr	r2, [r2, #8]
 8007d3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	6852      	ldr	r2, [r2, #4]
 8007d48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d103      	bne.n	8007d5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689a      	ldr	r2, [r3, #8]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	1e5a      	subs	r2, r3, #1
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3b04      	subs	r3, #4
 8007d8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007d94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3b04      	subs	r3, #4
 8007d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f023 0201 	bic.w	r2, r3, #1
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3b04      	subs	r3, #4
 8007daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007dac:	4a0c      	ldr	r2, [pc, #48]	@ (8007de0 <pxPortInitialiseStack+0x64>)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3b14      	subs	r3, #20
 8007db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3b04      	subs	r3, #4
 8007dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f06f 0202 	mvn.w	r2, #2
 8007dca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	3b20      	subs	r3, #32
 8007dd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	08007de5 	.word	0x08007de5

08007de4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007dea:	2300      	movs	r3, #0
 8007dec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007dee:	4b13      	ldr	r3, [pc, #76]	@ (8007e3c <prvTaskExitError+0x58>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df6:	d00b      	beq.n	8007e10 <prvTaskExitError+0x2c>
	__asm volatile
 8007df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	60fb      	str	r3, [r7, #12]
}
 8007e0a:	bf00      	nop
 8007e0c:	bf00      	nop
 8007e0e:	e7fd      	b.n	8007e0c <prvTaskExitError+0x28>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	60bb      	str	r3, [r7, #8]
}
 8007e22:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e24:	bf00      	nop
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0fc      	beq.n	8007e26 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e2c:	bf00      	nop
 8007e2e:	bf00      	nop
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	24000040 	.word	0x24000040

08007e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e40:	4b07      	ldr	r3, [pc, #28]	@ (8007e60 <pxCurrentTCBConst2>)
 8007e42:	6819      	ldr	r1, [r3, #0]
 8007e44:	6808      	ldr	r0, [r1, #0]
 8007e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4a:	f380 8809 	msr	PSP, r0
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f04f 0000 	mov.w	r0, #0
 8007e56:	f380 8811 	msr	BASEPRI, r0
 8007e5a:	4770      	bx	lr
 8007e5c:	f3af 8000 	nop.w

08007e60 <pxCurrentTCBConst2>:
 8007e60:	240041fc 	.word	0x240041fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop

08007e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e68:	4808      	ldr	r0, [pc, #32]	@ (8007e8c <prvPortStartFirstTask+0x24>)
 8007e6a:	6800      	ldr	r0, [r0, #0]
 8007e6c:	6800      	ldr	r0, [r0, #0]
 8007e6e:	f380 8808 	msr	MSP, r0
 8007e72:	f04f 0000 	mov.w	r0, #0
 8007e76:	f380 8814 	msr	CONTROL, r0
 8007e7a:	b662      	cpsie	i
 8007e7c:	b661      	cpsie	f
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	df00      	svc	0
 8007e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e8a:	bf00      	nop
 8007e8c:	e000ed08 	.word	0xe000ed08

08007e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e96:	4b47      	ldr	r3, [pc, #284]	@ (8007fb4 <xPortStartScheduler+0x124>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a47      	ldr	r2, [pc, #284]	@ (8007fb8 <xPortStartScheduler+0x128>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d10b      	bne.n	8007eb8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	60fb      	str	r3, [r7, #12]
}
 8007eb2:	bf00      	nop
 8007eb4:	bf00      	nop
 8007eb6:	e7fd      	b.n	8007eb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8007fb4 <xPortStartScheduler+0x124>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a3f      	ldr	r2, [pc, #252]	@ (8007fbc <xPortStartScheduler+0x12c>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d10b      	bne.n	8007eda <xPortStartScheduler+0x4a>
	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	613b      	str	r3, [r7, #16]
}
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop
 8007ed8:	e7fd      	b.n	8007ed6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007eda:	4b39      	ldr	r3, [pc, #228]	@ (8007fc0 <xPortStartScheduler+0x130>)
 8007edc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	22ff      	movs	r2, #255	@ 0xff
 8007eea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ef4:	78fb      	ldrb	r3, [r7, #3]
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	4b31      	ldr	r3, [pc, #196]	@ (8007fc4 <xPortStartScheduler+0x134>)
 8007f00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f02:	4b31      	ldr	r3, [pc, #196]	@ (8007fc8 <xPortStartScheduler+0x138>)
 8007f04:	2207      	movs	r2, #7
 8007f06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f08:	e009      	b.n	8007f1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8007fc8 <xPortStartScheduler+0x138>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	4a2d      	ldr	r2, [pc, #180]	@ (8007fc8 <xPortStartScheduler+0x138>)
 8007f12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f1e:	78fb      	ldrb	r3, [r7, #3]
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f26:	2b80      	cmp	r3, #128	@ 0x80
 8007f28:	d0ef      	beq.n	8007f0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f2a:	4b27      	ldr	r3, [pc, #156]	@ (8007fc8 <xPortStartScheduler+0x138>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f1c3 0307 	rsb	r3, r3, #7
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	d00b      	beq.n	8007f4e <xPortStartScheduler+0xbe>
	__asm volatile
 8007f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3a:	f383 8811 	msr	BASEPRI, r3
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	60bb      	str	r3, [r7, #8]
}
 8007f48:	bf00      	nop
 8007f4a:	bf00      	nop
 8007f4c:	e7fd      	b.n	8007f4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8007fc8 <xPortStartScheduler+0x138>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	021b      	lsls	r3, r3, #8
 8007f54:	4a1c      	ldr	r2, [pc, #112]	@ (8007fc8 <xPortStartScheduler+0x138>)
 8007f56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f58:	4b1b      	ldr	r3, [pc, #108]	@ (8007fc8 <xPortStartScheduler+0x138>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f60:	4a19      	ldr	r2, [pc, #100]	@ (8007fc8 <xPortStartScheduler+0x138>)
 8007f62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f6c:	4b17      	ldr	r3, [pc, #92]	@ (8007fcc <xPortStartScheduler+0x13c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a16      	ldr	r2, [pc, #88]	@ (8007fcc <xPortStartScheduler+0x13c>)
 8007f72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007f76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f78:	4b14      	ldr	r3, [pc, #80]	@ (8007fcc <xPortStartScheduler+0x13c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a13      	ldr	r2, [pc, #76]	@ (8007fcc <xPortStartScheduler+0x13c>)
 8007f7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007f82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f84:	f000 f8da 	bl	800813c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f88:	4b11      	ldr	r3, [pc, #68]	@ (8007fd0 <xPortStartScheduler+0x140>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f8e:	f000 f8f9 	bl	8008184 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f92:	4b10      	ldr	r3, [pc, #64]	@ (8007fd4 <xPortStartScheduler+0x144>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a0f      	ldr	r2, [pc, #60]	@ (8007fd4 <xPortStartScheduler+0x144>)
 8007f98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007f9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f9e:	f7ff ff63 	bl	8007e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fa2:	f001 fc6d 	bl	8009880 <vTaskSwitchContext>
	prvTaskExitError();
 8007fa6:	f7ff ff1d 	bl	8007de4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3718      	adds	r7, #24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	e000ed00 	.word	0xe000ed00
 8007fb8:	410fc271 	.word	0x410fc271
 8007fbc:	410fc270 	.word	0x410fc270
 8007fc0:	e000e400 	.word	0xe000e400
 8007fc4:	240041f4 	.word	0x240041f4
 8007fc8:	240041f8 	.word	0x240041f8
 8007fcc:	e000ed20 	.word	0xe000ed20
 8007fd0:	24000040 	.word	0x24000040
 8007fd4:	e000ef34 	.word	0xe000ef34

08007fd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	607b      	str	r3, [r7, #4]
}
 8007ff0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ff2:	4b10      	ldr	r3, [pc, #64]	@ (8008034 <vPortEnterCritical+0x5c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8008034 <vPortEnterCritical+0x5c>)
 8007ffa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8008034 <vPortEnterCritical+0x5c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d110      	bne.n	8008026 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008004:	4b0c      	ldr	r3, [pc, #48]	@ (8008038 <vPortEnterCritical+0x60>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00b      	beq.n	8008026 <vPortEnterCritical+0x4e>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	603b      	str	r3, [r7, #0]
}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	e7fd      	b.n	8008022 <vPortEnterCritical+0x4a>
	}
}
 8008026:	bf00      	nop
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	24000040 	.word	0x24000040
 8008038:	e000ed04 	.word	0xe000ed04

0800803c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008042:	4b12      	ldr	r3, [pc, #72]	@ (800808c <vPortExitCritical+0x50>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10b      	bne.n	8008062 <vPortExitCritical+0x26>
	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	607b      	str	r3, [r7, #4]
}
 800805c:	bf00      	nop
 800805e:	bf00      	nop
 8008060:	e7fd      	b.n	800805e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008062:	4b0a      	ldr	r3, [pc, #40]	@ (800808c <vPortExitCritical+0x50>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3b01      	subs	r3, #1
 8008068:	4a08      	ldr	r2, [pc, #32]	@ (800808c <vPortExitCritical+0x50>)
 800806a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800806c:	4b07      	ldr	r3, [pc, #28]	@ (800808c <vPortExitCritical+0x50>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d105      	bne.n	8008080 <vPortExitCritical+0x44>
 8008074:	2300      	movs	r3, #0
 8008076:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800807e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	24000040 	.word	0x24000040

08008090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008090:	f3ef 8009 	mrs	r0, PSP
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	4b15      	ldr	r3, [pc, #84]	@ (80080f0 <pxCurrentTCBConst>)
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	f01e 0f10 	tst.w	lr, #16
 80080a0:	bf08      	it	eq
 80080a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080aa:	6010      	str	r0, [r2, #0]
 80080ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80080b4:	f380 8811 	msr	BASEPRI, r0
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f001 fbde 	bl	8009880 <vTaskSwitchContext>
 80080c4:	f04f 0000 	mov.w	r0, #0
 80080c8:	f380 8811 	msr	BASEPRI, r0
 80080cc:	bc09      	pop	{r0, r3}
 80080ce:	6819      	ldr	r1, [r3, #0]
 80080d0:	6808      	ldr	r0, [r1, #0]
 80080d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d6:	f01e 0f10 	tst.w	lr, #16
 80080da:	bf08      	it	eq
 80080dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080e0:	f380 8809 	msr	PSP, r0
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	f3af 8000 	nop.w

080080f0 <pxCurrentTCBConst>:
 80080f0:	240041fc 	.word	0x240041fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80080f4:	bf00      	nop
 80080f6:	bf00      	nop

080080f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	607b      	str	r3, [r7, #4]
}
 8008110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008112:	f001 fafb 	bl	800970c <xTaskIncrementTick>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d003      	beq.n	8008124 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800811c:	4b06      	ldr	r3, [pc, #24]	@ (8008138 <SysTick_Handler+0x40>)
 800811e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	2300      	movs	r3, #0
 8008126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	f383 8811 	msr	BASEPRI, r3
}
 800812e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008130:	bf00      	nop
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	e000ed04 	.word	0xe000ed04

0800813c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800813c:	b480      	push	{r7}
 800813e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008140:	4b0b      	ldr	r3, [pc, #44]	@ (8008170 <vPortSetupTimerInterrupt+0x34>)
 8008142:	2200      	movs	r2, #0
 8008144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008146:	4b0b      	ldr	r3, [pc, #44]	@ (8008174 <vPortSetupTimerInterrupt+0x38>)
 8008148:	2200      	movs	r2, #0
 800814a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800814c:	4b0a      	ldr	r3, [pc, #40]	@ (8008178 <vPortSetupTimerInterrupt+0x3c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a0a      	ldr	r2, [pc, #40]	@ (800817c <vPortSetupTimerInterrupt+0x40>)
 8008152:	fba2 2303 	umull	r2, r3, r2, r3
 8008156:	099b      	lsrs	r3, r3, #6
 8008158:	4a09      	ldr	r2, [pc, #36]	@ (8008180 <vPortSetupTimerInterrupt+0x44>)
 800815a:	3b01      	subs	r3, #1
 800815c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800815e:	4b04      	ldr	r3, [pc, #16]	@ (8008170 <vPortSetupTimerInterrupt+0x34>)
 8008160:	2207      	movs	r2, #7
 8008162:	601a      	str	r2, [r3, #0]
}
 8008164:	bf00      	nop
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	e000e010 	.word	0xe000e010
 8008174:	e000e018 	.word	0xe000e018
 8008178:	24000000 	.word	0x24000000
 800817c:	10624dd3 	.word	0x10624dd3
 8008180:	e000e014 	.word	0xe000e014

08008184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008184:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008194 <vPortEnableVFP+0x10>
 8008188:	6801      	ldr	r1, [r0, #0]
 800818a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800818e:	6001      	str	r1, [r0, #0]
 8008190:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008192:	bf00      	nop
 8008194:	e000ed88 	.word	0xe000ed88

08008198 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800819e:	f3ef 8305 	mrs	r3, IPSR
 80081a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b0f      	cmp	r3, #15
 80081a8:	d915      	bls.n	80081d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081aa:	4a18      	ldr	r2, [pc, #96]	@ (800820c <vPortValidateInterruptPriority+0x74>)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4413      	add	r3, r2
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081b4:	4b16      	ldr	r3, [pc, #88]	@ (8008210 <vPortValidateInterruptPriority+0x78>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	7afa      	ldrb	r2, [r7, #11]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d20b      	bcs.n	80081d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	607b      	str	r3, [r7, #4]
}
 80081d0:	bf00      	nop
 80081d2:	bf00      	nop
 80081d4:	e7fd      	b.n	80081d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008214 <vPortValidateInterruptPriority+0x7c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80081de:	4b0e      	ldr	r3, [pc, #56]	@ (8008218 <vPortValidateInterruptPriority+0x80>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d90b      	bls.n	80081fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80081e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ea:	f383 8811 	msr	BASEPRI, r3
 80081ee:	f3bf 8f6f 	isb	sy
 80081f2:	f3bf 8f4f 	dsb	sy
 80081f6:	603b      	str	r3, [r7, #0]
}
 80081f8:	bf00      	nop
 80081fa:	bf00      	nop
 80081fc:	e7fd      	b.n	80081fa <vPortValidateInterruptPriority+0x62>
	}
 80081fe:	bf00      	nop
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	e000e3f0 	.word	0xe000e3f0
 8008210:	240041f4 	.word	0x240041f4
 8008214:	e000ed0c 	.word	0xe000ed0c
 8008218:	240041f8 	.word	0x240041f8

0800821c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10b      	bne.n	8008248 <xQueueGenericReset+0x2c>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	60bb      	str	r3, [r7, #8]
}
 8008242:	bf00      	nop
 8008244:	bf00      	nop
 8008246:	e7fd      	b.n	8008244 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008248:	f7ff fec6 	bl	8007fd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008254:	68f9      	ldr	r1, [r7, #12]
 8008256:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008258:	fb01 f303 	mul.w	r3, r1, r3
 800825c:	441a      	add	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008278:	3b01      	subs	r3, #1
 800827a:	68f9      	ldr	r1, [r7, #12]
 800827c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800827e:	fb01 f303 	mul.w	r3, r1, r3
 8008282:	441a      	add	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	22ff      	movs	r2, #255	@ 0xff
 800828c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	22ff      	movs	r2, #255	@ 0xff
 8008294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d114      	bne.n	80082c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d01a      	beq.n	80082dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	3310      	adds	r3, #16
 80082aa:	4618      	mov	r0, r3
 80082ac:	f001 fb72 	bl	8009994 <xTaskRemoveFromEventList>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d012      	beq.n	80082dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80082b6:	4b0d      	ldr	r3, [pc, #52]	@ (80082ec <xQueueGenericReset+0xd0>)
 80082b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	e009      	b.n	80082dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	3310      	adds	r3, #16
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff fca1 	bl	8007c14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	3324      	adds	r3, #36	@ 0x24
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7ff fc9c 	bl	8007c14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80082dc:	f7ff feae 	bl	800803c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80082e0:	2301      	movs	r3, #1
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	e000ed04 	.word	0xe000ed04

080082f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08e      	sub	sp, #56	@ 0x38
 80082f4:	af02      	add	r7, sp, #8
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
 80082fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10b      	bne.n	800831c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008316:	bf00      	nop
 8008318:	bf00      	nop
 800831a:	e7fd      	b.n	8008318 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10b      	bne.n	800833a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008326:	f383 8811 	msr	BASEPRI, r3
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008334:	bf00      	nop
 8008336:	bf00      	nop
 8008338:	e7fd      	b.n	8008336 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d002      	beq.n	8008346 <xQueueGenericCreateStatic+0x56>
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <xQueueGenericCreateStatic+0x5a>
 8008346:	2301      	movs	r3, #1
 8008348:	e000      	b.n	800834c <xQueueGenericCreateStatic+0x5c>
 800834a:	2300      	movs	r3, #0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10b      	bne.n	8008368 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	623b      	str	r3, [r7, #32]
}
 8008362:	bf00      	nop
 8008364:	bf00      	nop
 8008366:	e7fd      	b.n	8008364 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d102      	bne.n	8008374 <xQueueGenericCreateStatic+0x84>
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <xQueueGenericCreateStatic+0x88>
 8008374:	2301      	movs	r3, #1
 8008376:	e000      	b.n	800837a <xQueueGenericCreateStatic+0x8a>
 8008378:	2300      	movs	r3, #0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10b      	bne.n	8008396 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	61fb      	str	r3, [r7, #28]
}
 8008390:	bf00      	nop
 8008392:	bf00      	nop
 8008394:	e7fd      	b.n	8008392 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008396:	2348      	movs	r3, #72	@ 0x48
 8008398:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2b48      	cmp	r3, #72	@ 0x48
 800839e:	d00b      	beq.n	80083b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	61bb      	str	r3, [r7, #24]
}
 80083b2:	bf00      	nop
 80083b4:	bf00      	nop
 80083b6:	e7fd      	b.n	80083b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80083b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80083be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00d      	beq.n	80083e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80083c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80083cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80083d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	4613      	mov	r3, r2
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 f840 	bl	8008460 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80083e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3730      	adds	r7, #48	@ 0x30
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b08a      	sub	sp, #40	@ 0x28
 80083ee:	af02      	add	r7, sp, #8
 80083f0:	60f8      	str	r0, [r7, #12]
 80083f2:	60b9      	str	r1, [r7, #8]
 80083f4:	4613      	mov	r3, r2
 80083f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10b      	bne.n	8008416 <xQueueGenericCreate+0x2c>
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	613b      	str	r3, [r7, #16]
}
 8008410:	bf00      	nop
 8008412:	bf00      	nop
 8008414:	e7fd      	b.n	8008412 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	fb02 f303 	mul.w	r3, r2, r3
 800841e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	3348      	adds	r3, #72	@ 0x48
 8008424:	4618      	mov	r0, r3
 8008426:	f7ff fa07 	bl	8007838 <pvPortMalloc>
 800842a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d011      	beq.n	8008456 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	3348      	adds	r3, #72	@ 0x48
 800843a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008444:	79fa      	ldrb	r2, [r7, #7]
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	4613      	mov	r3, r2
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	68b9      	ldr	r1, [r7, #8]
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f000 f805 	bl	8008460 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008456:	69bb      	ldr	r3, [r7, #24]
	}
 8008458:	4618      	mov	r0, r3
 800845a:	3720      	adds	r7, #32
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d103      	bne.n	800847c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	e002      	b.n	8008482 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800848e:	2101      	movs	r1, #1
 8008490:	69b8      	ldr	r0, [r7, #24]
 8008492:	f7ff fec3 	bl	800821c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008496:	bf00      	nop
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b082      	sub	sp, #8
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00e      	beq.n	80084ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80084be:	2300      	movs	r3, #0
 80084c0:	2200      	movs	r2, #0
 80084c2:	2100      	movs	r1, #0
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f837 	bl	8008538 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80084ca:	bf00      	nop
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b086      	sub	sp, #24
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	4603      	mov	r3, r0
 80084da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80084dc:	2301      	movs	r3, #1
 80084de:	617b      	str	r3, [r7, #20]
 80084e0:	2300      	movs	r3, #0
 80084e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80084e4:	79fb      	ldrb	r3, [r7, #7]
 80084e6:	461a      	mov	r2, r3
 80084e8:	6939      	ldr	r1, [r7, #16]
 80084ea:	6978      	ldr	r0, [r7, #20]
 80084ec:	f7ff ff7d 	bl	80083ea <xQueueGenericCreate>
 80084f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f7ff ffd3 	bl	800849e <prvInitialiseMutex>

		return xNewQueue;
 80084f8:	68fb      	ldr	r3, [r7, #12]
	}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3718      	adds	r7, #24
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008502:	b580      	push	{r7, lr}
 8008504:	b088      	sub	sp, #32
 8008506:	af02      	add	r7, sp, #8
 8008508:	4603      	mov	r3, r0
 800850a:	6039      	str	r1, [r7, #0]
 800850c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800850e:	2301      	movs	r3, #1
 8008510:	617b      	str	r3, [r7, #20]
 8008512:	2300      	movs	r3, #0
 8008514:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2200      	movs	r2, #0
 800851e:	6939      	ldr	r1, [r7, #16]
 8008520:	6978      	ldr	r0, [r7, #20]
 8008522:	f7ff fee5 	bl	80082f0 <xQueueGenericCreateStatic>
 8008526:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f7ff ffb8 	bl	800849e <prvInitialiseMutex>

		return xNewQueue;
 800852e:	68fb      	ldr	r3, [r7, #12]
	}
 8008530:	4618      	mov	r0, r3
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08e      	sub	sp, #56	@ 0x38
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
 8008544:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008546:	2300      	movs	r3, #0
 8008548:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10b      	bne.n	800856c <xQueueGenericSend+0x34>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008566:	bf00      	nop
 8008568:	bf00      	nop
 800856a:	e7fd      	b.n	8008568 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d103      	bne.n	800857a <xQueueGenericSend+0x42>
 8008572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <xQueueGenericSend+0x46>
 800857a:	2301      	movs	r3, #1
 800857c:	e000      	b.n	8008580 <xQueueGenericSend+0x48>
 800857e:	2300      	movs	r3, #0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10b      	bne.n	800859c <xQueueGenericSend+0x64>
	__asm volatile
 8008584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008596:	bf00      	nop
 8008598:	bf00      	nop
 800859a:	e7fd      	b.n	8008598 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d103      	bne.n	80085aa <xQueueGenericSend+0x72>
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d101      	bne.n	80085ae <xQueueGenericSend+0x76>
 80085aa:	2301      	movs	r3, #1
 80085ac:	e000      	b.n	80085b0 <xQueueGenericSend+0x78>
 80085ae:	2300      	movs	r3, #0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10b      	bne.n	80085cc <xQueueGenericSend+0x94>
	__asm volatile
 80085b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	623b      	str	r3, [r7, #32]
}
 80085c6:	bf00      	nop
 80085c8:	bf00      	nop
 80085ca:	e7fd      	b.n	80085c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085cc:	f001 fba8 	bl	8009d20 <xTaskGetSchedulerState>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d102      	bne.n	80085dc <xQueueGenericSend+0xa4>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d101      	bne.n	80085e0 <xQueueGenericSend+0xa8>
 80085dc:	2301      	movs	r3, #1
 80085de:	e000      	b.n	80085e2 <xQueueGenericSend+0xaa>
 80085e0:	2300      	movs	r3, #0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10b      	bne.n	80085fe <xQueueGenericSend+0xc6>
	__asm volatile
 80085e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	61fb      	str	r3, [r7, #28]
}
 80085f8:	bf00      	nop
 80085fa:	bf00      	nop
 80085fc:	e7fd      	b.n	80085fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085fe:	f7ff fceb 	bl	8007fd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800860a:	429a      	cmp	r2, r3
 800860c:	d302      	bcc.n	8008614 <xQueueGenericSend+0xdc>
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	2b02      	cmp	r3, #2
 8008612:	d129      	bne.n	8008668 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	68b9      	ldr	r1, [r7, #8]
 8008618:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800861a:	f000 fc49 	bl	8008eb0 <prvCopyDataToQueue>
 800861e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008624:	2b00      	cmp	r3, #0
 8008626:	d010      	beq.n	800864a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862a:	3324      	adds	r3, #36	@ 0x24
 800862c:	4618      	mov	r0, r3
 800862e:	f001 f9b1 	bl	8009994 <xTaskRemoveFromEventList>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d013      	beq.n	8008660 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008638:	4b3f      	ldr	r3, [pc, #252]	@ (8008738 <xQueueGenericSend+0x200>)
 800863a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800863e:	601a      	str	r2, [r3, #0]
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	e00a      	b.n	8008660 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800864a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864c:	2b00      	cmp	r3, #0
 800864e:	d007      	beq.n	8008660 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008650:	4b39      	ldr	r3, [pc, #228]	@ (8008738 <xQueueGenericSend+0x200>)
 8008652:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008656:	601a      	str	r2, [r3, #0]
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008660:	f7ff fcec 	bl	800803c <vPortExitCritical>
				return pdPASS;
 8008664:	2301      	movs	r3, #1
 8008666:	e063      	b.n	8008730 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d103      	bne.n	8008676 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800866e:	f7ff fce5 	bl	800803c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008672:	2300      	movs	r3, #0
 8008674:	e05c      	b.n	8008730 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008678:	2b00      	cmp	r3, #0
 800867a:	d106      	bne.n	800868a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800867c:	f107 0314 	add.w	r3, r7, #20
 8008680:	4618      	mov	r0, r3
 8008682:	f001 f9eb 	bl	8009a5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008686:	2301      	movs	r3, #1
 8008688:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800868a:	f7ff fcd7 	bl	800803c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800868e:	f000 ff6f 	bl	8009570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008692:	f7ff fca1 	bl	8007fd8 <vPortEnterCritical>
 8008696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008698:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800869c:	b25b      	sxtb	r3, r3
 800869e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a2:	d103      	bne.n	80086ac <xQueueGenericSend+0x174>
 80086a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086b2:	b25b      	sxtb	r3, r3
 80086b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b8:	d103      	bne.n	80086c2 <xQueueGenericSend+0x18a>
 80086ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086c2:	f7ff fcbb 	bl	800803c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086c6:	1d3a      	adds	r2, r7, #4
 80086c8:	f107 0314 	add.w	r3, r7, #20
 80086cc:	4611      	mov	r1, r2
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 f9da 	bl	8009a88 <xTaskCheckForTimeOut>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d124      	bne.n	8008724 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80086da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086dc:	f000 fce0 	bl	80090a0 <prvIsQueueFull>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d018      	beq.n	8008718 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e8:	3310      	adds	r3, #16
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	4611      	mov	r1, r2
 80086ee:	4618      	mov	r0, r3
 80086f0:	f001 f92a 	bl	8009948 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80086f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086f6:	f000 fc6b 	bl	8008fd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80086fa:	f000 ff47 	bl	800958c <xTaskResumeAll>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	f47f af7c 	bne.w	80085fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008706:	4b0c      	ldr	r3, [pc, #48]	@ (8008738 <xQueueGenericSend+0x200>)
 8008708:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	e772      	b.n	80085fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008718:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800871a:	f000 fc59 	bl	8008fd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800871e:	f000 ff35 	bl	800958c <xTaskResumeAll>
 8008722:	e76c      	b.n	80085fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008724:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008726:	f000 fc53 	bl	8008fd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800872a:	f000 ff2f 	bl	800958c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800872e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008730:	4618      	mov	r0, r3
 8008732:	3738      	adds	r7, #56	@ 0x38
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	e000ed04 	.word	0xe000ed04

0800873c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b090      	sub	sp, #64	@ 0x40
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
 8008748:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800874e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10b      	bne.n	800876c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008766:	bf00      	nop
 8008768:	bf00      	nop
 800876a:	e7fd      	b.n	8008768 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d103      	bne.n	800877a <xQueueGenericSendFromISR+0x3e>
 8008772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008776:	2b00      	cmp	r3, #0
 8008778:	d101      	bne.n	800877e <xQueueGenericSendFromISR+0x42>
 800877a:	2301      	movs	r3, #1
 800877c:	e000      	b.n	8008780 <xQueueGenericSendFromISR+0x44>
 800877e:	2300      	movs	r3, #0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10b      	bne.n	800879c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008796:	bf00      	nop
 8008798:	bf00      	nop
 800879a:	e7fd      	b.n	8008798 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d103      	bne.n	80087aa <xQueueGenericSendFromISR+0x6e>
 80087a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d101      	bne.n	80087ae <xQueueGenericSendFromISR+0x72>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <xQueueGenericSendFromISR+0x74>
 80087ae:	2300      	movs	r3, #0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10b      	bne.n	80087cc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	623b      	str	r3, [r7, #32]
}
 80087c6:	bf00      	nop
 80087c8:	bf00      	nop
 80087ca:	e7fd      	b.n	80087c8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087cc:	f7ff fce4 	bl	8008198 <vPortValidateInterruptPriority>
	__asm volatile
 80087d0:	f3ef 8211 	mrs	r2, BASEPRI
 80087d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	61fa      	str	r2, [r7, #28]
 80087e6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80087e8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087ea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d302      	bcc.n	80087fe <xQueueGenericSendFromISR+0xc2>
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d12f      	bne.n	800885e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80087fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008800:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008804:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800880a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800880e:	683a      	ldr	r2, [r7, #0]
 8008810:	68b9      	ldr	r1, [r7, #8]
 8008812:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008814:	f000 fb4c 	bl	8008eb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008818:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800881c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008820:	d112      	bne.n	8008848 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008826:	2b00      	cmp	r3, #0
 8008828:	d016      	beq.n	8008858 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800882a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882c:	3324      	adds	r3, #36	@ 0x24
 800882e:	4618      	mov	r0, r3
 8008830:	f001 f8b0 	bl	8009994 <xTaskRemoveFromEventList>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00e      	beq.n	8008858 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00b      	beq.n	8008858 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	601a      	str	r2, [r3, #0]
 8008846:	e007      	b.n	8008858 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008848:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800884c:	3301      	adds	r3, #1
 800884e:	b2db      	uxtb	r3, r3
 8008850:	b25a      	sxtb	r2, r3
 8008852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008858:	2301      	movs	r3, #1
 800885a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800885c:	e001      	b.n	8008862 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800885e:	2300      	movs	r3, #0
 8008860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008864:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f383 8811 	msr	BASEPRI, r3
}
 800886c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800886e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008870:	4618      	mov	r0, r3
 8008872:	3740      	adds	r7, #64	@ 0x40
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b08e      	sub	sp, #56	@ 0x38
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10b      	bne.n	80088a4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	623b      	str	r3, [r7, #32]
}
 800889e:	bf00      	nop
 80088a0:	bf00      	nop
 80088a2:	e7fd      	b.n	80088a0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80088a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00b      	beq.n	80088c4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	61fb      	str	r3, [r7, #28]
}
 80088be:	bf00      	nop
 80088c0:	bf00      	nop
 80088c2:	e7fd      	b.n	80088c0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80088c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d103      	bne.n	80088d4 <xQueueGiveFromISR+0x5c>
 80088cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d101      	bne.n	80088d8 <xQueueGiveFromISR+0x60>
 80088d4:	2301      	movs	r3, #1
 80088d6:	e000      	b.n	80088da <xQueueGiveFromISR+0x62>
 80088d8:	2300      	movs	r3, #0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10b      	bne.n	80088f6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	61bb      	str	r3, [r7, #24]
}
 80088f0:	bf00      	nop
 80088f2:	bf00      	nop
 80088f4:	e7fd      	b.n	80088f2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088f6:	f7ff fc4f 	bl	8008198 <vPortValidateInterruptPriority>
	__asm volatile
 80088fa:	f3ef 8211 	mrs	r2, BASEPRI
 80088fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008902:	f383 8811 	msr	BASEPRI, r3
 8008906:	f3bf 8f6f 	isb	sy
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	617a      	str	r2, [r7, #20]
 8008910:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008912:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008914:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800891c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008920:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008922:	429a      	cmp	r2, r3
 8008924:	d22b      	bcs.n	800897e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008928:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800892c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008932:	1c5a      	adds	r2, r3, #1
 8008934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008936:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008938:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800893c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008940:	d112      	bne.n	8008968 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008946:	2b00      	cmp	r3, #0
 8008948:	d016      	beq.n	8008978 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800894a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894c:	3324      	adds	r3, #36	@ 0x24
 800894e:	4618      	mov	r0, r3
 8008950:	f001 f820 	bl	8009994 <xTaskRemoveFromEventList>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00e      	beq.n	8008978 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00b      	beq.n	8008978 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2201      	movs	r2, #1
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	e007      	b.n	8008978 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800896c:	3301      	adds	r3, #1
 800896e:	b2db      	uxtb	r3, r3
 8008970:	b25a      	sxtb	r2, r3
 8008972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008978:	2301      	movs	r3, #1
 800897a:	637b      	str	r3, [r7, #52]	@ 0x34
 800897c:	e001      	b.n	8008982 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800897e:	2300      	movs	r3, #0
 8008980:	637b      	str	r3, [r7, #52]	@ 0x34
 8008982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008984:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f383 8811 	msr	BASEPRI, r3
}
 800898c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800898e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008990:	4618      	mov	r0, r3
 8008992:	3738      	adds	r7, #56	@ 0x38
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08c      	sub	sp, #48	@ 0x30
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80089a4:	2300      	movs	r3, #0
 80089a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80089ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10b      	bne.n	80089ca <xQueueReceive+0x32>
	__asm volatile
 80089b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	623b      	str	r3, [r7, #32]
}
 80089c4:	bf00      	nop
 80089c6:	bf00      	nop
 80089c8:	e7fd      	b.n	80089c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d103      	bne.n	80089d8 <xQueueReceive+0x40>
 80089d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <xQueueReceive+0x44>
 80089d8:	2301      	movs	r3, #1
 80089da:	e000      	b.n	80089de <xQueueReceive+0x46>
 80089dc:	2300      	movs	r3, #0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10b      	bne.n	80089fa <xQueueReceive+0x62>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	61fb      	str	r3, [r7, #28]
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop
 80089f8:	e7fd      	b.n	80089f6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089fa:	f001 f991 	bl	8009d20 <xTaskGetSchedulerState>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d102      	bne.n	8008a0a <xQueueReceive+0x72>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <xQueueReceive+0x76>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <xQueueReceive+0x78>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10b      	bne.n	8008a2c <xQueueReceive+0x94>
	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a18:	f383 8811 	msr	BASEPRI, r3
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	61bb      	str	r3, [r7, #24]
}
 8008a26:	bf00      	nop
 8008a28:	bf00      	nop
 8008a2a:	e7fd      	b.n	8008a28 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a2c:	f7ff fad4 	bl	8007fd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a34:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d01f      	beq.n	8008a7c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a3c:	68b9      	ldr	r1, [r7, #8]
 8008a3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a40:	f000 faa0 	bl	8008f84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a46:	1e5a      	subs	r2, r3, #1
 8008a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a4a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00f      	beq.n	8008a74 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a56:	3310      	adds	r3, #16
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 ff9b 	bl	8009994 <xTaskRemoveFromEventList>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d007      	beq.n	8008a74 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a64:	4b3c      	ldr	r3, [pc, #240]	@ (8008b58 <xQueueReceive+0x1c0>)
 8008a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a6a:	601a      	str	r2, [r3, #0]
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a74:	f7ff fae2 	bl	800803c <vPortExitCritical>
				return pdPASS;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e069      	b.n	8008b50 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d103      	bne.n	8008a8a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a82:	f7ff fadb 	bl	800803c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a86:	2300      	movs	r3, #0
 8008a88:	e062      	b.n	8008b50 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d106      	bne.n	8008a9e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a90:	f107 0310 	add.w	r3, r7, #16
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 ffe1 	bl	8009a5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a9e:	f7ff facd 	bl	800803c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008aa2:	f000 fd65 	bl	8009570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008aa6:	f7ff fa97 	bl	8007fd8 <vPortEnterCritical>
 8008aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ab0:	b25b      	sxtb	r3, r3
 8008ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab6:	d103      	bne.n	8008ac0 <xQueueReceive+0x128>
 8008ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ac6:	b25b      	sxtb	r3, r3
 8008ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008acc:	d103      	bne.n	8008ad6 <xQueueReceive+0x13e>
 8008ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ad6:	f7ff fab1 	bl	800803c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ada:	1d3a      	adds	r2, r7, #4
 8008adc:	f107 0310 	add.w	r3, r7, #16
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 ffd0 	bl	8009a88 <xTaskCheckForTimeOut>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d123      	bne.n	8008b36 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008aee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008af0:	f000 fac0 	bl	8009074 <prvIsQueueEmpty>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d017      	beq.n	8008b2a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afc:	3324      	adds	r3, #36	@ 0x24
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	4611      	mov	r1, r2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 ff20 	bl	8009948 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b0a:	f000 fa61 	bl	8008fd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b0e:	f000 fd3d 	bl	800958c <xTaskResumeAll>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d189      	bne.n	8008a2c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008b18:	4b0f      	ldr	r3, [pc, #60]	@ (8008b58 <xQueueReceive+0x1c0>)
 8008b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	e780      	b.n	8008a2c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b2c:	f000 fa50 	bl	8008fd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b30:	f000 fd2c 	bl	800958c <xTaskResumeAll>
 8008b34:	e77a      	b.n	8008a2c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b38:	f000 fa4a 	bl	8008fd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b3c:	f000 fd26 	bl	800958c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b42:	f000 fa97 	bl	8009074 <prvIsQueueEmpty>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f43f af6f 	beq.w	8008a2c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3730      	adds	r7, #48	@ 0x30
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	e000ed04 	.word	0xe000ed04

08008b5c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08e      	sub	sp, #56	@ 0x38
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b66:	2300      	movs	r3, #0
 8008b68:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10b      	bne.n	8008b90 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	623b      	str	r3, [r7, #32]
}
 8008b8a:	bf00      	nop
 8008b8c:	bf00      	nop
 8008b8e:	e7fd      	b.n	8008b8c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00b      	beq.n	8008bb0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	61fb      	str	r3, [r7, #28]
}
 8008baa:	bf00      	nop
 8008bac:	bf00      	nop
 8008bae:	e7fd      	b.n	8008bac <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bb0:	f001 f8b6 	bl	8009d20 <xTaskGetSchedulerState>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d102      	bne.n	8008bc0 <xQueueSemaphoreTake+0x64>
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <xQueueSemaphoreTake+0x68>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <xQueueSemaphoreTake+0x6a>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10b      	bne.n	8008be2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	61bb      	str	r3, [r7, #24]
}
 8008bdc:	bf00      	nop
 8008bde:	bf00      	nop
 8008be0:	e7fd      	b.n	8008bde <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008be2:	f7ff f9f9 	bl	8007fd8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bea:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d024      	beq.n	8008c3c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf4:	1e5a      	subs	r2, r3, #1
 8008bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d104      	bne.n	8008c0c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008c02:	f001 fa39 	bl	800a078 <pvTaskIncrementMutexHeldCount>
 8008c06:	4602      	mov	r2, r0
 8008c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c0a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00f      	beq.n	8008c34 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c16:	3310      	adds	r3, #16
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 febb 	bl	8009994 <xTaskRemoveFromEventList>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d007      	beq.n	8008c34 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c24:	4b54      	ldr	r3, [pc, #336]	@ (8008d78 <xQueueSemaphoreTake+0x21c>)
 8008c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c34:	f7ff fa02 	bl	800803c <vPortExitCritical>
				return pdPASS;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e098      	b.n	8008d6e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d112      	bne.n	8008c68 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00b      	beq.n	8008c60 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	617b      	str	r3, [r7, #20]
}
 8008c5a:	bf00      	nop
 8008c5c:	bf00      	nop
 8008c5e:	e7fd      	b.n	8008c5c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008c60:	f7ff f9ec 	bl	800803c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c64:	2300      	movs	r3, #0
 8008c66:	e082      	b.n	8008d6e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d106      	bne.n	8008c7c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c6e:	f107 030c 	add.w	r3, r7, #12
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 fef2 	bl	8009a5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c7c:	f7ff f9de 	bl	800803c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c80:	f000 fc76 	bl	8009570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c84:	f7ff f9a8 	bl	8007fd8 <vPortEnterCritical>
 8008c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c8e:	b25b      	sxtb	r3, r3
 8008c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c94:	d103      	bne.n	8008c9e <xQueueSemaphoreTake+0x142>
 8008c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ca4:	b25b      	sxtb	r3, r3
 8008ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008caa:	d103      	bne.n	8008cb4 <xQueueSemaphoreTake+0x158>
 8008cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cb4:	f7ff f9c2 	bl	800803c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cb8:	463a      	mov	r2, r7
 8008cba:	f107 030c 	add.w	r3, r7, #12
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 fee1 	bl	8009a88 <xTaskCheckForTimeOut>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d132      	bne.n	8008d32 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ccc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008cce:	f000 f9d1 	bl	8009074 <prvIsQueueEmpty>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d026      	beq.n	8008d26 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d109      	bne.n	8008cf4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008ce0:	f7ff f97a 	bl	8007fd8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f001 f837 	bl	8009d5c <xTaskPriorityInherit>
 8008cee:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008cf0:	f7ff f9a4 	bl	800803c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf6:	3324      	adds	r3, #36	@ 0x24
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 fe23 	bl	8009948 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d04:	f000 f964 	bl	8008fd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d08:	f000 fc40 	bl	800958c <xTaskResumeAll>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f47f af67 	bne.w	8008be2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008d14:	4b18      	ldr	r3, [pc, #96]	@ (8008d78 <xQueueSemaphoreTake+0x21c>)
 8008d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d1a:	601a      	str	r2, [r3, #0]
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	e75d      	b.n	8008be2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008d26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d28:	f000 f952 	bl	8008fd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d2c:	f000 fc2e 	bl	800958c <xTaskResumeAll>
 8008d30:	e757      	b.n	8008be2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008d32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d34:	f000 f94c 	bl	8008fd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d38:	f000 fc28 	bl	800958c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d3e:	f000 f999 	bl	8009074 <prvIsQueueEmpty>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f43f af4c 	beq.w	8008be2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00d      	beq.n	8008d6c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008d50:	f7ff f942 	bl	8007fd8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008d54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d56:	f000 f893 	bl	8008e80 <prvGetDisinheritPriorityAfterTimeout>
 8008d5a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d62:	4618      	mov	r0, r3
 8008d64:	f001 f8f8 	bl	8009f58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008d68:	f7ff f968 	bl	800803c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3738      	adds	r7, #56	@ 0x38
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	e000ed04 	.word	0xe000ed04

08008d7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b08e      	sub	sp, #56	@ 0x38
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10b      	bne.n	8008daa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	623b      	str	r3, [r7, #32]
}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop
 8008da8:	e7fd      	b.n	8008da6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d103      	bne.n	8008db8 <xQueueReceiveFromISR+0x3c>
 8008db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d101      	bne.n	8008dbc <xQueueReceiveFromISR+0x40>
 8008db8:	2301      	movs	r3, #1
 8008dba:	e000      	b.n	8008dbe <xQueueReceiveFromISR+0x42>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10b      	bne.n	8008dda <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	61fb      	str	r3, [r7, #28]
}
 8008dd4:	bf00      	nop
 8008dd6:	bf00      	nop
 8008dd8:	e7fd      	b.n	8008dd6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008dda:	f7ff f9dd 	bl	8008198 <vPortValidateInterruptPriority>
	__asm volatile
 8008dde:	f3ef 8211 	mrs	r2, BASEPRI
 8008de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de6:	f383 8811 	msr	BASEPRI, r3
 8008dea:	f3bf 8f6f 	isb	sy
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	61ba      	str	r2, [r7, #24]
 8008df4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008df6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dfe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d02f      	beq.n	8008e66 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e14:	f000 f8b6 	bl	8008f84 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1a:	1e5a      	subs	r2, r3, #1
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008e20:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e28:	d112      	bne.n	8008e50 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d016      	beq.n	8008e60 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e34:	3310      	adds	r3, #16
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 fdac 	bl	8009994 <xTaskRemoveFromEventList>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00e      	beq.n	8008e60 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00b      	beq.n	8008e60 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	e007      	b.n	8008e60 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008e50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e54:	3301      	adds	r3, #1
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	b25a      	sxtb	r2, r3
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008e60:	2301      	movs	r3, #1
 8008e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e64:	e001      	b.n	8008e6a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	f383 8811 	msr	BASEPRI, r3
}
 8008e74:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3738      	adds	r7, #56	@ 0x38
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d006      	beq.n	8008e9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f1c3 0307 	rsb	r3, r3, #7
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	e001      	b.n	8008ea2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
	}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3714      	adds	r7, #20
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10d      	bne.n	8008eea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d14d      	bne.n	8008f72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f000 ffb4 	bl	8009e48 <xTaskPriorityDisinherit>
 8008ee0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	609a      	str	r2, [r3, #8]
 8008ee8:	e043      	b.n	8008f72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d119      	bne.n	8008f24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6858      	ldr	r0, [r3, #4]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef8:	461a      	mov	r2, r3
 8008efa:	68b9      	ldr	r1, [r7, #8]
 8008efc:	f00e fd31 	bl	8017962 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f08:	441a      	add	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d32b      	bcc.n	8008f72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	605a      	str	r2, [r3, #4]
 8008f22:	e026      	b.n	8008f72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	68d8      	ldr	r0, [r3, #12]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	68b9      	ldr	r1, [r7, #8]
 8008f30:	f00e fd17 	bl	8017962 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	68da      	ldr	r2, [r3, #12]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f3c:	425b      	negs	r3, r3
 8008f3e:	441a      	add	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	68da      	ldr	r2, [r3, #12]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d207      	bcs.n	8008f60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	689a      	ldr	r2, [r3, #8]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f58:	425b      	negs	r3, r3
 8008f5a:	441a      	add	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d105      	bne.n	8008f72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	1c5a      	adds	r2, r3, #1
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f7a:	697b      	ldr	r3, [r7, #20]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3718      	adds	r7, #24
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d018      	beq.n	8008fc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68da      	ldr	r2, [r3, #12]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f9e:	441a      	add	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68da      	ldr	r2, [r3, #12]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d303      	bcc.n	8008fb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68d9      	ldr	r1, [r3, #12]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	6838      	ldr	r0, [r7, #0]
 8008fc4:	f00e fccd 	bl	8017962 <memcpy>
	}
}
 8008fc8:	bf00      	nop
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fd8:	f7fe fffe 	bl	8007fd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fe2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fe4:	e011      	b.n	800900a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d012      	beq.n	8009014 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	3324      	adds	r3, #36	@ 0x24
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 fcce 	bl	8009994 <xTaskRemoveFromEventList>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ffe:	f000 fda7 	bl	8009b50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009002:	7bfb      	ldrb	r3, [r7, #15]
 8009004:	3b01      	subs	r3, #1
 8009006:	b2db      	uxtb	r3, r3
 8009008:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800900a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800900e:	2b00      	cmp	r3, #0
 8009010:	dce9      	bgt.n	8008fe6 <prvUnlockQueue+0x16>
 8009012:	e000      	b.n	8009016 <prvUnlockQueue+0x46>
					break;
 8009014:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	22ff      	movs	r2, #255	@ 0xff
 800901a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800901e:	f7ff f80d 	bl	800803c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009022:	f7fe ffd9 	bl	8007fd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800902c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800902e:	e011      	b.n	8009054 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d012      	beq.n	800905e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	3310      	adds	r3, #16
 800903c:	4618      	mov	r0, r3
 800903e:	f000 fca9 	bl	8009994 <xTaskRemoveFromEventList>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009048:	f000 fd82 	bl	8009b50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800904c:	7bbb      	ldrb	r3, [r7, #14]
 800904e:	3b01      	subs	r3, #1
 8009050:	b2db      	uxtb	r3, r3
 8009052:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009058:	2b00      	cmp	r3, #0
 800905a:	dce9      	bgt.n	8009030 <prvUnlockQueue+0x60>
 800905c:	e000      	b.n	8009060 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800905e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	22ff      	movs	r2, #255	@ 0xff
 8009064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009068:	f7fe ffe8 	bl	800803c <vPortExitCritical>
}
 800906c:	bf00      	nop
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800907c:	f7fe ffac 	bl	8007fd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009084:	2b00      	cmp	r3, #0
 8009086:	d102      	bne.n	800908e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009088:	2301      	movs	r3, #1
 800908a:	60fb      	str	r3, [r7, #12]
 800908c:	e001      	b.n	8009092 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800908e:	2300      	movs	r3, #0
 8009090:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009092:	f7fe ffd3 	bl	800803c <vPortExitCritical>

	return xReturn;
 8009096:	68fb      	ldr	r3, [r7, #12]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090a8:	f7fe ff96 	bl	8007fd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d102      	bne.n	80090be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090b8:	2301      	movs	r3, #1
 80090ba:	60fb      	str	r3, [r7, #12]
 80090bc:	e001      	b.n	80090c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090be:	2300      	movs	r3, #0
 80090c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090c2:	f7fe ffbb 	bl	800803c <vPortExitCritical>

	return xReturn;
 80090c6:	68fb      	ldr	r3, [r7, #12]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b08e      	sub	sp, #56	@ 0x38
 80090d4:	af04      	add	r7, sp, #16
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
 80090dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80090de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10b      	bne.n	80090fc <xTaskCreateStatic+0x2c>
	__asm volatile
 80090e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	623b      	str	r3, [r7, #32]
}
 80090f6:	bf00      	nop
 80090f8:	bf00      	nop
 80090fa:	e7fd      	b.n	80090f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80090fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10b      	bne.n	800911a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	61fb      	str	r3, [r7, #28]
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	e7fd      	b.n	8009116 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800911a:	23a0      	movs	r3, #160	@ 0xa0
 800911c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	2ba0      	cmp	r3, #160	@ 0xa0
 8009122:	d00b      	beq.n	800913c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009128:	f383 8811 	msr	BASEPRI, r3
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	61bb      	str	r3, [r7, #24]
}
 8009136:	bf00      	nop
 8009138:	bf00      	nop
 800913a:	e7fd      	b.n	8009138 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800913c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800913e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009140:	2b00      	cmp	r3, #0
 8009142:	d01e      	beq.n	8009182 <xTaskCreateStatic+0xb2>
 8009144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009146:	2b00      	cmp	r3, #0
 8009148:	d01b      	beq.n	8009182 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800914a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800914c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800914e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009150:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009152:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009156:	2202      	movs	r2, #2
 8009158:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800915c:	2300      	movs	r3, #0
 800915e:	9303      	str	r3, [sp, #12]
 8009160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009162:	9302      	str	r3, [sp, #8]
 8009164:	f107 0314 	add.w	r3, r7, #20
 8009168:	9301      	str	r3, [sp, #4]
 800916a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	68b9      	ldr	r1, [r7, #8]
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 f851 	bl	800921c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800917a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800917c:	f000 f8ee 	bl	800935c <prvAddNewTaskToReadyList>
 8009180:	e001      	b.n	8009186 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009182:	2300      	movs	r3, #0
 8009184:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009186:	697b      	ldr	r3, [r7, #20]
	}
 8009188:	4618      	mov	r0, r3
 800918a:	3728      	adds	r7, #40	@ 0x28
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009190:	b580      	push	{r7, lr}
 8009192:	b08c      	sub	sp, #48	@ 0x30
 8009194:	af04      	add	r7, sp, #16
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	603b      	str	r3, [r7, #0]
 800919c:	4613      	mov	r3, r2
 800919e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091a0:	88fb      	ldrh	r3, [r7, #6]
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fe fb47 	bl	8007838 <pvPortMalloc>
 80091aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00e      	beq.n	80091d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80091b2:	20a0      	movs	r0, #160	@ 0xa0
 80091b4:	f7fe fb40 	bl	8007838 <pvPortMalloc>
 80091b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d003      	beq.n	80091c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80091c6:	e005      	b.n	80091d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80091c8:	6978      	ldr	r0, [r7, #20]
 80091ca:	f7fe fc03 	bl	80079d4 <vPortFree>
 80091ce:	e001      	b.n	80091d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80091d0:	2300      	movs	r3, #0
 80091d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d017      	beq.n	800920a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80091e2:	88fa      	ldrh	r2, [r7, #6]
 80091e4:	2300      	movs	r3, #0
 80091e6:	9303      	str	r3, [sp, #12]
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	9302      	str	r3, [sp, #8]
 80091ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ee:	9301      	str	r3, [sp, #4]
 80091f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	68b9      	ldr	r1, [r7, #8]
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 f80f 	bl	800921c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091fe:	69f8      	ldr	r0, [r7, #28]
 8009200:	f000 f8ac 	bl	800935c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009204:	2301      	movs	r3, #1
 8009206:	61bb      	str	r3, [r7, #24]
 8009208:	e002      	b.n	8009210 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800920a:	f04f 33ff 	mov.w	r3, #4294967295
 800920e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009210:	69bb      	ldr	r3, [r7, #24]
	}
 8009212:	4618      	mov	r0, r3
 8009214:	3720      	adds	r7, #32
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
	...

0800921c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b088      	sub	sp, #32
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800922a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009234:	440b      	add	r3, r1
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	f023 0307 	bic.w	r3, r3, #7
 8009242:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	f003 0307 	and.w	r3, r3, #7
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00b      	beq.n	8009266 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800924e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	617b      	str	r3, [r7, #20]
}
 8009260:	bf00      	nop
 8009262:	bf00      	nop
 8009264:	e7fd      	b.n	8009262 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d01f      	beq.n	80092ac <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800926c:	2300      	movs	r3, #0
 800926e:	61fb      	str	r3, [r7, #28]
 8009270:	e012      	b.n	8009298 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009272:	68ba      	ldr	r2, [r7, #8]
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	4413      	add	r3, r2
 8009278:	7819      	ldrb	r1, [r3, #0]
 800927a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	4413      	add	r3, r2
 8009280:	3334      	adds	r3, #52	@ 0x34
 8009282:	460a      	mov	r2, r1
 8009284:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	4413      	add	r3, r2
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d006      	beq.n	80092a0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	3301      	adds	r3, #1
 8009296:	61fb      	str	r3, [r7, #28]
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	2b0f      	cmp	r3, #15
 800929c:	d9e9      	bls.n	8009272 <prvInitialiseNewTask+0x56>
 800929e:	e000      	b.n	80092a2 <prvInitialiseNewTask+0x86>
			{
				break;
 80092a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80092aa:	e003      	b.n	80092b4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80092ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80092b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b6:	2b06      	cmp	r3, #6
 80092b8:	d901      	bls.n	80092be <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80092ba:	2306      	movs	r3, #6
 80092bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80092be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80092c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092c8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80092ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092cc:	2200      	movs	r2, #0
 80092ce:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80092d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d2:	3304      	adds	r3, #4
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fe fcbd 	bl	8007c54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80092da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092dc:	3318      	adds	r3, #24
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fe fcb8 	bl	8007c54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80092e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ec:	f1c3 0207 	rsb	r2, r3, #7
 80092f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80092f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80092fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fc:	2200      	movs	r2, #0
 80092fe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009304:	2200      	movs	r2, #0
 8009306:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800930a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930c:	334c      	adds	r3, #76	@ 0x4c
 800930e:	224c      	movs	r2, #76	@ 0x4c
 8009310:	2100      	movs	r1, #0
 8009312:	4618      	mov	r0, r3
 8009314:	f00e fa52 	bl	80177bc <memset>
 8009318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931a:	4a0d      	ldr	r2, [pc, #52]	@ (8009350 <prvInitialiseNewTask+0x134>)
 800931c:	651a      	str	r2, [r3, #80]	@ 0x50
 800931e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009320:	4a0c      	ldr	r2, [pc, #48]	@ (8009354 <prvInitialiseNewTask+0x138>)
 8009322:	655a      	str	r2, [r3, #84]	@ 0x54
 8009324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009326:	4a0c      	ldr	r2, [pc, #48]	@ (8009358 <prvInitialiseNewTask+0x13c>)
 8009328:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	68f9      	ldr	r1, [r7, #12]
 800932e:	69b8      	ldr	r0, [r7, #24]
 8009330:	f7fe fd24 	bl	8007d7c <pxPortInitialiseStack>
 8009334:	4602      	mov	r2, r0
 8009336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009338:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800933a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009346:	bf00      	nop
 8009348:	3720      	adds	r7, #32
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	24007be0 	.word	0x24007be0
 8009354:	24007c48 	.word	0x24007c48
 8009358:	24007cb0 	.word	0x24007cb0

0800935c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009364:	f7fe fe38 	bl	8007fd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009368:	4b2a      	ldr	r3, [pc, #168]	@ (8009414 <prvAddNewTaskToReadyList+0xb8>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	3301      	adds	r3, #1
 800936e:	4a29      	ldr	r2, [pc, #164]	@ (8009414 <prvAddNewTaskToReadyList+0xb8>)
 8009370:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009372:	4b29      	ldr	r3, [pc, #164]	@ (8009418 <prvAddNewTaskToReadyList+0xbc>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d109      	bne.n	800938e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800937a:	4a27      	ldr	r2, [pc, #156]	@ (8009418 <prvAddNewTaskToReadyList+0xbc>)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009380:	4b24      	ldr	r3, [pc, #144]	@ (8009414 <prvAddNewTaskToReadyList+0xb8>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d110      	bne.n	80093aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009388:	f000 fc06 	bl	8009b98 <prvInitialiseTaskLists>
 800938c:	e00d      	b.n	80093aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800938e:	4b23      	ldr	r3, [pc, #140]	@ (800941c <prvAddNewTaskToReadyList+0xc0>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d109      	bne.n	80093aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009396:	4b20      	ldr	r3, [pc, #128]	@ (8009418 <prvAddNewTaskToReadyList+0xbc>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d802      	bhi.n	80093aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009418 <prvAddNewTaskToReadyList+0xbc>)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093aa:	4b1d      	ldr	r3, [pc, #116]	@ (8009420 <prvAddNewTaskToReadyList+0xc4>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	3301      	adds	r3, #1
 80093b0:	4a1b      	ldr	r2, [pc, #108]	@ (8009420 <prvAddNewTaskToReadyList+0xc4>)
 80093b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b8:	2201      	movs	r2, #1
 80093ba:	409a      	lsls	r2, r3
 80093bc:	4b19      	ldr	r3, [pc, #100]	@ (8009424 <prvAddNewTaskToReadyList+0xc8>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	4a18      	ldr	r2, [pc, #96]	@ (8009424 <prvAddNewTaskToReadyList+0xc8>)
 80093c4:	6013      	str	r3, [r2, #0]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ca:	4613      	mov	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4a15      	ldr	r2, [pc, #84]	@ (8009428 <prvAddNewTaskToReadyList+0xcc>)
 80093d4:	441a      	add	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	3304      	adds	r3, #4
 80093da:	4619      	mov	r1, r3
 80093dc:	4610      	mov	r0, r2
 80093de:	f7fe fc46 	bl	8007c6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80093e2:	f7fe fe2b 	bl	800803c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80093e6:	4b0d      	ldr	r3, [pc, #52]	@ (800941c <prvAddNewTaskToReadyList+0xc0>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00e      	beq.n	800940c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80093ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009418 <prvAddNewTaskToReadyList+0xbc>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d207      	bcs.n	800940c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80093fc:	4b0b      	ldr	r3, [pc, #44]	@ (800942c <prvAddNewTaskToReadyList+0xd0>)
 80093fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009402:	601a      	str	r2, [r3, #0]
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	240042fc 	.word	0x240042fc
 8009418:	240041fc 	.word	0x240041fc
 800941c:	24004308 	.word	0x24004308
 8009420:	24004318 	.word	0x24004318
 8009424:	24004304 	.word	0x24004304
 8009428:	24004200 	.word	0x24004200
 800942c:	e000ed04 	.word	0xe000ed04

08009430 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009438:	2300      	movs	r3, #0
 800943a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d018      	beq.n	8009474 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009442:	4b14      	ldr	r3, [pc, #80]	@ (8009494 <vTaskDelay+0x64>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00b      	beq.n	8009462 <vTaskDelay+0x32>
	__asm volatile
 800944a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	60bb      	str	r3, [r7, #8]
}
 800945c:	bf00      	nop
 800945e:	bf00      	nop
 8009460:	e7fd      	b.n	800945e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009462:	f000 f885 	bl	8009570 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009466:	2100      	movs	r1, #0
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fe19 	bl	800a0a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800946e:	f000 f88d 	bl	800958c <xTaskResumeAll>
 8009472:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d107      	bne.n	800948a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800947a:	4b07      	ldr	r3, [pc, #28]	@ (8009498 <vTaskDelay+0x68>)
 800947c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800948a:	bf00      	nop
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	24004324 	.word	0x24004324
 8009498:	e000ed04 	.word	0xe000ed04

0800949c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b08a      	sub	sp, #40	@ 0x28
 80094a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80094a2:	2300      	movs	r3, #0
 80094a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80094aa:	463a      	mov	r2, r7
 80094ac:	1d39      	adds	r1, r7, #4
 80094ae:	f107 0308 	add.w	r3, r7, #8
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7f7 f9c8 	bl	8000848 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80094b8:	6839      	ldr	r1, [r7, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	9202      	str	r2, [sp, #8]
 80094c0:	9301      	str	r3, [sp, #4]
 80094c2:	2300      	movs	r3, #0
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	2300      	movs	r3, #0
 80094c8:	460a      	mov	r2, r1
 80094ca:	4921      	ldr	r1, [pc, #132]	@ (8009550 <vTaskStartScheduler+0xb4>)
 80094cc:	4821      	ldr	r0, [pc, #132]	@ (8009554 <vTaskStartScheduler+0xb8>)
 80094ce:	f7ff fdff 	bl	80090d0 <xTaskCreateStatic>
 80094d2:	4603      	mov	r3, r0
 80094d4:	4a20      	ldr	r2, [pc, #128]	@ (8009558 <vTaskStartScheduler+0xbc>)
 80094d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80094d8:	4b1f      	ldr	r3, [pc, #124]	@ (8009558 <vTaskStartScheduler+0xbc>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80094e0:	2301      	movs	r3, #1
 80094e2:	617b      	str	r3, [r7, #20]
 80094e4:	e001      	b.n	80094ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d11b      	bne.n	8009528 <vTaskStartScheduler+0x8c>
	__asm volatile
 80094f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	613b      	str	r3, [r7, #16]
}
 8009502:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009504:	4b15      	ldr	r3, [pc, #84]	@ (800955c <vTaskStartScheduler+0xc0>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	334c      	adds	r3, #76	@ 0x4c
 800950a:	4a15      	ldr	r2, [pc, #84]	@ (8009560 <vTaskStartScheduler+0xc4>)
 800950c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800950e:	4b15      	ldr	r3, [pc, #84]	@ (8009564 <vTaskStartScheduler+0xc8>)
 8009510:	f04f 32ff 	mov.w	r2, #4294967295
 8009514:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009516:	4b14      	ldr	r3, [pc, #80]	@ (8009568 <vTaskStartScheduler+0xcc>)
 8009518:	2201      	movs	r2, #1
 800951a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800951c:	4b13      	ldr	r3, [pc, #76]	@ (800956c <vTaskStartScheduler+0xd0>)
 800951e:	2200      	movs	r2, #0
 8009520:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009522:	f7fe fcb5 	bl	8007e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009526:	e00f      	b.n	8009548 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800952e:	d10b      	bne.n	8009548 <vTaskStartScheduler+0xac>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	60fb      	str	r3, [r7, #12]
}
 8009542:	bf00      	nop
 8009544:	bf00      	nop
 8009546:	e7fd      	b.n	8009544 <vTaskStartScheduler+0xa8>
}
 8009548:	bf00      	nop
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	08018604 	.word	0x08018604
 8009554:	08009b69 	.word	0x08009b69
 8009558:	24004320 	.word	0x24004320
 800955c:	240041fc 	.word	0x240041fc
 8009560:	24000060 	.word	0x24000060
 8009564:	2400431c 	.word	0x2400431c
 8009568:	24004308 	.word	0x24004308
 800956c:	24004300 	.word	0x24004300

08009570 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009570:	b480      	push	{r7}
 8009572:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009574:	4b04      	ldr	r3, [pc, #16]	@ (8009588 <vTaskSuspendAll+0x18>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	3301      	adds	r3, #1
 800957a:	4a03      	ldr	r2, [pc, #12]	@ (8009588 <vTaskSuspendAll+0x18>)
 800957c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800957e:	bf00      	nop
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	24004324 	.word	0x24004324

0800958c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009592:	2300      	movs	r3, #0
 8009594:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009596:	2300      	movs	r3, #0
 8009598:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800959a:	4b42      	ldr	r3, [pc, #264]	@ (80096a4 <xTaskResumeAll+0x118>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10b      	bne.n	80095ba <xTaskResumeAll+0x2e>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	603b      	str	r3, [r7, #0]
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop
 80095b8:	e7fd      	b.n	80095b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80095ba:	f7fe fd0d 	bl	8007fd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80095be:	4b39      	ldr	r3, [pc, #228]	@ (80096a4 <xTaskResumeAll+0x118>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	3b01      	subs	r3, #1
 80095c4:	4a37      	ldr	r2, [pc, #220]	@ (80096a4 <xTaskResumeAll+0x118>)
 80095c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095c8:	4b36      	ldr	r3, [pc, #216]	@ (80096a4 <xTaskResumeAll+0x118>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d161      	bne.n	8009694 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80095d0:	4b35      	ldr	r3, [pc, #212]	@ (80096a8 <xTaskResumeAll+0x11c>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d05d      	beq.n	8009694 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095d8:	e02e      	b.n	8009638 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095da:	4b34      	ldr	r3, [pc, #208]	@ (80096ac <xTaskResumeAll+0x120>)
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3318      	adds	r3, #24
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fe fb9e 	bl	8007d28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	3304      	adds	r3, #4
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fe fb99 	bl	8007d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fa:	2201      	movs	r2, #1
 80095fc:	409a      	lsls	r2, r3
 80095fe:	4b2c      	ldr	r3, [pc, #176]	@ (80096b0 <xTaskResumeAll+0x124>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4313      	orrs	r3, r2
 8009604:	4a2a      	ldr	r2, [pc, #168]	@ (80096b0 <xTaskResumeAll+0x124>)
 8009606:	6013      	str	r3, [r2, #0]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800960c:	4613      	mov	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4a27      	ldr	r2, [pc, #156]	@ (80096b4 <xTaskResumeAll+0x128>)
 8009616:	441a      	add	r2, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	3304      	adds	r3, #4
 800961c:	4619      	mov	r1, r3
 800961e:	4610      	mov	r0, r2
 8009620:	f7fe fb25 	bl	8007c6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009628:	4b23      	ldr	r3, [pc, #140]	@ (80096b8 <xTaskResumeAll+0x12c>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800962e:	429a      	cmp	r2, r3
 8009630:	d302      	bcc.n	8009638 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009632:	4b22      	ldr	r3, [pc, #136]	@ (80096bc <xTaskResumeAll+0x130>)
 8009634:	2201      	movs	r2, #1
 8009636:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009638:	4b1c      	ldr	r3, [pc, #112]	@ (80096ac <xTaskResumeAll+0x120>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1cc      	bne.n	80095da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009646:	f000 fb4b 	bl	8009ce0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800964a:	4b1d      	ldr	r3, [pc, #116]	@ (80096c0 <xTaskResumeAll+0x134>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d010      	beq.n	8009678 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009656:	f000 f859 	bl	800970c <xTaskIncrementTick>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d002      	beq.n	8009666 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009660:	4b16      	ldr	r3, [pc, #88]	@ (80096bc <xTaskResumeAll+0x130>)
 8009662:	2201      	movs	r2, #1
 8009664:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	3b01      	subs	r3, #1
 800966a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1f1      	bne.n	8009656 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009672:	4b13      	ldr	r3, [pc, #76]	@ (80096c0 <xTaskResumeAll+0x134>)
 8009674:	2200      	movs	r2, #0
 8009676:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009678:	4b10      	ldr	r3, [pc, #64]	@ (80096bc <xTaskResumeAll+0x130>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d009      	beq.n	8009694 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009680:	2301      	movs	r3, #1
 8009682:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009684:	4b0f      	ldr	r3, [pc, #60]	@ (80096c4 <xTaskResumeAll+0x138>)
 8009686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009694:	f7fe fcd2 	bl	800803c <vPortExitCritical>

	return xAlreadyYielded;
 8009698:	68bb      	ldr	r3, [r7, #8]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	24004324 	.word	0x24004324
 80096a8:	240042fc 	.word	0x240042fc
 80096ac:	240042bc 	.word	0x240042bc
 80096b0:	24004304 	.word	0x24004304
 80096b4:	24004200 	.word	0x24004200
 80096b8:	240041fc 	.word	0x240041fc
 80096bc:	24004310 	.word	0x24004310
 80096c0:	2400430c 	.word	0x2400430c
 80096c4:	e000ed04 	.word	0xe000ed04

080096c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80096ce:	4b05      	ldr	r3, [pc, #20]	@ (80096e4 <xTaskGetTickCount+0x1c>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80096d4:	687b      	ldr	r3, [r7, #4]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	24004300 	.word	0x24004300

080096e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096ee:	f7fe fd53 	bl	8008198 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80096f2:	2300      	movs	r3, #0
 80096f4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80096f6:	4b04      	ldr	r3, [pc, #16]	@ (8009708 <xTaskGetTickCountFromISR+0x20>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096fc:	683b      	ldr	r3, [r7, #0]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	24004300 	.word	0x24004300

0800970c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009712:	2300      	movs	r3, #0
 8009714:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009716:	4b4f      	ldr	r3, [pc, #316]	@ (8009854 <xTaskIncrementTick+0x148>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	f040 808f 	bne.w	800983e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009720:	4b4d      	ldr	r3, [pc, #308]	@ (8009858 <xTaskIncrementTick+0x14c>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3301      	adds	r3, #1
 8009726:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009728:	4a4b      	ldr	r2, [pc, #300]	@ (8009858 <xTaskIncrementTick+0x14c>)
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d121      	bne.n	8009778 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009734:	4b49      	ldr	r3, [pc, #292]	@ (800985c <xTaskIncrementTick+0x150>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00b      	beq.n	8009756 <xTaskIncrementTick+0x4a>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	603b      	str	r3, [r7, #0]
}
 8009750:	bf00      	nop
 8009752:	bf00      	nop
 8009754:	e7fd      	b.n	8009752 <xTaskIncrementTick+0x46>
 8009756:	4b41      	ldr	r3, [pc, #260]	@ (800985c <xTaskIncrementTick+0x150>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	60fb      	str	r3, [r7, #12]
 800975c:	4b40      	ldr	r3, [pc, #256]	@ (8009860 <xTaskIncrementTick+0x154>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a3e      	ldr	r2, [pc, #248]	@ (800985c <xTaskIncrementTick+0x150>)
 8009762:	6013      	str	r3, [r2, #0]
 8009764:	4a3e      	ldr	r2, [pc, #248]	@ (8009860 <xTaskIncrementTick+0x154>)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6013      	str	r3, [r2, #0]
 800976a:	4b3e      	ldr	r3, [pc, #248]	@ (8009864 <xTaskIncrementTick+0x158>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3301      	adds	r3, #1
 8009770:	4a3c      	ldr	r2, [pc, #240]	@ (8009864 <xTaskIncrementTick+0x158>)
 8009772:	6013      	str	r3, [r2, #0]
 8009774:	f000 fab4 	bl	8009ce0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009778:	4b3b      	ldr	r3, [pc, #236]	@ (8009868 <xTaskIncrementTick+0x15c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	429a      	cmp	r2, r3
 8009780:	d348      	bcc.n	8009814 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009782:	4b36      	ldr	r3, [pc, #216]	@ (800985c <xTaskIncrementTick+0x150>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d104      	bne.n	8009796 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800978c:	4b36      	ldr	r3, [pc, #216]	@ (8009868 <xTaskIncrementTick+0x15c>)
 800978e:	f04f 32ff 	mov.w	r2, #4294967295
 8009792:	601a      	str	r2, [r3, #0]
					break;
 8009794:	e03e      	b.n	8009814 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009796:	4b31      	ldr	r3, [pc, #196]	@ (800985c <xTaskIncrementTick+0x150>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d203      	bcs.n	80097b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097ae:	4a2e      	ldr	r2, [pc, #184]	@ (8009868 <xTaskIncrementTick+0x15c>)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097b4:	e02e      	b.n	8009814 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	3304      	adds	r3, #4
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fe fab4 	bl	8007d28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d004      	beq.n	80097d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	3318      	adds	r3, #24
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fe faab 	bl	8007d28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d6:	2201      	movs	r2, #1
 80097d8:	409a      	lsls	r2, r3
 80097da:	4b24      	ldr	r3, [pc, #144]	@ (800986c <xTaskIncrementTick+0x160>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4313      	orrs	r3, r2
 80097e0:	4a22      	ldr	r2, [pc, #136]	@ (800986c <xTaskIncrementTick+0x160>)
 80097e2:	6013      	str	r3, [r2, #0]
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097e8:	4613      	mov	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4a1f      	ldr	r2, [pc, #124]	@ (8009870 <xTaskIncrementTick+0x164>)
 80097f2:	441a      	add	r2, r3
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	3304      	adds	r3, #4
 80097f8:	4619      	mov	r1, r3
 80097fa:	4610      	mov	r0, r2
 80097fc:	f7fe fa37 	bl	8007c6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009804:	4b1b      	ldr	r3, [pc, #108]	@ (8009874 <xTaskIncrementTick+0x168>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800980a:	429a      	cmp	r2, r3
 800980c:	d3b9      	bcc.n	8009782 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800980e:	2301      	movs	r3, #1
 8009810:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009812:	e7b6      	b.n	8009782 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009814:	4b17      	ldr	r3, [pc, #92]	@ (8009874 <xTaskIncrementTick+0x168>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800981a:	4915      	ldr	r1, [pc, #84]	@ (8009870 <xTaskIncrementTick+0x164>)
 800981c:	4613      	mov	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	440b      	add	r3, r1
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d901      	bls.n	8009830 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800982c:	2301      	movs	r3, #1
 800982e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009830:	4b11      	ldr	r3, [pc, #68]	@ (8009878 <xTaskIncrementTick+0x16c>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d007      	beq.n	8009848 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009838:	2301      	movs	r3, #1
 800983a:	617b      	str	r3, [r7, #20]
 800983c:	e004      	b.n	8009848 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800983e:	4b0f      	ldr	r3, [pc, #60]	@ (800987c <xTaskIncrementTick+0x170>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3301      	adds	r3, #1
 8009844:	4a0d      	ldr	r2, [pc, #52]	@ (800987c <xTaskIncrementTick+0x170>)
 8009846:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009848:	697b      	ldr	r3, [r7, #20]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3718      	adds	r7, #24
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	24004324 	.word	0x24004324
 8009858:	24004300 	.word	0x24004300
 800985c:	240042b4 	.word	0x240042b4
 8009860:	240042b8 	.word	0x240042b8
 8009864:	24004314 	.word	0x24004314
 8009868:	2400431c 	.word	0x2400431c
 800986c:	24004304 	.word	0x24004304
 8009870:	24004200 	.word	0x24004200
 8009874:	240041fc 	.word	0x240041fc
 8009878:	24004310 	.word	0x24004310
 800987c:	2400430c 	.word	0x2400430c

08009880 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009880:	b480      	push	{r7}
 8009882:	b087      	sub	sp, #28
 8009884:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009886:	4b2a      	ldr	r3, [pc, #168]	@ (8009930 <vTaskSwitchContext+0xb0>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800988e:	4b29      	ldr	r3, [pc, #164]	@ (8009934 <vTaskSwitchContext+0xb4>)
 8009890:	2201      	movs	r2, #1
 8009892:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009894:	e045      	b.n	8009922 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009896:	4b27      	ldr	r3, [pc, #156]	@ (8009934 <vTaskSwitchContext+0xb4>)
 8009898:	2200      	movs	r2, #0
 800989a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800989c:	4b26      	ldr	r3, [pc, #152]	@ (8009938 <vTaskSwitchContext+0xb8>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	fab3 f383 	clz	r3, r3
 80098a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80098aa:	7afb      	ldrb	r3, [r7, #11]
 80098ac:	f1c3 031f 	rsb	r3, r3, #31
 80098b0:	617b      	str	r3, [r7, #20]
 80098b2:	4922      	ldr	r1, [pc, #136]	@ (800993c <vTaskSwitchContext+0xbc>)
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	4613      	mov	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4413      	add	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	440b      	add	r3, r1
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10b      	bne.n	80098de <vTaskSwitchContext+0x5e>
	__asm volatile
 80098c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	607b      	str	r3, [r7, #4]
}
 80098d8:	bf00      	nop
 80098da:	bf00      	nop
 80098dc:	e7fd      	b.n	80098da <vTaskSwitchContext+0x5a>
 80098de:	697a      	ldr	r2, [r7, #20]
 80098e0:	4613      	mov	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4413      	add	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4a14      	ldr	r2, [pc, #80]	@ (800993c <vTaskSwitchContext+0xbc>)
 80098ea:	4413      	add	r3, r2
 80098ec:	613b      	str	r3, [r7, #16]
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	685a      	ldr	r2, [r3, #4]
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	605a      	str	r2, [r3, #4]
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	685a      	ldr	r2, [r3, #4]
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	3308      	adds	r3, #8
 8009900:	429a      	cmp	r2, r3
 8009902:	d104      	bne.n	800990e <vTaskSwitchContext+0x8e>
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	685a      	ldr	r2, [r3, #4]
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	605a      	str	r2, [r3, #4]
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	4a0a      	ldr	r2, [pc, #40]	@ (8009940 <vTaskSwitchContext+0xc0>)
 8009916:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009918:	4b09      	ldr	r3, [pc, #36]	@ (8009940 <vTaskSwitchContext+0xc0>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	334c      	adds	r3, #76	@ 0x4c
 800991e:	4a09      	ldr	r2, [pc, #36]	@ (8009944 <vTaskSwitchContext+0xc4>)
 8009920:	6013      	str	r3, [r2, #0]
}
 8009922:	bf00      	nop
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	24004324 	.word	0x24004324
 8009934:	24004310 	.word	0x24004310
 8009938:	24004304 	.word	0x24004304
 800993c:	24004200 	.word	0x24004200
 8009940:	240041fc 	.word	0x240041fc
 8009944:	24000060 	.word	0x24000060

08009948 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10b      	bne.n	8009970 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995c:	f383 8811 	msr	BASEPRI, r3
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	60fb      	str	r3, [r7, #12]
}
 800996a:	bf00      	nop
 800996c:	bf00      	nop
 800996e:	e7fd      	b.n	800996c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009970:	4b07      	ldr	r3, [pc, #28]	@ (8009990 <vTaskPlaceOnEventList+0x48>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3318      	adds	r3, #24
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7fe f99c 	bl	8007cb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800997e:	2101      	movs	r1, #1
 8009980:	6838      	ldr	r0, [r7, #0]
 8009982:	f000 fb8d 	bl	800a0a0 <prvAddCurrentTaskToDelayedList>
}
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	240041fc 	.word	0x240041fc

08009994 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10b      	bne.n	80099c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80099aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ae:	f383 8811 	msr	BASEPRI, r3
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	f3bf 8f4f 	dsb	sy
 80099ba:	60fb      	str	r3, [r7, #12]
}
 80099bc:	bf00      	nop
 80099be:	bf00      	nop
 80099c0:	e7fd      	b.n	80099be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	3318      	adds	r3, #24
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fe f9ae 	bl	8007d28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099cc:	4b1d      	ldr	r3, [pc, #116]	@ (8009a44 <xTaskRemoveFromEventList+0xb0>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d11c      	bne.n	8009a0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	3304      	adds	r3, #4
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fe f9a5 	bl	8007d28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e2:	2201      	movs	r2, #1
 80099e4:	409a      	lsls	r2, r3
 80099e6:	4b18      	ldr	r3, [pc, #96]	@ (8009a48 <xTaskRemoveFromEventList+0xb4>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	4a16      	ldr	r2, [pc, #88]	@ (8009a48 <xTaskRemoveFromEventList+0xb4>)
 80099ee:	6013      	str	r3, [r2, #0]
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099f4:	4613      	mov	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4413      	add	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4a13      	ldr	r2, [pc, #76]	@ (8009a4c <xTaskRemoveFromEventList+0xb8>)
 80099fe:	441a      	add	r2, r3
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	3304      	adds	r3, #4
 8009a04:	4619      	mov	r1, r3
 8009a06:	4610      	mov	r0, r2
 8009a08:	f7fe f931 	bl	8007c6e <vListInsertEnd>
 8009a0c:	e005      	b.n	8009a1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	3318      	adds	r3, #24
 8009a12:	4619      	mov	r1, r3
 8009a14:	480e      	ldr	r0, [pc, #56]	@ (8009a50 <xTaskRemoveFromEventList+0xbc>)
 8009a16:	f7fe f92a 	bl	8007c6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a54 <xTaskRemoveFromEventList+0xc0>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d905      	bls.n	8009a34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a58 <xTaskRemoveFromEventList+0xc4>)
 8009a2e:	2201      	movs	r2, #1
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	e001      	b.n	8009a38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009a34:	2300      	movs	r3, #0
 8009a36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009a38:	697b      	ldr	r3, [r7, #20]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	24004324 	.word	0x24004324
 8009a48:	24004304 	.word	0x24004304
 8009a4c:	24004200 	.word	0x24004200
 8009a50:	240042bc 	.word	0x240042bc
 8009a54:	240041fc 	.word	0x240041fc
 8009a58:	24004310 	.word	0x24004310

08009a5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a64:	4b06      	ldr	r3, [pc, #24]	@ (8009a80 <vTaskInternalSetTimeOutState+0x24>)
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a6c:	4b05      	ldr	r3, [pc, #20]	@ (8009a84 <vTaskInternalSetTimeOutState+0x28>)
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	605a      	str	r2, [r3, #4]
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	24004314 	.word	0x24004314
 8009a84:	24004300 	.word	0x24004300

08009a88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b088      	sub	sp, #32
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10b      	bne.n	8009ab0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9c:	f383 8811 	msr	BASEPRI, r3
 8009aa0:	f3bf 8f6f 	isb	sy
 8009aa4:	f3bf 8f4f 	dsb	sy
 8009aa8:	613b      	str	r3, [r7, #16]
}
 8009aaa:	bf00      	nop
 8009aac:	bf00      	nop
 8009aae:	e7fd      	b.n	8009aac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10b      	bne.n	8009ace <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	60fb      	str	r3, [r7, #12]
}
 8009ac8:	bf00      	nop
 8009aca:	bf00      	nop
 8009acc:	e7fd      	b.n	8009aca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009ace:	f7fe fa83 	bl	8007fd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8009b48 <xTaskCheckForTimeOut+0xc0>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	69ba      	ldr	r2, [r7, #24]
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aea:	d102      	bne.n	8009af2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009aec:	2300      	movs	r3, #0
 8009aee:	61fb      	str	r3, [r7, #28]
 8009af0:	e023      	b.n	8009b3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	4b15      	ldr	r3, [pc, #84]	@ (8009b4c <xTaskCheckForTimeOut+0xc4>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d007      	beq.n	8009b0e <xTaskCheckForTimeOut+0x86>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	69ba      	ldr	r2, [r7, #24]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d302      	bcc.n	8009b0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	61fb      	str	r3, [r7, #28]
 8009b0c:	e015      	b.n	8009b3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	697a      	ldr	r2, [r7, #20]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d20b      	bcs.n	8009b30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	1ad2      	subs	r2, r2, r3
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f7ff ff99 	bl	8009a5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	61fb      	str	r3, [r7, #28]
 8009b2e:	e004      	b.n	8009b3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	2200      	movs	r2, #0
 8009b34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b36:	2301      	movs	r3, #1
 8009b38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b3a:	f7fe fa7f 	bl	800803c <vPortExitCritical>

	return xReturn;
 8009b3e:	69fb      	ldr	r3, [r7, #28]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3720      	adds	r7, #32
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	24004300 	.word	0x24004300
 8009b4c:	24004314 	.word	0x24004314

08009b50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b50:	b480      	push	{r7}
 8009b52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009b54:	4b03      	ldr	r3, [pc, #12]	@ (8009b64 <vTaskMissedYield+0x14>)
 8009b56:	2201      	movs	r2, #1
 8009b58:	601a      	str	r2, [r3, #0]
}
 8009b5a:	bf00      	nop
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr
 8009b64:	24004310 	.word	0x24004310

08009b68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009b70:	f000 f852 	bl	8009c18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009b74:	4b06      	ldr	r3, [pc, #24]	@ (8009b90 <prvIdleTask+0x28>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d9f9      	bls.n	8009b70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009b7c:	4b05      	ldr	r3, [pc, #20]	@ (8009b94 <prvIdleTask+0x2c>)
 8009b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009b8c:	e7f0      	b.n	8009b70 <prvIdleTask+0x8>
 8009b8e:	bf00      	nop
 8009b90:	24004200 	.word	0x24004200
 8009b94:	e000ed04 	.word	0xe000ed04

08009b98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	607b      	str	r3, [r7, #4]
 8009ba2:	e00c      	b.n	8009bbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4413      	add	r3, r2
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	4a12      	ldr	r2, [pc, #72]	@ (8009bf8 <prvInitialiseTaskLists+0x60>)
 8009bb0:	4413      	add	r3, r2
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fe f82e 	bl	8007c14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	607b      	str	r3, [r7, #4]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2b06      	cmp	r3, #6
 8009bc2:	d9ef      	bls.n	8009ba4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009bc4:	480d      	ldr	r0, [pc, #52]	@ (8009bfc <prvInitialiseTaskLists+0x64>)
 8009bc6:	f7fe f825 	bl	8007c14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009bca:	480d      	ldr	r0, [pc, #52]	@ (8009c00 <prvInitialiseTaskLists+0x68>)
 8009bcc:	f7fe f822 	bl	8007c14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009bd0:	480c      	ldr	r0, [pc, #48]	@ (8009c04 <prvInitialiseTaskLists+0x6c>)
 8009bd2:	f7fe f81f 	bl	8007c14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009bd6:	480c      	ldr	r0, [pc, #48]	@ (8009c08 <prvInitialiseTaskLists+0x70>)
 8009bd8:	f7fe f81c 	bl	8007c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009bdc:	480b      	ldr	r0, [pc, #44]	@ (8009c0c <prvInitialiseTaskLists+0x74>)
 8009bde:	f7fe f819 	bl	8007c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009be2:	4b0b      	ldr	r3, [pc, #44]	@ (8009c10 <prvInitialiseTaskLists+0x78>)
 8009be4:	4a05      	ldr	r2, [pc, #20]	@ (8009bfc <prvInitialiseTaskLists+0x64>)
 8009be6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009be8:	4b0a      	ldr	r3, [pc, #40]	@ (8009c14 <prvInitialiseTaskLists+0x7c>)
 8009bea:	4a05      	ldr	r2, [pc, #20]	@ (8009c00 <prvInitialiseTaskLists+0x68>)
 8009bec:	601a      	str	r2, [r3, #0]
}
 8009bee:	bf00      	nop
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	24004200 	.word	0x24004200
 8009bfc:	2400428c 	.word	0x2400428c
 8009c00:	240042a0 	.word	0x240042a0
 8009c04:	240042bc 	.word	0x240042bc
 8009c08:	240042d0 	.word	0x240042d0
 8009c0c:	240042e8 	.word	0x240042e8
 8009c10:	240042b4 	.word	0x240042b4
 8009c14:	240042b8 	.word	0x240042b8

08009c18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c1e:	e019      	b.n	8009c54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c20:	f7fe f9da 	bl	8007fd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c24:	4b10      	ldr	r3, [pc, #64]	@ (8009c68 <prvCheckTasksWaitingTermination+0x50>)
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7fe f879 	bl	8007d28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c36:	4b0d      	ldr	r3, [pc, #52]	@ (8009c6c <prvCheckTasksWaitingTermination+0x54>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8009c6c <prvCheckTasksWaitingTermination+0x54>)
 8009c3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c40:	4b0b      	ldr	r3, [pc, #44]	@ (8009c70 <prvCheckTasksWaitingTermination+0x58>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	4a0a      	ldr	r2, [pc, #40]	@ (8009c70 <prvCheckTasksWaitingTermination+0x58>)
 8009c48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009c4a:	f7fe f9f7 	bl	800803c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f810 	bl	8009c74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c54:	4b06      	ldr	r3, [pc, #24]	@ (8009c70 <prvCheckTasksWaitingTermination+0x58>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1e1      	bne.n	8009c20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c5c:	bf00      	nop
 8009c5e:	bf00      	nop
 8009c60:	3708      	adds	r7, #8
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	240042d0 	.word	0x240042d0
 8009c6c:	240042fc 	.word	0x240042fc
 8009c70:	240042e4 	.word	0x240042e4

08009c74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	334c      	adds	r3, #76	@ 0x4c
 8009c80:	4618      	mov	r0, r3
 8009c82:	f00d fdb3 	bl	80177ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d108      	bne.n	8009ca2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7fd fe9d 	bl	80079d4 <vPortFree>
				vPortFree( pxTCB );
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7fd fe9a 	bl	80079d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ca0:	e019      	b.n	8009cd6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d103      	bne.n	8009cb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7fd fe91 	bl	80079d4 <vPortFree>
	}
 8009cb2:	e010      	b.n	8009cd6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d00b      	beq.n	8009cd6 <prvDeleteTCB+0x62>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	60fb      	str	r3, [r7, #12]
}
 8009cd0:	bf00      	nop
 8009cd2:	bf00      	nop
 8009cd4:	e7fd      	b.n	8009cd2 <prvDeleteTCB+0x5e>
	}
 8009cd6:	bf00      	nop
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
	...

08009ce0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8009d18 <prvResetNextTaskUnblockTime+0x38>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d104      	bne.n	8009cfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8009d1c <prvResetNextTaskUnblockTime+0x3c>)
 8009cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009cf8:	e008      	b.n	8009d0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cfa:	4b07      	ldr	r3, [pc, #28]	@ (8009d18 <prvResetNextTaskUnblockTime+0x38>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	4a04      	ldr	r2, [pc, #16]	@ (8009d1c <prvResetNextTaskUnblockTime+0x3c>)
 8009d0a:	6013      	str	r3, [r2, #0]
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	240042b4 	.word	0x240042b4
 8009d1c:	2400431c 	.word	0x2400431c

08009d20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d26:	4b0b      	ldr	r3, [pc, #44]	@ (8009d54 <xTaskGetSchedulerState+0x34>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d102      	bne.n	8009d34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	607b      	str	r3, [r7, #4]
 8009d32:	e008      	b.n	8009d46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d34:	4b08      	ldr	r3, [pc, #32]	@ (8009d58 <xTaskGetSchedulerState+0x38>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d102      	bne.n	8009d42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	607b      	str	r3, [r7, #4]
 8009d40:	e001      	b.n	8009d46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d42:	2300      	movs	r3, #0
 8009d44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d46:	687b      	ldr	r3, [r7, #4]
	}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	24004308 	.word	0x24004308
 8009d58:	24004324 	.word	0x24004324

08009d5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d05e      	beq.n	8009e30 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d76:	4b31      	ldr	r3, [pc, #196]	@ (8009e3c <xTaskPriorityInherit+0xe0>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d24e      	bcs.n	8009e1e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	db06      	blt.n	8009d96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d88:	4b2c      	ldr	r3, [pc, #176]	@ (8009e3c <xTaskPriorityInherit+0xe0>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d8e:	f1c3 0207 	rsb	r2, r3, #7
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	6959      	ldr	r1, [r3, #20]
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d9e:	4613      	mov	r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4a26      	ldr	r2, [pc, #152]	@ (8009e40 <xTaskPriorityInherit+0xe4>)
 8009da8:	4413      	add	r3, r2
 8009daa:	4299      	cmp	r1, r3
 8009dac:	d12f      	bne.n	8009e0e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	3304      	adds	r3, #4
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fd ffb8 	bl	8007d28 <uxListRemove>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10a      	bne.n	8009dd4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc8:	43da      	mvns	r2, r3
 8009dca:	4b1e      	ldr	r3, [pc, #120]	@ (8009e44 <xTaskPriorityInherit+0xe8>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4013      	ands	r3, r2
 8009dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8009e44 <xTaskPriorityInherit+0xe8>)
 8009dd2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009dd4:	4b19      	ldr	r3, [pc, #100]	@ (8009e3c <xTaskPriorityInherit+0xe0>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de2:	2201      	movs	r2, #1
 8009de4:	409a      	lsls	r2, r3
 8009de6:	4b17      	ldr	r3, [pc, #92]	@ (8009e44 <xTaskPriorityInherit+0xe8>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	4a15      	ldr	r2, [pc, #84]	@ (8009e44 <xTaskPriorityInherit+0xe8>)
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009df4:	4613      	mov	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	4413      	add	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4a10      	ldr	r2, [pc, #64]	@ (8009e40 <xTaskPriorityInherit+0xe4>)
 8009dfe:	441a      	add	r2, r3
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	3304      	adds	r3, #4
 8009e04:	4619      	mov	r1, r3
 8009e06:	4610      	mov	r0, r2
 8009e08:	f7fd ff31 	bl	8007c6e <vListInsertEnd>
 8009e0c:	e004      	b.n	8009e18 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e3c <xTaskPriorityInherit+0xe0>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	60fb      	str	r3, [r7, #12]
 8009e1c:	e008      	b.n	8009e30 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e22:	4b06      	ldr	r3, [pc, #24]	@ (8009e3c <xTaskPriorityInherit+0xe0>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d201      	bcs.n	8009e30 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e30:	68fb      	ldr	r3, [r7, #12]
	}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	240041fc 	.word	0x240041fc
 8009e40:	24004200 	.word	0x24004200
 8009e44:	24004304 	.word	0x24004304

08009e48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b086      	sub	sp, #24
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e54:	2300      	movs	r3, #0
 8009e56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d070      	beq.n	8009f40 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8009f4c <xTaskPriorityDisinherit+0x104>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d00b      	beq.n	8009e80 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	60fb      	str	r3, [r7, #12]
}
 8009e7a:	bf00      	nop
 8009e7c:	bf00      	nop
 8009e7e:	e7fd      	b.n	8009e7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10b      	bne.n	8009ea0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	60bb      	str	r3, [r7, #8]
}
 8009e9a:	bf00      	nop
 8009e9c:	bf00      	nop
 8009e9e:	e7fd      	b.n	8009e9c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ea4:	1e5a      	subs	r2, r3, #1
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d044      	beq.n	8009f40 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d140      	bne.n	8009f40 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fd ff30 	bl	8007d28 <uxListRemove>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d115      	bne.n	8009efa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ed2:	491f      	ldr	r1, [pc, #124]	@ (8009f50 <xTaskPriorityDisinherit+0x108>)
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	440b      	add	r3, r1
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10a      	bne.n	8009efa <xTaskPriorityDisinherit+0xb2>
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee8:	2201      	movs	r2, #1
 8009eea:	fa02 f303 	lsl.w	r3, r2, r3
 8009eee:	43da      	mvns	r2, r3
 8009ef0:	4b18      	ldr	r3, [pc, #96]	@ (8009f54 <xTaskPriorityDisinherit+0x10c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	4a17      	ldr	r2, [pc, #92]	@ (8009f54 <xTaskPriorityDisinherit+0x10c>)
 8009ef8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f06:	f1c3 0207 	rsb	r2, r3, #7
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f12:	2201      	movs	r2, #1
 8009f14:	409a      	lsls	r2, r3
 8009f16:	4b0f      	ldr	r3, [pc, #60]	@ (8009f54 <xTaskPriorityDisinherit+0x10c>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8009f54 <xTaskPriorityDisinherit+0x10c>)
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f24:	4613      	mov	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4413      	add	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4a08      	ldr	r2, [pc, #32]	@ (8009f50 <xTaskPriorityDisinherit+0x108>)
 8009f2e:	441a      	add	r2, r3
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	3304      	adds	r3, #4
 8009f34:	4619      	mov	r1, r3
 8009f36:	4610      	mov	r0, r2
 8009f38:	f7fd fe99 	bl	8007c6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f40:	697b      	ldr	r3, [r7, #20]
	}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3718      	adds	r7, #24
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	240041fc 	.word	0x240041fc
 8009f50:	24004200 	.word	0x24004200
 8009f54:	24004304 	.word	0x24004304

08009f58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b088      	sub	sp, #32
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009f66:	2301      	movs	r3, #1
 8009f68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d079      	beq.n	800a064 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10b      	bne.n	8009f90 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	60fb      	str	r3, [r7, #12]
}
 8009f8a:	bf00      	nop
 8009f8c:	bf00      	nop
 8009f8e:	e7fd      	b.n	8009f8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f94:	683a      	ldr	r2, [r7, #0]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d902      	bls.n	8009fa0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	61fb      	str	r3, [r7, #28]
 8009f9e:	e002      	b.n	8009fa6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fa4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009faa:	69fa      	ldr	r2, [r7, #28]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d059      	beq.n	800a064 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fb4:	697a      	ldr	r2, [r7, #20]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d154      	bne.n	800a064 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009fba:	4b2c      	ldr	r3, [pc, #176]	@ (800a06c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	69ba      	ldr	r2, [r7, #24]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d10b      	bne.n	8009fdc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	60bb      	str	r3, [r7, #8]
}
 8009fd6:	bf00      	nop
 8009fd8:	bf00      	nop
 8009fda:	e7fd      	b.n	8009fd8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	69fa      	ldr	r2, [r7, #28]
 8009fe6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	db04      	blt.n	8009ffa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	f1c3 0207 	rsb	r2, r3, #7
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	6959      	ldr	r1, [r3, #20]
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	4613      	mov	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4a19      	ldr	r2, [pc, #100]	@ (800a070 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a00a:	4413      	add	r3, r2
 800a00c:	4299      	cmp	r1, r3
 800a00e:	d129      	bne.n	800a064 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	3304      	adds	r3, #4
 800a014:	4618      	mov	r0, r3
 800a016:	f7fd fe87 	bl	8007d28 <uxListRemove>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10a      	bne.n	800a036 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a024:	2201      	movs	r2, #1
 800a026:	fa02 f303 	lsl.w	r3, r2, r3
 800a02a:	43da      	mvns	r2, r3
 800a02c:	4b11      	ldr	r3, [pc, #68]	@ (800a074 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4013      	ands	r3, r2
 800a032:	4a10      	ldr	r2, [pc, #64]	@ (800a074 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a034:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a03a:	2201      	movs	r2, #1
 800a03c:	409a      	lsls	r2, r3
 800a03e:	4b0d      	ldr	r3, [pc, #52]	@ (800a074 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4313      	orrs	r3, r2
 800a044:	4a0b      	ldr	r2, [pc, #44]	@ (800a074 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a04c:	4613      	mov	r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	4413      	add	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4a06      	ldr	r2, [pc, #24]	@ (800a070 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a056:	441a      	add	r2, r3
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	3304      	adds	r3, #4
 800a05c:	4619      	mov	r1, r3
 800a05e:	4610      	mov	r0, r2
 800a060:	f7fd fe05 	bl	8007c6e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a064:	bf00      	nop
 800a066:	3720      	adds	r7, #32
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	240041fc 	.word	0x240041fc
 800a070:	24004200 	.word	0x24004200
 800a074:	24004304 	.word	0x24004304

0800a078 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a078:	b480      	push	{r7}
 800a07a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a07c:	4b07      	ldr	r3, [pc, #28]	@ (800a09c <pvTaskIncrementMutexHeldCount+0x24>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d004      	beq.n	800a08e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a084:	4b05      	ldr	r3, [pc, #20]	@ (800a09c <pvTaskIncrementMutexHeldCount+0x24>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a08a:	3201      	adds	r2, #1
 800a08c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800a08e:	4b03      	ldr	r3, [pc, #12]	@ (800a09c <pvTaskIncrementMutexHeldCount+0x24>)
 800a090:	681b      	ldr	r3, [r3, #0]
	}
 800a092:	4618      	mov	r0, r3
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	240041fc 	.word	0x240041fc

0800a0a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0aa:	4b29      	ldr	r3, [pc, #164]	@ (800a150 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0b0:	4b28      	ldr	r3, [pc, #160]	@ (800a154 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fd fe36 	bl	8007d28 <uxListRemove>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10b      	bne.n	800a0da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a0c2:	4b24      	ldr	r3, [pc, #144]	@ (800a154 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ce:	43da      	mvns	r2, r3
 800a0d0:	4b21      	ldr	r3, [pc, #132]	@ (800a158 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	4a20      	ldr	r2, [pc, #128]	@ (800a158 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a0d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e0:	d10a      	bne.n	800a0f8 <prvAddCurrentTaskToDelayedList+0x58>
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d007      	beq.n	800a0f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a154 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3304      	adds	r3, #4
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	481a      	ldr	r0, [pc, #104]	@ (800a15c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a0f2:	f7fd fdbc 	bl	8007c6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0f6:	e026      	b.n	800a146 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a100:	4b14      	ldr	r3, [pc, #80]	@ (800a154 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d209      	bcs.n	800a124 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a110:	4b13      	ldr	r3, [pc, #76]	@ (800a160 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	4b0f      	ldr	r3, [pc, #60]	@ (800a154 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	3304      	adds	r3, #4
 800a11a:	4619      	mov	r1, r3
 800a11c:	4610      	mov	r0, r2
 800a11e:	f7fd fdca 	bl	8007cb6 <vListInsert>
}
 800a122:	e010      	b.n	800a146 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a124:	4b0f      	ldr	r3, [pc, #60]	@ (800a164 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	4b0a      	ldr	r3, [pc, #40]	@ (800a154 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3304      	adds	r3, #4
 800a12e:	4619      	mov	r1, r3
 800a130:	4610      	mov	r0, r2
 800a132:	f7fd fdc0 	bl	8007cb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a136:	4b0c      	ldr	r3, [pc, #48]	@ (800a168 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d202      	bcs.n	800a146 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a140:	4a09      	ldr	r2, [pc, #36]	@ (800a168 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	6013      	str	r3, [r2, #0]
}
 800a146:	bf00      	nop
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	24004300 	.word	0x24004300
 800a154:	240041fc 	.word	0x240041fc
 800a158:	24004304 	.word	0x24004304
 800a15c:	240042e8 	.word	0x240042e8
 800a160:	240042b8 	.word	0x240042b8
 800a164:	240042b4 	.word	0x240042b4
 800a168:	2400431c 	.word	0x2400431c

0800a16c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	4603      	mov	r3, r0
 800a174:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a17a:	021b      	lsls	r3, r3, #8
 800a17c:	b21a      	sxth	r2, r3
 800a17e:	88fb      	ldrh	r3, [r7, #6]
 800a180:	0a1b      	lsrs	r3, r3, #8
 800a182:	b29b      	uxth	r3, r3
 800a184:	b21b      	sxth	r3, r3
 800a186:	4313      	orrs	r3, r2
 800a188:	b21b      	sxth	r3, r3
 800a18a:	b29b      	uxth	r3, r3
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	061a      	lsls	r2, r3, #24
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	021b      	lsls	r3, r3, #8
 800a1a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a1ac:	431a      	orrs	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	0a1b      	lsrs	r3, r3, #8
 800a1b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a1b6:	431a      	orrs	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	0e1b      	lsrs	r3, r3, #24
 800a1bc:	4313      	orrs	r3, r2
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	370c      	adds	r7, #12
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
	...

0800a1cc <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800a1d0:	4b20      	ldr	r3, [pc, #128]	@ (800a254 <dhcp_inc_pcb_refcount+0x88>)
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d133      	bne.n	800a240 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800a1d8:	4b1f      	ldr	r3, [pc, #124]	@ (800a258 <dhcp_inc_pcb_refcount+0x8c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d005      	beq.n	800a1ec <dhcp_inc_pcb_refcount+0x20>
 800a1e0:	4b1e      	ldr	r3, [pc, #120]	@ (800a25c <dhcp_inc_pcb_refcount+0x90>)
 800a1e2:	22e5      	movs	r2, #229	@ 0xe5
 800a1e4:	491e      	ldr	r1, [pc, #120]	@ (800a260 <dhcp_inc_pcb_refcount+0x94>)
 800a1e6:	481f      	ldr	r0, [pc, #124]	@ (800a264 <dhcp_inc_pcb_refcount+0x98>)
 800a1e8:	f00d f990 	bl	801750c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800a1ec:	f00d f846 	bl	801727c <udp_new>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	4a19      	ldr	r2, [pc, #100]	@ (800a258 <dhcp_inc_pcb_refcount+0x8c>)
 800a1f4:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800a1f6:	4b18      	ldr	r3, [pc, #96]	@ (800a258 <dhcp_inc_pcb_refcount+0x8c>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d102      	bne.n	800a204 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800a1fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a202:	e024      	b.n	800a24e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800a204:	4b14      	ldr	r3, [pc, #80]	@ (800a258 <dhcp_inc_pcb_refcount+0x8c>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	7a5a      	ldrb	r2, [r3, #9]
 800a20a:	4b13      	ldr	r3, [pc, #76]	@ (800a258 <dhcp_inc_pcb_refcount+0x8c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f042 0220 	orr.w	r2, r2, #32
 800a212:	b2d2      	uxtb	r2, r2
 800a214:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800a216:	4b10      	ldr	r3, [pc, #64]	@ (800a258 <dhcp_inc_pcb_refcount+0x8c>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2244      	movs	r2, #68	@ 0x44
 800a21c:	4912      	ldr	r1, [pc, #72]	@ (800a268 <dhcp_inc_pcb_refcount+0x9c>)
 800a21e:	4618      	mov	r0, r3
 800a220:	f00c fed4 	bl	8016fcc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800a224:	4b0c      	ldr	r3, [pc, #48]	@ (800a258 <dhcp_inc_pcb_refcount+0x8c>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2243      	movs	r2, #67	@ 0x43
 800a22a:	490f      	ldr	r1, [pc, #60]	@ (800a268 <dhcp_inc_pcb_refcount+0x9c>)
 800a22c:	4618      	mov	r0, r3
 800a22e:	f00c ff55 	bl	80170dc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800a232:	4b09      	ldr	r3, [pc, #36]	@ (800a258 <dhcp_inc_pcb_refcount+0x8c>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2200      	movs	r2, #0
 800a238:	490c      	ldr	r1, [pc, #48]	@ (800a26c <dhcp_inc_pcb_refcount+0xa0>)
 800a23a:	4618      	mov	r0, r3
 800a23c:	f00c ffbc 	bl	80171b8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800a240:	4b04      	ldr	r3, [pc, #16]	@ (800a254 <dhcp_inc_pcb_refcount+0x88>)
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	3301      	adds	r3, #1
 800a246:	b2da      	uxtb	r2, r3
 800a248:	4b02      	ldr	r3, [pc, #8]	@ (800a254 <dhcp_inc_pcb_refcount+0x88>)
 800a24a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	24004360 	.word	0x24004360
 800a258:	2400435c 	.word	0x2400435c
 800a25c:	0801860c 	.word	0x0801860c
 800a260:	08018670 	.word	0x08018670
 800a264:	08018698 	.word	0x08018698
 800a268:	0801b82c 	.word	0x0801b82c
 800a26c:	0800bb99 	.word	0x0800bb99

0800a270 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800a274:	4b0e      	ldr	r3, [pc, #56]	@ (800a2b0 <dhcp_dec_pcb_refcount+0x40>)
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d105      	bne.n	800a288 <dhcp_dec_pcb_refcount+0x18>
 800a27c:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b4 <dhcp_dec_pcb_refcount+0x44>)
 800a27e:	22ff      	movs	r2, #255	@ 0xff
 800a280:	490d      	ldr	r1, [pc, #52]	@ (800a2b8 <dhcp_dec_pcb_refcount+0x48>)
 800a282:	480e      	ldr	r0, [pc, #56]	@ (800a2bc <dhcp_dec_pcb_refcount+0x4c>)
 800a284:	f00d f942 	bl	801750c <iprintf>
  dhcp_pcb_refcount--;
 800a288:	4b09      	ldr	r3, [pc, #36]	@ (800a2b0 <dhcp_dec_pcb_refcount+0x40>)
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	3b01      	subs	r3, #1
 800a28e:	b2da      	uxtb	r2, r3
 800a290:	4b07      	ldr	r3, [pc, #28]	@ (800a2b0 <dhcp_dec_pcb_refcount+0x40>)
 800a292:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800a294:	4b06      	ldr	r3, [pc, #24]	@ (800a2b0 <dhcp_dec_pcb_refcount+0x40>)
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d107      	bne.n	800a2ac <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800a29c:	4b08      	ldr	r3, [pc, #32]	@ (800a2c0 <dhcp_dec_pcb_refcount+0x50>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f00c ffa9 	bl	80171f8 <udp_remove>
    dhcp_pcb = NULL;
 800a2a6:	4b06      	ldr	r3, [pc, #24]	@ (800a2c0 <dhcp_dec_pcb_refcount+0x50>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	601a      	str	r2, [r3, #0]
  }
}
 800a2ac:	bf00      	nop
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	24004360 	.word	0x24004360
 800a2b4:	0801860c 	.word	0x0801860c
 800a2b8:	080186c0 	.word	0x080186c0
 800a2bc:	08018698 	.word	0x08018698
 800a2c0:	2400435c 	.word	0x2400435c

0800a2c4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800a2d2:	210c      	movs	r1, #12
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f001 f871 	bl	800b3bc <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800a2da:	4b06      	ldr	r3, [pc, #24]	@ (800a2f4 <dhcp_handle_nak+0x30>)
 800a2dc:	4a05      	ldr	r2, [pc, #20]	@ (800a2f4 <dhcp_handle_nak+0x30>)
 800a2de:	4905      	ldr	r1, [pc, #20]	@ (800a2f4 <dhcp_handle_nak+0x30>)
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f005 fc51 	bl	800fb88 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 fc6a 	bl	800abc0 <dhcp_discover>
}
 800a2ec:	bf00      	nop
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	0801b82c 	.word	0x0801b82c

0800a2f8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a304:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800a306:	2108      	movs	r1, #8
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f001 f857 	bl	800b3bc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	331c      	adds	r3, #28
 800a312:	2200      	movs	r2, #0
 800a314:	4619      	mov	r1, r3
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f002 fe76 	bl	800d008 <etharp_query>
 800a31c:	4603      	mov	r3, r0
 800a31e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	799b      	ldrb	r3, [r3, #6]
 800a324:	2bff      	cmp	r3, #255	@ 0xff
 800a326:	d005      	beq.n	800a334 <dhcp_check+0x3c>
    dhcp->tries++;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	799b      	ldrb	r3, [r3, #6]
 800a32c:	3301      	adds	r3, #1
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800a334:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a338:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800a33a:	893b      	ldrh	r3, [r7, #8]
 800a33c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800a340:	4a06      	ldr	r2, [pc, #24]	@ (800a35c <dhcp_check+0x64>)
 800a342:	fb82 1203 	smull	r1, r2, r2, r3
 800a346:	1152      	asrs	r2, r2, #5
 800a348:	17db      	asrs	r3, r3, #31
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800a352:	bf00      	nop
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	10624dd3 	.word	0x10624dd3

0800a360 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a36e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800a370:	4b0c      	ldr	r3, [pc, #48]	@ (800a3a4 <dhcp_handle_offer+0x44>)
 800a372:	789b      	ldrb	r3, [r3, #2]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d011      	beq.n	800a39c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800a37e:	4b0a      	ldr	r3, [pc, #40]	@ (800a3a8 <dhcp_handle_offer+0x48>)
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	4618      	mov	r0, r3
 800a384:	f7ff ff08 	bl	800a198 <lwip_htonl>
 800a388:	4602      	mov	r2, r0
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	691a      	ldr	r2, [r3, #16]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f808 	bl	800a3ac <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800a39c:	bf00      	nop
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	24004350 	.word	0x24004350
 800a3a8:	24004328 	.word	0x24004328

0800a3ac <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800a3ac:	b5b0      	push	{r4, r5, r7, lr}
 800a3ae:	b08a      	sub	sp, #40	@ 0x28
 800a3b0:	af02      	add	r7, sp, #8
 800a3b2:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d109      	bne.n	800a3ce <dhcp_select+0x22>
 800a3ba:	4b71      	ldr	r3, [pc, #452]	@ (800a580 <dhcp_select+0x1d4>)
 800a3bc:	f240 1277 	movw	r2, #375	@ 0x177
 800a3c0:	4970      	ldr	r1, [pc, #448]	@ (800a584 <dhcp_select+0x1d8>)
 800a3c2:	4871      	ldr	r0, [pc, #452]	@ (800a588 <dhcp_select+0x1dc>)
 800a3c4:	f00d f8a2 	bl	801750c <iprintf>
 800a3c8:	f06f 030f 	mvn.w	r3, #15
 800a3cc:	e0d3      	b.n	800a576 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3d2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d109      	bne.n	800a3ee <dhcp_select+0x42>
 800a3da:	4b69      	ldr	r3, [pc, #420]	@ (800a580 <dhcp_select+0x1d4>)
 800a3dc:	f240 1279 	movw	r2, #377	@ 0x179
 800a3e0:	496a      	ldr	r1, [pc, #424]	@ (800a58c <dhcp_select+0x1e0>)
 800a3e2:	4869      	ldr	r0, [pc, #420]	@ (800a588 <dhcp_select+0x1dc>)
 800a3e4:	f00d f892 	bl	801750c <iprintf>
 800a3e8:	f06f 0305 	mvn.w	r3, #5
 800a3ec:	e0c3      	b.n	800a576 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800a3ee:	2101      	movs	r1, #1
 800a3f0:	69b8      	ldr	r0, [r7, #24]
 800a3f2:	f000 ffe3 	bl	800b3bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800a3f6:	f107 030c 	add.w	r3, r7, #12
 800a3fa:	2203      	movs	r2, #3
 800a3fc:	69b9      	ldr	r1, [r7, #24]
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f001 fc98 	bl	800bd34 <dhcp_create_msg>
 800a404:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 8085 	beq.w	800a518 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a414:	89b8      	ldrh	r0, [r7, #12]
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a41c:	2302      	movs	r3, #2
 800a41e:	2239      	movs	r2, #57	@ 0x39
 800a420:	f000 ffe6 	bl	800b3f0 <dhcp_option>
 800a424:	4603      	mov	r3, r0
 800a426:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800a428:	89b8      	ldrh	r0, [r7, #12]
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a434:	461a      	mov	r2, r3
 800a436:	f001 f835 	bl	800b4a4 <dhcp_option_short>
 800a43a:	4603      	mov	r3, r0
 800a43c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800a43e:	89b8      	ldrh	r0, [r7, #12]
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a446:	2304      	movs	r3, #4
 800a448:	2232      	movs	r2, #50	@ 0x32
 800a44a:	f000 ffd1 	bl	800b3f0 <dhcp_option>
 800a44e:	4603      	mov	r3, r0
 800a450:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800a452:	89bc      	ldrh	r4, [r7, #12]
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	69db      	ldr	r3, [r3, #28]
 800a45e:	4618      	mov	r0, r3
 800a460:	f7ff fe9a 	bl	800a198 <lwip_htonl>
 800a464:	4603      	mov	r3, r0
 800a466:	461a      	mov	r2, r3
 800a468:	4629      	mov	r1, r5
 800a46a:	4620      	mov	r0, r4
 800a46c:	f001 f84c 	bl	800b508 <dhcp_option_long>
 800a470:	4603      	mov	r3, r0
 800a472:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800a474:	89b8      	ldrh	r0, [r7, #12]
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a47c:	2304      	movs	r3, #4
 800a47e:	2236      	movs	r2, #54	@ 0x36
 800a480:	f000 ffb6 	bl	800b3f0 <dhcp_option>
 800a484:	4603      	mov	r3, r0
 800a486:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800a488:	89bc      	ldrh	r4, [r7, #12]
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	4618      	mov	r0, r3
 800a496:	f7ff fe7f 	bl	800a198 <lwip_htonl>
 800a49a:	4603      	mov	r3, r0
 800a49c:	461a      	mov	r2, r3
 800a49e:	4629      	mov	r1, r5
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f001 f831 	bl	800b508 <dhcp_option_long>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800a4aa:	89b8      	ldrh	r0, [r7, #12]
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a4b2:	2304      	movs	r3, #4
 800a4b4:	2237      	movs	r2, #55	@ 0x37
 800a4b6:	f000 ff9b 	bl	800b3f0 <dhcp_option>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a4be:	2300      	movs	r3, #0
 800a4c0:	77bb      	strb	r3, [r7, #30]
 800a4c2:	e00e      	b.n	800a4e2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800a4c4:	89b8      	ldrh	r0, [r7, #12]
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a4cc:	7fbb      	ldrb	r3, [r7, #30]
 800a4ce:	4a30      	ldr	r2, [pc, #192]	@ (800a590 <dhcp_select+0x1e4>)
 800a4d0:	5cd3      	ldrb	r3, [r2, r3]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	f000 ffc0 	bl	800b458 <dhcp_option_byte>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a4dc:	7fbb      	ldrb	r3, [r7, #30]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	77bb      	strb	r3, [r7, #30]
 800a4e2:	7fbb      	ldrb	r3, [r7, #30]
 800a4e4:	2b03      	cmp	r3, #3
 800a4e6:	d9ed      	bls.n	800a4c4 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800a4e8:	89b8      	ldrh	r0, [r7, #12]
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	33f0      	adds	r3, #240	@ 0xf0
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	f001 fcf5 	bl	800bee0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800a4f6:	4b27      	ldr	r3, [pc, #156]	@ (800a594 <dhcp_select+0x1e8>)
 800a4f8:	6818      	ldr	r0, [r3, #0]
 800a4fa:	4b27      	ldr	r3, [pc, #156]	@ (800a598 <dhcp_select+0x1ec>)
 800a4fc:	9301      	str	r3, [sp, #4]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	2343      	movs	r3, #67	@ 0x43
 800a504:	4a25      	ldr	r2, [pc, #148]	@ (800a59c <dhcp_select+0x1f0>)
 800a506:	6979      	ldr	r1, [r7, #20]
 800a508:	f00c fc7a 	bl	8016e00 <udp_sendto_if_src>
 800a50c:	4603      	mov	r3, r0
 800a50e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800a510:	6978      	ldr	r0, [r7, #20]
 800a512:	f006 f855 	bl	80105c0 <pbuf_free>
 800a516:	e001      	b.n	800a51c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800a518:	23ff      	movs	r3, #255	@ 0xff
 800a51a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	799b      	ldrb	r3, [r3, #6]
 800a520:	2bff      	cmp	r3, #255	@ 0xff
 800a522:	d005      	beq.n	800a530 <dhcp_select+0x184>
    dhcp->tries++;
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	799b      	ldrb	r3, [r3, #6]
 800a528:	3301      	adds	r3, #1
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	799b      	ldrb	r3, [r3, #6]
 800a534:	2b05      	cmp	r3, #5
 800a536:	d80d      	bhi.n	800a554 <dhcp_select+0x1a8>
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	799b      	ldrb	r3, [r3, #6]
 800a53c:	461a      	mov	r2, r3
 800a53e:	2301      	movs	r3, #1
 800a540:	4093      	lsls	r3, r2
 800a542:	b29b      	uxth	r3, r3
 800a544:	461a      	mov	r2, r3
 800a546:	0152      	lsls	r2, r2, #5
 800a548:	1ad2      	subs	r2, r2, r3
 800a54a:	0092      	lsls	r2, r2, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	00db      	lsls	r3, r3, #3
 800a550:	b29b      	uxth	r3, r3
 800a552:	e001      	b.n	800a558 <dhcp_select+0x1ac>
 800a554:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800a558:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800a55a:	89fb      	ldrh	r3, [r7, #14]
 800a55c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800a560:	4a0f      	ldr	r2, [pc, #60]	@ (800a5a0 <dhcp_select+0x1f4>)
 800a562:	fb82 1203 	smull	r1, r2, r2, r3
 800a566:	1152      	asrs	r2, r2, #5
 800a568:	17db      	asrs	r3, r3, #31
 800a56a:	1ad3      	subs	r3, r2, r3
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800a572:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3720      	adds	r7, #32
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bdb0      	pop	{r4, r5, r7, pc}
 800a57e:	bf00      	nop
 800a580:	0801860c 	.word	0x0801860c
 800a584:	080186e4 	.word	0x080186e4
 800a588:	08018698 	.word	0x08018698
 800a58c:	08018700 	.word	0x08018700
 800a590:	24000044 	.word	0x24000044
 800a594:	2400435c 	.word	0x2400435c
 800a598:	0801b82c 	.word	0x0801b82c
 800a59c:	0801b830 	.word	0x0801b830
 800a5a0:	10624dd3 	.word	0x10624dd3

0800a5a4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800a5aa:	4b27      	ldr	r3, [pc, #156]	@ (800a648 <dhcp_coarse_tmr+0xa4>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	607b      	str	r3, [r7, #4]
 800a5b0:	e042      	b.n	800a638 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d039      	beq.n	800a632 <dhcp_coarse_tmr+0x8e>
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	795b      	ldrb	r3, [r3, #5]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d035      	beq.n	800a632 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	8a9b      	ldrh	r3, [r3, #20]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d012      	beq.n	800a5f4 <dhcp_coarse_tmr+0x50>
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	8a5b      	ldrh	r3, [r3, #18]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	825a      	strh	r2, [r3, #18]
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	8a5a      	ldrh	r2, [r3, #18]
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	8a9b      	ldrh	r3, [r3, #20]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d106      	bne.n	800a5f4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 fe4e 	bl	800b288 <dhcp_release_and_stop>
        dhcp_start(netif);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f98b 	bl	800a908 <dhcp_start>
 800a5f2:	e01e      	b.n	800a632 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	8a1b      	ldrh	r3, [r3, #16]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00b      	beq.n	800a614 <dhcp_coarse_tmr+0x70>
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	8a1b      	ldrh	r3, [r3, #16]
 800a600:	1e5a      	subs	r2, r3, #1
 800a602:	b291      	uxth	r1, r2
 800a604:	683a      	ldr	r2, [r7, #0]
 800a606:	8211      	strh	r1, [r2, #16]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d103      	bne.n	800a614 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f8c7 	bl	800a7a0 <dhcp_t2_timeout>
 800a612:	e00e      	b.n	800a632 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	89db      	ldrh	r3, [r3, #14]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00a      	beq.n	800a632 <dhcp_coarse_tmr+0x8e>
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	89db      	ldrh	r3, [r3, #14]
 800a620:	1e5a      	subs	r2, r3, #1
 800a622:	b291      	uxth	r1, r2
 800a624:	683a      	ldr	r2, [r7, #0]
 800a626:	81d1      	strh	r1, [r2, #14]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d102      	bne.n	800a632 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f888 	bl	800a742 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	607b      	str	r3, [r7, #4]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d1b9      	bne.n	800a5b2 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800a63e:	bf00      	nop
 800a640:	bf00      	nop
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	24007b60 	.word	0x24007b60

0800a64c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800a652:	4b16      	ldr	r3, [pc, #88]	@ (800a6ac <dhcp_fine_tmr+0x60>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	607b      	str	r3, [r7, #4]
 800a658:	e020      	b.n	800a69c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a65e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d017      	beq.n	800a696 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	891b      	ldrh	r3, [r3, #8]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d906      	bls.n	800a67c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	891b      	ldrh	r3, [r3, #8]
 800a672:	3b01      	subs	r3, #1
 800a674:	b29a      	uxth	r2, r3
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	811a      	strh	r2, [r3, #8]
 800a67a:	e00c      	b.n	800a696 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	891b      	ldrh	r3, [r3, #8]
 800a680:	2b01      	cmp	r3, #1
 800a682:	d108      	bne.n	800a696 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	891b      	ldrh	r3, [r3, #8]
 800a688:	3b01      	subs	r3, #1
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 f80d 	bl	800a6b0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	607b      	str	r3, [r7, #4]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1db      	bne.n	800a65a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800a6a2:	bf00      	nop
 800a6a4:	bf00      	nop
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	24007b60 	.word	0x24007b60

0800a6b0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6bc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	795b      	ldrb	r3, [r3, #5]
 800a6c2:	2b0c      	cmp	r3, #12
 800a6c4:	d003      	beq.n	800a6ce <dhcp_timeout+0x1e>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	795b      	ldrb	r3, [r3, #5]
 800a6ca:	2b06      	cmp	r3, #6
 800a6cc:	d103      	bne.n	800a6d6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fa76 	bl	800abc0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800a6d4:	e031      	b.n	800a73a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	795b      	ldrb	r3, [r3, #5]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d10e      	bne.n	800a6fc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	799b      	ldrb	r3, [r3, #6]
 800a6e2:	2b05      	cmp	r3, #5
 800a6e4:	d803      	bhi.n	800a6ee <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7ff fe60 	bl	800a3ac <dhcp_select>
}
 800a6ec:	e025      	b.n	800a73a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fdca 	bl	800b288 <dhcp_release_and_stop>
      dhcp_start(netif);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f907 	bl	800a908 <dhcp_start>
}
 800a6fa:	e01e      	b.n	800a73a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	795b      	ldrb	r3, [r3, #5]
 800a700:	2b08      	cmp	r3, #8
 800a702:	d10b      	bne.n	800a71c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	799b      	ldrb	r3, [r3, #6]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d803      	bhi.n	800a714 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f7ff fdf3 	bl	800a2f8 <dhcp_check>
}
 800a712:	e012      	b.n	800a73a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 faf5 	bl	800ad04 <dhcp_bind>
}
 800a71a:	e00e      	b.n	800a73a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	795b      	ldrb	r3, [r3, #5]
 800a720:	2b03      	cmp	r3, #3
 800a722:	d10a      	bne.n	800a73a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	799b      	ldrb	r3, [r3, #6]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d803      	bhi.n	800a734 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 fcf7 	bl	800b120 <dhcp_reboot>
}
 800a732:	e002      	b.n	800a73a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 fa43 	bl	800abc0 <dhcp_discover>
}
 800a73a:	bf00      	nop
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b084      	sub	sp, #16
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a74e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	795b      	ldrb	r3, [r3, #5]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d007      	beq.n	800a768 <dhcp_t1_timeout+0x26>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	795b      	ldrb	r3, [r3, #5]
 800a75c:	2b0a      	cmp	r3, #10
 800a75e:	d003      	beq.n	800a768 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a764:	2b05      	cmp	r3, #5
 800a766:	d117      	bne.n	800a798 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 fba5 	bl	800aeb8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	899b      	ldrh	r3, [r3, #12]
 800a772:	461a      	mov	r2, r3
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	8a5b      	ldrh	r3, [r3, #18]
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	dd0c      	ble.n	800a798 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	899b      	ldrh	r3, [r3, #12]
 800a782:	461a      	mov	r2, r3
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	8a5b      	ldrh	r3, [r3, #18]
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	da00      	bge.n	800a790 <dhcp_t1_timeout+0x4e>
 800a78e:	3301      	adds	r3, #1
 800a790:	105b      	asrs	r3, r3, #1
 800a792:	b29a      	uxth	r2, r3
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800a798:	bf00      	nop
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ac:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	795b      	ldrb	r3, [r3, #5]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d00b      	beq.n	800a7ce <dhcp_t2_timeout+0x2e>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	795b      	ldrb	r3, [r3, #5]
 800a7ba:	2b0a      	cmp	r3, #10
 800a7bc:	d007      	beq.n	800a7ce <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a7c2:	2b05      	cmp	r3, #5
 800a7c4:	d003      	beq.n	800a7ce <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	795b      	ldrb	r3, [r3, #5]
 800a7ca:	2b04      	cmp	r3, #4
 800a7cc:	d117      	bne.n	800a7fe <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fc0c 	bl	800afec <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	8a9b      	ldrh	r3, [r3, #20]
 800a7d8:	461a      	mov	r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	8a5b      	ldrh	r3, [r3, #18]
 800a7de:	1ad3      	subs	r3, r2, r3
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	dd0c      	ble.n	800a7fe <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	8a9b      	ldrh	r3, [r3, #20]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	8a5b      	ldrh	r3, [r3, #18]
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	da00      	bge.n	800a7f6 <dhcp_t2_timeout+0x56>
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	105b      	asrs	r3, r3, #1
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800a7fe:	bf00      	nop
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
	...

0800a808 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b086      	sub	sp, #24
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a816:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	2200      	movs	r2, #0
 800a81c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	2200      	movs	r2, #0
 800a822:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800a824:	4b36      	ldr	r3, [pc, #216]	@ (800a900 <dhcp_handle_ack+0xf8>)
 800a826:	78db      	ldrb	r3, [r3, #3]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800a82c:	4b35      	ldr	r3, [pc, #212]	@ (800a904 <dhcp_handle_ack+0xfc>)
 800a82e:	68da      	ldr	r2, [r3, #12]
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800a834:	4b32      	ldr	r3, [pc, #200]	@ (800a900 <dhcp_handle_ack+0xf8>)
 800a836:	791b      	ldrb	r3, [r3, #4]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d004      	beq.n	800a846 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800a83c:	4b31      	ldr	r3, [pc, #196]	@ (800a904 <dhcp_handle_ack+0xfc>)
 800a83e:	691a      	ldr	r2, [r3, #16]
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a844:	e004      	b.n	800a850 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a84a:	085a      	lsrs	r2, r3, #1
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800a850:	4b2b      	ldr	r3, [pc, #172]	@ (800a900 <dhcp_handle_ack+0xf8>)
 800a852:	795b      	ldrb	r3, [r3, #5]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d004      	beq.n	800a862 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800a858:	4b2a      	ldr	r3, [pc, #168]	@ (800a904 <dhcp_handle_ack+0xfc>)
 800a85a:	695a      	ldr	r2, [r3, #20]
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	631a      	str	r2, [r3, #48]	@ 0x30
 800a860:	e007      	b.n	800a872 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a866:	4613      	mov	r3, r2
 800a868:	00db      	lsls	r3, r3, #3
 800a86a:	1a9b      	subs	r3, r3, r2
 800a86c:	08da      	lsrs	r2, r3, #3
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	691a      	ldr	r2, [r3, #16]
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800a87a:	4b21      	ldr	r3, [pc, #132]	@ (800a900 <dhcp_handle_ack+0xf8>)
 800a87c:	799b      	ldrb	r3, [r3, #6]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00b      	beq.n	800a89a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800a882:	4b20      	ldr	r3, [pc, #128]	@ (800a904 <dhcp_handle_ack+0xfc>)
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	4618      	mov	r0, r3
 800a888:	f7ff fc86 	bl	800a198 <lwip_htonl>
 800a88c:	4602      	mov	r2, r0
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	2201      	movs	r2, #1
 800a896:	71da      	strb	r2, [r3, #7]
 800a898:	e002      	b.n	800a8a0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	2200      	movs	r2, #0
 800a89e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800a8a0:	4b17      	ldr	r3, [pc, #92]	@ (800a900 <dhcp_handle_ack+0xf8>)
 800a8a2:	79db      	ldrb	r3, [r3, #7]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d007      	beq.n	800a8b8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800a8a8:	4b16      	ldr	r3, [pc, #88]	@ (800a904 <dhcp_handle_ack+0xfc>)
 800a8aa:	69db      	ldr	r3, [r3, #28]
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7ff fc73 	bl	800a198 <lwip_htonl>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	625a      	str	r2, [r3, #36]	@ 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	75fb      	strb	r3, [r7, #23]
 800a8bc:	e013      	b.n	800a8e6 <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 800a8be:	7dfb      	ldrb	r3, [r7, #23]
 800a8c0:	3308      	adds	r3, #8
 800a8c2:	4a10      	ldr	r2, [pc, #64]	@ (800a904 <dhcp_handle_ack+0xfc>)
 800a8c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7ff fc65 	bl	800a198 <lwip_htonl>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 800a8d2:	f107 020c 	add.w	r2, r7, #12
 800a8d6:	7dfb      	ldrb	r3, [r7, #23]
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f001 fb5c 	bl	800bf98 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800a8e0:	7dfb      	ldrb	r3, [r7, #23]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	75fb      	strb	r3, [r7, #23]
 800a8e6:	7dfb      	ldrb	r3, [r7, #23]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d805      	bhi.n	800a8f8 <dhcp_handle_ack+0xf0>
 800a8ec:	7dfb      	ldrb	r3, [r7, #23]
 800a8ee:	3308      	adds	r3, #8
 800a8f0:	4a03      	ldr	r2, [pc, #12]	@ (800a900 <dhcp_handle_ack+0xf8>)
 800a8f2:	5cd3      	ldrb	r3, [r2, r3]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1e2      	bne.n	800a8be <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800a8f8:	bf00      	nop
 800a8fa:	3718      	adds	r7, #24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	24004350 	.word	0x24004350
 800a904:	24004328 	.word	0x24004328

0800a908 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d109      	bne.n	800a92a <dhcp_start+0x22>
 800a916:	4b37      	ldr	r3, [pc, #220]	@ (800a9f4 <dhcp_start+0xec>)
 800a918:	f240 22e7 	movw	r2, #743	@ 0x2e7
 800a91c:	4936      	ldr	r1, [pc, #216]	@ (800a9f8 <dhcp_start+0xf0>)
 800a91e:	4837      	ldr	r0, [pc, #220]	@ (800a9fc <dhcp_start+0xf4>)
 800a920:	f00c fdf4 	bl	801750c <iprintf>
 800a924:	f06f 030f 	mvn.w	r3, #15
 800a928:	e060      	b.n	800a9ec <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a930:	f003 0301 	and.w	r3, r3, #1
 800a934:	2b00      	cmp	r3, #0
 800a936:	d109      	bne.n	800a94c <dhcp_start+0x44>
 800a938:	4b2e      	ldr	r3, [pc, #184]	@ (800a9f4 <dhcp_start+0xec>)
 800a93a:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800a93e:	4930      	ldr	r1, [pc, #192]	@ (800aa00 <dhcp_start+0xf8>)
 800a940:	482e      	ldr	r0, [pc, #184]	@ (800a9fc <dhcp_start+0xf4>)
 800a942:	f00c fde3 	bl	801750c <iprintf>
 800a946:	f06f 030f 	mvn.w	r3, #15
 800a94a:	e04f      	b.n	800a9ec <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a950:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a956:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 800a95a:	d202      	bcs.n	800a962 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800a95c:	f04f 33ff 	mov.w	r3, #4294967295
 800a960:	e044      	b.n	800a9ec <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10d      	bne.n	800a984 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800a968:	2034      	movs	r0, #52	@ 0x34
 800a96a:	f004 fd4f 	bl	800f40c <mem_malloc>
 800a96e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d102      	bne.n	800a97c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800a976:	f04f 33ff 	mov.w	r3, #4294967295
 800a97a:	e037      	b.n	800a9ec <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	629a      	str	r2, [r3, #40]	@ 0x28
 800a982:	e005      	b.n	800a990 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	791b      	ldrb	r3, [r3, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d001      	beq.n	800a990 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800a98c:	f7ff fc70 	bl	800a270 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800a990:	2234      	movs	r2, #52	@ 0x34
 800a992:	2100      	movs	r1, #0
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f00c ff11 	bl	80177bc <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800a99a:	f7ff fc17 	bl	800a1cc <dhcp_inc_pcb_refcount>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d002      	beq.n	800a9aa <dhcp_start+0xa2>
    return ERR_MEM;
 800a9a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9a8:	e020      	b.n	800a9ec <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a9b6:	f003 0304 	and.w	r3, r3, #4
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d105      	bne.n	800a9ca <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800a9be:	2102      	movs	r1, #2
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f000 fcfb 	bl	800b3bc <dhcp_set_state>
    return ERR_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	e010      	b.n	800a9ec <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 f8f8 	bl	800abc0 <dhcp_discover>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800a9d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d005      	beq.n	800a9e8 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fc53 	bl	800b288 <dhcp_release_and_stop>
    return ERR_MEM;
 800a9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e6:	e001      	b.n	800a9ec <dhcp_start+0xe4>
  }
  return result;
 800a9e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	0801860c 	.word	0x0801860c
 800a9f8:	0801871c 	.word	0x0801871c
 800a9fc:	08018698 	.word	0x08018698
 800aa00:	08018760 	.word	0x08018760

0800aa04 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa10:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d025      	beq.n	800aa64 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	795b      	ldrb	r3, [r3, #5]
 800aa1c:	2b0a      	cmp	r3, #10
 800aa1e:	d008      	beq.n	800aa32 <dhcp_network_changed+0x2e>
 800aa20:	2b0a      	cmp	r3, #10
 800aa22:	dc0d      	bgt.n	800aa40 <dhcp_network_changed+0x3c>
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d01f      	beq.n	800aa68 <dhcp_network_changed+0x64>
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	db09      	blt.n	800aa40 <dhcp_network_changed+0x3c>
 800aa2c:	3b03      	subs	r3, #3
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d806      	bhi.n	800aa40 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fb71 	bl	800b120 <dhcp_reboot>
      break;
 800aa3e:	e014      	b.n	800aa6a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	795b      	ldrb	r3, [r3, #5]
 800aa44:	2b0c      	cmp	r3, #12
 800aa46:	d906      	bls.n	800aa56 <dhcp_network_changed+0x52>
 800aa48:	4b09      	ldr	r3, [pc, #36]	@ (800aa70 <dhcp_network_changed+0x6c>)
 800aa4a:	f240 326d 	movw	r2, #877	@ 0x36d
 800aa4e:	4909      	ldr	r1, [pc, #36]	@ (800aa74 <dhcp_network_changed+0x70>)
 800aa50:	4809      	ldr	r0, [pc, #36]	@ (800aa78 <dhcp_network_changed+0x74>)
 800aa52:	f00c fd5b 	bl	801750c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 f8af 	bl	800abc0 <dhcp_discover>
      break;
 800aa62:	e002      	b.n	800aa6a <dhcp_network_changed+0x66>
    return;
 800aa64:	bf00      	nop
 800aa66:	e000      	b.n	800aa6a <dhcp_network_changed+0x66>
      break;
 800aa68:	bf00      	nop
  }
}
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	0801860c 	.word	0x0801860c
 800aa74:	08018784 	.word	0x08018784
 800aa78:	08018698 	.word	0x08018698

0800aa7c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d107      	bne.n	800aa9c <dhcp_arp_reply+0x20>
 800aa8c:	4b0e      	ldr	r3, [pc, #56]	@ (800aac8 <dhcp_arp_reply+0x4c>)
 800aa8e:	f240 328b 	movw	r2, #907	@ 0x38b
 800aa92:	490e      	ldr	r1, [pc, #56]	@ (800aacc <dhcp_arp_reply+0x50>)
 800aa94:	480e      	ldr	r0, [pc, #56]	@ (800aad0 <dhcp_arp_reply+0x54>)
 800aa96:	f00c fd39 	bl	801750c <iprintf>
 800aa9a:	e012      	b.n	800aac2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaa0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00c      	beq.n	800aac2 <dhcp_arp_reply+0x46>
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	795b      	ldrb	r3, [r3, #5]
 800aaac:	2b08      	cmp	r3, #8
 800aaae:	d108      	bne.n	800aac2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	69db      	ldr	r3, [r3, #28]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d102      	bne.n	800aac2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 f809 	bl	800aad4 <dhcp_decline>
    }
  }
}
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	0801860c 	.word	0x0801860c
 800aacc:	0801871c 	.word	0x0801871c
 800aad0:	08018698 	.word	0x08018698

0800aad4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800aad4:	b5b0      	push	{r4, r5, r7, lr}
 800aad6:	b08a      	sub	sp, #40	@ 0x28
 800aad8:	af02      	add	r7, sp, #8
 800aada:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800aae2:	210c      	movs	r1, #12
 800aae4:	69b8      	ldr	r0, [r7, #24]
 800aae6:	f000 fc69 	bl	800b3bc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800aaea:	f107 030c 	add.w	r3, r7, #12
 800aaee:	2204      	movs	r2, #4
 800aaf0:	69b9      	ldr	r1, [r7, #24]
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f001 f91e 	bl	800bd34 <dhcp_create_msg>
 800aaf8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d035      	beq.n	800ab6c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ab06:	89b8      	ldrh	r0, [r7, #12]
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ab0e:	2304      	movs	r3, #4
 800ab10:	2232      	movs	r2, #50	@ 0x32
 800ab12:	f000 fc6d 	bl	800b3f0 <dhcp_option>
 800ab16:	4603      	mov	r3, r0
 800ab18:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ab1a:	89bc      	ldrh	r4, [r7, #12]
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	69db      	ldr	r3, [r3, #28]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7ff fb36 	bl	800a198 <lwip_htonl>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	461a      	mov	r2, r3
 800ab30:	4629      	mov	r1, r5
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 fce8 	bl	800b508 <dhcp_option_long>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ab3c:	89b8      	ldrh	r0, [r7, #12]
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	33f0      	adds	r3, #240	@ 0xf0
 800ab42:	697a      	ldr	r2, [r7, #20]
 800ab44:	4619      	mov	r1, r3
 800ab46:	f001 f9cb 	bl	800bee0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ab4a:	4b19      	ldr	r3, [pc, #100]	@ (800abb0 <dhcp_decline+0xdc>)
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	4b19      	ldr	r3, [pc, #100]	@ (800abb4 <dhcp_decline+0xe0>)
 800ab50:	9301      	str	r3, [sp, #4]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	9300      	str	r3, [sp, #0]
 800ab56:	2343      	movs	r3, #67	@ 0x43
 800ab58:	4a17      	ldr	r2, [pc, #92]	@ (800abb8 <dhcp_decline+0xe4>)
 800ab5a:	6979      	ldr	r1, [r7, #20]
 800ab5c:	f00c f950 	bl	8016e00 <udp_sendto_if_src>
 800ab60:	4603      	mov	r3, r0
 800ab62:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ab64:	6978      	ldr	r0, [r7, #20]
 800ab66:	f005 fd2b 	bl	80105c0 <pbuf_free>
 800ab6a:	e001      	b.n	800ab70 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ab6c:	23ff      	movs	r3, #255	@ 0xff
 800ab6e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	799b      	ldrb	r3, [r3, #6]
 800ab74:	2bff      	cmp	r3, #255	@ 0xff
 800ab76:	d005      	beq.n	800ab84 <dhcp_decline+0xb0>
    dhcp->tries++;
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	799b      	ldrb	r3, [r3, #6]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	b2da      	uxtb	r2, r3
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800ab84:	f242 7310 	movw	r3, #10000	@ 0x2710
 800ab88:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ab8a:	89fb      	ldrh	r3, [r7, #14]
 800ab8c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800ab90:	4a0a      	ldr	r2, [pc, #40]	@ (800abbc <dhcp_decline+0xe8>)
 800ab92:	fb82 1203 	smull	r1, r2, r2, r3
 800ab96:	1152      	asrs	r2, r2, #5
 800ab98:	17db      	asrs	r3, r3, #31
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800aba2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3720      	adds	r7, #32
 800abaa:	46bd      	mov	sp, r7
 800abac:	bdb0      	pop	{r4, r5, r7, pc}
 800abae:	bf00      	nop
 800abb0:	2400435c 	.word	0x2400435c
 800abb4:	0801b82c 	.word	0x0801b82c
 800abb8:	0801b830 	.word	0x0801b830
 800abbc:	10624dd3 	.word	0x10624dd3

0800abc0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b08a      	sub	sp, #40	@ 0x28
 800abc4:	af02      	add	r7, sp, #8
 800abc6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abcc:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	2200      	movs	r2, #0
 800abd6:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800abd8:	2106      	movs	r1, #6
 800abda:	69b8      	ldr	r0, [r7, #24]
 800abdc:	f000 fbee 	bl	800b3bc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800abe0:	f107 0308 	add.w	r3, r7, #8
 800abe4:	2201      	movs	r2, #1
 800abe6:	69b9      	ldr	r1, [r7, #24]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f001 f8a3 	bl	800bd34 <dhcp_create_msg>
 800abee:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d04b      	beq.n	800ac8e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800abfc:	8938      	ldrh	r0, [r7, #8]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ac04:	2302      	movs	r3, #2
 800ac06:	2239      	movs	r2, #57	@ 0x39
 800ac08:	f000 fbf2 	bl	800b3f0 <dhcp_option>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ac10:	8938      	ldrh	r0, [r7, #8]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	f000 fc41 	bl	800b4a4 <dhcp_option_short>
 800ac22:	4603      	mov	r3, r0
 800ac24:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ac26:	8938      	ldrh	r0, [r7, #8]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ac2e:	2304      	movs	r3, #4
 800ac30:	2237      	movs	r2, #55	@ 0x37
 800ac32:	f000 fbdd 	bl	800b3f0 <dhcp_option>
 800ac36:	4603      	mov	r3, r0
 800ac38:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	77fb      	strb	r3, [r7, #31]
 800ac3e:	e00e      	b.n	800ac5e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ac40:	8938      	ldrh	r0, [r7, #8]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ac48:	7ffb      	ldrb	r3, [r7, #31]
 800ac4a:	4a29      	ldr	r2, [pc, #164]	@ (800acf0 <dhcp_discover+0x130>)
 800ac4c:	5cd3      	ldrb	r3, [r2, r3]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	f000 fc02 	bl	800b458 <dhcp_option_byte>
 800ac54:	4603      	mov	r3, r0
 800ac56:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ac58:	7ffb      	ldrb	r3, [r7, #31]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	77fb      	strb	r3, [r7, #31]
 800ac5e:	7ffb      	ldrb	r3, [r7, #31]
 800ac60:	2b03      	cmp	r3, #3
 800ac62:	d9ed      	bls.n	800ac40 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ac64:	8938      	ldrh	r0, [r7, #8]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	33f0      	adds	r3, #240	@ 0xf0
 800ac6a:	693a      	ldr	r2, [r7, #16]
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	f001 f937 	bl	800bee0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ac72:	4b20      	ldr	r3, [pc, #128]	@ (800acf4 <dhcp_discover+0x134>)
 800ac74:	6818      	ldr	r0, [r3, #0]
 800ac76:	4b20      	ldr	r3, [pc, #128]	@ (800acf8 <dhcp_discover+0x138>)
 800ac78:	9301      	str	r3, [sp, #4]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	2343      	movs	r3, #67	@ 0x43
 800ac80:	4a1e      	ldr	r2, [pc, #120]	@ (800acfc <dhcp_discover+0x13c>)
 800ac82:	6939      	ldr	r1, [r7, #16]
 800ac84:	f00c f8bc 	bl	8016e00 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800ac88:	6938      	ldr	r0, [r7, #16]
 800ac8a:	f005 fc99 	bl	80105c0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	799b      	ldrb	r3, [r3, #6]
 800ac92:	2bff      	cmp	r3, #255	@ 0xff
 800ac94:	d005      	beq.n	800aca2 <dhcp_discover+0xe2>
    dhcp->tries++;
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	799b      	ldrb	r3, [r3, #6]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	b2da      	uxtb	r2, r3
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	799b      	ldrb	r3, [r3, #6]
 800aca6:	2b05      	cmp	r3, #5
 800aca8:	d80d      	bhi.n	800acc6 <dhcp_discover+0x106>
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	799b      	ldrb	r3, [r3, #6]
 800acae:	461a      	mov	r2, r3
 800acb0:	2301      	movs	r3, #1
 800acb2:	4093      	lsls	r3, r2
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	461a      	mov	r2, r3
 800acb8:	0152      	lsls	r2, r2, #5
 800acba:	1ad2      	subs	r2, r2, r3
 800acbc:	0092      	lsls	r2, r2, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	00db      	lsls	r3, r3, #3
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	e001      	b.n	800acca <dhcp_discover+0x10a>
 800acc6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800acca:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800accc:	897b      	ldrh	r3, [r7, #10]
 800acce:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800acd2:	4a0b      	ldr	r2, [pc, #44]	@ (800ad00 <dhcp_discover+0x140>)
 800acd4:	fb82 1203 	smull	r1, r2, r2, r3
 800acd8:	1152      	asrs	r2, r2, #5
 800acda:	17db      	asrs	r3, r3, #31
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	b29a      	uxth	r2, r3
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ace4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3720      	adds	r7, #32
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	24000044 	.word	0x24000044
 800acf4:	2400435c 	.word	0x2400435c
 800acf8:	0801b82c 	.word	0x0801b82c
 800acfc:	0801b830 	.word	0x0801b830
 800ad00:	10624dd3 	.word	0x10624dd3

0800ad04 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b088      	sub	sp, #32
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d107      	bne.n	800ad22 <dhcp_bind+0x1e>
 800ad12:	4b64      	ldr	r3, [pc, #400]	@ (800aea4 <dhcp_bind+0x1a0>)
 800ad14:	f240 4215 	movw	r2, #1045	@ 0x415
 800ad18:	4963      	ldr	r1, [pc, #396]	@ (800aea8 <dhcp_bind+0x1a4>)
 800ad1a:	4864      	ldr	r0, [pc, #400]	@ (800aeac <dhcp_bind+0x1a8>)
 800ad1c:	f00c fbf6 	bl	801750c <iprintf>
 800ad20:	e0bc      	b.n	800ae9c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad26:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d107      	bne.n	800ad3e <dhcp_bind+0x3a>
 800ad2e:	4b5d      	ldr	r3, [pc, #372]	@ (800aea4 <dhcp_bind+0x1a0>)
 800ad30:	f240 4217 	movw	r2, #1047	@ 0x417
 800ad34:	495e      	ldr	r1, [pc, #376]	@ (800aeb0 <dhcp_bind+0x1ac>)
 800ad36:	485d      	ldr	r0, [pc, #372]	@ (800aeac <dhcp_bind+0x1a8>)
 800ad38:	f00c fbe8 	bl	801750c <iprintf>
 800ad3c:	e0ae      	b.n	800ae9c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	2200      	movs	r2, #0
 800ad42:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad4c:	d019      	beq.n	800ad82 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad52:	331e      	adds	r3, #30
 800ad54:	4a57      	ldr	r2, [pc, #348]	@ (800aeb4 <dhcp_bind+0x1b0>)
 800ad56:	fba2 2303 	umull	r2, r3, r2, r3
 800ad5a:	095b      	lsrs	r3, r3, #5
 800ad5c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad64:	d302      	bcc.n	800ad6c <dhcp_bind+0x68>
      timeout = 0xffff;
 800ad66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ad6a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	b29a      	uxth	r2, r3
 800ad70:	69bb      	ldr	r3, [r7, #24]
 800ad72:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	8a9b      	ldrh	r3, [r3, #20]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d102      	bne.n	800ad82 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad8a:	d01d      	beq.n	800adc8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad90:	331e      	adds	r3, #30
 800ad92:	4a48      	ldr	r2, [pc, #288]	@ (800aeb4 <dhcp_bind+0x1b0>)
 800ad94:	fba2 2303 	umull	r2, r3, r2, r3
 800ad98:	095b      	lsrs	r3, r3, #5
 800ad9a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ada2:	d302      	bcc.n	800adaa <dhcp_bind+0xa6>
      timeout = 0xffff;
 800ada4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ada8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	b29a      	uxth	r2, r3
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	895b      	ldrh	r3, [r3, #10]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d102      	bne.n	800adc0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	2201      	movs	r2, #1
 800adbe:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	895a      	ldrh	r2, [r3, #10]
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add0:	d01d      	beq.n	800ae0e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800add6:	331e      	adds	r3, #30
 800add8:	4a36      	ldr	r2, [pc, #216]	@ (800aeb4 <dhcp_bind+0x1b0>)
 800adda:	fba2 2303 	umull	r2, r3, r2, r3
 800adde:	095b      	lsrs	r3, r3, #5
 800ade0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ade8:	d302      	bcc.n	800adf0 <dhcp_bind+0xec>
      timeout = 0xffff;
 800adea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800adee:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	899b      	ldrh	r3, [r3, #12]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d102      	bne.n	800ae06 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	2201      	movs	r2, #1
 800ae04:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	899a      	ldrh	r2, [r3, #12]
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	895a      	ldrh	r2, [r3, #10]
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	899b      	ldrh	r3, [r3, #12]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d306      	bcc.n	800ae28 <dhcp_bind+0x124>
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	899b      	ldrh	r3, [r3, #12]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d002      	beq.n	800ae28 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	2200      	movs	r2, #0
 800ae26:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800ae28:	69bb      	ldr	r3, [r7, #24]
 800ae2a:	79db      	ldrb	r3, [r3, #7]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d003      	beq.n	800ae38 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	6a1b      	ldr	r3, [r3, #32]
 800ae34:	613b      	str	r3, [r7, #16]
 800ae36:	e014      	b.n	800ae62 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	331c      	adds	r3, #28
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800ae40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	db02      	blt.n	800ae4e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800ae48:	23ff      	movs	r3, #255	@ 0xff
 800ae4a:	613b      	str	r3, [r7, #16]
 800ae4c:	e009      	b.n	800ae62 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800ae4e:	7dfb      	ldrb	r3, [r7, #23]
 800ae50:	2bbf      	cmp	r3, #191	@ 0xbf
 800ae52:	d903      	bls.n	800ae5c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800ae54:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800ae58:	613b      	str	r3, [r7, #16]
 800ae5a:	e002      	b.n	800ae62 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800ae5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae60:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae66:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d108      	bne.n	800ae80 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	69da      	ldr	r2, [r3, #28]
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	4013      	ands	r3, r2
 800ae76:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ae7e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800ae80:	210a      	movs	r1, #10
 800ae82:	69b8      	ldr	r0, [r7, #24]
 800ae84:	f000 fa9a 	bl	800b3bc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	f103 011c 	add.w	r1, r3, #28
 800ae8e:	f107 030c 	add.w	r3, r7, #12
 800ae92:	f107 0210 	add.w	r2, r7, #16
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f004 fe76 	bl	800fb88 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800ae9c:	3720      	adds	r7, #32
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	0801860c 	.word	0x0801860c
 800aea8:	08018798 	.word	0x08018798
 800aeac:	08018698 	.word	0x08018698
 800aeb0:	080187b4 	.word	0x080187b4
 800aeb4:	88888889 	.word	0x88888889

0800aeb8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b08a      	sub	sp, #40	@ 0x28
 800aebc:	af02      	add	r7, sp, #8
 800aebe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aec4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800aec6:	2105      	movs	r1, #5
 800aec8:	69b8      	ldr	r0, [r7, #24]
 800aeca:	f000 fa77 	bl	800b3bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800aece:	f107 030c 	add.w	r3, r7, #12
 800aed2:	2203      	movs	r2, #3
 800aed4:	69b9      	ldr	r1, [r7, #24]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 ff2c 	bl	800bd34 <dhcp_create_msg>
 800aedc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d04e      	beq.n	800af82 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800aeea:	89b8      	ldrh	r0, [r7, #12]
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800aef2:	2302      	movs	r3, #2
 800aef4:	2239      	movs	r2, #57	@ 0x39
 800aef6:	f000 fa7b 	bl	800b3f0 <dhcp_option>
 800aefa:	4603      	mov	r3, r0
 800aefc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800aefe:	89b8      	ldrh	r0, [r7, #12]
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800af0a:	461a      	mov	r2, r3
 800af0c:	f000 faca 	bl	800b4a4 <dhcp_option_short>
 800af10:	4603      	mov	r3, r0
 800af12:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800af14:	89b8      	ldrh	r0, [r7, #12]
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800af1c:	2304      	movs	r3, #4
 800af1e:	2237      	movs	r2, #55	@ 0x37
 800af20:	f000 fa66 	bl	800b3f0 <dhcp_option>
 800af24:	4603      	mov	r3, r0
 800af26:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800af28:	2300      	movs	r3, #0
 800af2a:	77bb      	strb	r3, [r7, #30]
 800af2c:	e00e      	b.n	800af4c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800af2e:	89b8      	ldrh	r0, [r7, #12]
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800af36:	7fbb      	ldrb	r3, [r7, #30]
 800af38:	4a29      	ldr	r2, [pc, #164]	@ (800afe0 <dhcp_renew+0x128>)
 800af3a:	5cd3      	ldrb	r3, [r2, r3]
 800af3c:	461a      	mov	r2, r3
 800af3e:	f000 fa8b 	bl	800b458 <dhcp_option_byte>
 800af42:	4603      	mov	r3, r0
 800af44:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800af46:	7fbb      	ldrb	r3, [r7, #30]
 800af48:	3301      	adds	r3, #1
 800af4a:	77bb      	strb	r3, [r7, #30]
 800af4c:	7fbb      	ldrb	r3, [r7, #30]
 800af4e:	2b03      	cmp	r3, #3
 800af50:	d9ed      	bls.n	800af2e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800af52:	89b8      	ldrh	r0, [r7, #12]
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	33f0      	adds	r3, #240	@ 0xf0
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	4619      	mov	r1, r3
 800af5c:	f000 ffc0 	bl	800bee0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800af60:	4b20      	ldr	r3, [pc, #128]	@ (800afe4 <dhcp_renew+0x12c>)
 800af62:	6818      	ldr	r0, [r3, #0]
 800af64:	69bb      	ldr	r3, [r7, #24]
 800af66:	f103 0218 	add.w	r2, r3, #24
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	2343      	movs	r3, #67	@ 0x43
 800af70:	6979      	ldr	r1, [r7, #20]
 800af72:	f00b fed1 	bl	8016d18 <udp_sendto_if>
 800af76:	4603      	mov	r3, r0
 800af78:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800af7a:	6978      	ldr	r0, [r7, #20]
 800af7c:	f005 fb20 	bl	80105c0 <pbuf_free>
 800af80:	e001      	b.n	800af86 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800af82:	23ff      	movs	r3, #255	@ 0xff
 800af84:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	799b      	ldrb	r3, [r3, #6]
 800af8a:	2bff      	cmp	r3, #255	@ 0xff
 800af8c:	d005      	beq.n	800af9a <dhcp_renew+0xe2>
    dhcp->tries++;
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	799b      	ldrb	r3, [r3, #6]
 800af92:	3301      	adds	r3, #1
 800af94:	b2da      	uxtb	r2, r3
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	799b      	ldrb	r3, [r3, #6]
 800af9e:	2b09      	cmp	r3, #9
 800afa0:	d809      	bhi.n	800afb6 <dhcp_renew+0xfe>
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	799b      	ldrb	r3, [r3, #6]
 800afa6:	461a      	mov	r2, r3
 800afa8:	0152      	lsls	r2, r2, #5
 800afaa:	1ad2      	subs	r2, r2, r3
 800afac:	0092      	lsls	r2, r2, #2
 800afae:	4413      	add	r3, r2
 800afb0:	011b      	lsls	r3, r3, #4
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	e001      	b.n	800afba <dhcp_renew+0x102>
 800afb6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800afba:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800afbc:	89fb      	ldrh	r3, [r7, #14]
 800afbe:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800afc2:	4a09      	ldr	r2, [pc, #36]	@ (800afe8 <dhcp_renew+0x130>)
 800afc4:	fb82 1203 	smull	r1, r2, r2, r3
 800afc8:	1152      	asrs	r2, r2, #5
 800afca:	17db      	asrs	r3, r3, #31
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	b29a      	uxth	r2, r3
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800afd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3720      	adds	r7, #32
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	24000044 	.word	0x24000044
 800afe4:	2400435c 	.word	0x2400435c
 800afe8:	10624dd3 	.word	0x10624dd3

0800afec <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b08a      	sub	sp, #40	@ 0x28
 800aff0:	af02      	add	r7, sp, #8
 800aff2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aff8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800affa:	2104      	movs	r1, #4
 800affc:	69b8      	ldr	r0, [r7, #24]
 800affe:	f000 f9dd 	bl	800b3bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800b002:	f107 030c 	add.w	r3, r7, #12
 800b006:	2203      	movs	r2, #3
 800b008:	69b9      	ldr	r1, [r7, #24]
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 fe92 	bl	800bd34 <dhcp_create_msg>
 800b010:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d04c      	beq.n	800b0b2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800b01e:	89b8      	ldrh	r0, [r7, #12]
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b026:	2302      	movs	r3, #2
 800b028:	2239      	movs	r2, #57	@ 0x39
 800b02a:	f000 f9e1 	bl	800b3f0 <dhcp_option>
 800b02e:	4603      	mov	r3, r0
 800b030:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800b032:	89b8      	ldrh	r0, [r7, #12]
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b03e:	461a      	mov	r2, r3
 800b040:	f000 fa30 	bl	800b4a4 <dhcp_option_short>
 800b044:	4603      	mov	r3, r0
 800b046:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800b048:	89b8      	ldrh	r0, [r7, #12]
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b050:	2304      	movs	r3, #4
 800b052:	2237      	movs	r2, #55	@ 0x37
 800b054:	f000 f9cc 	bl	800b3f0 <dhcp_option>
 800b058:	4603      	mov	r3, r0
 800b05a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b05c:	2300      	movs	r3, #0
 800b05e:	77bb      	strb	r3, [r7, #30]
 800b060:	e00e      	b.n	800b080 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800b062:	89b8      	ldrh	r0, [r7, #12]
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b06a:	7fbb      	ldrb	r3, [r7, #30]
 800b06c:	4a28      	ldr	r2, [pc, #160]	@ (800b110 <dhcp_rebind+0x124>)
 800b06e:	5cd3      	ldrb	r3, [r2, r3]
 800b070:	461a      	mov	r2, r3
 800b072:	f000 f9f1 	bl	800b458 <dhcp_option_byte>
 800b076:	4603      	mov	r3, r0
 800b078:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b07a:	7fbb      	ldrb	r3, [r7, #30]
 800b07c:	3301      	adds	r3, #1
 800b07e:	77bb      	strb	r3, [r7, #30]
 800b080:	7fbb      	ldrb	r3, [r7, #30]
 800b082:	2b03      	cmp	r3, #3
 800b084:	d9ed      	bls.n	800b062 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800b086:	89b8      	ldrh	r0, [r7, #12]
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	33f0      	adds	r3, #240	@ 0xf0
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	4619      	mov	r1, r3
 800b090:	f000 ff26 	bl	800bee0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800b094:	4b1f      	ldr	r3, [pc, #124]	@ (800b114 <dhcp_rebind+0x128>)
 800b096:	6818      	ldr	r0, [r3, #0]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	2343      	movs	r3, #67	@ 0x43
 800b09e:	4a1e      	ldr	r2, [pc, #120]	@ (800b118 <dhcp_rebind+0x12c>)
 800b0a0:	6979      	ldr	r1, [r7, #20]
 800b0a2:	f00b fe39 	bl	8016d18 <udp_sendto_if>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800b0aa:	6978      	ldr	r0, [r7, #20]
 800b0ac:	f005 fa88 	bl	80105c0 <pbuf_free>
 800b0b0:	e001      	b.n	800b0b6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800b0b2:	23ff      	movs	r3, #255	@ 0xff
 800b0b4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	799b      	ldrb	r3, [r3, #6]
 800b0ba:	2bff      	cmp	r3, #255	@ 0xff
 800b0bc:	d005      	beq.n	800b0ca <dhcp_rebind+0xde>
    dhcp->tries++;
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	799b      	ldrb	r3, [r3, #6]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	799b      	ldrb	r3, [r3, #6]
 800b0ce:	2b09      	cmp	r3, #9
 800b0d0:	d809      	bhi.n	800b0e6 <dhcp_rebind+0xfa>
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	799b      	ldrb	r3, [r3, #6]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	0152      	lsls	r2, r2, #5
 800b0da:	1ad2      	subs	r2, r2, r3
 800b0dc:	0092      	lsls	r2, r2, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	00db      	lsls	r3, r3, #3
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	e001      	b.n	800b0ea <dhcp_rebind+0xfe>
 800b0e6:	f242 7310 	movw	r3, #10000	@ 0x2710
 800b0ea:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800b0ec:	89fb      	ldrh	r3, [r7, #14]
 800b0ee:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800b0f2:	4a0a      	ldr	r2, [pc, #40]	@ (800b11c <dhcp_rebind+0x130>)
 800b0f4:	fb82 1203 	smull	r1, r2, r2, r3
 800b0f8:	1152      	asrs	r2, r2, #5
 800b0fa:	17db      	asrs	r3, r3, #31
 800b0fc:	1ad3      	subs	r3, r2, r3
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800b104:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3720      	adds	r7, #32
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	24000044 	.word	0x24000044
 800b114:	2400435c 	.word	0x2400435c
 800b118:	0801b830 	.word	0x0801b830
 800b11c:	10624dd3 	.word	0x10624dd3

0800b120 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800b120:	b5b0      	push	{r4, r5, r7, lr}
 800b122:	b08a      	sub	sp, #40	@ 0x28
 800b124:	af02      	add	r7, sp, #8
 800b126:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b12c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800b12e:	2103      	movs	r1, #3
 800b130:	69b8      	ldr	r0, [r7, #24]
 800b132:	f000 f943 	bl	800b3bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800b136:	f107 030c 	add.w	r3, r7, #12
 800b13a:	2203      	movs	r2, #3
 800b13c:	69b9      	ldr	r1, [r7, #24]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 fdf8 	bl	800bd34 <dhcp_create_msg>
 800b144:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d066      	beq.n	800b21a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800b152:	89b8      	ldrh	r0, [r7, #12]
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b15a:	2302      	movs	r3, #2
 800b15c:	2239      	movs	r2, #57	@ 0x39
 800b15e:	f000 f947 	bl	800b3f0 <dhcp_option>
 800b162:	4603      	mov	r3, r0
 800b164:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800b166:	89b8      	ldrh	r0, [r7, #12]
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	33f0      	adds	r3, #240	@ 0xf0
 800b16c:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800b170:	4619      	mov	r1, r3
 800b172:	f000 f997 	bl	800b4a4 <dhcp_option_short>
 800b176:	4603      	mov	r3, r0
 800b178:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800b17a:	89b8      	ldrh	r0, [r7, #12]
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b182:	2304      	movs	r3, #4
 800b184:	2232      	movs	r2, #50	@ 0x32
 800b186:	f000 f933 	bl	800b3f0 <dhcp_option>
 800b18a:	4603      	mov	r3, r0
 800b18c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800b18e:	89bc      	ldrh	r4, [r7, #12]
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	69db      	ldr	r3, [r3, #28]
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe fffc 	bl	800a198 <lwip_htonl>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	4629      	mov	r1, r5
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f000 f9ae 	bl	800b508 <dhcp_option_long>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800b1b0:	89b8      	ldrh	r0, [r7, #12]
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b1b8:	2304      	movs	r3, #4
 800b1ba:	2237      	movs	r2, #55	@ 0x37
 800b1bc:	f000 f918 	bl	800b3f0 <dhcp_option>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	77bb      	strb	r3, [r7, #30]
 800b1c8:	e00e      	b.n	800b1e8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800b1ca:	89b8      	ldrh	r0, [r7, #12]
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b1d2:	7fbb      	ldrb	r3, [r7, #30]
 800b1d4:	4a28      	ldr	r2, [pc, #160]	@ (800b278 <dhcp_reboot+0x158>)
 800b1d6:	5cd3      	ldrb	r3, [r2, r3]
 800b1d8:	461a      	mov	r2, r3
 800b1da:	f000 f93d 	bl	800b458 <dhcp_option_byte>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b1e2:	7fbb      	ldrb	r3, [r7, #30]
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	77bb      	strb	r3, [r7, #30]
 800b1e8:	7fbb      	ldrb	r3, [r7, #30]
 800b1ea:	2b03      	cmp	r3, #3
 800b1ec:	d9ed      	bls.n	800b1ca <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800b1ee:	89b8      	ldrh	r0, [r7, #12]
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	33f0      	adds	r3, #240	@ 0xf0
 800b1f4:	697a      	ldr	r2, [r7, #20]
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	f000 fe72 	bl	800bee0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800b1fc:	4b1f      	ldr	r3, [pc, #124]	@ (800b27c <dhcp_reboot+0x15c>)
 800b1fe:	6818      	ldr	r0, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	9300      	str	r3, [sp, #0]
 800b204:	2343      	movs	r3, #67	@ 0x43
 800b206:	4a1e      	ldr	r2, [pc, #120]	@ (800b280 <dhcp_reboot+0x160>)
 800b208:	6979      	ldr	r1, [r7, #20]
 800b20a:	f00b fd85 	bl	8016d18 <udp_sendto_if>
 800b20e:	4603      	mov	r3, r0
 800b210:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800b212:	6978      	ldr	r0, [r7, #20]
 800b214:	f005 f9d4 	bl	80105c0 <pbuf_free>
 800b218:	e001      	b.n	800b21e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800b21a:	23ff      	movs	r3, #255	@ 0xff
 800b21c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	799b      	ldrb	r3, [r3, #6]
 800b222:	2bff      	cmp	r3, #255	@ 0xff
 800b224:	d005      	beq.n	800b232 <dhcp_reboot+0x112>
    dhcp->tries++;
 800b226:	69bb      	ldr	r3, [r7, #24]
 800b228:	799b      	ldrb	r3, [r3, #6]
 800b22a:	3301      	adds	r3, #1
 800b22c:	b2da      	uxtb	r2, r3
 800b22e:	69bb      	ldr	r3, [r7, #24]
 800b230:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	799b      	ldrb	r3, [r3, #6]
 800b236:	2b09      	cmp	r3, #9
 800b238:	d809      	bhi.n	800b24e <dhcp_reboot+0x12e>
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	799b      	ldrb	r3, [r3, #6]
 800b23e:	461a      	mov	r2, r3
 800b240:	0152      	lsls	r2, r2, #5
 800b242:	1ad2      	subs	r2, r2, r3
 800b244:	0092      	lsls	r2, r2, #2
 800b246:	4413      	add	r3, r2
 800b248:	00db      	lsls	r3, r3, #3
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	e001      	b.n	800b252 <dhcp_reboot+0x132>
 800b24e:	f242 7310 	movw	r3, #10000	@ 0x2710
 800b252:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800b254:	89fb      	ldrh	r3, [r7, #14]
 800b256:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800b25a:	4a0a      	ldr	r2, [pc, #40]	@ (800b284 <dhcp_reboot+0x164>)
 800b25c:	fb82 1203 	smull	r1, r2, r2, r3
 800b260:	1152      	asrs	r2, r2, #5
 800b262:	17db      	asrs	r3, r3, #31
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	b29a      	uxth	r2, r3
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800b26c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3720      	adds	r7, #32
 800b274:	46bd      	mov	sp, r7
 800b276:	bdb0      	pop	{r4, r5, r7, pc}
 800b278:	24000044 	.word	0x24000044
 800b27c:	2400435c 	.word	0x2400435c
 800b280:	0801b830 	.word	0x0801b830
 800b284:	10624dd3 	.word	0x10624dd3

0800b288 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800b288:	b5b0      	push	{r4, r5, r7, lr}
 800b28a:	b08a      	sub	sp, #40	@ 0x28
 800b28c:	af02      	add	r7, sp, #8
 800b28e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b294:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 8084 	beq.w	800b3a6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	795b      	ldrb	r3, [r3, #5]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f000 8081 	beq.w	800b3aa <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	699b      	ldr	r3, [r3, #24]
 800b2ac:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	631a      	str	r2, [r3, #48]	@ 0x30
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b2d4:	69fb      	ldr	r3, [r7, #28]
 800b2d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	829a      	strh	r2, [r3, #20]
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	8a9a      	ldrh	r2, [r3, #20]
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	825a      	strh	r2, [r3, #18]
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	8a5a      	ldrh	r2, [r3, #18]
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	821a      	strh	r2, [r3, #16]
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	8a1a      	ldrh	r2, [r3, #16]
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 fe1e 	bl	800bf3c <dhcp_supplied_address>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d03b      	beq.n	800b37e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800b306:	f107 030e 	add.w	r3, r7, #14
 800b30a:	2207      	movs	r2, #7
 800b30c:	69f9      	ldr	r1, [r7, #28]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 fd10 	bl	800bd34 <dhcp_create_msg>
 800b314:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d030      	beq.n	800b37e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800b322:	89f8      	ldrh	r0, [r7, #14]
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b32a:	2304      	movs	r3, #4
 800b32c:	2236      	movs	r2, #54	@ 0x36
 800b32e:	f000 f85f 	bl	800b3f0 <dhcp_option>
 800b332:	4603      	mov	r3, r0
 800b334:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800b336:	89fc      	ldrh	r4, [r7, #14]
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	4618      	mov	r0, r3
 800b342:	f7fe ff29 	bl	800a198 <lwip_htonl>
 800b346:	4603      	mov	r3, r0
 800b348:	461a      	mov	r2, r3
 800b34a:	4629      	mov	r1, r5
 800b34c:	4620      	mov	r0, r4
 800b34e:	f000 f8db 	bl	800b508 <dhcp_option_long>
 800b352:	4603      	mov	r3, r0
 800b354:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800b356:	89f8      	ldrh	r0, [r7, #14]
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	33f0      	adds	r3, #240	@ 0xf0
 800b35c:	69ba      	ldr	r2, [r7, #24]
 800b35e:	4619      	mov	r1, r3
 800b360:	f000 fdbe 	bl	800bee0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800b364:	4b13      	ldr	r3, [pc, #76]	@ (800b3b4 <dhcp_release_and_stop+0x12c>)
 800b366:	6818      	ldr	r0, [r3, #0]
 800b368:	f107 0210 	add.w	r2, r7, #16
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	9300      	str	r3, [sp, #0]
 800b370:	2343      	movs	r3, #67	@ 0x43
 800b372:	69b9      	ldr	r1, [r7, #24]
 800b374:	f00b fcd0 	bl	8016d18 <udp_sendto_if>
      pbuf_free(p_out);
 800b378:	69b8      	ldr	r0, [r7, #24]
 800b37a:	f005 f921 	bl	80105c0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800b37e:	4b0e      	ldr	r3, [pc, #56]	@ (800b3b8 <dhcp_release_and_stop+0x130>)
 800b380:	4a0d      	ldr	r2, [pc, #52]	@ (800b3b8 <dhcp_release_and_stop+0x130>)
 800b382:	490d      	ldr	r1, [pc, #52]	@ (800b3b8 <dhcp_release_and_stop+0x130>)
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f004 fbff 	bl	800fb88 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800b38a:	2100      	movs	r1, #0
 800b38c:	69f8      	ldr	r0, [r7, #28]
 800b38e:	f000 f815 	bl	800b3bc <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	791b      	ldrb	r3, [r3, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d008      	beq.n	800b3ac <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800b39a:	f7fe ff69 	bl	800a270 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	711a      	strb	r2, [r3, #4]
 800b3a4:	e002      	b.n	800b3ac <dhcp_release_and_stop+0x124>
    return;
 800b3a6:	bf00      	nop
 800b3a8:	e000      	b.n	800b3ac <dhcp_release_and_stop+0x124>
    return;
 800b3aa:	bf00      	nop
  }
}
 800b3ac:	3720      	adds	r7, #32
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bdb0      	pop	{r4, r5, r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	2400435c 	.word	0x2400435c
 800b3b8:	0801b82c 	.word	0x0801b82c

0800b3bc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	795b      	ldrb	r3, [r3, #5]
 800b3cc:	78fa      	ldrb	r2, [r7, #3]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d008      	beq.n	800b3e4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	78fa      	ldrb	r2, [r7, #3]
 800b3d6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	811a      	strh	r2, [r3, #8]
  }
}
 800b3e4:	bf00      	nop
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6039      	str	r1, [r7, #0]
 800b3f8:	4611      	mov	r1, r2
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	80fb      	strh	r3, [r7, #6]
 800b400:	460b      	mov	r3, r1
 800b402:	717b      	strb	r3, [r7, #5]
 800b404:	4613      	mov	r3, r2
 800b406:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800b408:	88fa      	ldrh	r2, [r7, #6]
 800b40a:	793b      	ldrb	r3, [r7, #4]
 800b40c:	4413      	add	r3, r2
 800b40e:	3302      	adds	r3, #2
 800b410:	2b44      	cmp	r3, #68	@ 0x44
 800b412:	d906      	bls.n	800b422 <dhcp_option+0x32>
 800b414:	4b0d      	ldr	r3, [pc, #52]	@ (800b44c <dhcp_option+0x5c>)
 800b416:	f240 529a 	movw	r2, #1434	@ 0x59a
 800b41a:	490d      	ldr	r1, [pc, #52]	@ (800b450 <dhcp_option+0x60>)
 800b41c:	480d      	ldr	r0, [pc, #52]	@ (800b454 <dhcp_option+0x64>)
 800b41e:	f00c f875 	bl	801750c <iprintf>
  options[options_out_len++] = option_type;
 800b422:	88fb      	ldrh	r3, [r7, #6]
 800b424:	1c5a      	adds	r2, r3, #1
 800b426:	80fa      	strh	r2, [r7, #6]
 800b428:	461a      	mov	r2, r3
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	4413      	add	r3, r2
 800b42e:	797a      	ldrb	r2, [r7, #5]
 800b430:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800b432:	88fb      	ldrh	r3, [r7, #6]
 800b434:	1c5a      	adds	r2, r3, #1
 800b436:	80fa      	strh	r2, [r7, #6]
 800b438:	461a      	mov	r2, r3
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	4413      	add	r3, r2
 800b43e:	793a      	ldrb	r2, [r7, #4]
 800b440:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800b442:	88fb      	ldrh	r3, [r7, #6]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3708      	adds	r7, #8
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	0801860c 	.word	0x0801860c
 800b450:	080187cc 	.word	0x080187cc
 800b454:	08018698 	.word	0x08018698

0800b458 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	4603      	mov	r3, r0
 800b460:	6039      	str	r1, [r7, #0]
 800b462:	80fb      	strh	r3, [r7, #6]
 800b464:	4613      	mov	r3, r2
 800b466:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800b468:	88fb      	ldrh	r3, [r7, #6]
 800b46a:	2b43      	cmp	r3, #67	@ 0x43
 800b46c:	d906      	bls.n	800b47c <dhcp_option_byte+0x24>
 800b46e:	4b0a      	ldr	r3, [pc, #40]	@ (800b498 <dhcp_option_byte+0x40>)
 800b470:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 800b474:	4909      	ldr	r1, [pc, #36]	@ (800b49c <dhcp_option_byte+0x44>)
 800b476:	480a      	ldr	r0, [pc, #40]	@ (800b4a0 <dhcp_option_byte+0x48>)
 800b478:	f00c f848 	bl	801750c <iprintf>
  options[options_out_len++] = value;
 800b47c:	88fb      	ldrh	r3, [r7, #6]
 800b47e:	1c5a      	adds	r2, r3, #1
 800b480:	80fa      	strh	r2, [r7, #6]
 800b482:	461a      	mov	r2, r3
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	4413      	add	r3, r2
 800b488:	797a      	ldrb	r2, [r7, #5]
 800b48a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800b48c:	88fb      	ldrh	r3, [r7, #6]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	0801860c 	.word	0x0801860c
 800b49c:	08018810 	.word	0x08018810
 800b4a0:	08018698 	.word	0x08018698

0800b4a4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	6039      	str	r1, [r7, #0]
 800b4ae:	80fb      	strh	r3, [r7, #6]
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800b4b4:	88fb      	ldrh	r3, [r7, #6]
 800b4b6:	3302      	adds	r3, #2
 800b4b8:	2b44      	cmp	r3, #68	@ 0x44
 800b4ba:	d906      	bls.n	800b4ca <dhcp_option_short+0x26>
 800b4bc:	4b0f      	ldr	r3, [pc, #60]	@ (800b4fc <dhcp_option_short+0x58>)
 800b4be:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 800b4c2:	490f      	ldr	r1, [pc, #60]	@ (800b500 <dhcp_option_short+0x5c>)
 800b4c4:	480f      	ldr	r0, [pc, #60]	@ (800b504 <dhcp_option_short+0x60>)
 800b4c6:	f00c f821 	bl	801750c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800b4ca:	88bb      	ldrh	r3, [r7, #4]
 800b4cc:	0a1b      	lsrs	r3, r3, #8
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	88fb      	ldrh	r3, [r7, #6]
 800b4d2:	1c59      	adds	r1, r3, #1
 800b4d4:	80f9      	strh	r1, [r7, #6]
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	440b      	add	r3, r1
 800b4dc:	b2d2      	uxtb	r2, r2
 800b4de:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800b4e0:	88fb      	ldrh	r3, [r7, #6]
 800b4e2:	1c5a      	adds	r2, r3, #1
 800b4e4:	80fa      	strh	r2, [r7, #6]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	4413      	add	r3, r2
 800b4ec:	88ba      	ldrh	r2, [r7, #4]
 800b4ee:	b2d2      	uxtb	r2, r2
 800b4f0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800b4f2:	88fb      	ldrh	r3, [r7, #6]
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	0801860c 	.word	0x0801860c
 800b500:	08018848 	.word	0x08018848
 800b504:	08018698 	.word	0x08018698

0800b508 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	4603      	mov	r3, r0
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
 800b514:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800b516:	89fb      	ldrh	r3, [r7, #14]
 800b518:	3304      	adds	r3, #4
 800b51a:	2b44      	cmp	r3, #68	@ 0x44
 800b51c:	d906      	bls.n	800b52c <dhcp_option_long+0x24>
 800b51e:	4b19      	ldr	r3, [pc, #100]	@ (800b584 <dhcp_option_long+0x7c>)
 800b520:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 800b524:	4918      	ldr	r1, [pc, #96]	@ (800b588 <dhcp_option_long+0x80>)
 800b526:	4819      	ldr	r0, [pc, #100]	@ (800b58c <dhcp_option_long+0x84>)
 800b528:	f00b fff0 	bl	801750c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	0e1a      	lsrs	r2, r3, #24
 800b530:	89fb      	ldrh	r3, [r7, #14]
 800b532:	1c59      	adds	r1, r3, #1
 800b534:	81f9      	strh	r1, [r7, #14]
 800b536:	4619      	mov	r1, r3
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	440b      	add	r3, r1
 800b53c:	b2d2      	uxtb	r2, r2
 800b53e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	0c1a      	lsrs	r2, r3, #16
 800b544:	89fb      	ldrh	r3, [r7, #14]
 800b546:	1c59      	adds	r1, r3, #1
 800b548:	81f9      	strh	r1, [r7, #14]
 800b54a:	4619      	mov	r1, r3
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	440b      	add	r3, r1
 800b550:	b2d2      	uxtb	r2, r2
 800b552:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	0a1a      	lsrs	r2, r3, #8
 800b558:	89fb      	ldrh	r3, [r7, #14]
 800b55a:	1c59      	adds	r1, r3, #1
 800b55c:	81f9      	strh	r1, [r7, #14]
 800b55e:	4619      	mov	r1, r3
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	440b      	add	r3, r1
 800b564:	b2d2      	uxtb	r2, r2
 800b566:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800b568:	89fb      	ldrh	r3, [r7, #14]
 800b56a:	1c5a      	adds	r2, r3, #1
 800b56c:	81fa      	strh	r2, [r7, #14]
 800b56e:	461a      	mov	r2, r3
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	4413      	add	r3, r2
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	b2d2      	uxtb	r2, r2
 800b578:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800b57a:	89fb      	ldrh	r3, [r7, #14]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	0801860c 	.word	0x0801860c
 800b588:	08018884 	.word	0x08018884
 800b58c:	08018698 	.word	0x08018698

0800b590 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b090      	sub	sp, #64	@ 0x40
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800b5a2:	220a      	movs	r2, #10
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	48ba      	ldr	r0, [pc, #744]	@ (800b890 <dhcp_parse_reply+0x300>)
 800b5a8:	f00c f908 	bl	80177bc <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	895b      	ldrh	r3, [r3, #10]
 800b5b0:	2b2b      	cmp	r3, #43	@ 0x2b
 800b5b2:	d802      	bhi.n	800b5ba <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800b5b4:	f06f 0301 	mvn.w	r3, #1
 800b5b8:	e2ea      	b.n	800bb90 <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800b5c0:	23f0      	movs	r3, #240	@ 0xf0
 800b5c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	891b      	ldrh	r3, [r3, #8]
 800b5c8:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800b5ce:	e00c      	b.n	800b5ea <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800b5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d2:	895b      	ldrh	r3, [r3, #10]
 800b5d4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800b5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5dc:	895b      	ldrh	r3, [r3, #10]
 800b5de:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 800b5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800b5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d004      	beq.n	800b5fa <dhcp_parse_reply+0x6a>
 800b5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f2:	895b      	ldrh	r3, [r3, #10]
 800b5f4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d2ea      	bcs.n	800b5d0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800b5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d102      	bne.n	800b606 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800b600:	f06f 0301 	mvn.w	r3, #1
 800b604:	e2c4      	b.n	800bb90 <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 800b606:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b608:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 800b60a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800b60c:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 800b60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800b614:	e267      	b.n	800bae6 <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 800b616:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b618:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b61a:	4413      	add	r3, r2
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800b620:	2300      	movs	r3, #0
 800b622:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 800b626:	f04f 33ff 	mov.w	r3, #4294967295
 800b62a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800b62c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b62e:	3302      	adds	r3, #2
 800b630:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800b632:	8bfa      	ldrh	r2, [r7, #30]
 800b634:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b636:	429a      	cmp	r2, r3
 800b638:	d202      	bcs.n	800b640 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800b63a:	f06f 0301 	mvn.w	r3, #1
 800b63e:	e2a7      	b.n	800bb90 <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800b640:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b642:	3301      	adds	r3, #1
 800b644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b646:	8952      	ldrh	r2, [r2, #10]
 800b648:	4293      	cmp	r3, r2
 800b64a:	da07      	bge.n	800b65c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800b64c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b64e:	3301      	adds	r3, #1
 800b650:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b652:	4413      	add	r3, r2
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b65a:	e00b      	b.n	800b674 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800b65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d004      	beq.n	800b66e <dhcp_parse_reply+0xde>
 800b664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	e000      	b.n	800b670 <dhcp_parse_reply+0xe0>
 800b66e:	2300      	movs	r3, #0
 800b670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800b674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b678:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 800b67c:	7dfb      	ldrb	r3, [r7, #23]
 800b67e:	2b3b      	cmp	r3, #59	@ 0x3b
 800b680:	f200 815a 	bhi.w	800b938 <dhcp_parse_reply+0x3a8>
 800b684:	a201      	add	r2, pc, #4	@ (adr r2, 800b68c <dhcp_parse_reply+0xfc>)
 800b686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b68a:	bf00      	nop
 800b68c:	0800b77d 	.word	0x0800b77d
 800b690:	0800b78d 	.word	0x0800b78d
 800b694:	0800b939 	.word	0x0800b939
 800b698:	0800b7af 	.word	0x0800b7af
 800b69c:	0800b939 	.word	0x0800b939
 800b6a0:	0800b939 	.word	0x0800b939
 800b6a4:	0800b7db 	.word	0x0800b7db
 800b6a8:	0800b939 	.word	0x0800b939
 800b6ac:	0800b939 	.word	0x0800b939
 800b6b0:	0800b939 	.word	0x0800b939
 800b6b4:	0800b939 	.word	0x0800b939
 800b6b8:	0800b939 	.word	0x0800b939
 800b6bc:	0800b939 	.word	0x0800b939
 800b6c0:	0800b939 	.word	0x0800b939
 800b6c4:	0800b939 	.word	0x0800b939
 800b6c8:	0800b939 	.word	0x0800b939
 800b6cc:	0800b939 	.word	0x0800b939
 800b6d0:	0800b939 	.word	0x0800b939
 800b6d4:	0800b939 	.word	0x0800b939
 800b6d8:	0800b939 	.word	0x0800b939
 800b6dc:	0800b939 	.word	0x0800b939
 800b6e0:	0800b939 	.word	0x0800b939
 800b6e4:	0800b939 	.word	0x0800b939
 800b6e8:	0800b939 	.word	0x0800b939
 800b6ec:	0800b939 	.word	0x0800b939
 800b6f0:	0800b939 	.word	0x0800b939
 800b6f4:	0800b939 	.word	0x0800b939
 800b6f8:	0800b939 	.word	0x0800b939
 800b6fc:	0800b939 	.word	0x0800b939
 800b700:	0800b939 	.word	0x0800b939
 800b704:	0800b939 	.word	0x0800b939
 800b708:	0800b939 	.word	0x0800b939
 800b70c:	0800b939 	.word	0x0800b939
 800b710:	0800b939 	.word	0x0800b939
 800b714:	0800b939 	.word	0x0800b939
 800b718:	0800b939 	.word	0x0800b939
 800b71c:	0800b939 	.word	0x0800b939
 800b720:	0800b939 	.word	0x0800b939
 800b724:	0800b939 	.word	0x0800b939
 800b728:	0800b939 	.word	0x0800b939
 800b72c:	0800b939 	.word	0x0800b939
 800b730:	0800b939 	.word	0x0800b939
 800b734:	0800b939 	.word	0x0800b939
 800b738:	0800b939 	.word	0x0800b939
 800b73c:	0800b939 	.word	0x0800b939
 800b740:	0800b939 	.word	0x0800b939
 800b744:	0800b939 	.word	0x0800b939
 800b748:	0800b939 	.word	0x0800b939
 800b74c:	0800b939 	.word	0x0800b939
 800b750:	0800b939 	.word	0x0800b939
 800b754:	0800b939 	.word	0x0800b939
 800b758:	0800b831 	.word	0x0800b831
 800b75c:	0800b853 	.word	0x0800b853
 800b760:	0800b8b1 	.word	0x0800b8b1
 800b764:	0800b8d3 	.word	0x0800b8d3
 800b768:	0800b939 	.word	0x0800b939
 800b76c:	0800b939 	.word	0x0800b939
 800b770:	0800b939 	.word	0x0800b939
 800b774:	0800b8f5 	.word	0x0800b8f5
 800b778:	0800b917 	.word	0x0800b917
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800b77c:	2300      	movs	r3, #0
 800b77e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b782:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b786:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 800b78a:	e0d9      	b.n	800b940 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800b78c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b790:	2b04      	cmp	r3, #4
 800b792:	d009      	beq.n	800b7a8 <dhcp_parse_reply+0x218>
 800b794:	4b3f      	ldr	r3, [pc, #252]	@ (800b894 <dhcp_parse_reply+0x304>)
 800b796:	f240 622e 	movw	r2, #1582	@ 0x62e
 800b79a:	493f      	ldr	r1, [pc, #252]	@ (800b898 <dhcp_parse_reply+0x308>)
 800b79c:	483f      	ldr	r0, [pc, #252]	@ (800b89c <dhcp_parse_reply+0x30c>)
 800b79e:	f00b feb5 	bl	801750c <iprintf>
 800b7a2:	f06f 0305 	mvn.w	r3, #5
 800b7a6:	e1f3      	b.n	800bb90 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800b7a8:	2306      	movs	r3, #6
 800b7aa:	623b      	str	r3, [r7, #32]
        break;
 800b7ac:	e0c8      	b.n	800b940 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800b7ae:	2304      	movs	r3, #4
 800b7b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800b7b4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b7b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d209      	bcs.n	800b7d4 <dhcp_parse_reply+0x244>
 800b7c0:	4b34      	ldr	r3, [pc, #208]	@ (800b894 <dhcp_parse_reply+0x304>)
 800b7c2:	f240 6233 	movw	r2, #1587	@ 0x633
 800b7c6:	4936      	ldr	r1, [pc, #216]	@ (800b8a0 <dhcp_parse_reply+0x310>)
 800b7c8:	4834      	ldr	r0, [pc, #208]	@ (800b89c <dhcp_parse_reply+0x30c>)
 800b7ca:	f00b fe9f 	bl	801750c <iprintf>
 800b7ce:	f06f 0305 	mvn.w	r3, #5
 800b7d2:	e1dd      	b.n	800bb90 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800b7d4:	2307      	movs	r3, #7
 800b7d6:	623b      	str	r3, [r7, #32]
        break;
 800b7d8:	e0b2      	b.n	800b940 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 800b7da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7de:	f003 0303 	and.w	r3, r3, #3
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d009      	beq.n	800b7fc <dhcp_parse_reply+0x26c>
 800b7e8:	4b2a      	ldr	r3, [pc, #168]	@ (800b894 <dhcp_parse_reply+0x304>)
 800b7ea:	f240 6239 	movw	r2, #1593	@ 0x639
 800b7ee:	492d      	ldr	r1, [pc, #180]	@ (800b8a4 <dhcp_parse_reply+0x314>)
 800b7f0:	482a      	ldr	r0, [pc, #168]	@ (800b89c <dhcp_parse_reply+0x30c>)
 800b7f2:	f00b fe8b 	bl	801750c <iprintf>
 800b7f6:	f06f 0305 	mvn.w	r3, #5
 800b7fa:	e1c9      	b.n	800bb90 <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 800b7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b800:	2b08      	cmp	r3, #8
 800b802:	bf28      	it	cs
 800b804:	2308      	movcs	r3, #8
 800b806:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800b80a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b80e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b812:	429a      	cmp	r2, r3
 800b814:	d209      	bcs.n	800b82a <dhcp_parse_reply+0x29a>
 800b816:	4b1f      	ldr	r3, [pc, #124]	@ (800b894 <dhcp_parse_reply+0x304>)
 800b818:	f240 623c 	movw	r2, #1596	@ 0x63c
 800b81c:	4920      	ldr	r1, [pc, #128]	@ (800b8a0 <dhcp_parse_reply+0x310>)
 800b81e:	481f      	ldr	r0, [pc, #124]	@ (800b89c <dhcp_parse_reply+0x30c>)
 800b820:	f00b fe74 	bl	801750c <iprintf>
 800b824:	f06f 0305 	mvn.w	r3, #5
 800b828:	e1b2      	b.n	800bb90 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 800b82a:	2308      	movs	r3, #8
 800b82c:	623b      	str	r3, [r7, #32]
        break;
 800b82e:	e087      	b.n	800b940 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800b830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b834:	2b04      	cmp	r3, #4
 800b836:	d009      	beq.n	800b84c <dhcp_parse_reply+0x2bc>
 800b838:	4b16      	ldr	r3, [pc, #88]	@ (800b894 <dhcp_parse_reply+0x304>)
 800b83a:	f240 6241 	movw	r2, #1601	@ 0x641
 800b83e:	4916      	ldr	r1, [pc, #88]	@ (800b898 <dhcp_parse_reply+0x308>)
 800b840:	4816      	ldr	r0, [pc, #88]	@ (800b89c <dhcp_parse_reply+0x30c>)
 800b842:	f00b fe63 	bl	801750c <iprintf>
 800b846:	f06f 0305 	mvn.w	r3, #5
 800b84a:	e1a1      	b.n	800bb90 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800b84c:	2303      	movs	r3, #3
 800b84e:	623b      	str	r3, [r7, #32]
        break;
 800b850:	e076      	b.n	800b940 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800b852:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b856:	2b01      	cmp	r3, #1
 800b858:	d009      	beq.n	800b86e <dhcp_parse_reply+0x2de>
 800b85a:	4b0e      	ldr	r3, [pc, #56]	@ (800b894 <dhcp_parse_reply+0x304>)
 800b85c:	f240 624f 	movw	r2, #1615	@ 0x64f
 800b860:	4911      	ldr	r1, [pc, #68]	@ (800b8a8 <dhcp_parse_reply+0x318>)
 800b862:	480e      	ldr	r0, [pc, #56]	@ (800b89c <dhcp_parse_reply+0x30c>)
 800b864:	f00b fe52 	bl	801750c <iprintf>
 800b868:	f06f 0305 	mvn.w	r3, #5
 800b86c:	e190      	b.n	800bb90 <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800b86e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b870:	2bf0      	cmp	r3, #240	@ 0xf0
 800b872:	d009      	beq.n	800b888 <dhcp_parse_reply+0x2f8>
 800b874:	4b07      	ldr	r3, [pc, #28]	@ (800b894 <dhcp_parse_reply+0x304>)
 800b876:	f240 6251 	movw	r2, #1617	@ 0x651
 800b87a:	490c      	ldr	r1, [pc, #48]	@ (800b8ac <dhcp_parse_reply+0x31c>)
 800b87c:	4807      	ldr	r0, [pc, #28]	@ (800b89c <dhcp_parse_reply+0x30c>)
 800b87e:	f00b fe45 	bl	801750c <iprintf>
 800b882:	f06f 0305 	mvn.w	r3, #5
 800b886:	e183      	b.n	800bb90 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800b888:	2300      	movs	r3, #0
 800b88a:	623b      	str	r3, [r7, #32]
        break;
 800b88c:	e058      	b.n	800b940 <dhcp_parse_reply+0x3b0>
 800b88e:	bf00      	nop
 800b890:	24004350 	.word	0x24004350
 800b894:	0801860c 	.word	0x0801860c
 800b898:	080188c0 	.word	0x080188c0
 800b89c:	08018698 	.word	0x08018698
 800b8a0:	080188cc 	.word	0x080188cc
 800b8a4:	080188e0 	.word	0x080188e0
 800b8a8:	080188f0 	.word	0x080188f0
 800b8ac:	080188fc 	.word	0x080188fc
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800b8b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d009      	beq.n	800b8cc <dhcp_parse_reply+0x33c>
 800b8b8:	4b9d      	ldr	r3, [pc, #628]	@ (800bb30 <dhcp_parse_reply+0x5a0>)
 800b8ba:	f240 6255 	movw	r2, #1621	@ 0x655
 800b8be:	499d      	ldr	r1, [pc, #628]	@ (800bb34 <dhcp_parse_reply+0x5a4>)
 800b8c0:	489d      	ldr	r0, [pc, #628]	@ (800bb38 <dhcp_parse_reply+0x5a8>)
 800b8c2:	f00b fe23 	bl	801750c <iprintf>
 800b8c6:	f06f 0305 	mvn.w	r3, #5
 800b8ca:	e161      	b.n	800bb90 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	623b      	str	r3, [r7, #32]
        break;
 800b8d0:	e036      	b.n	800b940 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800b8d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b8d6:	2b04      	cmp	r3, #4
 800b8d8:	d009      	beq.n	800b8ee <dhcp_parse_reply+0x35e>
 800b8da:	4b95      	ldr	r3, [pc, #596]	@ (800bb30 <dhcp_parse_reply+0x5a0>)
 800b8dc:	f240 6259 	movw	r2, #1625	@ 0x659
 800b8e0:	4996      	ldr	r1, [pc, #600]	@ (800bb3c <dhcp_parse_reply+0x5ac>)
 800b8e2:	4895      	ldr	r0, [pc, #596]	@ (800bb38 <dhcp_parse_reply+0x5a8>)
 800b8e4:	f00b fe12 	bl	801750c <iprintf>
 800b8e8:	f06f 0305 	mvn.w	r3, #5
 800b8ec:	e150      	b.n	800bb90 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800b8ee:	2302      	movs	r3, #2
 800b8f0:	623b      	str	r3, [r7, #32]
        break;
 800b8f2:	e025      	b.n	800b940 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800b8f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b8f8:	2b04      	cmp	r3, #4
 800b8fa:	d009      	beq.n	800b910 <dhcp_parse_reply+0x380>
 800b8fc:	4b8c      	ldr	r3, [pc, #560]	@ (800bb30 <dhcp_parse_reply+0x5a0>)
 800b8fe:	f240 625d 	movw	r2, #1629	@ 0x65d
 800b902:	498e      	ldr	r1, [pc, #568]	@ (800bb3c <dhcp_parse_reply+0x5ac>)
 800b904:	488c      	ldr	r0, [pc, #560]	@ (800bb38 <dhcp_parse_reply+0x5a8>)
 800b906:	f00b fe01 	bl	801750c <iprintf>
 800b90a:	f06f 0305 	mvn.w	r3, #5
 800b90e:	e13f      	b.n	800bb90 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 800b910:	2304      	movs	r3, #4
 800b912:	623b      	str	r3, [r7, #32]
        break;
 800b914:	e014      	b.n	800b940 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800b916:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b91a:	2b04      	cmp	r3, #4
 800b91c:	d009      	beq.n	800b932 <dhcp_parse_reply+0x3a2>
 800b91e:	4b84      	ldr	r3, [pc, #528]	@ (800bb30 <dhcp_parse_reply+0x5a0>)
 800b920:	f240 6261 	movw	r2, #1633	@ 0x661
 800b924:	4985      	ldr	r1, [pc, #532]	@ (800bb3c <dhcp_parse_reply+0x5ac>)
 800b926:	4884      	ldr	r0, [pc, #528]	@ (800bb38 <dhcp_parse_reply+0x5a8>)
 800b928:	f00b fdf0 	bl	801750c <iprintf>
 800b92c:	f06f 0305 	mvn.w	r3, #5
 800b930:	e12e      	b.n	800bb90 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 800b932:	2305      	movs	r3, #5
 800b934:	623b      	str	r3, [r7, #32]
        break;
 800b936:	e003      	b.n	800b940 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 800b938:	2300      	movs	r3, #0
 800b93a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800b93e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800b940:	7dfb      	ldrb	r3, [r7, #23]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d103      	bne.n	800b94e <dhcp_parse_reply+0x3be>
      offset++;
 800b946:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b948:	3301      	adds	r3, #1
 800b94a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800b94c:	e0a1      	b.n	800ba92 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800b94e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b950:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b954:	4413      	add	r3, r2
 800b956:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 800b95a:	4293      	cmp	r3, r2
 800b95c:	dd02      	ble.n	800b964 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 800b95e:	f06f 0301 	mvn.w	r3, #1
 800b962:	e115      	b.n	800bb90 <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 800b964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b968:	b29a      	uxth	r2, r3
 800b96a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b96c:	4413      	add	r3, r2
 800b96e:	b29b      	uxth	r3, r3
 800b970:	3302      	adds	r3, #2
 800b972:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 800b974:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f000 808a 	beq.w	800ba92 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 800b97e:	2300      	movs	r3, #0
 800b980:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800b982:	6a3b      	ldr	r3, [r7, #32]
 800b984:	2b00      	cmp	r3, #0
 800b986:	db02      	blt.n	800b98e <dhcp_parse_reply+0x3fe>
 800b988:	6a3b      	ldr	r3, [r7, #32]
 800b98a:	2b09      	cmp	r3, #9
 800b98c:	dd06      	ble.n	800b99c <dhcp_parse_reply+0x40c>
 800b98e:	4b68      	ldr	r3, [pc, #416]	@ (800bb30 <dhcp_parse_reply+0x5a0>)
 800b990:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 800b994:	496a      	ldr	r1, [pc, #424]	@ (800bb40 <dhcp_parse_reply+0x5b0>)
 800b996:	4868      	ldr	r0, [pc, #416]	@ (800bb38 <dhcp_parse_reply+0x5a8>)
 800b998:	f00b fdb8 	bl	801750c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800b99c:	4a69      	ldr	r2, [pc, #420]	@ (800bb44 <dhcp_parse_reply+0x5b4>)
 800b99e:	6a3b      	ldr	r3, [r7, #32]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d174      	bne.n	800ba92 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 800b9a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b9ac:	2b04      	cmp	r3, #4
 800b9ae:	bf28      	it	cs
 800b9b0:	2304      	movcs	r3, #4
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800b9b6:	8bfb      	ldrh	r3, [r7, #30]
 800b9b8:	8aba      	ldrh	r2, [r7, #20]
 800b9ba:	f107 0108 	add.w	r1, r7, #8
 800b9be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b9c0:	f005 f804 	bl	80109cc <pbuf_copy_partial>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	8abb      	ldrh	r3, [r7, #20]
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d002      	beq.n	800b9d4 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 800b9ce:	f06f 0301 	mvn.w	r3, #1
 800b9d2:	e0dd      	b.n	800bb90 <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 800b9d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b9d8:	2b04      	cmp	r3, #4
 800b9da:	d933      	bls.n	800ba44 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800b9dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b9e0:	f003 0303 	and.w	r3, r3, #3
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d009      	beq.n	800b9fe <dhcp_parse_reply+0x46e>
 800b9ea:	4b51      	ldr	r3, [pc, #324]	@ (800bb30 <dhcp_parse_reply+0x5a0>)
 800b9ec:	f240 6281 	movw	r2, #1665	@ 0x681
 800b9f0:	4955      	ldr	r1, [pc, #340]	@ (800bb48 <dhcp_parse_reply+0x5b8>)
 800b9f2:	4851      	ldr	r0, [pc, #324]	@ (800bb38 <dhcp_parse_reply+0x5a8>)
 800b9f4:	f00b fd8a 	bl	801750c <iprintf>
 800b9f8:	f06f 0305 	mvn.w	r3, #5
 800b9fc:	e0c8      	b.n	800bb90 <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 800b9fe:	4a51      	ldr	r2, [pc, #324]	@ (800bb44 <dhcp_parse_reply+0x5b4>)
 800ba00:	6a3b      	ldr	r3, [r7, #32]
 800ba02:	4413      	add	r3, r2
 800ba04:	2201      	movs	r2, #1
 800ba06:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fe fbc4 	bl	800a198 <lwip_htonl>
 800ba10:	4602      	mov	r2, r0
 800ba12:	494e      	ldr	r1, [pc, #312]	@ (800bb4c <dhcp_parse_reply+0x5bc>)
 800ba14:	6a3b      	ldr	r3, [r7, #32]
 800ba16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800ba1a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ba1e:	3b04      	subs	r3, #4
 800ba20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800ba24:	8bfb      	ldrh	r3, [r7, #30]
 800ba26:	3304      	adds	r3, #4
 800ba28:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800ba2a:	8a7a      	ldrh	r2, [r7, #18]
 800ba2c:	8bfb      	ldrh	r3, [r7, #30]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d202      	bcs.n	800ba38 <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 800ba32:	f06f 0301 	mvn.w	r3, #1
 800ba36:	e0ab      	b.n	800bb90 <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 800ba38:	8a7b      	ldrh	r3, [r7, #18]
 800ba3a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800ba3c:	6a3b      	ldr	r3, [r7, #32]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800ba42:	e79e      	b.n	800b982 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 800ba44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ba48:	2b04      	cmp	r3, #4
 800ba4a:	d106      	bne.n	800ba5a <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fe fba2 	bl	800a198 <lwip_htonl>
 800ba54:	4603      	mov	r3, r0
 800ba56:	60bb      	str	r3, [r7, #8]
 800ba58:	e011      	b.n	800ba7e <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800ba5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d009      	beq.n	800ba76 <dhcp_parse_reply+0x4e6>
 800ba62:	4b33      	ldr	r3, [pc, #204]	@ (800bb30 <dhcp_parse_reply+0x5a0>)
 800ba64:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 800ba68:	4939      	ldr	r1, [pc, #228]	@ (800bb50 <dhcp_parse_reply+0x5c0>)
 800ba6a:	4833      	ldr	r0, [pc, #204]	@ (800bb38 <dhcp_parse_reply+0x5a8>)
 800ba6c:	f00b fd4e 	bl	801750c <iprintf>
 800ba70:	f06f 0305 	mvn.w	r3, #5
 800ba74:	e08c      	b.n	800bb90 <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 800ba76:	f107 0308 	add.w	r3, r7, #8
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800ba7e:	4a31      	ldr	r2, [pc, #196]	@ (800bb44 <dhcp_parse_reply+0x5b4>)
 800ba80:	6a3b      	ldr	r3, [r7, #32]
 800ba82:	4413      	add	r3, r2
 800ba84:	2201      	movs	r2, #1
 800ba86:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800ba88:	68ba      	ldr	r2, [r7, #8]
 800ba8a:	4930      	ldr	r1, [pc, #192]	@ (800bb4c <dhcp_parse_reply+0x5bc>)
 800ba8c:	6a3b      	ldr	r3, [r7, #32]
 800ba8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800ba92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba94:	895b      	ldrh	r3, [r3, #10]
 800ba96:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d324      	bcc.n	800bae6 <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 800ba9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba9e:	895b      	ldrh	r3, [r3, #10]
 800baa0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800baa2:	1ad3      	subs	r3, r2, r3
 800baa4:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800baa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baa8:	895b      	ldrh	r3, [r3, #10]
 800baaa:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800baac:	1ad3      	subs	r3, r2, r3
 800baae:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 800bab0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800bab2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d213      	bcs.n	800bae0 <dhcp_parse_reply+0x550>
        q = q->next;
 800bab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800babe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d109      	bne.n	800bad8 <dhcp_parse_reply+0x548>
 800bac4:	4b1a      	ldr	r3, [pc, #104]	@ (800bb30 <dhcp_parse_reply+0x5a0>)
 800bac6:	f240 629d 	movw	r2, #1693	@ 0x69d
 800baca:	4922      	ldr	r1, [pc, #136]	@ (800bb54 <dhcp_parse_reply+0x5c4>)
 800bacc:	481a      	ldr	r0, [pc, #104]	@ (800bb38 <dhcp_parse_reply+0x5a8>)
 800bace:	f00b fd1d 	bl	801750c <iprintf>
 800bad2:	f06f 0305 	mvn.w	r3, #5
 800bad6:	e05b      	b.n	800bb90 <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 800bad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bade:	e002      	b.n	800bae6 <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800bae0:	f06f 0301 	mvn.w	r3, #1
 800bae4:	e054      	b.n	800bb90 <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800bae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00a      	beq.n	800bb02 <dhcp_parse_reply+0x572>
 800baec:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800baee:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d206      	bcs.n	800bb02 <dhcp_parse_reply+0x572>
 800baf4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800baf6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800baf8:	4413      	add	r3, r2
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	2bff      	cmp	r3, #255	@ 0xff
 800bafe:	f47f ad8a 	bne.w	800b616 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800bb02:	4b10      	ldr	r3, [pc, #64]	@ (800bb44 <dhcp_parse_reply+0x5b4>)
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d02d      	beq.n	800bb66 <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800bb0a:	4b10      	ldr	r3, [pc, #64]	@ (800bb4c <dhcp_parse_reply+0x5bc>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800bb10:	4b0c      	ldr	r3, [pc, #48]	@ (800bb44 <dhcp_parse_reply+0x5b4>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d102      	bne.n	800bb22 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb20:	e021      	b.n	800bb66 <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d117      	bne.n	800bb58 <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb2c:	e01b      	b.n	800bb66 <dhcp_parse_reply+0x5d6>
 800bb2e:	bf00      	nop
 800bb30:	0801860c 	.word	0x0801860c
 800bb34:	080188f0 	.word	0x080188f0
 800bb38:	08018698 	.word	0x08018698
 800bb3c:	080188c0 	.word	0x080188c0
 800bb40:	08018914 	.word	0x08018914
 800bb44:	24004350 	.word	0x24004350
 800bb48:	08018928 	.word	0x08018928
 800bb4c:	24004328 	.word	0x24004328
 800bb50:	08018940 	.word	0x08018940
 800bb54:	08018954 	.word	0x08018954
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2b03      	cmp	r3, #3
 800bb5c:	d103      	bne.n	800bb66 <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 800bb62:	2301      	movs	r3, #1
 800bb64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800bb66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d006      	beq.n	800bb7a <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 800bb70:	236c      	movs	r3, #108	@ 0x6c
 800bb72:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800bb74:	23ec      	movs	r3, #236	@ 0xec
 800bb76:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800bb78:	e527      	b.n	800b5ca <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800bb7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d006      	beq.n	800bb8e <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 800bb80:	2300      	movs	r3, #0
 800bb82:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 800bb84:	232c      	movs	r3, #44	@ 0x2c
 800bb86:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800bb88:	236c      	movs	r3, #108	@ 0x6c
 800bb8a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 800bb8c:	e51d      	b.n	800b5ca <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3740      	adds	r7, #64	@ 0x40
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b08a      	sub	sp, #40	@ 0x28
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	607a      	str	r2, [r7, #4]
 800bba4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800bba6:	4b60      	ldr	r3, [pc, #384]	@ (800bd28 <dhcp_recv+0x190>)
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bbac:	6a3b      	ldr	r3, [r7, #32]
 800bbae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbb0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f000 809d 	beq.w	800bcfa <dhcp_recv+0x162>
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	791b      	ldrb	r3, [r3, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f000 8098 	beq.w	800bcfa <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	895b      	ldrh	r3, [r3, #10]
 800bbce:	2b2b      	cmp	r3, #43	@ 0x2b
 800bbd0:	f240 8095 	bls.w	800bcfe <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	2b02      	cmp	r3, #2
 800bbda:	f040 8092 	bne.w	800bd02 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800bbde:	2300      	movs	r3, #0
 800bbe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bbe4:	e012      	b.n	800bc0c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800bbe6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbea:	6a3a      	ldr	r2, [r7, #32]
 800bbec:	4413      	add	r3, r2
 800bbee:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 800bbf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbf6:	69b9      	ldr	r1, [r7, #24]
 800bbf8:	440b      	add	r3, r1
 800bbfa:	7f1b      	ldrb	r3, [r3, #28]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	f040 8082 	bne.w	800bd06 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800bc02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc06:	3301      	adds	r3, #1
 800bc08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bc0c:	6a3b      	ldr	r3, [r7, #32]
 800bc0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bc12:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d203      	bcs.n	800bc22 <dhcp_recv+0x8a>
 800bc1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc1e:	2b05      	cmp	r3, #5
 800bc20:	d9e1      	bls.n	800bbe6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7fe fab6 	bl	800a198 <lwip_htonl>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	69fb      	ldr	r3, [r7, #28]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d169      	bne.n	800bd0a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800bc36:	69f9      	ldr	r1, [r7, #28]
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f7ff fca9 	bl	800b590 <dhcp_parse_reply>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d164      	bne.n	800bd0e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800bc44:	4b39      	ldr	r3, [pc, #228]	@ (800bd2c <dhcp_recv+0x194>)
 800bc46:	785b      	ldrb	r3, [r3, #1]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d062      	beq.n	800bd12 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800bc52:	4b37      	ldr	r3, [pc, #220]	@ (800bd30 <dhcp_recv+0x198>)
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800bc58:	7cfb      	ldrb	r3, [r7, #19]
 800bc5a:	2b05      	cmp	r3, #5
 800bc5c:	d12a      	bne.n	800bcb4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	795b      	ldrb	r3, [r3, #5]
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d112      	bne.n	800bc8c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800bc66:	6979      	ldr	r1, [r7, #20]
 800bc68:	6a38      	ldr	r0, [r7, #32]
 800bc6a:	f7fe fdcd 	bl	800a808 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800bc6e:	6a3b      	ldr	r3, [r7, #32]
 800bc70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bc74:	f003 0308 	and.w	r3, r3, #8
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d003      	beq.n	800bc84 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800bc7c:	6a38      	ldr	r0, [r7, #32]
 800bc7e:	f7fe fb3b 	bl	800a2f8 <dhcp_check>
 800bc82:	e049      	b.n	800bd18 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800bc84:	6a38      	ldr	r0, [r7, #32]
 800bc86:	f7ff f83d 	bl	800ad04 <dhcp_bind>
 800bc8a:	e045      	b.n	800bd18 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	795b      	ldrb	r3, [r3, #5]
 800bc90:	2b03      	cmp	r3, #3
 800bc92:	d007      	beq.n	800bca4 <dhcp_recv+0x10c>
 800bc94:	69fb      	ldr	r3, [r7, #28]
 800bc96:	795b      	ldrb	r3, [r3, #5]
 800bc98:	2b04      	cmp	r3, #4
 800bc9a:	d003      	beq.n	800bca4 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800bca0:	2b05      	cmp	r3, #5
 800bca2:	d139      	bne.n	800bd18 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800bca4:	6979      	ldr	r1, [r7, #20]
 800bca6:	6a38      	ldr	r0, [r7, #32]
 800bca8:	f7fe fdae 	bl	800a808 <dhcp_handle_ack>
      dhcp_bind(netif);
 800bcac:	6a38      	ldr	r0, [r7, #32]
 800bcae:	f7ff f829 	bl	800ad04 <dhcp_bind>
 800bcb2:	e031      	b.n	800bd18 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800bcb4:	7cfb      	ldrb	r3, [r7, #19]
 800bcb6:	2b06      	cmp	r3, #6
 800bcb8:	d113      	bne.n	800bce2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800bcbe:	2b03      	cmp	r3, #3
 800bcc0:	d00b      	beq.n	800bcda <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800bcc2:	69fb      	ldr	r3, [r7, #28]
 800bcc4:	795b      	ldrb	r3, [r3, #5]
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d007      	beq.n	800bcda <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800bcce:	2b04      	cmp	r3, #4
 800bcd0:	d003      	beq.n	800bcda <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	795b      	ldrb	r3, [r3, #5]
 800bcd6:	2b05      	cmp	r3, #5
 800bcd8:	d103      	bne.n	800bce2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800bcda:	6a38      	ldr	r0, [r7, #32]
 800bcdc:	f7fe faf2 	bl	800a2c4 <dhcp_handle_nak>
 800bce0:	e01a      	b.n	800bd18 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800bce2:	7cfb      	ldrb	r3, [r7, #19]
 800bce4:	2b02      	cmp	r3, #2
 800bce6:	d116      	bne.n	800bd16 <dhcp_recv+0x17e>
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	795b      	ldrb	r3, [r3, #5]
 800bcec:	2b06      	cmp	r3, #6
 800bcee:	d112      	bne.n	800bd16 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800bcf0:	6979      	ldr	r1, [r7, #20]
 800bcf2:	6a38      	ldr	r0, [r7, #32]
 800bcf4:	f7fe fb34 	bl	800a360 <dhcp_handle_offer>
 800bcf8:	e00e      	b.n	800bd18 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800bcfa:	bf00      	nop
 800bcfc:	e00c      	b.n	800bd18 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800bcfe:	bf00      	nop
 800bd00:	e00a      	b.n	800bd18 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800bd02:	bf00      	nop
 800bd04:	e008      	b.n	800bd18 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800bd06:	bf00      	nop
 800bd08:	e006      	b.n	800bd18 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800bd0a:	bf00      	nop
 800bd0c:	e004      	b.n	800bd18 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800bd0e:	bf00      	nop
 800bd10:	e002      	b.n	800bd18 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800bd12:	bf00      	nop
 800bd14:	e000      	b.n	800bd18 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800bd16:	bf00      	nop
  pbuf_free(p);
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f004 fc51 	bl	80105c0 <pbuf_free>
}
 800bd1e:	bf00      	nop
 800bd20:	3728      	adds	r7, #40	@ 0x28
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	240048e4 	.word	0x240048e4
 800bd2c:	24004350 	.word	0x24004350
 800bd30:	24004328 	.word	0x24004328

0800bd34 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b088      	sub	sp, #32
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	603b      	str	r3, [r7, #0]
 800bd40:	4613      	mov	r3, r2
 800bd42:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d108      	bne.n	800bd5c <dhcp_create_msg+0x28>
 800bd4a:	4b5f      	ldr	r3, [pc, #380]	@ (800bec8 <dhcp_create_msg+0x194>)
 800bd4c:	f240 7269 	movw	r2, #1897	@ 0x769
 800bd50:	495e      	ldr	r1, [pc, #376]	@ (800becc <dhcp_create_msg+0x198>)
 800bd52:	485f      	ldr	r0, [pc, #380]	@ (800bed0 <dhcp_create_msg+0x19c>)
 800bd54:	f00b fbda 	bl	801750c <iprintf>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	e0b1      	b.n	800bec0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d108      	bne.n	800bd74 <dhcp_create_msg+0x40>
 800bd62:	4b59      	ldr	r3, [pc, #356]	@ (800bec8 <dhcp_create_msg+0x194>)
 800bd64:	f240 726a 	movw	r2, #1898	@ 0x76a
 800bd68:	495a      	ldr	r1, [pc, #360]	@ (800bed4 <dhcp_create_msg+0x1a0>)
 800bd6a:	4859      	ldr	r0, [pc, #356]	@ (800bed0 <dhcp_create_msg+0x19c>)
 800bd6c:	f00b fbce 	bl	801750c <iprintf>
 800bd70:	2300      	movs	r3, #0
 800bd72:	e0a5      	b.n	800bec0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800bd74:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800bd78:	f44f 719a 	mov.w	r1, #308	@ 0x134
 800bd7c:	2036      	movs	r0, #54	@ 0x36
 800bd7e:	f004 f93d 	bl	800fffc <pbuf_alloc>
 800bd82:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d101      	bne.n	800bd8e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	e098      	b.n	800bec0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800bd8e:	69bb      	ldr	r3, [r7, #24]
 800bd90:	895b      	ldrh	r3, [r3, #10]
 800bd92:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800bd96:	d206      	bcs.n	800bda6 <dhcp_create_msg+0x72>
 800bd98:	4b4b      	ldr	r3, [pc, #300]	@ (800bec8 <dhcp_create_msg+0x194>)
 800bd9a:	f240 7271 	movw	r2, #1905	@ 0x771
 800bd9e:	494e      	ldr	r1, [pc, #312]	@ (800bed8 <dhcp_create_msg+0x1a4>)
 800bda0:	484b      	ldr	r0, [pc, #300]	@ (800bed0 <dhcp_create_msg+0x19c>)
 800bda2:	f00b fbb3 	bl	801750c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800bda6:	79fb      	ldrb	r3, [r7, #7]
 800bda8:	2b03      	cmp	r3, #3
 800bdaa:	d103      	bne.n	800bdb4 <dhcp_create_msg+0x80>
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	795b      	ldrb	r3, [r3, #5]
 800bdb0:	2b03      	cmp	r3, #3
 800bdb2:	d10d      	bne.n	800bdd0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	799b      	ldrb	r3, [r3, #6]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d105      	bne.n	800bdc8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800bdbc:	f00b faa6 	bl	801730c <rand>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	4b45      	ldr	r3, [pc, #276]	@ (800bedc <dhcp_create_msg+0x1a8>)
 800bdc6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800bdc8:	4b44      	ldr	r3, [pc, #272]	@ (800bedc <dhcp_create_msg+0x1a8>)
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800bdd0:	69bb      	ldr	r3, [r7, #24]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800bdd6:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800bdda:	2100      	movs	r1, #0
 800bddc:	6978      	ldr	r0, [r7, #20]
 800bdde:	f00b fced 	bl	80177bc <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	2201      	movs	r2, #1
 800bde6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	2201      	movs	r2, #1
 800bdec:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7fe f9cb 	bl	800a198 <lwip_htonl>
 800be02:	4602      	mov	r2, r0
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800be08:	79fb      	ldrb	r3, [r7, #7]
 800be0a:	2b08      	cmp	r3, #8
 800be0c:	d010      	beq.n	800be30 <dhcp_create_msg+0xfc>
 800be0e:	79fb      	ldrb	r3, [r7, #7]
 800be10:	2b04      	cmp	r3, #4
 800be12:	d00d      	beq.n	800be30 <dhcp_create_msg+0xfc>
 800be14:	79fb      	ldrb	r3, [r7, #7]
 800be16:	2b07      	cmp	r3, #7
 800be18:	d00a      	beq.n	800be30 <dhcp_create_msg+0xfc>
 800be1a:	79fb      	ldrb	r3, [r7, #7]
 800be1c:	2b03      	cmp	r3, #3
 800be1e:	d10c      	bne.n	800be3a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800be24:	2b05      	cmp	r3, #5
 800be26:	d003      	beq.n	800be30 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	795b      	ldrb	r3, [r3, #5]
 800be2c:	2b04      	cmp	r3, #4
 800be2e:	d104      	bne.n	800be3a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	3304      	adds	r3, #4
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800be3a:	2300      	movs	r3, #0
 800be3c:	83fb      	strh	r3, [r7, #30]
 800be3e:	e00c      	b.n	800be5a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800be40:	8bfa      	ldrh	r2, [r7, #30]
 800be42:	8bfb      	ldrh	r3, [r7, #30]
 800be44:	68f9      	ldr	r1, [r7, #12]
 800be46:	440a      	add	r2, r1
 800be48:	f892 102e 	ldrb.w	r1, [r2, #46]	@ 0x2e
 800be4c:	697a      	ldr	r2, [r7, #20]
 800be4e:	4413      	add	r3, r2
 800be50:	460a      	mov	r2, r1
 800be52:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800be54:	8bfb      	ldrh	r3, [r7, #30]
 800be56:	3301      	adds	r3, #1
 800be58:	83fb      	strh	r3, [r7, #30]
 800be5a:	8bfb      	ldrh	r3, [r7, #30]
 800be5c:	2b05      	cmp	r3, #5
 800be5e:	d9ef      	bls.n	800be40 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	2200      	movs	r2, #0
 800be64:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 800be68:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 800be6c:	2200      	movs	r2, #0
 800be6e:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 800be72:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800be76:	2200      	movs	r2, #0
 800be78:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 800be7c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 800be80:	2200      	movs	r2, #0
 800be82:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 800be86:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800be90:	2301      	movs	r3, #1
 800be92:	2235      	movs	r2, #53	@ 0x35
 800be94:	2000      	movs	r0, #0
 800be96:	f7ff faab 	bl	800b3f0 <dhcp_option>
 800be9a:	4603      	mov	r3, r0
 800be9c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800bea4:	79fa      	ldrb	r2, [r7, #7]
 800bea6:	8a7b      	ldrh	r3, [r7, #18]
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7ff fad5 	bl	800b458 <dhcp_option_byte>
 800beae:	4603      	mov	r3, r0
 800beb0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d002      	beq.n	800bebe <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	8a7a      	ldrh	r2, [r7, #18]
 800bebc:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800bebe:	69bb      	ldr	r3, [r7, #24]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3720      	adds	r7, #32
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	0801860c 	.word	0x0801860c
 800becc:	08018968 	.word	0x08018968
 800bed0:	08018698 	.word	0x08018698
 800bed4:	08018988 	.word	0x08018988
 800bed8:	080189a8 	.word	0x080189a8
 800bedc:	24004364 	.word	0x24004364

0800bee0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	4603      	mov	r3, r0
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	607a      	str	r2, [r7, #4]
 800beec:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800beee:	89fb      	ldrh	r3, [r7, #14]
 800bef0:	1c5a      	adds	r2, r3, #1
 800bef2:	81fa      	strh	r2, [r7, #14]
 800bef4:	461a      	mov	r2, r3
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	4413      	add	r3, r2
 800befa:	22ff      	movs	r2, #255	@ 0xff
 800befc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800befe:	e007      	b.n	800bf10 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800bf00:	89fb      	ldrh	r3, [r7, #14]
 800bf02:	1c5a      	adds	r2, r3, #1
 800bf04:	81fa      	strh	r2, [r7, #14]
 800bf06:	461a      	mov	r2, r3
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800bf10:	89fb      	ldrh	r3, [r7, #14]
 800bf12:	2b43      	cmp	r3, #67	@ 0x43
 800bf14:	d904      	bls.n	800bf20 <dhcp_option_trailer+0x40>
 800bf16:	89fb      	ldrh	r3, [r7, #14]
 800bf18:	f003 0303 	and.w	r3, r3, #3
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d002      	beq.n	800bf26 <dhcp_option_trailer+0x46>
 800bf20:	89fb      	ldrh	r3, [r7, #14]
 800bf22:	2b43      	cmp	r3, #67	@ 0x43
 800bf24:	d9ec      	bls.n	800bf00 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800bf26:	89fb      	ldrh	r3, [r7, #14]
 800bf28:	33f0      	adds	r3, #240	@ 0xf0
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f004 f9c2 	bl	80102b8 <pbuf_realloc>
}
 800bf34:	bf00      	nop
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b085      	sub	sp, #20
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d017      	beq.n	800bf7a <dhcp_supplied_address+0x3e>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d013      	beq.n	800bf7a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf56:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	795b      	ldrb	r3, [r3, #5]
 800bf5c:	2b0a      	cmp	r3, #10
 800bf5e:	d007      	beq.n	800bf70 <dhcp_supplied_address+0x34>
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	795b      	ldrb	r3, [r3, #5]
 800bf64:	2b05      	cmp	r3, #5
 800bf66:	d003      	beq.n	800bf70 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800bf6c:	2b04      	cmp	r3, #4
 800bf6e:	d101      	bne.n	800bf74 <dhcp_supplied_address+0x38>
 800bf70:	2301      	movs	r3, #1
 800bf72:	e000      	b.n	800bf76 <dhcp_supplied_address+0x3a>
 800bf74:	2300      	movs	r3, #0
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	e000      	b.n	800bf7c <dhcp_supplied_address+0x40>
  }
  return 0;
 800bf7a:	2300      	movs	r3, #0
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3714      	adds	r7, #20
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800bf8c:	bf00      	nop
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr
	...

0800bf98 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	6039      	str	r1, [r7, #0]
 800bfa2:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 800bfa4:	79fb      	ldrb	r3, [r7, #7]
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d80f      	bhi.n	800bfca <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d006      	beq.n	800bfbe <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800bfb0:	79fb      	ldrb	r3, [r7, #7]
 800bfb2:	4909      	ldr	r1, [pc, #36]	@ (800bfd8 <dns_setserver+0x40>)
 800bfb4:	683a      	ldr	r2, [r7, #0]
 800bfb6:	6812      	ldr	r2, [r2, #0]
 800bfb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800bfbc:	e005      	b.n	800bfca <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800bfbe:	79fb      	ldrb	r3, [r7, #7]
 800bfc0:	4905      	ldr	r1, [pc, #20]	@ (800bfd8 <dns_setserver+0x40>)
 800bfc2:	4a06      	ldr	r2, [pc, #24]	@ (800bfdc <dns_setserver+0x44>)
 800bfc4:	6812      	ldr	r2, [r2, #0]
 800bfc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bfca:	bf00      	nop
 800bfcc:	370c      	adds	r7, #12
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr
 800bfd6:	bf00      	nop
 800bfd8:	240047e8 	.word	0x240047e8
 800bfdc:	0801b82c 	.word	0x0801b82c

0800bfe0 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800bfe4:	f000 faa8 	bl	800c538 <dns_check_entries>
}
 800bfe8:	bf00      	nop
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b090      	sub	sp, #64	@ 0x40
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	4603      	mov	r3, r0
 800bff4:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800bff6:	79fa      	ldrb	r2, [r7, #7]
 800bff8:	4613      	mov	r3, r2
 800bffa:	011b      	lsls	r3, r3, #4
 800bffc:	4413      	add	r3, r2
 800bffe:	011b      	lsls	r3, r3, #4
 800c000:	4a6c      	ldr	r2, [pc, #432]	@ (800c1b4 <dns_send+0x1c8>)
 800c002:	4413      	add	r3, r2
 800c004:	633b      	str	r3, [r7, #48]	@ 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800c006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c008:	7adb      	ldrb	r3, [r3, #11]
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d906      	bls.n	800c01c <dns_send+0x30>
 800c00e:	4b6a      	ldr	r3, [pc, #424]	@ (800c1b8 <dns_send+0x1cc>)
 800c010:	f240 22fa 	movw	r2, #762	@ 0x2fa
 800c014:	4969      	ldr	r1, [pc, #420]	@ (800c1bc <dns_send+0x1d0>)
 800c016:	486a      	ldr	r0, [pc, #424]	@ (800c1c0 <dns_send+0x1d4>)
 800c018:	f00b fa78 	bl	801750c <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800c01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c01e:	7adb      	ldrb	r3, [r3, #11]
 800c020:	461a      	mov	r2, r3
 800c022:	4b68      	ldr	r3, [pc, #416]	@ (800c1c4 <dns_send+0x1d8>)
 800c024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d109      	bne.n	800c040 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800c02c:	79fb      	ldrb	r3, [r7, #7]
 800c02e:	2100      	movs	r1, #0
 800c030:	4618      	mov	r0, r3
 800c032:	f000 f8cb 	bl	800c1cc <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800c036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c038:	2200      	movs	r2, #0
 800c03a:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800c03c:	2300      	movs	r3, #0
 800c03e:	e0b4      	b.n	800c1aa <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800c040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c042:	3310      	adds	r3, #16
 800c044:	4618      	mov	r0, r3
 800c046:	f7f4 f94b 	bl	80002e0 <strlen>
 800c04a:	4603      	mov	r3, r0
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	3312      	adds	r3, #18
 800c050:	b29b      	uxth	r3, r3
 800c052:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c056:	4619      	mov	r1, r3
 800c058:	2036      	movs	r0, #54	@ 0x36
 800c05a:	f003 ffcf 	bl	800fffc <pbuf_alloc>
 800c05e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800c060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c062:	2b00      	cmp	r3, #0
 800c064:	f000 8095 	beq.w	800c192 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800c068:	f107 0310 	add.w	r3, r7, #16
 800c06c:	220c      	movs	r2, #12
 800c06e:	2100      	movs	r1, #0
 800c070:	4618      	mov	r0, r3
 800c072:	f00b fba3 	bl	80177bc <memset>
    hdr.id = lwip_htons(entry->txid);
 800c076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c078:	891b      	ldrh	r3, [r3, #8]
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7fe f876 	bl	800a16c <lwip_htons>
 800c080:	4603      	mov	r3, r0
 800c082:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800c084:	2301      	movs	r3, #1
 800c086:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800c088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c08c:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800c08e:	f107 0310 	add.w	r3, r7, #16
 800c092:	220c      	movs	r2, #12
 800c094:	4619      	mov	r1, r3
 800c096:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c098:	f004 fd46 	bl	8010b28 <pbuf_take>
    hostname = entry->name;
 800c09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c09e:	3310      	adds	r3, #16
 800c0a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    --hostname;
 800c0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0a4:	3b01      	subs	r3, #1
 800c0a6:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800c0a8:	230c      	movs	r3, #12
 800c0aa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    do {
      ++hostname;
 800c0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      hostname_part = hostname;
 800c0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c0bc:	e007      	b.n	800c0ce <dns_send+0xe2>
        ++n;
 800c0be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c0d4:	d003      	beq.n	800c0de <dns_send+0xf2>
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1ef      	bne.n	800c0be <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800c0de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e2:	1ad3      	subs	r3, r2, r3
 800c0e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800c0e6:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800c0e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c0ec:	4413      	add	r3, r2
 800c0ee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	dc53      	bgt.n	800c19e <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800c0f6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800c0fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c100:	f004 fe40 	bl	8010d84 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800c104:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c106:	3301      	adds	r3, #1
 800c108:	b29b      	uxth	r3, r3
 800c10a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c10c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c10e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c110:	f004 fd9c 	bl	8010c4c <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800c114:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c118:	b29a      	uxth	r2, r3
 800c11a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c11c:	4413      	add	r3, r2
 800c11e:	b29b      	uxth	r3, r3
 800c120:	3301      	adds	r3, #1
 800c122:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    } while (*hostname != 0);
 800c124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1bf      	bne.n	800c0ac <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800c12c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c12e:	2200      	movs	r2, #0
 800c130:	4619      	mov	r1, r3
 800c132:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c134:	f004 fe26 	bl	8010d84 <pbuf_put_at>
    query_idx++;
 800c138:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c13a:	3301      	adds	r3, #1
 800c13c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800c13e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c142:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800c144:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c148:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800c14a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c14c:	f107 010c 	add.w	r1, r7, #12
 800c150:	2204      	movs	r2, #4
 800c152:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c154:	f004 fd7a 	bl	8010c4c <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800c158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c15a:	7bdb      	ldrb	r3, [r3, #15]
 800c15c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800c160:	2335      	movs	r3, #53	@ 0x35
 800c162:	847b      	strh	r3, [r7, #34]	@ 0x22
      dst = &dns_servers[entry->server_idx];
 800c164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c166:	7adb      	ldrb	r3, [r3, #11]
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	4a16      	ldr	r2, [pc, #88]	@ (800c1c4 <dns_send+0x1d8>)
 800c16c:	4413      	add	r3, r2
 800c16e:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800c170:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c174:	4a14      	ldr	r2, [pc, #80]	@ (800c1c8 <dns_send+0x1dc>)
 800c176:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c17a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c17c:	69fa      	ldr	r2, [r7, #28]
 800c17e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c180:	f00a fd6e 	bl	8016c60 <udp_sendto>
 800c184:	4603      	mov	r3, r0
 800c186:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* free pbuf */
    pbuf_free(p);
 800c18a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c18c:	f004 fa18 	bl	80105c0 <pbuf_free>
 800c190:	e002      	b.n	800c198 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800c192:	23ff      	movs	r3, #255	@ 0xff
 800c194:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return err;
 800c198:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c19c:	e005      	b.n	800c1aa <dns_send+0x1be>
        goto overflow_return;
 800c19e:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800c1a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c1a2:	f004 fa0d 	bl	80105c0 <pbuf_free>
  return ERR_VAL;
 800c1a6:	f06f 0305 	mvn.w	r3, #5
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3740      	adds	r7, #64	@ 0x40
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	24004378 	.word	0x24004378
 800c1b8:	080189e8 	.word	0x080189e8
 800c1bc:	08018a44 	.word	0x08018a44
 800c1c0:	08018a5c 	.word	0x08018a5c
 800c1c4:	240047e8 	.word	0x240047e8
 800c1c8:	24004368 	.word	0x24004368

0800c1cc <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800c1cc:	b590      	push	{r4, r7, lr}
 800c1ce:	b085      	sub	sp, #20
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	6039      	str	r1, [r7, #0]
 800c1d6:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800c1d8:	2300      	movs	r3, #0
 800c1da:	73fb      	strb	r3, [r7, #15]
 800c1dc:	e03d      	b.n	800c25a <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800c1de:	7bfa      	ldrb	r2, [r7, #15]
 800c1e0:	4957      	ldr	r1, [pc, #348]	@ (800c340 <dns_call_found+0x174>)
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	005b      	lsls	r3, r3, #1
 800c1e6:	4413      	add	r3, r2
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	440b      	add	r3, r1
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d030      	beq.n	800c254 <dns_call_found+0x88>
 800c1f2:	7bfa      	ldrb	r2, [r7, #15]
 800c1f4:	4952      	ldr	r1, [pc, #328]	@ (800c340 <dns_call_found+0x174>)
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	005b      	lsls	r3, r3, #1
 800c1fa:	4413      	add	r3, r2
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	440b      	add	r3, r1
 800c200:	3308      	adds	r3, #8
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	79fa      	ldrb	r2, [r7, #7]
 800c206:	429a      	cmp	r2, r3
 800c208:	d124      	bne.n	800c254 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800c20a:	7bfa      	ldrb	r2, [r7, #15]
 800c20c:	494c      	ldr	r1, [pc, #304]	@ (800c340 <dns_call_found+0x174>)
 800c20e:	4613      	mov	r3, r2
 800c210:	005b      	lsls	r3, r3, #1
 800c212:	4413      	add	r3, r2
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	440b      	add	r3, r1
 800c218:	681c      	ldr	r4, [r3, #0]
 800c21a:	79fa      	ldrb	r2, [r7, #7]
 800c21c:	4613      	mov	r3, r2
 800c21e:	011b      	lsls	r3, r3, #4
 800c220:	4413      	add	r3, r2
 800c222:	011b      	lsls	r3, r3, #4
 800c224:	3310      	adds	r3, #16
 800c226:	4a47      	ldr	r2, [pc, #284]	@ (800c344 <dns_call_found+0x178>)
 800c228:	1898      	adds	r0, r3, r2
 800c22a:	7bfa      	ldrb	r2, [r7, #15]
 800c22c:	4944      	ldr	r1, [pc, #272]	@ (800c340 <dns_call_found+0x174>)
 800c22e:	4613      	mov	r3, r2
 800c230:	005b      	lsls	r3, r3, #1
 800c232:	4413      	add	r3, r2
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	440b      	add	r3, r1
 800c238:	3304      	adds	r3, #4
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	461a      	mov	r2, r3
 800c23e:	6839      	ldr	r1, [r7, #0]
 800c240:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800c242:	7bfa      	ldrb	r2, [r7, #15]
 800c244:	493e      	ldr	r1, [pc, #248]	@ (800c340 <dns_call_found+0x174>)
 800c246:	4613      	mov	r3, r2
 800c248:	005b      	lsls	r3, r3, #1
 800c24a:	4413      	add	r3, r2
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	440b      	add	r3, r1
 800c250:	2200      	movs	r2, #0
 800c252:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800c254:	7bfb      	ldrb	r3, [r7, #15]
 800c256:	3301      	adds	r3, #1
 800c258:	73fb      	strb	r3, [r7, #15]
 800c25a:	7bfb      	ldrb	r3, [r7, #15]
 800c25c:	2b03      	cmp	r3, #3
 800c25e:	d9be      	bls.n	800c1de <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800c260:	2300      	movs	r3, #0
 800c262:	73fb      	strb	r3, [r7, #15]
 800c264:	e031      	b.n	800c2ca <dns_call_found+0xfe>
    if (i == idx) {
 800c266:	7bfa      	ldrb	r2, [r7, #15]
 800c268:	79fb      	ldrb	r3, [r7, #7]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d029      	beq.n	800c2c2 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800c26e:	7bfa      	ldrb	r2, [r7, #15]
 800c270:	4934      	ldr	r1, [pc, #208]	@ (800c344 <dns_call_found+0x178>)
 800c272:	4613      	mov	r3, r2
 800c274:	011b      	lsls	r3, r3, #4
 800c276:	4413      	add	r3, r2
 800c278:	011b      	lsls	r3, r3, #4
 800c27a:	440b      	add	r3, r1
 800c27c:	330a      	adds	r3, #10
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	2b02      	cmp	r3, #2
 800c282:	d11f      	bne.n	800c2c4 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800c284:	7bfa      	ldrb	r2, [r7, #15]
 800c286:	492f      	ldr	r1, [pc, #188]	@ (800c344 <dns_call_found+0x178>)
 800c288:	4613      	mov	r3, r2
 800c28a:	011b      	lsls	r3, r3, #4
 800c28c:	4413      	add	r3, r2
 800c28e:	011b      	lsls	r3, r3, #4
 800c290:	440b      	add	r3, r1
 800c292:	330f      	adds	r3, #15
 800c294:	7819      	ldrb	r1, [r3, #0]
 800c296:	79fa      	ldrb	r2, [r7, #7]
 800c298:	482a      	ldr	r0, [pc, #168]	@ (800c344 <dns_call_found+0x178>)
 800c29a:	4613      	mov	r3, r2
 800c29c:	011b      	lsls	r3, r3, #4
 800c29e:	4413      	add	r3, r2
 800c2a0:	011b      	lsls	r3, r3, #4
 800c2a2:	4403      	add	r3, r0
 800c2a4:	330f      	adds	r3, #15
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	4299      	cmp	r1, r3
 800c2aa:	d10b      	bne.n	800c2c4 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800c2ac:	79fa      	ldrb	r2, [r7, #7]
 800c2ae:	4925      	ldr	r1, [pc, #148]	@ (800c344 <dns_call_found+0x178>)
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	011b      	lsls	r3, r3, #4
 800c2b4:	4413      	add	r3, r2
 800c2b6:	011b      	lsls	r3, r3, #4
 800c2b8:	440b      	add	r3, r1
 800c2ba:	330f      	adds	r3, #15
 800c2bc:	2204      	movs	r2, #4
 800c2be:	701a      	strb	r2, [r3, #0]
        break;
 800c2c0:	e006      	b.n	800c2d0 <dns_call_found+0x104>
      continue; /* only check other requests */
 800c2c2:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	73fb      	strb	r3, [r7, #15]
 800c2ca:	7bfb      	ldrb	r3, [r7, #15]
 800c2cc:	2b03      	cmp	r3, #3
 800c2ce:	d9ca      	bls.n	800c266 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800c2d0:	79fa      	ldrb	r2, [r7, #7]
 800c2d2:	491c      	ldr	r1, [pc, #112]	@ (800c344 <dns_call_found+0x178>)
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	011b      	lsls	r3, r3, #4
 800c2d8:	4413      	add	r3, r2
 800c2da:	011b      	lsls	r3, r3, #4
 800c2dc:	440b      	add	r3, r1
 800c2de:	330f      	adds	r3, #15
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	2b03      	cmp	r3, #3
 800c2e4:	d827      	bhi.n	800c336 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800c2e6:	79fa      	ldrb	r2, [r7, #7]
 800c2e8:	4916      	ldr	r1, [pc, #88]	@ (800c344 <dns_call_found+0x178>)
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	011b      	lsls	r3, r3, #4
 800c2ee:	4413      	add	r3, r2
 800c2f0:	011b      	lsls	r3, r3, #4
 800c2f2:	440b      	add	r3, r1
 800c2f4:	330f      	adds	r3, #15
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	4b13      	ldr	r3, [pc, #76]	@ (800c348 <dns_call_found+0x17c>)
 800c2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c300:	4618      	mov	r0, r3
 800c302:	f00a ff79 	bl	80171f8 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800c306:	79fa      	ldrb	r2, [r7, #7]
 800c308:	490e      	ldr	r1, [pc, #56]	@ (800c344 <dns_call_found+0x178>)
 800c30a:	4613      	mov	r3, r2
 800c30c:	011b      	lsls	r3, r3, #4
 800c30e:	4413      	add	r3, r2
 800c310:	011b      	lsls	r3, r3, #4
 800c312:	440b      	add	r3, r1
 800c314:	330f      	adds	r3, #15
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	4619      	mov	r1, r3
 800c31a:	4b0b      	ldr	r3, [pc, #44]	@ (800c348 <dns_call_found+0x17c>)
 800c31c:	2200      	movs	r2, #0
 800c31e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800c322:	79fa      	ldrb	r2, [r7, #7]
 800c324:	4907      	ldr	r1, [pc, #28]	@ (800c344 <dns_call_found+0x178>)
 800c326:	4613      	mov	r3, r2
 800c328:	011b      	lsls	r3, r3, #4
 800c32a:	4413      	add	r3, r2
 800c32c:	011b      	lsls	r3, r3, #4
 800c32e:	440b      	add	r3, r1
 800c330:	330f      	adds	r3, #15
 800c332:	2204      	movs	r2, #4
 800c334:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800c336:	bf00      	nop
 800c338:	3714      	adds	r7, #20
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd90      	pop	{r4, r7, pc}
 800c33e:	bf00      	nop
 800c340:	240047b8 	.word	0x240047b8
 800c344:	24004378 	.word	0x24004378
 800c348:	24004368 	.word	0x24004368

0800c34c <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800c352:	f00a ffdb 	bl	801730c <rand>
 800c356:	4603      	mov	r3, r0
 800c358:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800c35a:	2300      	movs	r3, #0
 800c35c:	71fb      	strb	r3, [r7, #7]
 800c35e:	e01a      	b.n	800c396 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800c360:	79fa      	ldrb	r2, [r7, #7]
 800c362:	4911      	ldr	r1, [pc, #68]	@ (800c3a8 <dns_create_txid+0x5c>)
 800c364:	4613      	mov	r3, r2
 800c366:	011b      	lsls	r3, r3, #4
 800c368:	4413      	add	r3, r2
 800c36a:	011b      	lsls	r3, r3, #4
 800c36c:	440b      	add	r3, r1
 800c36e:	330a      	adds	r3, #10
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	2b02      	cmp	r3, #2
 800c374:	d10c      	bne.n	800c390 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800c376:	79fa      	ldrb	r2, [r7, #7]
 800c378:	490b      	ldr	r1, [pc, #44]	@ (800c3a8 <dns_create_txid+0x5c>)
 800c37a:	4613      	mov	r3, r2
 800c37c:	011b      	lsls	r3, r3, #4
 800c37e:	4413      	add	r3, r2
 800c380:	011b      	lsls	r3, r3, #4
 800c382:	440b      	add	r3, r1
 800c384:	3308      	adds	r3, #8
 800c386:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800c388:	88ba      	ldrh	r2, [r7, #4]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d100      	bne.n	800c390 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800c38e:	e7e0      	b.n	800c352 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800c390:	79fb      	ldrb	r3, [r7, #7]
 800c392:	3301      	adds	r3, #1
 800c394:	71fb      	strb	r3, [r7, #7]
 800c396:	79fb      	ldrb	r3, [r7, #7]
 800c398:	2b03      	cmp	r3, #3
 800c39a:	d9e1      	bls.n	800c360 <dns_create_txid+0x14>
    }
  }

  return txid;
 800c39c:	88bb      	ldrh	r3, [r7, #4]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3708      	adds	r7, #8
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	24004378 	.word	0x24004378

0800c3ac <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b085      	sub	sp, #20
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d00d      	beq.n	800c3da <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	7adb      	ldrb	r3, [r3, #11]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d109      	bne.n	800c3da <dns_backupserver_available+0x2e>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	7adb      	ldrb	r3, [r3, #11]
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	4a06      	ldr	r2, [pc, #24]	@ (800c3e8 <dns_backupserver_available+0x3c>)
 800c3ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d001      	beq.n	800c3da <dns_backupserver_available+0x2e>
      ret = 1;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3714      	adds	r7, #20
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr
 800c3e8:	240047e8 	.word	0x240047e8

0800c3ec <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800c3f6:	79fa      	ldrb	r2, [r7, #7]
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	011b      	lsls	r3, r3, #4
 800c3fc:	4413      	add	r3, r2
 800c3fe:	011b      	lsls	r3, r3, #4
 800c400:	4a48      	ldr	r2, [pc, #288]	@ (800c524 <dns_check_entry+0x138>)
 800c402:	4413      	add	r3, r2
 800c404:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800c406:	79fb      	ldrb	r3, [r7, #7]
 800c408:	2b03      	cmp	r3, #3
 800c40a:	d906      	bls.n	800c41a <dns_check_entry+0x2e>
 800c40c:	4b46      	ldr	r3, [pc, #280]	@ (800c528 <dns_check_entry+0x13c>)
 800c40e:	f240 421c 	movw	r2, #1052	@ 0x41c
 800c412:	4946      	ldr	r1, [pc, #280]	@ (800c52c <dns_check_entry+0x140>)
 800c414:	4846      	ldr	r0, [pc, #280]	@ (800c530 <dns_check_entry+0x144>)
 800c416:	f00b f879 	bl	801750c <iprintf>

  switch (entry->state) {
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	7a9b      	ldrb	r3, [r3, #10]
 800c41e:	2b03      	cmp	r3, #3
 800c420:	d86f      	bhi.n	800c502 <dns_check_entry+0x116>
 800c422:	a201      	add	r2, pc, #4	@ (adr r2, 800c428 <dns_check_entry+0x3c>)
 800c424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c428:	0800c513 	.word	0x0800c513
 800c42c:	0800c439 	.word	0x0800c439
 800c430:	0800c46b 	.word	0x0800c46b
 800c434:	0800c4e1 	.word	0x0800c4e1
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800c438:	f7ff ff88 	bl	800c34c <dns_create_txid>
 800c43c:	4603      	mov	r3, r0
 800c43e:	461a      	mov	r2, r3
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2202      	movs	r2, #2
 800c448:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2200      	movs	r2, #0
 800c44e:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2201      	movs	r2, #1
 800c454:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2200      	movs	r2, #0
 800c45a:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800c45c:	79fb      	ldrb	r3, [r7, #7]
 800c45e:	4618      	mov	r0, r3
 800c460:	f7ff fdc4 	bl	800bfec <dns_send>
 800c464:	4603      	mov	r3, r0
 800c466:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800c468:	e058      	b.n	800c51c <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	7b1b      	ldrb	r3, [r3, #12]
 800c46e:	3b01      	subs	r3, #1
 800c470:	b2da      	uxtb	r2, r3
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	731a      	strb	r2, [r3, #12]
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	7b1b      	ldrb	r3, [r3, #12]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d14b      	bne.n	800c516 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	7b5b      	ldrb	r3, [r3, #13]
 800c482:	3301      	adds	r3, #1
 800c484:	b2da      	uxtb	r2, r3
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	735a      	strb	r2, [r3, #13]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	7b5b      	ldrb	r3, [r3, #13]
 800c48e:	2b04      	cmp	r3, #4
 800c490:	d11b      	bne.n	800c4ca <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	f7ff ff8a 	bl	800c3ac <dns_backupserver_available>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00c      	beq.n	800c4b8 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	7adb      	ldrb	r3, [r3, #11]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	b2da      	uxtb	r2, r3
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	735a      	strb	r2, [r3, #13]
 800c4b6:	e00c      	b.n	800c4d2 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800c4b8:	79fb      	ldrb	r3, [r7, #7]
 800c4ba:	2100      	movs	r1, #0
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7ff fe85 	bl	800c1cc <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	729a      	strb	r2, [r3, #10]
            break;
 800c4c8:	e028      	b.n	800c51c <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	7b5a      	ldrb	r2, [r3, #13]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800c4d2:	79fb      	ldrb	r3, [r7, #7]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7ff fd89 	bl	800bfec <dns_send>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800c4de:	e01a      	b.n	800c516 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d008      	beq.n	800c4fa <dns_check_entry+0x10e>
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	1e5a      	subs	r2, r3, #1
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	601a      	str	r2, [r3, #0]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d10f      	bne.n	800c51a <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	729a      	strb	r2, [r3, #10]
      }
      break;
 800c500:	e00b      	b.n	800c51a <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800c502:	4b09      	ldr	r3, [pc, #36]	@ (800c528 <dns_check_entry+0x13c>)
 800c504:	f240 425b 	movw	r2, #1115	@ 0x45b
 800c508:	490a      	ldr	r1, [pc, #40]	@ (800c534 <dns_check_entry+0x148>)
 800c50a:	4809      	ldr	r0, [pc, #36]	@ (800c530 <dns_check_entry+0x144>)
 800c50c:	f00a fffe 	bl	801750c <iprintf>
      break;
 800c510:	e004      	b.n	800c51c <dns_check_entry+0x130>
      break;
 800c512:	bf00      	nop
 800c514:	e002      	b.n	800c51c <dns_check_entry+0x130>
      break;
 800c516:	bf00      	nop
 800c518:	e000      	b.n	800c51c <dns_check_entry+0x130>
      break;
 800c51a:	bf00      	nop
  }
}
 800c51c:	bf00      	nop
 800c51e:	3710      	adds	r7, #16
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	24004378 	.word	0x24004378
 800c528:	080189e8 	.word	0x080189e8
 800c52c:	08018a84 	.word	0x08018a84
 800c530:	08018a5c 	.word	0x08018a5c
 800c534:	08018aa0 	.word	0x08018aa0

0800c538 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800c53e:	2300      	movs	r3, #0
 800c540:	71fb      	strb	r3, [r7, #7]
 800c542:	e006      	b.n	800c552 <dns_check_entries+0x1a>
    dns_check_entry(i);
 800c544:	79fb      	ldrb	r3, [r7, #7]
 800c546:	4618      	mov	r0, r3
 800c548:	f7ff ff50 	bl	800c3ec <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800c54c:	79fb      	ldrb	r3, [r7, #7]
 800c54e:	3301      	adds	r3, #1
 800c550:	71fb      	strb	r3, [r7, #7]
 800c552:	79fb      	ldrb	r3, [r7, #7]
 800c554:	2b03      	cmp	r3, #3
 800c556:	d9f5      	bls.n	800c544 <dns_check_entries+0xc>
  }
}
 800c558:	bf00      	nop
 800c55a:	bf00      	nop
 800c55c:	3708      	adds	r7, #8
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
	...

0800c564 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c56c:	4915      	ldr	r1, [pc, #84]	@ (800c5c4 <etharp_free_entry+0x60>)
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	4613      	mov	r3, r2
 800c572:	005b      	lsls	r3, r3, #1
 800c574:	4413      	add	r3, r2
 800c576:	00db      	lsls	r3, r3, #3
 800c578:	440b      	add	r3, r1
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d013      	beq.n	800c5a8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c580:	4910      	ldr	r1, [pc, #64]	@ (800c5c4 <etharp_free_entry+0x60>)
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	4613      	mov	r3, r2
 800c586:	005b      	lsls	r3, r3, #1
 800c588:	4413      	add	r3, r2
 800c58a:	00db      	lsls	r3, r3, #3
 800c58c:	440b      	add	r3, r1
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4618      	mov	r0, r3
 800c592:	f004 f815 	bl	80105c0 <pbuf_free>
    arp_table[i].q = NULL;
 800c596:	490b      	ldr	r1, [pc, #44]	@ (800c5c4 <etharp_free_entry+0x60>)
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	4613      	mov	r3, r2
 800c59c:	005b      	lsls	r3, r3, #1
 800c59e:	4413      	add	r3, r2
 800c5a0:	00db      	lsls	r3, r3, #3
 800c5a2:	440b      	add	r3, r1
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c5a8:	4906      	ldr	r1, [pc, #24]	@ (800c5c4 <etharp_free_entry+0x60>)
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	4613      	mov	r3, r2
 800c5ae:	005b      	lsls	r3, r3, #1
 800c5b0:	4413      	add	r3, r2
 800c5b2:	00db      	lsls	r3, r3, #3
 800c5b4:	440b      	add	r3, r1
 800c5b6:	3314      	adds	r3, #20
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c5bc:	bf00      	nop
 800c5be:	3708      	adds	r7, #8
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	240047f0 	.word	0x240047f0

0800c5c8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	607b      	str	r3, [r7, #4]
 800c5d2:	e096      	b.n	800c702 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c5d4:	494f      	ldr	r1, [pc, #316]	@ (800c714 <etharp_tmr+0x14c>)
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	4613      	mov	r3, r2
 800c5da:	005b      	lsls	r3, r3, #1
 800c5dc:	4413      	add	r3, r2
 800c5de:	00db      	lsls	r3, r3, #3
 800c5e0:	440b      	add	r3, r1
 800c5e2:	3314      	adds	r3, #20
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c5e8:	78fb      	ldrb	r3, [r7, #3]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f000 8086 	beq.w	800c6fc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c5f0:	4948      	ldr	r1, [pc, #288]	@ (800c714 <etharp_tmr+0x14c>)
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	4613      	mov	r3, r2
 800c5f6:	005b      	lsls	r3, r3, #1
 800c5f8:	4413      	add	r3, r2
 800c5fa:	00db      	lsls	r3, r3, #3
 800c5fc:	440b      	add	r3, r1
 800c5fe:	3312      	adds	r3, #18
 800c600:	881b      	ldrh	r3, [r3, #0]
 800c602:	3301      	adds	r3, #1
 800c604:	b298      	uxth	r0, r3
 800c606:	4943      	ldr	r1, [pc, #268]	@ (800c714 <etharp_tmr+0x14c>)
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	4613      	mov	r3, r2
 800c60c:	005b      	lsls	r3, r3, #1
 800c60e:	4413      	add	r3, r2
 800c610:	00db      	lsls	r3, r3, #3
 800c612:	440b      	add	r3, r1
 800c614:	3312      	adds	r3, #18
 800c616:	4602      	mov	r2, r0
 800c618:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c61a:	493e      	ldr	r1, [pc, #248]	@ (800c714 <etharp_tmr+0x14c>)
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	4613      	mov	r3, r2
 800c620:	005b      	lsls	r3, r3, #1
 800c622:	4413      	add	r3, r2
 800c624:	00db      	lsls	r3, r3, #3
 800c626:	440b      	add	r3, r1
 800c628:	3312      	adds	r3, #18
 800c62a:	881b      	ldrh	r3, [r3, #0]
 800c62c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c630:	d215      	bcs.n	800c65e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c632:	4938      	ldr	r1, [pc, #224]	@ (800c714 <etharp_tmr+0x14c>)
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	4613      	mov	r3, r2
 800c638:	005b      	lsls	r3, r3, #1
 800c63a:	4413      	add	r3, r2
 800c63c:	00db      	lsls	r3, r3, #3
 800c63e:	440b      	add	r3, r1
 800c640:	3314      	adds	r3, #20
 800c642:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c644:	2b01      	cmp	r3, #1
 800c646:	d10e      	bne.n	800c666 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c648:	4932      	ldr	r1, [pc, #200]	@ (800c714 <etharp_tmr+0x14c>)
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	4613      	mov	r3, r2
 800c64e:	005b      	lsls	r3, r3, #1
 800c650:	4413      	add	r3, r2
 800c652:	00db      	lsls	r3, r3, #3
 800c654:	440b      	add	r3, r1
 800c656:	3312      	adds	r3, #18
 800c658:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c65a:	2b04      	cmp	r3, #4
 800c65c:	d903      	bls.n	800c666 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f7ff ff80 	bl	800c564 <etharp_free_entry>
 800c664:	e04a      	b.n	800c6fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c666:	492b      	ldr	r1, [pc, #172]	@ (800c714 <etharp_tmr+0x14c>)
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	4613      	mov	r3, r2
 800c66c:	005b      	lsls	r3, r3, #1
 800c66e:	4413      	add	r3, r2
 800c670:	00db      	lsls	r3, r3, #3
 800c672:	440b      	add	r3, r1
 800c674:	3314      	adds	r3, #20
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	2b03      	cmp	r3, #3
 800c67a:	d10a      	bne.n	800c692 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c67c:	4925      	ldr	r1, [pc, #148]	@ (800c714 <etharp_tmr+0x14c>)
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	4613      	mov	r3, r2
 800c682:	005b      	lsls	r3, r3, #1
 800c684:	4413      	add	r3, r2
 800c686:	00db      	lsls	r3, r3, #3
 800c688:	440b      	add	r3, r1
 800c68a:	3314      	adds	r3, #20
 800c68c:	2204      	movs	r2, #4
 800c68e:	701a      	strb	r2, [r3, #0]
 800c690:	e034      	b.n	800c6fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c692:	4920      	ldr	r1, [pc, #128]	@ (800c714 <etharp_tmr+0x14c>)
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	4613      	mov	r3, r2
 800c698:	005b      	lsls	r3, r3, #1
 800c69a:	4413      	add	r3, r2
 800c69c:	00db      	lsls	r3, r3, #3
 800c69e:	440b      	add	r3, r1
 800c6a0:	3314      	adds	r3, #20
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	2b04      	cmp	r3, #4
 800c6a6:	d10a      	bne.n	800c6be <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c6a8:	491a      	ldr	r1, [pc, #104]	@ (800c714 <etharp_tmr+0x14c>)
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	4613      	mov	r3, r2
 800c6ae:	005b      	lsls	r3, r3, #1
 800c6b0:	4413      	add	r3, r2
 800c6b2:	00db      	lsls	r3, r3, #3
 800c6b4:	440b      	add	r3, r1
 800c6b6:	3314      	adds	r3, #20
 800c6b8:	2202      	movs	r2, #2
 800c6ba:	701a      	strb	r2, [r3, #0]
 800c6bc:	e01e      	b.n	800c6fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c6be:	4915      	ldr	r1, [pc, #84]	@ (800c714 <etharp_tmr+0x14c>)
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	4413      	add	r3, r2
 800c6c8:	00db      	lsls	r3, r3, #3
 800c6ca:	440b      	add	r3, r1
 800c6cc:	3314      	adds	r3, #20
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d113      	bne.n	800c6fc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c6d4:	490f      	ldr	r1, [pc, #60]	@ (800c714 <etharp_tmr+0x14c>)
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	4613      	mov	r3, r2
 800c6da:	005b      	lsls	r3, r3, #1
 800c6dc:	4413      	add	r3, r2
 800c6de:	00db      	lsls	r3, r3, #3
 800c6e0:	440b      	add	r3, r1
 800c6e2:	3308      	adds	r3, #8
 800c6e4:	6818      	ldr	r0, [r3, #0]
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	005b      	lsls	r3, r3, #1
 800c6ec:	4413      	add	r3, r2
 800c6ee:	00db      	lsls	r3, r3, #3
 800c6f0:	4a08      	ldr	r2, [pc, #32]	@ (800c714 <etharp_tmr+0x14c>)
 800c6f2:	4413      	add	r3, r2
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	f000 fe72 	bl	800d3e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	3301      	adds	r3, #1
 800c700:	607b      	str	r3, [r7, #4]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2b09      	cmp	r3, #9
 800c706:	f77f af65 	ble.w	800c5d4 <etharp_tmr+0xc>
      }
    }
  }
}
 800c70a:	bf00      	nop
 800c70c:	bf00      	nop
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	240047f0 	.word	0x240047f0

0800c718 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b08a      	sub	sp, #40	@ 0x28
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	460b      	mov	r3, r1
 800c722:	607a      	str	r2, [r7, #4]
 800c724:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c726:	230a      	movs	r3, #10
 800c728:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c72a:	230a      	movs	r3, #10
 800c72c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c72e:	230a      	movs	r3, #10
 800c730:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800c732:	2300      	movs	r3, #0
 800c734:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c736:	230a      	movs	r3, #10
 800c738:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c73a:	2300      	movs	r3, #0
 800c73c:	83bb      	strh	r3, [r7, #28]
 800c73e:	2300      	movs	r3, #0
 800c740:	837b      	strh	r3, [r7, #26]
 800c742:	2300      	movs	r3, #0
 800c744:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c746:	2300      	movs	r3, #0
 800c748:	843b      	strh	r3, [r7, #32]
 800c74a:	e0ae      	b.n	800c8aa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c74c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c750:	49a6      	ldr	r1, [pc, #664]	@ (800c9ec <etharp_find_entry+0x2d4>)
 800c752:	4613      	mov	r3, r2
 800c754:	005b      	lsls	r3, r3, #1
 800c756:	4413      	add	r3, r2
 800c758:	00db      	lsls	r3, r3, #3
 800c75a:	440b      	add	r3, r1
 800c75c:	3314      	adds	r3, #20
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c762:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c766:	2b0a      	cmp	r3, #10
 800c768:	d105      	bne.n	800c776 <etharp_find_entry+0x5e>
 800c76a:	7dfb      	ldrb	r3, [r7, #23]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d102      	bne.n	800c776 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c770:	8c3b      	ldrh	r3, [r7, #32]
 800c772:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c774:	e095      	b.n	800c8a2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c776:	7dfb      	ldrb	r3, [r7, #23]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f000 8092 	beq.w	800c8a2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c77e:	7dfb      	ldrb	r3, [r7, #23]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d009      	beq.n	800c798 <etharp_find_entry+0x80>
 800c784:	7dfb      	ldrb	r3, [r7, #23]
 800c786:	2b01      	cmp	r3, #1
 800c788:	d806      	bhi.n	800c798 <etharp_find_entry+0x80>
 800c78a:	4b99      	ldr	r3, [pc, #612]	@ (800c9f0 <etharp_find_entry+0x2d8>)
 800c78c:	f240 1223 	movw	r2, #291	@ 0x123
 800c790:	4998      	ldr	r1, [pc, #608]	@ (800c9f4 <etharp_find_entry+0x2dc>)
 800c792:	4899      	ldr	r0, [pc, #612]	@ (800c9f8 <etharp_find_entry+0x2e0>)
 800c794:	f00a feba 	bl	801750c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d020      	beq.n	800c7e0 <etharp_find_entry+0xc8>
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	6819      	ldr	r1, [r3, #0]
 800c7a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7a6:	4891      	ldr	r0, [pc, #580]	@ (800c9ec <etharp_find_entry+0x2d4>)
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	005b      	lsls	r3, r3, #1
 800c7ac:	4413      	add	r3, r2
 800c7ae:	00db      	lsls	r3, r3, #3
 800c7b0:	4403      	add	r3, r0
 800c7b2:	3304      	adds	r3, #4
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4299      	cmp	r1, r3
 800c7b8:	d112      	bne.n	800c7e0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d00c      	beq.n	800c7da <etharp_find_entry+0xc2>
 800c7c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7c4:	4989      	ldr	r1, [pc, #548]	@ (800c9ec <etharp_find_entry+0x2d4>)
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	005b      	lsls	r3, r3, #1
 800c7ca:	4413      	add	r3, r2
 800c7cc:	00db      	lsls	r3, r3, #3
 800c7ce:	440b      	add	r3, r1
 800c7d0:	3308      	adds	r3, #8
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d102      	bne.n	800c7e0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c7da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c7de:	e100      	b.n	800c9e2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c7e0:	7dfb      	ldrb	r3, [r7, #23]
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	d140      	bne.n	800c868 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c7e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7ea:	4980      	ldr	r1, [pc, #512]	@ (800c9ec <etharp_find_entry+0x2d4>)
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	005b      	lsls	r3, r3, #1
 800c7f0:	4413      	add	r3, r2
 800c7f2:	00db      	lsls	r3, r3, #3
 800c7f4:	440b      	add	r3, r1
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d01a      	beq.n	800c832 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c7fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c800:	497a      	ldr	r1, [pc, #488]	@ (800c9ec <etharp_find_entry+0x2d4>)
 800c802:	4613      	mov	r3, r2
 800c804:	005b      	lsls	r3, r3, #1
 800c806:	4413      	add	r3, r2
 800c808:	00db      	lsls	r3, r3, #3
 800c80a:	440b      	add	r3, r1
 800c80c:	3312      	adds	r3, #18
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	8bba      	ldrh	r2, [r7, #28]
 800c812:	429a      	cmp	r2, r3
 800c814:	d845      	bhi.n	800c8a2 <etharp_find_entry+0x18a>
            old_queue = i;
 800c816:	8c3b      	ldrh	r3, [r7, #32]
 800c818:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c81a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c81e:	4973      	ldr	r1, [pc, #460]	@ (800c9ec <etharp_find_entry+0x2d4>)
 800c820:	4613      	mov	r3, r2
 800c822:	005b      	lsls	r3, r3, #1
 800c824:	4413      	add	r3, r2
 800c826:	00db      	lsls	r3, r3, #3
 800c828:	440b      	add	r3, r1
 800c82a:	3312      	adds	r3, #18
 800c82c:	881b      	ldrh	r3, [r3, #0]
 800c82e:	83bb      	strh	r3, [r7, #28]
 800c830:	e037      	b.n	800c8a2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c832:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c836:	496d      	ldr	r1, [pc, #436]	@ (800c9ec <etharp_find_entry+0x2d4>)
 800c838:	4613      	mov	r3, r2
 800c83a:	005b      	lsls	r3, r3, #1
 800c83c:	4413      	add	r3, r2
 800c83e:	00db      	lsls	r3, r3, #3
 800c840:	440b      	add	r3, r1
 800c842:	3312      	adds	r3, #18
 800c844:	881b      	ldrh	r3, [r3, #0]
 800c846:	8b7a      	ldrh	r2, [r7, #26]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d82a      	bhi.n	800c8a2 <etharp_find_entry+0x18a>
            old_pending = i;
 800c84c:	8c3b      	ldrh	r3, [r7, #32]
 800c84e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800c850:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c854:	4965      	ldr	r1, [pc, #404]	@ (800c9ec <etharp_find_entry+0x2d4>)
 800c856:	4613      	mov	r3, r2
 800c858:	005b      	lsls	r3, r3, #1
 800c85a:	4413      	add	r3, r2
 800c85c:	00db      	lsls	r3, r3, #3
 800c85e:	440b      	add	r3, r1
 800c860:	3312      	adds	r3, #18
 800c862:	881b      	ldrh	r3, [r3, #0]
 800c864:	837b      	strh	r3, [r7, #26]
 800c866:	e01c      	b.n	800c8a2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c868:	7dfb      	ldrb	r3, [r7, #23]
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d919      	bls.n	800c8a2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c86e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c872:	495e      	ldr	r1, [pc, #376]	@ (800c9ec <etharp_find_entry+0x2d4>)
 800c874:	4613      	mov	r3, r2
 800c876:	005b      	lsls	r3, r3, #1
 800c878:	4413      	add	r3, r2
 800c87a:	00db      	lsls	r3, r3, #3
 800c87c:	440b      	add	r3, r1
 800c87e:	3312      	adds	r3, #18
 800c880:	881b      	ldrh	r3, [r3, #0]
 800c882:	8b3a      	ldrh	r2, [r7, #24]
 800c884:	429a      	cmp	r2, r3
 800c886:	d80c      	bhi.n	800c8a2 <etharp_find_entry+0x18a>
            old_stable = i;
 800c888:	8c3b      	ldrh	r3, [r7, #32]
 800c88a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800c88c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c890:	4956      	ldr	r1, [pc, #344]	@ (800c9ec <etharp_find_entry+0x2d4>)
 800c892:	4613      	mov	r3, r2
 800c894:	005b      	lsls	r3, r3, #1
 800c896:	4413      	add	r3, r2
 800c898:	00db      	lsls	r3, r3, #3
 800c89a:	440b      	add	r3, r1
 800c89c:	3312      	adds	r3, #18
 800c89e:	881b      	ldrh	r3, [r3, #0]
 800c8a0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c8a2:	8c3b      	ldrh	r3, [r7, #32]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	843b      	strh	r3, [r7, #32]
 800c8aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c8ae:	2b09      	cmp	r3, #9
 800c8b0:	f77f af4c 	ble.w	800c74c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c8b4:	7afb      	ldrb	r3, [r7, #11]
 800c8b6:	f003 0302 	and.w	r3, r3, #2
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d108      	bne.n	800c8d0 <etharp_find_entry+0x1b8>
 800c8be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c8c2:	2b0a      	cmp	r3, #10
 800c8c4:	d107      	bne.n	800c8d6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c8c6:	7afb      	ldrb	r3, [r7, #11]
 800c8c8:	f003 0301 	and.w	r3, r3, #1
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d102      	bne.n	800c8d6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c8d4:	e085      	b.n	800c9e2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c8d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c8da:	2b09      	cmp	r3, #9
 800c8dc:	dc02      	bgt.n	800c8e4 <etharp_find_entry+0x1cc>
    i = empty;
 800c8de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8e0:	843b      	strh	r3, [r7, #32]
 800c8e2:	e039      	b.n	800c958 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c8e4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800c8e8:	2b09      	cmp	r3, #9
 800c8ea:	dc14      	bgt.n	800c916 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c8ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8ee:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c8f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8f4:	493d      	ldr	r1, [pc, #244]	@ (800c9ec <etharp_find_entry+0x2d4>)
 800c8f6:	4613      	mov	r3, r2
 800c8f8:	005b      	lsls	r3, r3, #1
 800c8fa:	4413      	add	r3, r2
 800c8fc:	00db      	lsls	r3, r3, #3
 800c8fe:	440b      	add	r3, r1
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d018      	beq.n	800c938 <etharp_find_entry+0x220>
 800c906:	4b3a      	ldr	r3, [pc, #232]	@ (800c9f0 <etharp_find_entry+0x2d8>)
 800c908:	f240 126d 	movw	r2, #365	@ 0x16d
 800c90c:	493b      	ldr	r1, [pc, #236]	@ (800c9fc <etharp_find_entry+0x2e4>)
 800c90e:	483a      	ldr	r0, [pc, #232]	@ (800c9f8 <etharp_find_entry+0x2e0>)
 800c910:	f00a fdfc 	bl	801750c <iprintf>
 800c914:	e010      	b.n	800c938 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c916:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800c91a:	2b09      	cmp	r3, #9
 800c91c:	dc02      	bgt.n	800c924 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c91e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c920:	843b      	strh	r3, [r7, #32]
 800c922:	e009      	b.n	800c938 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c924:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c928:	2b09      	cmp	r3, #9
 800c92a:	dc02      	bgt.n	800c932 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c92c:	8bfb      	ldrh	r3, [r7, #30]
 800c92e:	843b      	strh	r3, [r7, #32]
 800c930:	e002      	b.n	800c938 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c932:	f04f 33ff 	mov.w	r3, #4294967295
 800c936:	e054      	b.n	800c9e2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c938:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c93c:	2b09      	cmp	r3, #9
 800c93e:	dd06      	ble.n	800c94e <etharp_find_entry+0x236>
 800c940:	4b2b      	ldr	r3, [pc, #172]	@ (800c9f0 <etharp_find_entry+0x2d8>)
 800c942:	f240 127f 	movw	r2, #383	@ 0x17f
 800c946:	492e      	ldr	r1, [pc, #184]	@ (800ca00 <etharp_find_entry+0x2e8>)
 800c948:	482b      	ldr	r0, [pc, #172]	@ (800c9f8 <etharp_find_entry+0x2e0>)
 800c94a:	f00a fddf 	bl	801750c <iprintf>
    etharp_free_entry(i);
 800c94e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c952:	4618      	mov	r0, r3
 800c954:	f7ff fe06 	bl	800c564 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c958:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c95c:	2b09      	cmp	r3, #9
 800c95e:	dd06      	ble.n	800c96e <etharp_find_entry+0x256>
 800c960:	4b23      	ldr	r3, [pc, #140]	@ (800c9f0 <etharp_find_entry+0x2d8>)
 800c962:	f240 1283 	movw	r2, #387	@ 0x183
 800c966:	4926      	ldr	r1, [pc, #152]	@ (800ca00 <etharp_find_entry+0x2e8>)
 800c968:	4823      	ldr	r0, [pc, #140]	@ (800c9f8 <etharp_find_entry+0x2e0>)
 800c96a:	f00a fdcf 	bl	801750c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c96e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c972:	491e      	ldr	r1, [pc, #120]	@ (800c9ec <etharp_find_entry+0x2d4>)
 800c974:	4613      	mov	r3, r2
 800c976:	005b      	lsls	r3, r3, #1
 800c978:	4413      	add	r3, r2
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	440b      	add	r3, r1
 800c97e:	3314      	adds	r3, #20
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d006      	beq.n	800c994 <etharp_find_entry+0x27c>
 800c986:	4b1a      	ldr	r3, [pc, #104]	@ (800c9f0 <etharp_find_entry+0x2d8>)
 800c988:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800c98c:	491d      	ldr	r1, [pc, #116]	@ (800ca04 <etharp_find_entry+0x2ec>)
 800c98e:	481a      	ldr	r0, [pc, #104]	@ (800c9f8 <etharp_find_entry+0x2e0>)
 800c990:	f00a fdbc 	bl	801750c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00b      	beq.n	800c9b2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c99a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	6819      	ldr	r1, [r3, #0]
 800c9a2:	4812      	ldr	r0, [pc, #72]	@ (800c9ec <etharp_find_entry+0x2d4>)
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	005b      	lsls	r3, r3, #1
 800c9a8:	4413      	add	r3, r2
 800c9aa:	00db      	lsls	r3, r3, #3
 800c9ac:	4403      	add	r3, r0
 800c9ae:	3304      	adds	r3, #4
 800c9b0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c9b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9b6:	490d      	ldr	r1, [pc, #52]	@ (800c9ec <etharp_find_entry+0x2d4>)
 800c9b8:	4613      	mov	r3, r2
 800c9ba:	005b      	lsls	r3, r3, #1
 800c9bc:	4413      	add	r3, r2
 800c9be:	00db      	lsls	r3, r3, #3
 800c9c0:	440b      	add	r3, r1
 800c9c2:	3312      	adds	r3, #18
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c9c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9cc:	4907      	ldr	r1, [pc, #28]	@ (800c9ec <etharp_find_entry+0x2d4>)
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	005b      	lsls	r3, r3, #1
 800c9d2:	4413      	add	r3, r2
 800c9d4:	00db      	lsls	r3, r3, #3
 800c9d6:	440b      	add	r3, r1
 800c9d8:	3308      	adds	r3, #8
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c9de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3728      	adds	r7, #40	@ 0x28
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	bf00      	nop
 800c9ec:	240047f0 	.word	0x240047f0
 800c9f0:	08018ac0 	.word	0x08018ac0
 800c9f4:	08018b24 	.word	0x08018b24
 800c9f8:	08018b64 	.word	0x08018b64
 800c9fc:	08018b8c 	.word	0x08018b8c
 800ca00:	08018ba4 	.word	0x08018ba4
 800ca04:	08018bb8 	.word	0x08018bb8

0800ca08 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b088      	sub	sp, #32
 800ca0c:	af02      	add	r7, sp, #8
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	607a      	str	r2, [r7, #4]
 800ca14:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ca1c:	2b06      	cmp	r3, #6
 800ca1e:	d006      	beq.n	800ca2e <etharp_update_arp_entry+0x26>
 800ca20:	4b48      	ldr	r3, [pc, #288]	@ (800cb44 <etharp_update_arp_entry+0x13c>)
 800ca22:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800ca26:	4948      	ldr	r1, [pc, #288]	@ (800cb48 <etharp_update_arp_entry+0x140>)
 800ca28:	4848      	ldr	r0, [pc, #288]	@ (800cb4c <etharp_update_arp_entry+0x144>)
 800ca2a:	f00a fd6f 	bl	801750c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d012      	beq.n	800ca5a <etharp_update_arp_entry+0x52>
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d00e      	beq.n	800ca5a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	68f9      	ldr	r1, [r7, #12]
 800ca42:	4618      	mov	r0, r3
 800ca44:	f001 faf2 	bl	800e02c <ip4_addr_isbroadcast_u32>
 800ca48:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d105      	bne.n	800ca5a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ca56:	2be0      	cmp	r3, #224	@ 0xe0
 800ca58:	d102      	bne.n	800ca60 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ca5a:	f06f 030f 	mvn.w	r3, #15
 800ca5e:	e06c      	b.n	800cb3a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ca60:	78fb      	ldrb	r3, [r7, #3]
 800ca62:	68fa      	ldr	r2, [r7, #12]
 800ca64:	4619      	mov	r1, r3
 800ca66:	68b8      	ldr	r0, [r7, #8]
 800ca68:	f7ff fe56 	bl	800c718 <etharp_find_entry>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ca70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	da02      	bge.n	800ca7e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ca78:	8afb      	ldrh	r3, [r7, #22]
 800ca7a:	b25b      	sxtb	r3, r3
 800ca7c:	e05d      	b.n	800cb3a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ca7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ca82:	4933      	ldr	r1, [pc, #204]	@ (800cb50 <etharp_update_arp_entry+0x148>)
 800ca84:	4613      	mov	r3, r2
 800ca86:	005b      	lsls	r3, r3, #1
 800ca88:	4413      	add	r3, r2
 800ca8a:	00db      	lsls	r3, r3, #3
 800ca8c:	440b      	add	r3, r1
 800ca8e:	3314      	adds	r3, #20
 800ca90:	2202      	movs	r2, #2
 800ca92:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ca94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ca98:	492d      	ldr	r1, [pc, #180]	@ (800cb50 <etharp_update_arp_entry+0x148>)
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	005b      	lsls	r3, r3, #1
 800ca9e:	4413      	add	r3, r2
 800caa0:	00db      	lsls	r3, r3, #3
 800caa2:	440b      	add	r3, r1
 800caa4:	3308      	adds	r3, #8
 800caa6:	68fa      	ldr	r2, [r7, #12]
 800caa8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800caaa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800caae:	4613      	mov	r3, r2
 800cab0:	005b      	lsls	r3, r3, #1
 800cab2:	4413      	add	r3, r2
 800cab4:	00db      	lsls	r3, r3, #3
 800cab6:	3308      	adds	r3, #8
 800cab8:	4a25      	ldr	r2, [pc, #148]	@ (800cb50 <etharp_update_arp_entry+0x148>)
 800caba:	4413      	add	r3, r2
 800cabc:	3304      	adds	r3, #4
 800cabe:	2206      	movs	r2, #6
 800cac0:	6879      	ldr	r1, [r7, #4]
 800cac2:	4618      	mov	r0, r3
 800cac4:	f00a ff4d 	bl	8017962 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800cac8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cacc:	4920      	ldr	r1, [pc, #128]	@ (800cb50 <etharp_update_arp_entry+0x148>)
 800cace:	4613      	mov	r3, r2
 800cad0:	005b      	lsls	r3, r3, #1
 800cad2:	4413      	add	r3, r2
 800cad4:	00db      	lsls	r3, r3, #3
 800cad6:	440b      	add	r3, r1
 800cad8:	3312      	adds	r3, #18
 800cada:	2200      	movs	r2, #0
 800cadc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800cade:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cae2:	491b      	ldr	r1, [pc, #108]	@ (800cb50 <etharp_update_arp_entry+0x148>)
 800cae4:	4613      	mov	r3, r2
 800cae6:	005b      	lsls	r3, r3, #1
 800cae8:	4413      	add	r3, r2
 800caea:	00db      	lsls	r3, r3, #3
 800caec:	440b      	add	r3, r1
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d021      	beq.n	800cb38 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800caf4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800caf8:	4915      	ldr	r1, [pc, #84]	@ (800cb50 <etharp_update_arp_entry+0x148>)
 800cafa:	4613      	mov	r3, r2
 800cafc:	005b      	lsls	r3, r3, #1
 800cafe:	4413      	add	r3, r2
 800cb00:	00db      	lsls	r3, r3, #3
 800cb02:	440b      	add	r3, r1
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cb08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb0c:	4910      	ldr	r1, [pc, #64]	@ (800cb50 <etharp_update_arp_entry+0x148>)
 800cb0e:	4613      	mov	r3, r2
 800cb10:	005b      	lsls	r3, r3, #1
 800cb12:	4413      	add	r3, r2
 800cb14:	00db      	lsls	r3, r3, #3
 800cb16:	440b      	add	r3, r1
 800cb18:	2200      	movs	r2, #0
 800cb1a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 800cb22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cb26:	9300      	str	r3, [sp, #0]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6939      	ldr	r1, [r7, #16]
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f000 fcf7 	bl	800d520 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cb32:	6938      	ldr	r0, [r7, #16]
 800cb34:	f003 fd44 	bl	80105c0 <pbuf_free>
  }
  return ERR_OK;
 800cb38:	2300      	movs	r3, #0
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3718      	adds	r7, #24
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	08018ac0 	.word	0x08018ac0
 800cb48:	08018be4 	.word	0x08018be4
 800cb4c:	08018b64 	.word	0x08018b64
 800cb50:	240047f0 	.word	0x240047f0

0800cb54 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	60fb      	str	r3, [r7, #12]
 800cb60:	e01e      	b.n	800cba0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cb62:	4913      	ldr	r1, [pc, #76]	@ (800cbb0 <etharp_cleanup_netif+0x5c>)
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	4613      	mov	r3, r2
 800cb68:	005b      	lsls	r3, r3, #1
 800cb6a:	4413      	add	r3, r2
 800cb6c:	00db      	lsls	r3, r3, #3
 800cb6e:	440b      	add	r3, r1
 800cb70:	3314      	adds	r3, #20
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cb76:	7afb      	ldrb	r3, [r7, #11]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d00e      	beq.n	800cb9a <etharp_cleanup_netif+0x46>
 800cb7c:	490c      	ldr	r1, [pc, #48]	@ (800cbb0 <etharp_cleanup_netif+0x5c>)
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	4613      	mov	r3, r2
 800cb82:	005b      	lsls	r3, r3, #1
 800cb84:	4413      	add	r3, r2
 800cb86:	00db      	lsls	r3, r3, #3
 800cb88:	440b      	add	r3, r1
 800cb8a:	3308      	adds	r3, #8
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d102      	bne.n	800cb9a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cb94:	68f8      	ldr	r0, [r7, #12]
 800cb96:	f7ff fce5 	bl	800c564 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	60fb      	str	r3, [r7, #12]
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2b09      	cmp	r3, #9
 800cba4:	dddd      	ble.n	800cb62 <etharp_cleanup_netif+0xe>
    }
  }
}
 800cba6:	bf00      	nop
 800cba8:	bf00      	nop
 800cbaa:	3710      	adds	r7, #16
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	240047f0 	.word	0x240047f0

0800cbb4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cbb4:	b5b0      	push	{r4, r5, r7, lr}
 800cbb6:	b08a      	sub	sp, #40	@ 0x28
 800cbb8:	af04      	add	r7, sp, #16
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d107      	bne.n	800cbd4 <etharp_input+0x20>
 800cbc4:	4b3f      	ldr	r3, [pc, #252]	@ (800ccc4 <etharp_input+0x110>)
 800cbc6:	f240 228a 	movw	r2, #650	@ 0x28a
 800cbca:	493f      	ldr	r1, [pc, #252]	@ (800ccc8 <etharp_input+0x114>)
 800cbcc:	483f      	ldr	r0, [pc, #252]	@ (800cccc <etharp_input+0x118>)
 800cbce:	f00a fc9d 	bl	801750c <iprintf>
 800cbd2:	e074      	b.n	800ccbe <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	881b      	ldrh	r3, [r3, #0]
 800cbde:	b29b      	uxth	r3, r3
 800cbe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbe4:	d10c      	bne.n	800cc00 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cbea:	2b06      	cmp	r3, #6
 800cbec:	d108      	bne.n	800cc00 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cbf2:	2b04      	cmp	r3, #4
 800cbf4:	d104      	bne.n	800cc00 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	885b      	ldrh	r3, [r3, #2]
 800cbfa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cbfc:	2b08      	cmp	r3, #8
 800cbfe:	d003      	beq.n	800cc08 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f003 fcdd 	bl	80105c0 <pbuf_free>
    return;
 800cc06:	e05a      	b.n	800ccbe <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	330e      	adds	r3, #14
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	3318      	adds	r3, #24
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	3304      	adds	r3, #4
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d102      	bne.n	800cc28 <etharp_input+0x74>
    for_us = 0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	75fb      	strb	r3, [r7, #23]
 800cc26:	e009      	b.n	800cc3c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800cc28:	68ba      	ldr	r2, [r7, #8]
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	3304      	adds	r3, #4
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	bf0c      	ite	eq
 800cc34:	2301      	moveq	r3, #1
 800cc36:	2300      	movne	r3, #0
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	f103 0208 	add.w	r2, r3, #8
 800cc42:	7dfb      	ldrb	r3, [r7, #23]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d001      	beq.n	800cc4c <etharp_input+0x98>
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e000      	b.n	800cc4e <etharp_input+0x9a>
 800cc4c:	2302      	movs	r3, #2
 800cc4e:	f107 010c 	add.w	r1, r7, #12
 800cc52:	6838      	ldr	r0, [r7, #0]
 800cc54:	f7ff fed8 	bl	800ca08 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	88db      	ldrh	r3, [r3, #6]
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc62:	d003      	beq.n	800cc6c <etharp_input+0xb8>
 800cc64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc68:	d01e      	beq.n	800cca8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800cc6a:	e025      	b.n	800ccb8 <etharp_input+0x104>
      if (for_us) {
 800cc6c:	7dfb      	ldrb	r3, [r7, #23]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d021      	beq.n	800ccb6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	f103 052e 	add.w	r5, r3, #46	@ 0x2e
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800cc88:	693a      	ldr	r2, [r7, #16]
 800cc8a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800cc8c:	2102      	movs	r1, #2
 800cc8e:	9103      	str	r1, [sp, #12]
 800cc90:	f107 010c 	add.w	r1, r7, #12
 800cc94:	9102      	str	r1, [sp, #8]
 800cc96:	9201      	str	r2, [sp, #4]
 800cc98:	9300      	str	r3, [sp, #0]
 800cc9a:	462b      	mov	r3, r5
 800cc9c:	4622      	mov	r2, r4
 800cc9e:	4601      	mov	r1, r0
 800cca0:	6838      	ldr	r0, [r7, #0]
 800cca2:	f000 faef 	bl	800d284 <etharp_raw>
      break;
 800cca6:	e006      	b.n	800ccb6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800cca8:	f107 030c 	add.w	r3, r7, #12
 800ccac:	4619      	mov	r1, r3
 800ccae:	6838      	ldr	r0, [r7, #0]
 800ccb0:	f7fd fee4 	bl	800aa7c <dhcp_arp_reply>
      break;
 800ccb4:	e000      	b.n	800ccb8 <etharp_input+0x104>
      break;
 800ccb6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f003 fc81 	bl	80105c0 <pbuf_free>
}
 800ccbe:	3718      	adds	r7, #24
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bdb0      	pop	{r4, r5, r7, pc}
 800ccc4:	08018ac0 	.word	0x08018ac0
 800ccc8:	08018c3c 	.word	0x08018c3c
 800cccc:	08018b64 	.word	0x08018b64

0800ccd0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b086      	sub	sp, #24
 800ccd4:	af02      	add	r7, sp, #8
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	4613      	mov	r3, r2
 800ccdc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ccde:	79fa      	ldrb	r2, [r7, #7]
 800cce0:	4944      	ldr	r1, [pc, #272]	@ (800cdf4 <etharp_output_to_arp_index+0x124>)
 800cce2:	4613      	mov	r3, r2
 800cce4:	005b      	lsls	r3, r3, #1
 800cce6:	4413      	add	r3, r2
 800cce8:	00db      	lsls	r3, r3, #3
 800ccea:	440b      	add	r3, r1
 800ccec:	3314      	adds	r3, #20
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d806      	bhi.n	800cd02 <etharp_output_to_arp_index+0x32>
 800ccf4:	4b40      	ldr	r3, [pc, #256]	@ (800cdf8 <etharp_output_to_arp_index+0x128>)
 800ccf6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ccfa:	4940      	ldr	r1, [pc, #256]	@ (800cdfc <etharp_output_to_arp_index+0x12c>)
 800ccfc:	4840      	ldr	r0, [pc, #256]	@ (800ce00 <etharp_output_to_arp_index+0x130>)
 800ccfe:	f00a fc05 	bl	801750c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cd02:	79fa      	ldrb	r2, [r7, #7]
 800cd04:	493b      	ldr	r1, [pc, #236]	@ (800cdf4 <etharp_output_to_arp_index+0x124>)
 800cd06:	4613      	mov	r3, r2
 800cd08:	005b      	lsls	r3, r3, #1
 800cd0a:	4413      	add	r3, r2
 800cd0c:	00db      	lsls	r3, r3, #3
 800cd0e:	440b      	add	r3, r1
 800cd10:	3314      	adds	r3, #20
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d153      	bne.n	800cdc0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cd18:	79fa      	ldrb	r2, [r7, #7]
 800cd1a:	4936      	ldr	r1, [pc, #216]	@ (800cdf4 <etharp_output_to_arp_index+0x124>)
 800cd1c:	4613      	mov	r3, r2
 800cd1e:	005b      	lsls	r3, r3, #1
 800cd20:	4413      	add	r3, r2
 800cd22:	00db      	lsls	r3, r3, #3
 800cd24:	440b      	add	r3, r1
 800cd26:	3312      	adds	r3, #18
 800cd28:	881b      	ldrh	r3, [r3, #0]
 800cd2a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800cd2e:	d919      	bls.n	800cd64 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cd30:	79fa      	ldrb	r2, [r7, #7]
 800cd32:	4613      	mov	r3, r2
 800cd34:	005b      	lsls	r3, r3, #1
 800cd36:	4413      	add	r3, r2
 800cd38:	00db      	lsls	r3, r3, #3
 800cd3a:	4a2e      	ldr	r2, [pc, #184]	@ (800cdf4 <etharp_output_to_arp_index+0x124>)
 800cd3c:	4413      	add	r3, r2
 800cd3e:	3304      	adds	r3, #4
 800cd40:	4619      	mov	r1, r3
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f000 fb4c 	bl	800d3e0 <etharp_request>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d138      	bne.n	800cdc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cd4e:	79fa      	ldrb	r2, [r7, #7]
 800cd50:	4928      	ldr	r1, [pc, #160]	@ (800cdf4 <etharp_output_to_arp_index+0x124>)
 800cd52:	4613      	mov	r3, r2
 800cd54:	005b      	lsls	r3, r3, #1
 800cd56:	4413      	add	r3, r2
 800cd58:	00db      	lsls	r3, r3, #3
 800cd5a:	440b      	add	r3, r1
 800cd5c:	3314      	adds	r3, #20
 800cd5e:	2203      	movs	r2, #3
 800cd60:	701a      	strb	r2, [r3, #0]
 800cd62:	e02d      	b.n	800cdc0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cd64:	79fa      	ldrb	r2, [r7, #7]
 800cd66:	4923      	ldr	r1, [pc, #140]	@ (800cdf4 <etharp_output_to_arp_index+0x124>)
 800cd68:	4613      	mov	r3, r2
 800cd6a:	005b      	lsls	r3, r3, #1
 800cd6c:	4413      	add	r3, r2
 800cd6e:	00db      	lsls	r3, r3, #3
 800cd70:	440b      	add	r3, r1
 800cd72:	3312      	adds	r3, #18
 800cd74:	881b      	ldrh	r3, [r3, #0]
 800cd76:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800cd7a:	d321      	bcc.n	800cdc0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cd7c:	79fa      	ldrb	r2, [r7, #7]
 800cd7e:	4613      	mov	r3, r2
 800cd80:	005b      	lsls	r3, r3, #1
 800cd82:	4413      	add	r3, r2
 800cd84:	00db      	lsls	r3, r3, #3
 800cd86:	4a1b      	ldr	r2, [pc, #108]	@ (800cdf4 <etharp_output_to_arp_index+0x124>)
 800cd88:	4413      	add	r3, r2
 800cd8a:	1d19      	adds	r1, r3, #4
 800cd8c:	79fa      	ldrb	r2, [r7, #7]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	005b      	lsls	r3, r3, #1
 800cd92:	4413      	add	r3, r2
 800cd94:	00db      	lsls	r3, r3, #3
 800cd96:	3308      	adds	r3, #8
 800cd98:	4a16      	ldr	r2, [pc, #88]	@ (800cdf4 <etharp_output_to_arp_index+0x124>)
 800cd9a:	4413      	add	r3, r2
 800cd9c:	3304      	adds	r3, #4
 800cd9e:	461a      	mov	r2, r3
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f000 fafb 	bl	800d39c <etharp_request_dst>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d109      	bne.n	800cdc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cdac:	79fa      	ldrb	r2, [r7, #7]
 800cdae:	4911      	ldr	r1, [pc, #68]	@ (800cdf4 <etharp_output_to_arp_index+0x124>)
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	005b      	lsls	r3, r3, #1
 800cdb4:	4413      	add	r3, r2
 800cdb6:	00db      	lsls	r3, r3, #3
 800cdb8:	440b      	add	r3, r1
 800cdba:	3314      	adds	r3, #20
 800cdbc:	2203      	movs	r2, #3
 800cdbe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 800cdc6:	79fa      	ldrb	r2, [r7, #7]
 800cdc8:	4613      	mov	r3, r2
 800cdca:	005b      	lsls	r3, r3, #1
 800cdcc:	4413      	add	r3, r2
 800cdce:	00db      	lsls	r3, r3, #3
 800cdd0:	3308      	adds	r3, #8
 800cdd2:	4a08      	ldr	r2, [pc, #32]	@ (800cdf4 <etharp_output_to_arp_index+0x124>)
 800cdd4:	4413      	add	r3, r2
 800cdd6:	3304      	adds	r3, #4
 800cdd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cddc:	9200      	str	r2, [sp, #0]
 800cdde:	460a      	mov	r2, r1
 800cde0:	68b9      	ldr	r1, [r7, #8]
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f000 fb9c 	bl	800d520 <ethernet_output>
 800cde8:	4603      	mov	r3, r0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	240047f0 	.word	0x240047f0
 800cdf8:	08018ac0 	.word	0x08018ac0
 800cdfc:	08018c5c 	.word	0x08018c5c
 800ce00:	08018b64 	.word	0x08018b64

0800ce04 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b08a      	sub	sp, #40	@ 0x28
 800ce08:	af02      	add	r7, sp, #8
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d106      	bne.n	800ce28 <etharp_output+0x24>
 800ce1a:	4b73      	ldr	r3, [pc, #460]	@ (800cfe8 <etharp_output+0x1e4>)
 800ce1c:	f240 321e 	movw	r2, #798	@ 0x31e
 800ce20:	4972      	ldr	r1, [pc, #456]	@ (800cfec <etharp_output+0x1e8>)
 800ce22:	4873      	ldr	r0, [pc, #460]	@ (800cff0 <etharp_output+0x1ec>)
 800ce24:	f00a fb72 	bl	801750c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d106      	bne.n	800ce3c <etharp_output+0x38>
 800ce2e:	4b6e      	ldr	r3, [pc, #440]	@ (800cfe8 <etharp_output+0x1e4>)
 800ce30:	f240 321f 	movw	r2, #799	@ 0x31f
 800ce34:	496f      	ldr	r1, [pc, #444]	@ (800cff4 <etharp_output+0x1f0>)
 800ce36:	486e      	ldr	r0, [pc, #440]	@ (800cff0 <etharp_output+0x1ec>)
 800ce38:	f00a fb68 	bl	801750c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d106      	bne.n	800ce50 <etharp_output+0x4c>
 800ce42:	4b69      	ldr	r3, [pc, #420]	@ (800cfe8 <etharp_output+0x1e4>)
 800ce44:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800ce48:	496b      	ldr	r1, [pc, #428]	@ (800cff8 <etharp_output+0x1f4>)
 800ce4a:	4869      	ldr	r0, [pc, #420]	@ (800cff0 <etharp_output+0x1ec>)
 800ce4c:	f00a fb5e 	bl	801750c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	68f9      	ldr	r1, [r7, #12]
 800ce56:	4618      	mov	r0, r3
 800ce58:	f001 f8e8 	bl	800e02c <ip4_addr_isbroadcast_u32>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d002      	beq.n	800ce68 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ce62:	4b66      	ldr	r3, [pc, #408]	@ (800cffc <etharp_output+0x1f8>)
 800ce64:	61fb      	str	r3, [r7, #28]
 800ce66:	e0af      	b.n	800cfc8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ce70:	2be0      	cmp	r3, #224	@ 0xe0
 800ce72:	d118      	bne.n	800cea6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ce74:	2301      	movs	r3, #1
 800ce76:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ce7c:	235e      	movs	r3, #94	@ 0x5e
 800ce7e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	3301      	adds	r3, #1
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	3302      	adds	r3, #2
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	3303      	adds	r3, #3
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ce9e:	f107 0310 	add.w	r3, r7, #16
 800cea2:	61fb      	str	r3, [r7, #28]
 800cea4:	e090      	b.n	800cfc8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	3304      	adds	r3, #4
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	405a      	eors	r2, r3
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	3308      	adds	r3, #8
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4013      	ands	r3, r2
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d012      	beq.n	800cee4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cec4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d00b      	beq.n	800cee4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	330c      	adds	r3, #12
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d003      	beq.n	800cede <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	330c      	adds	r3, #12
 800ceda:	61bb      	str	r3, [r7, #24]
 800cedc:	e002      	b.n	800cee4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cede:	f06f 0303 	mvn.w	r3, #3
 800cee2:	e07d      	b.n	800cfe0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cee4:	4b46      	ldr	r3, [pc, #280]	@ (800d000 <etharp_output+0x1fc>)
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	4619      	mov	r1, r3
 800ceea:	4a46      	ldr	r2, [pc, #280]	@ (800d004 <etharp_output+0x200>)
 800ceec:	460b      	mov	r3, r1
 800ceee:	005b      	lsls	r3, r3, #1
 800cef0:	440b      	add	r3, r1
 800cef2:	00db      	lsls	r3, r3, #3
 800cef4:	4413      	add	r3, r2
 800cef6:	3314      	adds	r3, #20
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d925      	bls.n	800cf4a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cefe:	4b40      	ldr	r3, [pc, #256]	@ (800d000 <etharp_output+0x1fc>)
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	4619      	mov	r1, r3
 800cf04:	4a3f      	ldr	r2, [pc, #252]	@ (800d004 <etharp_output+0x200>)
 800cf06:	460b      	mov	r3, r1
 800cf08:	005b      	lsls	r3, r3, #1
 800cf0a:	440b      	add	r3, r1
 800cf0c:	00db      	lsls	r3, r3, #3
 800cf0e:	4413      	add	r3, r2
 800cf10:	3308      	adds	r3, #8
 800cf12:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d117      	bne.n	800cf4a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cf1a:	69bb      	ldr	r3, [r7, #24]
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	4b38      	ldr	r3, [pc, #224]	@ (800d000 <etharp_output+0x1fc>)
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	4618      	mov	r0, r3
 800cf24:	4937      	ldr	r1, [pc, #220]	@ (800d004 <etharp_output+0x200>)
 800cf26:	4603      	mov	r3, r0
 800cf28:	005b      	lsls	r3, r3, #1
 800cf2a:	4403      	add	r3, r0
 800cf2c:	00db      	lsls	r3, r3, #3
 800cf2e:	440b      	add	r3, r1
 800cf30:	3304      	adds	r3, #4
 800cf32:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d108      	bne.n	800cf4a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cf38:	4b31      	ldr	r3, [pc, #196]	@ (800d000 <etharp_output+0x1fc>)
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	68b9      	ldr	r1, [r7, #8]
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f7ff fec5 	bl	800ccd0 <etharp_output_to_arp_index>
 800cf46:	4603      	mov	r3, r0
 800cf48:	e04a      	b.n	800cfe0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	75fb      	strb	r3, [r7, #23]
 800cf4e:	e031      	b.n	800cfb4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cf50:	7dfa      	ldrb	r2, [r7, #23]
 800cf52:	492c      	ldr	r1, [pc, #176]	@ (800d004 <etharp_output+0x200>)
 800cf54:	4613      	mov	r3, r2
 800cf56:	005b      	lsls	r3, r3, #1
 800cf58:	4413      	add	r3, r2
 800cf5a:	00db      	lsls	r3, r3, #3
 800cf5c:	440b      	add	r3, r1
 800cf5e:	3314      	adds	r3, #20
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d923      	bls.n	800cfae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cf66:	7dfa      	ldrb	r2, [r7, #23]
 800cf68:	4926      	ldr	r1, [pc, #152]	@ (800d004 <etharp_output+0x200>)
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	005b      	lsls	r3, r3, #1
 800cf6e:	4413      	add	r3, r2
 800cf70:	00db      	lsls	r3, r3, #3
 800cf72:	440b      	add	r3, r1
 800cf74:	3308      	adds	r3, #8
 800cf76:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d117      	bne.n	800cfae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	6819      	ldr	r1, [r3, #0]
 800cf82:	7dfa      	ldrb	r2, [r7, #23]
 800cf84:	481f      	ldr	r0, [pc, #124]	@ (800d004 <etharp_output+0x200>)
 800cf86:	4613      	mov	r3, r2
 800cf88:	005b      	lsls	r3, r3, #1
 800cf8a:	4413      	add	r3, r2
 800cf8c:	00db      	lsls	r3, r3, #3
 800cf8e:	4403      	add	r3, r0
 800cf90:	3304      	adds	r3, #4
 800cf92:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cf94:	4299      	cmp	r1, r3
 800cf96:	d10a      	bne.n	800cfae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cf98:	4a19      	ldr	r2, [pc, #100]	@ (800d000 <etharp_output+0x1fc>)
 800cf9a:	7dfb      	ldrb	r3, [r7, #23]
 800cf9c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cf9e:	7dfb      	ldrb	r3, [r7, #23]
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	68b9      	ldr	r1, [r7, #8]
 800cfa4:	68f8      	ldr	r0, [r7, #12]
 800cfa6:	f7ff fe93 	bl	800ccd0 <etharp_output_to_arp_index>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	e018      	b.n	800cfe0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cfae:	7dfb      	ldrb	r3, [r7, #23]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	75fb      	strb	r3, [r7, #23]
 800cfb4:	7dfb      	ldrb	r3, [r7, #23]
 800cfb6:	2b09      	cmp	r3, #9
 800cfb8:	d9ca      	bls.n	800cf50 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cfba:	68ba      	ldr	r2, [r7, #8]
 800cfbc:	69b9      	ldr	r1, [r7, #24]
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f000 f822 	bl	800d008 <etharp_query>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	e00b      	b.n	800cfe0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 800cfce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cfd2:	9300      	str	r3, [sp, #0]
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	68b9      	ldr	r1, [r7, #8]
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f000 faa1 	bl	800d520 <ethernet_output>
 800cfde:	4603      	mov	r3, r0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3720      	adds	r7, #32
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	08018ac0 	.word	0x08018ac0
 800cfec:	08018c3c 	.word	0x08018c3c
 800cff0:	08018b64 	.word	0x08018b64
 800cff4:	08018c8c 	.word	0x08018c8c
 800cff8:	08018c2c 	.word	0x08018c2c
 800cffc:	0801b81c 	.word	0x0801b81c
 800d000:	240048e0 	.word	0x240048e0
 800d004:	240047f0 	.word	0x240047f0

0800d008 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b08c      	sub	sp, #48	@ 0x30
 800d00c:	af02      	add	r7, sp, #8
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	332e      	adds	r3, #46	@ 0x2e
 800d018:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d01a:	23ff      	movs	r3, #255	@ 0xff
 800d01c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800d020:	2300      	movs	r3, #0
 800d022:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	68f9      	ldr	r1, [r7, #12]
 800d02a:	4618      	mov	r0, r3
 800d02c:	f000 fffe 	bl	800e02c <ip4_addr_isbroadcast_u32>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	d10c      	bne.n	800d050 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d03e:	2be0      	cmp	r3, #224	@ 0xe0
 800d040:	d006      	beq.n	800d050 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d003      	beq.n	800d050 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d102      	bne.n	800d056 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d050:	f06f 030f 	mvn.w	r3, #15
 800d054:	e101      	b.n	800d25a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	2101      	movs	r1, #1
 800d05a:	68b8      	ldr	r0, [r7, #8]
 800d05c:	f7ff fb5c 	bl	800c718 <etharp_find_entry>
 800d060:	4603      	mov	r3, r0
 800d062:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d064:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	da02      	bge.n	800d072 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d06c:	8a7b      	ldrh	r3, [r7, #18]
 800d06e:	b25b      	sxtb	r3, r3
 800d070:	e0f3      	b.n	800d25a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d072:	8a7b      	ldrh	r3, [r7, #18]
 800d074:	2b7e      	cmp	r3, #126	@ 0x7e
 800d076:	d906      	bls.n	800d086 <etharp_query+0x7e>
 800d078:	4b7a      	ldr	r3, [pc, #488]	@ (800d264 <etharp_query+0x25c>)
 800d07a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800d07e:	497a      	ldr	r1, [pc, #488]	@ (800d268 <etharp_query+0x260>)
 800d080:	487a      	ldr	r0, [pc, #488]	@ (800d26c <etharp_query+0x264>)
 800d082:	f00a fa43 	bl	801750c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d086:	8a7b      	ldrh	r3, [r7, #18]
 800d088:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d08a:	7c7a      	ldrb	r2, [r7, #17]
 800d08c:	4978      	ldr	r1, [pc, #480]	@ (800d270 <etharp_query+0x268>)
 800d08e:	4613      	mov	r3, r2
 800d090:	005b      	lsls	r3, r3, #1
 800d092:	4413      	add	r3, r2
 800d094:	00db      	lsls	r3, r3, #3
 800d096:	440b      	add	r3, r1
 800d098:	3314      	adds	r3, #20
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d115      	bne.n	800d0cc <etharp_query+0xc4>
    is_new_entry = 1;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d0a4:	7c7a      	ldrb	r2, [r7, #17]
 800d0a6:	4972      	ldr	r1, [pc, #456]	@ (800d270 <etharp_query+0x268>)
 800d0a8:	4613      	mov	r3, r2
 800d0aa:	005b      	lsls	r3, r3, #1
 800d0ac:	4413      	add	r3, r2
 800d0ae:	00db      	lsls	r3, r3, #3
 800d0b0:	440b      	add	r3, r1
 800d0b2:	3314      	adds	r3, #20
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d0b8:	7c7a      	ldrb	r2, [r7, #17]
 800d0ba:	496d      	ldr	r1, [pc, #436]	@ (800d270 <etharp_query+0x268>)
 800d0bc:	4613      	mov	r3, r2
 800d0be:	005b      	lsls	r3, r3, #1
 800d0c0:	4413      	add	r3, r2
 800d0c2:	00db      	lsls	r3, r3, #3
 800d0c4:	440b      	add	r3, r1
 800d0c6:	3308      	adds	r3, #8
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d0cc:	7c7a      	ldrb	r2, [r7, #17]
 800d0ce:	4968      	ldr	r1, [pc, #416]	@ (800d270 <etharp_query+0x268>)
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	005b      	lsls	r3, r3, #1
 800d0d4:	4413      	add	r3, r2
 800d0d6:	00db      	lsls	r3, r3, #3
 800d0d8:	440b      	add	r3, r1
 800d0da:	3314      	adds	r3, #20
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	d011      	beq.n	800d106 <etharp_query+0xfe>
 800d0e2:	7c7a      	ldrb	r2, [r7, #17]
 800d0e4:	4962      	ldr	r1, [pc, #392]	@ (800d270 <etharp_query+0x268>)
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	005b      	lsls	r3, r3, #1
 800d0ea:	4413      	add	r3, r2
 800d0ec:	00db      	lsls	r3, r3, #3
 800d0ee:	440b      	add	r3, r1
 800d0f0:	3314      	adds	r3, #20
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	d806      	bhi.n	800d106 <etharp_query+0xfe>
 800d0f8:	4b5a      	ldr	r3, [pc, #360]	@ (800d264 <etharp_query+0x25c>)
 800d0fa:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800d0fe:	495d      	ldr	r1, [pc, #372]	@ (800d274 <etharp_query+0x26c>)
 800d100:	485a      	ldr	r0, [pc, #360]	@ (800d26c <etharp_query+0x264>)
 800d102:	f00a fa03 	bl	801750c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d106:	6a3b      	ldr	r3, [r7, #32]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d102      	bne.n	800d112 <etharp_query+0x10a>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d10c      	bne.n	800d12c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d112:	68b9      	ldr	r1, [r7, #8]
 800d114:	68f8      	ldr	r0, [r7, #12]
 800d116:	f000 f963 	bl	800d3e0 <etharp_request>
 800d11a:	4603      	mov	r3, r0
 800d11c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d102      	bne.n	800d12c <etharp_query+0x124>
      return result;
 800d126:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d12a:	e096      	b.n	800d25a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d106      	bne.n	800d140 <etharp_query+0x138>
 800d132:	4b4c      	ldr	r3, [pc, #304]	@ (800d264 <etharp_query+0x25c>)
 800d134:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800d138:	494f      	ldr	r1, [pc, #316]	@ (800d278 <etharp_query+0x270>)
 800d13a:	484c      	ldr	r0, [pc, #304]	@ (800d26c <etharp_query+0x264>)
 800d13c:	f00a f9e6 	bl	801750c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d140:	7c7a      	ldrb	r2, [r7, #17]
 800d142:	494b      	ldr	r1, [pc, #300]	@ (800d270 <etharp_query+0x268>)
 800d144:	4613      	mov	r3, r2
 800d146:	005b      	lsls	r3, r3, #1
 800d148:	4413      	add	r3, r2
 800d14a:	00db      	lsls	r3, r3, #3
 800d14c:	440b      	add	r3, r1
 800d14e:	3314      	adds	r3, #20
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	2b01      	cmp	r3, #1
 800d154:	d917      	bls.n	800d186 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d156:	4a49      	ldr	r2, [pc, #292]	@ (800d27c <etharp_query+0x274>)
 800d158:	7c7b      	ldrb	r3, [r7, #17]
 800d15a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d15c:	7c7a      	ldrb	r2, [r7, #17]
 800d15e:	4613      	mov	r3, r2
 800d160:	005b      	lsls	r3, r3, #1
 800d162:	4413      	add	r3, r2
 800d164:	00db      	lsls	r3, r3, #3
 800d166:	3308      	adds	r3, #8
 800d168:	4a41      	ldr	r2, [pc, #260]	@ (800d270 <etharp_query+0x268>)
 800d16a:	4413      	add	r3, r2
 800d16c:	3304      	adds	r3, #4
 800d16e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d172:	9200      	str	r2, [sp, #0]
 800d174:	697a      	ldr	r2, [r7, #20]
 800d176:	6879      	ldr	r1, [r7, #4]
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f000 f9d1 	bl	800d520 <ethernet_output>
 800d17e:	4603      	mov	r3, r0
 800d180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d184:	e067      	b.n	800d256 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d186:	7c7a      	ldrb	r2, [r7, #17]
 800d188:	4939      	ldr	r1, [pc, #228]	@ (800d270 <etharp_query+0x268>)
 800d18a:	4613      	mov	r3, r2
 800d18c:	005b      	lsls	r3, r3, #1
 800d18e:	4413      	add	r3, r2
 800d190:	00db      	lsls	r3, r3, #3
 800d192:	440b      	add	r3, r1
 800d194:	3314      	adds	r3, #20
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d15c      	bne.n	800d256 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d19c:	2300      	movs	r3, #0
 800d19e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d1a4:	e01c      	b.n	800d1e0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	895a      	ldrh	r2, [r3, #10]
 800d1aa:	69fb      	ldr	r3, [r7, #28]
 800d1ac:	891b      	ldrh	r3, [r3, #8]
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d10a      	bne.n	800d1c8 <etharp_query+0x1c0>
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d006      	beq.n	800d1c8 <etharp_query+0x1c0>
 800d1ba:	4b2a      	ldr	r3, [pc, #168]	@ (800d264 <etharp_query+0x25c>)
 800d1bc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800d1c0:	492f      	ldr	r1, [pc, #188]	@ (800d280 <etharp_query+0x278>)
 800d1c2:	482a      	ldr	r0, [pc, #168]	@ (800d26c <etharp_query+0x264>)
 800d1c4:	f00a f9a2 	bl	801750c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	7b1b      	ldrb	r3, [r3, #12]
 800d1cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d002      	beq.n	800d1da <etharp_query+0x1d2>
        copy_needed = 1;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	61bb      	str	r3, [r7, #24]
        break;
 800d1d8:	e005      	b.n	800d1e6 <etharp_query+0x1de>
      }
      p = p->next;
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1df      	bne.n	800d1a6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d007      	beq.n	800d1fc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800d1f2:	200e      	movs	r0, #14
 800d1f4:	f003 fd94 	bl	8010d20 <pbuf_clone>
 800d1f8:	61f8      	str	r0, [r7, #28]
 800d1fa:	e004      	b.n	800d206 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d200:	69f8      	ldr	r0, [r7, #28]
 800d202:	f003 fa83 	bl	801070c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d206:	69fb      	ldr	r3, [r7, #28]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d021      	beq.n	800d250 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d20c:	7c7a      	ldrb	r2, [r7, #17]
 800d20e:	4918      	ldr	r1, [pc, #96]	@ (800d270 <etharp_query+0x268>)
 800d210:	4613      	mov	r3, r2
 800d212:	005b      	lsls	r3, r3, #1
 800d214:	4413      	add	r3, r2
 800d216:	00db      	lsls	r3, r3, #3
 800d218:	440b      	add	r3, r1
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d00a      	beq.n	800d236 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d220:	7c7a      	ldrb	r2, [r7, #17]
 800d222:	4913      	ldr	r1, [pc, #76]	@ (800d270 <etharp_query+0x268>)
 800d224:	4613      	mov	r3, r2
 800d226:	005b      	lsls	r3, r3, #1
 800d228:	4413      	add	r3, r2
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	440b      	add	r3, r1
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4618      	mov	r0, r3
 800d232:	f003 f9c5 	bl	80105c0 <pbuf_free>
      }
      arp_table[i].q = p;
 800d236:	7c7a      	ldrb	r2, [r7, #17]
 800d238:	490d      	ldr	r1, [pc, #52]	@ (800d270 <etharp_query+0x268>)
 800d23a:	4613      	mov	r3, r2
 800d23c:	005b      	lsls	r3, r3, #1
 800d23e:	4413      	add	r3, r2
 800d240:	00db      	lsls	r3, r3, #3
 800d242:	440b      	add	r3, r1
 800d244:	69fa      	ldr	r2, [r7, #28]
 800d246:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d248:	2300      	movs	r3, #0
 800d24a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d24e:	e002      	b.n	800d256 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d250:	23ff      	movs	r3, #255	@ 0xff
 800d252:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800d256:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3728      	adds	r7, #40	@ 0x28
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	08018ac0 	.word	0x08018ac0
 800d268:	08018c98 	.word	0x08018c98
 800d26c:	08018b64 	.word	0x08018b64
 800d270:	240047f0 	.word	0x240047f0
 800d274:	08018ca8 	.word	0x08018ca8
 800d278:	08018c8c 	.word	0x08018c8c
 800d27c:	240048e0 	.word	0x240048e0
 800d280:	08018cd0 	.word	0x08018cd0

0800d284 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b08a      	sub	sp, #40	@ 0x28
 800d288:	af02      	add	r7, sp, #8
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	60b9      	str	r1, [r7, #8]
 800d28e:	607a      	str	r2, [r7, #4]
 800d290:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d292:	2300      	movs	r3, #0
 800d294:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d106      	bne.n	800d2aa <etharp_raw+0x26>
 800d29c:	4b3a      	ldr	r3, [pc, #232]	@ (800d388 <etharp_raw+0x104>)
 800d29e:	f240 4257 	movw	r2, #1111	@ 0x457
 800d2a2:	493a      	ldr	r1, [pc, #232]	@ (800d38c <etharp_raw+0x108>)
 800d2a4:	483a      	ldr	r0, [pc, #232]	@ (800d390 <etharp_raw+0x10c>)
 800d2a6:	f00a f931 	bl	801750c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d2aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d2ae:	211c      	movs	r1, #28
 800d2b0:	200e      	movs	r0, #14
 800d2b2:	f002 fea3 	bl	800fffc <pbuf_alloc>
 800d2b6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d2b8:	69bb      	ldr	r3, [r7, #24]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d102      	bne.n	800d2c4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d2be:	f04f 33ff 	mov.w	r3, #4294967295
 800d2c2:	e05d      	b.n	800d380 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d2c4:	69bb      	ldr	r3, [r7, #24]
 800d2c6:	895b      	ldrh	r3, [r3, #10]
 800d2c8:	2b1b      	cmp	r3, #27
 800d2ca:	d806      	bhi.n	800d2da <etharp_raw+0x56>
 800d2cc:	4b2e      	ldr	r3, [pc, #184]	@ (800d388 <etharp_raw+0x104>)
 800d2ce:	f240 4262 	movw	r2, #1122	@ 0x462
 800d2d2:	4930      	ldr	r1, [pc, #192]	@ (800d394 <etharp_raw+0x110>)
 800d2d4:	482e      	ldr	r0, [pc, #184]	@ (800d390 <etharp_raw+0x10c>)
 800d2d6:	f00a f919 	bl	801750c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d2da:	69bb      	ldr	r3, [r7, #24]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d2e0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7fc ff42 	bl	800a16c <lwip_htons>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d2f6:	2b06      	cmp	r3, #6
 800d2f8:	d006      	beq.n	800d308 <etharp_raw+0x84>
 800d2fa:	4b23      	ldr	r3, [pc, #140]	@ (800d388 <etharp_raw+0x104>)
 800d2fc:	f240 4269 	movw	r2, #1129	@ 0x469
 800d300:	4925      	ldr	r1, [pc, #148]	@ (800d398 <etharp_raw+0x114>)
 800d302:	4823      	ldr	r0, [pc, #140]	@ (800d390 <etharp_raw+0x10c>)
 800d304:	f00a f902 	bl	801750c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	3308      	adds	r3, #8
 800d30c:	2206      	movs	r2, #6
 800d30e:	6839      	ldr	r1, [r7, #0]
 800d310:	4618      	mov	r0, r3
 800d312:	f00a fb26 	bl	8017962 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	3312      	adds	r3, #18
 800d31a:	2206      	movs	r2, #6
 800d31c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d31e:	4618      	mov	r0, r3
 800d320:	f00a fb1f 	bl	8017962 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	330e      	adds	r3, #14
 800d328:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d32a:	6812      	ldr	r2, [r2, #0]
 800d32c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	3318      	adds	r3, #24
 800d332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d334:	6812      	ldr	r2, [r2, #0]
 800d336:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	2200      	movs	r2, #0
 800d33c:	701a      	strb	r2, [r3, #0]
 800d33e:	2200      	movs	r2, #0
 800d340:	f042 0201 	orr.w	r2, r2, #1
 800d344:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	2200      	movs	r2, #0
 800d34a:	f042 0208 	orr.w	r2, r2, #8
 800d34e:	709a      	strb	r2, [r3, #2]
 800d350:	2200      	movs	r2, #0
 800d352:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	2206      	movs	r2, #6
 800d358:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	2204      	movs	r2, #4
 800d35e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d360:	f640 0306 	movw	r3, #2054	@ 0x806
 800d364:	9300      	str	r3, [sp, #0]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	68ba      	ldr	r2, [r7, #8]
 800d36a:	69b9      	ldr	r1, [r7, #24]
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	f000 f8d7 	bl	800d520 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d372:	69b8      	ldr	r0, [r7, #24]
 800d374:	f003 f924 	bl	80105c0 <pbuf_free>
  p = NULL;
 800d378:	2300      	movs	r3, #0
 800d37a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d37c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d380:	4618      	mov	r0, r3
 800d382:	3720      	adds	r7, #32
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	08018ac0 	.word	0x08018ac0
 800d38c:	08018c3c 	.word	0x08018c3c
 800d390:	08018b64 	.word	0x08018b64
 800d394:	08018cec 	.word	0x08018cec
 800d398:	08018d20 	.word	0x08018d20

0800d39c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b088      	sub	sp, #32
 800d3a0:	af04      	add	r7, sp, #16
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	9203      	str	r2, [sp, #12]
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	9202      	str	r2, [sp, #8]
 800d3c0:	4a06      	ldr	r2, [pc, #24]	@ (800d3dc <etharp_request_dst+0x40>)
 800d3c2:	9201      	str	r2, [sp, #4]
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f7ff ff5a 	bl	800d284 <etharp_raw>
 800d3d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3710      	adds	r7, #16
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	0801b824 	.word	0x0801b824

0800d3e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d3ea:	4a05      	ldr	r2, [pc, #20]	@ (800d400 <etharp_request+0x20>)
 800d3ec:	6839      	ldr	r1, [r7, #0]
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f7ff ffd4 	bl	800d39c <etharp_request_dst>
 800d3f4:	4603      	mov	r3, r0
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3708      	adds	r7, #8
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop
 800d400:	0801b81c 	.word	0x0801b81c

0800d404 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b086      	sub	sp, #24
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800d40e:	230e      	movs	r3, #14
 800d410:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	895b      	ldrh	r3, [r3, #10]
 800d416:	2b0e      	cmp	r3, #14
 800d418:	d96e      	bls.n	800d4f8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	7bdb      	ldrb	r3, [r3, #15]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d106      	bne.n	800d430 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d428:	3301      	adds	r3, #1
 800d42a:	b2da      	uxtb	r2, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	7b1a      	ldrb	r2, [r3, #12]
 800d43a:	7b5b      	ldrb	r3, [r3, #13]
 800d43c:	021b      	lsls	r3, r3, #8
 800d43e:	4313      	orrs	r3, r2
 800d440:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	f003 0301 	and.w	r3, r3, #1
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d023      	beq.n	800d496 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	2b01      	cmp	r3, #1
 800d454:	d10f      	bne.n	800d476 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	785b      	ldrb	r3, [r3, #1]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d11b      	bne.n	800d496 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d462:	2b5e      	cmp	r3, #94	@ 0x5e
 800d464:	d117      	bne.n	800d496 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	7b5b      	ldrb	r3, [r3, #13]
 800d46a:	f043 0310 	orr.w	r3, r3, #16
 800d46e:	b2da      	uxtb	r2, r3
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	735a      	strb	r2, [r3, #13]
 800d474:	e00f      	b.n	800d496 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	2206      	movs	r2, #6
 800d47a:	4928      	ldr	r1, [pc, #160]	@ (800d51c <ethernet_input+0x118>)
 800d47c:	4618      	mov	r0, r3
 800d47e:	f00a f98d 	bl	801779c <memcmp>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d106      	bne.n	800d496 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	7b5b      	ldrb	r3, [r3, #13]
 800d48c:	f043 0308 	orr.w	r3, r3, #8
 800d490:	b2da      	uxtb	r2, r3
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d496:	89fb      	ldrh	r3, [r7, #14]
 800d498:	2b08      	cmp	r3, #8
 800d49a:	d003      	beq.n	800d4a4 <ethernet_input+0xa0>
 800d49c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800d4a0:	d014      	beq.n	800d4cc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d4a2:	e032      	b.n	800d50a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d4aa:	f003 0308 	and.w	r3, r3, #8
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d024      	beq.n	800d4fc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d4b2:	8afb      	ldrh	r3, [r7, #22]
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f002 fffc 	bl	80104b4 <pbuf_remove_header>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d11e      	bne.n	800d500 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800d4c2:	6839      	ldr	r1, [r7, #0]
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 fb97 	bl	800dbf8 <ip4_input>
      break;
 800d4ca:	e013      	b.n	800d4f4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d4d2:	f003 0308 	and.w	r3, r3, #8
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d014      	beq.n	800d504 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d4da:	8afb      	ldrh	r3, [r7, #22]
 800d4dc:	4619      	mov	r1, r3
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f002 ffe8 	bl	80104b4 <pbuf_remove_header>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d10e      	bne.n	800d508 <ethernet_input+0x104>
        etharp_input(p, netif);
 800d4ea:	6839      	ldr	r1, [r7, #0]
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7ff fb61 	bl	800cbb4 <etharp_input>
      break;
 800d4f2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	e00c      	b.n	800d512 <ethernet_input+0x10e>
    goto free_and_return;
 800d4f8:	bf00      	nop
 800d4fa:	e006      	b.n	800d50a <ethernet_input+0x106>
        goto free_and_return;
 800d4fc:	bf00      	nop
 800d4fe:	e004      	b.n	800d50a <ethernet_input+0x106>
        goto free_and_return;
 800d500:	bf00      	nop
 800d502:	e002      	b.n	800d50a <ethernet_input+0x106>
        goto free_and_return;
 800d504:	bf00      	nop
 800d506:	e000      	b.n	800d50a <ethernet_input+0x106>
        goto free_and_return;
 800d508:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f003 f858 	bl	80105c0 <pbuf_free>
  return ERR_OK;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3718      	adds	r7, #24
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	0801b81c 	.word	0x0801b81c

0800d520 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d520:	b580      	push	{r7, lr}
 800d522:	b086      	sub	sp, #24
 800d524:	af00      	add	r7, sp, #0
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	607a      	str	r2, [r7, #4]
 800d52c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d52e:	8c3b      	ldrh	r3, [r7, #32]
 800d530:	4618      	mov	r0, r3
 800d532:	f7fc fe1b 	bl	800a16c <lwip_htons>
 800d536:	4603      	mov	r3, r0
 800d538:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d53a:	210e      	movs	r1, #14
 800d53c:	68b8      	ldr	r0, [r7, #8]
 800d53e:	f002 ffa9 	bl	8010494 <pbuf_add_header>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d125      	bne.n	800d594 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	8afa      	ldrh	r2, [r7, #22]
 800d552:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	2206      	movs	r2, #6
 800d558:	6839      	ldr	r1, [r7, #0]
 800d55a:	4618      	mov	r0, r3
 800d55c:	f00a fa01 	bl	8017962 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	3306      	adds	r3, #6
 800d564:	2206      	movs	r2, #6
 800d566:	6879      	ldr	r1, [r7, #4]
 800d568:	4618      	mov	r0, r3
 800d56a:	f00a f9fa 	bl	8017962 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d574:	2b06      	cmp	r3, #6
 800d576:	d006      	beq.n	800d586 <ethernet_output+0x66>
 800d578:	4b0a      	ldr	r3, [pc, #40]	@ (800d5a4 <ethernet_output+0x84>)
 800d57a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800d57e:	490a      	ldr	r1, [pc, #40]	@ (800d5a8 <ethernet_output+0x88>)
 800d580:	480a      	ldr	r0, [pc, #40]	@ (800d5ac <ethernet_output+0x8c>)
 800d582:	f009 ffc3 	bl	801750c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	699b      	ldr	r3, [r3, #24]
 800d58a:	68b9      	ldr	r1, [r7, #8]
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	4798      	blx	r3
 800d590:	4603      	mov	r3, r0
 800d592:	e002      	b.n	800d59a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d594:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d596:	f06f 0301 	mvn.w	r3, #1
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3718      	adds	r7, #24
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	08018d64 	.word	0x08018d64
 800d5a8:	08018dc8 	.word	0x08018dc8
 800d5ac:	08018dfc 	.word	0x08018dfc

0800d5b0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b08e      	sub	sp, #56	@ 0x38
 800d5b4:	af04      	add	r7, sp, #16
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d5ba:	4b87      	ldr	r3, [pc, #540]	@ (800d7d8 <icmp_input+0x228>)
 800d5bc:	689b      	ldr	r3, [r3, #8]
 800d5be:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	f003 030f 	and.w	r3, r3, #15
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800d5d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d5d2:	2b13      	cmp	r3, #19
 800d5d4:	f240 80e8 	bls.w	800d7a8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	895b      	ldrh	r3, [r3, #10]
 800d5dc:	2b03      	cmp	r3, #3
 800d5de:	f240 80e5 	bls.w	800d7ac <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d5ec:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f000 80d2 	beq.w	800d79a <icmp_input+0x1ea>
 800d5f6:	2b08      	cmp	r3, #8
 800d5f8:	f040 80d2 	bne.w	800d7a0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d5fc:	4b77      	ldr	r3, [pc, #476]	@ (800d7dc <icmp_input+0x22c>)
 800d5fe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d600:	4b75      	ldr	r3, [pc, #468]	@ (800d7d8 <icmp_input+0x228>)
 800d602:	695b      	ldr	r3, [r3, #20]
 800d604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d608:	2be0      	cmp	r3, #224	@ 0xe0
 800d60a:	f000 80d6 	beq.w	800d7ba <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d60e:	4b72      	ldr	r3, [pc, #456]	@ (800d7d8 <icmp_input+0x228>)
 800d610:	695b      	ldr	r3, [r3, #20]
 800d612:	4a71      	ldr	r2, [pc, #452]	@ (800d7d8 <icmp_input+0x228>)
 800d614:	6812      	ldr	r2, [r2, #0]
 800d616:	4611      	mov	r1, r2
 800d618:	4618      	mov	r0, r3
 800d61a:	f000 fd07 	bl	800e02c <ip4_addr_isbroadcast_u32>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	f040 80cc 	bne.w	800d7be <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	891b      	ldrh	r3, [r3, #8]
 800d62a:	2b07      	cmp	r3, #7
 800d62c:	f240 80c0 	bls.w	800d7b0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 f9e0 	bl	800d9f6 <inet_chksum_pbuf>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d003      	beq.n	800d644 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f002 ffbf 	bl	80105c0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800d642:	e0c5      	b.n	800d7d0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d644:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d646:	330e      	adds	r3, #14
 800d648:	4619      	mov	r1, r3
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f002 ff22 	bl	8010494 <pbuf_add_header>
 800d650:	4603      	mov	r3, r0
 800d652:	2b00      	cmp	r3, #0
 800d654:	d04b      	beq.n	800d6ee <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	891a      	ldrh	r2, [r3, #8]
 800d65a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d65c:	4413      	add	r3, r2
 800d65e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	891b      	ldrh	r3, [r3, #8]
 800d664:	8b7a      	ldrh	r2, [r7, #26]
 800d666:	429a      	cmp	r2, r3
 800d668:	f0c0 80ab 	bcc.w	800d7c2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d66c:	8b7b      	ldrh	r3, [r7, #26]
 800d66e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d672:	4619      	mov	r1, r3
 800d674:	200e      	movs	r0, #14
 800d676:	f002 fcc1 	bl	800fffc <pbuf_alloc>
 800d67a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	f000 80a1 	beq.w	800d7c6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	895b      	ldrh	r3, [r3, #10]
 800d688:	461a      	mov	r2, r3
 800d68a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d68c:	3308      	adds	r3, #8
 800d68e:	429a      	cmp	r2, r3
 800d690:	d203      	bcs.n	800d69a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d692:	6978      	ldr	r0, [r7, #20]
 800d694:	f002 ff94 	bl	80105c0 <pbuf_free>
          goto icmperr;
 800d698:	e096      	b.n	800d7c8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d6a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f00a f95d 	bl	8017962 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d6a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	6978      	ldr	r0, [r7, #20]
 800d6ae:	f002 ff01 	bl	80104b4 <pbuf_remove_header>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d009      	beq.n	800d6cc <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d6b8:	4b49      	ldr	r3, [pc, #292]	@ (800d7e0 <icmp_input+0x230>)
 800d6ba:	22b6      	movs	r2, #182	@ 0xb6
 800d6bc:	4949      	ldr	r1, [pc, #292]	@ (800d7e4 <icmp_input+0x234>)
 800d6be:	484a      	ldr	r0, [pc, #296]	@ (800d7e8 <icmp_input+0x238>)
 800d6c0:	f009 ff24 	bl	801750c <iprintf>
          pbuf_free(r);
 800d6c4:	6978      	ldr	r0, [r7, #20]
 800d6c6:	f002 ff7b 	bl	80105c0 <pbuf_free>
          goto icmperr;
 800d6ca:	e07d      	b.n	800d7c8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d6cc:	6879      	ldr	r1, [r7, #4]
 800d6ce:	6978      	ldr	r0, [r7, #20]
 800d6d0:	f003 f8aa 	bl	8010828 <pbuf_copy>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d003      	beq.n	800d6e2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d6da:	6978      	ldr	r0, [r7, #20]
 800d6dc:	f002 ff70 	bl	80105c0 <pbuf_free>
          goto icmperr;
 800d6e0:	e072      	b.n	800d7c8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f002 ff6c 	bl	80105c0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	607b      	str	r3, [r7, #4]
 800d6ec:	e00f      	b.n	800d70e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d6ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d6f0:	330e      	adds	r3, #14
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f002 fedd 	bl	80104b4 <pbuf_remove_header>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d006      	beq.n	800d70e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d700:	4b37      	ldr	r3, [pc, #220]	@ (800d7e0 <icmp_input+0x230>)
 800d702:	22c7      	movs	r2, #199	@ 0xc7
 800d704:	4939      	ldr	r1, [pc, #228]	@ (800d7ec <icmp_input+0x23c>)
 800d706:	4838      	ldr	r0, [pc, #224]	@ (800d7e8 <icmp_input+0x238>)
 800d708:	f009 ff00 	bl	801750c <iprintf>
          goto icmperr;
 800d70c:	e05c      	b.n	800d7c8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d714:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d716:	4619      	mov	r1, r3
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f002 febb 	bl	8010494 <pbuf_add_header>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d13c      	bne.n	800d79e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	685b      	ldr	r3, [r3, #4]
 800d728:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d732:	4b29      	ldr	r3, [pc, #164]	@ (800d7d8 <icmp_input+0x228>)
 800d734:	691a      	ldr	r2, [r3, #16]
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	2200      	movs	r2, #0
 800d73e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	885b      	ldrh	r3, [r3, #2]
 800d744:	b29b      	uxth	r3, r3
 800d746:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d907      	bls.n	800d75e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	885b      	ldrh	r3, [r3, #2]
 800d752:	b29b      	uxth	r3, r3
 800d754:	3309      	adds	r3, #9
 800d756:	b29a      	uxth	r2, r3
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	805a      	strh	r2, [r3, #2]
 800d75c:	e006      	b.n	800d76c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	885b      	ldrh	r3, [r3, #2]
 800d762:	b29b      	uxth	r3, r3
 800d764:	3308      	adds	r3, #8
 800d766:	b29a      	uxth	r2, r3
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	22ff      	movs	r2, #255	@ 0xff
 800d770:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2200      	movs	r2, #0
 800d776:	729a      	strb	r2, [r3, #10]
 800d778:	2200      	movs	r2, #0
 800d77a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	9302      	str	r3, [sp, #8]
 800d780:	2301      	movs	r3, #1
 800d782:	9301      	str	r3, [sp, #4]
 800d784:	2300      	movs	r3, #0
 800d786:	9300      	str	r3, [sp, #0]
 800d788:	23ff      	movs	r3, #255	@ 0xff
 800d78a:	2200      	movs	r2, #0
 800d78c:	69f9      	ldr	r1, [r7, #28]
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 fb74 	bl	800de7c <ip4_output_if>
 800d794:	4603      	mov	r3, r0
 800d796:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d798:	e001      	b.n	800d79e <icmp_input+0x1ee>
      break;
 800d79a:	bf00      	nop
 800d79c:	e000      	b.n	800d7a0 <icmp_input+0x1f0>
      break;
 800d79e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f002 ff0d 	bl	80105c0 <pbuf_free>
  return;
 800d7a6:	e013      	b.n	800d7d0 <icmp_input+0x220>
    goto lenerr;
 800d7a8:	bf00      	nop
 800d7aa:	e002      	b.n	800d7b2 <icmp_input+0x202>
    goto lenerr;
 800d7ac:	bf00      	nop
 800d7ae:	e000      	b.n	800d7b2 <icmp_input+0x202>
        goto lenerr;
 800d7b0:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f002 ff04 	bl	80105c0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d7b8:	e00a      	b.n	800d7d0 <icmp_input+0x220>
        goto icmperr;
 800d7ba:	bf00      	nop
 800d7bc:	e004      	b.n	800d7c8 <icmp_input+0x218>
        goto icmperr;
 800d7be:	bf00      	nop
 800d7c0:	e002      	b.n	800d7c8 <icmp_input+0x218>
          goto icmperr;
 800d7c2:	bf00      	nop
 800d7c4:	e000      	b.n	800d7c8 <icmp_input+0x218>
          goto icmperr;
 800d7c6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f002 fef9 	bl	80105c0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d7ce:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d7d0:	3728      	adds	r7, #40	@ 0x28
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	240048e4 	.word	0x240048e4
 800d7dc:	240048f8 	.word	0x240048f8
 800d7e0:	08018e24 	.word	0x08018e24
 800d7e4:	08018e88 	.word	0x08018e88
 800d7e8:	08018ec0 	.word	0x08018ec0
 800d7ec:	08018ee8 	.word	0x08018ee8

0800d7f0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d7fc:	78fb      	ldrb	r3, [r7, #3]
 800d7fe:	461a      	mov	r2, r3
 800d800:	2103      	movs	r1, #3
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 f814 	bl	800d830 <icmp_send_response>
}
 800d808:	bf00      	nop
 800d80a:	3708      	adds	r7, #8
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	460b      	mov	r3, r1
 800d81a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d81c:	78fb      	ldrb	r3, [r7, #3]
 800d81e:	461a      	mov	r2, r3
 800d820:	210b      	movs	r1, #11
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f000 f804 	bl	800d830 <icmp_send_response>
}
 800d828:	bf00      	nop
 800d82a:	3708      	adds	r7, #8
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b08c      	sub	sp, #48	@ 0x30
 800d834:	af04      	add	r7, sp, #16
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	460b      	mov	r3, r1
 800d83a:	70fb      	strb	r3, [r7, #3]
 800d83c:	4613      	mov	r3, r2
 800d83e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d840:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d844:	2124      	movs	r1, #36	@ 0x24
 800d846:	2022      	movs	r0, #34	@ 0x22
 800d848:	f002 fbd8 	bl	800fffc <pbuf_alloc>
 800d84c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d84e:	69fb      	ldr	r3, [r7, #28]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d056      	beq.n	800d902 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d854:	69fb      	ldr	r3, [r7, #28]
 800d856:	895b      	ldrh	r3, [r3, #10]
 800d858:	2b23      	cmp	r3, #35	@ 0x23
 800d85a:	d806      	bhi.n	800d86a <icmp_send_response+0x3a>
 800d85c:	4b2b      	ldr	r3, [pc, #172]	@ (800d90c <icmp_send_response+0xdc>)
 800d85e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800d862:	492b      	ldr	r1, [pc, #172]	@ (800d910 <icmp_send_response+0xe0>)
 800d864:	482b      	ldr	r0, [pc, #172]	@ (800d914 <icmp_send_response+0xe4>)
 800d866:	f009 fe51 	bl	801750c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	78fa      	ldrb	r2, [r7, #3]
 800d87a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	78ba      	ldrb	r2, [r7, #2]
 800d880:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	2200      	movs	r2, #0
 800d886:	711a      	strb	r2, [r3, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	2200      	movs	r2, #0
 800d890:	719a      	strb	r2, [r3, #6]
 800d892:	2200      	movs	r2, #0
 800d894:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	f103 0008 	add.w	r0, r3, #8
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	221c      	movs	r2, #28
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	f00a f85c 	bl	8017962 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	68db      	ldr	r3, [r3, #12]
 800d8ae:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d8b0:	f107 030c 	add.w	r3, r7, #12
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f000 f905 	bl	800dac4 <ip4_route>
 800d8ba:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d01b      	beq.n	800d8fa <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	709a      	strb	r2, [r3, #2]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800d8cc:	69fb      	ldr	r3, [r7, #28]
 800d8ce:	895b      	ldrh	r3, [r3, #10]
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	6978      	ldr	r0, [r7, #20]
 800d8d4:	f000 f87d 	bl	800d9d2 <inet_chksum>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	461a      	mov	r2, r3
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d8e0:	f107 020c 	add.w	r2, r7, #12
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	9302      	str	r3, [sp, #8]
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	9301      	str	r3, [sp, #4]
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	9300      	str	r3, [sp, #0]
 800d8f0:	23ff      	movs	r3, #255	@ 0xff
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	69f8      	ldr	r0, [r7, #28]
 800d8f6:	f000 fac1 	bl	800de7c <ip4_output_if>
  }
  pbuf_free(q);
 800d8fa:	69f8      	ldr	r0, [r7, #28]
 800d8fc:	f002 fe60 	bl	80105c0 <pbuf_free>
 800d900:	e000      	b.n	800d904 <icmp_send_response+0xd4>
    return;
 800d902:	bf00      	nop
}
 800d904:	3720      	adds	r7, #32
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	08018e24 	.word	0x08018e24
 800d910:	08018f1c 	.word	0x08018f1c
 800d914:	08018ec0 	.word	0x08018ec0

0800d918 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800d918:	b480      	push	{r7}
 800d91a:	b089      	sub	sp, #36	@ 0x24
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800d926:	2300      	movs	r3, #0
 800d928:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800d92a:	2300      	movs	r3, #0
 800d92c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800d92e:	69fb      	ldr	r3, [r7, #28]
 800d930:	f003 0301 	and.w	r3, r3, #1
 800d934:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00d      	beq.n	800d958 <lwip_standard_chksum+0x40>
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	dd0a      	ble.n	800d958 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800d942:	69fa      	ldr	r2, [r7, #28]
 800d944:	1c53      	adds	r3, r2, #1
 800d946:	61fb      	str	r3, [r7, #28]
 800d948:	f107 030e 	add.w	r3, r7, #14
 800d94c:	3301      	adds	r3, #1
 800d94e:	7812      	ldrb	r2, [r2, #0]
 800d950:	701a      	strb	r2, [r3, #0]
    len--;
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	3b01      	subs	r3, #1
 800d956:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800d958:	69fb      	ldr	r3, [r7, #28]
 800d95a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800d95c:	e00a      	b.n	800d974 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800d95e:	69bb      	ldr	r3, [r7, #24]
 800d960:	1c9a      	adds	r2, r3, #2
 800d962:	61ba      	str	r2, [r7, #24]
 800d964:	881b      	ldrh	r3, [r3, #0]
 800d966:	461a      	mov	r2, r3
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	4413      	add	r3, r2
 800d96c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	3b02      	subs	r3, #2
 800d972:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	2b01      	cmp	r3, #1
 800d978:	dcf1      	bgt.n	800d95e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	dd04      	ble.n	800d98a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800d980:	f107 030e 	add.w	r3, r7, #14
 800d984:	69ba      	ldr	r2, [r7, #24]
 800d986:	7812      	ldrb	r2, [r2, #0]
 800d988:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800d98a:	89fb      	ldrh	r3, [r7, #14]
 800d98c:	461a      	mov	r2, r3
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	4413      	add	r3, r2
 800d992:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	0c1a      	lsrs	r2, r3, #16
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	4413      	add	r3, r2
 800d99e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	0c1a      	lsrs	r2, r3, #16
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	4413      	add	r3, r2
 800d9aa:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d007      	beq.n	800d9c2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	021b      	lsls	r3, r3, #8
 800d9b6:	b29a      	uxth	r2, r3
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	0a1b      	lsrs	r3, r3, #8
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	b29b      	uxth	r3, r3
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3724      	adds	r7, #36	@ 0x24
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr

0800d9d2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b082      	sub	sp, #8
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
 800d9da:	460b      	mov	r3, r1
 800d9dc:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800d9de:	887b      	ldrh	r3, [r7, #2]
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f7ff ff98 	bl	800d918 <lwip_standard_chksum>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	43db      	mvns	r3, r3
 800d9ec:	b29b      	uxth	r3, r3
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3708      	adds	r7, #8
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b086      	sub	sp, #24
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800d9fe:	2300      	movs	r3, #0
 800da00:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800da02:	2300      	movs	r3, #0
 800da04:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	613b      	str	r3, [r7, #16]
 800da0a:	e02b      	b.n	800da64 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	685a      	ldr	r2, [r3, #4]
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	895b      	ldrh	r3, [r3, #10]
 800da14:	4619      	mov	r1, r3
 800da16:	4610      	mov	r0, r2
 800da18:	f7ff ff7e 	bl	800d918 <lwip_standard_chksum>
 800da1c:	4603      	mov	r3, r0
 800da1e:	461a      	mov	r2, r3
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	4413      	add	r3, r2
 800da24:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	0c1a      	lsrs	r2, r3, #16
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	4413      	add	r3, r2
 800da30:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	895b      	ldrh	r3, [r3, #10]
 800da36:	f003 0301 	and.w	r3, r3, #1
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d00e      	beq.n	800da5e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2b00      	cmp	r3, #0
 800da44:	bf0c      	ite	eq
 800da46:	2301      	moveq	r3, #1
 800da48:	2300      	movne	r3, #0
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	021b      	lsls	r3, r3, #8
 800da52:	b29a      	uxth	r2, r3
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	0a1b      	lsrs	r3, r3, #8
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	4313      	orrs	r3, r2
 800da5c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	613b      	str	r3, [r7, #16]
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1d0      	bne.n	800da0c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d007      	beq.n	800da80 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	021b      	lsls	r3, r3, #8
 800da74:	b29a      	uxth	r2, r3
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	0a1b      	lsrs	r3, r3, #8
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	4313      	orrs	r3, r2
 800da7e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	b29b      	uxth	r3, r3
 800da84:	43db      	mvns	r3, r3
 800da86:	b29b      	uxth	r3, r3
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3718      	adds	r7, #24
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800da96:	2300      	movs	r3, #0
 800da98:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800da9a:	f003 fa21 	bl	8010ee0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800da9e:	f001 fa99 	bl	800efd4 <mem_init>
  memp_init();
 800daa2:	f001 fde1 	bl	800f668 <memp_init>
  pbuf_init();
  netif_init();
 800daa6:	f001 feed 	bl	800f884 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800daaa:	f008 ff17 	bl	80168dc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800daae:	f003 faa1 	bl	8010ff4 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800dab2:	f7fe fa69 	bl	800bf88 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800dab6:	f008 fe57 	bl	8016768 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800daba:	bf00      	nop
 800dabc:	3708      	adds	r7, #8
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}
	...

0800dac4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b085      	sub	sp, #20
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800dacc:	4b33      	ldr	r3, [pc, #204]	@ (800db9c <ip4_route+0xd8>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	60fb      	str	r3, [r7, #12]
 800dad2:	e036      	b.n	800db42 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dada:	f003 0301 	and.w	r3, r3, #1
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d02b      	beq.n	800db3c <ip4_route+0x78>
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800daea:	089b      	lsrs	r3, r3, #2
 800daec:	f003 0301 	and.w	r3, r3, #1
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d022      	beq.n	800db3c <ip4_route+0x78>
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	3304      	adds	r3, #4
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d01d      	beq.n	800db3c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681a      	ldr	r2, [r3, #0]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	3304      	adds	r3, #4
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	405a      	eors	r2, r3
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	3308      	adds	r3, #8
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4013      	ands	r3, r2
 800db14:	2b00      	cmp	r3, #0
 800db16:	d101      	bne.n	800db1c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	e038      	b.n	800db8e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800db22:	f003 0302 	and.w	r3, r3, #2
 800db26:	2b00      	cmp	r3, #0
 800db28:	d108      	bne.n	800db3c <ip4_route+0x78>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	330c      	adds	r3, #12
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	429a      	cmp	r2, r3
 800db36:	d101      	bne.n	800db3c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	e028      	b.n	800db8e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	60fb      	str	r3, [r7, #12]
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d1c5      	bne.n	800dad4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800db48:	4b15      	ldr	r3, [pc, #84]	@ (800dba0 <ip4_route+0xdc>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d01a      	beq.n	800db86 <ip4_route+0xc2>
 800db50:	4b13      	ldr	r3, [pc, #76]	@ (800dba0 <ip4_route+0xdc>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800db58:	f003 0301 	and.w	r3, r3, #1
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d012      	beq.n	800db86 <ip4_route+0xc2>
 800db60:	4b0f      	ldr	r3, [pc, #60]	@ (800dba0 <ip4_route+0xdc>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800db68:	f003 0304 	and.w	r3, r3, #4
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d00a      	beq.n	800db86 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800db70:	4b0b      	ldr	r3, [pc, #44]	@ (800dba0 <ip4_route+0xdc>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	3304      	adds	r3, #4
 800db76:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d004      	beq.n	800db86 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	b2db      	uxtb	r3, r3
 800db82:	2b7f      	cmp	r3, #127	@ 0x7f
 800db84:	d101      	bne.n	800db8a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800db86:	2300      	movs	r3, #0
 800db88:	e001      	b.n	800db8e <ip4_route+0xca>
  }

  return netif_default;
 800db8a:	4b05      	ldr	r3, [pc, #20]	@ (800dba0 <ip4_route+0xdc>)
 800db8c:	681b      	ldr	r3, [r3, #0]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3714      	adds	r7, #20
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop
 800db9c:	24007b60 	.word	0x24007b60
 800dba0:	24007b64 	.word	0x24007b64

0800dba4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dbb2:	f003 0301 	and.w	r3, r3, #1
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d016      	beq.n	800dbea <ip4_input_accept+0x46>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	3304      	adds	r3, #4
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d011      	beq.n	800dbea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dbc6:	4b0b      	ldr	r3, [pc, #44]	@ (800dbf4 <ip4_input_accept+0x50>)
 800dbc8:	695a      	ldr	r2, [r3, #20]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	3304      	adds	r3, #4
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d008      	beq.n	800dbe6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800dbd4:	4b07      	ldr	r3, [pc, #28]	@ (800dbf4 <ip4_input_accept+0x50>)
 800dbd6:	695b      	ldr	r3, [r3, #20]
 800dbd8:	6879      	ldr	r1, [r7, #4]
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f000 fa26 	bl	800e02c <ip4_addr_isbroadcast_u32>
 800dbe0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d001      	beq.n	800dbea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e000      	b.n	800dbec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3708      	adds	r7, #8
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	240048e4 	.word	0x240048e4

0800dbf8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b088      	sub	sp, #32
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800dc02:	2301      	movs	r3, #1
 800dc04:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	091b      	lsrs	r3, r3, #4
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	2b04      	cmp	r3, #4
 800dc16:	d004      	beq.n	800dc22 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f002 fcd1 	bl	80105c0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	e123      	b.n	800de6a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	f003 030f 	and.w	r3, r3, #15
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	885b      	ldrh	r3, [r3, #2]
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7fc fa97 	bl	800a16c <lwip_htons>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	891b      	ldrh	r3, [r3, #8]
 800dc46:	8a3a      	ldrh	r2, [r7, #16]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d204      	bcs.n	800dc56 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800dc4c:	8a3b      	ldrh	r3, [r7, #16]
 800dc4e:	4619      	mov	r1, r3
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f002 fb31 	bl	80102b8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	895b      	ldrh	r3, [r3, #10]
 800dc5a:	8a7a      	ldrh	r2, [r7, #18]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d807      	bhi.n	800dc70 <ip4_input+0x78>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	891b      	ldrh	r3, [r3, #8]
 800dc64:	8a3a      	ldrh	r2, [r7, #16]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d802      	bhi.n	800dc70 <ip4_input+0x78>
 800dc6a:	8a7b      	ldrh	r3, [r7, #18]
 800dc6c:	2b13      	cmp	r3, #19
 800dc6e:	d804      	bhi.n	800dc7a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f002 fca5 	bl	80105c0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800dc76:	2300      	movs	r3, #0
 800dc78:	e0f7      	b.n	800de6a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	691b      	ldr	r3, [r3, #16]
 800dc7e:	4a7d      	ldr	r2, [pc, #500]	@ (800de74 <ip4_input+0x27c>)
 800dc80:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dc82:	69fb      	ldr	r3, [r7, #28]
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	4a7b      	ldr	r2, [pc, #492]	@ (800de74 <ip4_input+0x27c>)
 800dc88:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dc8a:	4b7a      	ldr	r3, [pc, #488]	@ (800de74 <ip4_input+0x27c>)
 800dc8c:	695b      	ldr	r3, [r3, #20]
 800dc8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dc92:	2be0      	cmp	r3, #224	@ 0xe0
 800dc94:	d112      	bne.n	800dcbc <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dc9c:	f003 0301 	and.w	r3, r3, #1
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d007      	beq.n	800dcb6 <ip4_input+0xbe>
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	3304      	adds	r3, #4
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d002      	beq.n	800dcb6 <ip4_input+0xbe>
      netif = inp;
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	61bb      	str	r3, [r7, #24]
 800dcb4:	e02a      	b.n	800dd0c <ip4_input+0x114>
    } else {
      netif = NULL;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	61bb      	str	r3, [r7, #24]
 800dcba:	e027      	b.n	800dd0c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800dcbc:	6838      	ldr	r0, [r7, #0]
 800dcbe:	f7ff ff71 	bl	800dba4 <ip4_input_accept>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d002      	beq.n	800dcce <ip4_input+0xd6>
      netif = inp;
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	61bb      	str	r3, [r7, #24]
 800dccc:	e01e      	b.n	800dd0c <ip4_input+0x114>
    } else {
      netif = NULL;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800dcd2:	4b68      	ldr	r3, [pc, #416]	@ (800de74 <ip4_input+0x27c>)
 800dcd4:	695b      	ldr	r3, [r3, #20]
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	2b7f      	cmp	r3, #127	@ 0x7f
 800dcda:	d017      	beq.n	800dd0c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800dcdc:	4b66      	ldr	r3, [pc, #408]	@ (800de78 <ip4_input+0x280>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	61bb      	str	r3, [r7, #24]
 800dce2:	e00e      	b.n	800dd02 <ip4_input+0x10a>
          if (netif == inp) {
 800dce4:	69ba      	ldr	r2, [r7, #24]
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d006      	beq.n	800dcfa <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800dcec:	69b8      	ldr	r0, [r7, #24]
 800dcee:	f7ff ff59 	bl	800dba4 <ip4_input_accept>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d108      	bne.n	800dd0a <ip4_input+0x112>
 800dcf8:	e000      	b.n	800dcfc <ip4_input+0x104>
            continue;
 800dcfa:	bf00      	nop
        NETIF_FOREACH(netif) {
 800dcfc:	69bb      	ldr	r3, [r7, #24]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	61bb      	str	r3, [r7, #24]
 800dd02:	69bb      	ldr	r3, [r7, #24]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d1ed      	bne.n	800dce4 <ip4_input+0xec>
 800dd08:	e000      	b.n	800dd0c <ip4_input+0x114>
            break;
 800dd0a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d111      	bne.n	800dd36 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800dd12:	69fb      	ldr	r3, [r7, #28]
 800dd14:	7a5b      	ldrb	r3, [r3, #9]
 800dd16:	2b11      	cmp	r3, #17
 800dd18:	d10d      	bne.n	800dd36 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800dd1a:	8a7b      	ldrh	r3, [r7, #18]
 800dd1c:	69fa      	ldr	r2, [r7, #28]
 800dd1e:	4413      	add	r3, r2
 800dd20:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	885b      	ldrh	r3, [r3, #2]
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 800dd2c:	d103      	bne.n	800dd36 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800dd32:	2300      	movs	r3, #0
 800dd34:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d017      	beq.n	800dd6c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800dd3c:	4b4d      	ldr	r3, [pc, #308]	@ (800de74 <ip4_input+0x27c>)
 800dd3e:	691b      	ldr	r3, [r3, #16]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d013      	beq.n	800dd6c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dd44:	4b4b      	ldr	r3, [pc, #300]	@ (800de74 <ip4_input+0x27c>)
 800dd46:	691b      	ldr	r3, [r3, #16]
 800dd48:	6839      	ldr	r1, [r7, #0]
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f000 f96e 	bl	800e02c <ip4_addr_isbroadcast_u32>
 800dd50:	4603      	mov	r3, r0
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d105      	bne.n	800dd62 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800dd56:	4b47      	ldr	r3, [pc, #284]	@ (800de74 <ip4_input+0x27c>)
 800dd58:	691b      	ldr	r3, [r3, #16]
 800dd5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dd5e:	2be0      	cmp	r3, #224	@ 0xe0
 800dd60:	d104      	bne.n	800dd6c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f002 fc2c 	bl	80105c0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	e07e      	b.n	800de6a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800dd6c:	69bb      	ldr	r3, [r7, #24]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d104      	bne.n	800dd7c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f002 fc24 	bl	80105c0 <pbuf_free>
    return ERR_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	e076      	b.n	800de6a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	88db      	ldrh	r3, [r3, #6]
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	461a      	mov	r2, r3
 800dd84:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800dd88:	4013      	ands	r3, r2
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d00b      	beq.n	800dda6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 fd22 	bl	800e7d8 <ip4_reass>
 800dd94:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d101      	bne.n	800dda0 <ip4_input+0x1a8>
      return ERR_OK;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	e064      	b.n	800de6a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800dda6:	4a33      	ldr	r2, [pc, #204]	@ (800de74 <ip4_input+0x27c>)
 800dda8:	69bb      	ldr	r3, [r7, #24]
 800ddaa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ddac:	4a31      	ldr	r2, [pc, #196]	@ (800de74 <ip4_input+0x27c>)
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ddb2:	4a30      	ldr	r2, [pc, #192]	@ (800de74 <ip4_input+0x27c>)
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	f003 030f 	and.w	r3, r3, #15
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	009b      	lsls	r3, r3, #2
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	4b2a      	ldr	r3, [pc, #168]	@ (800de74 <ip4_input+0x27c>)
 800ddca:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ddcc:	8a7b      	ldrh	r3, [r7, #18]
 800ddce:	4619      	mov	r1, r3
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f002 fb6f 	bl	80104b4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	7a5b      	ldrb	r3, [r3, #9]
 800ddda:	2b11      	cmp	r3, #17
 800dddc:	d006      	beq.n	800ddec <ip4_input+0x1f4>
 800ddde:	2b11      	cmp	r3, #17
 800dde0:	dc13      	bgt.n	800de0a <ip4_input+0x212>
 800dde2:	2b01      	cmp	r3, #1
 800dde4:	d00c      	beq.n	800de00 <ip4_input+0x208>
 800dde6:	2b06      	cmp	r3, #6
 800dde8:	d005      	beq.n	800ddf6 <ip4_input+0x1fe>
 800ddea:	e00e      	b.n	800de0a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ddec:	6839      	ldr	r1, [r7, #0]
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f008 fe22 	bl	8016a38 <udp_input>
        break;
 800ddf4:	e026      	b.n	800de44 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ddf6:	6839      	ldr	r1, [r7, #0]
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f004 fc97 	bl	801272c <tcp_input>
        break;
 800ddfe:	e021      	b.n	800de44 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800de00:	6839      	ldr	r1, [r7, #0]
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f7ff fbd4 	bl	800d5b0 <icmp_input>
        break;
 800de08:	e01c      	b.n	800de44 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800de0a:	4b1a      	ldr	r3, [pc, #104]	@ (800de74 <ip4_input+0x27c>)
 800de0c:	695b      	ldr	r3, [r3, #20]
 800de0e:	69b9      	ldr	r1, [r7, #24]
 800de10:	4618      	mov	r0, r3
 800de12:	f000 f90b 	bl	800e02c <ip4_addr_isbroadcast_u32>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d10f      	bne.n	800de3c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800de1c:	4b15      	ldr	r3, [pc, #84]	@ (800de74 <ip4_input+0x27c>)
 800de1e:	695b      	ldr	r3, [r3, #20]
 800de20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800de24:	2be0      	cmp	r3, #224	@ 0xe0
 800de26:	d009      	beq.n	800de3c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800de28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800de2c:	4619      	mov	r1, r3
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f002 fbb3 	bl	801059a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800de34:	2102      	movs	r1, #2
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f7ff fcda 	bl	800d7f0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f002 fbbf 	bl	80105c0 <pbuf_free>
        break;
 800de42:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800de44:	4b0b      	ldr	r3, [pc, #44]	@ (800de74 <ip4_input+0x27c>)
 800de46:	2200      	movs	r2, #0
 800de48:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800de4a:	4b0a      	ldr	r3, [pc, #40]	@ (800de74 <ip4_input+0x27c>)
 800de4c:	2200      	movs	r2, #0
 800de4e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800de50:	4b08      	ldr	r3, [pc, #32]	@ (800de74 <ip4_input+0x27c>)
 800de52:	2200      	movs	r2, #0
 800de54:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800de56:	4b07      	ldr	r3, [pc, #28]	@ (800de74 <ip4_input+0x27c>)
 800de58:	2200      	movs	r2, #0
 800de5a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800de5c:	4b05      	ldr	r3, [pc, #20]	@ (800de74 <ip4_input+0x27c>)
 800de5e:	2200      	movs	r2, #0
 800de60:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800de62:	4b04      	ldr	r3, [pc, #16]	@ (800de74 <ip4_input+0x27c>)
 800de64:	2200      	movs	r2, #0
 800de66:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800de68:	2300      	movs	r3, #0
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3720      	adds	r7, #32
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	240048e4 	.word	0x240048e4
 800de78:	24007b60 	.word	0x24007b60

0800de7c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b08a      	sub	sp, #40	@ 0x28
 800de80:	af04      	add	r7, sp, #16
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	607a      	str	r2, [r7, #4]
 800de88:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d009      	beq.n	800dea8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d003      	beq.n	800dea2 <ip4_output_if+0x26>
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d102      	bne.n	800dea8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800dea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dea4:	3304      	adds	r3, #4
 800dea6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800dea8:	78fa      	ldrb	r2, [r7, #3]
 800deaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deac:	9302      	str	r3, [sp, #8]
 800deae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800deb2:	9301      	str	r3, [sp, #4]
 800deb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800deb8:	9300      	str	r3, [sp, #0]
 800deba:	4613      	mov	r3, r2
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	6979      	ldr	r1, [r7, #20]
 800dec0:	68f8      	ldr	r0, [r7, #12]
 800dec2:	f000 f805 	bl	800ded0 <ip4_output_if_src>
 800dec6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3718      	adds	r7, #24
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}

0800ded0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b088      	sub	sp, #32
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	607a      	str	r2, [r7, #4]
 800dedc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	7b9b      	ldrb	r3, [r3, #14]
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	d006      	beq.n	800def4 <ip4_output_if_src+0x24>
 800dee6:	4b4b      	ldr	r3, [pc, #300]	@ (800e014 <ip4_output_if_src+0x144>)
 800dee8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800deec:	494a      	ldr	r1, [pc, #296]	@ (800e018 <ip4_output_if_src+0x148>)
 800deee:	484b      	ldr	r0, [pc, #300]	@ (800e01c <ip4_output_if_src+0x14c>)
 800def0:	f009 fb0c 	bl	801750c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d060      	beq.n	800dfbc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800defa:	2314      	movs	r3, #20
 800defc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800defe:	2114      	movs	r1, #20
 800df00:	68f8      	ldr	r0, [r7, #12]
 800df02:	f002 fac7 	bl	8010494 <pbuf_add_header>
 800df06:	4603      	mov	r3, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d002      	beq.n	800df12 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800df0c:	f06f 0301 	mvn.w	r3, #1
 800df10:	e07c      	b.n	800e00c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	895b      	ldrh	r3, [r3, #10]
 800df1c:	2b13      	cmp	r3, #19
 800df1e:	d806      	bhi.n	800df2e <ip4_output_if_src+0x5e>
 800df20:	4b3c      	ldr	r3, [pc, #240]	@ (800e014 <ip4_output_if_src+0x144>)
 800df22:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800df26:	493e      	ldr	r1, [pc, #248]	@ (800e020 <ip4_output_if_src+0x150>)
 800df28:	483c      	ldr	r0, [pc, #240]	@ (800e01c <ip4_output_if_src+0x14c>)
 800df2a:	f009 faef 	bl	801750c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	78fa      	ldrb	r2, [r7, #3]
 800df32:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800df3a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800df44:	8b7b      	ldrh	r3, [r7, #26]
 800df46:	089b      	lsrs	r3, r3, #2
 800df48:	b29b      	uxth	r3, r3
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df50:	b2da      	uxtb	r2, r3
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800df56:	69fb      	ldr	r3, [r7, #28]
 800df58:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800df5c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	891b      	ldrh	r3, [r3, #8]
 800df62:	4618      	mov	r0, r3
 800df64:	f7fc f902 	bl	800a16c <lwip_htons>
 800df68:	4603      	mov	r3, r0
 800df6a:	461a      	mov	r2, r3
 800df6c:	69fb      	ldr	r3, [r7, #28]
 800df6e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	2200      	movs	r2, #0
 800df74:	719a      	strb	r2, [r3, #6]
 800df76:	2200      	movs	r2, #0
 800df78:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800df7a:	4b2a      	ldr	r3, [pc, #168]	@ (800e024 <ip4_output_if_src+0x154>)
 800df7c:	881b      	ldrh	r3, [r3, #0]
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fc f8f4 	bl	800a16c <lwip_htons>
 800df84:	4603      	mov	r3, r0
 800df86:	461a      	mov	r2, r3
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800df8c:	4b25      	ldr	r3, [pc, #148]	@ (800e024 <ip4_output_if_src+0x154>)
 800df8e:	881b      	ldrh	r3, [r3, #0]
 800df90:	3301      	adds	r3, #1
 800df92:	b29a      	uxth	r2, r3
 800df94:	4b23      	ldr	r3, [pc, #140]	@ (800e024 <ip4_output_if_src+0x154>)
 800df96:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d104      	bne.n	800dfa8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800df9e:	4b22      	ldr	r3, [pc, #136]	@ (800e028 <ip4_output_if_src+0x158>)
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	60da      	str	r2, [r3, #12]
 800dfa6:	e003      	b.n	800dfb0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	729a      	strb	r2, [r3, #10]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	72da      	strb	r2, [r3, #11]
 800dfba:	e00f      	b.n	800dfdc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	895b      	ldrh	r3, [r3, #10]
 800dfc0:	2b13      	cmp	r3, #19
 800dfc2:	d802      	bhi.n	800dfca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dfc4:	f06f 0301 	mvn.w	r3, #1
 800dfc8:	e020      	b.n	800e00c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800dfd0:	69fb      	ldr	r3, [r7, #28]
 800dfd2:	691b      	ldr	r3, [r3, #16]
 800dfd4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800dfd6:	f107 0314 	add.w	r3, r7, #20
 800dfda:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800dfdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfde:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00c      	beq.n	800dffe <ip4_output_if_src+0x12e>
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	891a      	ldrh	r2, [r3, #8]
 800dfe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d906      	bls.n	800dffe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f000 fde3 	bl	800ebc0 <ip4_frag>
 800dffa:	4603      	mov	r3, r0
 800dffc:	e006      	b.n	800e00c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800dffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e000:	695b      	ldr	r3, [r3, #20]
 800e002:	687a      	ldr	r2, [r7, #4]
 800e004:	68f9      	ldr	r1, [r7, #12]
 800e006:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e008:	4798      	blx	r3
 800e00a:	4603      	mov	r3, r0
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3720      	adds	r7, #32
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	08018f48 	.word	0x08018f48
 800e018:	08018fa8 	.word	0x08018fa8
 800e01c:	08018fb4 	.word	0x08018fb4
 800e020:	08018fdc 	.word	0x08018fdc
 800e024:	240048fc 	.word	0x240048fc
 800e028:	0801b82c 	.word	0x0801b82c

0800e02c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e040:	d002      	beq.n	800e048 <ip4_addr_isbroadcast_u32+0x1c>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d101      	bne.n	800e04c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e048:	2301      	movs	r3, #1
 800e04a:	e02a      	b.n	800e0a2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e052:	f003 0302 	and.w	r3, r3, #2
 800e056:	2b00      	cmp	r3, #0
 800e058:	d101      	bne.n	800e05e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e05a:	2300      	movs	r3, #0
 800e05c:	e021      	b.n	800e0a2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	3304      	adds	r3, #4
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	429a      	cmp	r2, r3
 800e068:	d101      	bne.n	800e06e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e06a:	2300      	movs	r3, #0
 800e06c:	e019      	b.n	800e0a2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e06e:	68fa      	ldr	r2, [r7, #12]
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	3304      	adds	r3, #4
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	405a      	eors	r2, r3
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	3308      	adds	r3, #8
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	4013      	ands	r3, r2
 800e080:	2b00      	cmp	r3, #0
 800e082:	d10d      	bne.n	800e0a0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	3308      	adds	r3, #8
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	43da      	mvns	r2, r3
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	3308      	adds	r3, #8
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e098:	429a      	cmp	r2, r3
 800e09a:	d101      	bne.n	800e0a0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e09c:	2301      	movs	r3, #1
 800e09e:	e000      	b.n	800e0a2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e0a0:	2300      	movs	r3, #0
  }
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3714      	adds	r7, #20
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr
	...

0800e0b0 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800e0b8:	2210      	movs	r2, #16
 800e0ba:	4904      	ldr	r1, [pc, #16]	@ (800e0cc <ip4addr_ntoa+0x1c>)
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f000 f807 	bl	800e0d0 <ip4addr_ntoa_r>
 800e0c2:	4603      	mov	r3, r0
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3708      	adds	r7, #8
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	24004900 	.word	0x24004900

0800e0d0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b08d      	sub	sp, #52	@ 0x34
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	60f8      	str	r0, [r7, #12]
 800e0d8:	60b9      	str	r1, [r7, #8]
 800e0da:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 800e0ea:	f107 0318 	add.w	r3, r7, #24
 800e0ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e0f6:	e058      	b.n	800e1aa <ip4addr_ntoa_r+0xda>
    i = 0;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 800e0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e100:	781a      	ldrb	r2, [r3, #0]
 800e102:	4b32      	ldr	r3, [pc, #200]	@ (800e1cc <ip4addr_ntoa_r+0xfc>)
 800e104:	fba3 1302 	umull	r1, r3, r3, r2
 800e108:	08d9      	lsrs	r1, r3, #3
 800e10a:	460b      	mov	r3, r1
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	440b      	add	r3, r1
 800e110:	005b      	lsls	r3, r3, #1
 800e112:	1ad3      	subs	r3, r2, r3
 800e114:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800e116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	4a2c      	ldr	r2, [pc, #176]	@ (800e1cc <ip4addr_ntoa_r+0xfc>)
 800e11c:	fba2 2303 	umull	r2, r3, r2, r3
 800e120:	08db      	lsrs	r3, r3, #3
 800e122:	b2da      	uxtb	r2, r3
 800e124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e126:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800e128:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e12c:	1c5a      	adds	r2, r3, #1
 800e12e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800e132:	4619      	mov	r1, r3
 800e134:	7ffb      	ldrb	r3, [r7, #31]
 800e136:	3330      	adds	r3, #48	@ 0x30
 800e138:	b2da      	uxtb	r2, r3
 800e13a:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 800e13e:	443b      	add	r3, r7
 800e140:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800e144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d1d8      	bne.n	800e0fe <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800e14c:	e011      	b.n	800e172 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800e14e:	6a3b      	ldr	r3, [r7, #32]
 800e150:	1c5a      	adds	r2, r3, #1
 800e152:	623a      	str	r2, [r7, #32]
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	429a      	cmp	r2, r3
 800e158:	dc01      	bgt.n	800e15e <ip4addr_ntoa_r+0x8e>
        return NULL;
 800e15a:	2300      	movs	r3, #0
 800e15c:	e030      	b.n	800e1c0 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800e15e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e164:	1c59      	adds	r1, r3, #1
 800e166:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800e168:	3230      	adds	r2, #48	@ 0x30
 800e16a:	443a      	add	r2, r7
 800e16c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800e170:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800e172:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e176:	1e5a      	subs	r2, r3, #1
 800e178:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d1e6      	bne.n	800e14e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800e180:	6a3b      	ldr	r3, [r7, #32]
 800e182:	1c5a      	adds	r2, r3, #1
 800e184:	623a      	str	r2, [r7, #32]
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	429a      	cmp	r2, r3
 800e18a:	dc01      	bgt.n	800e190 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800e18c:	2300      	movs	r3, #0
 800e18e:	e017      	b.n	800e1c0 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800e190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e192:	1c5a      	adds	r2, r3, #1
 800e194:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e196:	222e      	movs	r2, #46	@ 0x2e
 800e198:	701a      	strb	r2, [r3, #0]
    ap++;
 800e19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e19c:	3301      	adds	r3, #1
 800e19e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 800e1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e1aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1ae:	2b03      	cmp	r3, #3
 800e1b0:	d9a2      	bls.n	800e0f8 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800e1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1b4:	3b01      	subs	r3, #1
 800e1b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	701a      	strb	r2, [r3, #0]
  return buf;
 800e1be:	68bb      	ldr	r3, [r7, #8]
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3734      	adds	r7, #52	@ 0x34
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr
 800e1cc:	cccccccd 	.word	0xcccccccd

0800e1d0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e1da:	4b12      	ldr	r3, [pc, #72]	@ (800e224 <ip_reass_tmr+0x54>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e1e0:	e018      	b.n	800e214 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	7fdb      	ldrb	r3, [r3, #31]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d00b      	beq.n	800e202 <ip_reass_tmr+0x32>
      r->timer--;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	7fdb      	ldrb	r3, [r3, #31]
 800e1ee:	3b01      	subs	r3, #1
 800e1f0:	b2da      	uxtb	r2, r3
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	60fb      	str	r3, [r7, #12]
 800e200:	e008      	b.n	800e214 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e20c:	68b9      	ldr	r1, [r7, #8]
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 f80a 	bl	800e228 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d1e3      	bne.n	800e1e2 <ip_reass_tmr+0x12>
    }
  }
}
 800e21a:	bf00      	nop
 800e21c:	bf00      	nop
 800e21e:	3710      	adds	r7, #16
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}
 800e224:	24004910 	.word	0x24004910

0800e228 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b088      	sub	sp, #32
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e232:	2300      	movs	r3, #0
 800e234:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e236:	683a      	ldr	r2, [r7, #0]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d105      	bne.n	800e24a <ip_reass_free_complete_datagram+0x22>
 800e23e:	4b45      	ldr	r3, [pc, #276]	@ (800e354 <ip_reass_free_complete_datagram+0x12c>)
 800e240:	22ab      	movs	r2, #171	@ 0xab
 800e242:	4945      	ldr	r1, [pc, #276]	@ (800e358 <ip_reass_free_complete_datagram+0x130>)
 800e244:	4845      	ldr	r0, [pc, #276]	@ (800e35c <ip_reass_free_complete_datagram+0x134>)
 800e246:	f009 f961 	bl	801750c <iprintf>
  if (prev != NULL) {
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00a      	beq.n	800e266 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	429a      	cmp	r2, r3
 800e258:	d005      	beq.n	800e266 <ip_reass_free_complete_datagram+0x3e>
 800e25a:	4b3e      	ldr	r3, [pc, #248]	@ (800e354 <ip_reass_free_complete_datagram+0x12c>)
 800e25c:	22ad      	movs	r2, #173	@ 0xad
 800e25e:	4940      	ldr	r1, [pc, #256]	@ (800e360 <ip_reass_free_complete_datagram+0x138>)
 800e260:	483e      	ldr	r0, [pc, #248]	@ (800e35c <ip_reass_free_complete_datagram+0x134>)
 800e262:	f009 f953 	bl	801750c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	685b      	ldr	r3, [r3, #4]
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	889b      	ldrh	r3, [r3, #4]
 800e272:	b29b      	uxth	r3, r3
 800e274:	2b00      	cmp	r3, #0
 800e276:	d12a      	bne.n	800e2ce <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	6858      	ldr	r0, [r3, #4]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	3308      	adds	r3, #8
 800e28e:	2214      	movs	r2, #20
 800e290:	4619      	mov	r1, r3
 800e292:	f009 fb66 	bl	8017962 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e296:	2101      	movs	r1, #1
 800e298:	69b8      	ldr	r0, [r7, #24]
 800e29a:	f7ff fab9 	bl	800d810 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e29e:	69b8      	ldr	r0, [r7, #24]
 800e2a0:	f002 fa1c 	bl	80106dc <pbuf_clen>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e2a8:	8bfa      	ldrh	r2, [r7, #30]
 800e2aa:	8a7b      	ldrh	r3, [r7, #18]
 800e2ac:	4413      	add	r3, r2
 800e2ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e2b2:	db05      	blt.n	800e2c0 <ip_reass_free_complete_datagram+0x98>
 800e2b4:	4b27      	ldr	r3, [pc, #156]	@ (800e354 <ip_reass_free_complete_datagram+0x12c>)
 800e2b6:	22bc      	movs	r2, #188	@ 0xbc
 800e2b8:	492a      	ldr	r1, [pc, #168]	@ (800e364 <ip_reass_free_complete_datagram+0x13c>)
 800e2ba:	4828      	ldr	r0, [pc, #160]	@ (800e35c <ip_reass_free_complete_datagram+0x134>)
 800e2bc:	f009 f926 	bl	801750c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e2c0:	8bfa      	ldrh	r2, [r7, #30]
 800e2c2:	8a7b      	ldrh	r3, [r7, #18]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e2c8:	69b8      	ldr	r0, [r7, #24]
 800e2ca:	f002 f979 	bl	80105c0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e2d4:	e01f      	b.n	800e316 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e2d6:	69bb      	ldr	r3, [r7, #24]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e2e6:	68f8      	ldr	r0, [r7, #12]
 800e2e8:	f002 f9f8 	bl	80106dc <pbuf_clen>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e2f0:	8bfa      	ldrh	r2, [r7, #30]
 800e2f2:	8a7b      	ldrh	r3, [r7, #18]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e2fa:	db05      	blt.n	800e308 <ip_reass_free_complete_datagram+0xe0>
 800e2fc:	4b15      	ldr	r3, [pc, #84]	@ (800e354 <ip_reass_free_complete_datagram+0x12c>)
 800e2fe:	22cc      	movs	r2, #204	@ 0xcc
 800e300:	4918      	ldr	r1, [pc, #96]	@ (800e364 <ip_reass_free_complete_datagram+0x13c>)
 800e302:	4816      	ldr	r0, [pc, #88]	@ (800e35c <ip_reass_free_complete_datagram+0x134>)
 800e304:	f009 f902 	bl	801750c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e308:	8bfa      	ldrh	r2, [r7, #30]
 800e30a:	8a7b      	ldrh	r3, [r7, #18]
 800e30c:	4413      	add	r3, r2
 800e30e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e310:	68f8      	ldr	r0, [r7, #12]
 800e312:	f002 f955 	bl	80105c0 <pbuf_free>
  while (p != NULL) {
 800e316:	69bb      	ldr	r3, [r7, #24]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d1dc      	bne.n	800e2d6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e31c:	6839      	ldr	r1, [r7, #0]
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f000 f8c2 	bl	800e4a8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e324:	4b10      	ldr	r3, [pc, #64]	@ (800e368 <ip_reass_free_complete_datagram+0x140>)
 800e326:	881b      	ldrh	r3, [r3, #0]
 800e328:	8bfa      	ldrh	r2, [r7, #30]
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d905      	bls.n	800e33a <ip_reass_free_complete_datagram+0x112>
 800e32e:	4b09      	ldr	r3, [pc, #36]	@ (800e354 <ip_reass_free_complete_datagram+0x12c>)
 800e330:	22d2      	movs	r2, #210	@ 0xd2
 800e332:	490e      	ldr	r1, [pc, #56]	@ (800e36c <ip_reass_free_complete_datagram+0x144>)
 800e334:	4809      	ldr	r0, [pc, #36]	@ (800e35c <ip_reass_free_complete_datagram+0x134>)
 800e336:	f009 f8e9 	bl	801750c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e33a:	4b0b      	ldr	r3, [pc, #44]	@ (800e368 <ip_reass_free_complete_datagram+0x140>)
 800e33c:	881a      	ldrh	r2, [r3, #0]
 800e33e:	8bfb      	ldrh	r3, [r7, #30]
 800e340:	1ad3      	subs	r3, r2, r3
 800e342:	b29a      	uxth	r2, r3
 800e344:	4b08      	ldr	r3, [pc, #32]	@ (800e368 <ip_reass_free_complete_datagram+0x140>)
 800e346:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e348:	8bfb      	ldrh	r3, [r7, #30]
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3720      	adds	r7, #32
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	0801900c 	.word	0x0801900c
 800e358:	08019074 	.word	0x08019074
 800e35c:	08019080 	.word	0x08019080
 800e360:	080190a8 	.word	0x080190a8
 800e364:	080190bc 	.word	0x080190bc
 800e368:	24004914 	.word	0x24004914
 800e36c:	080190dc 	.word	0x080190dc

0800e370 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b08a      	sub	sp, #40	@ 0x28
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e37a:	2300      	movs	r3, #0
 800e37c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e37e:	2300      	movs	r3, #0
 800e380:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e382:	2300      	movs	r3, #0
 800e384:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e386:	2300      	movs	r3, #0
 800e388:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e38a:	2300      	movs	r3, #0
 800e38c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e38e:	4b28      	ldr	r3, [pc, #160]	@ (800e430 <ip_reass_remove_oldest_datagram+0xc0>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e394:	e030      	b.n	800e3f8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e398:	695a      	ldr	r2, [r3, #20]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	68db      	ldr	r3, [r3, #12]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d10c      	bne.n	800e3bc <ip_reass_remove_oldest_datagram+0x4c>
 800e3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a4:	699a      	ldr	r2, [r3, #24]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	691b      	ldr	r3, [r3, #16]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d106      	bne.n	800e3bc <ip_reass_remove_oldest_datagram+0x4c>
 800e3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3b0:	899a      	ldrh	r2, [r3, #12]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	889b      	ldrh	r3, [r3, #4]
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d014      	beq.n	800e3e6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	3301      	adds	r3, #1
 800e3c0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e3c2:	6a3b      	ldr	r3, [r7, #32]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d104      	bne.n	800e3d2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ca:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	61bb      	str	r3, [r7, #24]
 800e3d0:	e009      	b.n	800e3e6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3d4:	7fda      	ldrb	r2, [r3, #31]
 800e3d6:	6a3b      	ldr	r3, [r7, #32]
 800e3d8:	7fdb      	ldrb	r3, [r3, #31]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d803      	bhi.n	800e3e6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3e0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e3e2:	69fb      	ldr	r3, [r7, #28]
 800e3e4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d001      	beq.n	800e3f2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d1cb      	bne.n	800e396 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e3fe:	6a3b      	ldr	r3, [r7, #32]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d008      	beq.n	800e416 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e404:	69b9      	ldr	r1, [r7, #24]
 800e406:	6a38      	ldr	r0, [r7, #32]
 800e408:	f7ff ff0e 	bl	800e228 <ip_reass_free_complete_datagram>
 800e40c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e40e:	697a      	ldr	r2, [r7, #20]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	4413      	add	r3, r2
 800e414:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e416:	697a      	ldr	r2, [r7, #20]
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	da02      	bge.n	800e424 <ip_reass_remove_oldest_datagram+0xb4>
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	2b01      	cmp	r3, #1
 800e422:	dcac      	bgt.n	800e37e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e424:	697b      	ldr	r3, [r7, #20]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3728      	adds	r7, #40	@ 0x28
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	24004910 	.word	0x24004910

0800e434 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e43e:	2004      	movs	r0, #4
 800e440:	f001 f980 	bl	800f744 <memp_malloc>
 800e444:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d110      	bne.n	800e46e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e44c:	6839      	ldr	r1, [r7, #0]
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f7ff ff8e 	bl	800e370 <ip_reass_remove_oldest_datagram>
 800e454:	4602      	mov	r2, r0
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	4293      	cmp	r3, r2
 800e45a:	dc03      	bgt.n	800e464 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e45c:	2004      	movs	r0, #4
 800e45e:	f001 f971 	bl	800f744 <memp_malloc>
 800e462:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d101      	bne.n	800e46e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e46a:	2300      	movs	r3, #0
 800e46c:	e016      	b.n	800e49c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e46e:	2220      	movs	r2, #32
 800e470:	2100      	movs	r1, #0
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	f009 f9a2 	bl	80177bc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	220f      	movs	r2, #15
 800e47c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e47e:	4b09      	ldr	r3, [pc, #36]	@ (800e4a4 <ip_reass_enqueue_new_datagram+0x70>)
 800e480:	681a      	ldr	r2, [r3, #0]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e486:	4a07      	ldr	r2, [pc, #28]	@ (800e4a4 <ip_reass_enqueue_new_datagram+0x70>)
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	3308      	adds	r3, #8
 800e490:	2214      	movs	r2, #20
 800e492:	6879      	ldr	r1, [r7, #4]
 800e494:	4618      	mov	r0, r3
 800e496:	f009 fa64 	bl	8017962 <memcpy>
  return ipr;
 800e49a:	68fb      	ldr	r3, [r7, #12]
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3710      	adds	r7, #16
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	24004910 	.word	0x24004910

0800e4a8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e4b2:	4b10      	ldr	r3, [pc, #64]	@ (800e4f4 <ip_reass_dequeue_datagram+0x4c>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d104      	bne.n	800e4c6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a0c      	ldr	r2, [pc, #48]	@ (800e4f4 <ip_reass_dequeue_datagram+0x4c>)
 800e4c2:	6013      	str	r3, [r2, #0]
 800e4c4:	e00d      	b.n	800e4e2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d106      	bne.n	800e4da <ip_reass_dequeue_datagram+0x32>
 800e4cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e4f8 <ip_reass_dequeue_datagram+0x50>)
 800e4ce:	f240 1245 	movw	r2, #325	@ 0x145
 800e4d2:	490a      	ldr	r1, [pc, #40]	@ (800e4fc <ip_reass_dequeue_datagram+0x54>)
 800e4d4:	480a      	ldr	r0, [pc, #40]	@ (800e500 <ip_reass_dequeue_datagram+0x58>)
 800e4d6:	f009 f819 	bl	801750c <iprintf>
    prev->next = ipr->next;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681a      	ldr	r2, [r3, #0]
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e4e2:	6879      	ldr	r1, [r7, #4]
 800e4e4:	2004      	movs	r0, #4
 800e4e6:	f001 f9a3 	bl	800f830 <memp_free>
}
 800e4ea:	bf00      	nop
 800e4ec:	3708      	adds	r7, #8
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}
 800e4f2:	bf00      	nop
 800e4f4:	24004910 	.word	0x24004910
 800e4f8:	0801900c 	.word	0x0801900c
 800e4fc:	08019100 	.word	0x08019100
 800e500:	08019080 	.word	0x08019080

0800e504 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b08c      	sub	sp, #48	@ 0x30
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e510:	2300      	movs	r3, #0
 800e512:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e514:	2301      	movs	r3, #1
 800e516:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e51e:	69fb      	ldr	r3, [r7, #28]
 800e520:	885b      	ldrh	r3, [r3, #2]
 800e522:	b29b      	uxth	r3, r3
 800e524:	4618      	mov	r0, r3
 800e526:	f7fb fe21 	bl	800a16c <lwip_htons>
 800e52a:	4603      	mov	r3, r0
 800e52c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e52e:	69fb      	ldr	r3, [r7, #28]
 800e530:	781b      	ldrb	r3, [r3, #0]
 800e532:	f003 030f 	and.w	r3, r3, #15
 800e536:	b2db      	uxtb	r3, r3
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e53c:	7e7b      	ldrb	r3, [r7, #25]
 800e53e:	b29b      	uxth	r3, r3
 800e540:	8b7a      	ldrh	r2, [r7, #26]
 800e542:	429a      	cmp	r2, r3
 800e544:	d202      	bcs.n	800e54c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e546:	f04f 33ff 	mov.w	r3, #4294967295
 800e54a:	e135      	b.n	800e7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e54c:	7e7b      	ldrb	r3, [r7, #25]
 800e54e:	b29b      	uxth	r3, r3
 800e550:	8b7a      	ldrh	r2, [r7, #26]
 800e552:	1ad3      	subs	r3, r2, r3
 800e554:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e556:	69fb      	ldr	r3, [r7, #28]
 800e558:	88db      	ldrh	r3, [r3, #6]
 800e55a:	b29b      	uxth	r3, r3
 800e55c:	4618      	mov	r0, r3
 800e55e:	f7fb fe05 	bl	800a16c <lwip_htons>
 800e562:	4603      	mov	r3, r0
 800e564:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e568:	b29b      	uxth	r3, r3
 800e56a:	00db      	lsls	r3, r3, #3
 800e56c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800e574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e576:	2200      	movs	r2, #0
 800e578:	701a      	strb	r2, [r3, #0]
 800e57a:	2200      	movs	r2, #0
 800e57c:	705a      	strb	r2, [r3, #1]
 800e57e:	2200      	movs	r2, #0
 800e580:	709a      	strb	r2, [r3, #2]
 800e582:	2200      	movs	r2, #0
 800e584:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e588:	8afa      	ldrh	r2, [r7, #22]
 800e58a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e58c:	8afa      	ldrh	r2, [r7, #22]
 800e58e:	8b7b      	ldrh	r3, [r7, #26]
 800e590:	4413      	add	r3, r2
 800e592:	b29a      	uxth	r2, r3
 800e594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e596:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e59a:	88db      	ldrh	r3, [r3, #6]
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	8afa      	ldrh	r2, [r7, #22]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d902      	bls.n	800e5aa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e5a8:	e106      	b.n	800e7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5b0:	e068      	b.n	800e684 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5b4:	685b      	ldr	r3, [r3, #4]
 800e5b6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ba:	889b      	ldrh	r3, [r3, #4]
 800e5bc:	b29a      	uxth	r2, r3
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	889b      	ldrh	r3, [r3, #4]
 800e5c2:	b29b      	uxth	r3, r3
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d235      	bcs.n	800e634 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d020      	beq.n	800e616 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d6:	889b      	ldrh	r3, [r3, #4]
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5dc:	88db      	ldrh	r3, [r3, #6]
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d307      	bcc.n	800e5f4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5e6:	88db      	ldrh	r3, [r3, #6]
 800e5e8:	b29a      	uxth	r2, r3
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	889b      	ldrh	r3, [r3, #4]
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d902      	bls.n	800e5fa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e5f8:	e0de      	b.n	800e7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5fc:	68ba      	ldr	r2, [r7, #8]
 800e5fe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e602:	88db      	ldrh	r3, [r3, #6]
 800e604:	b29a      	uxth	r2, r3
 800e606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e608:	889b      	ldrh	r3, [r3, #4]
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d03d      	beq.n	800e68c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e610:	2300      	movs	r3, #0
 800e612:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e614:	e03a      	b.n	800e68c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e618:	88db      	ldrh	r3, [r3, #6]
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	889b      	ldrh	r3, [r3, #4]
 800e620:	b29b      	uxth	r3, r3
 800e622:	429a      	cmp	r2, r3
 800e624:	d902      	bls.n	800e62c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e626:	f04f 33ff 	mov.w	r3, #4294967295
 800e62a:	e0c5      	b.n	800e7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	68ba      	ldr	r2, [r7, #8]
 800e630:	605a      	str	r2, [r3, #4]
      break;
 800e632:	e02b      	b.n	800e68c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e636:	889b      	ldrh	r3, [r3, #4]
 800e638:	b29a      	uxth	r2, r3
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	889b      	ldrh	r3, [r3, #4]
 800e63e:	b29b      	uxth	r3, r3
 800e640:	429a      	cmp	r2, r3
 800e642:	d102      	bne.n	800e64a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e644:	f04f 33ff 	mov.w	r3, #4294967295
 800e648:	e0b6      	b.n	800e7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e64c:	889b      	ldrh	r3, [r3, #4]
 800e64e:	b29a      	uxth	r2, r3
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	88db      	ldrh	r3, [r3, #6]
 800e654:	b29b      	uxth	r3, r3
 800e656:	429a      	cmp	r2, r3
 800e658:	d202      	bcs.n	800e660 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e65a:	f04f 33ff 	mov.w	r3, #4294967295
 800e65e:	e0ab      	b.n	800e7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e662:	2b00      	cmp	r3, #0
 800e664:	d009      	beq.n	800e67a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e668:	88db      	ldrh	r3, [r3, #6]
 800e66a:	b29a      	uxth	r2, r3
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	889b      	ldrh	r3, [r3, #4]
 800e670:	b29b      	uxth	r3, r3
 800e672:	429a      	cmp	r2, r3
 800e674:	d001      	beq.n	800e67a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e676:	2300      	movs	r3, #0
 800e678:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800e684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e686:	2b00      	cmp	r3, #0
 800e688:	d193      	bne.n	800e5b2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e68a:	e000      	b.n	800e68e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e68c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e690:	2b00      	cmp	r3, #0
 800e692:	d12d      	bne.n	800e6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e696:	2b00      	cmp	r3, #0
 800e698:	d01c      	beq.n	800e6d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e69c:	88db      	ldrh	r3, [r3, #6]
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6a2:	889b      	ldrh	r3, [r3, #4]
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d906      	bls.n	800e6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e6aa:	4b45      	ldr	r3, [pc, #276]	@ (800e7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e6ac:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800e6b0:	4944      	ldr	r1, [pc, #272]	@ (800e7c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e6b2:	4845      	ldr	r0, [pc, #276]	@ (800e7c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e6b4:	f008 ff2a 	bl	801750c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ba:	68ba      	ldr	r2, [r7, #8]
 800e6bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6c0:	88db      	ldrh	r3, [r3, #6]
 800e6c2:	b29a      	uxth	r2, r3
 800e6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6c6:	889b      	ldrh	r3, [r3, #4]
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d010      	beq.n	800e6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	623b      	str	r3, [r7, #32]
 800e6d2:	e00d      	b.n	800e6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d006      	beq.n	800e6ea <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e6dc:	4b38      	ldr	r3, [pc, #224]	@ (800e7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e6de:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800e6e2:	493a      	ldr	r1, [pc, #232]	@ (800e7cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e6e4:	4838      	ldr	r0, [pc, #224]	@ (800e7c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e6e6:	f008 ff11 	bl	801750c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	68ba      	ldr	r2, [r7, #8]
 800e6ee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d105      	bne.n	800e702 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	7f9b      	ldrb	r3, [r3, #30]
 800e6fa:	f003 0301 	and.w	r3, r3, #1
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d059      	beq.n	800e7b6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e702:	6a3b      	ldr	r3, [r7, #32]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d04f      	beq.n	800e7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	685b      	ldr	r3, [r3, #4]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d006      	beq.n	800e71e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	889b      	ldrh	r3, [r3, #4]
 800e718:	b29b      	uxth	r3, r3
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d002      	beq.n	800e724 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e71e:	2300      	movs	r3, #0
 800e720:	623b      	str	r3, [r7, #32]
 800e722:	e041      	b.n	800e7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e726:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800e728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e72e:	e012      	b.n	800e756 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800e736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e738:	88db      	ldrh	r3, [r3, #6]
 800e73a:	b29a      	uxth	r2, r3
 800e73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e73e:	889b      	ldrh	r3, [r3, #4]
 800e740:	b29b      	uxth	r3, r3
 800e742:	429a      	cmp	r2, r3
 800e744:	d002      	beq.n	800e74c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e746:	2300      	movs	r3, #0
 800e748:	623b      	str	r3, [r7, #32]
            break;
 800e74a:	e007      	b.n	800e75c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e74e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800e750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d1e9      	bne.n	800e730 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e75c:	6a3b      	ldr	r3, [r7, #32]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d022      	beq.n	800e7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d106      	bne.n	800e778 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e76a:	4b15      	ldr	r3, [pc, #84]	@ (800e7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e76c:	f240 12df 	movw	r2, #479	@ 0x1df
 800e770:	4917      	ldr	r1, [pc, #92]	@ (800e7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e772:	4815      	ldr	r0, [pc, #84]	@ (800e7c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e774:	f008 feca 	bl	801750c <iprintf>
          LWIP_ASSERT("sanity check",
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e780:	429a      	cmp	r2, r3
 800e782:	d106      	bne.n	800e792 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e784:	4b0e      	ldr	r3, [pc, #56]	@ (800e7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e786:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e78a:	4911      	ldr	r1, [pc, #68]	@ (800e7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e78c:	480e      	ldr	r0, [pc, #56]	@ (800e7c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e78e:	f008 febd 	bl	801750c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d006      	beq.n	800e7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e79a:	4b09      	ldr	r3, [pc, #36]	@ (800e7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e79c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800e7a0:	490c      	ldr	r1, [pc, #48]	@ (800e7d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e7a2:	4809      	ldr	r0, [pc, #36]	@ (800e7c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e7a4:	f008 feb2 	bl	801750c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e7a8:	6a3b      	ldr	r3, [r7, #32]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	bf14      	ite	ne
 800e7ae:	2301      	movne	r3, #1
 800e7b0:	2300      	moveq	r3, #0
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	e000      	b.n	800e7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e7b6:	2300      	movs	r3, #0
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3730      	adds	r7, #48	@ 0x30
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	0801900c 	.word	0x0801900c
 800e7c4:	0801911c 	.word	0x0801911c
 800e7c8:	08019080 	.word	0x08019080
 800e7cc:	0801913c 	.word	0x0801913c
 800e7d0:	08019174 	.word	0x08019174
 800e7d4:	08019184 	.word	0x08019184

0800e7d8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b08e      	sub	sp, #56	@ 0x38
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7e8:	781b      	ldrb	r3, [r3, #0]
 800e7ea:	f003 030f 	and.w	r3, r3, #15
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	009b      	lsls	r3, r3, #2
 800e7f2:	b2db      	uxtb	r3, r3
 800e7f4:	2b14      	cmp	r3, #20
 800e7f6:	f040 8171 	bne.w	800eadc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e7fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7fc:	88db      	ldrh	r3, [r3, #6]
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	4618      	mov	r0, r3
 800e802:	f7fb fcb3 	bl	800a16c <lwip_htons>
 800e806:	4603      	mov	r3, r0
 800e808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	00db      	lsls	r3, r3, #3
 800e810:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e814:	885b      	ldrh	r3, [r3, #2]
 800e816:	b29b      	uxth	r3, r3
 800e818:	4618      	mov	r0, r3
 800e81a:	f7fb fca7 	bl	800a16c <lwip_htons>
 800e81e:	4603      	mov	r3, r0
 800e820:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	f003 030f 	and.w	r3, r3, #15
 800e82a:	b2db      	uxtb	r3, r3
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800e832:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e836:	b29b      	uxth	r3, r3
 800e838:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e83a:	429a      	cmp	r2, r3
 800e83c:	f0c0 8150 	bcc.w	800eae0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e840:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e844:	b29b      	uxth	r3, r3
 800e846:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e848:	1ad3      	subs	r3, r2, r3
 800e84a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f001 ff45 	bl	80106dc <pbuf_clen>
 800e852:	4603      	mov	r3, r0
 800e854:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e856:	4b8c      	ldr	r3, [pc, #560]	@ (800ea88 <ip4_reass+0x2b0>)
 800e858:	881b      	ldrh	r3, [r3, #0]
 800e85a:	461a      	mov	r2, r3
 800e85c:	8c3b      	ldrh	r3, [r7, #32]
 800e85e:	4413      	add	r3, r2
 800e860:	2b0a      	cmp	r3, #10
 800e862:	dd10      	ble.n	800e886 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e864:	8c3b      	ldrh	r3, [r7, #32]
 800e866:	4619      	mov	r1, r3
 800e868:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e86a:	f7ff fd81 	bl	800e370 <ip_reass_remove_oldest_datagram>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	f000 8137 	beq.w	800eae4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e876:	4b84      	ldr	r3, [pc, #528]	@ (800ea88 <ip4_reass+0x2b0>)
 800e878:	881b      	ldrh	r3, [r3, #0]
 800e87a:	461a      	mov	r2, r3
 800e87c:	8c3b      	ldrh	r3, [r7, #32]
 800e87e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e880:	2b0a      	cmp	r3, #10
 800e882:	f300 812f 	bgt.w	800eae4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e886:	4b81      	ldr	r3, [pc, #516]	@ (800ea8c <ip4_reass+0x2b4>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e88c:	e015      	b.n	800e8ba <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e890:	695a      	ldr	r2, [r3, #20]
 800e892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e894:	68db      	ldr	r3, [r3, #12]
 800e896:	429a      	cmp	r2, r3
 800e898:	d10c      	bne.n	800e8b4 <ip4_reass+0xdc>
 800e89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e89c:	699a      	ldr	r2, [r3, #24]
 800e89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8a0:	691b      	ldr	r3, [r3, #16]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d106      	bne.n	800e8b4 <ip4_reass+0xdc>
 800e8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8a8:	899a      	ldrh	r2, [r3, #12]
 800e8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8ac:	889b      	ldrh	r3, [r3, #4]
 800e8ae:	b29b      	uxth	r3, r3
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d006      	beq.n	800e8c2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d1e6      	bne.n	800e88e <ip4_reass+0xb6>
 800e8c0:	e000      	b.n	800e8c4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e8c2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d109      	bne.n	800e8de <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e8ca:	8c3b      	ldrh	r3, [r7, #32]
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e8d0:	f7ff fdb0 	bl	800e434 <ip_reass_enqueue_new_datagram>
 800e8d4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d11c      	bne.n	800e916 <ip4_reass+0x13e>
      goto nullreturn;
 800e8dc:	e105      	b.n	800eaea <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8e0:	88db      	ldrh	r3, [r3, #6]
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7fb fc41 	bl	800a16c <lwip_htons>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d110      	bne.n	800e916 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f6:	89db      	ldrh	r3, [r3, #14]
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7fb fc37 	bl	800a16c <lwip_htons>
 800e8fe:	4603      	mov	r3, r0
 800e900:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e904:	2b00      	cmp	r3, #0
 800e906:	d006      	beq.n	800e916 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e90a:	3308      	adds	r3, #8
 800e90c:	2214      	movs	r2, #20
 800e90e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e910:	4618      	mov	r0, r3
 800e912:	f009 f826 	bl	8017962 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e918:	88db      	ldrh	r3, [r3, #6]
 800e91a:	b29b      	uxth	r3, r3
 800e91c:	f003 0320 	and.w	r3, r3, #32
 800e920:	2b00      	cmp	r3, #0
 800e922:	bf0c      	ite	eq
 800e924:	2301      	moveq	r3, #1
 800e926:	2300      	movne	r3, #0
 800e928:	b2db      	uxtb	r3, r3
 800e92a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d00e      	beq.n	800e950 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e932:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e934:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e936:	4413      	add	r3, r2
 800e938:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e93a:	8b7a      	ldrh	r2, [r7, #26]
 800e93c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e93e:	429a      	cmp	r2, r3
 800e940:	f0c0 80a0 	bcc.w	800ea84 <ip4_reass+0x2ac>
 800e944:	8b7b      	ldrh	r3, [r7, #26]
 800e946:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800e94a:	4293      	cmp	r3, r2
 800e94c:	f200 809a 	bhi.w	800ea84 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e950:	69fa      	ldr	r2, [r7, #28]
 800e952:	6879      	ldr	r1, [r7, #4]
 800e954:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e956:	f7ff fdd5 	bl	800e504 <ip_reass_chain_frag_into_datagram_and_validate>
 800e95a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e962:	f000 809b 	beq.w	800ea9c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e966:	4b48      	ldr	r3, [pc, #288]	@ (800ea88 <ip4_reass+0x2b0>)
 800e968:	881a      	ldrh	r2, [r3, #0]
 800e96a:	8c3b      	ldrh	r3, [r7, #32]
 800e96c:	4413      	add	r3, r2
 800e96e:	b29a      	uxth	r2, r3
 800e970:	4b45      	ldr	r3, [pc, #276]	@ (800ea88 <ip4_reass+0x2b0>)
 800e972:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00d      	beq.n	800e996 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e97a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e97c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e97e:	4413      	add	r3, r2
 800e980:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e984:	8a7a      	ldrh	r2, [r7, #18]
 800e986:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e98a:	7f9b      	ldrb	r3, [r3, #30]
 800e98c:	f043 0301 	orr.w	r3, r3, #1
 800e990:	b2da      	uxtb	r2, r3
 800e992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e994:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d171      	bne.n	800ea80 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e99e:	8b9b      	ldrh	r3, [r3, #28]
 800e9a0:	3314      	adds	r3, #20
 800e9a2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e9a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9b8:	3308      	adds	r3, #8
 800e9ba:	2214      	movs	r2, #20
 800e9bc:	4619      	mov	r1, r3
 800e9be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9c0:	f008 ffcf 	bl	8017962 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e9c4:	8a3b      	ldrh	r3, [r7, #16]
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7fb fbd0 	bl	800a16c <lwip_htons>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9d2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	719a      	strb	r2, [r3, #6]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	729a      	strb	r2, [r3, #10]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e9ee:	e00d      	b.n	800ea0c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e9f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e9f6:	2114      	movs	r1, #20
 800e9f8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e9fa:	f001 fd5b 	bl	80104b4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e9fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f001 feab 	bl	801075c <pbuf_cat>
      r = iprh->next_pbuf;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800ea0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d1ee      	bne.n	800e9f0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ea12:	4b1e      	ldr	r3, [pc, #120]	@ (800ea8c <ip4_reass+0x2b4>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d102      	bne.n	800ea22 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ea20:	e010      	b.n	800ea44 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ea22:	4b1a      	ldr	r3, [pc, #104]	@ (800ea8c <ip4_reass+0x2b4>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ea28:	e007      	b.n	800ea3a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ea2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d006      	beq.n	800ea42 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ea34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ea3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1f4      	bne.n	800ea2a <ip4_reass+0x252>
 800ea40:	e000      	b.n	800ea44 <ip4_reass+0x26c>
          break;
 800ea42:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ea44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ea46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ea48:	f7ff fd2e 	bl	800e4a8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f001 fe45 	bl	80106dc <pbuf_clen>
 800ea52:	4603      	mov	r3, r0
 800ea54:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ea56:	4b0c      	ldr	r3, [pc, #48]	@ (800ea88 <ip4_reass+0x2b0>)
 800ea58:	881b      	ldrh	r3, [r3, #0]
 800ea5a:	8c3a      	ldrh	r2, [r7, #32]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d906      	bls.n	800ea6e <ip4_reass+0x296>
 800ea60:	4b0b      	ldr	r3, [pc, #44]	@ (800ea90 <ip4_reass+0x2b8>)
 800ea62:	f240 229b 	movw	r2, #667	@ 0x29b
 800ea66:	490b      	ldr	r1, [pc, #44]	@ (800ea94 <ip4_reass+0x2bc>)
 800ea68:	480b      	ldr	r0, [pc, #44]	@ (800ea98 <ip4_reass+0x2c0>)
 800ea6a:	f008 fd4f 	bl	801750c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ea6e:	4b06      	ldr	r3, [pc, #24]	@ (800ea88 <ip4_reass+0x2b0>)
 800ea70:	881a      	ldrh	r2, [r3, #0]
 800ea72:	8c3b      	ldrh	r3, [r7, #32]
 800ea74:	1ad3      	subs	r3, r2, r3
 800ea76:	b29a      	uxth	r2, r3
 800ea78:	4b03      	ldr	r3, [pc, #12]	@ (800ea88 <ip4_reass+0x2b0>)
 800ea7a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	e038      	b.n	800eaf2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ea80:	2300      	movs	r3, #0
 800ea82:	e036      	b.n	800eaf2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ea84:	bf00      	nop
 800ea86:	e00a      	b.n	800ea9e <ip4_reass+0x2c6>
 800ea88:	24004914 	.word	0x24004914
 800ea8c:	24004910 	.word	0x24004910
 800ea90:	0801900c 	.word	0x0801900c
 800ea94:	080191a8 	.word	0x080191a8
 800ea98:	08019080 	.word	0x08019080
    goto nullreturn_ipr;
 800ea9c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ea9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d106      	bne.n	800eab2 <ip4_reass+0x2da>
 800eaa4:	4b15      	ldr	r3, [pc, #84]	@ (800eafc <ip4_reass+0x324>)
 800eaa6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800eaaa:	4915      	ldr	r1, [pc, #84]	@ (800eb00 <ip4_reass+0x328>)
 800eaac:	4815      	ldr	r0, [pc, #84]	@ (800eb04 <ip4_reass+0x32c>)
 800eaae:	f008 fd2d 	bl	801750c <iprintf>
  if (ipr->p == NULL) {
 800eab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d116      	bne.n	800eae8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800eaba:	4b13      	ldr	r3, [pc, #76]	@ (800eb08 <ip4_reass+0x330>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d006      	beq.n	800ead2 <ip4_reass+0x2fa>
 800eac4:	4b0d      	ldr	r3, [pc, #52]	@ (800eafc <ip4_reass+0x324>)
 800eac6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800eaca:	4910      	ldr	r1, [pc, #64]	@ (800eb0c <ip4_reass+0x334>)
 800eacc:	480d      	ldr	r0, [pc, #52]	@ (800eb04 <ip4_reass+0x32c>)
 800eace:	f008 fd1d 	bl	801750c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ead2:	2100      	movs	r1, #0
 800ead4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ead6:	f7ff fce7 	bl	800e4a8 <ip_reass_dequeue_datagram>
 800eada:	e006      	b.n	800eaea <ip4_reass+0x312>
    goto nullreturn;
 800eadc:	bf00      	nop
 800eade:	e004      	b.n	800eaea <ip4_reass+0x312>
    goto nullreturn;
 800eae0:	bf00      	nop
 800eae2:	e002      	b.n	800eaea <ip4_reass+0x312>
      goto nullreturn;
 800eae4:	bf00      	nop
 800eae6:	e000      	b.n	800eaea <ip4_reass+0x312>
  }

nullreturn:
 800eae8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f001 fd68 	bl	80105c0 <pbuf_free>
  return NULL;
 800eaf0:	2300      	movs	r3, #0
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3738      	adds	r7, #56	@ 0x38
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	bf00      	nop
 800eafc:	0801900c 	.word	0x0801900c
 800eb00:	080191c4 	.word	0x080191c4
 800eb04:	08019080 	.word	0x08019080
 800eb08:	24004910 	.word	0x24004910
 800eb0c:	080191d0 	.word	0x080191d0

0800eb10 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800eb14:	2005      	movs	r0, #5
 800eb16:	f000 fe15 	bl	800f744 <memp_malloc>
 800eb1a:	4603      	mov	r3, r0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d106      	bne.n	800eb3c <ip_frag_free_pbuf_custom_ref+0x1c>
 800eb2e:	4b07      	ldr	r3, [pc, #28]	@ (800eb4c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800eb30:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800eb34:	4906      	ldr	r1, [pc, #24]	@ (800eb50 <ip_frag_free_pbuf_custom_ref+0x30>)
 800eb36:	4807      	ldr	r0, [pc, #28]	@ (800eb54 <ip_frag_free_pbuf_custom_ref+0x34>)
 800eb38:	f008 fce8 	bl	801750c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800eb3c:	6879      	ldr	r1, [r7, #4]
 800eb3e:	2005      	movs	r0, #5
 800eb40:	f000 fe76 	bl	800f830 <memp_free>
}
 800eb44:	bf00      	nop
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	0801900c 	.word	0x0801900c
 800eb50:	080191f0 	.word	0x080191f0
 800eb54:	08019080 	.word	0x08019080

0800eb58 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b084      	sub	sp, #16
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d106      	bne.n	800eb78 <ipfrag_free_pbuf_custom+0x20>
 800eb6a:	4b11      	ldr	r3, [pc, #68]	@ (800ebb0 <ipfrag_free_pbuf_custom+0x58>)
 800eb6c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800eb70:	4910      	ldr	r1, [pc, #64]	@ (800ebb4 <ipfrag_free_pbuf_custom+0x5c>)
 800eb72:	4811      	ldr	r0, [pc, #68]	@ (800ebb8 <ipfrag_free_pbuf_custom+0x60>)
 800eb74:	f008 fcca 	bl	801750c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800eb78:	68fa      	ldr	r2, [r7, #12]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d006      	beq.n	800eb8e <ipfrag_free_pbuf_custom+0x36>
 800eb80:	4b0b      	ldr	r3, [pc, #44]	@ (800ebb0 <ipfrag_free_pbuf_custom+0x58>)
 800eb82:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800eb86:	490d      	ldr	r1, [pc, #52]	@ (800ebbc <ipfrag_free_pbuf_custom+0x64>)
 800eb88:	480b      	ldr	r0, [pc, #44]	@ (800ebb8 <ipfrag_free_pbuf_custom+0x60>)
 800eb8a:	f008 fcbf 	bl	801750c <iprintf>
  if (pcr->original != NULL) {
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	695b      	ldr	r3, [r3, #20]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d004      	beq.n	800eba0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	695b      	ldr	r3, [r3, #20]
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f001 fd10 	bl	80105c0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800eba0:	68f8      	ldr	r0, [r7, #12]
 800eba2:	f7ff ffbd 	bl	800eb20 <ip_frag_free_pbuf_custom_ref>
}
 800eba6:	bf00      	nop
 800eba8:	3710      	adds	r7, #16
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	0801900c 	.word	0x0801900c
 800ebb4:	080191fc 	.word	0x080191fc
 800ebb8:	08019080 	.word	0x08019080
 800ebbc:	08019208 	.word	0x08019208

0800ebc0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b094      	sub	sp, #80	@ 0x50
 800ebc4:	af02      	add	r7, sp, #8
 800ebc6:	60f8      	str	r0, [r7, #12]
 800ebc8:	60b9      	str	r1, [r7, #8]
 800ebca:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ebd6:	3b14      	subs	r3, #20
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	da00      	bge.n	800ebde <ip4_frag+0x1e>
 800ebdc:	3307      	adds	r3, #7
 800ebde:	10db      	asrs	r3, r3, #3
 800ebe0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ebe2:	2314      	movs	r3, #20
 800ebe4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800ebec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebee:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ebf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	f003 030f 	and.w	r3, r3, #15
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	009b      	lsls	r3, r3, #2
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	2b14      	cmp	r3, #20
 800ec00:	d002      	beq.n	800ec08 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ec02:	f06f 0305 	mvn.w	r3, #5
 800ec06:	e110      	b.n	800ee2a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	895b      	ldrh	r3, [r3, #10]
 800ec0c:	2b13      	cmp	r3, #19
 800ec0e:	d809      	bhi.n	800ec24 <ip4_frag+0x64>
 800ec10:	4b88      	ldr	r3, [pc, #544]	@ (800ee34 <ip4_frag+0x274>)
 800ec12:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800ec16:	4988      	ldr	r1, [pc, #544]	@ (800ee38 <ip4_frag+0x278>)
 800ec18:	4888      	ldr	r0, [pc, #544]	@ (800ee3c <ip4_frag+0x27c>)
 800ec1a:	f008 fc77 	bl	801750c <iprintf>
 800ec1e:	f06f 0305 	mvn.w	r3, #5
 800ec22:	e102      	b.n	800ee2a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ec24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec26:	88db      	ldrh	r3, [r3, #6]
 800ec28:	b29b      	uxth	r3, r3
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7fb fa9e 	bl	800a16c <lwip_htons>
 800ec30:	4603      	mov	r3, r0
 800ec32:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800ec34:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ec36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ec3a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ec3e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ec40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ec44:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	891b      	ldrh	r3, [r3, #8]
 800ec4a:	3b14      	subs	r3, #20
 800ec4c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800ec50:	e0e1      	b.n	800ee16 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ec52:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ec54:	00db      	lsls	r3, r3, #3
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	bf28      	it	cs
 800ec60:	4613      	movcs	r3, r2
 800ec62:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ec64:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ec68:	2114      	movs	r1, #20
 800ec6a:	200e      	movs	r0, #14
 800ec6c:	f001 f9c6 	bl	800fffc <pbuf_alloc>
 800ec70:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800ec72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f000 80d5 	beq.w	800ee24 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ec7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec7c:	895b      	ldrh	r3, [r3, #10]
 800ec7e:	2b13      	cmp	r3, #19
 800ec80:	d806      	bhi.n	800ec90 <ip4_frag+0xd0>
 800ec82:	4b6c      	ldr	r3, [pc, #432]	@ (800ee34 <ip4_frag+0x274>)
 800ec84:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800ec88:	496d      	ldr	r1, [pc, #436]	@ (800ee40 <ip4_frag+0x280>)
 800ec8a:	486c      	ldr	r0, [pc, #432]	@ (800ee3c <ip4_frag+0x27c>)
 800ec8c:	f008 fc3e 	bl	801750c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ec90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	2214      	movs	r2, #20
 800ec96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f008 fe62 	bl	8017962 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ec9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800eca4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800eca6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800ecaa:	e064      	b.n	800ed76 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	895a      	ldrh	r2, [r3, #10]
 800ecb0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ecb2:	1ad3      	subs	r3, r2, r3
 800ecb4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	895b      	ldrh	r3, [r3, #10]
 800ecba:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d906      	bls.n	800ecce <ip4_frag+0x10e>
 800ecc0:	4b5c      	ldr	r3, [pc, #368]	@ (800ee34 <ip4_frag+0x274>)
 800ecc2:	f240 322d 	movw	r2, #813	@ 0x32d
 800ecc6:	495f      	ldr	r1, [pc, #380]	@ (800ee44 <ip4_frag+0x284>)
 800ecc8:	485c      	ldr	r0, [pc, #368]	@ (800ee3c <ip4_frag+0x27c>)
 800ecca:	f008 fc1f 	bl	801750c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ecce:	8bfa      	ldrh	r2, [r7, #30]
 800ecd0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	bf28      	it	cs
 800ecd8:	4613      	movcs	r3, r2
 800ecda:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ecde:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d105      	bne.n	800ecf2 <ip4_frag+0x132>
        poff = 0;
 800ece6:	2300      	movs	r3, #0
 800ece8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	60fb      	str	r3, [r7, #12]
        continue;
 800ecf0:	e041      	b.n	800ed76 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ecf2:	f7ff ff0d 	bl	800eb10 <ip_frag_alloc_pbuf_custom_ref>
 800ecf6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ecf8:	69bb      	ldr	r3, [r7, #24]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d103      	bne.n	800ed06 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ecfe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed00:	f001 fc5e 	bl	80105c0 <pbuf_free>
        goto memerr;
 800ed04:	e08f      	b.n	800ee26 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ed06:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ed0c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ed0e:	4413      	add	r3, r2
 800ed10:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800ed14:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ed18:	9201      	str	r2, [sp, #4]
 800ed1a:	9300      	str	r3, [sp, #0]
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	2241      	movs	r2, #65	@ 0x41
 800ed20:	2000      	movs	r0, #0
 800ed22:	f001 fa95 	bl	8010250 <pbuf_alloced_custom>
 800ed26:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d106      	bne.n	800ed3c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ed2e:	69b8      	ldr	r0, [r7, #24]
 800ed30:	f7ff fef6 	bl	800eb20 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ed34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed36:	f001 fc43 	bl	80105c0 <pbuf_free>
        goto memerr;
 800ed3a:	e074      	b.n	800ee26 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ed3c:	68f8      	ldr	r0, [r7, #12]
 800ed3e:	f001 fce5 	bl	801070c <pbuf_ref>
      pcr->original = p;
 800ed42:	69bb      	ldr	r3, [r7, #24]
 800ed44:	68fa      	ldr	r2, [r7, #12]
 800ed46:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	4a3f      	ldr	r2, [pc, #252]	@ (800ee48 <ip4_frag+0x288>)
 800ed4c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ed4e:	6979      	ldr	r1, [r7, #20]
 800ed50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed52:	f001 fd03 	bl	801075c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ed56:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800ed5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ed5e:	1ad3      	subs	r3, r2, r3
 800ed60:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800ed64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d004      	beq.n	800ed76 <ip4_frag+0x1b6>
        poff = 0;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ed76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d196      	bne.n	800ecac <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ed7e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800ed80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ed84:	4413      	add	r3, r2
 800ed86:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ed8c:	f1a3 0213 	sub.w	r2, r3, #19
 800ed90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ed94:	429a      	cmp	r2, r3
 800ed96:	bfcc      	ite	gt
 800ed98:	2301      	movgt	r3, #1
 800ed9a:	2300      	movle	r3, #0
 800ed9c:	b2db      	uxtb	r3, r3
 800ed9e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800eda0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800eda4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eda8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800edaa:	6a3b      	ldr	r3, [r7, #32]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d002      	beq.n	800edb6 <ip4_frag+0x1f6>
 800edb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d003      	beq.n	800edbe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800edb6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800edb8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800edbc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800edbe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7fb f9d3 	bl	800a16c <lwip_htons>
 800edc6:	4603      	mov	r3, r0
 800edc8:	461a      	mov	r2, r3
 800edca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edcc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800edce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800edd0:	3314      	adds	r3, #20
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7fb f9c9 	bl	800a16c <lwip_htons>
 800edda:	4603      	mov	r3, r0
 800eddc:	461a      	mov	r2, r3
 800edde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ede0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ede2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ede4:	2200      	movs	r2, #0
 800ede6:	729a      	strb	r2, [r3, #10]
 800ede8:	2200      	movs	r2, #0
 800edea:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	695b      	ldr	r3, [r3, #20]
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800edf4:	68b8      	ldr	r0, [r7, #8]
 800edf6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800edf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800edfa:	f001 fbe1 	bl	80105c0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800edfe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ee02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ee04:	1ad3      	subs	r3, r2, r3
 800ee06:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800ee0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800ee0e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ee10:	4413      	add	r3, r2
 800ee12:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800ee16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	f47f af19 	bne.w	800ec52 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ee20:	2300      	movs	r3, #0
 800ee22:	e002      	b.n	800ee2a <ip4_frag+0x26a>
      goto memerr;
 800ee24:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ee26:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3748      	adds	r7, #72	@ 0x48
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop
 800ee34:	0801900c 	.word	0x0801900c
 800ee38:	08019214 	.word	0x08019214
 800ee3c:	08019080 	.word	0x08019080
 800ee40:	08019230 	.word	0x08019230
 800ee44:	08019250 	.word	0x08019250
 800ee48:	0800eb59 	.word	0x0800eb59

0800ee4c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b083      	sub	sp, #12
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800ee54:	4b04      	ldr	r3, [pc, #16]	@ (800ee68 <ptr_to_mem+0x1c>)
 800ee56:	681a      	ldr	r2, [r3, #0]
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	4413      	add	r3, r2
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	370c      	adds	r7, #12
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr
 800ee68:	24004918 	.word	0x24004918

0800ee6c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b083      	sub	sp, #12
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ee74:	4b04      	ldr	r3, [pc, #16]	@ (800ee88 <mem_to_ptr+0x1c>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	687a      	ldr	r2, [r7, #4]
 800ee7a:	1ad3      	subs	r3, r2, r3
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	370c      	adds	r7, #12
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr
 800ee88:	24004918 	.word	0x24004918

0800ee8c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ee8c:	b590      	push	{r4, r7, lr}
 800ee8e:	b085      	sub	sp, #20
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ee94:	4b45      	ldr	r3, [pc, #276]	@ (800efac <plug_holes+0x120>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d206      	bcs.n	800eeac <plug_holes+0x20>
 800ee9e:	4b44      	ldr	r3, [pc, #272]	@ (800efb0 <plug_holes+0x124>)
 800eea0:	f240 12df 	movw	r2, #479	@ 0x1df
 800eea4:	4943      	ldr	r1, [pc, #268]	@ (800efb4 <plug_holes+0x128>)
 800eea6:	4844      	ldr	r0, [pc, #272]	@ (800efb8 <plug_holes+0x12c>)
 800eea8:	f008 fb30 	bl	801750c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800eeac:	4b43      	ldr	r3, [pc, #268]	@ (800efbc <plug_holes+0x130>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d306      	bcc.n	800eec4 <plug_holes+0x38>
 800eeb6:	4b3e      	ldr	r3, [pc, #248]	@ (800efb0 <plug_holes+0x124>)
 800eeb8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800eebc:	4940      	ldr	r1, [pc, #256]	@ (800efc0 <plug_holes+0x134>)
 800eebe:	483e      	ldr	r0, [pc, #248]	@ (800efb8 <plug_holes+0x12c>)
 800eec0:	f008 fb24 	bl	801750c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	7a1b      	ldrb	r3, [r3, #8]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d006      	beq.n	800eeda <plug_holes+0x4e>
 800eecc:	4b38      	ldr	r3, [pc, #224]	@ (800efb0 <plug_holes+0x124>)
 800eece:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800eed2:	493c      	ldr	r1, [pc, #240]	@ (800efc4 <plug_holes+0x138>)
 800eed4:	4838      	ldr	r0, [pc, #224]	@ (800efb8 <plug_holes+0x12c>)
 800eed6:	f008 fb19 	bl	801750c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	4a3a      	ldr	r2, [pc, #232]	@ (800efc8 <plug_holes+0x13c>)
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d906      	bls.n	800eef2 <plug_holes+0x66>
 800eee4:	4b32      	ldr	r3, [pc, #200]	@ (800efb0 <plug_holes+0x124>)
 800eee6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800eeea:	4938      	ldr	r1, [pc, #224]	@ (800efcc <plug_holes+0x140>)
 800eeec:	4832      	ldr	r0, [pc, #200]	@ (800efb8 <plug_holes+0x12c>)
 800eeee:	f008 fb0d 	bl	801750c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7ff ffa8 	bl	800ee4c <ptr_to_mem>
 800eefc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d024      	beq.n	800ef50 <plug_holes+0xc4>
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	7a1b      	ldrb	r3, [r3, #8]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d120      	bne.n	800ef50 <plug_holes+0xc4>
 800ef0e:	4b2b      	ldr	r3, [pc, #172]	@ (800efbc <plug_holes+0x130>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	68fa      	ldr	r2, [r7, #12]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d01b      	beq.n	800ef50 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ef18:	4b2d      	ldr	r3, [pc, #180]	@ (800efd0 <plug_holes+0x144>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	68fa      	ldr	r2, [r7, #12]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d102      	bne.n	800ef28 <plug_holes+0x9c>
      lfree = mem;
 800ef22:	4a2b      	ldr	r2, [pc, #172]	@ (800efd0 <plug_holes+0x144>)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	4a24      	ldr	r2, [pc, #144]	@ (800efc8 <plug_holes+0x13c>)
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d00a      	beq.n	800ef50 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7ff ff84 	bl	800ee4c <ptr_to_mem>
 800ef44:	4604      	mov	r4, r0
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f7ff ff90 	bl	800ee6c <mem_to_ptr>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	685b      	ldr	r3, [r3, #4]
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7ff ff79 	bl	800ee4c <ptr_to_mem>
 800ef5a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ef5c:	68ba      	ldr	r2, [r7, #8]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d01f      	beq.n	800efa4 <plug_holes+0x118>
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	7a1b      	ldrb	r3, [r3, #8]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d11b      	bne.n	800efa4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ef6c:	4b18      	ldr	r3, [pc, #96]	@ (800efd0 <plug_holes+0x144>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	687a      	ldr	r2, [r7, #4]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d102      	bne.n	800ef7c <plug_holes+0xf0>
      lfree = pmem;
 800ef76:	4a16      	ldr	r2, [pc, #88]	@ (800efd0 <plug_holes+0x144>)
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681a      	ldr	r2, [r3, #0]
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a0f      	ldr	r2, [pc, #60]	@ (800efc8 <plug_holes+0x13c>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d00a      	beq.n	800efa4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7ff ff5a 	bl	800ee4c <ptr_to_mem>
 800ef98:	4604      	mov	r4, r0
 800ef9a:	68b8      	ldr	r0, [r7, #8]
 800ef9c:	f7ff ff66 	bl	800ee6c <mem_to_ptr>
 800efa0:	4603      	mov	r3, r0
 800efa2:	6063      	str	r3, [r4, #4]
    }
  }
}
 800efa4:	bf00      	nop
 800efa6:	3714      	adds	r7, #20
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd90      	pop	{r4, r7, pc}
 800efac:	24004918 	.word	0x24004918
 800efb0:	08019260 	.word	0x08019260
 800efb4:	080192bc 	.word	0x080192bc
 800efb8:	080192d4 	.word	0x080192d4
 800efbc:	2400491c 	.word	0x2400491c
 800efc0:	080192fc 	.word	0x080192fc
 800efc4:	08019318 	.word	0x08019318
 800efc8:	0001ffe8 	.word	0x0001ffe8
 800efcc:	08019334 	.word	0x08019334
 800efd0:	24004924 	.word	0x24004924

0800efd4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b082      	sub	sp, #8
 800efd8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800efda:	4b1b      	ldr	r3, [pc, #108]	@ (800f048 <mem_init+0x74>)
 800efdc:	4a1b      	ldr	r2, [pc, #108]	@ (800f04c <mem_init+0x78>)
 800efde:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800efe0:	4b19      	ldr	r3, [pc, #100]	@ (800f048 <mem_init+0x74>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	4a19      	ldr	r2, [pc, #100]	@ (800f050 <mem_init+0x7c>)
 800efea:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2200      	movs	r2, #0
 800eff0:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2200      	movs	r2, #0
 800eff6:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800eff8:	4815      	ldr	r0, [pc, #84]	@ (800f050 <mem_init+0x7c>)
 800effa:	f7ff ff27 	bl	800ee4c <ptr_to_mem>
 800effe:	4603      	mov	r3, r0
 800f000:	4a14      	ldr	r2, [pc, #80]	@ (800f054 <mem_init+0x80>)
 800f002:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f004:	4b13      	ldr	r3, [pc, #76]	@ (800f054 <mem_init+0x80>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	2201      	movs	r2, #1
 800f00a:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f00c:	4b11      	ldr	r3, [pc, #68]	@ (800f054 <mem_init+0x80>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4a0f      	ldr	r2, [pc, #60]	@ (800f050 <mem_init+0x7c>)
 800f012:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f014:	4b0f      	ldr	r3, [pc, #60]	@ (800f054 <mem_init+0x80>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4a0d      	ldr	r2, [pc, #52]	@ (800f050 <mem_init+0x7c>)
 800f01a:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f01c:	4b0a      	ldr	r3, [pc, #40]	@ (800f048 <mem_init+0x74>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	4a0d      	ldr	r2, [pc, #52]	@ (800f058 <mem_init+0x84>)
 800f022:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f024:	480d      	ldr	r0, [pc, #52]	@ (800f05c <mem_init+0x88>)
 800f026:	f001 ff69 	bl	8010efc <sys_mutex_new>
 800f02a:	4603      	mov	r3, r0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d006      	beq.n	800f03e <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f030:	4b0b      	ldr	r3, [pc, #44]	@ (800f060 <mem_init+0x8c>)
 800f032:	f240 221f 	movw	r2, #543	@ 0x21f
 800f036:	490b      	ldr	r1, [pc, #44]	@ (800f064 <mem_init+0x90>)
 800f038:	480b      	ldr	r0, [pc, #44]	@ (800f068 <mem_init+0x94>)
 800f03a:	f008 fa67 	bl	801750c <iprintf>
  }
}
 800f03e:	bf00      	nop
 800f040:	3708      	adds	r7, #8
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	24004918 	.word	0x24004918
 800f04c:	30020000 	.word	0x30020000
 800f050:	0001ffe8 	.word	0x0001ffe8
 800f054:	2400491c 	.word	0x2400491c
 800f058:	24004924 	.word	0x24004924
 800f05c:	24004920 	.word	0x24004920
 800f060:	08019260 	.word	0x08019260
 800f064:	08019360 	.word	0x08019360
 800f068:	080192d4 	.word	0x080192d4

0800f06c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f7ff fef9 	bl	800ee6c <mem_to_ptr>
 800f07a:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	4618      	mov	r0, r3
 800f082:	f7ff fee3 	bl	800ee4c <ptr_to_mem>
 800f086:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	685b      	ldr	r3, [r3, #4]
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7ff fedd 	bl	800ee4c <ptr_to_mem>
 800f092:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	4a11      	ldr	r2, [pc, #68]	@ (800f0e0 <mem_link_valid+0x74>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d818      	bhi.n	800f0d0 <mem_link_valid+0x64>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	4a0f      	ldr	r2, [pc, #60]	@ (800f0e0 <mem_link_valid+0x74>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d813      	bhi.n	800f0d0 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f0ac:	697a      	ldr	r2, [r7, #20]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d004      	beq.n	800f0bc <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	697a      	ldr	r2, [r7, #20]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d109      	bne.n	800f0d0 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f0bc:	4b09      	ldr	r3, [pc, #36]	@ (800f0e4 <mem_link_valid+0x78>)
 800f0be:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f0c0:	693a      	ldr	r2, [r7, #16]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d006      	beq.n	800f0d4 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	697a      	ldr	r2, [r7, #20]
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d001      	beq.n	800f0d4 <mem_link_valid+0x68>
    return 0;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	e000      	b.n	800f0d6 <mem_link_valid+0x6a>
  }
  return 1;
 800f0d4:	2301      	movs	r3, #1
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3718      	adds	r7, #24
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
 800f0de:	bf00      	nop
 800f0e0:	0001ffe8 	.word	0x0001ffe8
 800f0e4:	2400491c 	.word	0x2400491c

0800f0e8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b088      	sub	sp, #32
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d070      	beq.n	800f1d8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f003 0303 	and.w	r3, r3, #3
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d00d      	beq.n	800f11c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f100:	4b37      	ldr	r3, [pc, #220]	@ (800f1e0 <mem_free+0xf8>)
 800f102:	f240 2273 	movw	r2, #627	@ 0x273
 800f106:	4937      	ldr	r1, [pc, #220]	@ (800f1e4 <mem_free+0xfc>)
 800f108:	4837      	ldr	r0, [pc, #220]	@ (800f1e8 <mem_free+0x100>)
 800f10a:	f008 f9ff 	bl	801750c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f10e:	f001 ff53 	bl	8010fb8 <sys_arch_protect>
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	68f8      	ldr	r0, [r7, #12]
 800f116:	f001 ff5d 	bl	8010fd4 <sys_arch_unprotect>
    return;
 800f11a:	e05e      	b.n	800f1da <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	3b0c      	subs	r3, #12
 800f120:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f122:	4b32      	ldr	r3, [pc, #200]	@ (800f1ec <mem_free+0x104>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	69fa      	ldr	r2, [r7, #28]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d306      	bcc.n	800f13a <mem_free+0x52>
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f103 020c 	add.w	r2, r3, #12
 800f132:	4b2f      	ldr	r3, [pc, #188]	@ (800f1f0 <mem_free+0x108>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	429a      	cmp	r2, r3
 800f138:	d90d      	bls.n	800f156 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f13a:	4b29      	ldr	r3, [pc, #164]	@ (800f1e0 <mem_free+0xf8>)
 800f13c:	f240 227f 	movw	r2, #639	@ 0x27f
 800f140:	492c      	ldr	r1, [pc, #176]	@ (800f1f4 <mem_free+0x10c>)
 800f142:	4829      	ldr	r0, [pc, #164]	@ (800f1e8 <mem_free+0x100>)
 800f144:	f008 f9e2 	bl	801750c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f148:	f001 ff36 	bl	8010fb8 <sys_arch_protect>
 800f14c:	6138      	str	r0, [r7, #16]
 800f14e:	6938      	ldr	r0, [r7, #16]
 800f150:	f001 ff40 	bl	8010fd4 <sys_arch_unprotect>
    return;
 800f154:	e041      	b.n	800f1da <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f156:	4828      	ldr	r0, [pc, #160]	@ (800f1f8 <mem_free+0x110>)
 800f158:	f001 feec 	bl	8010f34 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	7a1b      	ldrb	r3, [r3, #8]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d110      	bne.n	800f186 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f164:	4b1e      	ldr	r3, [pc, #120]	@ (800f1e0 <mem_free+0xf8>)
 800f166:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800f16a:	4924      	ldr	r1, [pc, #144]	@ (800f1fc <mem_free+0x114>)
 800f16c:	481e      	ldr	r0, [pc, #120]	@ (800f1e8 <mem_free+0x100>)
 800f16e:	f008 f9cd 	bl	801750c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f172:	4821      	ldr	r0, [pc, #132]	@ (800f1f8 <mem_free+0x110>)
 800f174:	f001 feed 	bl	8010f52 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f178:	f001 ff1e 	bl	8010fb8 <sys_arch_protect>
 800f17c:	6178      	str	r0, [r7, #20]
 800f17e:	6978      	ldr	r0, [r7, #20]
 800f180:	f001 ff28 	bl	8010fd4 <sys_arch_unprotect>
    return;
 800f184:	e029      	b.n	800f1da <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f186:	69f8      	ldr	r0, [r7, #28]
 800f188:	f7ff ff70 	bl	800f06c <mem_link_valid>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d110      	bne.n	800f1b4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f192:	4b13      	ldr	r3, [pc, #76]	@ (800f1e0 <mem_free+0xf8>)
 800f194:	f240 2295 	movw	r2, #661	@ 0x295
 800f198:	4919      	ldr	r1, [pc, #100]	@ (800f200 <mem_free+0x118>)
 800f19a:	4813      	ldr	r0, [pc, #76]	@ (800f1e8 <mem_free+0x100>)
 800f19c:	f008 f9b6 	bl	801750c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f1a0:	4815      	ldr	r0, [pc, #84]	@ (800f1f8 <mem_free+0x110>)
 800f1a2:	f001 fed6 	bl	8010f52 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f1a6:	f001 ff07 	bl	8010fb8 <sys_arch_protect>
 800f1aa:	61b8      	str	r0, [r7, #24]
 800f1ac:	69b8      	ldr	r0, [r7, #24]
 800f1ae:	f001 ff11 	bl	8010fd4 <sys_arch_unprotect>
    return;
 800f1b2:	e012      	b.n	800f1da <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800f1ba:	4b12      	ldr	r3, [pc, #72]	@ (800f204 <mem_free+0x11c>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	69fa      	ldr	r2, [r7, #28]
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d202      	bcs.n	800f1ca <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f1c4:	4a0f      	ldr	r2, [pc, #60]	@ (800f204 <mem_free+0x11c>)
 800f1c6:	69fb      	ldr	r3, [r7, #28]
 800f1c8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f1ca:	69f8      	ldr	r0, [r7, #28]
 800f1cc:	f7ff fe5e 	bl	800ee8c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f1d0:	4809      	ldr	r0, [pc, #36]	@ (800f1f8 <mem_free+0x110>)
 800f1d2:	f001 febe 	bl	8010f52 <sys_mutex_unlock>
 800f1d6:	e000      	b.n	800f1da <mem_free+0xf2>
    return;
 800f1d8:	bf00      	nop
}
 800f1da:	3720      	adds	r7, #32
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}
 800f1e0:	08019260 	.word	0x08019260
 800f1e4:	0801937c 	.word	0x0801937c
 800f1e8:	080192d4 	.word	0x080192d4
 800f1ec:	24004918 	.word	0x24004918
 800f1f0:	2400491c 	.word	0x2400491c
 800f1f4:	080193a0 	.word	0x080193a0
 800f1f8:	24004920 	.word	0x24004920
 800f1fc:	080193bc 	.word	0x080193bc
 800f200:	080193e4 	.word	0x080193e4
 800f204:	24004924 	.word	0x24004924

0800f208 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b08a      	sub	sp, #40	@ 0x28
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	3303      	adds	r3, #3
 800f216:	f023 0303 	bic.w	r3, r3, #3
 800f21a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800f21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f21e:	2b0b      	cmp	r3, #11
 800f220:	d801      	bhi.n	800f226 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f222:	230c      	movs	r3, #12
 800f224:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f228:	4a6e      	ldr	r2, [pc, #440]	@ (800f3e4 <mem_trim+0x1dc>)
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d803      	bhi.n	800f236 <mem_trim+0x2e>
 800f22e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	429a      	cmp	r2, r3
 800f234:	d201      	bcs.n	800f23a <mem_trim+0x32>
    return NULL;
 800f236:	2300      	movs	r3, #0
 800f238:	e0d0      	b.n	800f3dc <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f23a:	4b6b      	ldr	r3, [pc, #428]	@ (800f3e8 <mem_trim+0x1e0>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	429a      	cmp	r2, r3
 800f242:	d304      	bcc.n	800f24e <mem_trim+0x46>
 800f244:	4b69      	ldr	r3, [pc, #420]	@ (800f3ec <mem_trim+0x1e4>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	687a      	ldr	r2, [r7, #4]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d306      	bcc.n	800f25c <mem_trim+0x54>
 800f24e:	4b68      	ldr	r3, [pc, #416]	@ (800f3f0 <mem_trim+0x1e8>)
 800f250:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800f254:	4967      	ldr	r1, [pc, #412]	@ (800f3f4 <mem_trim+0x1ec>)
 800f256:	4868      	ldr	r0, [pc, #416]	@ (800f3f8 <mem_trim+0x1f0>)
 800f258:	f008 f958 	bl	801750c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f25c:	4b62      	ldr	r3, [pc, #392]	@ (800f3e8 <mem_trim+0x1e0>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	687a      	ldr	r2, [r7, #4]
 800f262:	429a      	cmp	r2, r3
 800f264:	d304      	bcc.n	800f270 <mem_trim+0x68>
 800f266:	4b61      	ldr	r3, [pc, #388]	@ (800f3ec <mem_trim+0x1e4>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d307      	bcc.n	800f280 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f270:	f001 fea2 	bl	8010fb8 <sys_arch_protect>
 800f274:	60b8      	str	r0, [r7, #8]
 800f276:	68b8      	ldr	r0, [r7, #8]
 800f278:	f001 feac 	bl	8010fd4 <sys_arch_unprotect>
    return rmem;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	e0ad      	b.n	800f3dc <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	3b0c      	subs	r3, #12
 800f284:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f286:	6a38      	ldr	r0, [r7, #32]
 800f288:	f7ff fdf0 	bl	800ee6c <mem_to_ptr>
 800f28c:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f28e:	6a3b      	ldr	r3, [r7, #32]
 800f290:	681a      	ldr	r2, [r3, #0]
 800f292:	69fb      	ldr	r3, [r7, #28]
 800f294:	1ad3      	subs	r3, r2, r3
 800f296:	3b0c      	subs	r3, #12
 800f298:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f29a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d906      	bls.n	800f2b0 <mem_trim+0xa8>
 800f2a2:	4b53      	ldr	r3, [pc, #332]	@ (800f3f0 <mem_trim+0x1e8>)
 800f2a4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800f2a8:	4954      	ldr	r1, [pc, #336]	@ (800f3fc <mem_trim+0x1f4>)
 800f2aa:	4853      	ldr	r0, [pc, #332]	@ (800f3f8 <mem_trim+0x1f0>)
 800f2ac:	f008 f92e 	bl	801750c <iprintf>
  if (newsize > size) {
 800f2b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d901      	bls.n	800f2bc <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	e08f      	b.n	800f3dc <mem_trim+0x1d4>
  }
  if (newsize == size) {
 800f2bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2be:	69bb      	ldr	r3, [r7, #24]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d101      	bne.n	800f2c8 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	e089      	b.n	800f3dc <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f2c8:	484d      	ldr	r0, [pc, #308]	@ (800f400 <mem_trim+0x1f8>)
 800f2ca:	f001 fe33 	bl	8010f34 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f2ce:	6a3b      	ldr	r3, [r7, #32]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7ff fdba 	bl	800ee4c <ptr_to_mem>
 800f2d8:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	7a1b      	ldrb	r3, [r3, #8]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d13c      	bne.n	800f35c <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f2e2:	6a3b      	ldr	r3, [r7, #32]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	4a3f      	ldr	r2, [pc, #252]	@ (800f3e4 <mem_trim+0x1dc>)
 800f2e8:	4293      	cmp	r3, r2
 800f2ea:	d106      	bne.n	800f2fa <mem_trim+0xf2>
 800f2ec:	4b40      	ldr	r3, [pc, #256]	@ (800f3f0 <mem_trim+0x1e8>)
 800f2ee:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800f2f2:	4944      	ldr	r1, [pc, #272]	@ (800f404 <mem_trim+0x1fc>)
 800f2f4:	4840      	ldr	r0, [pc, #256]	@ (800f3f8 <mem_trim+0x1f0>)
 800f2f6:	f008 f909 	bl	801750c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f300:	69fa      	ldr	r2, [r7, #28]
 800f302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f304:	4413      	add	r3, r2
 800f306:	330c      	adds	r3, #12
 800f308:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800f30a:	4b3f      	ldr	r3, [pc, #252]	@ (800f408 <mem_trim+0x200>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	697a      	ldr	r2, [r7, #20]
 800f310:	429a      	cmp	r2, r3
 800f312:	d105      	bne.n	800f320 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 800f314:	6938      	ldr	r0, [r7, #16]
 800f316:	f7ff fd99 	bl	800ee4c <ptr_to_mem>
 800f31a:	4603      	mov	r3, r0
 800f31c:	4a3a      	ldr	r2, [pc, #232]	@ (800f408 <mem_trim+0x200>)
 800f31e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f320:	6938      	ldr	r0, [r7, #16]
 800f322:	f7ff fd93 	bl	800ee4c <ptr_to_mem>
 800f326:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	2200      	movs	r2, #0
 800f32c:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	69fa      	ldr	r2, [r7, #28]
 800f338:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800f33a:	6a3b      	ldr	r3, [r7, #32]
 800f33c:	693a      	ldr	r2, [r7, #16]
 800f33e:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	4a27      	ldr	r2, [pc, #156]	@ (800f3e4 <mem_trim+0x1dc>)
 800f346:	4293      	cmp	r3, r2
 800f348:	d044      	beq.n	800f3d4 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	4618      	mov	r0, r3
 800f350:	f7ff fd7c 	bl	800ee4c <ptr_to_mem>
 800f354:	4602      	mov	r2, r0
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	6053      	str	r3, [r2, #4]
 800f35a:	e03b      	b.n	800f3d4 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f35e:	3318      	adds	r3, #24
 800f360:	69ba      	ldr	r2, [r7, #24]
 800f362:	429a      	cmp	r2, r3
 800f364:	d336      	bcc.n	800f3d4 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f366:	69fa      	ldr	r2, [r7, #28]
 800f368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f36a:	4413      	add	r3, r2
 800f36c:	330c      	adds	r3, #12
 800f36e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f370:	6a3b      	ldr	r3, [r7, #32]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4a1b      	ldr	r2, [pc, #108]	@ (800f3e4 <mem_trim+0x1dc>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d106      	bne.n	800f388 <mem_trim+0x180>
 800f37a:	4b1d      	ldr	r3, [pc, #116]	@ (800f3f0 <mem_trim+0x1e8>)
 800f37c:	f240 3216 	movw	r2, #790	@ 0x316
 800f380:	4920      	ldr	r1, [pc, #128]	@ (800f404 <mem_trim+0x1fc>)
 800f382:	481d      	ldr	r0, [pc, #116]	@ (800f3f8 <mem_trim+0x1f0>)
 800f384:	f008 f8c2 	bl	801750c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f388:	6938      	ldr	r0, [r7, #16]
 800f38a:	f7ff fd5f 	bl	800ee4c <ptr_to_mem>
 800f38e:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800f390:	4b1d      	ldr	r3, [pc, #116]	@ (800f408 <mem_trim+0x200>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	697a      	ldr	r2, [r7, #20]
 800f396:	429a      	cmp	r2, r3
 800f398:	d202      	bcs.n	800f3a0 <mem_trim+0x198>
      lfree = mem2;
 800f39a:	4a1b      	ldr	r2, [pc, #108]	@ (800f408 <mem_trim+0x200>)
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800f3a6:	6a3b      	ldr	r3, [r7, #32]
 800f3a8:	681a      	ldr	r2, [r3, #0]
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	69fa      	ldr	r2, [r7, #28]
 800f3b2:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800f3b4:	6a3b      	ldr	r3, [r7, #32]
 800f3b6:	693a      	ldr	r2, [r7, #16]
 800f3b8:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	4a09      	ldr	r2, [pc, #36]	@ (800f3e4 <mem_trim+0x1dc>)
 800f3c0:	4293      	cmp	r3, r2
 800f3c2:	d007      	beq.n	800f3d4 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f7ff fd3f 	bl	800ee4c <ptr_to_mem>
 800f3ce:	4602      	mov	r2, r0
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f3d4:	480a      	ldr	r0, [pc, #40]	@ (800f400 <mem_trim+0x1f8>)
 800f3d6:	f001 fdbc 	bl	8010f52 <sys_mutex_unlock>
  return rmem;
 800f3da:	687b      	ldr	r3, [r7, #4]
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3728      	adds	r7, #40	@ 0x28
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}
 800f3e4:	0001ffe8 	.word	0x0001ffe8
 800f3e8:	24004918 	.word	0x24004918
 800f3ec:	2400491c 	.word	0x2400491c
 800f3f0:	08019260 	.word	0x08019260
 800f3f4:	08019418 	.word	0x08019418
 800f3f8:	080192d4 	.word	0x080192d4
 800f3fc:	08019430 	.word	0x08019430
 800f400:	24004920 	.word	0x24004920
 800f404:	08019450 	.word	0x08019450
 800f408:	24004924 	.word	0x24004924

0800f40c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b088      	sub	sp, #32
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d101      	bne.n	800f41e <mem_malloc+0x12>
    return NULL;
 800f41a:	2300      	movs	r3, #0
 800f41c:	e0d9      	b.n	800f5d2 <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	3303      	adds	r3, #3
 800f422:	f023 0303 	bic.w	r3, r3, #3
 800f426:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	2b0b      	cmp	r3, #11
 800f42c:	d801      	bhi.n	800f432 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f42e:	230c      	movs	r3, #12
 800f430:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f432:	69bb      	ldr	r3, [r7, #24]
 800f434:	4a69      	ldr	r2, [pc, #420]	@ (800f5dc <mem_malloc+0x1d0>)
 800f436:	4293      	cmp	r3, r2
 800f438:	d803      	bhi.n	800f442 <mem_malloc+0x36>
 800f43a:	69ba      	ldr	r2, [r7, #24]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	429a      	cmp	r2, r3
 800f440:	d201      	bcs.n	800f446 <mem_malloc+0x3a>
    return NULL;
 800f442:	2300      	movs	r3, #0
 800f444:	e0c5      	b.n	800f5d2 <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f446:	4866      	ldr	r0, [pc, #408]	@ (800f5e0 <mem_malloc+0x1d4>)
 800f448:	f001 fd74 	bl	8010f34 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f44c:	4b65      	ldr	r3, [pc, #404]	@ (800f5e4 <mem_malloc+0x1d8>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4618      	mov	r0, r3
 800f452:	f7ff fd0b 	bl	800ee6c <mem_to_ptr>
 800f456:	61f8      	str	r0, [r7, #28]
 800f458:	e0b0      	b.n	800f5bc <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f45a:	69f8      	ldr	r0, [r7, #28]
 800f45c:	f7ff fcf6 	bl	800ee4c <ptr_to_mem>
 800f460:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	7a1b      	ldrb	r3, [r3, #8]
 800f466:	2b00      	cmp	r3, #0
 800f468:	f040 80a2 	bne.w	800f5b0 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	1ad3      	subs	r3, r2, r3
 800f474:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800f476:	69ba      	ldr	r2, [r7, #24]
 800f478:	429a      	cmp	r2, r3
 800f47a:	f200 8099 	bhi.w	800f5b0 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	681a      	ldr	r2, [r3, #0]
 800f482:	69fb      	ldr	r3, [r7, #28]
 800f484:	1ad3      	subs	r3, r2, r3
 800f486:	f1a3 020c 	sub.w	r2, r3, #12
 800f48a:	69bb      	ldr	r3, [r7, #24]
 800f48c:	3318      	adds	r3, #24
 800f48e:	429a      	cmp	r2, r3
 800f490:	d331      	bcc.n	800f4f6 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f492:	69fa      	ldr	r2, [r7, #28]
 800f494:	69bb      	ldr	r3, [r7, #24]
 800f496:	4413      	add	r3, r2
 800f498:	330c      	adds	r3, #12
 800f49a:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	4a4f      	ldr	r2, [pc, #316]	@ (800f5dc <mem_malloc+0x1d0>)
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d106      	bne.n	800f4b2 <mem_malloc+0xa6>
 800f4a4:	4b50      	ldr	r3, [pc, #320]	@ (800f5e8 <mem_malloc+0x1dc>)
 800f4a6:	f240 3287 	movw	r2, #903	@ 0x387
 800f4aa:	4950      	ldr	r1, [pc, #320]	@ (800f5ec <mem_malloc+0x1e0>)
 800f4ac:	4850      	ldr	r0, [pc, #320]	@ (800f5f0 <mem_malloc+0x1e4>)
 800f4ae:	f008 f82d 	bl	801750c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f4b2:	68f8      	ldr	r0, [r7, #12]
 800f4b4:	f7ff fcca 	bl	800ee4c <ptr_to_mem>
 800f4b8:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	681a      	ldr	r2, [r3, #0]
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	69fa      	ldr	r2, [r7, #28]
 800f4cc:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	2201      	movs	r2, #1
 800f4d8:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	4a3f      	ldr	r2, [pc, #252]	@ (800f5dc <mem_malloc+0x1d0>)
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d00b      	beq.n	800f4fc <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7ff fcaf 	bl	800ee4c <ptr_to_mem>
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	6053      	str	r3, [r2, #4]
 800f4f4:	e002      	b.n	800f4fc <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f4fc:	4b39      	ldr	r3, [pc, #228]	@ (800f5e4 <mem_malloc+0x1d8>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	693a      	ldr	r2, [r7, #16]
 800f502:	429a      	cmp	r2, r3
 800f504:	d127      	bne.n	800f556 <mem_malloc+0x14a>
          struct mem *cur = lfree;
 800f506:	4b37      	ldr	r3, [pc, #220]	@ (800f5e4 <mem_malloc+0x1d8>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f50c:	e005      	b.n	800f51a <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	4618      	mov	r0, r3
 800f514:	f7ff fc9a 	bl	800ee4c <ptr_to_mem>
 800f518:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	7a1b      	ldrb	r3, [r3, #8]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d004      	beq.n	800f52c <mem_malloc+0x120>
 800f522:	4b34      	ldr	r3, [pc, #208]	@ (800f5f4 <mem_malloc+0x1e8>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	697a      	ldr	r2, [r7, #20]
 800f528:	429a      	cmp	r2, r3
 800f52a:	d1f0      	bne.n	800f50e <mem_malloc+0x102>
          }
          lfree = cur;
 800f52c:	4a2d      	ldr	r2, [pc, #180]	@ (800f5e4 <mem_malloc+0x1d8>)
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f532:	4b2c      	ldr	r3, [pc, #176]	@ (800f5e4 <mem_malloc+0x1d8>)
 800f534:	681a      	ldr	r2, [r3, #0]
 800f536:	4b2f      	ldr	r3, [pc, #188]	@ (800f5f4 <mem_malloc+0x1e8>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	d00b      	beq.n	800f556 <mem_malloc+0x14a>
 800f53e:	4b29      	ldr	r3, [pc, #164]	@ (800f5e4 <mem_malloc+0x1d8>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	7a1b      	ldrb	r3, [r3, #8]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d006      	beq.n	800f556 <mem_malloc+0x14a>
 800f548:	4b27      	ldr	r3, [pc, #156]	@ (800f5e8 <mem_malloc+0x1dc>)
 800f54a:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800f54e:	492a      	ldr	r1, [pc, #168]	@ (800f5f8 <mem_malloc+0x1ec>)
 800f550:	4827      	ldr	r0, [pc, #156]	@ (800f5f0 <mem_malloc+0x1e4>)
 800f552:	f007 ffdb 	bl	801750c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f556:	4822      	ldr	r0, [pc, #136]	@ (800f5e0 <mem_malloc+0x1d4>)
 800f558:	f001 fcfb 	bl	8010f52 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f55c:	693a      	ldr	r2, [r7, #16]
 800f55e:	69bb      	ldr	r3, [r7, #24]
 800f560:	4413      	add	r3, r2
 800f562:	330c      	adds	r3, #12
 800f564:	4a23      	ldr	r2, [pc, #140]	@ (800f5f4 <mem_malloc+0x1e8>)
 800f566:	6812      	ldr	r2, [r2, #0]
 800f568:	4293      	cmp	r3, r2
 800f56a:	d906      	bls.n	800f57a <mem_malloc+0x16e>
 800f56c:	4b1e      	ldr	r3, [pc, #120]	@ (800f5e8 <mem_malloc+0x1dc>)
 800f56e:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800f572:	4922      	ldr	r1, [pc, #136]	@ (800f5fc <mem_malloc+0x1f0>)
 800f574:	481e      	ldr	r0, [pc, #120]	@ (800f5f0 <mem_malloc+0x1e4>)
 800f576:	f007 ffc9 	bl	801750c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	f003 0303 	and.w	r3, r3, #3
 800f580:	2b00      	cmp	r3, #0
 800f582:	d006      	beq.n	800f592 <mem_malloc+0x186>
 800f584:	4b18      	ldr	r3, [pc, #96]	@ (800f5e8 <mem_malloc+0x1dc>)
 800f586:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800f58a:	491d      	ldr	r1, [pc, #116]	@ (800f600 <mem_malloc+0x1f4>)
 800f58c:	4818      	ldr	r0, [pc, #96]	@ (800f5f0 <mem_malloc+0x1e4>)
 800f58e:	f007 ffbd 	bl	801750c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	f003 0303 	and.w	r3, r3, #3
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d006      	beq.n	800f5aa <mem_malloc+0x19e>
 800f59c:	4b12      	ldr	r3, [pc, #72]	@ (800f5e8 <mem_malloc+0x1dc>)
 800f59e:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800f5a2:	4918      	ldr	r1, [pc, #96]	@ (800f604 <mem_malloc+0x1f8>)
 800f5a4:	4812      	ldr	r0, [pc, #72]	@ (800f5f0 <mem_malloc+0x1e4>)
 800f5a6:	f007 ffb1 	bl	801750c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	330c      	adds	r3, #12
 800f5ae:	e010      	b.n	800f5d2 <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 800f5b0:	69f8      	ldr	r0, [r7, #28]
 800f5b2:	f7ff fc4b 	bl	800ee4c <ptr_to_mem>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f5bc:	69ba      	ldr	r2, [r7, #24]
 800f5be:	4b07      	ldr	r3, [pc, #28]	@ (800f5dc <mem_malloc+0x1d0>)
 800f5c0:	1a9b      	subs	r3, r3, r2
 800f5c2:	69fa      	ldr	r2, [r7, #28]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	f4ff af48 	bcc.w	800f45a <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f5ca:	4805      	ldr	r0, [pc, #20]	@ (800f5e0 <mem_malloc+0x1d4>)
 800f5cc:	f001 fcc1 	bl	8010f52 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f5d0:	2300      	movs	r3, #0
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3720      	adds	r7, #32
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	0001ffe8 	.word	0x0001ffe8
 800f5e0:	24004920 	.word	0x24004920
 800f5e4:	24004924 	.word	0x24004924
 800f5e8:	08019260 	.word	0x08019260
 800f5ec:	08019450 	.word	0x08019450
 800f5f0:	080192d4 	.word	0x080192d4
 800f5f4:	2400491c 	.word	0x2400491c
 800f5f8:	08019464 	.word	0x08019464
 800f5fc:	08019480 	.word	0x08019480
 800f600:	080194b0 	.word	0x080194b0
 800f604:	080194e0 	.word	0x080194e0

0800f608 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f608:	b480      	push	{r7}
 800f60a:	b085      	sub	sp, #20
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	689b      	ldr	r3, [r3, #8]
 800f614:	2200      	movs	r2, #0
 800f616:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	3303      	adds	r3, #3
 800f61e:	f023 0303 	bic.w	r3, r3, #3
 800f622:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f624:	2300      	movs	r3, #0
 800f626:	60fb      	str	r3, [r7, #12]
 800f628:	e011      	b.n	800f64e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	689b      	ldr	r3, [r3, #8]
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	689b      	ldr	r3, [r3, #8]
 800f638:	68ba      	ldr	r2, [r7, #8]
 800f63a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	881b      	ldrh	r3, [r3, #0]
 800f640:	461a      	mov	r2, r3
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	4413      	add	r3, r2
 800f646:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	3301      	adds	r3, #1
 800f64c:	60fb      	str	r3, [r7, #12]
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	885b      	ldrh	r3, [r3, #2]
 800f652:	461a      	mov	r2, r3
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	4293      	cmp	r3, r2
 800f658:	dbe7      	blt.n	800f62a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f65a:	bf00      	nop
 800f65c:	bf00      	nop
 800f65e:	3714      	adds	r7, #20
 800f660:	46bd      	mov	sp, r7
 800f662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f666:	4770      	bx	lr

0800f668 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f66e:	2300      	movs	r3, #0
 800f670:	80fb      	strh	r3, [r7, #6]
 800f672:	e009      	b.n	800f688 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f674:	88fb      	ldrh	r3, [r7, #6]
 800f676:	4a08      	ldr	r2, [pc, #32]	@ (800f698 <memp_init+0x30>)
 800f678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7ff ffc3 	bl	800f608 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f682:	88fb      	ldrh	r3, [r7, #6]
 800f684:	3301      	adds	r3, #1
 800f686:	80fb      	strh	r3, [r7, #6]
 800f688:	88fb      	ldrh	r3, [r7, #6]
 800f68a:	2b0d      	cmp	r3, #13
 800f68c:	d9f2      	bls.n	800f674 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f68e:	bf00      	nop
 800f690:	bf00      	nop
 800f692:	3708      	adds	r7, #8
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	0801b8dc 	.word	0x0801b8dc

0800f69c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b084      	sub	sp, #16
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f6a4:	f001 fc88 	bl	8010fb8 <sys_arch_protect>
 800f6a8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	689b      	ldr	r3, [r3, #8]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d015      	beq.n	800f6e4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	689b      	ldr	r3, [r3, #8]
 800f6bc:	68ba      	ldr	r2, [r7, #8]
 800f6be:	6812      	ldr	r2, [r2, #0]
 800f6c0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	f003 0303 	and.w	r3, r3, #3
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d006      	beq.n	800f6da <do_memp_malloc_pool+0x3e>
 800f6cc:	4b09      	ldr	r3, [pc, #36]	@ (800f6f4 <do_memp_malloc_pool+0x58>)
 800f6ce:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800f6d2:	4909      	ldr	r1, [pc, #36]	@ (800f6f8 <do_memp_malloc_pool+0x5c>)
 800f6d4:	4809      	ldr	r0, [pc, #36]	@ (800f6fc <do_memp_malloc_pool+0x60>)
 800f6d6:	f007 ff19 	bl	801750c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f6da:	68f8      	ldr	r0, [r7, #12]
 800f6dc:	f001 fc7a 	bl	8010fd4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	e003      	b.n	800f6ec <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f6e4:	68f8      	ldr	r0, [r7, #12]
 800f6e6:	f001 fc75 	bl	8010fd4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f6ea:	2300      	movs	r3, #0
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3710      	adds	r7, #16
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}
 800f6f4:	08019504 	.word	0x08019504
 800f6f8:	08019560 	.word	0x08019560
 800f6fc:	08019584 	.word	0x08019584

0800f700 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d106      	bne.n	800f71c <memp_malloc_pool+0x1c>
 800f70e:	4b0a      	ldr	r3, [pc, #40]	@ (800f738 <memp_malloc_pool+0x38>)
 800f710:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800f714:	4909      	ldr	r1, [pc, #36]	@ (800f73c <memp_malloc_pool+0x3c>)
 800f716:	480a      	ldr	r0, [pc, #40]	@ (800f740 <memp_malloc_pool+0x40>)
 800f718:	f007 fef8 	bl	801750c <iprintf>
  if (desc == NULL) {
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d101      	bne.n	800f726 <memp_malloc_pool+0x26>
    return NULL;
 800f722:	2300      	movs	r3, #0
 800f724:	e003      	b.n	800f72e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f7ff ffb8 	bl	800f69c <do_memp_malloc_pool>
 800f72c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3708      	adds	r7, #8
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	08019504 	.word	0x08019504
 800f73c:	080195ac 	.word	0x080195ac
 800f740:	08019584 	.word	0x08019584

0800f744 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b084      	sub	sp, #16
 800f748:	af00      	add	r7, sp, #0
 800f74a:	4603      	mov	r3, r0
 800f74c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f74e:	79fb      	ldrb	r3, [r7, #7]
 800f750:	2b0d      	cmp	r3, #13
 800f752:	d908      	bls.n	800f766 <memp_malloc+0x22>
 800f754:	4b0a      	ldr	r3, [pc, #40]	@ (800f780 <memp_malloc+0x3c>)
 800f756:	f240 1257 	movw	r2, #343	@ 0x157
 800f75a:	490a      	ldr	r1, [pc, #40]	@ (800f784 <memp_malloc+0x40>)
 800f75c:	480a      	ldr	r0, [pc, #40]	@ (800f788 <memp_malloc+0x44>)
 800f75e:	f007 fed5 	bl	801750c <iprintf>
 800f762:	2300      	movs	r3, #0
 800f764:	e008      	b.n	800f778 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f766:	79fb      	ldrb	r3, [r7, #7]
 800f768:	4a08      	ldr	r2, [pc, #32]	@ (800f78c <memp_malloc+0x48>)
 800f76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f76e:	4618      	mov	r0, r3
 800f770:	f7ff ff94 	bl	800f69c <do_memp_malloc_pool>
 800f774:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f776:	68fb      	ldr	r3, [r7, #12]
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3710      	adds	r7, #16
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}
 800f780:	08019504 	.word	0x08019504
 800f784:	080195c0 	.word	0x080195c0
 800f788:	08019584 	.word	0x08019584
 800f78c:	0801b8dc 	.word	0x0801b8dc

0800f790 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	f003 0303 	and.w	r3, r3, #3
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d006      	beq.n	800f7b2 <do_memp_free_pool+0x22>
 800f7a4:	4b0d      	ldr	r3, [pc, #52]	@ (800f7dc <do_memp_free_pool+0x4c>)
 800f7a6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800f7aa:	490d      	ldr	r1, [pc, #52]	@ (800f7e0 <do_memp_free_pool+0x50>)
 800f7ac:	480d      	ldr	r0, [pc, #52]	@ (800f7e4 <do_memp_free_pool+0x54>)
 800f7ae:	f007 fead 	bl	801750c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f7b6:	f001 fbff 	bl	8010fb8 <sys_arch_protect>
 800f7ba:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	689b      	ldr	r3, [r3, #8]
 800f7c0:	681a      	ldr	r2, [r3, #0]
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	689b      	ldr	r3, [r3, #8]
 800f7ca:	68fa      	ldr	r2, [r7, #12]
 800f7cc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f7ce:	68b8      	ldr	r0, [r7, #8]
 800f7d0:	f001 fc00 	bl	8010fd4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f7d4:	bf00      	nop
 800f7d6:	3710      	adds	r7, #16
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}
 800f7dc:	08019504 	.word	0x08019504
 800f7e0:	080195e0 	.word	0x080195e0
 800f7e4:	08019584 	.word	0x08019584

0800f7e8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d106      	bne.n	800f806 <memp_free_pool+0x1e>
 800f7f8:	4b0a      	ldr	r3, [pc, #40]	@ (800f824 <memp_free_pool+0x3c>)
 800f7fa:	f240 1295 	movw	r2, #405	@ 0x195
 800f7fe:	490a      	ldr	r1, [pc, #40]	@ (800f828 <memp_free_pool+0x40>)
 800f800:	480a      	ldr	r0, [pc, #40]	@ (800f82c <memp_free_pool+0x44>)
 800f802:	f007 fe83 	bl	801750c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d007      	beq.n	800f81c <memp_free_pool+0x34>
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d004      	beq.n	800f81c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f812:	6839      	ldr	r1, [r7, #0]
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f7ff ffbb 	bl	800f790 <do_memp_free_pool>
 800f81a:	e000      	b.n	800f81e <memp_free_pool+0x36>
    return;
 800f81c:	bf00      	nop
}
 800f81e:	3708      	adds	r7, #8
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}
 800f824:	08019504 	.word	0x08019504
 800f828:	080195ac 	.word	0x080195ac
 800f82c:	08019584 	.word	0x08019584

0800f830 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	4603      	mov	r3, r0
 800f838:	6039      	str	r1, [r7, #0]
 800f83a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f83c:	79fb      	ldrb	r3, [r7, #7]
 800f83e:	2b0d      	cmp	r3, #13
 800f840:	d907      	bls.n	800f852 <memp_free+0x22>
 800f842:	4b0c      	ldr	r3, [pc, #48]	@ (800f874 <memp_free+0x44>)
 800f844:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800f848:	490b      	ldr	r1, [pc, #44]	@ (800f878 <memp_free+0x48>)
 800f84a:	480c      	ldr	r0, [pc, #48]	@ (800f87c <memp_free+0x4c>)
 800f84c:	f007 fe5e 	bl	801750c <iprintf>
 800f850:	e00c      	b.n	800f86c <memp_free+0x3c>

  if (mem == NULL) {
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d008      	beq.n	800f86a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f858:	79fb      	ldrb	r3, [r7, #7]
 800f85a:	4a09      	ldr	r2, [pc, #36]	@ (800f880 <memp_free+0x50>)
 800f85c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f860:	6839      	ldr	r1, [r7, #0]
 800f862:	4618      	mov	r0, r3
 800f864:	f7ff ff94 	bl	800f790 <do_memp_free_pool>
 800f868:	e000      	b.n	800f86c <memp_free+0x3c>
    return;
 800f86a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f86c:	3708      	adds	r7, #8
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}
 800f872:	bf00      	nop
 800f874:	08019504 	.word	0x08019504
 800f878:	08019600 	.word	0x08019600
 800f87c:	08019584 	.word	0x08019584
 800f880:	0801b8dc 	.word	0x0801b8dc

0800f884 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f884:	b480      	push	{r7}
 800f886:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f888:	bf00      	nop
 800f88a:	46bd      	mov	sp, r7
 800f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f890:	4770      	bx	lr
	...

0800f894 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b086      	sub	sp, #24
 800f898:	af00      	add	r7, sp, #0
 800f89a:	60f8      	str	r0, [r7, #12]
 800f89c:	60b9      	str	r1, [r7, #8]
 800f89e:	607a      	str	r2, [r7, #4]
 800f8a0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d108      	bne.n	800f8ba <netif_add+0x26>
 800f8a8:	4b5c      	ldr	r3, [pc, #368]	@ (800fa1c <netif_add+0x188>)
 800f8aa:	f240 1227 	movw	r2, #295	@ 0x127
 800f8ae:	495c      	ldr	r1, [pc, #368]	@ (800fa20 <netif_add+0x18c>)
 800f8b0:	485c      	ldr	r0, [pc, #368]	@ (800fa24 <netif_add+0x190>)
 800f8b2:	f007 fe2b 	bl	801750c <iprintf>
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	e0ac      	b.n	800fa14 <netif_add+0x180>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d108      	bne.n	800f8d2 <netif_add+0x3e>
 800f8c0:	4b56      	ldr	r3, [pc, #344]	@ (800fa1c <netif_add+0x188>)
 800f8c2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800f8c6:	4958      	ldr	r1, [pc, #352]	@ (800fa28 <netif_add+0x194>)
 800f8c8:	4856      	ldr	r0, [pc, #344]	@ (800fa24 <netif_add+0x190>)
 800f8ca:	f007 fe1f 	bl	801750c <iprintf>
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	e0a0      	b.n	800fa14 <netif_add+0x180>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d101      	bne.n	800f8dc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f8d8:	4b54      	ldr	r3, [pc, #336]	@ (800fa2c <netif_add+0x198>)
 800f8da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d101      	bne.n	800f8e6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f8e2:	4b52      	ldr	r3, [pc, #328]	@ (800fa2c <netif_add+0x198>)
 800f8e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d101      	bne.n	800f8f0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f8ec:	4b4f      	ldr	r3, [pc, #316]	@ (800fa2c <netif_add+0x198>)
 800f8ee:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	2200      	movs	r2, #0
 800f900:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	4a4a      	ldr	r2, [pc, #296]	@ (800fa30 <netif_add+0x19c>)
 800f906:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2200      	movs	r2, #0
 800f90c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  netif->flags = 0;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2200      	movs	r2, #0
 800f912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	3328      	adds	r3, #40	@ 0x28
 800f91a:	2204      	movs	r2, #4
 800f91c:	2100      	movs	r1, #0
 800f91e:	4618      	mov	r0, r3
 800f920:	f007 ff4c 	bl	80177bc <memset>
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2200      	movs	r2, #0
 800f928:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	2200      	movs	r2, #0
 800f92e:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	6a3a      	ldr	r2, [r7, #32]
 800f934:	625a      	str	r2, [r3, #36]	@ 0x24
  netif->num = netif_num;
 800f936:	4b3f      	ldr	r3, [pc, #252]	@ (800fa34 <netif_add+0x1a0>)
 800f938:	781a      	ldrb	r2, [r3, #0]
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  netif->input = input;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f944:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	687a      	ldr	r2, [r7, #4]
 800f94a:	68b9      	ldr	r1, [r7, #8]
 800f94c:	68f8      	ldr	r0, [r7, #12]
 800f94e:	f000 f91b 	bl	800fb88 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f954:	68f8      	ldr	r0, [r7, #12]
 800f956:	4798      	blx	r3
 800f958:	4603      	mov	r3, r0
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d001      	beq.n	800f962 <netif_add+0xce>
    return NULL;
 800f95e:	2300      	movs	r3, #0
 800f960:	e058      	b.n	800fa14 <netif_add+0x180>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f968:	2bff      	cmp	r3, #255	@ 0xff
 800f96a:	d103      	bne.n	800f974 <netif_add+0xe0>
        netif->num = 0;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	2200      	movs	r2, #0
 800f970:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      }
      num_netifs = 0;
 800f974:	2300      	movs	r3, #0
 800f976:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f978:	4b2f      	ldr	r3, [pc, #188]	@ (800fa38 <netif_add+0x1a4>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	617b      	str	r3, [r7, #20]
 800f97e:	e02b      	b.n	800f9d8 <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f980:	697a      	ldr	r2, [r7, #20]
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	429a      	cmp	r2, r3
 800f986:	d106      	bne.n	800f996 <netif_add+0x102>
 800f988:	4b24      	ldr	r3, [pc, #144]	@ (800fa1c <netif_add+0x188>)
 800f98a:	f240 128b 	movw	r2, #395	@ 0x18b
 800f98e:	492b      	ldr	r1, [pc, #172]	@ (800fa3c <netif_add+0x1a8>)
 800f990:	4824      	ldr	r0, [pc, #144]	@ (800fa24 <netif_add+0x190>)
 800f992:	f007 fdbb 	bl	801750c <iprintf>
        num_netifs++;
 800f996:	693b      	ldr	r3, [r7, #16]
 800f998:	3301      	adds	r3, #1
 800f99a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f99c:	693b      	ldr	r3, [r7, #16]
 800f99e:	2bff      	cmp	r3, #255	@ 0xff
 800f9a0:	dd06      	ble.n	800f9b0 <netif_add+0x11c>
 800f9a2:	4b1e      	ldr	r3, [pc, #120]	@ (800fa1c <netif_add+0x188>)
 800f9a4:	f240 128d 	movw	r2, #397	@ 0x18d
 800f9a8:	4925      	ldr	r1, [pc, #148]	@ (800fa40 <netif_add+0x1ac>)
 800f9aa:	481e      	ldr	r0, [pc, #120]	@ (800fa24 <netif_add+0x190>)
 800f9ac:	f007 fdae 	bl	801750c <iprintf>
        if (netif2->num == netif->num) {
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d108      	bne.n	800f9d2 <netif_add+0x13e>
          netif->num++;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	b2da      	uxtb	r2, r3
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          break;
 800f9d0:	e005      	b.n	800f9de <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	617b      	str	r3, [r7, #20]
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d1d0      	bne.n	800f980 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d1be      	bne.n	800f962 <netif_add+0xce>
  }
  if (netif->num == 254) {
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f9ea:	2bfe      	cmp	r3, #254	@ 0xfe
 800f9ec:	d103      	bne.n	800f9f6 <netif_add+0x162>
    netif_num = 0;
 800f9ee:	4b11      	ldr	r3, [pc, #68]	@ (800fa34 <netif_add+0x1a0>)
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	701a      	strb	r2, [r3, #0]
 800f9f4:	e006      	b.n	800fa04 <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f9fc:	3301      	adds	r3, #1
 800f9fe:	b2da      	uxtb	r2, r3
 800fa00:	4b0c      	ldr	r3, [pc, #48]	@ (800fa34 <netif_add+0x1a0>)
 800fa02:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800fa04:	4b0c      	ldr	r3, [pc, #48]	@ (800fa38 <netif_add+0x1a4>)
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fa0c:	4a0a      	ldr	r2, [pc, #40]	@ (800fa38 <netif_add+0x1a4>)
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800fa12:	68fb      	ldr	r3, [r7, #12]
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3718      	adds	r7, #24
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}
 800fa1c:	0801961c 	.word	0x0801961c
 800fa20:	080196dc 	.word	0x080196dc
 800fa24:	08019698 	.word	0x08019698
 800fa28:	080196f8 	.word	0x080196f8
 800fa2c:	0801b82c 	.word	0x0801b82c
 800fa30:	0800fe8b 	.word	0x0800fe8b
 800fa34:	24007b68 	.word	0x24007b68
 800fa38:	24007b60 	.word	0x24007b60
 800fa3c:	0801971c 	.word	0x0801971c
 800fa40:	08019730 	.word	0x08019730

0800fa44 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b082      	sub	sp, #8
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800fa4e:	6839      	ldr	r1, [r7, #0]
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f002 fe19 	bl	8012688 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800fa56:	6839      	ldr	r1, [r7, #0]
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f007 fc27 	bl	80172ac <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800fa5e:	bf00      	nop
 800fa60:	3708      	adds	r7, #8
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}
	...

0800fa68 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b086      	sub	sp, #24
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	60f8      	str	r0, [r7, #12]
 800fa70:	60b9      	str	r1, [r7, #8]
 800fa72:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d106      	bne.n	800fa88 <netif_do_set_ipaddr+0x20>
 800fa7a:	4b21      	ldr	r3, [pc, #132]	@ (800fb00 <netif_do_set_ipaddr+0x98>)
 800fa7c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800fa80:	4920      	ldr	r1, [pc, #128]	@ (800fb04 <netif_do_set_ipaddr+0x9c>)
 800fa82:	4821      	ldr	r0, [pc, #132]	@ (800fb08 <netif_do_set_ipaddr+0xa0>)
 800fa84:	f007 fd42 	bl	801750c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d106      	bne.n	800fa9c <netif_do_set_ipaddr+0x34>
 800fa8e:	4b1c      	ldr	r3, [pc, #112]	@ (800fb00 <netif_do_set_ipaddr+0x98>)
 800fa90:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800fa94:	491b      	ldr	r1, [pc, #108]	@ (800fb04 <netif_do_set_ipaddr+0x9c>)
 800fa96:	481c      	ldr	r0, [pc, #112]	@ (800fb08 <netif_do_set_ipaddr+0xa0>)
 800fa98:	f007 fd38 	bl	801750c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	681a      	ldr	r2, [r3, #0]
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	3304      	adds	r3, #4
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d024      	beq.n	800faf4 <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	3304      	adds	r3, #4
 800fab4:	681a      	ldr	r2, [r3, #0]
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800faba:	f107 0314 	add.w	r3, r7, #20
 800fabe:	4619      	mov	r1, r3
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f7ff ffbf 	bl	800fa44 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d002      	beq.n	800fad2 <netif_do_set_ipaddr+0x6a>
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	e000      	b.n	800fad4 <netif_do_set_ipaddr+0x6c>
 800fad2:	2300      	movs	r3, #0
 800fad4:	68fa      	ldr	r2, [r7, #12]
 800fad6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fad8:	2101      	movs	r1, #1
 800fada:	68f8      	ldr	r0, [r7, #12]
 800fadc:	f000 f8e2 	bl	800fca4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	69db      	ldr	r3, [r3, #28]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d003      	beq.n	800faf0 <netif_do_set_ipaddr+0x88>
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	69db      	ldr	r3, [r3, #28]
 800faec:	68f8      	ldr	r0, [r7, #12]
 800faee:	4798      	blx	r3
    return 1; /* address changed */
 800faf0:	2301      	movs	r3, #1
 800faf2:	e000      	b.n	800faf6 <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 800faf4:	2300      	movs	r3, #0
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3718      	adds	r7, #24
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	0801961c 	.word	0x0801961c
 800fb04:	08019760 	.word	0x08019760
 800fb08:	08019698 	.word	0x08019698

0800fb0c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b085      	sub	sp, #20
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	681a      	ldr	r2, [r3, #0]
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	3308      	adds	r3, #8
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d00a      	beq.n	800fb3c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d002      	beq.n	800fb32 <netif_do_set_netmask+0x26>
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	e000      	b.n	800fb34 <netif_do_set_netmask+0x28>
 800fb32:	2300      	movs	r3, #0
 800fb34:	68fa      	ldr	r2, [r7, #12]
 800fb36:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fb38:	2301      	movs	r3, #1
 800fb3a:	e000      	b.n	800fb3e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fb3c:	2300      	movs	r3, #0
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3714      	adds	r7, #20
 800fb42:	46bd      	mov	sp, r7
 800fb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb48:	4770      	bx	lr

0800fb4a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fb4a:	b480      	push	{r7}
 800fb4c:	b085      	sub	sp, #20
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	60f8      	str	r0, [r7, #12]
 800fb52:	60b9      	str	r1, [r7, #8]
 800fb54:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fb56:	68bb      	ldr	r3, [r7, #8]
 800fb58:	681a      	ldr	r2, [r3, #0]
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	330c      	adds	r3, #12
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d00a      	beq.n	800fb7a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d002      	beq.n	800fb70 <netif_do_set_gw+0x26>
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	e000      	b.n	800fb72 <netif_do_set_gw+0x28>
 800fb70:	2300      	movs	r3, #0
 800fb72:	68fa      	ldr	r2, [r7, #12]
 800fb74:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fb76:	2301      	movs	r3, #1
 800fb78:	e000      	b.n	800fb7c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fb7a:	2300      	movs	r3, #0
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3714      	adds	r7, #20
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr

0800fb88 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b088      	sub	sp, #32
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	607a      	str	r2, [r7, #4]
 800fb94:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fb96:	2300      	movs	r3, #0
 800fb98:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d101      	bne.n	800fba8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fba4:	4b1c      	ldr	r3, [pc, #112]	@ (800fc18 <netif_set_addr+0x90>)
 800fba6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d101      	bne.n	800fbb2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800fbae:	4b1a      	ldr	r3, [pc, #104]	@ (800fc18 <netif_set_addr+0x90>)
 800fbb0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d101      	bne.n	800fbbc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800fbb8:	4b17      	ldr	r3, [pc, #92]	@ (800fc18 <netif_set_addr+0x90>)
 800fbba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d003      	beq.n	800fbca <netif_set_addr+0x42>
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d101      	bne.n	800fbce <netif_set_addr+0x46>
 800fbca:	2301      	movs	r3, #1
 800fbcc:	e000      	b.n	800fbd0 <netif_set_addr+0x48>
 800fbce:	2300      	movs	r3, #0
 800fbd0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d006      	beq.n	800fbe6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fbd8:	f107 0310 	add.w	r3, r7, #16
 800fbdc:	461a      	mov	r2, r3
 800fbde:	68b9      	ldr	r1, [r7, #8]
 800fbe0:	68f8      	ldr	r0, [r7, #12]
 800fbe2:	f7ff ff41 	bl	800fa68 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fbe6:	69fa      	ldr	r2, [r7, #28]
 800fbe8:	6879      	ldr	r1, [r7, #4]
 800fbea:	68f8      	ldr	r0, [r7, #12]
 800fbec:	f7ff ff8e 	bl	800fb0c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fbf0:	69ba      	ldr	r2, [r7, #24]
 800fbf2:	6839      	ldr	r1, [r7, #0]
 800fbf4:	68f8      	ldr	r0, [r7, #12]
 800fbf6:	f7ff ffa8 	bl	800fb4a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d106      	bne.n	800fc0e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fc00:	f107 0310 	add.w	r3, r7, #16
 800fc04:	461a      	mov	r2, r3
 800fc06:	68b9      	ldr	r1, [r7, #8]
 800fc08:	68f8      	ldr	r0, [r7, #12]
 800fc0a:	f7ff ff2d 	bl	800fa68 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fc0e:	bf00      	nop
 800fc10:	3720      	adds	r7, #32
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	0801b82c 	.word	0x0801b82c

0800fc1c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b083      	sub	sp, #12
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fc24:	4a04      	ldr	r2, [pc, #16]	@ (800fc38 <netif_set_default+0x1c>)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fc2a:	bf00      	nop
 800fc2c:	370c      	adds	r7, #12
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc34:	4770      	bx	lr
 800fc36:	bf00      	nop
 800fc38:	24007b64 	.word	0x24007b64

0800fc3c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b082      	sub	sp, #8
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d107      	bne.n	800fc5a <netif_set_up+0x1e>
 800fc4a:	4b13      	ldr	r3, [pc, #76]	@ (800fc98 <netif_set_up+0x5c>)
 800fc4c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800fc50:	4912      	ldr	r1, [pc, #72]	@ (800fc9c <netif_set_up+0x60>)
 800fc52:	4813      	ldr	r0, [pc, #76]	@ (800fca0 <netif_set_up+0x64>)
 800fc54:	f007 fc5a 	bl	801750c <iprintf>
 800fc58:	e01b      	b.n	800fc92 <netif_set_up+0x56>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800fc60:	f003 0301 	and.w	r3, r3, #1
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d114      	bne.n	800fc92 <netif_set_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800fc6e:	f043 0301 	orr.w	r3, r3, #1
 800fc72:	b2da      	uxtb	r2, r3
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	69db      	ldr	r3, [r3, #28]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d003      	beq.n	800fc8a <netif_set_up+0x4e>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	69db      	ldr	r3, [r3, #28]
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	4798      	blx	r3
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fc8a:	2103      	movs	r1, #3
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f000 f809 	bl	800fca4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}
 800fc98:	0801961c 	.word	0x0801961c
 800fc9c:	080197d0 	.word	0x080197d0
 800fca0:	08019698 	.word	0x08019698

0800fca4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b082      	sub	sp, #8
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	460b      	mov	r3, r1
 800fcae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d106      	bne.n	800fcc4 <netif_issue_reports+0x20>
 800fcb6:	4b18      	ldr	r3, [pc, #96]	@ (800fd18 <netif_issue_reports+0x74>)
 800fcb8:	f240 326d 	movw	r2, #877	@ 0x36d
 800fcbc:	4917      	ldr	r1, [pc, #92]	@ (800fd1c <netif_issue_reports+0x78>)
 800fcbe:	4818      	ldr	r0, [pc, #96]	@ (800fd20 <netif_issue_reports+0x7c>)
 800fcc0:	f007 fc24 	bl	801750c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800fcca:	f003 0304 	and.w	r3, r3, #4
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d01e      	beq.n	800fd10 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800fcd8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d017      	beq.n	800fd10 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fce0:	78fb      	ldrb	r3, [r7, #3]
 800fce2:	f003 0301 	and.w	r3, r3, #1
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d013      	beq.n	800fd12 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	3304      	adds	r3, #4
 800fcee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d00e      	beq.n	800fd12 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800fcfa:	f003 0308 	and.w	r3, r3, #8
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d007      	beq.n	800fd12 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	3304      	adds	r3, #4
 800fd06:	4619      	mov	r1, r3
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f7fd fb69 	bl	800d3e0 <etharp_request>
 800fd0e:	e000      	b.n	800fd12 <netif_issue_reports+0x6e>
    return;
 800fd10:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fd12:	3708      	adds	r7, #8
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}
 800fd18:	0801961c 	.word	0x0801961c
 800fd1c:	080197ec 	.word	0x080197ec
 800fd20:	08019698 	.word	0x08019698

0800fd24 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d107      	bne.n	800fd42 <netif_set_down+0x1e>
 800fd32:	4b16      	ldr	r3, [pc, #88]	@ (800fd8c <netif_set_down+0x68>)
 800fd34:	f240 329b 	movw	r2, #923	@ 0x39b
 800fd38:	4915      	ldr	r1, [pc, #84]	@ (800fd90 <netif_set_down+0x6c>)
 800fd3a:	4816      	ldr	r0, [pc, #88]	@ (800fd94 <netif_set_down+0x70>)
 800fd3c:	f007 fbe6 	bl	801750c <iprintf>
 800fd40:	e021      	b.n	800fd86 <netif_set_down+0x62>

  if (netif->flags & NETIF_FLAG_UP) {
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800fd48:	f003 0301 	and.w	r3, r3, #1
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d01a      	beq.n	800fd86 <netif_set_down+0x62>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800fd56:	f023 0301 	bic.w	r3, r3, #1
 800fd5a:	b2da      	uxtb	r2, r3
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800fd68:	f003 0308 	and.w	r3, r3, #8
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d002      	beq.n	800fd76 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f7fc feef 	bl	800cb54 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	69db      	ldr	r3, [r3, #28]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d003      	beq.n	800fd86 <netif_set_down+0x62>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	69db      	ldr	r3, [r3, #28]
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	4798      	blx	r3
  }
}
 800fd86:	3708      	adds	r7, #8
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	0801961c 	.word	0x0801961c
 800fd90:	08019810 	.word	0x08019810
 800fd94:	08019698 	.word	0x08019698

0800fd98 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d107      	bne.n	800fdb6 <netif_set_link_up+0x1e>
 800fda6:	4b15      	ldr	r3, [pc, #84]	@ (800fdfc <netif_set_link_up+0x64>)
 800fda8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800fdac:	4914      	ldr	r1, [pc, #80]	@ (800fe00 <netif_set_link_up+0x68>)
 800fdae:	4815      	ldr	r0, [pc, #84]	@ (800fe04 <netif_set_link_up+0x6c>)
 800fdb0:	f007 fbac 	bl	801750c <iprintf>
 800fdb4:	e01e      	b.n	800fdf4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800fdbc:	f003 0304 	and.w	r3, r3, #4
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d117      	bne.n	800fdf4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800fdca:	f043 0304 	orr.w	r3, r3, #4
 800fdce:	b2da      	uxtb	r2, r3
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	f7fa fe14 	bl	800aa04 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fddc:	2103      	movs	r1, #3
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f7ff ff60 	bl	800fca4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6a1b      	ldr	r3, [r3, #32]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d003      	beq.n	800fdf4 <netif_set_link_up+0x5c>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6a1b      	ldr	r3, [r3, #32]
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fdf4:	3708      	adds	r7, #8
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
 800fdfa:	bf00      	nop
 800fdfc:	0801961c 	.word	0x0801961c
 800fe00:	08019830 	.word	0x08019830
 800fe04:	08019698 	.word	0x08019698

0800fe08 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d107      	bne.n	800fe26 <netif_set_link_down+0x1e>
 800fe16:	4b11      	ldr	r3, [pc, #68]	@ (800fe5c <netif_set_link_down+0x54>)
 800fe18:	f240 4206 	movw	r2, #1030	@ 0x406
 800fe1c:	4910      	ldr	r1, [pc, #64]	@ (800fe60 <netif_set_link_down+0x58>)
 800fe1e:	4811      	ldr	r0, [pc, #68]	@ (800fe64 <netif_set_link_down+0x5c>)
 800fe20:	f007 fb74 	bl	801750c <iprintf>
 800fe24:	e017      	b.n	800fe56 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800fe2c:	f003 0304 	and.w	r3, r3, #4
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d010      	beq.n	800fe56 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800fe3a:	f023 0304 	bic.w	r3, r3, #4
 800fe3e:	b2da      	uxtb	r2, r3
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    NETIF_LINK_CALLBACK(netif);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	6a1b      	ldr	r3, [r3, #32]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d003      	beq.n	800fe56 <netif_set_link_down+0x4e>
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6a1b      	ldr	r3, [r3, #32]
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fe56:	3708      	adds	r7, #8
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}
 800fe5c:	0801961c 	.word	0x0801961c
 800fe60:	08019854 	.word	0x08019854
 800fe64:	08019698 	.word	0x08019698

0800fe68 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b083      	sub	sp, #12
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d002      	beq.n	800fe7e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	683a      	ldr	r2, [r7, #0]
 800fe7c:	621a      	str	r2, [r3, #32]
  }
}
 800fe7e:	bf00      	nop
 800fe80:	370c      	adds	r7, #12
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr

0800fe8a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800fe8a:	b480      	push	{r7}
 800fe8c:	b085      	sub	sp, #20
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	60f8      	str	r0, [r7, #12]
 800fe92:	60b9      	str	r1, [r7, #8]
 800fe94:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fe96:	f06f 030b 	mvn.w	r3, #11
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3714      	adds	r7, #20
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea4:	4770      	bx	lr
	...

0800fea8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b085      	sub	sp, #20
 800feac:	af00      	add	r7, sp, #0
 800feae:	4603      	mov	r3, r0
 800feb0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800feb2:	79fb      	ldrb	r3, [r7, #7]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d013      	beq.n	800fee0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800feb8:	4b0d      	ldr	r3, [pc, #52]	@ (800fef0 <netif_get_by_index+0x48>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	60fb      	str	r3, [r7, #12]
 800febe:	e00c      	b.n	800feda <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fec6:	3301      	adds	r3, #1
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	79fa      	ldrb	r2, [r7, #7]
 800fecc:	429a      	cmp	r2, r3
 800fece:	d101      	bne.n	800fed4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	e006      	b.n	800fee2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	60fb      	str	r3, [r7, #12]
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d1ef      	bne.n	800fec0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800fee0:	2300      	movs	r3, #0
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	3714      	adds	r7, #20
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr
 800feee:	bf00      	nop
 800fef0:	24007b60 	.word	0x24007b60

0800fef4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800fefa:	f001 f85d 	bl	8010fb8 <sys_arch_protect>
 800fefe:	6038      	str	r0, [r7, #0]
 800ff00:	4b0d      	ldr	r3, [pc, #52]	@ (800ff38 <pbuf_free_ooseq+0x44>)
 800ff02:	2200      	movs	r2, #0
 800ff04:	701a      	strb	r2, [r3, #0]
 800ff06:	6838      	ldr	r0, [r7, #0]
 800ff08:	f001 f864 	bl	8010fd4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ff0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ff3c <pbuf_free_ooseq+0x48>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	607b      	str	r3, [r7, #4]
 800ff12:	e00a      	b.n	800ff2a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d003      	beq.n	800ff24 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f002 fbf1 	bl	8012704 <tcp_free_ooseq>
      return;
 800ff22:	e005      	b.n	800ff30 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	68db      	ldr	r3, [r3, #12]
 800ff28:	607b      	str	r3, [r7, #4]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d1f1      	bne.n	800ff14 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ff30:	3708      	adds	r7, #8
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}
 800ff36:	bf00      	nop
 800ff38:	24007b69 	.word	0x24007b69
 800ff3c:	24007b7c 	.word	0x24007b7c

0800ff40 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ff48:	f7ff ffd4 	bl	800fef4 <pbuf_free_ooseq>
}
 800ff4c:	bf00      	nop
 800ff4e:	3708      	adds	r7, #8
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}

0800ff54 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b082      	sub	sp, #8
 800ff58:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ff5a:	f001 f82d 	bl	8010fb8 <sys_arch_protect>
 800ff5e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ff60:	4b0f      	ldr	r3, [pc, #60]	@ (800ffa0 <pbuf_pool_is_empty+0x4c>)
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ff66:	4b0e      	ldr	r3, [pc, #56]	@ (800ffa0 <pbuf_pool_is_empty+0x4c>)
 800ff68:	2201      	movs	r2, #1
 800ff6a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f001 f831 	bl	8010fd4 <sys_arch_unprotect>

  if (!queued) {
 800ff72:	78fb      	ldrb	r3, [r7, #3]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d10f      	bne.n	800ff98 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ff78:	2100      	movs	r1, #0
 800ff7a:	480a      	ldr	r0, [pc, #40]	@ (800ffa4 <pbuf_pool_is_empty+0x50>)
 800ff7c:	f006 fa86 	bl	801648c <tcpip_try_callback>
 800ff80:	4603      	mov	r3, r0
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d008      	beq.n	800ff98 <pbuf_pool_is_empty+0x44>
 800ff86:	f001 f817 	bl	8010fb8 <sys_arch_protect>
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	4b04      	ldr	r3, [pc, #16]	@ (800ffa0 <pbuf_pool_is_empty+0x4c>)
 800ff8e:	2200      	movs	r2, #0
 800ff90:	701a      	strb	r2, [r3, #0]
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f001 f81e 	bl	8010fd4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ff98:	bf00      	nop
 800ff9a:	3708      	adds	r7, #8
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	24007b69 	.word	0x24007b69
 800ffa4:	0800ff41 	.word	0x0800ff41

0800ffa8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ffa8:	b480      	push	{r7}
 800ffaa:	b085      	sub	sp, #20
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	60f8      	str	r0, [r7, #12]
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	4611      	mov	r1, r2
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	460b      	mov	r3, r1
 800ffb8:	80fb      	strh	r3, [r7, #6]
 800ffba:	4613      	mov	r3, r2
 800ffbc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	68ba      	ldr	r2, [r7, #8]
 800ffc8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	88fa      	ldrh	r2, [r7, #6]
 800ffce:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	88ba      	ldrh	r2, [r7, #4]
 800ffd4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ffd6:	8b3b      	ldrh	r3, [r7, #24]
 800ffd8:	b2da      	uxtb	r2, r3
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	7f3a      	ldrb	r2, [r7, #28]
 800ffe2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	2201      	movs	r2, #1
 800ffe8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	2200      	movs	r2, #0
 800ffee:	73da      	strb	r2, [r3, #15]
}
 800fff0:	bf00      	nop
 800fff2:	3714      	adds	r7, #20
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b08c      	sub	sp, #48	@ 0x30
 8010000:	af02      	add	r7, sp, #8
 8010002:	4603      	mov	r3, r0
 8010004:	71fb      	strb	r3, [r7, #7]
 8010006:	460b      	mov	r3, r1
 8010008:	80bb      	strh	r3, [r7, #4]
 801000a:	4613      	mov	r3, r2
 801000c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801000e:	79fb      	ldrb	r3, [r7, #7]
 8010010:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010012:	887b      	ldrh	r3, [r7, #2]
 8010014:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8010018:	d07f      	beq.n	801011a <pbuf_alloc+0x11e>
 801001a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801001e:	f300 80c7 	bgt.w	80101b0 <pbuf_alloc+0x1b4>
 8010022:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8010026:	d010      	beq.n	801004a <pbuf_alloc+0x4e>
 8010028:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801002c:	f300 80c0 	bgt.w	80101b0 <pbuf_alloc+0x1b4>
 8010030:	2b01      	cmp	r3, #1
 8010032:	d002      	beq.n	801003a <pbuf_alloc+0x3e>
 8010034:	2b41      	cmp	r3, #65	@ 0x41
 8010036:	f040 80bb 	bne.w	80101b0 <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801003a:	887a      	ldrh	r2, [r7, #2]
 801003c:	88bb      	ldrh	r3, [r7, #4]
 801003e:	4619      	mov	r1, r3
 8010040:	2000      	movs	r0, #0
 8010042:	f000 f8d1 	bl	80101e8 <pbuf_alloc_reference>
 8010046:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8010048:	e0bc      	b.n	80101c4 <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801004a:	2300      	movs	r3, #0
 801004c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 801004e:	2300      	movs	r3, #0
 8010050:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010052:	88bb      	ldrh	r3, [r7, #4]
 8010054:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010056:	200d      	movs	r0, #13
 8010058:	f7ff fb74 	bl	800f744 <memp_malloc>
 801005c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d109      	bne.n	8010078 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010064:	f7ff ff76 	bl	800ff54 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801006a:	2b00      	cmp	r3, #0
 801006c:	d002      	beq.n	8010074 <pbuf_alloc+0x78>
            pbuf_free(p);
 801006e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010070:	f000 faa6 	bl	80105c0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010074:	2300      	movs	r3, #0
 8010076:	e0a6      	b.n	80101c6 <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010078:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801007a:	3303      	adds	r3, #3
 801007c:	b29b      	uxth	r3, r3
 801007e:	f023 0303 	bic.w	r3, r3, #3
 8010082:	b29b      	uxth	r3, r3
 8010084:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8010088:	b29b      	uxth	r3, r3
 801008a:	8b7a      	ldrh	r2, [r7, #26]
 801008c:	4293      	cmp	r3, r2
 801008e:	bf28      	it	cs
 8010090:	4613      	movcs	r3, r2
 8010092:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010094:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010096:	3310      	adds	r3, #16
 8010098:	693a      	ldr	r2, [r7, #16]
 801009a:	4413      	add	r3, r2
 801009c:	3303      	adds	r3, #3
 801009e:	f023 0303 	bic.w	r3, r3, #3
 80100a2:	4618      	mov	r0, r3
 80100a4:	89f9      	ldrh	r1, [r7, #14]
 80100a6:	8b7a      	ldrh	r2, [r7, #26]
 80100a8:	2300      	movs	r3, #0
 80100aa:	9301      	str	r3, [sp, #4]
 80100ac:	887b      	ldrh	r3, [r7, #2]
 80100ae:	9300      	str	r3, [sp, #0]
 80100b0:	460b      	mov	r3, r1
 80100b2:	4601      	mov	r1, r0
 80100b4:	6938      	ldr	r0, [r7, #16]
 80100b6:	f7ff ff77 	bl	800ffa8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	f003 0303 	and.w	r3, r3, #3
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d006      	beq.n	80100d4 <pbuf_alloc+0xd8>
 80100c6:	4b42      	ldr	r3, [pc, #264]	@ (80101d0 <pbuf_alloc+0x1d4>)
 80100c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80100cc:	4941      	ldr	r1, [pc, #260]	@ (80101d4 <pbuf_alloc+0x1d8>)
 80100ce:	4842      	ldr	r0, [pc, #264]	@ (80101d8 <pbuf_alloc+0x1dc>)
 80100d0:	f007 fa1c 	bl	801750c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80100d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80100d6:	3303      	adds	r3, #3
 80100d8:	f023 0303 	bic.w	r3, r3, #3
 80100dc:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80100e0:	d106      	bne.n	80100f0 <pbuf_alloc+0xf4>
 80100e2:	4b3b      	ldr	r3, [pc, #236]	@ (80101d0 <pbuf_alloc+0x1d4>)
 80100e4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80100e8:	493c      	ldr	r1, [pc, #240]	@ (80101dc <pbuf_alloc+0x1e0>)
 80100ea:	483b      	ldr	r0, [pc, #236]	@ (80101d8 <pbuf_alloc+0x1dc>)
 80100ec:	f007 fa0e 	bl	801750c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80100f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d102      	bne.n	80100fc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80100fa:	e002      	b.n	8010102 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80100fc:	69fb      	ldr	r3, [r7, #28]
 80100fe:	693a      	ldr	r2, [r7, #16]
 8010100:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010106:	8b7a      	ldrh	r2, [r7, #26]
 8010108:	89fb      	ldrh	r3, [r7, #14]
 801010a:	1ad3      	subs	r3, r2, r3
 801010c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801010e:	2300      	movs	r3, #0
 8010110:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8010112:	8b7b      	ldrh	r3, [r7, #26]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d19e      	bne.n	8010056 <pbuf_alloc+0x5a>
      break;
 8010118:	e054      	b.n	80101c4 <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801011a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801011c:	3303      	adds	r3, #3
 801011e:	b29b      	uxth	r3, r3
 8010120:	f023 0303 	bic.w	r3, r3, #3
 8010124:	b29a      	uxth	r2, r3
 8010126:	88bb      	ldrh	r3, [r7, #4]
 8010128:	3303      	adds	r3, #3
 801012a:	b29b      	uxth	r3, r3
 801012c:	f023 0303 	bic.w	r3, r3, #3
 8010130:	b29b      	uxth	r3, r3
 8010132:	4413      	add	r3, r2
 8010134:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010136:	8b3b      	ldrh	r3, [r7, #24]
 8010138:	3310      	adds	r3, #16
 801013a:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801013c:	8b3a      	ldrh	r2, [r7, #24]
 801013e:	88bb      	ldrh	r3, [r7, #4]
 8010140:	3303      	adds	r3, #3
 8010142:	f023 0303 	bic.w	r3, r3, #3
 8010146:	429a      	cmp	r2, r3
 8010148:	d306      	bcc.n	8010158 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801014a:	88bb      	ldrh	r3, [r7, #4]
 801014c:	3303      	adds	r3, #3
 801014e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010152:	697a      	ldr	r2, [r7, #20]
 8010154:	429a      	cmp	r2, r3
 8010156:	d201      	bcs.n	801015c <pbuf_alloc+0x160>
        return NULL;
 8010158:	2300      	movs	r3, #0
 801015a:	e034      	b.n	80101c6 <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801015c:	6978      	ldr	r0, [r7, #20]
 801015e:	f7ff f955 	bl	800f40c <mem_malloc>
 8010162:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8010164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010166:	2b00      	cmp	r3, #0
 8010168:	d101      	bne.n	801016e <pbuf_alloc+0x172>
        return NULL;
 801016a:	2300      	movs	r3, #0
 801016c:	e02b      	b.n	80101c6 <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801016e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010170:	3310      	adds	r3, #16
 8010172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010174:	4413      	add	r3, r2
 8010176:	3303      	adds	r3, #3
 8010178:	f023 0303 	bic.w	r3, r3, #3
 801017c:	4618      	mov	r0, r3
 801017e:	88b9      	ldrh	r1, [r7, #4]
 8010180:	88ba      	ldrh	r2, [r7, #4]
 8010182:	2300      	movs	r3, #0
 8010184:	9301      	str	r3, [sp, #4]
 8010186:	887b      	ldrh	r3, [r7, #2]
 8010188:	9300      	str	r3, [sp, #0]
 801018a:	460b      	mov	r3, r1
 801018c:	4601      	mov	r1, r0
 801018e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010190:	f7ff ff0a 	bl	800ffa8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010196:	685b      	ldr	r3, [r3, #4]
 8010198:	f003 0303 	and.w	r3, r3, #3
 801019c:	2b00      	cmp	r3, #0
 801019e:	d010      	beq.n	80101c2 <pbuf_alloc+0x1c6>
 80101a0:	4b0b      	ldr	r3, [pc, #44]	@ (80101d0 <pbuf_alloc+0x1d4>)
 80101a2:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80101a6:	490e      	ldr	r1, [pc, #56]	@ (80101e0 <pbuf_alloc+0x1e4>)
 80101a8:	480b      	ldr	r0, [pc, #44]	@ (80101d8 <pbuf_alloc+0x1dc>)
 80101aa:	f007 f9af 	bl	801750c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80101ae:	e008      	b.n	80101c2 <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80101b0:	4b07      	ldr	r3, [pc, #28]	@ (80101d0 <pbuf_alloc+0x1d4>)
 80101b2:	f240 1227 	movw	r2, #295	@ 0x127
 80101b6:	490b      	ldr	r1, [pc, #44]	@ (80101e4 <pbuf_alloc+0x1e8>)
 80101b8:	4807      	ldr	r0, [pc, #28]	@ (80101d8 <pbuf_alloc+0x1dc>)
 80101ba:	f007 f9a7 	bl	801750c <iprintf>
      return NULL;
 80101be:	2300      	movs	r3, #0
 80101c0:	e001      	b.n	80101c6 <pbuf_alloc+0x1ca>
      break;
 80101c2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80101c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80101c6:	4618      	mov	r0, r3
 80101c8:	3728      	adds	r7, #40	@ 0x28
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}
 80101ce:	bf00      	nop
 80101d0:	08019878 	.word	0x08019878
 80101d4:	080198d4 	.word	0x080198d4
 80101d8:	08019904 	.word	0x08019904
 80101dc:	0801992c 	.word	0x0801992c
 80101e0:	08019960 	.word	0x08019960
 80101e4:	0801998c 	.word	0x0801998c

080101e8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b086      	sub	sp, #24
 80101ec:	af02      	add	r7, sp, #8
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	460b      	mov	r3, r1
 80101f2:	807b      	strh	r3, [r7, #2]
 80101f4:	4613      	mov	r3, r2
 80101f6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80101f8:	883b      	ldrh	r3, [r7, #0]
 80101fa:	2b41      	cmp	r3, #65	@ 0x41
 80101fc:	d009      	beq.n	8010212 <pbuf_alloc_reference+0x2a>
 80101fe:	883b      	ldrh	r3, [r7, #0]
 8010200:	2b01      	cmp	r3, #1
 8010202:	d006      	beq.n	8010212 <pbuf_alloc_reference+0x2a>
 8010204:	4b0f      	ldr	r3, [pc, #60]	@ (8010244 <pbuf_alloc_reference+0x5c>)
 8010206:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801020a:	490f      	ldr	r1, [pc, #60]	@ (8010248 <pbuf_alloc_reference+0x60>)
 801020c:	480f      	ldr	r0, [pc, #60]	@ (801024c <pbuf_alloc_reference+0x64>)
 801020e:	f007 f97d 	bl	801750c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010212:	200c      	movs	r0, #12
 8010214:	f7ff fa96 	bl	800f744 <memp_malloc>
 8010218:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d101      	bne.n	8010224 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010220:	2300      	movs	r3, #0
 8010222:	e00b      	b.n	801023c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010224:	8879      	ldrh	r1, [r7, #2]
 8010226:	887a      	ldrh	r2, [r7, #2]
 8010228:	2300      	movs	r3, #0
 801022a:	9301      	str	r3, [sp, #4]
 801022c:	883b      	ldrh	r3, [r7, #0]
 801022e:	9300      	str	r3, [sp, #0]
 8010230:	460b      	mov	r3, r1
 8010232:	6879      	ldr	r1, [r7, #4]
 8010234:	68f8      	ldr	r0, [r7, #12]
 8010236:	f7ff feb7 	bl	800ffa8 <pbuf_init_alloced_pbuf>
  return p;
 801023a:	68fb      	ldr	r3, [r7, #12]
}
 801023c:	4618      	mov	r0, r3
 801023e:	3710      	adds	r7, #16
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}
 8010244:	08019878 	.word	0x08019878
 8010248:	080199a8 	.word	0x080199a8
 801024c:	08019904 	.word	0x08019904

08010250 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b088      	sub	sp, #32
 8010254:	af02      	add	r7, sp, #8
 8010256:	607b      	str	r3, [r7, #4]
 8010258:	4603      	mov	r3, r0
 801025a:	73fb      	strb	r3, [r7, #15]
 801025c:	460b      	mov	r3, r1
 801025e:	81bb      	strh	r3, [r7, #12]
 8010260:	4613      	mov	r3, r2
 8010262:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010264:	7bfb      	ldrb	r3, [r7, #15]
 8010266:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010268:	8a7b      	ldrh	r3, [r7, #18]
 801026a:	3303      	adds	r3, #3
 801026c:	f023 0203 	bic.w	r2, r3, #3
 8010270:	89bb      	ldrh	r3, [r7, #12]
 8010272:	441a      	add	r2, r3
 8010274:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010276:	429a      	cmp	r2, r3
 8010278:	d901      	bls.n	801027e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801027a:	2300      	movs	r3, #0
 801027c:	e018      	b.n	80102b0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801027e:	6a3b      	ldr	r3, [r7, #32]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d007      	beq.n	8010294 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010284:	8a7b      	ldrh	r3, [r7, #18]
 8010286:	3303      	adds	r3, #3
 8010288:	f023 0303 	bic.w	r3, r3, #3
 801028c:	6a3a      	ldr	r2, [r7, #32]
 801028e:	4413      	add	r3, r2
 8010290:	617b      	str	r3, [r7, #20]
 8010292:	e001      	b.n	8010298 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010294:	2300      	movs	r3, #0
 8010296:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	89b9      	ldrh	r1, [r7, #12]
 801029c:	89ba      	ldrh	r2, [r7, #12]
 801029e:	2302      	movs	r3, #2
 80102a0:	9301      	str	r3, [sp, #4]
 80102a2:	897b      	ldrh	r3, [r7, #10]
 80102a4:	9300      	str	r3, [sp, #0]
 80102a6:	460b      	mov	r3, r1
 80102a8:	6979      	ldr	r1, [r7, #20]
 80102aa:	f7ff fe7d 	bl	800ffa8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80102ae:	687b      	ldr	r3, [r7, #4]
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3718      	adds	r7, #24
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b084      	sub	sp, #16
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	460b      	mov	r3, r1
 80102c2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d106      	bne.n	80102d8 <pbuf_realloc+0x20>
 80102ca:	4b39      	ldr	r3, [pc, #228]	@ (80103b0 <pbuf_realloc+0xf8>)
 80102cc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80102d0:	4938      	ldr	r1, [pc, #224]	@ (80103b4 <pbuf_realloc+0xfc>)
 80102d2:	4839      	ldr	r0, [pc, #228]	@ (80103b8 <pbuf_realloc+0x100>)
 80102d4:	f007 f91a 	bl	801750c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	891b      	ldrh	r3, [r3, #8]
 80102dc:	887a      	ldrh	r2, [r7, #2]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d261      	bcs.n	80103a6 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	891a      	ldrh	r2, [r3, #8]
 80102e6:	887b      	ldrh	r3, [r7, #2]
 80102e8:	1ad3      	subs	r3, r2, r3
 80102ea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80102ec:	887b      	ldrh	r3, [r7, #2]
 80102ee:	817b      	strh	r3, [r7, #10]
  q = p;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80102f4:	e018      	b.n	8010328 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	895b      	ldrh	r3, [r3, #10]
 80102fa:	897a      	ldrh	r2, [r7, #10]
 80102fc:	1ad3      	subs	r3, r2, r3
 80102fe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	891a      	ldrh	r2, [r3, #8]
 8010304:	893b      	ldrh	r3, [r7, #8]
 8010306:	1ad3      	subs	r3, r2, r3
 8010308:	b29a      	uxth	r2, r3
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d106      	bne.n	8010328 <pbuf_realloc+0x70>
 801031a:	4b25      	ldr	r3, [pc, #148]	@ (80103b0 <pbuf_realloc+0xf8>)
 801031c:	f240 12af 	movw	r2, #431	@ 0x1af
 8010320:	4926      	ldr	r1, [pc, #152]	@ (80103bc <pbuf_realloc+0x104>)
 8010322:	4825      	ldr	r0, [pc, #148]	@ (80103b8 <pbuf_realloc+0x100>)
 8010324:	f007 f8f2 	bl	801750c <iprintf>
  while (rem_len > q->len) {
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	895b      	ldrh	r3, [r3, #10]
 801032c:	897a      	ldrh	r2, [r7, #10]
 801032e:	429a      	cmp	r2, r3
 8010330:	d8e1      	bhi.n	80102f6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	7b1b      	ldrb	r3, [r3, #12]
 8010336:	f003 030f 	and.w	r3, r3, #15
 801033a:	2b00      	cmp	r3, #0
 801033c:	d11f      	bne.n	801037e <pbuf_realloc+0xc6>
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	895b      	ldrh	r3, [r3, #10]
 8010342:	897a      	ldrh	r2, [r7, #10]
 8010344:	429a      	cmp	r2, r3
 8010346:	d01a      	beq.n	801037e <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	7b5b      	ldrb	r3, [r3, #13]
 801034c:	f003 0302 	and.w	r3, r3, #2
 8010350:	2b00      	cmp	r3, #0
 8010352:	d114      	bne.n	801037e <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	685a      	ldr	r2, [r3, #4]
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	1ad2      	subs	r2, r2, r3
 801035c:	897b      	ldrh	r3, [r7, #10]
 801035e:	4413      	add	r3, r2
 8010360:	4619      	mov	r1, r3
 8010362:	68f8      	ldr	r0, [r7, #12]
 8010364:	f7fe ff50 	bl	800f208 <mem_trim>
 8010368:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d106      	bne.n	801037e <pbuf_realloc+0xc6>
 8010370:	4b0f      	ldr	r3, [pc, #60]	@ (80103b0 <pbuf_realloc+0xf8>)
 8010372:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8010376:	4912      	ldr	r1, [pc, #72]	@ (80103c0 <pbuf_realloc+0x108>)
 8010378:	480f      	ldr	r0, [pc, #60]	@ (80103b8 <pbuf_realloc+0x100>)
 801037a:	f007 f8c7 	bl	801750c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	897a      	ldrh	r2, [r7, #10]
 8010382:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	895a      	ldrh	r2, [r3, #10]
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d004      	beq.n	801039e <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	4618      	mov	r0, r3
 801039a:	f000 f911 	bl	80105c0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	2200      	movs	r2, #0
 80103a2:	601a      	str	r2, [r3, #0]
 80103a4:	e000      	b.n	80103a8 <pbuf_realloc+0xf0>
    return;
 80103a6:	bf00      	nop

}
 80103a8:	3710      	adds	r7, #16
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	08019878 	.word	0x08019878
 80103b4:	080199bc 	.word	0x080199bc
 80103b8:	08019904 	.word	0x08019904
 80103bc:	080199d4 	.word	0x080199d4
 80103c0:	080199ec 	.word	0x080199ec

080103c4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b086      	sub	sp, #24
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	60f8      	str	r0, [r7, #12]
 80103cc:	60b9      	str	r1, [r7, #8]
 80103ce:	4613      	mov	r3, r2
 80103d0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d106      	bne.n	80103e6 <pbuf_add_header_impl+0x22>
 80103d8:	4b2b      	ldr	r3, [pc, #172]	@ (8010488 <pbuf_add_header_impl+0xc4>)
 80103da:	f240 12df 	movw	r2, #479	@ 0x1df
 80103de:	492b      	ldr	r1, [pc, #172]	@ (801048c <pbuf_add_header_impl+0xc8>)
 80103e0:	482b      	ldr	r0, [pc, #172]	@ (8010490 <pbuf_add_header_impl+0xcc>)
 80103e2:	f007 f893 	bl	801750c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d003      	beq.n	80103f4 <pbuf_add_header_impl+0x30>
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80103f2:	d301      	bcc.n	80103f8 <pbuf_add_header_impl+0x34>
    return 1;
 80103f4:	2301      	movs	r3, #1
 80103f6:	e043      	b.n	8010480 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d101      	bne.n	8010402 <pbuf_add_header_impl+0x3e>
    return 0;
 80103fe:	2300      	movs	r3, #0
 8010400:	e03e      	b.n	8010480 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	891a      	ldrh	r2, [r3, #8]
 801040a:	8a7b      	ldrh	r3, [r7, #18]
 801040c:	4413      	add	r3, r2
 801040e:	b29b      	uxth	r3, r3
 8010410:	8a7a      	ldrh	r2, [r7, #18]
 8010412:	429a      	cmp	r2, r3
 8010414:	d901      	bls.n	801041a <pbuf_add_header_impl+0x56>
    return 1;
 8010416:	2301      	movs	r3, #1
 8010418:	e032      	b.n	8010480 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	7b1b      	ldrb	r3, [r3, #12]
 801041e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010420:	8a3b      	ldrh	r3, [r7, #16]
 8010422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010426:	2b00      	cmp	r3, #0
 8010428:	d00c      	beq.n	8010444 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	685a      	ldr	r2, [r3, #4]
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	425b      	negs	r3, r3
 8010432:	4413      	add	r3, r2
 8010434:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	3310      	adds	r3, #16
 801043a:	697a      	ldr	r2, [r7, #20]
 801043c:	429a      	cmp	r2, r3
 801043e:	d20d      	bcs.n	801045c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010440:	2301      	movs	r3, #1
 8010442:	e01d      	b.n	8010480 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010444:	79fb      	ldrb	r3, [r7, #7]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d006      	beq.n	8010458 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	685a      	ldr	r2, [r3, #4]
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	425b      	negs	r3, r3
 8010452:	4413      	add	r3, r2
 8010454:	617b      	str	r3, [r7, #20]
 8010456:	e001      	b.n	801045c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010458:	2301      	movs	r3, #1
 801045a:	e011      	b.n	8010480 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	697a      	ldr	r2, [r7, #20]
 8010460:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	895a      	ldrh	r2, [r3, #10]
 8010466:	8a7b      	ldrh	r3, [r7, #18]
 8010468:	4413      	add	r3, r2
 801046a:	b29a      	uxth	r2, r3
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	891a      	ldrh	r2, [r3, #8]
 8010474:	8a7b      	ldrh	r3, [r7, #18]
 8010476:	4413      	add	r3, r2
 8010478:	b29a      	uxth	r2, r3
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	811a      	strh	r2, [r3, #8]


  return 0;
 801047e:	2300      	movs	r3, #0
}
 8010480:	4618      	mov	r0, r3
 8010482:	3718      	adds	r7, #24
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}
 8010488:	08019878 	.word	0x08019878
 801048c:	08019a08 	.word	0x08019a08
 8010490:	08019904 	.word	0x08019904

08010494 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801049e:	2200      	movs	r2, #0
 80104a0:	6839      	ldr	r1, [r7, #0]
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f7ff ff8e 	bl	80103c4 <pbuf_add_header_impl>
 80104a8:	4603      	mov	r3, r0
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3708      	adds	r7, #8
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
	...

080104b4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b084      	sub	sp, #16
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d106      	bne.n	80104d2 <pbuf_remove_header+0x1e>
 80104c4:	4b20      	ldr	r3, [pc, #128]	@ (8010548 <pbuf_remove_header+0x94>)
 80104c6:	f240 224b 	movw	r2, #587	@ 0x24b
 80104ca:	4920      	ldr	r1, [pc, #128]	@ (801054c <pbuf_remove_header+0x98>)
 80104cc:	4820      	ldr	r0, [pc, #128]	@ (8010550 <pbuf_remove_header+0x9c>)
 80104ce:	f007 f81d 	bl	801750c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d003      	beq.n	80104e0 <pbuf_remove_header+0x2c>
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80104de:	d301      	bcc.n	80104e4 <pbuf_remove_header+0x30>
    return 1;
 80104e0:	2301      	movs	r3, #1
 80104e2:	e02c      	b.n	801053e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d101      	bne.n	80104ee <pbuf_remove_header+0x3a>
    return 0;
 80104ea:	2300      	movs	r3, #0
 80104ec:	e027      	b.n	801053e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	895b      	ldrh	r3, [r3, #10]
 80104f6:	89fa      	ldrh	r2, [r7, #14]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d908      	bls.n	801050e <pbuf_remove_header+0x5a>
 80104fc:	4b12      	ldr	r3, [pc, #72]	@ (8010548 <pbuf_remove_header+0x94>)
 80104fe:	f240 2255 	movw	r2, #597	@ 0x255
 8010502:	4914      	ldr	r1, [pc, #80]	@ (8010554 <pbuf_remove_header+0xa0>)
 8010504:	4812      	ldr	r0, [pc, #72]	@ (8010550 <pbuf_remove_header+0x9c>)
 8010506:	f007 f801 	bl	801750c <iprintf>
 801050a:	2301      	movs	r3, #1
 801050c:	e017      	b.n	801053e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	685a      	ldr	r2, [r3, #4]
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	441a      	add	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	895a      	ldrh	r2, [r3, #10]
 8010524:	89fb      	ldrh	r3, [r7, #14]
 8010526:	1ad3      	subs	r3, r2, r3
 8010528:	b29a      	uxth	r2, r3
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	891a      	ldrh	r2, [r3, #8]
 8010532:	89fb      	ldrh	r3, [r7, #14]
 8010534:	1ad3      	subs	r3, r2, r3
 8010536:	b29a      	uxth	r2, r3
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801053c:	2300      	movs	r3, #0
}
 801053e:	4618      	mov	r0, r3
 8010540:	3710      	adds	r7, #16
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}
 8010546:	bf00      	nop
 8010548:	08019878 	.word	0x08019878
 801054c:	08019a08 	.word	0x08019a08
 8010550:	08019904 	.word	0x08019904
 8010554:	08019a14 	.word	0x08019a14

08010558 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	460b      	mov	r3, r1
 8010562:	807b      	strh	r3, [r7, #2]
 8010564:	4613      	mov	r3, r2
 8010566:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010568:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801056c:	2b00      	cmp	r3, #0
 801056e:	da08      	bge.n	8010582 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010570:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010574:	425b      	negs	r3, r3
 8010576:	4619      	mov	r1, r3
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f7ff ff9b 	bl	80104b4 <pbuf_remove_header>
 801057e:	4603      	mov	r3, r0
 8010580:	e007      	b.n	8010592 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010582:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010586:	787a      	ldrb	r2, [r7, #1]
 8010588:	4619      	mov	r1, r3
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f7ff ff1a 	bl	80103c4 <pbuf_add_header_impl>
 8010590:	4603      	mov	r3, r0
  }
}
 8010592:	4618      	mov	r0, r3
 8010594:	3708      	adds	r7, #8
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}

0801059a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801059a:	b580      	push	{r7, lr}
 801059c:	b082      	sub	sp, #8
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
 80105a2:	460b      	mov	r3, r1
 80105a4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80105a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80105aa:	2201      	movs	r2, #1
 80105ac:	4619      	mov	r1, r3
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f7ff ffd2 	bl	8010558 <pbuf_header_impl>
 80105b4:	4603      	mov	r3, r0
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3708      	adds	r7, #8
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
	...

080105c0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b088      	sub	sp, #32
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d10b      	bne.n	80105e6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d106      	bne.n	80105e2 <pbuf_free+0x22>
 80105d4:	4b3b      	ldr	r3, [pc, #236]	@ (80106c4 <pbuf_free+0x104>)
 80105d6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80105da:	493b      	ldr	r1, [pc, #236]	@ (80106c8 <pbuf_free+0x108>)
 80105dc:	483b      	ldr	r0, [pc, #236]	@ (80106cc <pbuf_free+0x10c>)
 80105de:	f006 ff95 	bl	801750c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80105e2:	2300      	movs	r3, #0
 80105e4:	e069      	b.n	80106ba <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80105e6:	2300      	movs	r3, #0
 80105e8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80105ea:	e062      	b.n	80106b2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80105ec:	f000 fce4 	bl	8010fb8 <sys_arch_protect>
 80105f0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	7b9b      	ldrb	r3, [r3, #14]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d106      	bne.n	8010608 <pbuf_free+0x48>
 80105fa:	4b32      	ldr	r3, [pc, #200]	@ (80106c4 <pbuf_free+0x104>)
 80105fc:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8010600:	4933      	ldr	r1, [pc, #204]	@ (80106d0 <pbuf_free+0x110>)
 8010602:	4832      	ldr	r0, [pc, #200]	@ (80106cc <pbuf_free+0x10c>)
 8010604:	f006 ff82 	bl	801750c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	7b9b      	ldrb	r3, [r3, #14]
 801060c:	3b01      	subs	r3, #1
 801060e:	b2da      	uxtb	r2, r3
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	739a      	strb	r2, [r3, #14]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	7b9b      	ldrb	r3, [r3, #14]
 8010618:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801061a:	69b8      	ldr	r0, [r7, #24]
 801061c:	f000 fcda 	bl	8010fd4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010620:	7dfb      	ldrb	r3, [r7, #23]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d143      	bne.n	80106ae <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	7b1b      	ldrb	r3, [r3, #12]
 8010630:	f003 030f 	and.w	r3, r3, #15
 8010634:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	7b5b      	ldrb	r3, [r3, #13]
 801063a:	f003 0302 	and.w	r3, r3, #2
 801063e:	2b00      	cmp	r3, #0
 8010640:	d011      	beq.n	8010666 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	691b      	ldr	r3, [r3, #16]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d106      	bne.n	801065c <pbuf_free+0x9c>
 801064e:	4b1d      	ldr	r3, [pc, #116]	@ (80106c4 <pbuf_free+0x104>)
 8010650:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8010654:	491f      	ldr	r1, [pc, #124]	@ (80106d4 <pbuf_free+0x114>)
 8010656:	481d      	ldr	r0, [pc, #116]	@ (80106cc <pbuf_free+0x10c>)
 8010658:	f006 ff58 	bl	801750c <iprintf>
        pc->custom_free_function(p);
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	691b      	ldr	r3, [r3, #16]
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	4798      	blx	r3
 8010664:	e01d      	b.n	80106a2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010666:	7bfb      	ldrb	r3, [r7, #15]
 8010668:	2b02      	cmp	r3, #2
 801066a:	d104      	bne.n	8010676 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801066c:	6879      	ldr	r1, [r7, #4]
 801066e:	200d      	movs	r0, #13
 8010670:	f7ff f8de 	bl	800f830 <memp_free>
 8010674:	e015      	b.n	80106a2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010676:	7bfb      	ldrb	r3, [r7, #15]
 8010678:	2b01      	cmp	r3, #1
 801067a:	d104      	bne.n	8010686 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801067c:	6879      	ldr	r1, [r7, #4]
 801067e:	200c      	movs	r0, #12
 8010680:	f7ff f8d6 	bl	800f830 <memp_free>
 8010684:	e00d      	b.n	80106a2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010686:	7bfb      	ldrb	r3, [r7, #15]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d103      	bne.n	8010694 <pbuf_free+0xd4>
          mem_free(p);
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f7fe fd2b 	bl	800f0e8 <mem_free>
 8010692:	e006      	b.n	80106a2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010694:	4b0b      	ldr	r3, [pc, #44]	@ (80106c4 <pbuf_free+0x104>)
 8010696:	f240 320f 	movw	r2, #783	@ 0x30f
 801069a:	490f      	ldr	r1, [pc, #60]	@ (80106d8 <pbuf_free+0x118>)
 801069c:	480b      	ldr	r0, [pc, #44]	@ (80106cc <pbuf_free+0x10c>)
 801069e:	f006 ff35 	bl	801750c <iprintf>
        }
      }
      count++;
 80106a2:	7ffb      	ldrb	r3, [r7, #31]
 80106a4:	3301      	adds	r3, #1
 80106a6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	607b      	str	r3, [r7, #4]
 80106ac:	e001      	b.n	80106b2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80106ae:	2300      	movs	r3, #0
 80106b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d199      	bne.n	80105ec <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80106b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3720      	adds	r7, #32
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}
 80106c2:	bf00      	nop
 80106c4:	08019878 	.word	0x08019878
 80106c8:	08019a08 	.word	0x08019a08
 80106cc:	08019904 	.word	0x08019904
 80106d0:	08019a34 	.word	0x08019a34
 80106d4:	08019a4c 	.word	0x08019a4c
 80106d8:	08019a70 	.word	0x08019a70

080106dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80106dc:	b480      	push	{r7}
 80106de:	b085      	sub	sp, #20
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80106e4:	2300      	movs	r3, #0
 80106e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80106e8:	e005      	b.n	80106f6 <pbuf_clen+0x1a>
    ++len;
 80106ea:	89fb      	ldrh	r3, [r7, #14]
 80106ec:	3301      	adds	r3, #1
 80106ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d1f6      	bne.n	80106ea <pbuf_clen+0xe>
  }
  return len;
 80106fc:	89fb      	ldrh	r3, [r7, #14]
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3714      	adds	r7, #20
 8010702:	46bd      	mov	sp, r7
 8010704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010708:	4770      	bx	lr
	...

0801070c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b084      	sub	sp, #16
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d016      	beq.n	8010748 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801071a:	f000 fc4d 	bl	8010fb8 <sys_arch_protect>
 801071e:	60f8      	str	r0, [r7, #12]
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	7b9b      	ldrb	r3, [r3, #14]
 8010724:	3301      	adds	r3, #1
 8010726:	b2da      	uxtb	r2, r3
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	739a      	strb	r2, [r3, #14]
 801072c:	68f8      	ldr	r0, [r7, #12]
 801072e:	f000 fc51 	bl	8010fd4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	7b9b      	ldrb	r3, [r3, #14]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d106      	bne.n	8010748 <pbuf_ref+0x3c>
 801073a:	4b05      	ldr	r3, [pc, #20]	@ (8010750 <pbuf_ref+0x44>)
 801073c:	f240 3242 	movw	r2, #834	@ 0x342
 8010740:	4904      	ldr	r1, [pc, #16]	@ (8010754 <pbuf_ref+0x48>)
 8010742:	4805      	ldr	r0, [pc, #20]	@ (8010758 <pbuf_ref+0x4c>)
 8010744:	f006 fee2 	bl	801750c <iprintf>
  }
}
 8010748:	bf00      	nop
 801074a:	3710      	adds	r7, #16
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}
 8010750:	08019878 	.word	0x08019878
 8010754:	08019a84 	.word	0x08019a84
 8010758:	08019904 	.word	0x08019904

0801075c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b084      	sub	sp, #16
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d002      	beq.n	8010772 <pbuf_cat+0x16>
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d107      	bne.n	8010782 <pbuf_cat+0x26>
 8010772:	4b20      	ldr	r3, [pc, #128]	@ (80107f4 <pbuf_cat+0x98>)
 8010774:	f240 3259 	movw	r2, #857	@ 0x359
 8010778:	491f      	ldr	r1, [pc, #124]	@ (80107f8 <pbuf_cat+0x9c>)
 801077a:	4820      	ldr	r0, [pc, #128]	@ (80107fc <pbuf_cat+0xa0>)
 801077c:	f006 fec6 	bl	801750c <iprintf>
 8010780:	e034      	b.n	80107ec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	60fb      	str	r3, [r7, #12]
 8010786:	e00a      	b.n	801079e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	891a      	ldrh	r2, [r3, #8]
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	891b      	ldrh	r3, [r3, #8]
 8010790:	4413      	add	r3, r2
 8010792:	b29a      	uxth	r2, r3
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	60fb      	str	r3, [r7, #12]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d1f0      	bne.n	8010788 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	891a      	ldrh	r2, [r3, #8]
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	895b      	ldrh	r3, [r3, #10]
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d006      	beq.n	80107c0 <pbuf_cat+0x64>
 80107b2:	4b10      	ldr	r3, [pc, #64]	@ (80107f4 <pbuf_cat+0x98>)
 80107b4:	f240 3262 	movw	r2, #866	@ 0x362
 80107b8:	4911      	ldr	r1, [pc, #68]	@ (8010800 <pbuf_cat+0xa4>)
 80107ba:	4810      	ldr	r0, [pc, #64]	@ (80107fc <pbuf_cat+0xa0>)
 80107bc:	f006 fea6 	bl	801750c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d006      	beq.n	80107d6 <pbuf_cat+0x7a>
 80107c8:	4b0a      	ldr	r3, [pc, #40]	@ (80107f4 <pbuf_cat+0x98>)
 80107ca:	f240 3263 	movw	r2, #867	@ 0x363
 80107ce:	490d      	ldr	r1, [pc, #52]	@ (8010804 <pbuf_cat+0xa8>)
 80107d0:	480a      	ldr	r0, [pc, #40]	@ (80107fc <pbuf_cat+0xa0>)
 80107d2:	f006 fe9b 	bl	801750c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	891a      	ldrh	r2, [r3, #8]
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	891b      	ldrh	r3, [r3, #8]
 80107de:	4413      	add	r3, r2
 80107e0:	b29a      	uxth	r2, r3
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	683a      	ldr	r2, [r7, #0]
 80107ea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80107ec:	3710      	adds	r7, #16
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
 80107f2:	bf00      	nop
 80107f4:	08019878 	.word	0x08019878
 80107f8:	08019a98 	.word	0x08019a98
 80107fc:	08019904 	.word	0x08019904
 8010800:	08019ad0 	.word	0x08019ad0
 8010804:	08019b00 	.word	0x08019b00

08010808 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8010812:	6839      	ldr	r1, [r7, #0]
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f7ff ffa1 	bl	801075c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801081a:	6838      	ldr	r0, [r7, #0]
 801081c:	f7ff ff76 	bl	801070c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010820:	bf00      	nop
 8010822:	3708      	adds	r7, #8
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}

08010828 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b086      	sub	sp, #24
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010832:	2300      	movs	r3, #0
 8010834:	617b      	str	r3, [r7, #20]
 8010836:	2300      	movs	r3, #0
 8010838:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d008      	beq.n	8010852 <pbuf_copy+0x2a>
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d005      	beq.n	8010852 <pbuf_copy+0x2a>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	891a      	ldrh	r2, [r3, #8]
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	891b      	ldrh	r3, [r3, #8]
 801084e:	429a      	cmp	r2, r3
 8010850:	d209      	bcs.n	8010866 <pbuf_copy+0x3e>
 8010852:	4b57      	ldr	r3, [pc, #348]	@ (80109b0 <pbuf_copy+0x188>)
 8010854:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8010858:	4956      	ldr	r1, [pc, #344]	@ (80109b4 <pbuf_copy+0x18c>)
 801085a:	4857      	ldr	r0, [pc, #348]	@ (80109b8 <pbuf_copy+0x190>)
 801085c:	f006 fe56 	bl	801750c <iprintf>
 8010860:	f06f 030f 	mvn.w	r3, #15
 8010864:	e09f      	b.n	80109a6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	895b      	ldrh	r3, [r3, #10]
 801086a:	461a      	mov	r2, r3
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	1ad2      	subs	r2, r2, r3
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	895b      	ldrh	r3, [r3, #10]
 8010874:	4619      	mov	r1, r3
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	1acb      	subs	r3, r1, r3
 801087a:	429a      	cmp	r2, r3
 801087c:	d306      	bcc.n	801088c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	895b      	ldrh	r3, [r3, #10]
 8010882:	461a      	mov	r2, r3
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	1ad3      	subs	r3, r2, r3
 8010888:	60fb      	str	r3, [r7, #12]
 801088a:	e005      	b.n	8010898 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	895b      	ldrh	r3, [r3, #10]
 8010890:	461a      	mov	r2, r3
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	1ad3      	subs	r3, r2, r3
 8010896:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	685a      	ldr	r2, [r3, #4]
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	18d0      	adds	r0, r2, r3
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	685a      	ldr	r2, [r3, #4]
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	4413      	add	r3, r2
 80108a8:	68fa      	ldr	r2, [r7, #12]
 80108aa:	4619      	mov	r1, r3
 80108ac:	f007 f859 	bl	8017962 <memcpy>
    offset_to += len;
 80108b0:	697a      	ldr	r2, [r7, #20]
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	4413      	add	r3, r2
 80108b6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80108b8:	693a      	ldr	r2, [r7, #16]
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	4413      	add	r3, r2
 80108be:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	895b      	ldrh	r3, [r3, #10]
 80108c4:	461a      	mov	r2, r3
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d906      	bls.n	80108da <pbuf_copy+0xb2>
 80108cc:	4b38      	ldr	r3, [pc, #224]	@ (80109b0 <pbuf_copy+0x188>)
 80108ce:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80108d2:	493a      	ldr	r1, [pc, #232]	@ (80109bc <pbuf_copy+0x194>)
 80108d4:	4838      	ldr	r0, [pc, #224]	@ (80109b8 <pbuf_copy+0x190>)
 80108d6:	f006 fe19 	bl	801750c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	895b      	ldrh	r3, [r3, #10]
 80108de:	461a      	mov	r2, r3
 80108e0:	693b      	ldr	r3, [r7, #16]
 80108e2:	4293      	cmp	r3, r2
 80108e4:	d906      	bls.n	80108f4 <pbuf_copy+0xcc>
 80108e6:	4b32      	ldr	r3, [pc, #200]	@ (80109b0 <pbuf_copy+0x188>)
 80108e8:	f240 32da 	movw	r2, #986	@ 0x3da
 80108ec:	4934      	ldr	r1, [pc, #208]	@ (80109c0 <pbuf_copy+0x198>)
 80108ee:	4832      	ldr	r0, [pc, #200]	@ (80109b8 <pbuf_copy+0x190>)
 80108f0:	f006 fe0c 	bl	801750c <iprintf>
    if (offset_from >= p_from->len) {
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	895b      	ldrh	r3, [r3, #10]
 80108f8:	461a      	mov	r2, r3
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	4293      	cmp	r3, r2
 80108fe:	d304      	bcc.n	801090a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010900:	2300      	movs	r3, #0
 8010902:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	895b      	ldrh	r3, [r3, #10]
 801090e:	461a      	mov	r2, r3
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	4293      	cmp	r3, r2
 8010914:	d114      	bne.n	8010940 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010916:	2300      	movs	r3, #0
 8010918:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d10c      	bne.n	8010940 <pbuf_copy+0x118>
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d009      	beq.n	8010940 <pbuf_copy+0x118>
 801092c:	4b20      	ldr	r3, [pc, #128]	@ (80109b0 <pbuf_copy+0x188>)
 801092e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8010932:	4924      	ldr	r1, [pc, #144]	@ (80109c4 <pbuf_copy+0x19c>)
 8010934:	4820      	ldr	r0, [pc, #128]	@ (80109b8 <pbuf_copy+0x190>)
 8010936:	f006 fde9 	bl	801750c <iprintf>
 801093a:	f06f 030f 	mvn.w	r3, #15
 801093e:	e032      	b.n	80109a6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d013      	beq.n	801096e <pbuf_copy+0x146>
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	895a      	ldrh	r2, [r3, #10]
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	891b      	ldrh	r3, [r3, #8]
 801094e:	429a      	cmp	r2, r3
 8010950:	d10d      	bne.n	801096e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d009      	beq.n	801096e <pbuf_copy+0x146>
 801095a:	4b15      	ldr	r3, [pc, #84]	@ (80109b0 <pbuf_copy+0x188>)
 801095c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8010960:	4919      	ldr	r1, [pc, #100]	@ (80109c8 <pbuf_copy+0x1a0>)
 8010962:	4815      	ldr	r0, [pc, #84]	@ (80109b8 <pbuf_copy+0x190>)
 8010964:	f006 fdd2 	bl	801750c <iprintf>
 8010968:	f06f 0305 	mvn.w	r3, #5
 801096c:	e01b      	b.n	80109a6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d013      	beq.n	801099c <pbuf_copy+0x174>
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	895a      	ldrh	r2, [r3, #10]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	891b      	ldrh	r3, [r3, #8]
 801097c:	429a      	cmp	r2, r3
 801097e:	d10d      	bne.n	801099c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d009      	beq.n	801099c <pbuf_copy+0x174>
 8010988:	4b09      	ldr	r3, [pc, #36]	@ (80109b0 <pbuf_copy+0x188>)
 801098a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801098e:	490e      	ldr	r1, [pc, #56]	@ (80109c8 <pbuf_copy+0x1a0>)
 8010990:	4809      	ldr	r0, [pc, #36]	@ (80109b8 <pbuf_copy+0x190>)
 8010992:	f006 fdbb 	bl	801750c <iprintf>
 8010996:	f06f 0305 	mvn.w	r3, #5
 801099a:	e004      	b.n	80109a6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	f47f af61 	bne.w	8010866 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80109a4:	2300      	movs	r3, #0
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3718      	adds	r7, #24
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	08019878 	.word	0x08019878
 80109b4:	08019b4c 	.word	0x08019b4c
 80109b8:	08019904 	.word	0x08019904
 80109bc:	08019b7c 	.word	0x08019b7c
 80109c0:	08019b94 	.word	0x08019b94
 80109c4:	08019bb0 	.word	0x08019bb0
 80109c8:	08019bc0 	.word	0x08019bc0

080109cc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b088      	sub	sp, #32
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	60f8      	str	r0, [r7, #12]
 80109d4:	60b9      	str	r1, [r7, #8]
 80109d6:	4611      	mov	r1, r2
 80109d8:	461a      	mov	r2, r3
 80109da:	460b      	mov	r3, r1
 80109dc:	80fb      	strh	r3, [r7, #6]
 80109de:	4613      	mov	r3, r2
 80109e0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80109e2:	2300      	movs	r3, #0
 80109e4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80109e6:	2300      	movs	r3, #0
 80109e8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d108      	bne.n	8010a02 <pbuf_copy_partial+0x36>
 80109f0:	4b2b      	ldr	r3, [pc, #172]	@ (8010aa0 <pbuf_copy_partial+0xd4>)
 80109f2:	f240 420a 	movw	r2, #1034	@ 0x40a
 80109f6:	492b      	ldr	r1, [pc, #172]	@ (8010aa4 <pbuf_copy_partial+0xd8>)
 80109f8:	482b      	ldr	r0, [pc, #172]	@ (8010aa8 <pbuf_copy_partial+0xdc>)
 80109fa:	f006 fd87 	bl	801750c <iprintf>
 80109fe:	2300      	movs	r3, #0
 8010a00:	e04a      	b.n	8010a98 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d108      	bne.n	8010a1a <pbuf_copy_partial+0x4e>
 8010a08:	4b25      	ldr	r3, [pc, #148]	@ (8010aa0 <pbuf_copy_partial+0xd4>)
 8010a0a:	f240 420b 	movw	r2, #1035	@ 0x40b
 8010a0e:	4927      	ldr	r1, [pc, #156]	@ (8010aac <pbuf_copy_partial+0xe0>)
 8010a10:	4825      	ldr	r0, [pc, #148]	@ (8010aa8 <pbuf_copy_partial+0xdc>)
 8010a12:	f006 fd7b 	bl	801750c <iprintf>
 8010a16:	2300      	movs	r3, #0
 8010a18:	e03e      	b.n	8010a98 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	61fb      	str	r3, [r7, #28]
 8010a1e:	e034      	b.n	8010a8a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010a20:	88bb      	ldrh	r3, [r7, #4]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d00a      	beq.n	8010a3c <pbuf_copy_partial+0x70>
 8010a26:	69fb      	ldr	r3, [r7, #28]
 8010a28:	895b      	ldrh	r3, [r3, #10]
 8010a2a:	88ba      	ldrh	r2, [r7, #4]
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d305      	bcc.n	8010a3c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	895b      	ldrh	r3, [r3, #10]
 8010a34:	88ba      	ldrh	r2, [r7, #4]
 8010a36:	1ad3      	subs	r3, r2, r3
 8010a38:	80bb      	strh	r3, [r7, #4]
 8010a3a:	e023      	b.n	8010a84 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010a3c:	69fb      	ldr	r3, [r7, #28]
 8010a3e:	895a      	ldrh	r2, [r3, #10]
 8010a40:	88bb      	ldrh	r3, [r7, #4]
 8010a42:	1ad3      	subs	r3, r2, r3
 8010a44:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010a46:	8b3a      	ldrh	r2, [r7, #24]
 8010a48:	88fb      	ldrh	r3, [r7, #6]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d901      	bls.n	8010a52 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010a4e:	88fb      	ldrh	r3, [r7, #6]
 8010a50:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010a52:	8b7b      	ldrh	r3, [r7, #26]
 8010a54:	68ba      	ldr	r2, [r7, #8]
 8010a56:	18d0      	adds	r0, r2, r3
 8010a58:	69fb      	ldr	r3, [r7, #28]
 8010a5a:	685a      	ldr	r2, [r3, #4]
 8010a5c:	88bb      	ldrh	r3, [r7, #4]
 8010a5e:	4413      	add	r3, r2
 8010a60:	8b3a      	ldrh	r2, [r7, #24]
 8010a62:	4619      	mov	r1, r3
 8010a64:	f006 ff7d 	bl	8017962 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010a68:	8afa      	ldrh	r2, [r7, #22]
 8010a6a:	8b3b      	ldrh	r3, [r7, #24]
 8010a6c:	4413      	add	r3, r2
 8010a6e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010a70:	8b7a      	ldrh	r2, [r7, #26]
 8010a72:	8b3b      	ldrh	r3, [r7, #24]
 8010a74:	4413      	add	r3, r2
 8010a76:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010a78:	88fa      	ldrh	r2, [r7, #6]
 8010a7a:	8b3b      	ldrh	r3, [r7, #24]
 8010a7c:	1ad3      	subs	r3, r2, r3
 8010a7e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010a80:	2300      	movs	r3, #0
 8010a82:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010a84:	69fb      	ldr	r3, [r7, #28]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	61fb      	str	r3, [r7, #28]
 8010a8a:	88fb      	ldrh	r3, [r7, #6]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d002      	beq.n	8010a96 <pbuf_copy_partial+0xca>
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d1c4      	bne.n	8010a20 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010a96:	8afb      	ldrh	r3, [r7, #22]
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3720      	adds	r7, #32
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}
 8010aa0:	08019878 	.word	0x08019878
 8010aa4:	08019bec 	.word	0x08019bec
 8010aa8:	08019904 	.word	0x08019904
 8010aac:	08019c0c 	.word	0x08019c0c

08010ab0 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b087      	sub	sp, #28
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	60f8      	str	r0, [r7, #12]
 8010ab8:	460b      	mov	r3, r1
 8010aba:	607a      	str	r2, [r7, #4]
 8010abc:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8010abe:	897b      	ldrh	r3, [r7, #10]
 8010ac0:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8010ac6:	e007      	b.n	8010ad8 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8010ac8:	693b      	ldr	r3, [r7, #16]
 8010aca:	895b      	ldrh	r3, [r3, #10]
 8010acc:	8afa      	ldrh	r2, [r7, #22]
 8010ace:	1ad3      	subs	r3, r2, r3
 8010ad0:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d004      	beq.n	8010ae8 <pbuf_skip_const+0x38>
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	895b      	ldrh	r3, [r3, #10]
 8010ae2:	8afa      	ldrh	r2, [r7, #22]
 8010ae4:	429a      	cmp	r2, r3
 8010ae6:	d2ef      	bcs.n	8010ac8 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d002      	beq.n	8010af4 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	8afa      	ldrh	r2, [r7, #22]
 8010af2:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8010af4:	693b      	ldr	r3, [r7, #16]
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	371c      	adds	r7, #28
 8010afa:	46bd      	mov	sp, r7
 8010afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b00:	4770      	bx	lr

08010b02 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8010b02:	b580      	push	{r7, lr}
 8010b04:	b086      	sub	sp, #24
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	60f8      	str	r0, [r7, #12]
 8010b0a:	460b      	mov	r3, r1
 8010b0c:	607a      	str	r2, [r7, #4]
 8010b0e:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8010b10:	897b      	ldrh	r3, [r7, #10]
 8010b12:	687a      	ldr	r2, [r7, #4]
 8010b14:	4619      	mov	r1, r3
 8010b16:	68f8      	ldr	r0, [r7, #12]
 8010b18:	f7ff ffca 	bl	8010ab0 <pbuf_skip_const>
 8010b1c:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8010b1e:	697b      	ldr	r3, [r7, #20]
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3718      	adds	r7, #24
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}

08010b28 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b088      	sub	sp, #32
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	60f8      	str	r0, [r7, #12]
 8010b30:	60b9      	str	r1, [r7, #8]
 8010b32:	4613      	mov	r3, r2
 8010b34:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8010b36:	88fb      	ldrh	r3, [r7, #6]
 8010b38:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d109      	bne.n	8010b58 <pbuf_take+0x30>
 8010b44:	4b3a      	ldr	r3, [pc, #232]	@ (8010c30 <pbuf_take+0x108>)
 8010b46:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8010b4a:	493a      	ldr	r1, [pc, #232]	@ (8010c34 <pbuf_take+0x10c>)
 8010b4c:	483a      	ldr	r0, [pc, #232]	@ (8010c38 <pbuf_take+0x110>)
 8010b4e:	f006 fcdd 	bl	801750c <iprintf>
 8010b52:	f06f 030f 	mvn.w	r3, #15
 8010b56:	e067      	b.n	8010c28 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d109      	bne.n	8010b72 <pbuf_take+0x4a>
 8010b5e:	4b34      	ldr	r3, [pc, #208]	@ (8010c30 <pbuf_take+0x108>)
 8010b60:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8010b64:	4935      	ldr	r1, [pc, #212]	@ (8010c3c <pbuf_take+0x114>)
 8010b66:	4834      	ldr	r0, [pc, #208]	@ (8010c38 <pbuf_take+0x110>)
 8010b68:	f006 fcd0 	bl	801750c <iprintf>
 8010b6c:	f06f 030f 	mvn.w	r3, #15
 8010b70:	e05a      	b.n	8010c28 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	891b      	ldrh	r3, [r3, #8]
 8010b76:	88fa      	ldrh	r2, [r7, #6]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d909      	bls.n	8010b90 <pbuf_take+0x68>
 8010b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8010c30 <pbuf_take+0x108>)
 8010b7e:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 8010b82:	492f      	ldr	r1, [pc, #188]	@ (8010c40 <pbuf_take+0x118>)
 8010b84:	482c      	ldr	r0, [pc, #176]	@ (8010c38 <pbuf_take+0x110>)
 8010b86:	f006 fcc1 	bl	801750c <iprintf>
 8010b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b8e:	e04b      	b.n	8010c28 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d007      	beq.n	8010ba6 <pbuf_take+0x7e>
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d004      	beq.n	8010ba6 <pbuf_take+0x7e>
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	891b      	ldrh	r3, [r3, #8]
 8010ba0:	88fa      	ldrh	r2, [r7, #6]
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d902      	bls.n	8010bac <pbuf_take+0x84>
    return ERR_ARG;
 8010ba6:	f06f 030f 	mvn.w	r3, #15
 8010baa:	e03d      	b.n	8010c28 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	61fb      	str	r3, [r7, #28]
 8010bb0:	e028      	b.n	8010c04 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8010bb2:	69fb      	ldr	r3, [r7, #28]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d106      	bne.n	8010bc6 <pbuf_take+0x9e>
 8010bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8010c30 <pbuf_take+0x108>)
 8010bba:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8010bbe:	4921      	ldr	r1, [pc, #132]	@ (8010c44 <pbuf_take+0x11c>)
 8010bc0:	481d      	ldr	r0, [pc, #116]	@ (8010c38 <pbuf_take+0x110>)
 8010bc2:	f006 fca3 	bl	801750c <iprintf>
    buf_copy_len = total_copy_len;
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8010bca:	69fb      	ldr	r3, [r7, #28]
 8010bcc:	895b      	ldrh	r3, [r3, #10]
 8010bce:	461a      	mov	r2, r3
 8010bd0:	69bb      	ldr	r3, [r7, #24]
 8010bd2:	4293      	cmp	r3, r2
 8010bd4:	d902      	bls.n	8010bdc <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8010bd6:	69fb      	ldr	r3, [r7, #28]
 8010bd8:	895b      	ldrh	r3, [r3, #10]
 8010bda:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8010bdc:	69fb      	ldr	r3, [r7, #28]
 8010bde:	6858      	ldr	r0, [r3, #4]
 8010be0:	68ba      	ldr	r2, [r7, #8]
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	4413      	add	r3, r2
 8010be6:	69ba      	ldr	r2, [r7, #24]
 8010be8:	4619      	mov	r1, r3
 8010bea:	f006 feba 	bl	8017962 <memcpy>
    total_copy_len -= buf_copy_len;
 8010bee:	697a      	ldr	r2, [r7, #20]
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	1ad3      	subs	r3, r2, r3
 8010bf4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8010bf6:	693a      	ldr	r2, [r7, #16]
 8010bf8:	69bb      	ldr	r3, [r7, #24]
 8010bfa:	4413      	add	r3, r2
 8010bfc:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010bfe:	69fb      	ldr	r3, [r7, #28]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	61fb      	str	r3, [r7, #28]
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d1d3      	bne.n	8010bb2 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d103      	bne.n	8010c18 <pbuf_take+0xf0>
 8010c10:	88fb      	ldrh	r3, [r7, #6]
 8010c12:	693a      	ldr	r2, [r7, #16]
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d006      	beq.n	8010c26 <pbuf_take+0xfe>
 8010c18:	4b05      	ldr	r3, [pc, #20]	@ (8010c30 <pbuf_take+0x108>)
 8010c1a:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8010c1e:	490a      	ldr	r1, [pc, #40]	@ (8010c48 <pbuf_take+0x120>)
 8010c20:	4805      	ldr	r0, [pc, #20]	@ (8010c38 <pbuf_take+0x110>)
 8010c22:	f006 fc73 	bl	801750c <iprintf>
  return ERR_OK;
 8010c26:	2300      	movs	r3, #0
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3720      	adds	r7, #32
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	08019878 	.word	0x08019878
 8010c34:	08019c7c 	.word	0x08019c7c
 8010c38:	08019904 	.word	0x08019904
 8010c3c:	08019c94 	.word	0x08019c94
 8010c40:	08019cb0 	.word	0x08019cb0
 8010c44:	08019cd0 	.word	0x08019cd0
 8010c48:	08019ce8 	.word	0x08019ce8

08010c4c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b088      	sub	sp, #32
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	60f8      	str	r0, [r7, #12]
 8010c54:	60b9      	str	r1, [r7, #8]
 8010c56:	4611      	mov	r1, r2
 8010c58:	461a      	mov	r2, r3
 8010c5a:	460b      	mov	r3, r1
 8010c5c:	80fb      	strh	r3, [r7, #6]
 8010c5e:	4613      	mov	r3, r2
 8010c60:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8010c62:	f107 0210 	add.w	r2, r7, #16
 8010c66:	88bb      	ldrh	r3, [r7, #4]
 8010c68:	4619      	mov	r1, r3
 8010c6a:	68f8      	ldr	r0, [r7, #12]
 8010c6c:	f7ff ff49 	bl	8010b02 <pbuf_skip>
 8010c70:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8010c72:	69fb      	ldr	r3, [r7, #28]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d047      	beq.n	8010d08 <pbuf_take_at+0xbc>
 8010c78:	69fb      	ldr	r3, [r7, #28]
 8010c7a:	891b      	ldrh	r3, [r3, #8]
 8010c7c:	461a      	mov	r2, r3
 8010c7e:	8a3b      	ldrh	r3, [r7, #16]
 8010c80:	4619      	mov	r1, r3
 8010c82:	88fb      	ldrh	r3, [r7, #6]
 8010c84:	440b      	add	r3, r1
 8010c86:	429a      	cmp	r2, r3
 8010c88:	db3e      	blt.n	8010d08 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8010c8a:	88fb      	ldrh	r3, [r7, #6]
 8010c8c:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8010c8e:	68bb      	ldr	r3, [r7, #8]
 8010c90:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8010c92:	69fb      	ldr	r3, [r7, #28]
 8010c94:	895a      	ldrh	r2, [r3, #10]
 8010c96:	8a3b      	ldrh	r3, [r7, #16]
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d806      	bhi.n	8010caa <pbuf_take_at+0x5e>
 8010c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8010d14 <pbuf_take_at+0xc8>)
 8010c9e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8010ca2:	491d      	ldr	r1, [pc, #116]	@ (8010d18 <pbuf_take_at+0xcc>)
 8010ca4:	481d      	ldr	r0, [pc, #116]	@ (8010d1c <pbuf_take_at+0xd0>)
 8010ca6:	f006 fc31 	bl	801750c <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8010caa:	69fb      	ldr	r3, [r7, #28]
 8010cac:	895b      	ldrh	r3, [r3, #10]
 8010cae:	461a      	mov	r2, r3
 8010cb0:	8a3b      	ldrh	r3, [r7, #16]
 8010cb2:	1ad2      	subs	r2, r2, r3
 8010cb4:	88fb      	ldrh	r3, [r7, #6]
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	da05      	bge.n	8010cc6 <pbuf_take_at+0x7a>
 8010cba:	69fb      	ldr	r3, [r7, #28]
 8010cbc:	895a      	ldrh	r2, [r3, #10]
 8010cbe:	8a3b      	ldrh	r3, [r7, #16]
 8010cc0:	1ad3      	subs	r3, r2, r3
 8010cc2:	b29b      	uxth	r3, r3
 8010cc4:	e000      	b.n	8010cc8 <pbuf_take_at+0x7c>
 8010cc6:	88fb      	ldrh	r3, [r7, #6]
 8010cc8:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8010cca:	69fb      	ldr	r3, [r7, #28]
 8010ccc:	685b      	ldr	r3, [r3, #4]
 8010cce:	8a3a      	ldrh	r2, [r7, #16]
 8010cd0:	4413      	add	r3, r2
 8010cd2:	8a7a      	ldrh	r2, [r7, #18]
 8010cd4:	68b9      	ldr	r1, [r7, #8]
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f006 fe43 	bl	8017962 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8010cdc:	8b7a      	ldrh	r2, [r7, #26]
 8010cde:	8a7b      	ldrh	r3, [r7, #18]
 8010ce0:	1ad3      	subs	r3, r2, r3
 8010ce2:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8010ce4:	8a7b      	ldrh	r3, [r7, #18]
 8010ce6:	697a      	ldr	r2, [r7, #20]
 8010ce8:	4413      	add	r3, r2
 8010cea:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8010cec:	8b7b      	ldrh	r3, [r7, #26]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d008      	beq.n	8010d04 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8010cf2:	69fb      	ldr	r3, [r7, #28]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	8b7a      	ldrh	r2, [r7, #26]
 8010cf8:	6979      	ldr	r1, [r7, #20]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7ff ff14 	bl	8010b28 <pbuf_take>
 8010d00:	4603      	mov	r3, r0
 8010d02:	e003      	b.n	8010d0c <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8010d04:	2300      	movs	r3, #0
 8010d06:	e001      	b.n	8010d0c <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8010d08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	3720      	adds	r7, #32
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd80      	pop	{r7, pc}
 8010d14:	08019878 	.word	0x08019878
 8010d18:	08019d00 	.word	0x08019d00
 8010d1c:	08019904 	.word	0x08019904

08010d20 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b084      	sub	sp, #16
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	4603      	mov	r3, r0
 8010d28:	603a      	str	r2, [r7, #0]
 8010d2a:	71fb      	strb	r3, [r7, #7]
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	8919      	ldrh	r1, [r3, #8]
 8010d34:	88ba      	ldrh	r2, [r7, #4]
 8010d36:	79fb      	ldrb	r3, [r7, #7]
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f7ff f95f 	bl	800fffc <pbuf_alloc>
 8010d3e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d101      	bne.n	8010d4a <pbuf_clone+0x2a>
    return NULL;
 8010d46:	2300      	movs	r3, #0
 8010d48:	e011      	b.n	8010d6e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010d4a:	6839      	ldr	r1, [r7, #0]
 8010d4c:	68f8      	ldr	r0, [r7, #12]
 8010d4e:	f7ff fd6b 	bl	8010828 <pbuf_copy>
 8010d52:	4603      	mov	r3, r0
 8010d54:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010d56:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d006      	beq.n	8010d6c <pbuf_clone+0x4c>
 8010d5e:	4b06      	ldr	r3, [pc, #24]	@ (8010d78 <pbuf_clone+0x58>)
 8010d60:	f240 5224 	movw	r2, #1316	@ 0x524
 8010d64:	4905      	ldr	r1, [pc, #20]	@ (8010d7c <pbuf_clone+0x5c>)
 8010d66:	4806      	ldr	r0, [pc, #24]	@ (8010d80 <pbuf_clone+0x60>)
 8010d68:	f006 fbd0 	bl	801750c <iprintf>
  return q;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3710      	adds	r7, #16
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}
 8010d76:	bf00      	nop
 8010d78:	08019878 	.word	0x08019878
 8010d7c:	08019d18 	.word	0x08019d18
 8010d80:	08019904 	.word	0x08019904

08010d84 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b084      	sub	sp, #16
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	460b      	mov	r3, r1
 8010d8e:	807b      	strh	r3, [r7, #2]
 8010d90:	4613      	mov	r3, r2
 8010d92:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8010d94:	f107 020a 	add.w	r2, r7, #10
 8010d98:	887b      	ldrh	r3, [r7, #2]
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f7ff feb0 	bl	8010b02 <pbuf_skip>
 8010da2:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d00a      	beq.n	8010dc0 <pbuf_put_at+0x3c>
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	895a      	ldrh	r2, [r3, #10]
 8010dae:	897b      	ldrh	r3, [r7, #10]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d905      	bls.n	8010dc0 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	897a      	ldrh	r2, [r7, #10]
 8010dba:	4413      	add	r3, r2
 8010dbc:	787a      	ldrb	r2, [r7, #1]
 8010dbe:	701a      	strb	r2, [r3, #0]
  }
}
 8010dc0:	bf00      	nop
 8010dc2:	3710      	adds	r7, #16
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}

08010dc8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b086      	sub	sp, #24
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	60bb      	str	r3, [r7, #8]
 8010dd6:	2304      	movs	r3, #4
 8010dd8:	60fb      	str	r3, [r7, #12]
 8010dda:	2300      	movs	r3, #0
 8010ddc:	613b      	str	r3, [r7, #16]
 8010dde:	2300      	movs	r3, #0
 8010de0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8010de2:	f107 0308 	add.w	r3, r7, #8
 8010de6:	2100      	movs	r1, #0
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7f6 fc49 	bl	8007680 <osMessageCreate>
 8010dee:	4602      	mov	r2, r0
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d102      	bne.n	8010e02 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8010dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8010e00:	e000      	b.n	8010e04 <sys_mbox_new+0x3c>

  return ERR_OK;
 8010e02:	2300      	movs	r3, #0
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3718      	adds	r7, #24
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	6839      	ldr	r1, [r7, #0]
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f7f6 fc56 	bl	80076d0 <osMessagePut>
 8010e24:	4603      	mov	r3, r0
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d102      	bne.n	8010e30 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	73fb      	strb	r3, [r7, #15]
 8010e2e:	e001      	b.n	8010e34 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8010e30:	23ff      	movs	r3, #255	@ 0xff
 8010e32:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8010e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3710      	adds	r7, #16
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}

08010e40 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b08c      	sub	sp, #48	@ 0x30
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	61f8      	str	r0, [r7, #28]
 8010e48:	61b9      	str	r1, [r7, #24]
 8010e4a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8010e4c:	f7f6 fa56 	bl	80072fc <osKernelSysTick>
 8010e50:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d017      	beq.n	8010e88 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	6819      	ldr	r1, [r3, #0]
 8010e5c:	f107 0320 	add.w	r3, r7, #32
 8010e60:	697a      	ldr	r2, [r7, #20]
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7f6 fc74 	bl	8007750 <osMessageGet>

    if(event.status == osEventMessage)
 8010e68:	6a3b      	ldr	r3, [r7, #32]
 8010e6a:	2b10      	cmp	r3, #16
 8010e6c:	d109      	bne.n	8010e82 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8010e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e70:	461a      	mov	r2, r3
 8010e72:	69bb      	ldr	r3, [r7, #24]
 8010e74:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8010e76:	f7f6 fa41 	bl	80072fc <osKernelSysTick>
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e7e:	1ad3      	subs	r3, r2, r3
 8010e80:	e019      	b.n	8010eb6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8010e82:	f04f 33ff 	mov.w	r3, #4294967295
 8010e86:	e016      	b.n	8010eb6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8010e88:	69fb      	ldr	r3, [r7, #28]
 8010e8a:	6819      	ldr	r1, [r3, #0]
 8010e8c:	463b      	mov	r3, r7
 8010e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7f6 fc5c 	bl	8007750 <osMessageGet>
 8010e98:	f107 0320 	add.w	r3, r7, #32
 8010e9c:	463a      	mov	r2, r7
 8010e9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8010ea0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8010ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	69bb      	ldr	r3, [r7, #24]
 8010eaa:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8010eac:	f7f6 fa26 	bl	80072fc <osKernelSysTick>
 8010eb0:	4602      	mov	r2, r0
 8010eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010eb4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3730      	adds	r7, #48	@ 0x30
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}

08010ebe <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8010ebe:	b480      	push	{r7}
 8010ec0:	b083      	sub	sp, #12
 8010ec2:	af00      	add	r7, sp, #0
 8010ec4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d101      	bne.n	8010ed2 <sys_mbox_valid+0x14>
    return 0;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	e000      	b.n	8010ed4 <sys_mbox_valid+0x16>
  else
    return 1;
 8010ed2:	2301      	movs	r3, #1
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	370c      	adds	r7, #12
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr

08010ee0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8010ee4:	4803      	ldr	r0, [pc, #12]	@ (8010ef4 <sys_init+0x14>)
 8010ee6:	f7f6 fa79 	bl	80073dc <osMutexCreate>
 8010eea:	4603      	mov	r3, r0
 8010eec:	4a02      	ldr	r2, [pc, #8]	@ (8010ef8 <sys_init+0x18>)
 8010eee:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8010ef0:	bf00      	nop
 8010ef2:	bd80      	pop	{r7, pc}
 8010ef4:	0801b914 	.word	0x0801b914
 8010ef8:	24007b6c 	.word	0x24007b6c

08010efc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b084      	sub	sp, #16
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8010f04:	2300      	movs	r3, #0
 8010f06:	60bb      	str	r3, [r7, #8]
 8010f08:	2300      	movs	r3, #0
 8010f0a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8010f0c:	f107 0308 	add.w	r3, r7, #8
 8010f10:	4618      	mov	r0, r3
 8010f12:	f7f6 fa63 	bl	80073dc <osMutexCreate>
 8010f16:	4602      	mov	r2, r0
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d102      	bne.n	8010f2a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8010f24:	f04f 33ff 	mov.w	r3, #4294967295
 8010f28:	e000      	b.n	8010f2c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8010f2a:	2300      	movs	r3, #0
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3710      	adds	r7, #16
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b082      	sub	sp, #8
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	f04f 31ff 	mov.w	r1, #4294967295
 8010f44:	4618      	mov	r0, r3
 8010f46:	f7f6 fa61 	bl	800740c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8010f4a:	bf00      	nop
 8010f4c:	3708      	adds	r7, #8
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}

08010f52 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8010f52:	b580      	push	{r7, lr}
 8010f54:	b082      	sub	sp, #8
 8010f56:	af00      	add	r7, sp, #0
 8010f58:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7f6 faa2 	bl	80074a8 <osMutexRelease>
}
 8010f64:	bf00      	nop
 8010f66:	3708      	adds	r7, #8
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}

08010f6c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b08c      	sub	sp, #48	@ 0x30
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	60f8      	str	r0, [r7, #12]
 8010f74:	60b9      	str	r1, [r7, #8]
 8010f76:	607a      	str	r2, [r7, #4]
 8010f78:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8010f7a:	f107 0314 	add.w	r3, r7, #20
 8010f7e:	2200      	movs	r2, #0
 8010f80:	601a      	str	r2, [r3, #0]
 8010f82:	605a      	str	r2, [r3, #4]
 8010f84:	609a      	str	r2, [r3, #8]
 8010f86:	60da      	str	r2, [r3, #12]
 8010f88:	611a      	str	r2, [r3, #16]
 8010f8a:	615a      	str	r2, [r3, #20]
 8010f8c:	619a      	str	r2, [r3, #24]
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	617b      	str	r3, [r7, #20]
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	61bb      	str	r3, [r7, #24]
 8010f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f98:	b21b      	sxth	r3, r3
 8010f9a:	83bb      	strh	r3, [r7, #28]
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8010fa0:	f107 0314 	add.w	r3, r7, #20
 8010fa4:	6879      	ldr	r1, [r7, #4]
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7f6 f9b8 	bl	800731c <osThreadCreate>
 8010fac:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3730      	adds	r7, #48	@ 0x30
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
	...

08010fb8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8010fbc:	4b04      	ldr	r3, [pc, #16]	@ (8010fd0 <sys_arch_protect+0x18>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7f6 fa21 	bl	800740c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8010fca:	2301      	movs	r3, #1
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	bd80      	pop	{r7, pc}
 8010fd0:	24007b6c 	.word	0x24007b6c

08010fd4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b082      	sub	sp, #8
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8010fdc:	4b04      	ldr	r3, [pc, #16]	@ (8010ff0 <sys_arch_unprotect+0x1c>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7f6 fa61 	bl	80074a8 <osMutexRelease>
}
 8010fe6:	bf00      	nop
 8010fe8:	3708      	adds	r7, #8
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
 8010fee:	bf00      	nop
 8010ff0:	24007b6c 	.word	0x24007b6c

08010ff4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010ff8:	f006 f988 	bl	801730c <rand>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011004:	b29b      	uxth	r3, r3
 8011006:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801100a:	b29a      	uxth	r2, r3
 801100c:	4b01      	ldr	r3, [pc, #4]	@ (8011014 <tcp_init+0x20>)
 801100e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011010:	bf00      	nop
 8011012:	bd80      	pop	{r7, pc}
 8011014:	24000048 	.word	0x24000048

08011018 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	7d1b      	ldrb	r3, [r3, #20]
 8011024:	2b01      	cmp	r3, #1
 8011026:	d105      	bne.n	8011034 <tcp_free+0x1c>
 8011028:	4b06      	ldr	r3, [pc, #24]	@ (8011044 <tcp_free+0x2c>)
 801102a:	22d4      	movs	r2, #212	@ 0xd4
 801102c:	4906      	ldr	r1, [pc, #24]	@ (8011048 <tcp_free+0x30>)
 801102e:	4807      	ldr	r0, [pc, #28]	@ (801104c <tcp_free+0x34>)
 8011030:	f006 fa6c 	bl	801750c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011034:	6879      	ldr	r1, [r7, #4]
 8011036:	2001      	movs	r0, #1
 8011038:	f7fe fbfa 	bl	800f830 <memp_free>
}
 801103c:	bf00      	nop
 801103e:	3708      	adds	r7, #8
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}
 8011044:	08019da4 	.word	0x08019da4
 8011048:	08019e00 	.word	0x08019e00
 801104c:	08019e14 	.word	0x08019e14

08011050 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b082      	sub	sp, #8
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	7d1b      	ldrb	r3, [r3, #20]
 801105c:	2b01      	cmp	r3, #1
 801105e:	d105      	bne.n	801106c <tcp_free_listen+0x1c>
 8011060:	4b06      	ldr	r3, [pc, #24]	@ (801107c <tcp_free_listen+0x2c>)
 8011062:	22df      	movs	r2, #223	@ 0xdf
 8011064:	4906      	ldr	r1, [pc, #24]	@ (8011080 <tcp_free_listen+0x30>)
 8011066:	4807      	ldr	r0, [pc, #28]	@ (8011084 <tcp_free_listen+0x34>)
 8011068:	f006 fa50 	bl	801750c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801106c:	6879      	ldr	r1, [r7, #4]
 801106e:	2002      	movs	r0, #2
 8011070:	f7fe fbde 	bl	800f830 <memp_free>
}
 8011074:	bf00      	nop
 8011076:	3708      	adds	r7, #8
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}
 801107c:	08019da4 	.word	0x08019da4
 8011080:	08019e3c 	.word	0x08019e3c
 8011084:	08019e14 	.word	0x08019e14

08011088 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801108c:	f000 fea4 	bl	8011dd8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011090:	4b07      	ldr	r3, [pc, #28]	@ (80110b0 <tcp_tmr+0x28>)
 8011092:	781b      	ldrb	r3, [r3, #0]
 8011094:	3301      	adds	r3, #1
 8011096:	b2da      	uxtb	r2, r3
 8011098:	4b05      	ldr	r3, [pc, #20]	@ (80110b0 <tcp_tmr+0x28>)
 801109a:	701a      	strb	r2, [r3, #0]
 801109c:	4b04      	ldr	r3, [pc, #16]	@ (80110b0 <tcp_tmr+0x28>)
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	f003 0301 	and.w	r3, r3, #1
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d001      	beq.n	80110ac <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80110a8:	f000 fb54 	bl	8011754 <tcp_slowtmr>
  }
}
 80110ac:	bf00      	nop
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	24007b85 	.word	0x24007b85

080110b4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b084      	sub	sp, #16
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
 80110bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d105      	bne.n	80110d0 <tcp_remove_listener+0x1c>
 80110c4:	4b0d      	ldr	r3, [pc, #52]	@ (80110fc <tcp_remove_listener+0x48>)
 80110c6:	22ff      	movs	r2, #255	@ 0xff
 80110c8:	490d      	ldr	r1, [pc, #52]	@ (8011100 <tcp_remove_listener+0x4c>)
 80110ca:	480e      	ldr	r0, [pc, #56]	@ (8011104 <tcp_remove_listener+0x50>)
 80110cc:	f006 fa1e 	bl	801750c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	60fb      	str	r3, [r7, #12]
 80110d4:	e00a      	b.n	80110ec <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80110da:	683a      	ldr	r2, [r7, #0]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d102      	bne.n	80110e6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	2200      	movs	r2, #0
 80110e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	68db      	ldr	r3, [r3, #12]
 80110ea:	60fb      	str	r3, [r7, #12]
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d1f1      	bne.n	80110d6 <tcp_remove_listener+0x22>
    }
  }
}
 80110f2:	bf00      	nop
 80110f4:	bf00      	nop
 80110f6:	3710      	adds	r7, #16
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	08019da4 	.word	0x08019da4
 8011100:	08019e58 	.word	0x08019e58
 8011104:	08019e14 	.word	0x08019e14

08011108 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b084      	sub	sp, #16
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d106      	bne.n	8011124 <tcp_listen_closed+0x1c>
 8011116:	4b14      	ldr	r3, [pc, #80]	@ (8011168 <tcp_listen_closed+0x60>)
 8011118:	f240 1211 	movw	r2, #273	@ 0x111
 801111c:	4913      	ldr	r1, [pc, #76]	@ (801116c <tcp_listen_closed+0x64>)
 801111e:	4814      	ldr	r0, [pc, #80]	@ (8011170 <tcp_listen_closed+0x68>)
 8011120:	f006 f9f4 	bl	801750c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	7d1b      	ldrb	r3, [r3, #20]
 8011128:	2b01      	cmp	r3, #1
 801112a:	d006      	beq.n	801113a <tcp_listen_closed+0x32>
 801112c:	4b0e      	ldr	r3, [pc, #56]	@ (8011168 <tcp_listen_closed+0x60>)
 801112e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8011132:	4910      	ldr	r1, [pc, #64]	@ (8011174 <tcp_listen_closed+0x6c>)
 8011134:	480e      	ldr	r0, [pc, #56]	@ (8011170 <tcp_listen_closed+0x68>)
 8011136:	f006 f9e9 	bl	801750c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801113a:	2301      	movs	r3, #1
 801113c:	60fb      	str	r3, [r7, #12]
 801113e:	e00b      	b.n	8011158 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011140:	4a0d      	ldr	r2, [pc, #52]	@ (8011178 <tcp_listen_closed+0x70>)
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	6879      	ldr	r1, [r7, #4]
 801114c:	4618      	mov	r0, r3
 801114e:	f7ff ffb1 	bl	80110b4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	3301      	adds	r3, #1
 8011156:	60fb      	str	r3, [r7, #12]
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2b03      	cmp	r3, #3
 801115c:	d9f0      	bls.n	8011140 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801115e:	bf00      	nop
 8011160:	bf00      	nop
 8011162:	3710      	adds	r7, #16
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}
 8011168:	08019da4 	.word	0x08019da4
 801116c:	08019e80 	.word	0x08019e80
 8011170:	08019e14 	.word	0x08019e14
 8011174:	08019e8c 	.word	0x08019e8c
 8011178:	0801b934 	.word	0x0801b934

0801117c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801117c:	b5b0      	push	{r4, r5, r7, lr}
 801117e:	b088      	sub	sp, #32
 8011180:	af04      	add	r7, sp, #16
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	460b      	mov	r3, r1
 8011186:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d106      	bne.n	801119c <tcp_close_shutdown+0x20>
 801118e:	4b63      	ldr	r3, [pc, #396]	@ (801131c <tcp_close_shutdown+0x1a0>)
 8011190:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8011194:	4962      	ldr	r1, [pc, #392]	@ (8011320 <tcp_close_shutdown+0x1a4>)
 8011196:	4863      	ldr	r0, [pc, #396]	@ (8011324 <tcp_close_shutdown+0x1a8>)
 8011198:	f006 f9b8 	bl	801750c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801119c:	78fb      	ldrb	r3, [r7, #3]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d066      	beq.n	8011270 <tcp_close_shutdown+0xf4>
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	7d1b      	ldrb	r3, [r3, #20]
 80111a6:	2b04      	cmp	r3, #4
 80111a8:	d003      	beq.n	80111b2 <tcp_close_shutdown+0x36>
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	7d1b      	ldrb	r3, [r3, #20]
 80111ae:	2b07      	cmp	r3, #7
 80111b0:	d15e      	bne.n	8011270 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d104      	bne.n	80111c4 <tcp_close_shutdown+0x48>
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80111be:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80111c2:	d055      	beq.n	8011270 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	8b5b      	ldrh	r3, [r3, #26]
 80111c8:	f003 0310 	and.w	r3, r3, #16
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d106      	bne.n	80111de <tcp_close_shutdown+0x62>
 80111d0:	4b52      	ldr	r3, [pc, #328]	@ (801131c <tcp_close_shutdown+0x1a0>)
 80111d2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80111d6:	4954      	ldr	r1, [pc, #336]	@ (8011328 <tcp_close_shutdown+0x1ac>)
 80111d8:	4852      	ldr	r0, [pc, #328]	@ (8011324 <tcp_close_shutdown+0x1a8>)
 80111da:	f006 f997 	bl	801750c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80111e6:	687d      	ldr	r5, [r7, #4]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	3304      	adds	r3, #4
 80111ec:	687a      	ldr	r2, [r7, #4]
 80111ee:	8ad2      	ldrh	r2, [r2, #22]
 80111f0:	6879      	ldr	r1, [r7, #4]
 80111f2:	8b09      	ldrh	r1, [r1, #24]
 80111f4:	9102      	str	r1, [sp, #8]
 80111f6:	9201      	str	r2, [sp, #4]
 80111f8:	9300      	str	r3, [sp, #0]
 80111fa:	462b      	mov	r3, r5
 80111fc:	4622      	mov	r2, r4
 80111fe:	4601      	mov	r1, r0
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f004 fe8d 	bl	8015f20 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f001 f8c8 	bl	801239c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801120c:	4b47      	ldr	r3, [pc, #284]	@ (801132c <tcp_close_shutdown+0x1b0>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	687a      	ldr	r2, [r7, #4]
 8011212:	429a      	cmp	r2, r3
 8011214:	d105      	bne.n	8011222 <tcp_close_shutdown+0xa6>
 8011216:	4b45      	ldr	r3, [pc, #276]	@ (801132c <tcp_close_shutdown+0x1b0>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	4a43      	ldr	r2, [pc, #268]	@ (801132c <tcp_close_shutdown+0x1b0>)
 801121e:	6013      	str	r3, [r2, #0]
 8011220:	e013      	b.n	801124a <tcp_close_shutdown+0xce>
 8011222:	4b42      	ldr	r3, [pc, #264]	@ (801132c <tcp_close_shutdown+0x1b0>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	60fb      	str	r3, [r7, #12]
 8011228:	e00c      	b.n	8011244 <tcp_close_shutdown+0xc8>
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	68db      	ldr	r3, [r3, #12]
 801122e:	687a      	ldr	r2, [r7, #4]
 8011230:	429a      	cmp	r2, r3
 8011232:	d104      	bne.n	801123e <tcp_close_shutdown+0xc2>
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	68da      	ldr	r2, [r3, #12]
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	60da      	str	r2, [r3, #12]
 801123c:	e005      	b.n	801124a <tcp_close_shutdown+0xce>
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	68db      	ldr	r3, [r3, #12]
 8011242:	60fb      	str	r3, [r7, #12]
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d1ef      	bne.n	801122a <tcp_close_shutdown+0xae>
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	2200      	movs	r2, #0
 801124e:	60da      	str	r2, [r3, #12]
 8011250:	4b37      	ldr	r3, [pc, #220]	@ (8011330 <tcp_close_shutdown+0x1b4>)
 8011252:	2201      	movs	r2, #1
 8011254:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011256:	4b37      	ldr	r3, [pc, #220]	@ (8011334 <tcp_close_shutdown+0x1b8>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	687a      	ldr	r2, [r7, #4]
 801125c:	429a      	cmp	r2, r3
 801125e:	d102      	bne.n	8011266 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011260:	f003 fd5c 	bl	8014d1c <tcp_trigger_input_pcb_close>
 8011264:	e002      	b.n	801126c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f7ff fed6 	bl	8011018 <tcp_free>
      }
      return ERR_OK;
 801126c:	2300      	movs	r3, #0
 801126e:	e050      	b.n	8011312 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	7d1b      	ldrb	r3, [r3, #20]
 8011274:	2b02      	cmp	r3, #2
 8011276:	d03b      	beq.n	80112f0 <tcp_close_shutdown+0x174>
 8011278:	2b02      	cmp	r3, #2
 801127a:	dc44      	bgt.n	8011306 <tcp_close_shutdown+0x18a>
 801127c:	2b00      	cmp	r3, #0
 801127e:	d002      	beq.n	8011286 <tcp_close_shutdown+0x10a>
 8011280:	2b01      	cmp	r3, #1
 8011282:	d02a      	beq.n	80112da <tcp_close_shutdown+0x15e>
 8011284:	e03f      	b.n	8011306 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	8adb      	ldrh	r3, [r3, #22]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d021      	beq.n	80112d2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801128e:	4b2a      	ldr	r3, [pc, #168]	@ (8011338 <tcp_close_shutdown+0x1bc>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	687a      	ldr	r2, [r7, #4]
 8011294:	429a      	cmp	r2, r3
 8011296:	d105      	bne.n	80112a4 <tcp_close_shutdown+0x128>
 8011298:	4b27      	ldr	r3, [pc, #156]	@ (8011338 <tcp_close_shutdown+0x1bc>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	68db      	ldr	r3, [r3, #12]
 801129e:	4a26      	ldr	r2, [pc, #152]	@ (8011338 <tcp_close_shutdown+0x1bc>)
 80112a0:	6013      	str	r3, [r2, #0]
 80112a2:	e013      	b.n	80112cc <tcp_close_shutdown+0x150>
 80112a4:	4b24      	ldr	r3, [pc, #144]	@ (8011338 <tcp_close_shutdown+0x1bc>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	60bb      	str	r3, [r7, #8]
 80112aa:	e00c      	b.n	80112c6 <tcp_close_shutdown+0x14a>
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	68db      	ldr	r3, [r3, #12]
 80112b0:	687a      	ldr	r2, [r7, #4]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d104      	bne.n	80112c0 <tcp_close_shutdown+0x144>
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	68da      	ldr	r2, [r3, #12]
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	60da      	str	r2, [r3, #12]
 80112be:	e005      	b.n	80112cc <tcp_close_shutdown+0x150>
 80112c0:	68bb      	ldr	r3, [r7, #8]
 80112c2:	68db      	ldr	r3, [r3, #12]
 80112c4:	60bb      	str	r3, [r7, #8]
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d1ef      	bne.n	80112ac <tcp_close_shutdown+0x130>
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2200      	movs	r2, #0
 80112d0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f7ff fea0 	bl	8011018 <tcp_free>
      break;
 80112d8:	e01a      	b.n	8011310 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80112da:	6878      	ldr	r0, [r7, #4]
 80112dc:	f7ff ff14 	bl	8011108 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80112e0:	6879      	ldr	r1, [r7, #4]
 80112e2:	4816      	ldr	r0, [pc, #88]	@ (801133c <tcp_close_shutdown+0x1c0>)
 80112e4:	f001 f8aa 	bl	801243c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f7ff feb1 	bl	8011050 <tcp_free_listen>
      break;
 80112ee:	e00f      	b.n	8011310 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80112f0:	6879      	ldr	r1, [r7, #4]
 80112f2:	480e      	ldr	r0, [pc, #56]	@ (801132c <tcp_close_shutdown+0x1b0>)
 80112f4:	f001 f8a2 	bl	801243c <tcp_pcb_remove>
 80112f8:	4b0d      	ldr	r3, [pc, #52]	@ (8011330 <tcp_close_shutdown+0x1b4>)
 80112fa:	2201      	movs	r2, #1
 80112fc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f7ff fe8a 	bl	8011018 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011304:	e004      	b.n	8011310 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f000 f81a 	bl	8011340 <tcp_close_shutdown_fin>
 801130c:	4603      	mov	r3, r0
 801130e:	e000      	b.n	8011312 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011310:	2300      	movs	r3, #0
}
 8011312:	4618      	mov	r0, r3
 8011314:	3710      	adds	r7, #16
 8011316:	46bd      	mov	sp, r7
 8011318:	bdb0      	pop	{r4, r5, r7, pc}
 801131a:	bf00      	nop
 801131c:	08019da4 	.word	0x08019da4
 8011320:	08019ea4 	.word	0x08019ea4
 8011324:	08019e14 	.word	0x08019e14
 8011328:	08019ec4 	.word	0x08019ec4
 801132c:	24007b7c 	.word	0x24007b7c
 8011330:	24007b84 	.word	0x24007b84
 8011334:	24007bbc 	.word	0x24007bbc
 8011338:	24007b74 	.word	0x24007b74
 801133c:	24007b78 	.word	0x24007b78

08011340 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b084      	sub	sp, #16
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d106      	bne.n	801135c <tcp_close_shutdown_fin+0x1c>
 801134e:	4b2e      	ldr	r3, [pc, #184]	@ (8011408 <tcp_close_shutdown_fin+0xc8>)
 8011350:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8011354:	492d      	ldr	r1, [pc, #180]	@ (801140c <tcp_close_shutdown_fin+0xcc>)
 8011356:	482e      	ldr	r0, [pc, #184]	@ (8011410 <tcp_close_shutdown_fin+0xd0>)
 8011358:	f006 f8d8 	bl	801750c <iprintf>

  switch (pcb->state) {
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	7d1b      	ldrb	r3, [r3, #20]
 8011360:	2b07      	cmp	r3, #7
 8011362:	d020      	beq.n	80113a6 <tcp_close_shutdown_fin+0x66>
 8011364:	2b07      	cmp	r3, #7
 8011366:	dc2b      	bgt.n	80113c0 <tcp_close_shutdown_fin+0x80>
 8011368:	2b03      	cmp	r3, #3
 801136a:	d002      	beq.n	8011372 <tcp_close_shutdown_fin+0x32>
 801136c:	2b04      	cmp	r3, #4
 801136e:	d00d      	beq.n	801138c <tcp_close_shutdown_fin+0x4c>
 8011370:	e026      	b.n	80113c0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011372:	6878      	ldr	r0, [r7, #4]
 8011374:	f003 fee2 	bl	801513c <tcp_send_fin>
 8011378:	4603      	mov	r3, r0
 801137a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801137c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d11f      	bne.n	80113c4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2205      	movs	r2, #5
 8011388:	751a      	strb	r2, [r3, #20]
      }
      break;
 801138a:	e01b      	b.n	80113c4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f003 fed5 	bl	801513c <tcp_send_fin>
 8011392:	4603      	mov	r3, r0
 8011394:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d114      	bne.n	80113c8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	2205      	movs	r2, #5
 80113a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80113a4:	e010      	b.n	80113c8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f003 fec8 	bl	801513c <tcp_send_fin>
 80113ac:	4603      	mov	r3, r0
 80113ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80113b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d109      	bne.n	80113cc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	2209      	movs	r2, #9
 80113bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80113be:	e005      	b.n	80113cc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80113c0:	2300      	movs	r3, #0
 80113c2:	e01c      	b.n	80113fe <tcp_close_shutdown_fin+0xbe>
      break;
 80113c4:	bf00      	nop
 80113c6:	e002      	b.n	80113ce <tcp_close_shutdown_fin+0x8e>
      break;
 80113c8:	bf00      	nop
 80113ca:	e000      	b.n	80113ce <tcp_close_shutdown_fin+0x8e>
      break;
 80113cc:	bf00      	nop
  }

  if (err == ERR_OK) {
 80113ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d103      	bne.n	80113de <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f003 ffee 	bl	80153b8 <tcp_output>
 80113dc:	e00d      	b.n	80113fa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80113de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113e6:	d108      	bne.n	80113fa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	8b5b      	ldrh	r3, [r3, #26]
 80113ec:	f043 0308 	orr.w	r3, r3, #8
 80113f0:	b29a      	uxth	r2, r3
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80113f6:	2300      	movs	r3, #0
 80113f8:	e001      	b.n	80113fe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80113fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80113fe:	4618      	mov	r0, r3
 8011400:	3710      	adds	r7, #16
 8011402:	46bd      	mov	sp, r7
 8011404:	bd80      	pop	{r7, pc}
 8011406:	bf00      	nop
 8011408:	08019da4 	.word	0x08019da4
 801140c:	08019e80 	.word	0x08019e80
 8011410:	08019e14 	.word	0x08019e14

08011414 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b082      	sub	sp, #8
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d109      	bne.n	8011436 <tcp_close+0x22>
 8011422:	4b0f      	ldr	r3, [pc, #60]	@ (8011460 <tcp_close+0x4c>)
 8011424:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8011428:	490e      	ldr	r1, [pc, #56]	@ (8011464 <tcp_close+0x50>)
 801142a:	480f      	ldr	r0, [pc, #60]	@ (8011468 <tcp_close+0x54>)
 801142c:	f006 f86e 	bl	801750c <iprintf>
 8011430:	f06f 030f 	mvn.w	r3, #15
 8011434:	e00f      	b.n	8011456 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	7d1b      	ldrb	r3, [r3, #20]
 801143a:	2b01      	cmp	r3, #1
 801143c:	d006      	beq.n	801144c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	8b5b      	ldrh	r3, [r3, #26]
 8011442:	f043 0310 	orr.w	r3, r3, #16
 8011446:	b29a      	uxth	r2, r3
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801144c:	2101      	movs	r1, #1
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f7ff fe94 	bl	801117c <tcp_close_shutdown>
 8011454:	4603      	mov	r3, r0
}
 8011456:	4618      	mov	r0, r3
 8011458:	3708      	adds	r7, #8
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
 801145e:	bf00      	nop
 8011460:	08019da4 	.word	0x08019da4
 8011464:	08019ee0 	.word	0x08019ee0
 8011468:	08019e14 	.word	0x08019e14

0801146c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b08e      	sub	sp, #56	@ 0x38
 8011470:	af04      	add	r7, sp, #16
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d107      	bne.n	801148c <tcp_abandon+0x20>
 801147c:	4b52      	ldr	r3, [pc, #328]	@ (80115c8 <tcp_abandon+0x15c>)
 801147e:	f240 223d 	movw	r2, #573	@ 0x23d
 8011482:	4952      	ldr	r1, [pc, #328]	@ (80115cc <tcp_abandon+0x160>)
 8011484:	4852      	ldr	r0, [pc, #328]	@ (80115d0 <tcp_abandon+0x164>)
 8011486:	f006 f841 	bl	801750c <iprintf>
 801148a:	e099      	b.n	80115c0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	7d1b      	ldrb	r3, [r3, #20]
 8011490:	2b01      	cmp	r3, #1
 8011492:	d106      	bne.n	80114a2 <tcp_abandon+0x36>
 8011494:	4b4c      	ldr	r3, [pc, #304]	@ (80115c8 <tcp_abandon+0x15c>)
 8011496:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801149a:	494e      	ldr	r1, [pc, #312]	@ (80115d4 <tcp_abandon+0x168>)
 801149c:	484c      	ldr	r0, [pc, #304]	@ (80115d0 <tcp_abandon+0x164>)
 801149e:	f006 f835 	bl	801750c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	7d1b      	ldrb	r3, [r3, #20]
 80114a6:	2b0a      	cmp	r3, #10
 80114a8:	d107      	bne.n	80114ba <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80114aa:	6879      	ldr	r1, [r7, #4]
 80114ac:	484a      	ldr	r0, [pc, #296]	@ (80115d8 <tcp_abandon+0x16c>)
 80114ae:	f000 ffc5 	bl	801243c <tcp_pcb_remove>
    tcp_free(pcb);
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f7ff fdb0 	bl	8011018 <tcp_free>
 80114b8:	e082      	b.n	80115c0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80114ba:	2300      	movs	r3, #0
 80114bc:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80114be:	2300      	movs	r3, #0
 80114c0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80114c6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114cc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80114d4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	691b      	ldr	r3, [r3, #16]
 80114da:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	7d1b      	ldrb	r3, [r3, #20]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d126      	bne.n	8011532 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	8adb      	ldrh	r3, [r3, #22]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d02e      	beq.n	801154a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80114ec:	4b3b      	ldr	r3, [pc, #236]	@ (80115dc <tcp_abandon+0x170>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d105      	bne.n	8011502 <tcp_abandon+0x96>
 80114f6:	4b39      	ldr	r3, [pc, #228]	@ (80115dc <tcp_abandon+0x170>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	4a37      	ldr	r2, [pc, #220]	@ (80115dc <tcp_abandon+0x170>)
 80114fe:	6013      	str	r3, [r2, #0]
 8011500:	e013      	b.n	801152a <tcp_abandon+0xbe>
 8011502:	4b36      	ldr	r3, [pc, #216]	@ (80115dc <tcp_abandon+0x170>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	61fb      	str	r3, [r7, #28]
 8011508:	e00c      	b.n	8011524 <tcp_abandon+0xb8>
 801150a:	69fb      	ldr	r3, [r7, #28]
 801150c:	68db      	ldr	r3, [r3, #12]
 801150e:	687a      	ldr	r2, [r7, #4]
 8011510:	429a      	cmp	r2, r3
 8011512:	d104      	bne.n	801151e <tcp_abandon+0xb2>
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	68da      	ldr	r2, [r3, #12]
 8011518:	69fb      	ldr	r3, [r7, #28]
 801151a:	60da      	str	r2, [r3, #12]
 801151c:	e005      	b.n	801152a <tcp_abandon+0xbe>
 801151e:	69fb      	ldr	r3, [r7, #28]
 8011520:	68db      	ldr	r3, [r3, #12]
 8011522:	61fb      	str	r3, [r7, #28]
 8011524:	69fb      	ldr	r3, [r7, #28]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d1ef      	bne.n	801150a <tcp_abandon+0x9e>
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2200      	movs	r2, #0
 801152e:	60da      	str	r2, [r3, #12]
 8011530:	e00b      	b.n	801154a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	8adb      	ldrh	r3, [r3, #22]
 801153a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801153c:	6879      	ldr	r1, [r7, #4]
 801153e:	4828      	ldr	r0, [pc, #160]	@ (80115e0 <tcp_abandon+0x174>)
 8011540:	f000 ff7c 	bl	801243c <tcp_pcb_remove>
 8011544:	4b27      	ldr	r3, [pc, #156]	@ (80115e4 <tcp_abandon+0x178>)
 8011546:	2201      	movs	r2, #1
 8011548:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801154e:	2b00      	cmp	r3, #0
 8011550:	d004      	beq.n	801155c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011556:	4618      	mov	r0, r3
 8011558:	f000 fd1e 	bl	8011f98 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011560:	2b00      	cmp	r3, #0
 8011562:	d004      	beq.n	801156e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011568:	4618      	mov	r0, r3
 801156a:	f000 fd15 	bl	8011f98 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011572:	2b00      	cmp	r3, #0
 8011574:	d004      	beq.n	8011580 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801157a:	4618      	mov	r0, r3
 801157c:	f000 fd0c 	bl	8011f98 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011582:	2b00      	cmp	r3, #0
 8011584:	d00e      	beq.n	80115a4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011586:	6879      	ldr	r1, [r7, #4]
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	3304      	adds	r3, #4
 801158c:	687a      	ldr	r2, [r7, #4]
 801158e:	8b12      	ldrh	r2, [r2, #24]
 8011590:	9202      	str	r2, [sp, #8]
 8011592:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011594:	9201      	str	r2, [sp, #4]
 8011596:	9300      	str	r3, [sp, #0]
 8011598:	460b      	mov	r3, r1
 801159a:	697a      	ldr	r2, [r7, #20]
 801159c:	69b9      	ldr	r1, [r7, #24]
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f004 fcbe 	bl	8015f20 <tcp_rst>
    }
    last_state = pcb->state;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	7d1b      	ldrb	r3, [r3, #20]
 80115a8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80115aa:	6878      	ldr	r0, [r7, #4]
 80115ac:	f7ff fd34 	bl	8011018 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d004      	beq.n	80115c0 <tcp_abandon+0x154>
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	f06f 010c 	mvn.w	r1, #12
 80115bc:	68f8      	ldr	r0, [r7, #12]
 80115be:	4798      	blx	r3
  }
}
 80115c0:	3728      	adds	r7, #40	@ 0x28
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}
 80115c6:	bf00      	nop
 80115c8:	08019da4 	.word	0x08019da4
 80115cc:	08019f14 	.word	0x08019f14
 80115d0:	08019e14 	.word	0x08019e14
 80115d4:	08019f30 	.word	0x08019f30
 80115d8:	24007b80 	.word	0x24007b80
 80115dc:	24007b74 	.word	0x24007b74
 80115e0:	24007b7c 	.word	0x24007b7c
 80115e4:	24007b84 	.word	0x24007b84

080115e8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80115f0:	2101      	movs	r1, #1
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f7ff ff3a 	bl	801146c <tcp_abandon>
}
 80115f8:	bf00      	nop
 80115fa:	3708      	adds	r7, #8
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}

08011600 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b084      	sub	sp, #16
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d106      	bne.n	801161c <tcp_update_rcv_ann_wnd+0x1c>
 801160e:	4b25      	ldr	r3, [pc, #148]	@ (80116a4 <tcp_update_rcv_ann_wnd+0xa4>)
 8011610:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8011614:	4924      	ldr	r1, [pc, #144]	@ (80116a8 <tcp_update_rcv_ann_wnd+0xa8>)
 8011616:	4825      	ldr	r0, [pc, #148]	@ (80116ac <tcp_update_rcv_ann_wnd+0xac>)
 8011618:	f005 ff78 	bl	801750c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011620:	687a      	ldr	r2, [r7, #4]
 8011622:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011624:	4413      	add	r3, r2
 8011626:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801162c:	687a      	ldr	r2, [r7, #4]
 801162e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8011630:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8011634:	bf28      	it	cs
 8011636:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801163a:	b292      	uxth	r2, r2
 801163c:	4413      	add	r3, r2
 801163e:	68fa      	ldr	r2, [r7, #12]
 8011640:	1ad3      	subs	r3, r2, r3
 8011642:	2b00      	cmp	r3, #0
 8011644:	db08      	blt.n	8011658 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011652:	68fa      	ldr	r2, [r7, #12]
 8011654:	1ad3      	subs	r3, r2, r3
 8011656:	e020      	b.n	801169a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011660:	1ad3      	subs	r3, r2, r3
 8011662:	2b00      	cmp	r3, #0
 8011664:	dd03      	ble.n	801166e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2200      	movs	r2, #0
 801166a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801166c:	e014      	b.n	8011698 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011676:	1ad3      	subs	r3, r2, r3
 8011678:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011680:	d306      	bcc.n	8011690 <tcp_update_rcv_ann_wnd+0x90>
 8011682:	4b08      	ldr	r3, [pc, #32]	@ (80116a4 <tcp_update_rcv_ann_wnd+0xa4>)
 8011684:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8011688:	4909      	ldr	r1, [pc, #36]	@ (80116b0 <tcp_update_rcv_ann_wnd+0xb0>)
 801168a:	4808      	ldr	r0, [pc, #32]	@ (80116ac <tcp_update_rcv_ann_wnd+0xac>)
 801168c:	f005 ff3e 	bl	801750c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	b29a      	uxth	r2, r3
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8011698:	2300      	movs	r3, #0
  }
}
 801169a:	4618      	mov	r0, r3
 801169c:	3710      	adds	r7, #16
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	08019da4 	.word	0x08019da4
 80116a8:	0801a02c 	.word	0x0801a02c
 80116ac:	08019e14 	.word	0x08019e14
 80116b0:	0801a050 	.word	0x0801a050

080116b4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b084      	sub	sp, #16
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
 80116bc:	460b      	mov	r3, r1
 80116be:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d107      	bne.n	80116d6 <tcp_recved+0x22>
 80116c6:	4b1f      	ldr	r3, [pc, #124]	@ (8011744 <tcp_recved+0x90>)
 80116c8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80116cc:	491e      	ldr	r1, [pc, #120]	@ (8011748 <tcp_recved+0x94>)
 80116ce:	481f      	ldr	r0, [pc, #124]	@ (801174c <tcp_recved+0x98>)
 80116d0:	f005 ff1c 	bl	801750c <iprintf>
 80116d4:	e032      	b.n	801173c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	7d1b      	ldrb	r3, [r3, #20]
 80116da:	2b01      	cmp	r3, #1
 80116dc:	d106      	bne.n	80116ec <tcp_recved+0x38>
 80116de:	4b19      	ldr	r3, [pc, #100]	@ (8011744 <tcp_recved+0x90>)
 80116e0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80116e4:	491a      	ldr	r1, [pc, #104]	@ (8011750 <tcp_recved+0x9c>)
 80116e6:	4819      	ldr	r0, [pc, #100]	@ (801174c <tcp_recved+0x98>)
 80116e8:	f005 ff10 	bl	801750c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80116f0:	887b      	ldrh	r3, [r7, #2]
 80116f2:	4413      	add	r3, r2
 80116f4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80116f6:	89fb      	ldrh	r3, [r7, #14]
 80116f8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80116fc:	d804      	bhi.n	8011708 <tcp_recved+0x54>
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011702:	89fa      	ldrh	r2, [r7, #14]
 8011704:	429a      	cmp	r2, r3
 8011706:	d204      	bcs.n	8011712 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801170e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011710:	e002      	b.n	8011718 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	89fa      	ldrh	r2, [r7, #14]
 8011716:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f7ff ff71 	bl	8011600 <tcp_update_rcv_ann_wnd>
 801171e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011726:	d309      	bcc.n	801173c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	8b5b      	ldrh	r3, [r3, #26]
 801172c:	f043 0302 	orr.w	r3, r3, #2
 8011730:	b29a      	uxth	r2, r3
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f003 fe3e 	bl	80153b8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801173c:	3710      	adds	r7, #16
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}
 8011742:	bf00      	nop
 8011744:	08019da4 	.word	0x08019da4
 8011748:	0801a06c 	.word	0x0801a06c
 801174c:	08019e14 	.word	0x08019e14
 8011750:	0801a084 	.word	0x0801a084

08011754 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011754:	b5b0      	push	{r4, r5, r7, lr}
 8011756:	b090      	sub	sp, #64	@ 0x40
 8011758:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801175a:	2300      	movs	r3, #0
 801175c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8011760:	4b95      	ldr	r3, [pc, #596]	@ (80119b8 <tcp_slowtmr+0x264>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	3301      	adds	r3, #1
 8011766:	4a94      	ldr	r2, [pc, #592]	@ (80119b8 <tcp_slowtmr+0x264>)
 8011768:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801176a:	4b94      	ldr	r3, [pc, #592]	@ (80119bc <tcp_slowtmr+0x268>)
 801176c:	781b      	ldrb	r3, [r3, #0]
 801176e:	3301      	adds	r3, #1
 8011770:	b2da      	uxtb	r2, r3
 8011772:	4b92      	ldr	r3, [pc, #584]	@ (80119bc <tcp_slowtmr+0x268>)
 8011774:	701a      	strb	r2, [r3, #0]
 8011776:	e000      	b.n	801177a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8011778:	bf00      	nop
  prev = NULL;
 801177a:	2300      	movs	r3, #0
 801177c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801177e:	4b90      	ldr	r3, [pc, #576]	@ (80119c0 <tcp_slowtmr+0x26c>)
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8011784:	e29d      	b.n	8011cc2 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011788:	7d1b      	ldrb	r3, [r3, #20]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d106      	bne.n	801179c <tcp_slowtmr+0x48>
 801178e:	4b8d      	ldr	r3, [pc, #564]	@ (80119c4 <tcp_slowtmr+0x270>)
 8011790:	f240 42be 	movw	r2, #1214	@ 0x4be
 8011794:	498c      	ldr	r1, [pc, #560]	@ (80119c8 <tcp_slowtmr+0x274>)
 8011796:	488d      	ldr	r0, [pc, #564]	@ (80119cc <tcp_slowtmr+0x278>)
 8011798:	f005 feb8 	bl	801750c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801179c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801179e:	7d1b      	ldrb	r3, [r3, #20]
 80117a0:	2b01      	cmp	r3, #1
 80117a2:	d106      	bne.n	80117b2 <tcp_slowtmr+0x5e>
 80117a4:	4b87      	ldr	r3, [pc, #540]	@ (80119c4 <tcp_slowtmr+0x270>)
 80117a6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80117aa:	4989      	ldr	r1, [pc, #548]	@ (80119d0 <tcp_slowtmr+0x27c>)
 80117ac:	4887      	ldr	r0, [pc, #540]	@ (80119cc <tcp_slowtmr+0x278>)
 80117ae:	f005 fead 	bl	801750c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80117b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117b4:	7d1b      	ldrb	r3, [r3, #20]
 80117b6:	2b0a      	cmp	r3, #10
 80117b8:	d106      	bne.n	80117c8 <tcp_slowtmr+0x74>
 80117ba:	4b82      	ldr	r3, [pc, #520]	@ (80119c4 <tcp_slowtmr+0x270>)
 80117bc:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80117c0:	4984      	ldr	r1, [pc, #528]	@ (80119d4 <tcp_slowtmr+0x280>)
 80117c2:	4882      	ldr	r0, [pc, #520]	@ (80119cc <tcp_slowtmr+0x278>)
 80117c4:	f005 fea2 	bl	801750c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80117c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ca:	7f9a      	ldrb	r2, [r3, #30]
 80117cc:	4b7b      	ldr	r3, [pc, #492]	@ (80119bc <tcp_slowtmr+0x268>)
 80117ce:	781b      	ldrb	r3, [r3, #0]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d105      	bne.n	80117e0 <tcp_slowtmr+0x8c>
      prev = pcb;
 80117d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80117d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117da:	68db      	ldr	r3, [r3, #12]
 80117dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80117de:	e270      	b.n	8011cc2 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 80117e0:	4b76      	ldr	r3, [pc, #472]	@ (80119bc <tcp_slowtmr+0x268>)
 80117e2:	781a      	ldrb	r2, [r3, #0]
 80117e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117e6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80117e8:	2300      	movs	r3, #0
 80117ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80117ee:	2300      	movs	r3, #0
 80117f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80117f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117f6:	7d1b      	ldrb	r3, [r3, #20]
 80117f8:	2b02      	cmp	r3, #2
 80117fa:	d10a      	bne.n	8011812 <tcp_slowtmr+0xbe>
 80117fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011802:	2b05      	cmp	r3, #5
 8011804:	d905      	bls.n	8011812 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8011806:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801180a:	3301      	adds	r3, #1
 801180c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011810:	e11e      	b.n	8011a50 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011814:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011818:	2b0b      	cmp	r3, #11
 801181a:	d905      	bls.n	8011828 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801181c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011820:	3301      	adds	r3, #1
 8011822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011826:	e113      	b.n	8011a50 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8011828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801182a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801182e:	2b00      	cmp	r3, #0
 8011830:	d075      	beq.n	801191e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011836:	2b00      	cmp	r3, #0
 8011838:	d006      	beq.n	8011848 <tcp_slowtmr+0xf4>
 801183a:	4b62      	ldr	r3, [pc, #392]	@ (80119c4 <tcp_slowtmr+0x270>)
 801183c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8011840:	4965      	ldr	r1, [pc, #404]	@ (80119d8 <tcp_slowtmr+0x284>)
 8011842:	4862      	ldr	r0, [pc, #392]	@ (80119cc <tcp_slowtmr+0x278>)
 8011844:	f005 fe62 	bl	801750c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801184a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801184c:	2b00      	cmp	r3, #0
 801184e:	d106      	bne.n	801185e <tcp_slowtmr+0x10a>
 8011850:	4b5c      	ldr	r3, [pc, #368]	@ (80119c4 <tcp_slowtmr+0x270>)
 8011852:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8011856:	4961      	ldr	r1, [pc, #388]	@ (80119dc <tcp_slowtmr+0x288>)
 8011858:	485c      	ldr	r0, [pc, #368]	@ (80119cc <tcp_slowtmr+0x278>)
 801185a:	f005 fe57 	bl	801750c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801185e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011860:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011864:	2b0b      	cmp	r3, #11
 8011866:	d905      	bls.n	8011874 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8011868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801186c:	3301      	adds	r3, #1
 801186e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011872:	e0ed      	b.n	8011a50 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011876:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801187a:	3b01      	subs	r3, #1
 801187c:	4a58      	ldr	r2, [pc, #352]	@ (80119e0 <tcp_slowtmr+0x28c>)
 801187e:	5cd3      	ldrb	r3, [r2, r3]
 8011880:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011884:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8011888:	7c7a      	ldrb	r2, [r7, #17]
 801188a:	429a      	cmp	r2, r3
 801188c:	d907      	bls.n	801189e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801188e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011890:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8011894:	3301      	adds	r3, #1
 8011896:	b2da      	uxtb	r2, r3
 8011898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801189a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801189e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118a0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80118a4:	7c7a      	ldrb	r2, [r7, #17]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	f200 80d2 	bhi.w	8011a50 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80118ac:	2301      	movs	r3, #1
 80118ae:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80118b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d108      	bne.n	80118cc <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80118ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80118bc:	f004 fc24 	bl	8016108 <tcp_zero_window_probe>
 80118c0:	4603      	mov	r3, r0
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d014      	beq.n	80118f0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80118c6:	2300      	movs	r3, #0
 80118c8:	623b      	str	r3, [r7, #32]
 80118ca:	e011      	b.n	80118f0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80118cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80118d2:	4619      	mov	r1, r3
 80118d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80118d6:	f003 fae9 	bl	8014eac <tcp_split_unsent_seg>
 80118da:	4603      	mov	r3, r0
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d107      	bne.n	80118f0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80118e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80118e2:	f003 fd69 	bl	80153b8 <tcp_output>
 80118e6:	4603      	mov	r3, r0
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d101      	bne.n	80118f0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80118ec:	2300      	movs	r3, #0
 80118ee:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80118f0:	6a3b      	ldr	r3, [r7, #32]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	f000 80ac 	beq.w	8011a50 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80118f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118fa:	2200      	movs	r2, #0
 80118fc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011902:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011906:	2b06      	cmp	r3, #6
 8011908:	f200 80a2 	bhi.w	8011a50 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801190c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801190e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011912:	3301      	adds	r3, #1
 8011914:	b2da      	uxtb	r2, r3
 8011916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011918:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801191c:	e098      	b.n	8011a50 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801191e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011920:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011924:	2b00      	cmp	r3, #0
 8011926:	db0f      	blt.n	8011948 <tcp_slowtmr+0x1f4>
 8011928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801192a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801192e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8011932:	4293      	cmp	r3, r2
 8011934:	d008      	beq.n	8011948 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8011936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011938:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801193c:	b29b      	uxth	r3, r3
 801193e:	3301      	adds	r3, #1
 8011940:	b29b      	uxth	r3, r3
 8011942:	b21a      	sxth	r2, r3
 8011944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011946:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8011948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801194a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801194e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011950:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011954:	429a      	cmp	r2, r3
 8011956:	db7b      	blt.n	8011a50 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011958:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801195a:	f004 f821 	bl	80159a0 <tcp_rexmit_rto_prepare>
 801195e:	4603      	mov	r3, r0
 8011960:	2b00      	cmp	r3, #0
 8011962:	d007      	beq.n	8011974 <tcp_slowtmr+0x220>
 8011964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011968:	2b00      	cmp	r3, #0
 801196a:	d171      	bne.n	8011a50 <tcp_slowtmr+0x2fc>
 801196c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801196e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011970:	2b00      	cmp	r3, #0
 8011972:	d06d      	beq.n	8011a50 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8011974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011976:	7d1b      	ldrb	r3, [r3, #20]
 8011978:	2b02      	cmp	r3, #2
 801197a:	d03a      	beq.n	80119f2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801197c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801197e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011982:	2b0c      	cmp	r3, #12
 8011984:	bf28      	it	cs
 8011986:	230c      	movcs	r3, #12
 8011988:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801198a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801198c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011990:	10db      	asrs	r3, r3, #3
 8011992:	b21b      	sxth	r3, r3
 8011994:	461a      	mov	r2, r3
 8011996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011998:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801199c:	4413      	add	r3, r2
 801199e:	7efa      	ldrb	r2, [r7, #27]
 80119a0:	4910      	ldr	r1, [pc, #64]	@ (80119e4 <tcp_slowtmr+0x290>)
 80119a2:	5c8a      	ldrb	r2, [r1, r2]
 80119a4:	4093      	lsls	r3, r2
 80119a6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80119ae:	4293      	cmp	r3, r2
 80119b0:	dc1a      	bgt.n	80119e8 <tcp_slowtmr+0x294>
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	b21a      	sxth	r2, r3
 80119b6:	e019      	b.n	80119ec <tcp_slowtmr+0x298>
 80119b8:	24007b70 	.word	0x24007b70
 80119bc:	24007b86 	.word	0x24007b86
 80119c0:	24007b7c 	.word	0x24007b7c
 80119c4:	08019da4 	.word	0x08019da4
 80119c8:	0801a114 	.word	0x0801a114
 80119cc:	08019e14 	.word	0x08019e14
 80119d0:	0801a140 	.word	0x0801a140
 80119d4:	0801a16c 	.word	0x0801a16c
 80119d8:	0801a19c 	.word	0x0801a19c
 80119dc:	0801a1d0 	.word	0x0801a1d0
 80119e0:	0801b92c 	.word	0x0801b92c
 80119e4:	0801b91c 	.word	0x0801b91c
 80119e8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80119ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80119f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119f4:	2200      	movs	r2, #0
 80119f6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80119f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80119fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011a04:	4293      	cmp	r3, r2
 8011a06:	bf28      	it	cs
 8011a08:	4613      	movcs	r3, r2
 8011a0a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011a0c:	8a7b      	ldrh	r3, [r7, #18]
 8011a0e:	085b      	lsrs	r3, r3, #1
 8011a10:	b29a      	uxth	r2, r3
 8011a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a14:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a1a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011a22:	005b      	lsls	r3, r3, #1
 8011a24:	b29b      	uxth	r3, r3
 8011a26:	429a      	cmp	r2, r3
 8011a28:	d206      	bcs.n	8011a38 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011a2e:	005b      	lsls	r3, r3, #1
 8011a30:	b29a      	uxth	r2, r3
 8011a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a34:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8011a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a3a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8011a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a3e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8011a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a44:	2200      	movs	r2, #0
 8011a46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8011a4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011a4c:	f004 f818 	bl	8015a80 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8011a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a52:	7d1b      	ldrb	r3, [r3, #20]
 8011a54:	2b06      	cmp	r3, #6
 8011a56:	d111      	bne.n	8011a7c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8011a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a5a:	8b5b      	ldrh	r3, [r3, #26]
 8011a5c:	f003 0310 	and.w	r3, r3, #16
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d00b      	beq.n	8011a7c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a64:	4b9c      	ldr	r3, [pc, #624]	@ (8011cd8 <tcp_slowtmr+0x584>)
 8011a66:	681a      	ldr	r2, [r3, #0]
 8011a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a6a:	6a1b      	ldr	r3, [r3, #32]
 8011a6c:	1ad3      	subs	r3, r2, r3
 8011a6e:	2b28      	cmp	r3, #40	@ 0x28
 8011a70:	d904      	bls.n	8011a7c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8011a72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a76:	3301      	adds	r3, #1
 8011a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a7e:	7a5b      	ldrb	r3, [r3, #9]
 8011a80:	f003 0308 	and.w	r3, r3, #8
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d04a      	beq.n	8011b1e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8011a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a8a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011a8c:	2b04      	cmp	r3, #4
 8011a8e:	d003      	beq.n	8011a98 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8011a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a92:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011a94:	2b07      	cmp	r3, #7
 8011a96:	d142      	bne.n	8011b1e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a98:	4b8f      	ldr	r3, [pc, #572]	@ (8011cd8 <tcp_slowtmr+0x584>)
 8011a9a:	681a      	ldr	r2, [r3, #0]
 8011a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a9e:	6a1b      	ldr	r3, [r3, #32]
 8011aa0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aa4:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8011aa8:	4b8c      	ldr	r3, [pc, #560]	@ (8011cdc <tcp_slowtmr+0x588>)
 8011aaa:	440b      	add	r3, r1
 8011aac:	498c      	ldr	r1, [pc, #560]	@ (8011ce0 <tcp_slowtmr+0x58c>)
 8011aae:	fba1 1303 	umull	r1, r3, r1, r3
 8011ab2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d90a      	bls.n	8011ace <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8011ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011abc:	3301      	adds	r3, #1
 8011abe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8011ac2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011ac6:	3301      	adds	r3, #1
 8011ac8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011acc:	e027      	b.n	8011b1e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011ace:	4b82      	ldr	r3, [pc, #520]	@ (8011cd8 <tcp_slowtmr+0x584>)
 8011ad0:	681a      	ldr	r2, [r3, #0]
 8011ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ad4:	6a1b      	ldr	r3, [r3, #32]
 8011ad6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ada:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8011ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ae0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	4b7f      	ldr	r3, [pc, #508]	@ (8011ce4 <tcp_slowtmr+0x590>)
 8011ae8:	fb00 f303 	mul.w	r3, r0, r3
 8011aec:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011aee:	497c      	ldr	r1, [pc, #496]	@ (8011ce0 <tcp_slowtmr+0x58c>)
 8011af0:	fba1 1303 	umull	r1, r3, r1, r3
 8011af4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d911      	bls.n	8011b1e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8011afa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011afc:	f004 fac4 	bl	8016088 <tcp_keepalive>
 8011b00:	4603      	mov	r3, r0
 8011b02:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8011b06:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d107      	bne.n	8011b1e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8011b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b10:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8011b14:	3301      	adds	r3, #1
 8011b16:	b2da      	uxtb	r2, r3
 8011b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b1a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8011b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d011      	beq.n	8011b4a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011b26:	4b6c      	ldr	r3, [pc, #432]	@ (8011cd8 <tcp_slowtmr+0x584>)
 8011b28:	681a      	ldr	r2, [r3, #0]
 8011b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b2c:	6a1b      	ldr	r3, [r3, #32]
 8011b2e:	1ad2      	subs	r2, r2, r3
 8011b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b32:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011b36:	4619      	mov	r1, r3
 8011b38:	460b      	mov	r3, r1
 8011b3a:	005b      	lsls	r3, r3, #1
 8011b3c:	440b      	add	r3, r1
 8011b3e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011b40:	429a      	cmp	r2, r3
 8011b42:	d302      	bcc.n	8011b4a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8011b44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011b46:	f000 fddd 	bl	8012704 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8011b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b4c:	7d1b      	ldrb	r3, [r3, #20]
 8011b4e:	2b03      	cmp	r3, #3
 8011b50:	d10b      	bne.n	8011b6a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011b52:	4b61      	ldr	r3, [pc, #388]	@ (8011cd8 <tcp_slowtmr+0x584>)
 8011b54:	681a      	ldr	r2, [r3, #0]
 8011b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b58:	6a1b      	ldr	r3, [r3, #32]
 8011b5a:	1ad3      	subs	r3, r2, r3
 8011b5c:	2b28      	cmp	r3, #40	@ 0x28
 8011b5e:	d904      	bls.n	8011b6a <tcp_slowtmr+0x416>
        ++pcb_remove;
 8011b60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011b64:	3301      	adds	r3, #1
 8011b66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8011b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b6c:	7d1b      	ldrb	r3, [r3, #20]
 8011b6e:	2b09      	cmp	r3, #9
 8011b70:	d10b      	bne.n	8011b8a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011b72:	4b59      	ldr	r3, [pc, #356]	@ (8011cd8 <tcp_slowtmr+0x584>)
 8011b74:	681a      	ldr	r2, [r3, #0]
 8011b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b78:	6a1b      	ldr	r3, [r3, #32]
 8011b7a:	1ad3      	subs	r3, r2, r3
 8011b7c:	2bf0      	cmp	r3, #240	@ 0xf0
 8011b7e:	d904      	bls.n	8011b8a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8011b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011b84:	3301      	adds	r3, #1
 8011b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8011b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d060      	beq.n	8011c54 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8011b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b98:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8011b9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011b9c:	f000 fbfe 	bl	801239c <tcp_pcb_purge>
      if (prev != NULL) {
 8011ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d010      	beq.n	8011bc8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011ba6:	4b50      	ldr	r3, [pc, #320]	@ (8011ce8 <tcp_slowtmr+0x594>)
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d106      	bne.n	8011bbe <tcp_slowtmr+0x46a>
 8011bb0:	4b4e      	ldr	r3, [pc, #312]	@ (8011cec <tcp_slowtmr+0x598>)
 8011bb2:	f240 526d 	movw	r2, #1389	@ 0x56d
 8011bb6:	494e      	ldr	r1, [pc, #312]	@ (8011cf0 <tcp_slowtmr+0x59c>)
 8011bb8:	484e      	ldr	r0, [pc, #312]	@ (8011cf4 <tcp_slowtmr+0x5a0>)
 8011bba:	f005 fca7 	bl	801750c <iprintf>
        prev->next = pcb->next;
 8011bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bc0:	68da      	ldr	r2, [r3, #12]
 8011bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bc4:	60da      	str	r2, [r3, #12]
 8011bc6:	e00f      	b.n	8011be8 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011bc8:	4b47      	ldr	r3, [pc, #284]	@ (8011ce8 <tcp_slowtmr+0x594>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d006      	beq.n	8011be0 <tcp_slowtmr+0x48c>
 8011bd2:	4b46      	ldr	r3, [pc, #280]	@ (8011cec <tcp_slowtmr+0x598>)
 8011bd4:	f240 5271 	movw	r2, #1393	@ 0x571
 8011bd8:	4947      	ldr	r1, [pc, #284]	@ (8011cf8 <tcp_slowtmr+0x5a4>)
 8011bda:	4846      	ldr	r0, [pc, #280]	@ (8011cf4 <tcp_slowtmr+0x5a0>)
 8011bdc:	f005 fc96 	bl	801750c <iprintf>
        tcp_active_pcbs = pcb->next;
 8011be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011be2:	68db      	ldr	r3, [r3, #12]
 8011be4:	4a40      	ldr	r2, [pc, #256]	@ (8011ce8 <tcp_slowtmr+0x594>)
 8011be6:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8011be8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d013      	beq.n	8011c18 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bf2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8011bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bf6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011bf8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8011bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bfc:	3304      	adds	r3, #4
 8011bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c00:	8ad2      	ldrh	r2, [r2, #22]
 8011c02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011c04:	8b09      	ldrh	r1, [r1, #24]
 8011c06:	9102      	str	r1, [sp, #8]
 8011c08:	9201      	str	r2, [sp, #4]
 8011c0a:	9300      	str	r3, [sp, #0]
 8011c0c:	462b      	mov	r3, r5
 8011c0e:	4622      	mov	r2, r4
 8011c10:	4601      	mov	r1, r0
 8011c12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011c14:	f004 f984 	bl	8015f20 <tcp_rst>
      err_arg = pcb->callback_arg;
 8011c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c1a:	691b      	ldr	r3, [r3, #16]
 8011c1c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c20:	7d1b      	ldrb	r3, [r3, #20]
 8011c22:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c26:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c2a:	68db      	ldr	r3, [r3, #12]
 8011c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8011c2e:	6838      	ldr	r0, [r7, #0]
 8011c30:	f7ff f9f2 	bl	8011018 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8011c34:	4b31      	ldr	r3, [pc, #196]	@ (8011cfc <tcp_slowtmr+0x5a8>)
 8011c36:	2200      	movs	r2, #0
 8011c38:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d004      	beq.n	8011c4a <tcp_slowtmr+0x4f6>
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	f06f 010c 	mvn.w	r1, #12
 8011c46:	68b8      	ldr	r0, [r7, #8]
 8011c48:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8011cfc <tcp_slowtmr+0x5a8>)
 8011c4c:	781b      	ldrb	r3, [r3, #0]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d037      	beq.n	8011cc2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8011c52:	e592      	b.n	801177a <tcp_slowtmr+0x26>
      prev = pcb;
 8011c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c56:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c5a:	68db      	ldr	r3, [r3, #12]
 8011c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8011c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c60:	7f1b      	ldrb	r3, [r3, #28]
 8011c62:	3301      	adds	r3, #1
 8011c64:	b2da      	uxtb	r2, r3
 8011c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c68:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c6c:	7f1a      	ldrb	r2, [r3, #28]
 8011c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c70:	7f5b      	ldrb	r3, [r3, #29]
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d325      	bcc.n	8011cc2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8011c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c78:	2200      	movs	r2, #0
 8011c7a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8011c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8011cfc <tcp_slowtmr+0x5a8>)
 8011c7e:	2200      	movs	r2, #0
 8011c80:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d00b      	beq.n	8011ca4 <tcp_slowtmr+0x550>
 8011c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011c92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011c94:	6912      	ldr	r2, [r2, #16]
 8011c96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011c98:	4610      	mov	r0, r2
 8011c9a:	4798      	blx	r3
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8011ca2:	e002      	b.n	8011caa <tcp_slowtmr+0x556>
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8011caa:	4b14      	ldr	r3, [pc, #80]	@ (8011cfc <tcp_slowtmr+0x5a8>)
 8011cac:	781b      	ldrb	r3, [r3, #0]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	f47f ad62 	bne.w	8011778 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011cb4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d102      	bne.n	8011cc2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8011cbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011cbe:	f003 fb7b 	bl	80153b8 <tcp_output>
  while (pcb != NULL) {
 8011cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	f47f ad5e 	bne.w	8011786 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8011cce:	4b0c      	ldr	r3, [pc, #48]	@ (8011d00 <tcp_slowtmr+0x5ac>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8011cd4:	e069      	b.n	8011daa <tcp_slowtmr+0x656>
 8011cd6:	bf00      	nop
 8011cd8:	24007b70 	.word	0x24007b70
 8011cdc:	000a4cb8 	.word	0x000a4cb8
 8011ce0:	10624dd3 	.word	0x10624dd3
 8011ce4:	000124f8 	.word	0x000124f8
 8011ce8:	24007b7c 	.word	0x24007b7c
 8011cec:	08019da4 	.word	0x08019da4
 8011cf0:	0801a208 	.word	0x0801a208
 8011cf4:	08019e14 	.word	0x08019e14
 8011cf8:	0801a234 	.word	0x0801a234
 8011cfc:	24007b84 	.word	0x24007b84
 8011d00:	24007b80 	.word	0x24007b80
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d06:	7d1b      	ldrb	r3, [r3, #20]
 8011d08:	2b0a      	cmp	r3, #10
 8011d0a:	d006      	beq.n	8011d1a <tcp_slowtmr+0x5c6>
 8011d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8011dbc <tcp_slowtmr+0x668>)
 8011d0e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8011d12:	492b      	ldr	r1, [pc, #172]	@ (8011dc0 <tcp_slowtmr+0x66c>)
 8011d14:	482b      	ldr	r0, [pc, #172]	@ (8011dc4 <tcp_slowtmr+0x670>)
 8011d16:	f005 fbf9 	bl	801750c <iprintf>
    pcb_remove = 0;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011d20:	4b29      	ldr	r3, [pc, #164]	@ (8011dc8 <tcp_slowtmr+0x674>)
 8011d22:	681a      	ldr	r2, [r3, #0]
 8011d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d26:	6a1b      	ldr	r3, [r3, #32]
 8011d28:	1ad3      	subs	r3, r2, r3
 8011d2a:	2bf0      	cmp	r3, #240	@ 0xf0
 8011d2c:	d904      	bls.n	8011d38 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8011d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d32:	3301      	adds	r3, #1
 8011d34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011d38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d02f      	beq.n	8011da0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011d40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011d42:	f000 fb2b 	bl	801239c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d010      	beq.n	8011d6e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8011dcc <tcp_slowtmr+0x678>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011d52:	429a      	cmp	r2, r3
 8011d54:	d106      	bne.n	8011d64 <tcp_slowtmr+0x610>
 8011d56:	4b19      	ldr	r3, [pc, #100]	@ (8011dbc <tcp_slowtmr+0x668>)
 8011d58:	f240 52af 	movw	r2, #1455	@ 0x5af
 8011d5c:	491c      	ldr	r1, [pc, #112]	@ (8011dd0 <tcp_slowtmr+0x67c>)
 8011d5e:	4819      	ldr	r0, [pc, #100]	@ (8011dc4 <tcp_slowtmr+0x670>)
 8011d60:	f005 fbd4 	bl	801750c <iprintf>
        prev->next = pcb->next;
 8011d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d66:	68da      	ldr	r2, [r3, #12]
 8011d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d6a:	60da      	str	r2, [r3, #12]
 8011d6c:	e00f      	b.n	8011d8e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011d6e:	4b17      	ldr	r3, [pc, #92]	@ (8011dcc <tcp_slowtmr+0x678>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d006      	beq.n	8011d86 <tcp_slowtmr+0x632>
 8011d78:	4b10      	ldr	r3, [pc, #64]	@ (8011dbc <tcp_slowtmr+0x668>)
 8011d7a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8011d7e:	4915      	ldr	r1, [pc, #84]	@ (8011dd4 <tcp_slowtmr+0x680>)
 8011d80:	4810      	ldr	r0, [pc, #64]	@ (8011dc4 <tcp_slowtmr+0x670>)
 8011d82:	f005 fbc3 	bl	801750c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d88:	68db      	ldr	r3, [r3, #12]
 8011d8a:	4a10      	ldr	r2, [pc, #64]	@ (8011dcc <tcp_slowtmr+0x678>)
 8011d8c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d90:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d94:	68db      	ldr	r3, [r3, #12]
 8011d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8011d98:	69f8      	ldr	r0, [r7, #28]
 8011d9a:	f7ff f93d 	bl	8011018 <tcp_free>
 8011d9e:	e004      	b.n	8011daa <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8011da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011da2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011da6:	68db      	ldr	r3, [r3, #12]
 8011da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8011daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d1a9      	bne.n	8011d04 <tcp_slowtmr+0x5b0>
    }
  }
}
 8011db0:	bf00      	nop
 8011db2:	bf00      	nop
 8011db4:	3730      	adds	r7, #48	@ 0x30
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bdb0      	pop	{r4, r5, r7, pc}
 8011dba:	bf00      	nop
 8011dbc:	08019da4 	.word	0x08019da4
 8011dc0:	0801a260 	.word	0x0801a260
 8011dc4:	08019e14 	.word	0x08019e14
 8011dc8:	24007b70 	.word	0x24007b70
 8011dcc:	24007b80 	.word	0x24007b80
 8011dd0:	0801a290 	.word	0x0801a290
 8011dd4:	0801a2b8 	.word	0x0801a2b8

08011dd8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b082      	sub	sp, #8
 8011ddc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011dde:	4b2d      	ldr	r3, [pc, #180]	@ (8011e94 <tcp_fasttmr+0xbc>)
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	3301      	adds	r3, #1
 8011de4:	b2da      	uxtb	r2, r3
 8011de6:	4b2b      	ldr	r3, [pc, #172]	@ (8011e94 <tcp_fasttmr+0xbc>)
 8011de8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011dea:	4b2b      	ldr	r3, [pc, #172]	@ (8011e98 <tcp_fasttmr+0xc0>)
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011df0:	e048      	b.n	8011e84 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	7f9a      	ldrb	r2, [r3, #30]
 8011df6:	4b27      	ldr	r3, [pc, #156]	@ (8011e94 <tcp_fasttmr+0xbc>)
 8011df8:	781b      	ldrb	r3, [r3, #0]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d03f      	beq.n	8011e7e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011dfe:	4b25      	ldr	r3, [pc, #148]	@ (8011e94 <tcp_fasttmr+0xbc>)
 8011e00:	781a      	ldrb	r2, [r3, #0]
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	8b5b      	ldrh	r3, [r3, #26]
 8011e0a:	f003 0301 	and.w	r3, r3, #1
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d010      	beq.n	8011e34 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	8b5b      	ldrh	r3, [r3, #26]
 8011e16:	f043 0302 	orr.w	r3, r3, #2
 8011e1a:	b29a      	uxth	r2, r3
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f003 fac9 	bl	80153b8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	8b5b      	ldrh	r3, [r3, #26]
 8011e2a:	f023 0303 	bic.w	r3, r3, #3
 8011e2e:	b29a      	uxth	r2, r3
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	8b5b      	ldrh	r3, [r3, #26]
 8011e38:	f003 0308 	and.w	r3, r3, #8
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d009      	beq.n	8011e54 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	8b5b      	ldrh	r3, [r3, #26]
 8011e44:	f023 0308 	bic.w	r3, r3, #8
 8011e48:	b29a      	uxth	r2, r3
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f7ff fa76 	bl	8011340 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	68db      	ldr	r3, [r3, #12]
 8011e58:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d00a      	beq.n	8011e78 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011e62:	4b0e      	ldr	r3, [pc, #56]	@ (8011e9c <tcp_fasttmr+0xc4>)
 8011e64:	2200      	movs	r2, #0
 8011e66:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011e68:	6878      	ldr	r0, [r7, #4]
 8011e6a:	f000 f819 	bl	8011ea0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8011e9c <tcp_fasttmr+0xc4>)
 8011e70:	781b      	ldrb	r3, [r3, #0]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d000      	beq.n	8011e78 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011e76:	e7b8      	b.n	8011dea <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	607b      	str	r3, [r7, #4]
 8011e7c:	e002      	b.n	8011e84 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	68db      	ldr	r3, [r3, #12]
 8011e82:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d1b3      	bne.n	8011df2 <tcp_fasttmr+0x1a>
    }
  }
}
 8011e8a:	bf00      	nop
 8011e8c:	bf00      	nop
 8011e8e:	3708      	adds	r7, #8
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}
 8011e94:	24007b86 	.word	0x24007b86
 8011e98:	24007b7c 	.word	0x24007b7c
 8011e9c:	24007b84 	.word	0x24007b84

08011ea0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011ea0:	b590      	push	{r4, r7, lr}
 8011ea2:	b085      	sub	sp, #20
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d109      	bne.n	8011ec2 <tcp_process_refused_data+0x22>
 8011eae:	4b37      	ldr	r3, [pc, #220]	@ (8011f8c <tcp_process_refused_data+0xec>)
 8011eb0:	f240 6209 	movw	r2, #1545	@ 0x609
 8011eb4:	4936      	ldr	r1, [pc, #216]	@ (8011f90 <tcp_process_refused_data+0xf0>)
 8011eb6:	4837      	ldr	r0, [pc, #220]	@ (8011f94 <tcp_process_refused_data+0xf4>)
 8011eb8:	f005 fb28 	bl	801750c <iprintf>
 8011ebc:	f06f 030f 	mvn.w	r3, #15
 8011ec0:	e060      	b.n	8011f84 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ec6:	7b5b      	ldrb	r3, [r3, #13]
 8011ec8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ece:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d00b      	beq.n	8011ef8 <tcp_process_refused_data+0x58>
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	6918      	ldr	r0, [r3, #16]
 8011eea:	2300      	movs	r3, #0
 8011eec:	68ba      	ldr	r2, [r7, #8]
 8011eee:	6879      	ldr	r1, [r7, #4]
 8011ef0:	47a0      	blx	r4
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	73fb      	strb	r3, [r7, #15]
 8011ef6:	e007      	b.n	8011f08 <tcp_process_refused_data+0x68>
 8011ef8:	2300      	movs	r3, #0
 8011efa:	68ba      	ldr	r2, [r7, #8]
 8011efc:	6879      	ldr	r1, [r7, #4]
 8011efe:	2000      	movs	r0, #0
 8011f00:	f000 f8a4 	bl	801204c <tcp_recv_null>
 8011f04:	4603      	mov	r3, r0
 8011f06:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d12a      	bne.n	8011f66 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011f10:	7bbb      	ldrb	r3, [r7, #14]
 8011f12:	f003 0320 	and.w	r3, r3, #32
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d033      	beq.n	8011f82 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f1e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011f22:	d005      	beq.n	8011f30 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f28:	3301      	adds	r3, #1
 8011f2a:	b29a      	uxth	r2, r3
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d00b      	beq.n	8011f52 <tcp_process_refused_data+0xb2>
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6918      	ldr	r0, [r3, #16]
 8011f44:	2300      	movs	r3, #0
 8011f46:	2200      	movs	r2, #0
 8011f48:	6879      	ldr	r1, [r7, #4]
 8011f4a:	47a0      	blx	r4
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	73fb      	strb	r3, [r7, #15]
 8011f50:	e001      	b.n	8011f56 <tcp_process_refused_data+0xb6>
 8011f52:	2300      	movs	r3, #0
 8011f54:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f5a:	f113 0f0d 	cmn.w	r3, #13
 8011f5e:	d110      	bne.n	8011f82 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011f60:	f06f 030c 	mvn.w	r3, #12
 8011f64:	e00e      	b.n	8011f84 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f6a:	f113 0f0d 	cmn.w	r3, #13
 8011f6e:	d102      	bne.n	8011f76 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011f70:	f06f 030c 	mvn.w	r3, #12
 8011f74:	e006      	b.n	8011f84 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	68ba      	ldr	r2, [r7, #8]
 8011f7a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8011f7c:	f06f 0304 	mvn.w	r3, #4
 8011f80:	e000      	b.n	8011f84 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011f82:	2300      	movs	r3, #0
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	3714      	adds	r7, #20
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd90      	pop	{r4, r7, pc}
 8011f8c:	08019da4 	.word	0x08019da4
 8011f90:	0801a2e0 	.word	0x0801a2e0
 8011f94:	08019e14 	.word	0x08019e14

08011f98 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b084      	sub	sp, #16
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011fa0:	e007      	b.n	8011fb2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011fa8:	6878      	ldr	r0, [r7, #4]
 8011faa:	f000 f80a 	bl	8011fc2 <tcp_seg_free>
    seg = next;
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d1f4      	bne.n	8011fa2 <tcp_segs_free+0xa>
  }
}
 8011fb8:	bf00      	nop
 8011fba:	bf00      	nop
 8011fbc:	3710      	adds	r7, #16
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}

08011fc2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011fc2:	b580      	push	{r7, lr}
 8011fc4:	b082      	sub	sp, #8
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d00c      	beq.n	8011fea <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d004      	beq.n	8011fe2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	685b      	ldr	r3, [r3, #4]
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f7fe faef 	bl	80105c0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011fe2:	6879      	ldr	r1, [r7, #4]
 8011fe4:	2003      	movs	r0, #3
 8011fe6:	f7fd fc23 	bl	800f830 <memp_free>
  }
}
 8011fea:	bf00      	nop
 8011fec:	3708      	adds	r7, #8
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}
	...

08011ff4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b084      	sub	sp, #16
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d106      	bne.n	8012010 <tcp_seg_copy+0x1c>
 8012002:	4b0f      	ldr	r3, [pc, #60]	@ (8012040 <tcp_seg_copy+0x4c>)
 8012004:	f240 6282 	movw	r2, #1666	@ 0x682
 8012008:	490e      	ldr	r1, [pc, #56]	@ (8012044 <tcp_seg_copy+0x50>)
 801200a:	480f      	ldr	r0, [pc, #60]	@ (8012048 <tcp_seg_copy+0x54>)
 801200c:	f005 fa7e 	bl	801750c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012010:	2003      	movs	r0, #3
 8012012:	f7fd fb97 	bl	800f744 <memp_malloc>
 8012016:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d101      	bne.n	8012022 <tcp_seg_copy+0x2e>
    return NULL;
 801201e:	2300      	movs	r3, #0
 8012020:	e00a      	b.n	8012038 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012022:	2210      	movs	r2, #16
 8012024:	6879      	ldr	r1, [r7, #4]
 8012026:	68f8      	ldr	r0, [r7, #12]
 8012028:	f005 fc9b 	bl	8017962 <memcpy>
  pbuf_ref(cseg->p);
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	685b      	ldr	r3, [r3, #4]
 8012030:	4618      	mov	r0, r3
 8012032:	f7fe fb6b 	bl	801070c <pbuf_ref>
  return cseg;
 8012036:	68fb      	ldr	r3, [r7, #12]
}
 8012038:	4618      	mov	r0, r3
 801203a:	3710      	adds	r7, #16
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	08019da4 	.word	0x08019da4
 8012044:	0801a324 	.word	0x0801a324
 8012048:	08019e14 	.word	0x08019e14

0801204c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b084      	sub	sp, #16
 8012050:	af00      	add	r7, sp, #0
 8012052:	60f8      	str	r0, [r7, #12]
 8012054:	60b9      	str	r1, [r7, #8]
 8012056:	607a      	str	r2, [r7, #4]
 8012058:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d109      	bne.n	8012074 <tcp_recv_null+0x28>
 8012060:	4b12      	ldr	r3, [pc, #72]	@ (80120ac <tcp_recv_null+0x60>)
 8012062:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012066:	4912      	ldr	r1, [pc, #72]	@ (80120b0 <tcp_recv_null+0x64>)
 8012068:	4812      	ldr	r0, [pc, #72]	@ (80120b4 <tcp_recv_null+0x68>)
 801206a:	f005 fa4f 	bl	801750c <iprintf>
 801206e:	f06f 030f 	mvn.w	r3, #15
 8012072:	e016      	b.n	80120a2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d009      	beq.n	801208e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	891b      	ldrh	r3, [r3, #8]
 801207e:	4619      	mov	r1, r3
 8012080:	68b8      	ldr	r0, [r7, #8]
 8012082:	f7ff fb17 	bl	80116b4 <tcp_recved>
    pbuf_free(p);
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f7fe fa9a 	bl	80105c0 <pbuf_free>
 801208c:	e008      	b.n	80120a0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801208e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d104      	bne.n	80120a0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012096:	68b8      	ldr	r0, [r7, #8]
 8012098:	f7ff f9bc 	bl	8011414 <tcp_close>
 801209c:	4603      	mov	r3, r0
 801209e:	e000      	b.n	80120a2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80120a0:	2300      	movs	r3, #0
}
 80120a2:	4618      	mov	r0, r3
 80120a4:	3710      	adds	r7, #16
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}
 80120aa:	bf00      	nop
 80120ac:	08019da4 	.word	0x08019da4
 80120b0:	0801a340 	.word	0x0801a340
 80120b4:	08019e14 	.word	0x08019e14

080120b8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b086      	sub	sp, #24
 80120bc:	af00      	add	r7, sp, #0
 80120be:	4603      	mov	r3, r0
 80120c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80120c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	db01      	blt.n	80120ce <tcp_kill_prio+0x16>
 80120ca:	79fb      	ldrb	r3, [r7, #7]
 80120cc:	e000      	b.n	80120d0 <tcp_kill_prio+0x18>
 80120ce:	237f      	movs	r3, #127	@ 0x7f
 80120d0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80120d2:	7afb      	ldrb	r3, [r7, #11]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d034      	beq.n	8012142 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80120d8:	7afb      	ldrb	r3, [r7, #11]
 80120da:	3b01      	subs	r3, #1
 80120dc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80120de:	2300      	movs	r3, #0
 80120e0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80120e2:	2300      	movs	r3, #0
 80120e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80120e6:	4b19      	ldr	r3, [pc, #100]	@ (801214c <tcp_kill_prio+0x94>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	617b      	str	r3, [r7, #20]
 80120ec:	e01f      	b.n	801212e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	7d5b      	ldrb	r3, [r3, #21]
 80120f2:	7afa      	ldrb	r2, [r7, #11]
 80120f4:	429a      	cmp	r2, r3
 80120f6:	d80c      	bhi.n	8012112 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80120fc:	7afa      	ldrb	r2, [r7, #11]
 80120fe:	429a      	cmp	r2, r3
 8012100:	d112      	bne.n	8012128 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012102:	4b13      	ldr	r3, [pc, #76]	@ (8012150 <tcp_kill_prio+0x98>)
 8012104:	681a      	ldr	r2, [r3, #0]
 8012106:	697b      	ldr	r3, [r7, #20]
 8012108:	6a1b      	ldr	r3, [r3, #32]
 801210a:	1ad3      	subs	r3, r2, r3
 801210c:	68fa      	ldr	r2, [r7, #12]
 801210e:	429a      	cmp	r2, r3
 8012110:	d80a      	bhi.n	8012128 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012112:	4b0f      	ldr	r3, [pc, #60]	@ (8012150 <tcp_kill_prio+0x98>)
 8012114:	681a      	ldr	r2, [r3, #0]
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	6a1b      	ldr	r3, [r3, #32]
 801211a:	1ad3      	subs	r3, r2, r3
 801211c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801211e:	697b      	ldr	r3, [r7, #20]
 8012120:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	7d5b      	ldrb	r3, [r3, #21]
 8012126:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	68db      	ldr	r3, [r3, #12]
 801212c:	617b      	str	r3, [r7, #20]
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d1dc      	bne.n	80120ee <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012134:	693b      	ldr	r3, [r7, #16]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d004      	beq.n	8012144 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801213a:	6938      	ldr	r0, [r7, #16]
 801213c:	f7ff fa54 	bl	80115e8 <tcp_abort>
 8012140:	e000      	b.n	8012144 <tcp_kill_prio+0x8c>
    return;
 8012142:	bf00      	nop
  }
}
 8012144:	3718      	adds	r7, #24
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}
 801214a:	bf00      	nop
 801214c:	24007b7c 	.word	0x24007b7c
 8012150:	24007b70 	.word	0x24007b70

08012154 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b086      	sub	sp, #24
 8012158:	af00      	add	r7, sp, #0
 801215a:	4603      	mov	r3, r0
 801215c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801215e:	79fb      	ldrb	r3, [r7, #7]
 8012160:	2b08      	cmp	r3, #8
 8012162:	d009      	beq.n	8012178 <tcp_kill_state+0x24>
 8012164:	79fb      	ldrb	r3, [r7, #7]
 8012166:	2b09      	cmp	r3, #9
 8012168:	d006      	beq.n	8012178 <tcp_kill_state+0x24>
 801216a:	4b1a      	ldr	r3, [pc, #104]	@ (80121d4 <tcp_kill_state+0x80>)
 801216c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8012170:	4919      	ldr	r1, [pc, #100]	@ (80121d8 <tcp_kill_state+0x84>)
 8012172:	481a      	ldr	r0, [pc, #104]	@ (80121dc <tcp_kill_state+0x88>)
 8012174:	f005 f9ca 	bl	801750c <iprintf>

  inactivity = 0;
 8012178:	2300      	movs	r3, #0
 801217a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801217c:	2300      	movs	r3, #0
 801217e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012180:	4b17      	ldr	r3, [pc, #92]	@ (80121e0 <tcp_kill_state+0x8c>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	617b      	str	r3, [r7, #20]
 8012186:	e017      	b.n	80121b8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	7d1b      	ldrb	r3, [r3, #20]
 801218c:	79fa      	ldrb	r2, [r7, #7]
 801218e:	429a      	cmp	r2, r3
 8012190:	d10f      	bne.n	80121b2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012192:	4b14      	ldr	r3, [pc, #80]	@ (80121e4 <tcp_kill_state+0x90>)
 8012194:	681a      	ldr	r2, [r3, #0]
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	6a1b      	ldr	r3, [r3, #32]
 801219a:	1ad3      	subs	r3, r2, r3
 801219c:	68fa      	ldr	r2, [r7, #12]
 801219e:	429a      	cmp	r2, r3
 80121a0:	d807      	bhi.n	80121b2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80121a2:	4b10      	ldr	r3, [pc, #64]	@ (80121e4 <tcp_kill_state+0x90>)
 80121a4:	681a      	ldr	r2, [r3, #0]
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	6a1b      	ldr	r3, [r3, #32]
 80121aa:	1ad3      	subs	r3, r2, r3
 80121ac:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80121ae:	697b      	ldr	r3, [r7, #20]
 80121b0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80121b2:	697b      	ldr	r3, [r7, #20]
 80121b4:	68db      	ldr	r3, [r3, #12]
 80121b6:	617b      	str	r3, [r7, #20]
 80121b8:	697b      	ldr	r3, [r7, #20]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d1e4      	bne.n	8012188 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80121be:	693b      	ldr	r3, [r7, #16]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d003      	beq.n	80121cc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80121c4:	2100      	movs	r1, #0
 80121c6:	6938      	ldr	r0, [r7, #16]
 80121c8:	f7ff f950 	bl	801146c <tcp_abandon>
  }
}
 80121cc:	bf00      	nop
 80121ce:	3718      	adds	r7, #24
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}
 80121d4:	08019da4 	.word	0x08019da4
 80121d8:	0801a35c 	.word	0x0801a35c
 80121dc:	08019e14 	.word	0x08019e14
 80121e0:	24007b7c 	.word	0x24007b7c
 80121e4:	24007b70 	.word	0x24007b70

080121e8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b084      	sub	sp, #16
 80121ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80121ee:	2300      	movs	r3, #0
 80121f0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80121f2:	2300      	movs	r3, #0
 80121f4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80121f6:	4b12      	ldr	r3, [pc, #72]	@ (8012240 <tcp_kill_timewait+0x58>)
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	60fb      	str	r3, [r7, #12]
 80121fc:	e012      	b.n	8012224 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80121fe:	4b11      	ldr	r3, [pc, #68]	@ (8012244 <tcp_kill_timewait+0x5c>)
 8012200:	681a      	ldr	r2, [r3, #0]
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	6a1b      	ldr	r3, [r3, #32]
 8012206:	1ad3      	subs	r3, r2, r3
 8012208:	687a      	ldr	r2, [r7, #4]
 801220a:	429a      	cmp	r2, r3
 801220c:	d807      	bhi.n	801221e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801220e:	4b0d      	ldr	r3, [pc, #52]	@ (8012244 <tcp_kill_timewait+0x5c>)
 8012210:	681a      	ldr	r2, [r3, #0]
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	6a1b      	ldr	r3, [r3, #32]
 8012216:	1ad3      	subs	r3, r2, r3
 8012218:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	68db      	ldr	r3, [r3, #12]
 8012222:	60fb      	str	r3, [r7, #12]
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d1e9      	bne.n	80121fe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801222a:	68bb      	ldr	r3, [r7, #8]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d002      	beq.n	8012236 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012230:	68b8      	ldr	r0, [r7, #8]
 8012232:	f7ff f9d9 	bl	80115e8 <tcp_abort>
  }
}
 8012236:	bf00      	nop
 8012238:	3710      	adds	r7, #16
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
 801223e:	bf00      	nop
 8012240:	24007b80 	.word	0x24007b80
 8012244:	24007b70 	.word	0x24007b70

08012248 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801224e:	4b10      	ldr	r3, [pc, #64]	@ (8012290 <tcp_handle_closepend+0x48>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012254:	e014      	b.n	8012280 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	68db      	ldr	r3, [r3, #12]
 801225a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	8b5b      	ldrh	r3, [r3, #26]
 8012260:	f003 0308 	and.w	r3, r3, #8
 8012264:	2b00      	cmp	r3, #0
 8012266:	d009      	beq.n	801227c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	8b5b      	ldrh	r3, [r3, #26]
 801226c:	f023 0308 	bic.w	r3, r3, #8
 8012270:	b29a      	uxth	r2, r3
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f7ff f862 	bl	8011340 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d1e7      	bne.n	8012256 <tcp_handle_closepend+0xe>
  }
}
 8012286:	bf00      	nop
 8012288:	bf00      	nop
 801228a:	3708      	adds	r7, #8
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}
 8012290:	24007b7c 	.word	0x24007b7c

08012294 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b084      	sub	sp, #16
 8012298:	af00      	add	r7, sp, #0
 801229a:	4603      	mov	r3, r0
 801229c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801229e:	2001      	movs	r0, #1
 80122a0:	f7fd fa50 	bl	800f744 <memp_malloc>
 80122a4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d126      	bne.n	80122fa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80122ac:	f7ff ffcc 	bl	8012248 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80122b0:	f7ff ff9a 	bl	80121e8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80122b4:	2001      	movs	r0, #1
 80122b6:	f7fd fa45 	bl	800f744 <memp_malloc>
 80122ba:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d11b      	bne.n	80122fa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80122c2:	2009      	movs	r0, #9
 80122c4:	f7ff ff46 	bl	8012154 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80122c8:	2001      	movs	r0, #1
 80122ca:	f7fd fa3b 	bl	800f744 <memp_malloc>
 80122ce:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d111      	bne.n	80122fa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80122d6:	2008      	movs	r0, #8
 80122d8:	f7ff ff3c 	bl	8012154 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80122dc:	2001      	movs	r0, #1
 80122de:	f7fd fa31 	bl	800f744 <memp_malloc>
 80122e2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d107      	bne.n	80122fa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80122ea:	79fb      	ldrb	r3, [r7, #7]
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7ff fee3 	bl	80120b8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80122f2:	2001      	movs	r0, #1
 80122f4:	f7fd fa26 	bl	800f744 <memp_malloc>
 80122f8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d03f      	beq.n	8012380 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012300:	229c      	movs	r2, #156	@ 0x9c
 8012302:	2100      	movs	r1, #0
 8012304:	68f8      	ldr	r0, [r7, #12]
 8012306:	f005 fa59 	bl	80177bc <memset>
    pcb->prio = prio;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	79fa      	ldrb	r2, [r7, #7]
 801230e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8012316:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8012320:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	22ff      	movs	r2, #255	@ 0xff
 801232e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8012336:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	2206      	movs	r2, #6
 801233c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	2206      	movs	r2, #6
 8012344:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801234c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	2201      	movs	r2, #1
 8012352:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8012356:	4b0d      	ldr	r3, [pc, #52]	@ (801238c <tcp_alloc+0xf8>)
 8012358:	681a      	ldr	r2, [r3, #0]
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801235e:	4b0c      	ldr	r3, [pc, #48]	@ (8012390 <tcp_alloc+0xfc>)
 8012360:	781a      	ldrb	r2, [r3, #0]
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801236c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	4a08      	ldr	r2, [pc, #32]	@ (8012394 <tcp_alloc+0x100>)
 8012374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	4a07      	ldr	r2, [pc, #28]	@ (8012398 <tcp_alloc+0x104>)
 801237c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012380:	68fb      	ldr	r3, [r7, #12]
}
 8012382:	4618      	mov	r0, r3
 8012384:	3710      	adds	r7, #16
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}
 801238a:	bf00      	nop
 801238c:	24007b70 	.word	0x24007b70
 8012390:	24007b86 	.word	0x24007b86
 8012394:	0801204d 	.word	0x0801204d
 8012398:	006ddd00 	.word	0x006ddd00

0801239c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b082      	sub	sp, #8
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d107      	bne.n	80123ba <tcp_pcb_purge+0x1e>
 80123aa:	4b21      	ldr	r3, [pc, #132]	@ (8012430 <tcp_pcb_purge+0x94>)
 80123ac:	f640 0251 	movw	r2, #2129	@ 0x851
 80123b0:	4920      	ldr	r1, [pc, #128]	@ (8012434 <tcp_pcb_purge+0x98>)
 80123b2:	4821      	ldr	r0, [pc, #132]	@ (8012438 <tcp_pcb_purge+0x9c>)
 80123b4:	f005 f8aa 	bl	801750c <iprintf>
 80123b8:	e037      	b.n	801242a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	7d1b      	ldrb	r3, [r3, #20]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d033      	beq.n	801242a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80123c6:	2b0a      	cmp	r3, #10
 80123c8:	d02f      	beq.n	801242a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80123ce:	2b01      	cmp	r3, #1
 80123d0:	d02b      	beq.n	801242a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d007      	beq.n	80123ea <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80123de:	4618      	mov	r0, r3
 80123e0:	f7fe f8ee 	bl	80105c0 <pbuf_free>
      pcb->refused_data = NULL;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2200      	movs	r2, #0
 80123e8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d002      	beq.n	80123f8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f000 f986 	bl	8012704 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80123fe:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012404:	4618      	mov	r0, r3
 8012406:	f7ff fdc7 	bl	8011f98 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801240e:	4618      	mov	r0, r3
 8012410:	f7ff fdc2 	bl	8011f98 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2200      	movs	r2, #0
 8012418:	66da      	str	r2, [r3, #108]	@ 0x6c
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2200      	movs	r2, #0
 8012426:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801242a:	3708      	adds	r7, #8
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}
 8012430:	08019da4 	.word	0x08019da4
 8012434:	0801a41c 	.word	0x0801a41c
 8012438:	08019e14 	.word	0x08019e14

0801243c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b084      	sub	sp, #16
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
 8012444:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d106      	bne.n	801245a <tcp_pcb_remove+0x1e>
 801244c:	4b3e      	ldr	r3, [pc, #248]	@ (8012548 <tcp_pcb_remove+0x10c>)
 801244e:	f640 0283 	movw	r2, #2179	@ 0x883
 8012452:	493e      	ldr	r1, [pc, #248]	@ (801254c <tcp_pcb_remove+0x110>)
 8012454:	483e      	ldr	r0, [pc, #248]	@ (8012550 <tcp_pcb_remove+0x114>)
 8012456:	f005 f859 	bl	801750c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d106      	bne.n	801246e <tcp_pcb_remove+0x32>
 8012460:	4b39      	ldr	r3, [pc, #228]	@ (8012548 <tcp_pcb_remove+0x10c>)
 8012462:	f640 0284 	movw	r2, #2180	@ 0x884
 8012466:	493b      	ldr	r1, [pc, #236]	@ (8012554 <tcp_pcb_remove+0x118>)
 8012468:	4839      	ldr	r0, [pc, #228]	@ (8012550 <tcp_pcb_remove+0x114>)
 801246a:	f005 f84f 	bl	801750c <iprintf>

  TCP_RMV(pcblist, pcb);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	683a      	ldr	r2, [r7, #0]
 8012474:	429a      	cmp	r2, r3
 8012476:	d105      	bne.n	8012484 <tcp_pcb_remove+0x48>
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	68da      	ldr	r2, [r3, #12]
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	601a      	str	r2, [r3, #0]
 8012482:	e013      	b.n	80124ac <tcp_pcb_remove+0x70>
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	60fb      	str	r3, [r7, #12]
 801248a:	e00c      	b.n	80124a6 <tcp_pcb_remove+0x6a>
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	68db      	ldr	r3, [r3, #12]
 8012490:	683a      	ldr	r2, [r7, #0]
 8012492:	429a      	cmp	r2, r3
 8012494:	d104      	bne.n	80124a0 <tcp_pcb_remove+0x64>
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	68da      	ldr	r2, [r3, #12]
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	60da      	str	r2, [r3, #12]
 801249e:	e005      	b.n	80124ac <tcp_pcb_remove+0x70>
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	68db      	ldr	r3, [r3, #12]
 80124a4:	60fb      	str	r3, [r7, #12]
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d1ef      	bne.n	801248c <tcp_pcb_remove+0x50>
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	2200      	movs	r2, #0
 80124b0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80124b2:	6838      	ldr	r0, [r7, #0]
 80124b4:	f7ff ff72 	bl	801239c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	7d1b      	ldrb	r3, [r3, #20]
 80124bc:	2b0a      	cmp	r3, #10
 80124be:	d013      	beq.n	80124e8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80124c4:	2b01      	cmp	r3, #1
 80124c6:	d00f      	beq.n	80124e8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	8b5b      	ldrh	r3, [r3, #26]
 80124cc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d009      	beq.n	80124e8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	8b5b      	ldrh	r3, [r3, #26]
 80124d8:	f043 0302 	orr.w	r3, r3, #2
 80124dc:	b29a      	uxth	r2, r3
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80124e2:	6838      	ldr	r0, [r7, #0]
 80124e4:	f002 ff68 	bl	80153b8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	7d1b      	ldrb	r3, [r3, #20]
 80124ec:	2b01      	cmp	r3, #1
 80124ee:	d020      	beq.n	8012532 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d006      	beq.n	8012506 <tcp_pcb_remove+0xca>
 80124f8:	4b13      	ldr	r3, [pc, #76]	@ (8012548 <tcp_pcb_remove+0x10c>)
 80124fa:	f640 0293 	movw	r2, #2195	@ 0x893
 80124fe:	4916      	ldr	r1, [pc, #88]	@ (8012558 <tcp_pcb_remove+0x11c>)
 8012500:	4813      	ldr	r0, [pc, #76]	@ (8012550 <tcp_pcb_remove+0x114>)
 8012502:	f005 f803 	bl	801750c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801250a:	2b00      	cmp	r3, #0
 801250c:	d006      	beq.n	801251c <tcp_pcb_remove+0xe0>
 801250e:	4b0e      	ldr	r3, [pc, #56]	@ (8012548 <tcp_pcb_remove+0x10c>)
 8012510:	f640 0294 	movw	r2, #2196	@ 0x894
 8012514:	4911      	ldr	r1, [pc, #68]	@ (801255c <tcp_pcb_remove+0x120>)
 8012516:	480e      	ldr	r0, [pc, #56]	@ (8012550 <tcp_pcb_remove+0x114>)
 8012518:	f004 fff8 	bl	801750c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012520:	2b00      	cmp	r3, #0
 8012522:	d006      	beq.n	8012532 <tcp_pcb_remove+0xf6>
 8012524:	4b08      	ldr	r3, [pc, #32]	@ (8012548 <tcp_pcb_remove+0x10c>)
 8012526:	f640 0296 	movw	r2, #2198	@ 0x896
 801252a:	490d      	ldr	r1, [pc, #52]	@ (8012560 <tcp_pcb_remove+0x124>)
 801252c:	4808      	ldr	r0, [pc, #32]	@ (8012550 <tcp_pcb_remove+0x114>)
 801252e:	f004 ffed 	bl	801750c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	2200      	movs	r2, #0
 8012536:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	2200      	movs	r2, #0
 801253c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801253e:	bf00      	nop
 8012540:	3710      	adds	r7, #16
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}
 8012546:	bf00      	nop
 8012548:	08019da4 	.word	0x08019da4
 801254c:	0801a438 	.word	0x0801a438
 8012550:	08019e14 	.word	0x08019e14
 8012554:	0801a454 	.word	0x0801a454
 8012558:	0801a474 	.word	0x0801a474
 801255c:	0801a48c 	.word	0x0801a48c
 8012560:	0801a4a8 	.word	0x0801a4a8

08012564 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b082      	sub	sp, #8
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d106      	bne.n	8012580 <tcp_next_iss+0x1c>
 8012572:	4b0a      	ldr	r3, [pc, #40]	@ (801259c <tcp_next_iss+0x38>)
 8012574:	f640 02af 	movw	r2, #2223	@ 0x8af
 8012578:	4909      	ldr	r1, [pc, #36]	@ (80125a0 <tcp_next_iss+0x3c>)
 801257a:	480a      	ldr	r0, [pc, #40]	@ (80125a4 <tcp_next_iss+0x40>)
 801257c:	f004 ffc6 	bl	801750c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012580:	4b09      	ldr	r3, [pc, #36]	@ (80125a8 <tcp_next_iss+0x44>)
 8012582:	681a      	ldr	r2, [r3, #0]
 8012584:	4b09      	ldr	r3, [pc, #36]	@ (80125ac <tcp_next_iss+0x48>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	4413      	add	r3, r2
 801258a:	4a07      	ldr	r2, [pc, #28]	@ (80125a8 <tcp_next_iss+0x44>)
 801258c:	6013      	str	r3, [r2, #0]
  return iss;
 801258e:	4b06      	ldr	r3, [pc, #24]	@ (80125a8 <tcp_next_iss+0x44>)
 8012590:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8012592:	4618      	mov	r0, r3
 8012594:	3708      	adds	r7, #8
 8012596:	46bd      	mov	sp, r7
 8012598:	bd80      	pop	{r7, pc}
 801259a:	bf00      	nop
 801259c:	08019da4 	.word	0x08019da4
 80125a0:	0801a4c0 	.word	0x0801a4c0
 80125a4:	08019e14 	.word	0x08019e14
 80125a8:	2400004c 	.word	0x2400004c
 80125ac:	24007b70 	.word	0x24007b70

080125b0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b086      	sub	sp, #24
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	4603      	mov	r3, r0
 80125b8:	60b9      	str	r1, [r7, #8]
 80125ba:	607a      	str	r2, [r7, #4]
 80125bc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d106      	bne.n	80125d2 <tcp_eff_send_mss_netif+0x22>
 80125c4:	4b14      	ldr	r3, [pc, #80]	@ (8012618 <tcp_eff_send_mss_netif+0x68>)
 80125c6:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80125ca:	4914      	ldr	r1, [pc, #80]	@ (801261c <tcp_eff_send_mss_netif+0x6c>)
 80125cc:	4814      	ldr	r0, [pc, #80]	@ (8012620 <tcp_eff_send_mss_netif+0x70>)
 80125ce:	f004 ff9d 	bl	801750c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d101      	bne.n	80125dc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80125d8:	89fb      	ldrh	r3, [r7, #14]
 80125da:	e019      	b.n	8012610 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80125e0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80125e2:	8afb      	ldrh	r3, [r7, #22]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d012      	beq.n	801260e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80125e8:	2328      	movs	r3, #40	@ 0x28
 80125ea:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80125ec:	8afa      	ldrh	r2, [r7, #22]
 80125ee:	8abb      	ldrh	r3, [r7, #20]
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d904      	bls.n	80125fe <tcp_eff_send_mss_netif+0x4e>
 80125f4:	8afa      	ldrh	r2, [r7, #22]
 80125f6:	8abb      	ldrh	r3, [r7, #20]
 80125f8:	1ad3      	subs	r3, r2, r3
 80125fa:	b29b      	uxth	r3, r3
 80125fc:	e000      	b.n	8012600 <tcp_eff_send_mss_netif+0x50>
 80125fe:	2300      	movs	r3, #0
 8012600:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012602:	8a7a      	ldrh	r2, [r7, #18]
 8012604:	89fb      	ldrh	r3, [r7, #14]
 8012606:	4293      	cmp	r3, r2
 8012608:	bf28      	it	cs
 801260a:	4613      	movcs	r3, r2
 801260c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801260e:	89fb      	ldrh	r3, [r7, #14]
}
 8012610:	4618      	mov	r0, r3
 8012612:	3718      	adds	r7, #24
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}
 8012618:	08019da4 	.word	0x08019da4
 801261c:	0801a4dc 	.word	0x0801a4dc
 8012620:	08019e14 	.word	0x08019e14

08012624 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b084      	sub	sp, #16
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
 801262c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d119      	bne.n	801266c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012638:	4b10      	ldr	r3, [pc, #64]	@ (801267c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801263a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801263e:	4910      	ldr	r1, [pc, #64]	@ (8012680 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012640:	4810      	ldr	r0, [pc, #64]	@ (8012684 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012642:	f004 ff63 	bl	801750c <iprintf>

  while (pcb != NULL) {
 8012646:	e011      	b.n	801266c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	681a      	ldr	r2, [r3, #0]
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	429a      	cmp	r2, r3
 8012652:	d108      	bne.n	8012666 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801265a:	68f8      	ldr	r0, [r7, #12]
 801265c:	f7fe ffc4 	bl	80115e8 <tcp_abort>
      pcb = next;
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	60fb      	str	r3, [r7, #12]
 8012664:	e002      	b.n	801266c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	68db      	ldr	r3, [r3, #12]
 801266a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d1ea      	bne.n	8012648 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012672:	bf00      	nop
 8012674:	bf00      	nop
 8012676:	3710      	adds	r7, #16
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	08019da4 	.word	0x08019da4
 8012680:	0801a504 	.word	0x0801a504
 8012684:	08019e14 	.word	0x08019e14

08012688 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b084      	sub	sp, #16
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
 8012690:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d02a      	beq.n	80126ee <tcp_netif_ip_addr_changed+0x66>
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d026      	beq.n	80126ee <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80126a0:	4b15      	ldr	r3, [pc, #84]	@ (80126f8 <tcp_netif_ip_addr_changed+0x70>)
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	4619      	mov	r1, r3
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f7ff ffbc 	bl	8012624 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80126ac:	4b13      	ldr	r3, [pc, #76]	@ (80126fc <tcp_netif_ip_addr_changed+0x74>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	4619      	mov	r1, r3
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f7ff ffb6 	bl	8012624 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80126b8:	683b      	ldr	r3, [r7, #0]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d017      	beq.n	80126ee <tcp_netif_ip_addr_changed+0x66>
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d013      	beq.n	80126ee <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80126c6:	4b0e      	ldr	r3, [pc, #56]	@ (8012700 <tcp_netif_ip_addr_changed+0x78>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	60fb      	str	r3, [r7, #12]
 80126cc:	e00c      	b.n	80126e8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	681a      	ldr	r2, [r3, #0]
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d103      	bne.n	80126e2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	681a      	ldr	r2, [r3, #0]
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	68db      	ldr	r3, [r3, #12]
 80126e6:	60fb      	str	r3, [r7, #12]
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d1ef      	bne.n	80126ce <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80126ee:	bf00      	nop
 80126f0:	3710      	adds	r7, #16
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}
 80126f6:	bf00      	nop
 80126f8:	24007b7c 	.word	0x24007b7c
 80126fc:	24007b74 	.word	0x24007b74
 8012700:	24007b78 	.word	0x24007b78

08012704 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b082      	sub	sp, #8
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012710:	2b00      	cmp	r3, #0
 8012712:	d007      	beq.n	8012724 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012718:	4618      	mov	r0, r3
 801271a:	f7ff fc3d 	bl	8011f98 <tcp_segs_free>
    pcb->ooseq = NULL;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2200      	movs	r2, #0
 8012722:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012724:	bf00      	nop
 8012726:	3708      	adds	r7, #8
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}

0801272c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801272c:	b590      	push	{r4, r7, lr}
 801272e:	b08d      	sub	sp, #52	@ 0x34
 8012730:	af04      	add	r7, sp, #16
 8012732:	6078      	str	r0, [r7, #4]
 8012734:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d105      	bne.n	8012748 <tcp_input+0x1c>
 801273c:	4b9b      	ldr	r3, [pc, #620]	@ (80129ac <tcp_input+0x280>)
 801273e:	2283      	movs	r2, #131	@ 0x83
 8012740:	499b      	ldr	r1, [pc, #620]	@ (80129b0 <tcp_input+0x284>)
 8012742:	489c      	ldr	r0, [pc, #624]	@ (80129b4 <tcp_input+0x288>)
 8012744:	f004 fee2 	bl	801750c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	685b      	ldr	r3, [r3, #4]
 801274c:	4a9a      	ldr	r2, [pc, #616]	@ (80129b8 <tcp_input+0x28c>)
 801274e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	895b      	ldrh	r3, [r3, #10]
 8012754:	2b13      	cmp	r3, #19
 8012756:	f240 83d1 	bls.w	8012efc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801275a:	4b98      	ldr	r3, [pc, #608]	@ (80129bc <tcp_input+0x290>)
 801275c:	695b      	ldr	r3, [r3, #20]
 801275e:	4a97      	ldr	r2, [pc, #604]	@ (80129bc <tcp_input+0x290>)
 8012760:	6812      	ldr	r2, [r2, #0]
 8012762:	4611      	mov	r1, r2
 8012764:	4618      	mov	r0, r3
 8012766:	f7fb fc61 	bl	800e02c <ip4_addr_isbroadcast_u32>
 801276a:	4603      	mov	r3, r0
 801276c:	2b00      	cmp	r3, #0
 801276e:	f040 83c7 	bne.w	8012f00 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012772:	4b92      	ldr	r3, [pc, #584]	@ (80129bc <tcp_input+0x290>)
 8012774:	695b      	ldr	r3, [r3, #20]
 8012776:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801277a:	2be0      	cmp	r3, #224	@ 0xe0
 801277c:	f000 83c0 	beq.w	8012f00 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012780:	4b8d      	ldr	r3, [pc, #564]	@ (80129b8 <tcp_input+0x28c>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	899b      	ldrh	r3, [r3, #12]
 8012786:	b29b      	uxth	r3, r3
 8012788:	4618      	mov	r0, r3
 801278a:	f7f7 fcef 	bl	800a16c <lwip_htons>
 801278e:	4603      	mov	r3, r0
 8012790:	0b1b      	lsrs	r3, r3, #12
 8012792:	b29b      	uxth	r3, r3
 8012794:	b2db      	uxtb	r3, r3
 8012796:	009b      	lsls	r3, r3, #2
 8012798:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801279a:	7cbb      	ldrb	r3, [r7, #18]
 801279c:	2b13      	cmp	r3, #19
 801279e:	f240 83b1 	bls.w	8012f04 <tcp_input+0x7d8>
 80127a2:	7cbb      	ldrb	r3, [r7, #18]
 80127a4:	b29a      	uxth	r2, r3
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	891b      	ldrh	r3, [r3, #8]
 80127aa:	429a      	cmp	r2, r3
 80127ac:	f200 83aa 	bhi.w	8012f04 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80127b0:	7cbb      	ldrb	r3, [r7, #18]
 80127b2:	b29b      	uxth	r3, r3
 80127b4:	3b14      	subs	r3, #20
 80127b6:	b29a      	uxth	r2, r3
 80127b8:	4b81      	ldr	r3, [pc, #516]	@ (80129c0 <tcp_input+0x294>)
 80127ba:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80127bc:	4b81      	ldr	r3, [pc, #516]	@ (80129c4 <tcp_input+0x298>)
 80127be:	2200      	movs	r2, #0
 80127c0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	895a      	ldrh	r2, [r3, #10]
 80127c6:	7cbb      	ldrb	r3, [r7, #18]
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d309      	bcc.n	80127e2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80127ce:	4b7c      	ldr	r3, [pc, #496]	@ (80129c0 <tcp_input+0x294>)
 80127d0:	881a      	ldrh	r2, [r3, #0]
 80127d2:	4b7d      	ldr	r3, [pc, #500]	@ (80129c8 <tcp_input+0x29c>)
 80127d4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80127d6:	7cbb      	ldrb	r3, [r7, #18]
 80127d8:	4619      	mov	r1, r3
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f7fd fe6a 	bl	80104b4 <pbuf_remove_header>
 80127e0:	e04e      	b.n	8012880 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d105      	bne.n	80127f6 <tcp_input+0xca>
 80127ea:	4b70      	ldr	r3, [pc, #448]	@ (80129ac <tcp_input+0x280>)
 80127ec:	22c2      	movs	r2, #194	@ 0xc2
 80127ee:	4977      	ldr	r1, [pc, #476]	@ (80129cc <tcp_input+0x2a0>)
 80127f0:	4870      	ldr	r0, [pc, #448]	@ (80129b4 <tcp_input+0x288>)
 80127f2:	f004 fe8b 	bl	801750c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80127f6:	2114      	movs	r1, #20
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f7fd fe5b 	bl	80104b4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	895a      	ldrh	r2, [r3, #10]
 8012802:	4b71      	ldr	r3, [pc, #452]	@ (80129c8 <tcp_input+0x29c>)
 8012804:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012806:	4b6e      	ldr	r3, [pc, #440]	@ (80129c0 <tcp_input+0x294>)
 8012808:	881a      	ldrh	r2, [r3, #0]
 801280a:	4b6f      	ldr	r3, [pc, #444]	@ (80129c8 <tcp_input+0x29c>)
 801280c:	881b      	ldrh	r3, [r3, #0]
 801280e:	1ad3      	subs	r3, r2, r3
 8012810:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012812:	4b6d      	ldr	r3, [pc, #436]	@ (80129c8 <tcp_input+0x29c>)
 8012814:	881b      	ldrh	r3, [r3, #0]
 8012816:	4619      	mov	r1, r3
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f7fd fe4b 	bl	80104b4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	895b      	ldrh	r3, [r3, #10]
 8012824:	8a3a      	ldrh	r2, [r7, #16]
 8012826:	429a      	cmp	r2, r3
 8012828:	f200 836e 	bhi.w	8012f08 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	4a64      	ldr	r2, [pc, #400]	@ (80129c4 <tcp_input+0x298>)
 8012834:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	8a3a      	ldrh	r2, [r7, #16]
 801283c:	4611      	mov	r1, r2
 801283e:	4618      	mov	r0, r3
 8012840:	f7fd fe38 	bl	80104b4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	891a      	ldrh	r2, [r3, #8]
 8012848:	8a3b      	ldrh	r3, [r7, #16]
 801284a:	1ad3      	subs	r3, r2, r3
 801284c:	b29a      	uxth	r2, r3
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	895b      	ldrh	r3, [r3, #10]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d005      	beq.n	8012866 <tcp_input+0x13a>
 801285a:	4b54      	ldr	r3, [pc, #336]	@ (80129ac <tcp_input+0x280>)
 801285c:	22df      	movs	r2, #223	@ 0xdf
 801285e:	495c      	ldr	r1, [pc, #368]	@ (80129d0 <tcp_input+0x2a4>)
 8012860:	4854      	ldr	r0, [pc, #336]	@ (80129b4 <tcp_input+0x288>)
 8012862:	f004 fe53 	bl	801750c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	891a      	ldrh	r2, [r3, #8]
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	891b      	ldrh	r3, [r3, #8]
 8012870:	429a      	cmp	r2, r3
 8012872:	d005      	beq.n	8012880 <tcp_input+0x154>
 8012874:	4b4d      	ldr	r3, [pc, #308]	@ (80129ac <tcp_input+0x280>)
 8012876:	22e0      	movs	r2, #224	@ 0xe0
 8012878:	4956      	ldr	r1, [pc, #344]	@ (80129d4 <tcp_input+0x2a8>)
 801287a:	484e      	ldr	r0, [pc, #312]	@ (80129b4 <tcp_input+0x288>)
 801287c:	f004 fe46 	bl	801750c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012880:	4b4d      	ldr	r3, [pc, #308]	@ (80129b8 <tcp_input+0x28c>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	881b      	ldrh	r3, [r3, #0]
 8012886:	b29b      	uxth	r3, r3
 8012888:	4a4b      	ldr	r2, [pc, #300]	@ (80129b8 <tcp_input+0x28c>)
 801288a:	6814      	ldr	r4, [r2, #0]
 801288c:	4618      	mov	r0, r3
 801288e:	f7f7 fc6d 	bl	800a16c <lwip_htons>
 8012892:	4603      	mov	r3, r0
 8012894:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012896:	4b48      	ldr	r3, [pc, #288]	@ (80129b8 <tcp_input+0x28c>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	885b      	ldrh	r3, [r3, #2]
 801289c:	b29b      	uxth	r3, r3
 801289e:	4a46      	ldr	r2, [pc, #280]	@ (80129b8 <tcp_input+0x28c>)
 80128a0:	6814      	ldr	r4, [r2, #0]
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7f7 fc62 	bl	800a16c <lwip_htons>
 80128a8:	4603      	mov	r3, r0
 80128aa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80128ac:	4b42      	ldr	r3, [pc, #264]	@ (80129b8 <tcp_input+0x28c>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	685b      	ldr	r3, [r3, #4]
 80128b2:	4a41      	ldr	r2, [pc, #260]	@ (80129b8 <tcp_input+0x28c>)
 80128b4:	6814      	ldr	r4, [r2, #0]
 80128b6:	4618      	mov	r0, r3
 80128b8:	f7f7 fc6e 	bl	800a198 <lwip_htonl>
 80128bc:	4603      	mov	r3, r0
 80128be:	6063      	str	r3, [r4, #4]
 80128c0:	6863      	ldr	r3, [r4, #4]
 80128c2:	4a45      	ldr	r2, [pc, #276]	@ (80129d8 <tcp_input+0x2ac>)
 80128c4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80128c6:	4b3c      	ldr	r3, [pc, #240]	@ (80129b8 <tcp_input+0x28c>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	689b      	ldr	r3, [r3, #8]
 80128cc:	4a3a      	ldr	r2, [pc, #232]	@ (80129b8 <tcp_input+0x28c>)
 80128ce:	6814      	ldr	r4, [r2, #0]
 80128d0:	4618      	mov	r0, r3
 80128d2:	f7f7 fc61 	bl	800a198 <lwip_htonl>
 80128d6:	4603      	mov	r3, r0
 80128d8:	60a3      	str	r3, [r4, #8]
 80128da:	68a3      	ldr	r3, [r4, #8]
 80128dc:	4a3f      	ldr	r2, [pc, #252]	@ (80129dc <tcp_input+0x2b0>)
 80128de:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80128e0:	4b35      	ldr	r3, [pc, #212]	@ (80129b8 <tcp_input+0x28c>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	89db      	ldrh	r3, [r3, #14]
 80128e6:	b29b      	uxth	r3, r3
 80128e8:	4a33      	ldr	r2, [pc, #204]	@ (80129b8 <tcp_input+0x28c>)
 80128ea:	6814      	ldr	r4, [r2, #0]
 80128ec:	4618      	mov	r0, r3
 80128ee:	f7f7 fc3d 	bl	800a16c <lwip_htons>
 80128f2:	4603      	mov	r3, r0
 80128f4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80128f6:	4b30      	ldr	r3, [pc, #192]	@ (80129b8 <tcp_input+0x28c>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	899b      	ldrh	r3, [r3, #12]
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	4618      	mov	r0, r3
 8012900:	f7f7 fc34 	bl	800a16c <lwip_htons>
 8012904:	4603      	mov	r3, r0
 8012906:	b2db      	uxtb	r3, r3
 8012908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801290c:	b2da      	uxtb	r2, r3
 801290e:	4b34      	ldr	r3, [pc, #208]	@ (80129e0 <tcp_input+0x2b4>)
 8012910:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	891a      	ldrh	r2, [r3, #8]
 8012916:	4b33      	ldr	r3, [pc, #204]	@ (80129e4 <tcp_input+0x2b8>)
 8012918:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801291a:	4b31      	ldr	r3, [pc, #196]	@ (80129e0 <tcp_input+0x2b4>)
 801291c:	781b      	ldrb	r3, [r3, #0]
 801291e:	f003 0303 	and.w	r3, r3, #3
 8012922:	2b00      	cmp	r3, #0
 8012924:	d00c      	beq.n	8012940 <tcp_input+0x214>
    tcplen++;
 8012926:	4b2f      	ldr	r3, [pc, #188]	@ (80129e4 <tcp_input+0x2b8>)
 8012928:	881b      	ldrh	r3, [r3, #0]
 801292a:	3301      	adds	r3, #1
 801292c:	b29a      	uxth	r2, r3
 801292e:	4b2d      	ldr	r3, [pc, #180]	@ (80129e4 <tcp_input+0x2b8>)
 8012930:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	891a      	ldrh	r2, [r3, #8]
 8012936:	4b2b      	ldr	r3, [pc, #172]	@ (80129e4 <tcp_input+0x2b8>)
 8012938:	881b      	ldrh	r3, [r3, #0]
 801293a:	429a      	cmp	r2, r3
 801293c:	f200 82e6 	bhi.w	8012f0c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012940:	2300      	movs	r3, #0
 8012942:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012944:	4b28      	ldr	r3, [pc, #160]	@ (80129e8 <tcp_input+0x2bc>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	61fb      	str	r3, [r7, #28]
 801294a:	e09d      	b.n	8012a88 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801294c:	69fb      	ldr	r3, [r7, #28]
 801294e:	7d1b      	ldrb	r3, [r3, #20]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d105      	bne.n	8012960 <tcp_input+0x234>
 8012954:	4b15      	ldr	r3, [pc, #84]	@ (80129ac <tcp_input+0x280>)
 8012956:	22fb      	movs	r2, #251	@ 0xfb
 8012958:	4924      	ldr	r1, [pc, #144]	@ (80129ec <tcp_input+0x2c0>)
 801295a:	4816      	ldr	r0, [pc, #88]	@ (80129b4 <tcp_input+0x288>)
 801295c:	f004 fdd6 	bl	801750c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012960:	69fb      	ldr	r3, [r7, #28]
 8012962:	7d1b      	ldrb	r3, [r3, #20]
 8012964:	2b0a      	cmp	r3, #10
 8012966:	d105      	bne.n	8012974 <tcp_input+0x248>
 8012968:	4b10      	ldr	r3, [pc, #64]	@ (80129ac <tcp_input+0x280>)
 801296a:	22fc      	movs	r2, #252	@ 0xfc
 801296c:	4920      	ldr	r1, [pc, #128]	@ (80129f0 <tcp_input+0x2c4>)
 801296e:	4811      	ldr	r0, [pc, #68]	@ (80129b4 <tcp_input+0x288>)
 8012970:	f004 fdcc 	bl	801750c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012974:	69fb      	ldr	r3, [r7, #28]
 8012976:	7d1b      	ldrb	r3, [r3, #20]
 8012978:	2b01      	cmp	r3, #1
 801297a:	d105      	bne.n	8012988 <tcp_input+0x25c>
 801297c:	4b0b      	ldr	r3, [pc, #44]	@ (80129ac <tcp_input+0x280>)
 801297e:	22fd      	movs	r2, #253	@ 0xfd
 8012980:	491c      	ldr	r1, [pc, #112]	@ (80129f4 <tcp_input+0x2c8>)
 8012982:	480c      	ldr	r0, [pc, #48]	@ (80129b4 <tcp_input+0x288>)
 8012984:	f004 fdc2 	bl	801750c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012988:	69fb      	ldr	r3, [r7, #28]
 801298a:	7a1b      	ldrb	r3, [r3, #8]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d033      	beq.n	80129f8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012990:	69fb      	ldr	r3, [r7, #28]
 8012992:	7a1a      	ldrb	r2, [r3, #8]
 8012994:	4b09      	ldr	r3, [pc, #36]	@ (80129bc <tcp_input+0x290>)
 8012996:	685b      	ldr	r3, [r3, #4]
 8012998:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801299c:	3301      	adds	r3, #1
 801299e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80129a0:	429a      	cmp	r2, r3
 80129a2:	d029      	beq.n	80129f8 <tcp_input+0x2cc>
      prev = pcb;
 80129a4:	69fb      	ldr	r3, [r7, #28]
 80129a6:	61bb      	str	r3, [r7, #24]
      continue;
 80129a8:	e06b      	b.n	8012a82 <tcp_input+0x356>
 80129aa:	bf00      	nop
 80129ac:	0801a538 	.word	0x0801a538
 80129b0:	0801a598 	.word	0x0801a598
 80129b4:	0801a5b0 	.word	0x0801a5b0
 80129b8:	24007b98 	.word	0x24007b98
 80129bc:	240048e4 	.word	0x240048e4
 80129c0:	24007b9c 	.word	0x24007b9c
 80129c4:	24007ba0 	.word	0x24007ba0
 80129c8:	24007b9e 	.word	0x24007b9e
 80129cc:	0801a5d8 	.word	0x0801a5d8
 80129d0:	0801a5e8 	.word	0x0801a5e8
 80129d4:	0801a5f4 	.word	0x0801a5f4
 80129d8:	24007ba8 	.word	0x24007ba8
 80129dc:	24007bac 	.word	0x24007bac
 80129e0:	24007bb4 	.word	0x24007bb4
 80129e4:	24007bb2 	.word	0x24007bb2
 80129e8:	24007b7c 	.word	0x24007b7c
 80129ec:	0801a614 	.word	0x0801a614
 80129f0:	0801a63c 	.word	0x0801a63c
 80129f4:	0801a668 	.word	0x0801a668
    }

    if (pcb->remote_port == tcphdr->src &&
 80129f8:	69fb      	ldr	r3, [r7, #28]
 80129fa:	8b1a      	ldrh	r2, [r3, #24]
 80129fc:	4b72      	ldr	r3, [pc, #456]	@ (8012bc8 <tcp_input+0x49c>)
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	881b      	ldrh	r3, [r3, #0]
 8012a02:	b29b      	uxth	r3, r3
 8012a04:	429a      	cmp	r2, r3
 8012a06:	d13a      	bne.n	8012a7e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012a08:	69fb      	ldr	r3, [r7, #28]
 8012a0a:	8ada      	ldrh	r2, [r3, #22]
 8012a0c:	4b6e      	ldr	r3, [pc, #440]	@ (8012bc8 <tcp_input+0x49c>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	885b      	ldrh	r3, [r3, #2]
 8012a12:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012a14:	429a      	cmp	r2, r3
 8012a16:	d132      	bne.n	8012a7e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012a18:	69fb      	ldr	r3, [r7, #28]
 8012a1a:	685a      	ldr	r2, [r3, #4]
 8012a1c:	4b6b      	ldr	r3, [pc, #428]	@ (8012bcc <tcp_input+0x4a0>)
 8012a1e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d12c      	bne.n	8012a7e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012a24:	69fb      	ldr	r3, [r7, #28]
 8012a26:	681a      	ldr	r2, [r3, #0]
 8012a28:	4b68      	ldr	r3, [pc, #416]	@ (8012bcc <tcp_input+0x4a0>)
 8012a2a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	d126      	bne.n	8012a7e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012a30:	69fb      	ldr	r3, [r7, #28]
 8012a32:	68db      	ldr	r3, [r3, #12]
 8012a34:	69fa      	ldr	r2, [r7, #28]
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d106      	bne.n	8012a48 <tcp_input+0x31c>
 8012a3a:	4b65      	ldr	r3, [pc, #404]	@ (8012bd0 <tcp_input+0x4a4>)
 8012a3c:	f240 120d 	movw	r2, #269	@ 0x10d
 8012a40:	4964      	ldr	r1, [pc, #400]	@ (8012bd4 <tcp_input+0x4a8>)
 8012a42:	4865      	ldr	r0, [pc, #404]	@ (8012bd8 <tcp_input+0x4ac>)
 8012a44:	f004 fd62 	bl	801750c <iprintf>
      if (prev != NULL) {
 8012a48:	69bb      	ldr	r3, [r7, #24]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d00a      	beq.n	8012a64 <tcp_input+0x338>
        prev->next = pcb->next;
 8012a4e:	69fb      	ldr	r3, [r7, #28]
 8012a50:	68da      	ldr	r2, [r3, #12]
 8012a52:	69bb      	ldr	r3, [r7, #24]
 8012a54:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012a56:	4b61      	ldr	r3, [pc, #388]	@ (8012bdc <tcp_input+0x4b0>)
 8012a58:	681a      	ldr	r2, [r3, #0]
 8012a5a:	69fb      	ldr	r3, [r7, #28]
 8012a5c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012a5e:	4a5f      	ldr	r2, [pc, #380]	@ (8012bdc <tcp_input+0x4b0>)
 8012a60:	69fb      	ldr	r3, [r7, #28]
 8012a62:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012a64:	69fb      	ldr	r3, [r7, #28]
 8012a66:	68db      	ldr	r3, [r3, #12]
 8012a68:	69fa      	ldr	r2, [r7, #28]
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d111      	bne.n	8012a92 <tcp_input+0x366>
 8012a6e:	4b58      	ldr	r3, [pc, #352]	@ (8012bd0 <tcp_input+0x4a4>)
 8012a70:	f240 1215 	movw	r2, #277	@ 0x115
 8012a74:	495a      	ldr	r1, [pc, #360]	@ (8012be0 <tcp_input+0x4b4>)
 8012a76:	4858      	ldr	r0, [pc, #352]	@ (8012bd8 <tcp_input+0x4ac>)
 8012a78:	f004 fd48 	bl	801750c <iprintf>
      break;
 8012a7c:	e009      	b.n	8012a92 <tcp_input+0x366>
    }
    prev = pcb;
 8012a7e:	69fb      	ldr	r3, [r7, #28]
 8012a80:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a82:	69fb      	ldr	r3, [r7, #28]
 8012a84:	68db      	ldr	r3, [r3, #12]
 8012a86:	61fb      	str	r3, [r7, #28]
 8012a88:	69fb      	ldr	r3, [r7, #28]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	f47f af5e 	bne.w	801294c <tcp_input+0x220>
 8012a90:	e000      	b.n	8012a94 <tcp_input+0x368>
      break;
 8012a92:	bf00      	nop
  }

  if (pcb == NULL) {
 8012a94:	69fb      	ldr	r3, [r7, #28]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	f040 80aa 	bne.w	8012bf0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a9c:	4b51      	ldr	r3, [pc, #324]	@ (8012be4 <tcp_input+0x4b8>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	61fb      	str	r3, [r7, #28]
 8012aa2:	e03f      	b.n	8012b24 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012aa4:	69fb      	ldr	r3, [r7, #28]
 8012aa6:	7d1b      	ldrb	r3, [r3, #20]
 8012aa8:	2b0a      	cmp	r3, #10
 8012aaa:	d006      	beq.n	8012aba <tcp_input+0x38e>
 8012aac:	4b48      	ldr	r3, [pc, #288]	@ (8012bd0 <tcp_input+0x4a4>)
 8012aae:	f240 121f 	movw	r2, #287	@ 0x11f
 8012ab2:	494d      	ldr	r1, [pc, #308]	@ (8012be8 <tcp_input+0x4bc>)
 8012ab4:	4848      	ldr	r0, [pc, #288]	@ (8012bd8 <tcp_input+0x4ac>)
 8012ab6:	f004 fd29 	bl	801750c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012aba:	69fb      	ldr	r3, [r7, #28]
 8012abc:	7a1b      	ldrb	r3, [r3, #8]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d009      	beq.n	8012ad6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012ac2:	69fb      	ldr	r3, [r7, #28]
 8012ac4:	7a1a      	ldrb	r2, [r3, #8]
 8012ac6:	4b41      	ldr	r3, [pc, #260]	@ (8012bcc <tcp_input+0x4a0>)
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012ace:	3301      	adds	r3, #1
 8012ad0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d122      	bne.n	8012b1c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	8b1a      	ldrh	r2, [r3, #24]
 8012ada:	4b3b      	ldr	r3, [pc, #236]	@ (8012bc8 <tcp_input+0x49c>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	881b      	ldrh	r3, [r3, #0]
 8012ae0:	b29b      	uxth	r3, r3
 8012ae2:	429a      	cmp	r2, r3
 8012ae4:	d11b      	bne.n	8012b1e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012ae6:	69fb      	ldr	r3, [r7, #28]
 8012ae8:	8ada      	ldrh	r2, [r3, #22]
 8012aea:	4b37      	ldr	r3, [pc, #220]	@ (8012bc8 <tcp_input+0x49c>)
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	885b      	ldrh	r3, [r3, #2]
 8012af0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d113      	bne.n	8012b1e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012af6:	69fb      	ldr	r3, [r7, #28]
 8012af8:	685a      	ldr	r2, [r3, #4]
 8012afa:	4b34      	ldr	r3, [pc, #208]	@ (8012bcc <tcp_input+0x4a0>)
 8012afc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012afe:	429a      	cmp	r2, r3
 8012b00:	d10d      	bne.n	8012b1e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012b02:	69fb      	ldr	r3, [r7, #28]
 8012b04:	681a      	ldr	r2, [r3, #0]
 8012b06:	4b31      	ldr	r3, [pc, #196]	@ (8012bcc <tcp_input+0x4a0>)
 8012b08:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012b0a:	429a      	cmp	r2, r3
 8012b0c:	d107      	bne.n	8012b1e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012b0e:	69f8      	ldr	r0, [r7, #28]
 8012b10:	f000 fb56 	bl	80131c0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f7fd fd53 	bl	80105c0 <pbuf_free>
        return;
 8012b1a:	e1fd      	b.n	8012f18 <tcp_input+0x7ec>
        continue;
 8012b1c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b1e:	69fb      	ldr	r3, [r7, #28]
 8012b20:	68db      	ldr	r3, [r3, #12]
 8012b22:	61fb      	str	r3, [r7, #28]
 8012b24:	69fb      	ldr	r3, [r7, #28]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d1bc      	bne.n	8012aa4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8012bec <tcp_input+0x4c0>)
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	617b      	str	r3, [r7, #20]
 8012b34:	e02a      	b.n	8012b8c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012b36:	697b      	ldr	r3, [r7, #20]
 8012b38:	7a1b      	ldrb	r3, [r3, #8]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d00c      	beq.n	8012b58 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	7a1a      	ldrb	r2, [r3, #8]
 8012b42:	4b22      	ldr	r3, [pc, #136]	@ (8012bcc <tcp_input+0x4a0>)
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	d002      	beq.n	8012b58 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	61bb      	str	r3, [r7, #24]
        continue;
 8012b56:	e016      	b.n	8012b86 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012b58:	697b      	ldr	r3, [r7, #20]
 8012b5a:	8ada      	ldrh	r2, [r3, #22]
 8012b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8012bc8 <tcp_input+0x49c>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	885b      	ldrh	r3, [r3, #2]
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	429a      	cmp	r2, r3
 8012b66:	d10c      	bne.n	8012b82 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012b68:	697b      	ldr	r3, [r7, #20]
 8012b6a:	681a      	ldr	r2, [r3, #0]
 8012b6c:	4b17      	ldr	r3, [pc, #92]	@ (8012bcc <tcp_input+0x4a0>)
 8012b6e:	695b      	ldr	r3, [r3, #20]
 8012b70:	429a      	cmp	r2, r3
 8012b72:	d00f      	beq.n	8012b94 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012b74:	697b      	ldr	r3, [r7, #20]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d00d      	beq.n	8012b96 <tcp_input+0x46a>
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d009      	beq.n	8012b96 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012b82:	697b      	ldr	r3, [r7, #20]
 8012b84:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	68db      	ldr	r3, [r3, #12]
 8012b8a:	617b      	str	r3, [r7, #20]
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d1d1      	bne.n	8012b36 <tcp_input+0x40a>
 8012b92:	e000      	b.n	8012b96 <tcp_input+0x46a>
            break;
 8012b94:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d029      	beq.n	8012bf0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012b9c:	69bb      	ldr	r3, [r7, #24]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d00a      	beq.n	8012bb8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	68da      	ldr	r2, [r3, #12]
 8012ba6:	69bb      	ldr	r3, [r7, #24]
 8012ba8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012baa:	4b10      	ldr	r3, [pc, #64]	@ (8012bec <tcp_input+0x4c0>)
 8012bac:	681a      	ldr	r2, [r3, #0]
 8012bae:	697b      	ldr	r3, [r7, #20]
 8012bb0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8012bec <tcp_input+0x4c0>)
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012bb8:	6978      	ldr	r0, [r7, #20]
 8012bba:	f000 fa03 	bl	8012fc4 <tcp_listen_input>
      }
      pbuf_free(p);
 8012bbe:	6878      	ldr	r0, [r7, #4]
 8012bc0:	f7fd fcfe 	bl	80105c0 <pbuf_free>
      return;
 8012bc4:	e1a8      	b.n	8012f18 <tcp_input+0x7ec>
 8012bc6:	bf00      	nop
 8012bc8:	24007b98 	.word	0x24007b98
 8012bcc:	240048e4 	.word	0x240048e4
 8012bd0:	0801a538 	.word	0x0801a538
 8012bd4:	0801a690 	.word	0x0801a690
 8012bd8:	0801a5b0 	.word	0x0801a5b0
 8012bdc:	24007b7c 	.word	0x24007b7c
 8012be0:	0801a6bc 	.word	0x0801a6bc
 8012be4:	24007b80 	.word	0x24007b80
 8012be8:	0801a6e8 	.word	0x0801a6e8
 8012bec:	24007b78 	.word	0x24007b78
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012bf0:	69fb      	ldr	r3, [r7, #28]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	f000 8158 	beq.w	8012ea8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012bf8:	4b95      	ldr	r3, [pc, #596]	@ (8012e50 <tcp_input+0x724>)
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	891a      	ldrh	r2, [r3, #8]
 8012c02:	4b93      	ldr	r3, [pc, #588]	@ (8012e50 <tcp_input+0x724>)
 8012c04:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012c06:	4a92      	ldr	r2, [pc, #584]	@ (8012e50 <tcp_input+0x724>)
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012c0c:	4b91      	ldr	r3, [pc, #580]	@ (8012e54 <tcp_input+0x728>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	4a8f      	ldr	r2, [pc, #572]	@ (8012e50 <tcp_input+0x724>)
 8012c12:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012c14:	4b90      	ldr	r3, [pc, #576]	@ (8012e58 <tcp_input+0x72c>)
 8012c16:	2200      	movs	r2, #0
 8012c18:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012c1a:	4b90      	ldr	r3, [pc, #576]	@ (8012e5c <tcp_input+0x730>)
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012c20:	4b8f      	ldr	r3, [pc, #572]	@ (8012e60 <tcp_input+0x734>)
 8012c22:	2200      	movs	r2, #0
 8012c24:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012c26:	4b8f      	ldr	r3, [pc, #572]	@ (8012e64 <tcp_input+0x738>)
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	f003 0308 	and.w	r3, r3, #8
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d006      	beq.n	8012c40 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	7b5b      	ldrb	r3, [r3, #13]
 8012c36:	f043 0301 	orr.w	r3, r3, #1
 8012c3a:	b2da      	uxtb	r2, r3
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012c40:	69fb      	ldr	r3, [r7, #28]
 8012c42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d017      	beq.n	8012c78 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012c48:	69f8      	ldr	r0, [r7, #28]
 8012c4a:	f7ff f929 	bl	8011ea0 <tcp_process_refused_data>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	f113 0f0d 	cmn.w	r3, #13
 8012c54:	d007      	beq.n	8012c66 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012c56:	69fb      	ldr	r3, [r7, #28]
 8012c58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d00c      	beq.n	8012c78 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012c5e:	4b82      	ldr	r3, [pc, #520]	@ (8012e68 <tcp_input+0x73c>)
 8012c60:	881b      	ldrh	r3, [r3, #0]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d008      	beq.n	8012c78 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012c66:	69fb      	ldr	r3, [r7, #28]
 8012c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	f040 80e3 	bne.w	8012e36 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012c70:	69f8      	ldr	r0, [r7, #28]
 8012c72:	f003 f9a7 	bl	8015fc4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012c76:	e0de      	b.n	8012e36 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8012c78:	4a7c      	ldr	r2, [pc, #496]	@ (8012e6c <tcp_input+0x740>)
 8012c7a:	69fb      	ldr	r3, [r7, #28]
 8012c7c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012c7e:	69f8      	ldr	r0, [r7, #28]
 8012c80:	f000 fb18 	bl	80132b4 <tcp_process>
 8012c84:	4603      	mov	r3, r0
 8012c86:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012c88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c8c:	f113 0f0d 	cmn.w	r3, #13
 8012c90:	f000 80d3 	beq.w	8012e3a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8012c94:	4b71      	ldr	r3, [pc, #452]	@ (8012e5c <tcp_input+0x730>)
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	f003 0308 	and.w	r3, r3, #8
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d015      	beq.n	8012ccc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012ca0:	69fb      	ldr	r3, [r7, #28]
 8012ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d008      	beq.n	8012cbc <tcp_input+0x590>
 8012caa:	69fb      	ldr	r3, [r7, #28]
 8012cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012cb0:	69fa      	ldr	r2, [r7, #28]
 8012cb2:	6912      	ldr	r2, [r2, #16]
 8012cb4:	f06f 010d 	mvn.w	r1, #13
 8012cb8:	4610      	mov	r0, r2
 8012cba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012cbc:	69f9      	ldr	r1, [r7, #28]
 8012cbe:	486c      	ldr	r0, [pc, #432]	@ (8012e70 <tcp_input+0x744>)
 8012cc0:	f7ff fbbc 	bl	801243c <tcp_pcb_remove>
        tcp_free(pcb);
 8012cc4:	69f8      	ldr	r0, [r7, #28]
 8012cc6:	f7fe f9a7 	bl	8011018 <tcp_free>
 8012cca:	e0da      	b.n	8012e82 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012ccc:	2300      	movs	r3, #0
 8012cce:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012cd0:	4b63      	ldr	r3, [pc, #396]	@ (8012e60 <tcp_input+0x734>)
 8012cd2:	881b      	ldrh	r3, [r3, #0]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d01d      	beq.n	8012d14 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012cd8:	4b61      	ldr	r3, [pc, #388]	@ (8012e60 <tcp_input+0x734>)
 8012cda:	881b      	ldrh	r3, [r3, #0]
 8012cdc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012cde:	69fb      	ldr	r3, [r7, #28]
 8012ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d00a      	beq.n	8012cfe <tcp_input+0x5d2>
 8012ce8:	69fb      	ldr	r3, [r7, #28]
 8012cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012cee:	69fa      	ldr	r2, [r7, #28]
 8012cf0:	6910      	ldr	r0, [r2, #16]
 8012cf2:	89fa      	ldrh	r2, [r7, #14]
 8012cf4:	69f9      	ldr	r1, [r7, #28]
 8012cf6:	4798      	blx	r3
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	74fb      	strb	r3, [r7, #19]
 8012cfc:	e001      	b.n	8012d02 <tcp_input+0x5d6>
 8012cfe:	2300      	movs	r3, #0
 8012d00:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012d02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012d06:	f113 0f0d 	cmn.w	r3, #13
 8012d0a:	f000 8098 	beq.w	8012e3e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012d0e:	4b54      	ldr	r3, [pc, #336]	@ (8012e60 <tcp_input+0x734>)
 8012d10:	2200      	movs	r2, #0
 8012d12:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012d14:	69f8      	ldr	r0, [r7, #28]
 8012d16:	f000 f915 	bl	8012f44 <tcp_input_delayed_close>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	f040 8090 	bne.w	8012e42 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012d22:	4b4d      	ldr	r3, [pc, #308]	@ (8012e58 <tcp_input+0x72c>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d041      	beq.n	8012dae <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012d2a:	69fb      	ldr	r3, [r7, #28]
 8012d2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d006      	beq.n	8012d40 <tcp_input+0x614>
 8012d32:	4b50      	ldr	r3, [pc, #320]	@ (8012e74 <tcp_input+0x748>)
 8012d34:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8012d38:	494f      	ldr	r1, [pc, #316]	@ (8012e78 <tcp_input+0x74c>)
 8012d3a:	4850      	ldr	r0, [pc, #320]	@ (8012e7c <tcp_input+0x750>)
 8012d3c:	f004 fbe6 	bl	801750c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	8b5b      	ldrh	r3, [r3, #26]
 8012d44:	f003 0310 	and.w	r3, r3, #16
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d008      	beq.n	8012d5e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012d4c:	4b42      	ldr	r3, [pc, #264]	@ (8012e58 <tcp_input+0x72c>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7fd fc35 	bl	80105c0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012d56:	69f8      	ldr	r0, [r7, #28]
 8012d58:	f7fe fc46 	bl	80115e8 <tcp_abort>
            goto aborted;
 8012d5c:	e091      	b.n	8012e82 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d00c      	beq.n	8012d82 <tcp_input+0x656>
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012d6e:	69fb      	ldr	r3, [r7, #28]
 8012d70:	6918      	ldr	r0, [r3, #16]
 8012d72:	4b39      	ldr	r3, [pc, #228]	@ (8012e58 <tcp_input+0x72c>)
 8012d74:	681a      	ldr	r2, [r3, #0]
 8012d76:	2300      	movs	r3, #0
 8012d78:	69f9      	ldr	r1, [r7, #28]
 8012d7a:	47a0      	blx	r4
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	74fb      	strb	r3, [r7, #19]
 8012d80:	e008      	b.n	8012d94 <tcp_input+0x668>
 8012d82:	4b35      	ldr	r3, [pc, #212]	@ (8012e58 <tcp_input+0x72c>)
 8012d84:	681a      	ldr	r2, [r3, #0]
 8012d86:	2300      	movs	r3, #0
 8012d88:	69f9      	ldr	r1, [r7, #28]
 8012d8a:	2000      	movs	r0, #0
 8012d8c:	f7ff f95e 	bl	801204c <tcp_recv_null>
 8012d90:	4603      	mov	r3, r0
 8012d92:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012d94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012d98:	f113 0f0d 	cmn.w	r3, #13
 8012d9c:	d053      	beq.n	8012e46 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012d9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d003      	beq.n	8012dae <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012da6:	4b2c      	ldr	r3, [pc, #176]	@ (8012e58 <tcp_input+0x72c>)
 8012da8:	681a      	ldr	r2, [r3, #0]
 8012daa:	69fb      	ldr	r3, [r7, #28]
 8012dac:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012dae:	4b2b      	ldr	r3, [pc, #172]	@ (8012e5c <tcp_input+0x730>)
 8012db0:	781b      	ldrb	r3, [r3, #0]
 8012db2:	f003 0320 	and.w	r3, r3, #32
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d030      	beq.n	8012e1c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8012dba:	69fb      	ldr	r3, [r7, #28]
 8012dbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d009      	beq.n	8012dd6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012dc2:	69fb      	ldr	r3, [r7, #28]
 8012dc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012dc6:	7b5a      	ldrb	r2, [r3, #13]
 8012dc8:	69fb      	ldr	r3, [r7, #28]
 8012dca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012dcc:	f042 0220 	orr.w	r2, r2, #32
 8012dd0:	b2d2      	uxtb	r2, r2
 8012dd2:	735a      	strb	r2, [r3, #13]
 8012dd4:	e022      	b.n	8012e1c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012dd6:	69fb      	ldr	r3, [r7, #28]
 8012dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012dda:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012dde:	d005      	beq.n	8012dec <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8012de0:	69fb      	ldr	r3, [r7, #28]
 8012de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012de4:	3301      	adds	r3, #1
 8012de6:	b29a      	uxth	r2, r3
 8012de8:	69fb      	ldr	r3, [r7, #28]
 8012dea:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012dec:	69fb      	ldr	r3, [r7, #28]
 8012dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d00b      	beq.n	8012e0e <tcp_input+0x6e2>
 8012df6:	69fb      	ldr	r3, [r7, #28]
 8012df8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012dfc:	69fb      	ldr	r3, [r7, #28]
 8012dfe:	6918      	ldr	r0, [r3, #16]
 8012e00:	2300      	movs	r3, #0
 8012e02:	2200      	movs	r2, #0
 8012e04:	69f9      	ldr	r1, [r7, #28]
 8012e06:	47a0      	blx	r4
 8012e08:	4603      	mov	r3, r0
 8012e0a:	74fb      	strb	r3, [r7, #19]
 8012e0c:	e001      	b.n	8012e12 <tcp_input+0x6e6>
 8012e0e:	2300      	movs	r3, #0
 8012e10:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012e12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e16:	f113 0f0d 	cmn.w	r3, #13
 8012e1a:	d016      	beq.n	8012e4a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012e1c:	4b13      	ldr	r3, [pc, #76]	@ (8012e6c <tcp_input+0x740>)
 8012e1e:	2200      	movs	r2, #0
 8012e20:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012e22:	69f8      	ldr	r0, [r7, #28]
 8012e24:	f000 f88e 	bl	8012f44 <tcp_input_delayed_close>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d128      	bne.n	8012e80 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012e2e:	69f8      	ldr	r0, [r7, #28]
 8012e30:	f002 fac2 	bl	80153b8 <tcp_output>
 8012e34:	e025      	b.n	8012e82 <tcp_input+0x756>
        goto aborted;
 8012e36:	bf00      	nop
 8012e38:	e023      	b.n	8012e82 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012e3a:	bf00      	nop
 8012e3c:	e021      	b.n	8012e82 <tcp_input+0x756>
              goto aborted;
 8012e3e:	bf00      	nop
 8012e40:	e01f      	b.n	8012e82 <tcp_input+0x756>
          goto aborted;
 8012e42:	bf00      	nop
 8012e44:	e01d      	b.n	8012e82 <tcp_input+0x756>
            goto aborted;
 8012e46:	bf00      	nop
 8012e48:	e01b      	b.n	8012e82 <tcp_input+0x756>
              goto aborted;
 8012e4a:	bf00      	nop
 8012e4c:	e019      	b.n	8012e82 <tcp_input+0x756>
 8012e4e:	bf00      	nop
 8012e50:	24007b88 	.word	0x24007b88
 8012e54:	24007b98 	.word	0x24007b98
 8012e58:	24007bb8 	.word	0x24007bb8
 8012e5c:	24007bb5 	.word	0x24007bb5
 8012e60:	24007bb0 	.word	0x24007bb0
 8012e64:	24007bb4 	.word	0x24007bb4
 8012e68:	24007bb2 	.word	0x24007bb2
 8012e6c:	24007bbc 	.word	0x24007bbc
 8012e70:	24007b7c 	.word	0x24007b7c
 8012e74:	0801a538 	.word	0x0801a538
 8012e78:	0801a718 	.word	0x0801a718
 8012e7c:	0801a5b0 	.word	0x0801a5b0
          goto aborted;
 8012e80:	bf00      	nop
    tcp_input_pcb = NULL;
 8012e82:	4b27      	ldr	r3, [pc, #156]	@ (8012f20 <tcp_input+0x7f4>)
 8012e84:	2200      	movs	r2, #0
 8012e86:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012e88:	4b26      	ldr	r3, [pc, #152]	@ (8012f24 <tcp_input+0x7f8>)
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012e8e:	4b26      	ldr	r3, [pc, #152]	@ (8012f28 <tcp_input+0x7fc>)
 8012e90:	685b      	ldr	r3, [r3, #4]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d03f      	beq.n	8012f16 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8012e96:	4b24      	ldr	r3, [pc, #144]	@ (8012f28 <tcp_input+0x7fc>)
 8012e98:	685b      	ldr	r3, [r3, #4]
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7fd fb90 	bl	80105c0 <pbuf_free>
      inseg.p = NULL;
 8012ea0:	4b21      	ldr	r3, [pc, #132]	@ (8012f28 <tcp_input+0x7fc>)
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012ea6:	e036      	b.n	8012f16 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012ea8:	4b20      	ldr	r3, [pc, #128]	@ (8012f2c <tcp_input+0x800>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	899b      	ldrh	r3, [r3, #12]
 8012eae:	b29b      	uxth	r3, r3
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7f7 f95b 	bl	800a16c <lwip_htons>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	b2db      	uxtb	r3, r3
 8012eba:	f003 0304 	and.w	r3, r3, #4
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d118      	bne.n	8012ef4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8012f30 <tcp_input+0x804>)
 8012ec4:	6819      	ldr	r1, [r3, #0]
 8012ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8012f34 <tcp_input+0x808>)
 8012ec8:	881b      	ldrh	r3, [r3, #0]
 8012eca:	461a      	mov	r2, r3
 8012ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8012f38 <tcp_input+0x80c>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ed2:	4b16      	ldr	r3, [pc, #88]	@ (8012f2c <tcp_input+0x800>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ed6:	885b      	ldrh	r3, [r3, #2]
 8012ed8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012eda:	4a14      	ldr	r2, [pc, #80]	@ (8012f2c <tcp_input+0x800>)
 8012edc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ede:	8812      	ldrh	r2, [r2, #0]
 8012ee0:	b292      	uxth	r2, r2
 8012ee2:	9202      	str	r2, [sp, #8]
 8012ee4:	9301      	str	r3, [sp, #4]
 8012ee6:	4b15      	ldr	r3, [pc, #84]	@ (8012f3c <tcp_input+0x810>)
 8012ee8:	9300      	str	r3, [sp, #0]
 8012eea:	4b15      	ldr	r3, [pc, #84]	@ (8012f40 <tcp_input+0x814>)
 8012eec:	4602      	mov	r2, r0
 8012eee:	2000      	movs	r0, #0
 8012ef0:	f003 f816 	bl	8015f20 <tcp_rst>
    pbuf_free(p);
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f7fd fb63 	bl	80105c0 <pbuf_free>
  return;
 8012efa:	e00c      	b.n	8012f16 <tcp_input+0x7ea>
    goto dropped;
 8012efc:	bf00      	nop
 8012efe:	e006      	b.n	8012f0e <tcp_input+0x7e2>
    goto dropped;
 8012f00:	bf00      	nop
 8012f02:	e004      	b.n	8012f0e <tcp_input+0x7e2>
    goto dropped;
 8012f04:	bf00      	nop
 8012f06:	e002      	b.n	8012f0e <tcp_input+0x7e2>
      goto dropped;
 8012f08:	bf00      	nop
 8012f0a:	e000      	b.n	8012f0e <tcp_input+0x7e2>
      goto dropped;
 8012f0c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012f0e:	6878      	ldr	r0, [r7, #4]
 8012f10:	f7fd fb56 	bl	80105c0 <pbuf_free>
 8012f14:	e000      	b.n	8012f18 <tcp_input+0x7ec>
  return;
 8012f16:	bf00      	nop
}
 8012f18:	3724      	adds	r7, #36	@ 0x24
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd90      	pop	{r4, r7, pc}
 8012f1e:	bf00      	nop
 8012f20:	24007bbc 	.word	0x24007bbc
 8012f24:	24007bb8 	.word	0x24007bb8
 8012f28:	24007b88 	.word	0x24007b88
 8012f2c:	24007b98 	.word	0x24007b98
 8012f30:	24007bac 	.word	0x24007bac
 8012f34:	24007bb2 	.word	0x24007bb2
 8012f38:	24007ba8 	.word	0x24007ba8
 8012f3c:	240048f4 	.word	0x240048f4
 8012f40:	240048f8 	.word	0x240048f8

08012f44 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b082      	sub	sp, #8
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d106      	bne.n	8012f60 <tcp_input_delayed_close+0x1c>
 8012f52:	4b17      	ldr	r3, [pc, #92]	@ (8012fb0 <tcp_input_delayed_close+0x6c>)
 8012f54:	f240 225a 	movw	r2, #602	@ 0x25a
 8012f58:	4916      	ldr	r1, [pc, #88]	@ (8012fb4 <tcp_input_delayed_close+0x70>)
 8012f5a:	4817      	ldr	r0, [pc, #92]	@ (8012fb8 <tcp_input_delayed_close+0x74>)
 8012f5c:	f004 fad6 	bl	801750c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012f60:	4b16      	ldr	r3, [pc, #88]	@ (8012fbc <tcp_input_delayed_close+0x78>)
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	f003 0310 	and.w	r3, r3, #16
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d01c      	beq.n	8012fa6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	8b5b      	ldrh	r3, [r3, #26]
 8012f70:	f003 0310 	and.w	r3, r3, #16
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d10d      	bne.n	8012f94 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d008      	beq.n	8012f94 <tcp_input_delayed_close+0x50>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012f88:	687a      	ldr	r2, [r7, #4]
 8012f8a:	6912      	ldr	r2, [r2, #16]
 8012f8c:	f06f 010e 	mvn.w	r1, #14
 8012f90:	4610      	mov	r0, r2
 8012f92:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012f94:	6879      	ldr	r1, [r7, #4]
 8012f96:	480a      	ldr	r0, [pc, #40]	@ (8012fc0 <tcp_input_delayed_close+0x7c>)
 8012f98:	f7ff fa50 	bl	801243c <tcp_pcb_remove>
    tcp_free(pcb);
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f7fe f83b 	bl	8011018 <tcp_free>
    return 1;
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	e000      	b.n	8012fa8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012fa6:	2300      	movs	r3, #0
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	3708      	adds	r7, #8
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}
 8012fb0:	0801a538 	.word	0x0801a538
 8012fb4:	0801a734 	.word	0x0801a734
 8012fb8:	0801a5b0 	.word	0x0801a5b0
 8012fbc:	24007bb5 	.word	0x24007bb5
 8012fc0:	24007b7c 	.word	0x24007b7c

08012fc4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012fc4:	b590      	push	{r4, r7, lr}
 8012fc6:	b08b      	sub	sp, #44	@ 0x2c
 8012fc8:	af04      	add	r7, sp, #16
 8012fca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012fcc:	4b6f      	ldr	r3, [pc, #444]	@ (801318c <tcp_listen_input+0x1c8>)
 8012fce:	781b      	ldrb	r3, [r3, #0]
 8012fd0:	f003 0304 	and.w	r3, r3, #4
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	f040 80d2 	bne.w	801317e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d106      	bne.n	8012fee <tcp_listen_input+0x2a>
 8012fe0:	4b6b      	ldr	r3, [pc, #428]	@ (8013190 <tcp_listen_input+0x1cc>)
 8012fe2:	f240 2281 	movw	r2, #641	@ 0x281
 8012fe6:	496b      	ldr	r1, [pc, #428]	@ (8013194 <tcp_listen_input+0x1d0>)
 8012fe8:	486b      	ldr	r0, [pc, #428]	@ (8013198 <tcp_listen_input+0x1d4>)
 8012fea:	f004 fa8f 	bl	801750c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012fee:	4b67      	ldr	r3, [pc, #412]	@ (801318c <tcp_listen_input+0x1c8>)
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	f003 0310 	and.w	r3, r3, #16
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d019      	beq.n	801302e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ffa:	4b68      	ldr	r3, [pc, #416]	@ (801319c <tcp_listen_input+0x1d8>)
 8012ffc:	6819      	ldr	r1, [r3, #0]
 8012ffe:	4b68      	ldr	r3, [pc, #416]	@ (80131a0 <tcp_listen_input+0x1dc>)
 8013000:	881b      	ldrh	r3, [r3, #0]
 8013002:	461a      	mov	r2, r3
 8013004:	4b67      	ldr	r3, [pc, #412]	@ (80131a4 <tcp_listen_input+0x1e0>)
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801300a:	4b67      	ldr	r3, [pc, #412]	@ (80131a8 <tcp_listen_input+0x1e4>)
 801300c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801300e:	885b      	ldrh	r3, [r3, #2]
 8013010:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013012:	4a65      	ldr	r2, [pc, #404]	@ (80131a8 <tcp_listen_input+0x1e4>)
 8013014:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013016:	8812      	ldrh	r2, [r2, #0]
 8013018:	b292      	uxth	r2, r2
 801301a:	9202      	str	r2, [sp, #8]
 801301c:	9301      	str	r3, [sp, #4]
 801301e:	4b63      	ldr	r3, [pc, #396]	@ (80131ac <tcp_listen_input+0x1e8>)
 8013020:	9300      	str	r3, [sp, #0]
 8013022:	4b63      	ldr	r3, [pc, #396]	@ (80131b0 <tcp_listen_input+0x1ec>)
 8013024:	4602      	mov	r2, r0
 8013026:	6878      	ldr	r0, [r7, #4]
 8013028:	f002 ff7a 	bl	8015f20 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801302c:	e0a9      	b.n	8013182 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801302e:	4b57      	ldr	r3, [pc, #348]	@ (801318c <tcp_listen_input+0x1c8>)
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	f003 0302 	and.w	r3, r3, #2
 8013036:	2b00      	cmp	r3, #0
 8013038:	f000 80a3 	beq.w	8013182 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	7d5b      	ldrb	r3, [r3, #21]
 8013040:	4618      	mov	r0, r3
 8013042:	f7ff f927 	bl	8012294 <tcp_alloc>
 8013046:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d111      	bne.n	8013072 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	699b      	ldr	r3, [r3, #24]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d00a      	beq.n	801306c <tcp_listen_input+0xa8>
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	699b      	ldr	r3, [r3, #24]
 801305a:	687a      	ldr	r2, [r7, #4]
 801305c:	6910      	ldr	r0, [r2, #16]
 801305e:	f04f 32ff 	mov.w	r2, #4294967295
 8013062:	2100      	movs	r1, #0
 8013064:	4798      	blx	r3
 8013066:	4603      	mov	r3, r0
 8013068:	73bb      	strb	r3, [r7, #14]
      return;
 801306a:	e08b      	b.n	8013184 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801306c:	23f0      	movs	r3, #240	@ 0xf0
 801306e:	73bb      	strb	r3, [r7, #14]
      return;
 8013070:	e088      	b.n	8013184 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013072:	4b50      	ldr	r3, [pc, #320]	@ (80131b4 <tcp_listen_input+0x1f0>)
 8013074:	695a      	ldr	r2, [r3, #20]
 8013076:	697b      	ldr	r3, [r7, #20]
 8013078:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801307a:	4b4e      	ldr	r3, [pc, #312]	@ (80131b4 <tcp_listen_input+0x1f0>)
 801307c:	691a      	ldr	r2, [r3, #16]
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	8ada      	ldrh	r2, [r3, #22]
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801308a:	4b47      	ldr	r3, [pc, #284]	@ (80131a8 <tcp_listen_input+0x1e4>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	881b      	ldrh	r3, [r3, #0]
 8013090:	b29a      	uxth	r2, r3
 8013092:	697b      	ldr	r3, [r7, #20]
 8013094:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013096:	697b      	ldr	r3, [r7, #20]
 8013098:	2203      	movs	r2, #3
 801309a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801309c:	4b41      	ldr	r3, [pc, #260]	@ (80131a4 <tcp_listen_input+0x1e0>)
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	1c5a      	adds	r2, r3, #1
 80130a2:	697b      	ldr	r3, [r7, #20]
 80130a4:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80130a6:	697b      	ldr	r3, [r7, #20]
 80130a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80130ae:	6978      	ldr	r0, [r7, #20]
 80130b0:	f7ff fa58 	bl	8012564 <tcp_next_iss>
 80130b4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80130b6:	697b      	ldr	r3, [r7, #20]
 80130b8:	693a      	ldr	r2, [r7, #16]
 80130ba:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80130bc:	697b      	ldr	r3, [r7, #20]
 80130be:	693a      	ldr	r2, [r7, #16]
 80130c0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	693a      	ldr	r2, [r7, #16]
 80130c6:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	693a      	ldr	r2, [r7, #16]
 80130cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80130ce:	4b35      	ldr	r3, [pc, #212]	@ (80131a4 <tcp_listen_input+0x1e0>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	1e5a      	subs	r2, r3, #1
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	691a      	ldr	r2, [r3, #16]
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	687a      	ldr	r2, [r7, #4]
 80130e4:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	7a5b      	ldrb	r3, [r3, #9]
 80130ea:	f003 030c 	and.w	r3, r3, #12
 80130ee:	b2da      	uxtb	r2, r3
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	7a1a      	ldrb	r2, [r3, #8]
 80130f8:	697b      	ldr	r3, [r7, #20]
 80130fa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80130fc:	4b2e      	ldr	r3, [pc, #184]	@ (80131b8 <tcp_listen_input+0x1f4>)
 80130fe:	681a      	ldr	r2, [r3, #0]
 8013100:	697b      	ldr	r3, [r7, #20]
 8013102:	60da      	str	r2, [r3, #12]
 8013104:	4a2c      	ldr	r2, [pc, #176]	@ (80131b8 <tcp_listen_input+0x1f4>)
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	6013      	str	r3, [r2, #0]
 801310a:	f003 fa6d 	bl	80165e8 <tcp_timer_needed>
 801310e:	4b2b      	ldr	r3, [pc, #172]	@ (80131bc <tcp_listen_input+0x1f8>)
 8013110:	2201      	movs	r2, #1
 8013112:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013114:	6978      	ldr	r0, [r7, #20]
 8013116:	f001 fd8b 	bl	8014c30 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801311a:	4b23      	ldr	r3, [pc, #140]	@ (80131a8 <tcp_listen_input+0x1e4>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	89db      	ldrh	r3, [r3, #14]
 8013120:	b29a      	uxth	r2, r3
 8013122:	697b      	ldr	r3, [r7, #20]
 8013124:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801312e:	697b      	ldr	r3, [r7, #20]
 8013130:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013134:	697b      	ldr	r3, [r7, #20]
 8013136:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8013138:	697b      	ldr	r3, [r7, #20]
 801313a:	3304      	adds	r3, #4
 801313c:	4618      	mov	r0, r3
 801313e:	f7fa fcc1 	bl	800dac4 <ip4_route>
 8013142:	4601      	mov	r1, r0
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	3304      	adds	r3, #4
 8013148:	461a      	mov	r2, r3
 801314a:	4620      	mov	r0, r4
 801314c:	f7ff fa30 	bl	80125b0 <tcp_eff_send_mss_netif>
 8013150:	4603      	mov	r3, r0
 8013152:	461a      	mov	r2, r3
 8013154:	697b      	ldr	r3, [r7, #20]
 8013156:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013158:	2112      	movs	r1, #18
 801315a:	6978      	ldr	r0, [r7, #20]
 801315c:	f002 f83e 	bl	80151dc <tcp_enqueue_flags>
 8013160:	4603      	mov	r3, r0
 8013162:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d004      	beq.n	8013176 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801316c:	2100      	movs	r1, #0
 801316e:	6978      	ldr	r0, [r7, #20]
 8013170:	f7fe f97c 	bl	801146c <tcp_abandon>
      return;
 8013174:	e006      	b.n	8013184 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013176:	6978      	ldr	r0, [r7, #20]
 8013178:	f002 f91e 	bl	80153b8 <tcp_output>
  return;
 801317c:	e001      	b.n	8013182 <tcp_listen_input+0x1be>
    return;
 801317e:	bf00      	nop
 8013180:	e000      	b.n	8013184 <tcp_listen_input+0x1c0>
  return;
 8013182:	bf00      	nop
}
 8013184:	371c      	adds	r7, #28
 8013186:	46bd      	mov	sp, r7
 8013188:	bd90      	pop	{r4, r7, pc}
 801318a:	bf00      	nop
 801318c:	24007bb4 	.word	0x24007bb4
 8013190:	0801a538 	.word	0x0801a538
 8013194:	0801a75c 	.word	0x0801a75c
 8013198:	0801a5b0 	.word	0x0801a5b0
 801319c:	24007bac 	.word	0x24007bac
 80131a0:	24007bb2 	.word	0x24007bb2
 80131a4:	24007ba8 	.word	0x24007ba8
 80131a8:	24007b98 	.word	0x24007b98
 80131ac:	240048f4 	.word	0x240048f4
 80131b0:	240048f8 	.word	0x240048f8
 80131b4:	240048e4 	.word	0x240048e4
 80131b8:	24007b7c 	.word	0x24007b7c
 80131bc:	24007b84 	.word	0x24007b84

080131c0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b086      	sub	sp, #24
 80131c4:	af04      	add	r7, sp, #16
 80131c6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80131c8:	4b2f      	ldr	r3, [pc, #188]	@ (8013288 <tcp_timewait_input+0xc8>)
 80131ca:	781b      	ldrb	r3, [r3, #0]
 80131cc:	f003 0304 	and.w	r3, r3, #4
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d153      	bne.n	801327c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d106      	bne.n	80131e8 <tcp_timewait_input+0x28>
 80131da:	4b2c      	ldr	r3, [pc, #176]	@ (801328c <tcp_timewait_input+0xcc>)
 80131dc:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80131e0:	492b      	ldr	r1, [pc, #172]	@ (8013290 <tcp_timewait_input+0xd0>)
 80131e2:	482c      	ldr	r0, [pc, #176]	@ (8013294 <tcp_timewait_input+0xd4>)
 80131e4:	f004 f992 	bl	801750c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80131e8:	4b27      	ldr	r3, [pc, #156]	@ (8013288 <tcp_timewait_input+0xc8>)
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	f003 0302 	and.w	r3, r3, #2
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d02a      	beq.n	801324a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80131f4:	4b28      	ldr	r3, [pc, #160]	@ (8013298 <tcp_timewait_input+0xd8>)
 80131f6:	681a      	ldr	r2, [r3, #0]
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131fc:	1ad3      	subs	r3, r2, r3
 80131fe:	2b00      	cmp	r3, #0
 8013200:	db2d      	blt.n	801325e <tcp_timewait_input+0x9e>
 8013202:	4b25      	ldr	r3, [pc, #148]	@ (8013298 <tcp_timewait_input+0xd8>)
 8013204:	681a      	ldr	r2, [r3, #0]
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801320a:	6879      	ldr	r1, [r7, #4]
 801320c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801320e:	440b      	add	r3, r1
 8013210:	1ad3      	subs	r3, r2, r3
 8013212:	2b00      	cmp	r3, #0
 8013214:	dc23      	bgt.n	801325e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013216:	4b21      	ldr	r3, [pc, #132]	@ (801329c <tcp_timewait_input+0xdc>)
 8013218:	6819      	ldr	r1, [r3, #0]
 801321a:	4b21      	ldr	r3, [pc, #132]	@ (80132a0 <tcp_timewait_input+0xe0>)
 801321c:	881b      	ldrh	r3, [r3, #0]
 801321e:	461a      	mov	r2, r3
 8013220:	4b1d      	ldr	r3, [pc, #116]	@ (8013298 <tcp_timewait_input+0xd8>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013226:	4b1f      	ldr	r3, [pc, #124]	@ (80132a4 <tcp_timewait_input+0xe4>)
 8013228:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801322a:	885b      	ldrh	r3, [r3, #2]
 801322c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801322e:	4a1d      	ldr	r2, [pc, #116]	@ (80132a4 <tcp_timewait_input+0xe4>)
 8013230:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013232:	8812      	ldrh	r2, [r2, #0]
 8013234:	b292      	uxth	r2, r2
 8013236:	9202      	str	r2, [sp, #8]
 8013238:	9301      	str	r3, [sp, #4]
 801323a:	4b1b      	ldr	r3, [pc, #108]	@ (80132a8 <tcp_timewait_input+0xe8>)
 801323c:	9300      	str	r3, [sp, #0]
 801323e:	4b1b      	ldr	r3, [pc, #108]	@ (80132ac <tcp_timewait_input+0xec>)
 8013240:	4602      	mov	r2, r0
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	f002 fe6c 	bl	8015f20 <tcp_rst>
      return;
 8013248:	e01b      	b.n	8013282 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801324a:	4b0f      	ldr	r3, [pc, #60]	@ (8013288 <tcp_timewait_input+0xc8>)
 801324c:	781b      	ldrb	r3, [r3, #0]
 801324e:	f003 0301 	and.w	r3, r3, #1
 8013252:	2b00      	cmp	r3, #0
 8013254:	d003      	beq.n	801325e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013256:	4b16      	ldr	r3, [pc, #88]	@ (80132b0 <tcp_timewait_input+0xf0>)
 8013258:	681a      	ldr	r2, [r3, #0]
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801325e:	4b10      	ldr	r3, [pc, #64]	@ (80132a0 <tcp_timewait_input+0xe0>)
 8013260:	881b      	ldrh	r3, [r3, #0]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d00c      	beq.n	8013280 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	8b5b      	ldrh	r3, [r3, #26]
 801326a:	f043 0302 	orr.w	r3, r3, #2
 801326e:	b29a      	uxth	r2, r3
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f002 f89f 	bl	80153b8 <tcp_output>
  }
  return;
 801327a:	e001      	b.n	8013280 <tcp_timewait_input+0xc0>
    return;
 801327c:	bf00      	nop
 801327e:	e000      	b.n	8013282 <tcp_timewait_input+0xc2>
  return;
 8013280:	bf00      	nop
}
 8013282:	3708      	adds	r7, #8
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}
 8013288:	24007bb4 	.word	0x24007bb4
 801328c:	0801a538 	.word	0x0801a538
 8013290:	0801a77c 	.word	0x0801a77c
 8013294:	0801a5b0 	.word	0x0801a5b0
 8013298:	24007ba8 	.word	0x24007ba8
 801329c:	24007bac 	.word	0x24007bac
 80132a0:	24007bb2 	.word	0x24007bb2
 80132a4:	24007b98 	.word	0x24007b98
 80132a8:	240048f4 	.word	0x240048f4
 80132ac:	240048f8 	.word	0x240048f8
 80132b0:	24007b70 	.word	0x24007b70

080132b4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80132b4:	b590      	push	{r4, r7, lr}
 80132b6:	b08d      	sub	sp, #52	@ 0x34
 80132b8:	af04      	add	r7, sp, #16
 80132ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80132bc:	2300      	movs	r3, #0
 80132be:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80132c0:	2300      	movs	r3, #0
 80132c2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d106      	bne.n	80132d8 <tcp_process+0x24>
 80132ca:	4b9d      	ldr	r3, [pc, #628]	@ (8013540 <tcp_process+0x28c>)
 80132cc:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80132d0:	499c      	ldr	r1, [pc, #624]	@ (8013544 <tcp_process+0x290>)
 80132d2:	489d      	ldr	r0, [pc, #628]	@ (8013548 <tcp_process+0x294>)
 80132d4:	f004 f91a 	bl	801750c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80132d8:	4b9c      	ldr	r3, [pc, #624]	@ (801354c <tcp_process+0x298>)
 80132da:	781b      	ldrb	r3, [r3, #0]
 80132dc:	f003 0304 	and.w	r3, r3, #4
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d04e      	beq.n	8013382 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	7d1b      	ldrb	r3, [r3, #20]
 80132e8:	2b02      	cmp	r3, #2
 80132ea:	d108      	bne.n	80132fe <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80132f0:	4b97      	ldr	r3, [pc, #604]	@ (8013550 <tcp_process+0x29c>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	429a      	cmp	r2, r3
 80132f6:	d123      	bne.n	8013340 <tcp_process+0x8c>
        acceptable = 1;
 80132f8:	2301      	movs	r3, #1
 80132fa:	76fb      	strb	r3, [r7, #27]
 80132fc:	e020      	b.n	8013340 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013302:	4b94      	ldr	r3, [pc, #592]	@ (8013554 <tcp_process+0x2a0>)
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	429a      	cmp	r2, r3
 8013308:	d102      	bne.n	8013310 <tcp_process+0x5c>
        acceptable = 1;
 801330a:	2301      	movs	r3, #1
 801330c:	76fb      	strb	r3, [r7, #27]
 801330e:	e017      	b.n	8013340 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013310:	4b90      	ldr	r3, [pc, #576]	@ (8013554 <tcp_process+0x2a0>)
 8013312:	681a      	ldr	r2, [r3, #0]
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013318:	1ad3      	subs	r3, r2, r3
 801331a:	2b00      	cmp	r3, #0
 801331c:	db10      	blt.n	8013340 <tcp_process+0x8c>
 801331e:	4b8d      	ldr	r3, [pc, #564]	@ (8013554 <tcp_process+0x2a0>)
 8013320:	681a      	ldr	r2, [r3, #0]
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013326:	6879      	ldr	r1, [r7, #4]
 8013328:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801332a:	440b      	add	r3, r1
 801332c:	1ad3      	subs	r3, r2, r3
 801332e:	2b00      	cmp	r3, #0
 8013330:	dc06      	bgt.n	8013340 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	8b5b      	ldrh	r3, [r3, #26]
 8013336:	f043 0302 	orr.w	r3, r3, #2
 801333a:	b29a      	uxth	r2, r3
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013340:	7efb      	ldrb	r3, [r7, #27]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d01b      	beq.n	801337e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	7d1b      	ldrb	r3, [r3, #20]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d106      	bne.n	801335c <tcp_process+0xa8>
 801334e:	4b7c      	ldr	r3, [pc, #496]	@ (8013540 <tcp_process+0x28c>)
 8013350:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8013354:	4980      	ldr	r1, [pc, #512]	@ (8013558 <tcp_process+0x2a4>)
 8013356:	487c      	ldr	r0, [pc, #496]	@ (8013548 <tcp_process+0x294>)
 8013358:	f004 f8d8 	bl	801750c <iprintf>
      recv_flags |= TF_RESET;
 801335c:	4b7f      	ldr	r3, [pc, #508]	@ (801355c <tcp_process+0x2a8>)
 801335e:	781b      	ldrb	r3, [r3, #0]
 8013360:	f043 0308 	orr.w	r3, r3, #8
 8013364:	b2da      	uxtb	r2, r3
 8013366:	4b7d      	ldr	r3, [pc, #500]	@ (801355c <tcp_process+0x2a8>)
 8013368:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	8b5b      	ldrh	r3, [r3, #26]
 801336e:	f023 0301 	bic.w	r3, r3, #1
 8013372:	b29a      	uxth	r2, r3
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013378:	f06f 030d 	mvn.w	r3, #13
 801337c:	e37a      	b.n	8013a74 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801337e:	2300      	movs	r3, #0
 8013380:	e378      	b.n	8013a74 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013382:	4b72      	ldr	r3, [pc, #456]	@ (801354c <tcp_process+0x298>)
 8013384:	781b      	ldrb	r3, [r3, #0]
 8013386:	f003 0302 	and.w	r3, r3, #2
 801338a:	2b00      	cmp	r3, #0
 801338c:	d010      	beq.n	80133b0 <tcp_process+0xfc>
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	7d1b      	ldrb	r3, [r3, #20]
 8013392:	2b02      	cmp	r3, #2
 8013394:	d00c      	beq.n	80133b0 <tcp_process+0xfc>
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	7d1b      	ldrb	r3, [r3, #20]
 801339a:	2b03      	cmp	r3, #3
 801339c:	d008      	beq.n	80133b0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	8b5b      	ldrh	r3, [r3, #26]
 80133a2:	f043 0302 	orr.w	r3, r3, #2
 80133a6:	b29a      	uxth	r2, r3
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80133ac:	2300      	movs	r3, #0
 80133ae:	e361      	b.n	8013a74 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	8b5b      	ldrh	r3, [r3, #26]
 80133b4:	f003 0310 	and.w	r3, r3, #16
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d103      	bne.n	80133c4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80133bc:	4b68      	ldr	r3, [pc, #416]	@ (8013560 <tcp_process+0x2ac>)
 80133be:	681a      	ldr	r2, [r3, #0]
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2200      	movs	r2, #0
 80133c8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	2200      	movs	r2, #0
 80133d0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f001 fc2b 	bl	8014c30 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	7d1b      	ldrb	r3, [r3, #20]
 80133de:	3b02      	subs	r3, #2
 80133e0:	2b07      	cmp	r3, #7
 80133e2:	f200 8337 	bhi.w	8013a54 <tcp_process+0x7a0>
 80133e6:	a201      	add	r2, pc, #4	@ (adr r2, 80133ec <tcp_process+0x138>)
 80133e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133ec:	0801340d 	.word	0x0801340d
 80133f0:	0801363d 	.word	0x0801363d
 80133f4:	080137b5 	.word	0x080137b5
 80133f8:	080137df 	.word	0x080137df
 80133fc:	08013903 	.word	0x08013903
 8013400:	080137b5 	.word	0x080137b5
 8013404:	0801398f 	.word	0x0801398f
 8013408:	08013a1f 	.word	0x08013a1f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801340c:	4b4f      	ldr	r3, [pc, #316]	@ (801354c <tcp_process+0x298>)
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	f003 0310 	and.w	r3, r3, #16
 8013414:	2b00      	cmp	r3, #0
 8013416:	f000 80e4 	beq.w	80135e2 <tcp_process+0x32e>
 801341a:	4b4c      	ldr	r3, [pc, #304]	@ (801354c <tcp_process+0x298>)
 801341c:	781b      	ldrb	r3, [r3, #0]
 801341e:	f003 0302 	and.w	r3, r3, #2
 8013422:	2b00      	cmp	r3, #0
 8013424:	f000 80dd 	beq.w	80135e2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801342c:	1c5a      	adds	r2, r3, #1
 801342e:	4b48      	ldr	r3, [pc, #288]	@ (8013550 <tcp_process+0x29c>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	429a      	cmp	r2, r3
 8013434:	f040 80d5 	bne.w	80135e2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013438:	4b46      	ldr	r3, [pc, #280]	@ (8013554 <tcp_process+0x2a0>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	1c5a      	adds	r2, r3, #1
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801344a:	4b41      	ldr	r3, [pc, #260]	@ (8013550 <tcp_process+0x29c>)
 801344c:	681a      	ldr	r2, [r3, #0]
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8013452:	4b44      	ldr	r3, [pc, #272]	@ (8013564 <tcp_process+0x2b0>)
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	89db      	ldrh	r3, [r3, #14]
 8013458:	b29a      	uxth	r2, r3
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801346c:	4b39      	ldr	r3, [pc, #228]	@ (8013554 <tcp_process+0x2a0>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	1e5a      	subs	r2, r3, #1
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	2204      	movs	r2, #4
 801347a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	3304      	adds	r3, #4
 8013484:	4618      	mov	r0, r3
 8013486:	f7fa fb1d 	bl	800dac4 <ip4_route>
 801348a:	4601      	mov	r1, r0
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	3304      	adds	r3, #4
 8013490:	461a      	mov	r2, r3
 8013492:	4620      	mov	r0, r4
 8013494:	f7ff f88c 	bl	80125b0 <tcp_eff_send_mss_netif>
 8013498:	4603      	mov	r3, r0
 801349a:	461a      	mov	r2, r3
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80134a4:	009a      	lsls	r2, r3, #2
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80134aa:	005b      	lsls	r3, r3, #1
 80134ac:	f241 111c 	movw	r1, #4380	@ 0x111c
 80134b0:	428b      	cmp	r3, r1
 80134b2:	bf38      	it	cc
 80134b4:	460b      	movcc	r3, r1
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d204      	bcs.n	80134c4 <tcp_process+0x210>
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80134be:	009b      	lsls	r3, r3, #2
 80134c0:	b29b      	uxth	r3, r3
 80134c2:	e00d      	b.n	80134e0 <tcp_process+0x22c>
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80134c8:	005b      	lsls	r3, r3, #1
 80134ca:	f241 121c 	movw	r2, #4380	@ 0x111c
 80134ce:	4293      	cmp	r3, r2
 80134d0:	d904      	bls.n	80134dc <tcp_process+0x228>
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80134d6:	005b      	lsls	r3, r3, #1
 80134d8:	b29b      	uxth	r3, r3
 80134da:	e001      	b.n	80134e0 <tcp_process+0x22c>
 80134dc:	f241 131c 	movw	r3, #4380	@ 0x111c
 80134e0:	687a      	ldr	r2, [r7, #4]
 80134e2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d106      	bne.n	80134fe <tcp_process+0x24a>
 80134f0:	4b13      	ldr	r3, [pc, #76]	@ (8013540 <tcp_process+0x28c>)
 80134f2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80134f6:	491c      	ldr	r1, [pc, #112]	@ (8013568 <tcp_process+0x2b4>)
 80134f8:	4813      	ldr	r0, [pc, #76]	@ (8013548 <tcp_process+0x294>)
 80134fa:	f004 f807 	bl	801750c <iprintf>
        --pcb->snd_queuelen;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013504:	3b01      	subs	r3, #1
 8013506:	b29a      	uxth	r2, r3
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013512:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013514:	69fb      	ldr	r3, [r7, #28]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d12a      	bne.n	8013570 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801351e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013520:	69fb      	ldr	r3, [r7, #28]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d106      	bne.n	8013534 <tcp_process+0x280>
 8013526:	4b06      	ldr	r3, [pc, #24]	@ (8013540 <tcp_process+0x28c>)
 8013528:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801352c:	490f      	ldr	r1, [pc, #60]	@ (801356c <tcp_process+0x2b8>)
 801352e:	4806      	ldr	r0, [pc, #24]	@ (8013548 <tcp_process+0x294>)
 8013530:	f003 ffec 	bl	801750c <iprintf>
          pcb->unsent = rseg->next;
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	681a      	ldr	r2, [r3, #0]
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	66da      	str	r2, [r3, #108]	@ 0x6c
 801353c:	e01c      	b.n	8013578 <tcp_process+0x2c4>
 801353e:	bf00      	nop
 8013540:	0801a538 	.word	0x0801a538
 8013544:	0801a79c 	.word	0x0801a79c
 8013548:	0801a5b0 	.word	0x0801a5b0
 801354c:	24007bb4 	.word	0x24007bb4
 8013550:	24007bac 	.word	0x24007bac
 8013554:	24007ba8 	.word	0x24007ba8
 8013558:	0801a7b8 	.word	0x0801a7b8
 801355c:	24007bb5 	.word	0x24007bb5
 8013560:	24007b70 	.word	0x24007b70
 8013564:	24007b98 	.word	0x24007b98
 8013568:	0801a7d8 	.word	0x0801a7d8
 801356c:	0801a7f0 	.word	0x0801a7f0
        } else {
          pcb->unacked = rseg->next;
 8013570:	69fb      	ldr	r3, [r7, #28]
 8013572:	681a      	ldr	r2, [r3, #0]
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8013578:	69f8      	ldr	r0, [r7, #28]
 801357a:	f7fe fd22 	bl	8011fc2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013582:	2b00      	cmp	r3, #0
 8013584:	d104      	bne.n	8013590 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801358c:	861a      	strh	r2, [r3, #48]	@ 0x30
 801358e:	e006      	b.n	801359e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2200      	movs	r2, #0
 8013594:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2200      	movs	r2, #0
 801359a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d00a      	beq.n	80135be <tcp_process+0x30a>
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80135ae:	687a      	ldr	r2, [r7, #4]
 80135b0:	6910      	ldr	r0, [r2, #16]
 80135b2:	2200      	movs	r2, #0
 80135b4:	6879      	ldr	r1, [r7, #4]
 80135b6:	4798      	blx	r3
 80135b8:	4603      	mov	r3, r0
 80135ba:	76bb      	strb	r3, [r7, #26]
 80135bc:	e001      	b.n	80135c2 <tcp_process+0x30e>
 80135be:	2300      	movs	r3, #0
 80135c0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80135c2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80135c6:	f113 0f0d 	cmn.w	r3, #13
 80135ca:	d102      	bne.n	80135d2 <tcp_process+0x31e>
          return ERR_ABRT;
 80135cc:	f06f 030c 	mvn.w	r3, #12
 80135d0:	e250      	b.n	8013a74 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	8b5b      	ldrh	r3, [r3, #26]
 80135d6:	f043 0302 	orr.w	r3, r3, #2
 80135da:	b29a      	uxth	r2, r3
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80135e0:	e23a      	b.n	8013a58 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80135e2:	4b98      	ldr	r3, [pc, #608]	@ (8013844 <tcp_process+0x590>)
 80135e4:	781b      	ldrb	r3, [r3, #0]
 80135e6:	f003 0310 	and.w	r3, r3, #16
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	f000 8234 	beq.w	8013a58 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135f0:	4b95      	ldr	r3, [pc, #596]	@ (8013848 <tcp_process+0x594>)
 80135f2:	6819      	ldr	r1, [r3, #0]
 80135f4:	4b95      	ldr	r3, [pc, #596]	@ (801384c <tcp_process+0x598>)
 80135f6:	881b      	ldrh	r3, [r3, #0]
 80135f8:	461a      	mov	r2, r3
 80135fa:	4b95      	ldr	r3, [pc, #596]	@ (8013850 <tcp_process+0x59c>)
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013600:	4b94      	ldr	r3, [pc, #592]	@ (8013854 <tcp_process+0x5a0>)
 8013602:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013604:	885b      	ldrh	r3, [r3, #2]
 8013606:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013608:	4a92      	ldr	r2, [pc, #584]	@ (8013854 <tcp_process+0x5a0>)
 801360a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801360c:	8812      	ldrh	r2, [r2, #0]
 801360e:	b292      	uxth	r2, r2
 8013610:	9202      	str	r2, [sp, #8]
 8013612:	9301      	str	r3, [sp, #4]
 8013614:	4b90      	ldr	r3, [pc, #576]	@ (8013858 <tcp_process+0x5a4>)
 8013616:	9300      	str	r3, [sp, #0]
 8013618:	4b90      	ldr	r3, [pc, #576]	@ (801385c <tcp_process+0x5a8>)
 801361a:	4602      	mov	r2, r0
 801361c:	6878      	ldr	r0, [r7, #4]
 801361e:	f002 fc7f 	bl	8015f20 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013628:	2b05      	cmp	r3, #5
 801362a:	f200 8215 	bhi.w	8013a58 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	2200      	movs	r2, #0
 8013632:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8013634:	6878      	ldr	r0, [r7, #4]
 8013636:	f002 fa4b 	bl	8015ad0 <tcp_rexmit_rto>
      break;
 801363a:	e20d      	b.n	8013a58 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801363c:	4b81      	ldr	r3, [pc, #516]	@ (8013844 <tcp_process+0x590>)
 801363e:	781b      	ldrb	r3, [r3, #0]
 8013640:	f003 0310 	and.w	r3, r3, #16
 8013644:	2b00      	cmp	r3, #0
 8013646:	f000 80a1 	beq.w	801378c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801364a:	4b7f      	ldr	r3, [pc, #508]	@ (8013848 <tcp_process+0x594>)
 801364c:	681a      	ldr	r2, [r3, #0]
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013652:	1ad3      	subs	r3, r2, r3
 8013654:	3b01      	subs	r3, #1
 8013656:	2b00      	cmp	r3, #0
 8013658:	db7e      	blt.n	8013758 <tcp_process+0x4a4>
 801365a:	4b7b      	ldr	r3, [pc, #492]	@ (8013848 <tcp_process+0x594>)
 801365c:	681a      	ldr	r2, [r3, #0]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013662:	1ad3      	subs	r3, r2, r3
 8013664:	2b00      	cmp	r3, #0
 8013666:	dc77      	bgt.n	8013758 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2204      	movs	r2, #4
 801366c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013672:	2b00      	cmp	r3, #0
 8013674:	d102      	bne.n	801367c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013676:	23fa      	movs	r3, #250	@ 0xfa
 8013678:	76bb      	strb	r3, [r7, #26]
 801367a:	e01d      	b.n	80136b8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013680:	699b      	ldr	r3, [r3, #24]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d106      	bne.n	8013694 <tcp_process+0x3e0>
 8013686:	4b76      	ldr	r3, [pc, #472]	@ (8013860 <tcp_process+0x5ac>)
 8013688:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801368c:	4975      	ldr	r1, [pc, #468]	@ (8013864 <tcp_process+0x5b0>)
 801368e:	4876      	ldr	r0, [pc, #472]	@ (8013868 <tcp_process+0x5b4>)
 8013690:	f003 ff3c 	bl	801750c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013698:	699b      	ldr	r3, [r3, #24]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d00a      	beq.n	80136b4 <tcp_process+0x400>
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80136a2:	699b      	ldr	r3, [r3, #24]
 80136a4:	687a      	ldr	r2, [r7, #4]
 80136a6:	6910      	ldr	r0, [r2, #16]
 80136a8:	2200      	movs	r2, #0
 80136aa:	6879      	ldr	r1, [r7, #4]
 80136ac:	4798      	blx	r3
 80136ae:	4603      	mov	r3, r0
 80136b0:	76bb      	strb	r3, [r7, #26]
 80136b2:	e001      	b.n	80136b8 <tcp_process+0x404>
 80136b4:	23f0      	movs	r3, #240	@ 0xf0
 80136b6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80136b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d00a      	beq.n	80136d6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80136c0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80136c4:	f113 0f0d 	cmn.w	r3, #13
 80136c8:	d002      	beq.n	80136d0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f7fd ff8c 	bl	80115e8 <tcp_abort>
            }
            return ERR_ABRT;
 80136d0:	f06f 030c 	mvn.w	r3, #12
 80136d4:	e1ce      	b.n	8013a74 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f000 fae0 	bl	8013c9c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80136dc:	4b63      	ldr	r3, [pc, #396]	@ (801386c <tcp_process+0x5b8>)
 80136de:	881b      	ldrh	r3, [r3, #0]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d005      	beq.n	80136f0 <tcp_process+0x43c>
            recv_acked--;
 80136e4:	4b61      	ldr	r3, [pc, #388]	@ (801386c <tcp_process+0x5b8>)
 80136e6:	881b      	ldrh	r3, [r3, #0]
 80136e8:	3b01      	subs	r3, #1
 80136ea:	b29a      	uxth	r2, r3
 80136ec:	4b5f      	ldr	r3, [pc, #380]	@ (801386c <tcp_process+0x5b8>)
 80136ee:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80136f4:	009a      	lsls	r2, r3, #2
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80136fa:	005b      	lsls	r3, r3, #1
 80136fc:	f241 111c 	movw	r1, #4380	@ 0x111c
 8013700:	428b      	cmp	r3, r1
 8013702:	bf38      	it	cc
 8013704:	460b      	movcc	r3, r1
 8013706:	429a      	cmp	r2, r3
 8013708:	d204      	bcs.n	8013714 <tcp_process+0x460>
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801370e:	009b      	lsls	r3, r3, #2
 8013710:	b29b      	uxth	r3, r3
 8013712:	e00d      	b.n	8013730 <tcp_process+0x47c>
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013718:	005b      	lsls	r3, r3, #1
 801371a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801371e:	4293      	cmp	r3, r2
 8013720:	d904      	bls.n	801372c <tcp_process+0x478>
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013726:	005b      	lsls	r3, r3, #1
 8013728:	b29b      	uxth	r3, r3
 801372a:	e001      	b.n	8013730 <tcp_process+0x47c>
 801372c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8013730:	687a      	ldr	r2, [r7, #4]
 8013732:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013736:	4b4e      	ldr	r3, [pc, #312]	@ (8013870 <tcp_process+0x5bc>)
 8013738:	781b      	ldrb	r3, [r3, #0]
 801373a:	f003 0320 	and.w	r3, r3, #32
 801373e:	2b00      	cmp	r3, #0
 8013740:	d037      	beq.n	80137b2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	8b5b      	ldrh	r3, [r3, #26]
 8013746:	f043 0302 	orr.w	r3, r3, #2
 801374a:	b29a      	uxth	r2, r3
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2207      	movs	r2, #7
 8013754:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013756:	e02c      	b.n	80137b2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013758:	4b3b      	ldr	r3, [pc, #236]	@ (8013848 <tcp_process+0x594>)
 801375a:	6819      	ldr	r1, [r3, #0]
 801375c:	4b3b      	ldr	r3, [pc, #236]	@ (801384c <tcp_process+0x598>)
 801375e:	881b      	ldrh	r3, [r3, #0]
 8013760:	461a      	mov	r2, r3
 8013762:	4b3b      	ldr	r3, [pc, #236]	@ (8013850 <tcp_process+0x59c>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013768:	4b3a      	ldr	r3, [pc, #232]	@ (8013854 <tcp_process+0x5a0>)
 801376a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801376c:	885b      	ldrh	r3, [r3, #2]
 801376e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013770:	4a38      	ldr	r2, [pc, #224]	@ (8013854 <tcp_process+0x5a0>)
 8013772:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013774:	8812      	ldrh	r2, [r2, #0]
 8013776:	b292      	uxth	r2, r2
 8013778:	9202      	str	r2, [sp, #8]
 801377a:	9301      	str	r3, [sp, #4]
 801377c:	4b36      	ldr	r3, [pc, #216]	@ (8013858 <tcp_process+0x5a4>)
 801377e:	9300      	str	r3, [sp, #0]
 8013780:	4b36      	ldr	r3, [pc, #216]	@ (801385c <tcp_process+0x5a8>)
 8013782:	4602      	mov	r2, r0
 8013784:	6878      	ldr	r0, [r7, #4]
 8013786:	f002 fbcb 	bl	8015f20 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801378a:	e167      	b.n	8013a5c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801378c:	4b2d      	ldr	r3, [pc, #180]	@ (8013844 <tcp_process+0x590>)
 801378e:	781b      	ldrb	r3, [r3, #0]
 8013790:	f003 0302 	and.w	r3, r3, #2
 8013794:	2b00      	cmp	r3, #0
 8013796:	f000 8161 	beq.w	8013a5c <tcp_process+0x7a8>
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801379e:	1e5a      	subs	r2, r3, #1
 80137a0:	4b2b      	ldr	r3, [pc, #172]	@ (8013850 <tcp_process+0x59c>)
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	429a      	cmp	r2, r3
 80137a6:	f040 8159 	bne.w	8013a5c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f002 f9b2 	bl	8015b14 <tcp_rexmit>
      break;
 80137b0:	e154      	b.n	8013a5c <tcp_process+0x7a8>
 80137b2:	e153      	b.n	8013a5c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f000 fa71 	bl	8013c9c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80137ba:	4b2d      	ldr	r3, [pc, #180]	@ (8013870 <tcp_process+0x5bc>)
 80137bc:	781b      	ldrb	r3, [r3, #0]
 80137be:	f003 0320 	and.w	r3, r3, #32
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	f000 814c 	beq.w	8013a60 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	8b5b      	ldrh	r3, [r3, #26]
 80137cc:	f043 0302 	orr.w	r3, r3, #2
 80137d0:	b29a      	uxth	r2, r3
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	2207      	movs	r2, #7
 80137da:	751a      	strb	r2, [r3, #20]
      }
      break;
 80137dc:	e140      	b.n	8013a60 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80137de:	6878      	ldr	r0, [r7, #4]
 80137e0:	f000 fa5c 	bl	8013c9c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80137e4:	4b22      	ldr	r3, [pc, #136]	@ (8013870 <tcp_process+0x5bc>)
 80137e6:	781b      	ldrb	r3, [r3, #0]
 80137e8:	f003 0320 	and.w	r3, r3, #32
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d071      	beq.n	80138d4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80137f0:	4b14      	ldr	r3, [pc, #80]	@ (8013844 <tcp_process+0x590>)
 80137f2:	781b      	ldrb	r3, [r3, #0]
 80137f4:	f003 0310 	and.w	r3, r3, #16
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d060      	beq.n	80138be <tcp_process+0x60a>
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013800:	4b11      	ldr	r3, [pc, #68]	@ (8013848 <tcp_process+0x594>)
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	429a      	cmp	r2, r3
 8013806:	d15a      	bne.n	80138be <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801380c:	2b00      	cmp	r3, #0
 801380e:	d156      	bne.n	80138be <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	8b5b      	ldrh	r3, [r3, #26]
 8013814:	f043 0302 	orr.w	r3, r3, #2
 8013818:	b29a      	uxth	r2, r3
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801381e:	6878      	ldr	r0, [r7, #4]
 8013820:	f7fe fdbc 	bl	801239c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013824:	4b13      	ldr	r3, [pc, #76]	@ (8013874 <tcp_process+0x5c0>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	687a      	ldr	r2, [r7, #4]
 801382a:	429a      	cmp	r2, r3
 801382c:	d105      	bne.n	801383a <tcp_process+0x586>
 801382e:	4b11      	ldr	r3, [pc, #68]	@ (8013874 <tcp_process+0x5c0>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	68db      	ldr	r3, [r3, #12]
 8013834:	4a0f      	ldr	r2, [pc, #60]	@ (8013874 <tcp_process+0x5c0>)
 8013836:	6013      	str	r3, [r2, #0]
 8013838:	e02e      	b.n	8013898 <tcp_process+0x5e4>
 801383a:	4b0e      	ldr	r3, [pc, #56]	@ (8013874 <tcp_process+0x5c0>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	617b      	str	r3, [r7, #20]
 8013840:	e027      	b.n	8013892 <tcp_process+0x5de>
 8013842:	bf00      	nop
 8013844:	24007bb4 	.word	0x24007bb4
 8013848:	24007bac 	.word	0x24007bac
 801384c:	24007bb2 	.word	0x24007bb2
 8013850:	24007ba8 	.word	0x24007ba8
 8013854:	24007b98 	.word	0x24007b98
 8013858:	240048f4 	.word	0x240048f4
 801385c:	240048f8 	.word	0x240048f8
 8013860:	0801a538 	.word	0x0801a538
 8013864:	0801a804 	.word	0x0801a804
 8013868:	0801a5b0 	.word	0x0801a5b0
 801386c:	24007bb0 	.word	0x24007bb0
 8013870:	24007bb5 	.word	0x24007bb5
 8013874:	24007b7c 	.word	0x24007b7c
 8013878:	697b      	ldr	r3, [r7, #20]
 801387a:	68db      	ldr	r3, [r3, #12]
 801387c:	687a      	ldr	r2, [r7, #4]
 801387e:	429a      	cmp	r2, r3
 8013880:	d104      	bne.n	801388c <tcp_process+0x5d8>
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	68da      	ldr	r2, [r3, #12]
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	60da      	str	r2, [r3, #12]
 801388a:	e005      	b.n	8013898 <tcp_process+0x5e4>
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	68db      	ldr	r3, [r3, #12]
 8013890:	617b      	str	r3, [r7, #20]
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d1ef      	bne.n	8013878 <tcp_process+0x5c4>
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2200      	movs	r2, #0
 801389c:	60da      	str	r2, [r3, #12]
 801389e:	4b77      	ldr	r3, [pc, #476]	@ (8013a7c <tcp_process+0x7c8>)
 80138a0:	2201      	movs	r2, #1
 80138a2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	220a      	movs	r2, #10
 80138a8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80138aa:	4b75      	ldr	r3, [pc, #468]	@ (8013a80 <tcp_process+0x7cc>)
 80138ac:	681a      	ldr	r2, [r3, #0]
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	60da      	str	r2, [r3, #12]
 80138b2:	4a73      	ldr	r2, [pc, #460]	@ (8013a80 <tcp_process+0x7cc>)
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	6013      	str	r3, [r2, #0]
 80138b8:	f002 fe96 	bl	80165e8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80138bc:	e0d2      	b.n	8013a64 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	8b5b      	ldrh	r3, [r3, #26]
 80138c2:	f043 0302 	orr.w	r3, r3, #2
 80138c6:	b29a      	uxth	r2, r3
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2208      	movs	r2, #8
 80138d0:	751a      	strb	r2, [r3, #20]
      break;
 80138d2:	e0c7      	b.n	8013a64 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80138d4:	4b6b      	ldr	r3, [pc, #428]	@ (8013a84 <tcp_process+0x7d0>)
 80138d6:	781b      	ldrb	r3, [r3, #0]
 80138d8:	f003 0310 	and.w	r3, r3, #16
 80138dc:	2b00      	cmp	r3, #0
 80138de:	f000 80c1 	beq.w	8013a64 <tcp_process+0x7b0>
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80138e6:	4b68      	ldr	r3, [pc, #416]	@ (8013a88 <tcp_process+0x7d4>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	429a      	cmp	r2, r3
 80138ec:	f040 80ba 	bne.w	8013a64 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	f040 80b5 	bne.w	8013a64 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	2206      	movs	r2, #6
 80138fe:	751a      	strb	r2, [r3, #20]
      break;
 8013900:	e0b0      	b.n	8013a64 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013902:	6878      	ldr	r0, [r7, #4]
 8013904:	f000 f9ca 	bl	8013c9c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013908:	4b60      	ldr	r3, [pc, #384]	@ (8013a8c <tcp_process+0x7d8>)
 801390a:	781b      	ldrb	r3, [r3, #0]
 801390c:	f003 0320 	and.w	r3, r3, #32
 8013910:	2b00      	cmp	r3, #0
 8013912:	f000 80a9 	beq.w	8013a68 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	8b5b      	ldrh	r3, [r3, #26]
 801391a:	f043 0302 	orr.w	r3, r3, #2
 801391e:	b29a      	uxth	r2, r3
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f7fe fd39 	bl	801239c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801392a:	4b59      	ldr	r3, [pc, #356]	@ (8013a90 <tcp_process+0x7dc>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	687a      	ldr	r2, [r7, #4]
 8013930:	429a      	cmp	r2, r3
 8013932:	d105      	bne.n	8013940 <tcp_process+0x68c>
 8013934:	4b56      	ldr	r3, [pc, #344]	@ (8013a90 <tcp_process+0x7dc>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	68db      	ldr	r3, [r3, #12]
 801393a:	4a55      	ldr	r2, [pc, #340]	@ (8013a90 <tcp_process+0x7dc>)
 801393c:	6013      	str	r3, [r2, #0]
 801393e:	e013      	b.n	8013968 <tcp_process+0x6b4>
 8013940:	4b53      	ldr	r3, [pc, #332]	@ (8013a90 <tcp_process+0x7dc>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	613b      	str	r3, [r7, #16]
 8013946:	e00c      	b.n	8013962 <tcp_process+0x6ae>
 8013948:	693b      	ldr	r3, [r7, #16]
 801394a:	68db      	ldr	r3, [r3, #12]
 801394c:	687a      	ldr	r2, [r7, #4]
 801394e:	429a      	cmp	r2, r3
 8013950:	d104      	bne.n	801395c <tcp_process+0x6a8>
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	68da      	ldr	r2, [r3, #12]
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	60da      	str	r2, [r3, #12]
 801395a:	e005      	b.n	8013968 <tcp_process+0x6b4>
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	68db      	ldr	r3, [r3, #12]
 8013960:	613b      	str	r3, [r7, #16]
 8013962:	693b      	ldr	r3, [r7, #16]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d1ef      	bne.n	8013948 <tcp_process+0x694>
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2200      	movs	r2, #0
 801396c:	60da      	str	r2, [r3, #12]
 801396e:	4b43      	ldr	r3, [pc, #268]	@ (8013a7c <tcp_process+0x7c8>)
 8013970:	2201      	movs	r2, #1
 8013972:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	220a      	movs	r2, #10
 8013978:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801397a:	4b41      	ldr	r3, [pc, #260]	@ (8013a80 <tcp_process+0x7cc>)
 801397c:	681a      	ldr	r2, [r3, #0]
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	60da      	str	r2, [r3, #12]
 8013982:	4a3f      	ldr	r2, [pc, #252]	@ (8013a80 <tcp_process+0x7cc>)
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	6013      	str	r3, [r2, #0]
 8013988:	f002 fe2e 	bl	80165e8 <tcp_timer_needed>
      }
      break;
 801398c:	e06c      	b.n	8013a68 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801398e:	6878      	ldr	r0, [r7, #4]
 8013990:	f000 f984 	bl	8013c9c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013994:	4b3b      	ldr	r3, [pc, #236]	@ (8013a84 <tcp_process+0x7d0>)
 8013996:	781b      	ldrb	r3, [r3, #0]
 8013998:	f003 0310 	and.w	r3, r3, #16
 801399c:	2b00      	cmp	r3, #0
 801399e:	d065      	beq.n	8013a6c <tcp_process+0x7b8>
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80139a4:	4b38      	ldr	r3, [pc, #224]	@ (8013a88 <tcp_process+0x7d4>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	429a      	cmp	r2, r3
 80139aa:	d15f      	bne.n	8013a6c <tcp_process+0x7b8>
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d15b      	bne.n	8013a6c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80139b4:	6878      	ldr	r0, [r7, #4]
 80139b6:	f7fe fcf1 	bl	801239c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80139ba:	4b35      	ldr	r3, [pc, #212]	@ (8013a90 <tcp_process+0x7dc>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	687a      	ldr	r2, [r7, #4]
 80139c0:	429a      	cmp	r2, r3
 80139c2:	d105      	bne.n	80139d0 <tcp_process+0x71c>
 80139c4:	4b32      	ldr	r3, [pc, #200]	@ (8013a90 <tcp_process+0x7dc>)
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	68db      	ldr	r3, [r3, #12]
 80139ca:	4a31      	ldr	r2, [pc, #196]	@ (8013a90 <tcp_process+0x7dc>)
 80139cc:	6013      	str	r3, [r2, #0]
 80139ce:	e013      	b.n	80139f8 <tcp_process+0x744>
 80139d0:	4b2f      	ldr	r3, [pc, #188]	@ (8013a90 <tcp_process+0x7dc>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	60fb      	str	r3, [r7, #12]
 80139d6:	e00c      	b.n	80139f2 <tcp_process+0x73e>
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	68db      	ldr	r3, [r3, #12]
 80139dc:	687a      	ldr	r2, [r7, #4]
 80139de:	429a      	cmp	r2, r3
 80139e0:	d104      	bne.n	80139ec <tcp_process+0x738>
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	68da      	ldr	r2, [r3, #12]
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	60da      	str	r2, [r3, #12]
 80139ea:	e005      	b.n	80139f8 <tcp_process+0x744>
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	68db      	ldr	r3, [r3, #12]
 80139f0:	60fb      	str	r3, [r7, #12]
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d1ef      	bne.n	80139d8 <tcp_process+0x724>
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2200      	movs	r2, #0
 80139fc:	60da      	str	r2, [r3, #12]
 80139fe:	4b1f      	ldr	r3, [pc, #124]	@ (8013a7c <tcp_process+0x7c8>)
 8013a00:	2201      	movs	r2, #1
 8013a02:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	220a      	movs	r2, #10
 8013a08:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8013a80 <tcp_process+0x7cc>)
 8013a0c:	681a      	ldr	r2, [r3, #0]
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	60da      	str	r2, [r3, #12]
 8013a12:	4a1b      	ldr	r2, [pc, #108]	@ (8013a80 <tcp_process+0x7cc>)
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	6013      	str	r3, [r2, #0]
 8013a18:	f002 fde6 	bl	80165e8 <tcp_timer_needed>
      }
      break;
 8013a1c:	e026      	b.n	8013a6c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013a1e:	6878      	ldr	r0, [r7, #4]
 8013a20:	f000 f93c 	bl	8013c9c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013a24:	4b17      	ldr	r3, [pc, #92]	@ (8013a84 <tcp_process+0x7d0>)
 8013a26:	781b      	ldrb	r3, [r3, #0]
 8013a28:	f003 0310 	and.w	r3, r3, #16
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d01f      	beq.n	8013a70 <tcp_process+0x7bc>
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013a34:	4b14      	ldr	r3, [pc, #80]	@ (8013a88 <tcp_process+0x7d4>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	d119      	bne.n	8013a70 <tcp_process+0x7bc>
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d115      	bne.n	8013a70 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013a44:	4b11      	ldr	r3, [pc, #68]	@ (8013a8c <tcp_process+0x7d8>)
 8013a46:	781b      	ldrb	r3, [r3, #0]
 8013a48:	f043 0310 	orr.w	r3, r3, #16
 8013a4c:	b2da      	uxtb	r2, r3
 8013a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8013a8c <tcp_process+0x7d8>)
 8013a50:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013a52:	e00d      	b.n	8013a70 <tcp_process+0x7bc>
    default:
      break;
 8013a54:	bf00      	nop
 8013a56:	e00c      	b.n	8013a72 <tcp_process+0x7be>
      break;
 8013a58:	bf00      	nop
 8013a5a:	e00a      	b.n	8013a72 <tcp_process+0x7be>
      break;
 8013a5c:	bf00      	nop
 8013a5e:	e008      	b.n	8013a72 <tcp_process+0x7be>
      break;
 8013a60:	bf00      	nop
 8013a62:	e006      	b.n	8013a72 <tcp_process+0x7be>
      break;
 8013a64:	bf00      	nop
 8013a66:	e004      	b.n	8013a72 <tcp_process+0x7be>
      break;
 8013a68:	bf00      	nop
 8013a6a:	e002      	b.n	8013a72 <tcp_process+0x7be>
      break;
 8013a6c:	bf00      	nop
 8013a6e:	e000      	b.n	8013a72 <tcp_process+0x7be>
      break;
 8013a70:	bf00      	nop
  }
  return ERR_OK;
 8013a72:	2300      	movs	r3, #0
}
 8013a74:	4618      	mov	r0, r3
 8013a76:	3724      	adds	r7, #36	@ 0x24
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd90      	pop	{r4, r7, pc}
 8013a7c:	24007b84 	.word	0x24007b84
 8013a80:	24007b80 	.word	0x24007b80
 8013a84:	24007bb4 	.word	0x24007bb4
 8013a88:	24007bac 	.word	0x24007bac
 8013a8c:	24007bb5 	.word	0x24007bb5
 8013a90:	24007b7c 	.word	0x24007b7c

08013a94 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013a94:	b590      	push	{r4, r7, lr}
 8013a96:	b085      	sub	sp, #20
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
 8013a9c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d106      	bne.n	8013ab2 <tcp_oos_insert_segment+0x1e>
 8013aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8013b94 <tcp_oos_insert_segment+0x100>)
 8013aa6:	f240 421f 	movw	r2, #1055	@ 0x41f
 8013aaa:	493b      	ldr	r1, [pc, #236]	@ (8013b98 <tcp_oos_insert_segment+0x104>)
 8013aac:	483b      	ldr	r0, [pc, #236]	@ (8013b9c <tcp_oos_insert_segment+0x108>)
 8013aae:	f003 fd2d 	bl	801750c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	68db      	ldr	r3, [r3, #12]
 8013ab6:	899b      	ldrh	r3, [r3, #12]
 8013ab8:	b29b      	uxth	r3, r3
 8013aba:	4618      	mov	r0, r3
 8013abc:	f7f6 fb56 	bl	800a16c <lwip_htons>
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	b2db      	uxtb	r3, r3
 8013ac4:	f003 0301 	and.w	r3, r3, #1
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d028      	beq.n	8013b1e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013acc:	6838      	ldr	r0, [r7, #0]
 8013ace:	f7fe fa63 	bl	8011f98 <tcp_segs_free>
    next = NULL;
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	603b      	str	r3, [r7, #0]
 8013ad6:	e056      	b.n	8013b86 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	68db      	ldr	r3, [r3, #12]
 8013adc:	899b      	ldrh	r3, [r3, #12]
 8013ade:	b29b      	uxth	r3, r3
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7f6 fb43 	bl	800a16c <lwip_htons>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	b2db      	uxtb	r3, r3
 8013aea:	f003 0301 	and.w	r3, r3, #1
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d00d      	beq.n	8013b0e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	68db      	ldr	r3, [r3, #12]
 8013af6:	899b      	ldrh	r3, [r3, #12]
 8013af8:	b29c      	uxth	r4, r3
 8013afa:	2001      	movs	r0, #1
 8013afc:	f7f6 fb36 	bl	800a16c <lwip_htons>
 8013b00:	4603      	mov	r3, r0
 8013b02:	461a      	mov	r2, r3
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	68db      	ldr	r3, [r3, #12]
 8013b08:	4322      	orrs	r2, r4
 8013b0a:	b292      	uxth	r2, r2
 8013b0c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013b0e:	683b      	ldr	r3, [r7, #0]
 8013b10:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013b12:	683b      	ldr	r3, [r7, #0]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013b18:	68f8      	ldr	r0, [r7, #12]
 8013b1a:	f7fe fa52 	bl	8011fc2 <tcp_seg_free>
    while (next &&
 8013b1e:	683b      	ldr	r3, [r7, #0]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d00e      	beq.n	8013b42 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	891b      	ldrh	r3, [r3, #8]
 8013b28:	461a      	mov	r2, r3
 8013b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8013ba0 <tcp_oos_insert_segment+0x10c>)
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	441a      	add	r2, r3
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	68db      	ldr	r3, [r3, #12]
 8013b34:	685b      	ldr	r3, [r3, #4]
 8013b36:	6839      	ldr	r1, [r7, #0]
 8013b38:	8909      	ldrh	r1, [r1, #8]
 8013b3a:	440b      	add	r3, r1
 8013b3c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	daca      	bge.n	8013ad8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d01e      	beq.n	8013b86 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	891b      	ldrh	r3, [r3, #8]
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	4b14      	ldr	r3, [pc, #80]	@ (8013ba0 <tcp_oos_insert_segment+0x10c>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	441a      	add	r2, r3
 8013b54:	683b      	ldr	r3, [r7, #0]
 8013b56:	68db      	ldr	r3, [r3, #12]
 8013b58:	685b      	ldr	r3, [r3, #4]
 8013b5a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	dd12      	ble.n	8013b86 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	68db      	ldr	r3, [r3, #12]
 8013b64:	685b      	ldr	r3, [r3, #4]
 8013b66:	b29a      	uxth	r2, r3
 8013b68:	4b0d      	ldr	r3, [pc, #52]	@ (8013ba0 <tcp_oos_insert_segment+0x10c>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	b29b      	uxth	r3, r3
 8013b6e:	1ad3      	subs	r3, r2, r3
 8013b70:	b29a      	uxth	r2, r3
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	685a      	ldr	r2, [r3, #4]
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	891b      	ldrh	r3, [r3, #8]
 8013b7e:	4619      	mov	r1, r3
 8013b80:	4610      	mov	r0, r2
 8013b82:	f7fc fb99 	bl	80102b8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	683a      	ldr	r2, [r7, #0]
 8013b8a:	601a      	str	r2, [r3, #0]
}
 8013b8c:	bf00      	nop
 8013b8e:	3714      	adds	r7, #20
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd90      	pop	{r4, r7, pc}
 8013b94:	0801a538 	.word	0x0801a538
 8013b98:	0801a824 	.word	0x0801a824
 8013b9c:	0801a5b0 	.word	0x0801a5b0
 8013ba0:	24007ba8 	.word	0x24007ba8

08013ba4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013ba4:	b5b0      	push	{r4, r5, r7, lr}
 8013ba6:	b086      	sub	sp, #24
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	60f8      	str	r0, [r7, #12]
 8013bac:	60b9      	str	r1, [r7, #8]
 8013bae:	607a      	str	r2, [r7, #4]
 8013bb0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013bb2:	e03e      	b.n	8013c32 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013bb8:	68bb      	ldr	r3, [r7, #8]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013bbe:	697b      	ldr	r3, [r7, #20]
 8013bc0:	685b      	ldr	r3, [r3, #4]
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f7fc fd8a 	bl	80106dc <pbuf_clen>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013bd2:	8a7a      	ldrh	r2, [r7, #18]
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	d906      	bls.n	8013be6 <tcp_free_acked_segments+0x42>
 8013bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8013c84 <tcp_free_acked_segments+0xe0>)
 8013bda:	f240 4257 	movw	r2, #1111	@ 0x457
 8013bde:	492a      	ldr	r1, [pc, #168]	@ (8013c88 <tcp_free_acked_segments+0xe4>)
 8013be0:	482a      	ldr	r0, [pc, #168]	@ (8013c8c <tcp_free_acked_segments+0xe8>)
 8013be2:	f003 fc93 	bl	801750c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8013bec:	8a7b      	ldrh	r3, [r7, #18]
 8013bee:	1ad3      	subs	r3, r2, r3
 8013bf0:	b29a      	uxth	r2, r3
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013bf8:	697b      	ldr	r3, [r7, #20]
 8013bfa:	891a      	ldrh	r2, [r3, #8]
 8013bfc:	4b24      	ldr	r3, [pc, #144]	@ (8013c90 <tcp_free_acked_segments+0xec>)
 8013bfe:	881b      	ldrh	r3, [r3, #0]
 8013c00:	4413      	add	r3, r2
 8013c02:	b29a      	uxth	r2, r3
 8013c04:	4b22      	ldr	r3, [pc, #136]	@ (8013c90 <tcp_free_acked_segments+0xec>)
 8013c06:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013c08:	6978      	ldr	r0, [r7, #20]
 8013c0a:	f7fe f9da 	bl	8011fc2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d00c      	beq.n	8013c32 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d109      	bne.n	8013c32 <tcp_free_acked_segments+0x8e>
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d106      	bne.n	8013c32 <tcp_free_acked_segments+0x8e>
 8013c24:	4b17      	ldr	r3, [pc, #92]	@ (8013c84 <tcp_free_acked_segments+0xe0>)
 8013c26:	f240 4261 	movw	r2, #1121	@ 0x461
 8013c2a:	491a      	ldr	r1, [pc, #104]	@ (8013c94 <tcp_free_acked_segments+0xf0>)
 8013c2c:	4817      	ldr	r0, [pc, #92]	@ (8013c8c <tcp_free_acked_segments+0xe8>)
 8013c2e:	f003 fc6d 	bl	801750c <iprintf>
  while (seg_list != NULL &&
 8013c32:	68bb      	ldr	r3, [r7, #8]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d020      	beq.n	8013c7a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013c38:	68bb      	ldr	r3, [r7, #8]
 8013c3a:	68db      	ldr	r3, [r3, #12]
 8013c3c:	685b      	ldr	r3, [r3, #4]
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7f6 faaa 	bl	800a198 <lwip_htonl>
 8013c44:	4604      	mov	r4, r0
 8013c46:	68bb      	ldr	r3, [r7, #8]
 8013c48:	891b      	ldrh	r3, [r3, #8]
 8013c4a:	461d      	mov	r5, r3
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	68db      	ldr	r3, [r3, #12]
 8013c50:	899b      	ldrh	r3, [r3, #12]
 8013c52:	b29b      	uxth	r3, r3
 8013c54:	4618      	mov	r0, r3
 8013c56:	f7f6 fa89 	bl	800a16c <lwip_htons>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	b2db      	uxtb	r3, r3
 8013c5e:	f003 0303 	and.w	r3, r3, #3
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d001      	beq.n	8013c6a <tcp_free_acked_segments+0xc6>
 8013c66:	2301      	movs	r3, #1
 8013c68:	e000      	b.n	8013c6c <tcp_free_acked_segments+0xc8>
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	442b      	add	r3, r5
 8013c6e:	18e2      	adds	r2, r4, r3
 8013c70:	4b09      	ldr	r3, [pc, #36]	@ (8013c98 <tcp_free_acked_segments+0xf4>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	dd9c      	ble.n	8013bb4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013c7a:	68bb      	ldr	r3, [r7, #8]
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3718      	adds	r7, #24
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bdb0      	pop	{r4, r5, r7, pc}
 8013c84:	0801a538 	.word	0x0801a538
 8013c88:	0801a84c 	.word	0x0801a84c
 8013c8c:	0801a5b0 	.word	0x0801a5b0
 8013c90:	24007bb0 	.word	0x24007bb0
 8013c94:	0801a874 	.word	0x0801a874
 8013c98:	24007bac 	.word	0x24007bac

08013c9c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013c9c:	b5b0      	push	{r4, r5, r7, lr}
 8013c9e:	b094      	sub	sp, #80	@ 0x50
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d106      	bne.n	8013cbc <tcp_receive+0x20>
 8013cae:	4b91      	ldr	r3, [pc, #580]	@ (8013ef4 <tcp_receive+0x258>)
 8013cb0:	f240 427b 	movw	r2, #1147	@ 0x47b
 8013cb4:	4990      	ldr	r1, [pc, #576]	@ (8013ef8 <tcp_receive+0x25c>)
 8013cb6:	4891      	ldr	r0, [pc, #580]	@ (8013efc <tcp_receive+0x260>)
 8013cb8:	f003 fc28 	bl	801750c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	7d1b      	ldrb	r3, [r3, #20]
 8013cc0:	2b03      	cmp	r3, #3
 8013cc2:	d806      	bhi.n	8013cd2 <tcp_receive+0x36>
 8013cc4:	4b8b      	ldr	r3, [pc, #556]	@ (8013ef4 <tcp_receive+0x258>)
 8013cc6:	f240 427c 	movw	r2, #1148	@ 0x47c
 8013cca:	498d      	ldr	r1, [pc, #564]	@ (8013f00 <tcp_receive+0x264>)
 8013ccc:	488b      	ldr	r0, [pc, #556]	@ (8013efc <tcp_receive+0x260>)
 8013cce:	f003 fc1d 	bl	801750c <iprintf>

  if (flags & TCP_ACK) {
 8013cd2:	4b8c      	ldr	r3, [pc, #560]	@ (8013f04 <tcp_receive+0x268>)
 8013cd4:	781b      	ldrb	r3, [r3, #0]
 8013cd6:	f003 0310 	and.w	r3, r3, #16
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	f000 8264 	beq.w	80141a8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013ce6:	461a      	mov	r2, r3
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013cec:	4413      	add	r3, r2
 8013cee:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013cf4:	4b84      	ldr	r3, [pc, #528]	@ (8013f08 <tcp_receive+0x26c>)
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	1ad3      	subs	r3, r2, r3
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	db1b      	blt.n	8013d36 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013d02:	4b81      	ldr	r3, [pc, #516]	@ (8013f08 <tcp_receive+0x26c>)
 8013d04:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d106      	bne.n	8013d18 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8013f0c <tcp_receive+0x270>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	1ad3      	subs	r3, r2, r3
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	db0e      	blt.n	8013d36 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013d1c:	4b7b      	ldr	r3, [pc, #492]	@ (8013f0c <tcp_receive+0x270>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013d20:	429a      	cmp	r2, r3
 8013d22:	d125      	bne.n	8013d70 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013d24:	4b7a      	ldr	r3, [pc, #488]	@ (8013f10 <tcp_receive+0x274>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	89db      	ldrh	r3, [r3, #14]
 8013d2a:	b29a      	uxth	r2, r3
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d91c      	bls.n	8013d70 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013d36:	4b76      	ldr	r3, [pc, #472]	@ (8013f10 <tcp_receive+0x274>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	89db      	ldrh	r3, [r3, #14]
 8013d3c:	b29a      	uxth	r2, r3
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d205      	bcs.n	8013d60 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8013d60:	4b69      	ldr	r3, [pc, #420]	@ (8013f08 <tcp_receive+0x26c>)
 8013d62:	681a      	ldr	r2, [r3, #0]
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8013d68:	4b68      	ldr	r3, [pc, #416]	@ (8013f0c <tcp_receive+0x270>)
 8013d6a:	681a      	ldr	r2, [r3, #0]
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013d70:	4b66      	ldr	r3, [pc, #408]	@ (8013f0c <tcp_receive+0x270>)
 8013d72:	681a      	ldr	r2, [r3, #0]
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d78:	1ad3      	subs	r3, r2, r3
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	dc58      	bgt.n	8013e30 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013d7e:	4b65      	ldr	r3, [pc, #404]	@ (8013f14 <tcp_receive+0x278>)
 8013d80:	881b      	ldrh	r3, [r3, #0]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d14b      	bne.n	8013e1e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013d8a:	687a      	ldr	r2, [r7, #4]
 8013d8c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8013d90:	4413      	add	r3, r2
 8013d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013d94:	429a      	cmp	r2, r3
 8013d96:	d142      	bne.n	8013e1e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	db3d      	blt.n	8013e1e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013da6:	4b59      	ldr	r3, [pc, #356]	@ (8013f0c <tcp_receive+0x270>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d137      	bne.n	8013e1e <tcp_receive+0x182>
              found_dupack = 1;
 8013dae:	2301      	movs	r3, #1
 8013db0:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013db8:	2bff      	cmp	r3, #255	@ 0xff
 8013dba:	d007      	beq.n	8013dcc <tcp_receive+0x130>
                ++pcb->dupacks;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013dc2:	3301      	adds	r3, #1
 8013dc4:	b2da      	uxtb	r2, r3
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013dd2:	2b03      	cmp	r3, #3
 8013dd4:	d91b      	bls.n	8013e0e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013de0:	4413      	add	r3, r2
 8013de2:	b29a      	uxth	r2, r3
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d30a      	bcc.n	8013e04 <tcp_receive+0x168>
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013df8:	4413      	add	r3, r2
 8013dfa:	b29a      	uxth	r2, r3
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013e02:	e004      	b.n	8013e0e <tcp_receive+0x172>
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013e0a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013e14:	2b02      	cmp	r3, #2
 8013e16:	d902      	bls.n	8013e1e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f001 fee7 	bl	8015bec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	f040 8161 	bne.w	80140e8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	2200      	movs	r2, #0
 8013e2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013e2e:	e15b      	b.n	80140e8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013e30:	4b36      	ldr	r3, [pc, #216]	@ (8013f0c <tcp_receive+0x270>)
 8013e32:	681a      	ldr	r2, [r3, #0]
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013e38:	1ad3      	subs	r3, r2, r3
 8013e3a:	3b01      	subs	r3, #1
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	f2c0 814e 	blt.w	80140de <tcp_receive+0x442>
 8013e42:	4b32      	ldr	r3, [pc, #200]	@ (8013f0c <tcp_receive+0x270>)
 8013e44:	681a      	ldr	r2, [r3, #0]
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013e4a:	1ad3      	subs	r3, r2, r3
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	f300 8146 	bgt.w	80140de <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	8b5b      	ldrh	r3, [r3, #26]
 8013e56:	f003 0304 	and.w	r3, r3, #4
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d010      	beq.n	8013e80 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	8b5b      	ldrh	r3, [r3, #26]
 8013e62:	f023 0304 	bic.w	r3, r3, #4
 8013e66:	b29a      	uxth	r2, r3
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2200      	movs	r2, #0
 8013e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013e8e:	10db      	asrs	r3, r3, #3
 8013e90:	b21b      	sxth	r3, r3
 8013e92:	b29a      	uxth	r2, r3
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013e9a:	b29b      	uxth	r3, r3
 8013e9c:	4413      	add	r3, r2
 8013e9e:	b29b      	uxth	r3, r3
 8013ea0:	b21a      	sxth	r2, r3
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013ea8:	4b18      	ldr	r3, [pc, #96]	@ (8013f0c <tcp_receive+0x270>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	b29a      	uxth	r2, r3
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013eb2:	b29b      	uxth	r3, r3
 8013eb4:	1ad3      	subs	r3, r2, r3
 8013eb6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	2200      	movs	r2, #0
 8013ebc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8013ec0:	4b12      	ldr	r3, [pc, #72]	@ (8013f0c <tcp_receive+0x270>)
 8013ec2:	681a      	ldr	r2, [r3, #0]
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	7d1b      	ldrb	r3, [r3, #20]
 8013ecc:	2b03      	cmp	r3, #3
 8013ece:	f240 8097 	bls.w	8014000 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d245      	bcs.n	8013f6e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	8b5b      	ldrh	r3, [r3, #26]
 8013ee6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d014      	beq.n	8013f18 <tcp_receive+0x27c>
 8013eee:	2301      	movs	r3, #1
 8013ef0:	e013      	b.n	8013f1a <tcp_receive+0x27e>
 8013ef2:	bf00      	nop
 8013ef4:	0801a538 	.word	0x0801a538
 8013ef8:	0801a894 	.word	0x0801a894
 8013efc:	0801a5b0 	.word	0x0801a5b0
 8013f00:	0801a8b0 	.word	0x0801a8b0
 8013f04:	24007bb4 	.word	0x24007bb4
 8013f08:	24007ba8 	.word	0x24007ba8
 8013f0c:	24007bac 	.word	0x24007bac
 8013f10:	24007b98 	.word	0x24007b98
 8013f14:	24007bb2 	.word	0x24007bb2
 8013f18:	2302      	movs	r3, #2
 8013f1a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013f1e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8013f22:	b29a      	uxth	r2, r3
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013f28:	fb12 f303 	smulbb	r3, r2, r3
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013f30:	4293      	cmp	r3, r2
 8013f32:	bf28      	it	cs
 8013f34:	4613      	movcs	r3, r2
 8013f36:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013f3e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013f40:	4413      	add	r3, r2
 8013f42:	b29a      	uxth	r2, r3
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013f4a:	429a      	cmp	r2, r3
 8013f4c:	d309      	bcc.n	8013f62 <tcp_receive+0x2c6>
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013f54:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013f56:	4413      	add	r3, r2
 8013f58:	b29a      	uxth	r2, r3
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013f60:	e04e      	b.n	8014000 <tcp_receive+0x364>
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013f68:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013f6c:	e048      	b.n	8014000 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013f74:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013f76:	4413      	add	r3, r2
 8013f78:	b29a      	uxth	r2, r3
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8013f80:	429a      	cmp	r2, r3
 8013f82:	d309      	bcc.n	8013f98 <tcp_receive+0x2fc>
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013f8a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013f8c:	4413      	add	r3, r2
 8013f8e:	b29a      	uxth	r2, r3
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8013f96:	e004      	b.n	8013fa2 <tcp_receive+0x306>
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013f9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013fae:	429a      	cmp	r2, r3
 8013fb0:	d326      	bcc.n	8014000 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013fbe:	1ad3      	subs	r3, r2, r3
 8013fc0:	b29a      	uxth	r2, r3
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013fd2:	4413      	add	r3, r2
 8013fd4:	b29a      	uxth	r2, r3
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d30a      	bcc.n	8013ff6 <tcp_receive+0x35a>
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013fea:	4413      	add	r3, r2
 8013fec:	b29a      	uxth	r2, r3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013ff4:	e004      	b.n	8014000 <tcp_receive+0x364>
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013ffc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014008:	4a98      	ldr	r2, [pc, #608]	@ (801426c <tcp_receive+0x5d0>)
 801400a:	6878      	ldr	r0, [r7, #4]
 801400c:	f7ff fdca 	bl	8013ba4 <tcp_free_acked_segments>
 8014010:	4602      	mov	r2, r0
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801401e:	4a94      	ldr	r2, [pc, #592]	@ (8014270 <tcp_receive+0x5d4>)
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f7ff fdbf 	bl	8013ba4 <tcp_free_acked_segments>
 8014026:	4602      	mov	r2, r0
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014030:	2b00      	cmp	r3, #0
 8014032:	d104      	bne.n	801403e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801403a:	861a      	strh	r2, [r3, #48]	@ 0x30
 801403c:	e002      	b.n	8014044 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	2200      	movs	r2, #0
 8014042:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2200      	movs	r2, #0
 8014048:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801404e:	2b00      	cmp	r3, #0
 8014050:	d103      	bne.n	801405a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2200      	movs	r2, #0
 8014056:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8014060:	4b84      	ldr	r3, [pc, #528]	@ (8014274 <tcp_receive+0x5d8>)
 8014062:	881b      	ldrh	r3, [r3, #0]
 8014064:	4413      	add	r3, r2
 8014066:	b29a      	uxth	r2, r3
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	8b5b      	ldrh	r3, [r3, #26]
 8014072:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014076:	2b00      	cmp	r3, #0
 8014078:	d035      	beq.n	80140e6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801407e:	2b00      	cmp	r3, #0
 8014080:	d118      	bne.n	80140b4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014086:	2b00      	cmp	r3, #0
 8014088:	d00c      	beq.n	80140a4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014092:	68db      	ldr	r3, [r3, #12]
 8014094:	685b      	ldr	r3, [r3, #4]
 8014096:	4618      	mov	r0, r3
 8014098:	f7f6 f87e 	bl	800a198 <lwip_htonl>
 801409c:	4603      	mov	r3, r0
 801409e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	dc20      	bgt.n	80140e6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	8b5b      	ldrh	r3, [r3, #26]
 80140a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80140ac:	b29a      	uxth	r2, r3
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80140b2:	e018      	b.n	80140e6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80140bc:	68db      	ldr	r3, [r3, #12]
 80140be:	685b      	ldr	r3, [r3, #4]
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7f6 f869 	bl	800a198 <lwip_htonl>
 80140c6:	4603      	mov	r3, r0
 80140c8:	1ae3      	subs	r3, r4, r3
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	dc0b      	bgt.n	80140e6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	8b5b      	ldrh	r3, [r3, #26]
 80140d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80140d6:	b29a      	uxth	r2, r3
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80140dc:	e003      	b.n	80140e6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80140de:	6878      	ldr	r0, [r7, #4]
 80140e0:	f001 ff70 	bl	8015fc4 <tcp_send_empty_ack>
 80140e4:	e000      	b.n	80140e8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80140e6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d05b      	beq.n	80141a8 <tcp_receive+0x50c>
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80140f4:	4b60      	ldr	r3, [pc, #384]	@ (8014278 <tcp_receive+0x5dc>)
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	1ad3      	subs	r3, r2, r3
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	da54      	bge.n	80141a8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80140fe:	4b5f      	ldr	r3, [pc, #380]	@ (801427c <tcp_receive+0x5e0>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	b29a      	uxth	r2, r3
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014108:	b29b      	uxth	r3, r3
 801410a:	1ad3      	subs	r3, r2, r3
 801410c:	b29b      	uxth	r3, r3
 801410e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014112:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801411c:	10db      	asrs	r3, r3, #3
 801411e:	b21b      	sxth	r3, r3
 8014120:	b29b      	uxth	r3, r3
 8014122:	1ad3      	subs	r3, r2, r3
 8014124:	b29b      	uxth	r3, r3
 8014126:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014130:	b29a      	uxth	r2, r3
 8014132:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8014136:	4413      	add	r3, r2
 8014138:	b29b      	uxth	r3, r3
 801413a:	b21a      	sxth	r2, r3
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8014140:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8014144:	2b00      	cmp	r3, #0
 8014146:	da05      	bge.n	8014154 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8014148:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801414c:	425b      	negs	r3, r3
 801414e:	b29b      	uxth	r3, r3
 8014150:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014154:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801415e:	109b      	asrs	r3, r3, #2
 8014160:	b21b      	sxth	r3, r3
 8014162:	b29b      	uxth	r3, r3
 8014164:	1ad3      	subs	r3, r2, r3
 8014166:	b29b      	uxth	r3, r3
 8014168:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014172:	b29a      	uxth	r2, r3
 8014174:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8014178:	4413      	add	r3, r2
 801417a:	b29b      	uxth	r3, r3
 801417c:	b21a      	sxth	r2, r3
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014188:	10db      	asrs	r3, r3, #3
 801418a:	b21b      	sxth	r3, r3
 801418c:	b29a      	uxth	r2, r3
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014194:	b29b      	uxth	r3, r3
 8014196:	4413      	add	r3, r2
 8014198:	b29b      	uxth	r3, r3
 801419a:	b21a      	sxth	r2, r3
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	2200      	movs	r2, #0
 80141a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80141a8:	4b35      	ldr	r3, [pc, #212]	@ (8014280 <tcp_receive+0x5e4>)
 80141aa:	881b      	ldrh	r3, [r3, #0]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	f000 84df 	beq.w	8014b70 <tcp_receive+0xed4>
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	7d1b      	ldrb	r3, [r3, #20]
 80141b6:	2b06      	cmp	r3, #6
 80141b8:	f200 84da 	bhi.w	8014b70 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80141c0:	4b30      	ldr	r3, [pc, #192]	@ (8014284 <tcp_receive+0x5e8>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	1ad3      	subs	r3, r2, r3
 80141c6:	3b01      	subs	r3, #1
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	f2c0 808f 	blt.w	80142ec <tcp_receive+0x650>
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80141d2:	4b2b      	ldr	r3, [pc, #172]	@ (8014280 <tcp_receive+0x5e4>)
 80141d4:	881b      	ldrh	r3, [r3, #0]
 80141d6:	4619      	mov	r1, r3
 80141d8:	4b2a      	ldr	r3, [pc, #168]	@ (8014284 <tcp_receive+0x5e8>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	440b      	add	r3, r1
 80141de:	1ad3      	subs	r3, r2, r3
 80141e0:	3301      	adds	r3, #1
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	f300 8082 	bgt.w	80142ec <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80141e8:	4b27      	ldr	r3, [pc, #156]	@ (8014288 <tcp_receive+0x5ec>)
 80141ea:	685b      	ldr	r3, [r3, #4]
 80141ec:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80141f2:	4b24      	ldr	r3, [pc, #144]	@ (8014284 <tcp_receive+0x5e8>)
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	1ad3      	subs	r3, r2, r3
 80141f8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80141fa:	4b23      	ldr	r3, [pc, #140]	@ (8014288 <tcp_receive+0x5ec>)
 80141fc:	685b      	ldr	r3, [r3, #4]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d106      	bne.n	8014210 <tcp_receive+0x574>
 8014202:	4b22      	ldr	r3, [pc, #136]	@ (801428c <tcp_receive+0x5f0>)
 8014204:	f240 5294 	movw	r2, #1428	@ 0x594
 8014208:	4921      	ldr	r1, [pc, #132]	@ (8014290 <tcp_receive+0x5f4>)
 801420a:	4822      	ldr	r0, [pc, #136]	@ (8014294 <tcp_receive+0x5f8>)
 801420c:	f003 f97e 	bl	801750c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014212:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8014216:	4293      	cmp	r3, r2
 8014218:	d906      	bls.n	8014228 <tcp_receive+0x58c>
 801421a:	4b1c      	ldr	r3, [pc, #112]	@ (801428c <tcp_receive+0x5f0>)
 801421c:	f240 5295 	movw	r2, #1429	@ 0x595
 8014220:	491d      	ldr	r1, [pc, #116]	@ (8014298 <tcp_receive+0x5fc>)
 8014222:	481c      	ldr	r0, [pc, #112]	@ (8014294 <tcp_receive+0x5f8>)
 8014224:	f003 f972 	bl	801750c <iprintf>
      off = (u16_t)off32;
 8014228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801422a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801422e:	4b16      	ldr	r3, [pc, #88]	@ (8014288 <tcp_receive+0x5ec>)
 8014230:	685b      	ldr	r3, [r3, #4]
 8014232:	891b      	ldrh	r3, [r3, #8]
 8014234:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014238:	429a      	cmp	r2, r3
 801423a:	d906      	bls.n	801424a <tcp_receive+0x5ae>
 801423c:	4b13      	ldr	r3, [pc, #76]	@ (801428c <tcp_receive+0x5f0>)
 801423e:	f240 5297 	movw	r2, #1431	@ 0x597
 8014242:	4916      	ldr	r1, [pc, #88]	@ (801429c <tcp_receive+0x600>)
 8014244:	4813      	ldr	r0, [pc, #76]	@ (8014294 <tcp_receive+0x5f8>)
 8014246:	f003 f961 	bl	801750c <iprintf>
      inseg.len -= off;
 801424a:	4b0f      	ldr	r3, [pc, #60]	@ (8014288 <tcp_receive+0x5ec>)
 801424c:	891a      	ldrh	r2, [r3, #8]
 801424e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014252:	1ad3      	subs	r3, r2, r3
 8014254:	b29a      	uxth	r2, r3
 8014256:	4b0c      	ldr	r3, [pc, #48]	@ (8014288 <tcp_receive+0x5ec>)
 8014258:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801425a:	4b0b      	ldr	r3, [pc, #44]	@ (8014288 <tcp_receive+0x5ec>)
 801425c:	685b      	ldr	r3, [r3, #4]
 801425e:	891a      	ldrh	r2, [r3, #8]
 8014260:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014264:	1ad3      	subs	r3, r2, r3
 8014266:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8014268:	e02a      	b.n	80142c0 <tcp_receive+0x624>
 801426a:	bf00      	nop
 801426c:	0801a8cc 	.word	0x0801a8cc
 8014270:	0801a8d4 	.word	0x0801a8d4
 8014274:	24007bb0 	.word	0x24007bb0
 8014278:	24007bac 	.word	0x24007bac
 801427c:	24007b70 	.word	0x24007b70
 8014280:	24007bb2 	.word	0x24007bb2
 8014284:	24007ba8 	.word	0x24007ba8
 8014288:	24007b88 	.word	0x24007b88
 801428c:	0801a538 	.word	0x0801a538
 8014290:	0801a8dc 	.word	0x0801a8dc
 8014294:	0801a5b0 	.word	0x0801a5b0
 8014298:	0801a8ec 	.word	0x0801a8ec
 801429c:	0801a8fc 	.word	0x0801a8fc
        off -= p->len;
 80142a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142a2:	895b      	ldrh	r3, [r3, #10]
 80142a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80142a8:	1ad3      	subs	r3, r2, r3
 80142aa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80142ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142b0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80142b2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80142b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142b6:	2200      	movs	r2, #0
 80142b8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80142ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80142c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142c2:	895b      	ldrh	r3, [r3, #10]
 80142c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80142c8:	429a      	cmp	r2, r3
 80142ca:	d8e9      	bhi.n	80142a0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80142cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80142d0:	4619      	mov	r1, r3
 80142d2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80142d4:	f7fc f8ee 	bl	80104b4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142dc:	4a90      	ldr	r2, [pc, #576]	@ (8014520 <tcp_receive+0x884>)
 80142de:	6013      	str	r3, [r2, #0]
 80142e0:	4b90      	ldr	r3, [pc, #576]	@ (8014524 <tcp_receive+0x888>)
 80142e2:	68db      	ldr	r3, [r3, #12]
 80142e4:	4a8e      	ldr	r2, [pc, #568]	@ (8014520 <tcp_receive+0x884>)
 80142e6:	6812      	ldr	r2, [r2, #0]
 80142e8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80142ea:	e00d      	b.n	8014308 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80142ec:	4b8c      	ldr	r3, [pc, #560]	@ (8014520 <tcp_receive+0x884>)
 80142ee:	681a      	ldr	r2, [r3, #0]
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142f4:	1ad3      	subs	r3, r2, r3
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	da06      	bge.n	8014308 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	8b5b      	ldrh	r3, [r3, #26]
 80142fe:	f043 0302 	orr.w	r3, r3, #2
 8014302:	b29a      	uxth	r2, r3
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014308:	4b85      	ldr	r3, [pc, #532]	@ (8014520 <tcp_receive+0x884>)
 801430a:	681a      	ldr	r2, [r3, #0]
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014310:	1ad3      	subs	r3, r2, r3
 8014312:	2b00      	cmp	r3, #0
 8014314:	f2c0 8427 	blt.w	8014b66 <tcp_receive+0xeca>
 8014318:	4b81      	ldr	r3, [pc, #516]	@ (8014520 <tcp_receive+0x884>)
 801431a:	681a      	ldr	r2, [r3, #0]
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014320:	6879      	ldr	r1, [r7, #4]
 8014322:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014324:	440b      	add	r3, r1
 8014326:	1ad3      	subs	r3, r2, r3
 8014328:	3301      	adds	r3, #1
 801432a:	2b00      	cmp	r3, #0
 801432c:	f300 841b 	bgt.w	8014b66 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014334:	4b7a      	ldr	r3, [pc, #488]	@ (8014520 <tcp_receive+0x884>)
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	429a      	cmp	r2, r3
 801433a:	f040 8298 	bne.w	801486e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801433e:	4b79      	ldr	r3, [pc, #484]	@ (8014524 <tcp_receive+0x888>)
 8014340:	891c      	ldrh	r4, [r3, #8]
 8014342:	4b78      	ldr	r3, [pc, #480]	@ (8014524 <tcp_receive+0x888>)
 8014344:	68db      	ldr	r3, [r3, #12]
 8014346:	899b      	ldrh	r3, [r3, #12]
 8014348:	b29b      	uxth	r3, r3
 801434a:	4618      	mov	r0, r3
 801434c:	f7f5 ff0e 	bl	800a16c <lwip_htons>
 8014350:	4603      	mov	r3, r0
 8014352:	b2db      	uxtb	r3, r3
 8014354:	f003 0303 	and.w	r3, r3, #3
 8014358:	2b00      	cmp	r3, #0
 801435a:	d001      	beq.n	8014360 <tcp_receive+0x6c4>
 801435c:	2301      	movs	r3, #1
 801435e:	e000      	b.n	8014362 <tcp_receive+0x6c6>
 8014360:	2300      	movs	r3, #0
 8014362:	4423      	add	r3, r4
 8014364:	b29a      	uxth	r2, r3
 8014366:	4b70      	ldr	r3, [pc, #448]	@ (8014528 <tcp_receive+0x88c>)
 8014368:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801436e:	4b6e      	ldr	r3, [pc, #440]	@ (8014528 <tcp_receive+0x88c>)
 8014370:	881b      	ldrh	r3, [r3, #0]
 8014372:	429a      	cmp	r2, r3
 8014374:	d274      	bcs.n	8014460 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014376:	4b6b      	ldr	r3, [pc, #428]	@ (8014524 <tcp_receive+0x888>)
 8014378:	68db      	ldr	r3, [r3, #12]
 801437a:	899b      	ldrh	r3, [r3, #12]
 801437c:	b29b      	uxth	r3, r3
 801437e:	4618      	mov	r0, r3
 8014380:	f7f5 fef4 	bl	800a16c <lwip_htons>
 8014384:	4603      	mov	r3, r0
 8014386:	b2db      	uxtb	r3, r3
 8014388:	f003 0301 	and.w	r3, r3, #1
 801438c:	2b00      	cmp	r3, #0
 801438e:	d01e      	beq.n	80143ce <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014390:	4b64      	ldr	r3, [pc, #400]	@ (8014524 <tcp_receive+0x888>)
 8014392:	68db      	ldr	r3, [r3, #12]
 8014394:	899b      	ldrh	r3, [r3, #12]
 8014396:	b29b      	uxth	r3, r3
 8014398:	b21b      	sxth	r3, r3
 801439a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801439e:	b21c      	sxth	r4, r3
 80143a0:	4b60      	ldr	r3, [pc, #384]	@ (8014524 <tcp_receive+0x888>)
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	899b      	ldrh	r3, [r3, #12]
 80143a6:	b29b      	uxth	r3, r3
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7f5 fedf 	bl	800a16c <lwip_htons>
 80143ae:	4603      	mov	r3, r0
 80143b0:	b2db      	uxtb	r3, r3
 80143b2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80143b6:	b29b      	uxth	r3, r3
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7f5 fed7 	bl	800a16c <lwip_htons>
 80143be:	4603      	mov	r3, r0
 80143c0:	b21b      	sxth	r3, r3
 80143c2:	4323      	orrs	r3, r4
 80143c4:	b21a      	sxth	r2, r3
 80143c6:	4b57      	ldr	r3, [pc, #348]	@ (8014524 <tcp_receive+0x888>)
 80143c8:	68db      	ldr	r3, [r3, #12]
 80143ca:	b292      	uxth	r2, r2
 80143cc:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80143d2:	4b54      	ldr	r3, [pc, #336]	@ (8014524 <tcp_receive+0x888>)
 80143d4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80143d6:	4b53      	ldr	r3, [pc, #332]	@ (8014524 <tcp_receive+0x888>)
 80143d8:	68db      	ldr	r3, [r3, #12]
 80143da:	899b      	ldrh	r3, [r3, #12]
 80143dc:	b29b      	uxth	r3, r3
 80143de:	4618      	mov	r0, r3
 80143e0:	f7f5 fec4 	bl	800a16c <lwip_htons>
 80143e4:	4603      	mov	r3, r0
 80143e6:	b2db      	uxtb	r3, r3
 80143e8:	f003 0302 	and.w	r3, r3, #2
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d005      	beq.n	80143fc <tcp_receive+0x760>
            inseg.len -= 1;
 80143f0:	4b4c      	ldr	r3, [pc, #304]	@ (8014524 <tcp_receive+0x888>)
 80143f2:	891b      	ldrh	r3, [r3, #8]
 80143f4:	3b01      	subs	r3, #1
 80143f6:	b29a      	uxth	r2, r3
 80143f8:	4b4a      	ldr	r3, [pc, #296]	@ (8014524 <tcp_receive+0x888>)
 80143fa:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80143fc:	4b49      	ldr	r3, [pc, #292]	@ (8014524 <tcp_receive+0x888>)
 80143fe:	685b      	ldr	r3, [r3, #4]
 8014400:	4a48      	ldr	r2, [pc, #288]	@ (8014524 <tcp_receive+0x888>)
 8014402:	8912      	ldrh	r2, [r2, #8]
 8014404:	4611      	mov	r1, r2
 8014406:	4618      	mov	r0, r3
 8014408:	f7fb ff56 	bl	80102b8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801440c:	4b45      	ldr	r3, [pc, #276]	@ (8014524 <tcp_receive+0x888>)
 801440e:	891c      	ldrh	r4, [r3, #8]
 8014410:	4b44      	ldr	r3, [pc, #272]	@ (8014524 <tcp_receive+0x888>)
 8014412:	68db      	ldr	r3, [r3, #12]
 8014414:	899b      	ldrh	r3, [r3, #12]
 8014416:	b29b      	uxth	r3, r3
 8014418:	4618      	mov	r0, r3
 801441a:	f7f5 fea7 	bl	800a16c <lwip_htons>
 801441e:	4603      	mov	r3, r0
 8014420:	b2db      	uxtb	r3, r3
 8014422:	f003 0303 	and.w	r3, r3, #3
 8014426:	2b00      	cmp	r3, #0
 8014428:	d001      	beq.n	801442e <tcp_receive+0x792>
 801442a:	2301      	movs	r3, #1
 801442c:	e000      	b.n	8014430 <tcp_receive+0x794>
 801442e:	2300      	movs	r3, #0
 8014430:	4423      	add	r3, r4
 8014432:	b29a      	uxth	r2, r3
 8014434:	4b3c      	ldr	r3, [pc, #240]	@ (8014528 <tcp_receive+0x88c>)
 8014436:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014438:	4b3b      	ldr	r3, [pc, #236]	@ (8014528 <tcp_receive+0x88c>)
 801443a:	881b      	ldrh	r3, [r3, #0]
 801443c:	461a      	mov	r2, r3
 801443e:	4b38      	ldr	r3, [pc, #224]	@ (8014520 <tcp_receive+0x884>)
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	441a      	add	r2, r3
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014448:	6879      	ldr	r1, [r7, #4]
 801444a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801444c:	440b      	add	r3, r1
 801444e:	429a      	cmp	r2, r3
 8014450:	d006      	beq.n	8014460 <tcp_receive+0x7c4>
 8014452:	4b36      	ldr	r3, [pc, #216]	@ (801452c <tcp_receive+0x890>)
 8014454:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8014458:	4935      	ldr	r1, [pc, #212]	@ (8014530 <tcp_receive+0x894>)
 801445a:	4836      	ldr	r0, [pc, #216]	@ (8014534 <tcp_receive+0x898>)
 801445c:	f003 f856 	bl	801750c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014464:	2b00      	cmp	r3, #0
 8014466:	f000 80e6 	beq.w	8014636 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801446a:	4b2e      	ldr	r3, [pc, #184]	@ (8014524 <tcp_receive+0x888>)
 801446c:	68db      	ldr	r3, [r3, #12]
 801446e:	899b      	ldrh	r3, [r3, #12]
 8014470:	b29b      	uxth	r3, r3
 8014472:	4618      	mov	r0, r3
 8014474:	f7f5 fe7a 	bl	800a16c <lwip_htons>
 8014478:	4603      	mov	r3, r0
 801447a:	b2db      	uxtb	r3, r3
 801447c:	f003 0301 	and.w	r3, r3, #1
 8014480:	2b00      	cmp	r3, #0
 8014482:	d010      	beq.n	80144a6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014484:	e00a      	b.n	801449c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801448a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014490:	681a      	ldr	r2, [r3, #0]
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8014496:	68f8      	ldr	r0, [r7, #12]
 8014498:	f7fd fd93 	bl	8011fc2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d1f0      	bne.n	8014486 <tcp_receive+0x7ea>
 80144a4:	e0c7      	b.n	8014636 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80144aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80144ac:	e051      	b.n	8014552 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80144ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144b0:	68db      	ldr	r3, [r3, #12]
 80144b2:	899b      	ldrh	r3, [r3, #12]
 80144b4:	b29b      	uxth	r3, r3
 80144b6:	4618      	mov	r0, r3
 80144b8:	f7f5 fe58 	bl	800a16c <lwip_htons>
 80144bc:	4603      	mov	r3, r0
 80144be:	b2db      	uxtb	r3, r3
 80144c0:	f003 0301 	and.w	r3, r3, #1
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d03c      	beq.n	8014542 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80144c8:	4b16      	ldr	r3, [pc, #88]	@ (8014524 <tcp_receive+0x888>)
 80144ca:	68db      	ldr	r3, [r3, #12]
 80144cc:	899b      	ldrh	r3, [r3, #12]
 80144ce:	b29b      	uxth	r3, r3
 80144d0:	4618      	mov	r0, r3
 80144d2:	f7f5 fe4b 	bl	800a16c <lwip_htons>
 80144d6:	4603      	mov	r3, r0
 80144d8:	b2db      	uxtb	r3, r3
 80144da:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d12f      	bne.n	8014542 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80144e2:	4b10      	ldr	r3, [pc, #64]	@ (8014524 <tcp_receive+0x888>)
 80144e4:	68db      	ldr	r3, [r3, #12]
 80144e6:	899b      	ldrh	r3, [r3, #12]
 80144e8:	b29c      	uxth	r4, r3
 80144ea:	2001      	movs	r0, #1
 80144ec:	f7f5 fe3e 	bl	800a16c <lwip_htons>
 80144f0:	4603      	mov	r3, r0
 80144f2:	461a      	mov	r2, r3
 80144f4:	4b0b      	ldr	r3, [pc, #44]	@ (8014524 <tcp_receive+0x888>)
 80144f6:	68db      	ldr	r3, [r3, #12]
 80144f8:	4322      	orrs	r2, r4
 80144fa:	b292      	uxth	r2, r2
 80144fc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80144fe:	4b09      	ldr	r3, [pc, #36]	@ (8014524 <tcp_receive+0x888>)
 8014500:	891c      	ldrh	r4, [r3, #8]
 8014502:	4b08      	ldr	r3, [pc, #32]	@ (8014524 <tcp_receive+0x888>)
 8014504:	68db      	ldr	r3, [r3, #12]
 8014506:	899b      	ldrh	r3, [r3, #12]
 8014508:	b29b      	uxth	r3, r3
 801450a:	4618      	mov	r0, r3
 801450c:	f7f5 fe2e 	bl	800a16c <lwip_htons>
 8014510:	4603      	mov	r3, r0
 8014512:	b2db      	uxtb	r3, r3
 8014514:	f003 0303 	and.w	r3, r3, #3
 8014518:	2b00      	cmp	r3, #0
 801451a:	d00d      	beq.n	8014538 <tcp_receive+0x89c>
 801451c:	2301      	movs	r3, #1
 801451e:	e00c      	b.n	801453a <tcp_receive+0x89e>
 8014520:	24007ba8 	.word	0x24007ba8
 8014524:	24007b88 	.word	0x24007b88
 8014528:	24007bb2 	.word	0x24007bb2
 801452c:	0801a538 	.word	0x0801a538
 8014530:	0801a90c 	.word	0x0801a90c
 8014534:	0801a5b0 	.word	0x0801a5b0
 8014538:	2300      	movs	r3, #0
 801453a:	4423      	add	r3, r4
 801453c:	b29a      	uxth	r2, r3
 801453e:	4b98      	ldr	r3, [pc, #608]	@ (80147a0 <tcp_receive+0xb04>)
 8014540:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014544:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801454c:	6938      	ldr	r0, [r7, #16]
 801454e:	f7fd fd38 	bl	8011fc2 <tcp_seg_free>
            while (next &&
 8014552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014554:	2b00      	cmp	r3, #0
 8014556:	d00e      	beq.n	8014576 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014558:	4b91      	ldr	r3, [pc, #580]	@ (80147a0 <tcp_receive+0xb04>)
 801455a:	881b      	ldrh	r3, [r3, #0]
 801455c:	461a      	mov	r2, r3
 801455e:	4b91      	ldr	r3, [pc, #580]	@ (80147a4 <tcp_receive+0xb08>)
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	441a      	add	r2, r3
 8014564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014566:	68db      	ldr	r3, [r3, #12]
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801456c:	8909      	ldrh	r1, [r1, #8]
 801456e:	440b      	add	r3, r1
 8014570:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014572:	2b00      	cmp	r3, #0
 8014574:	da9b      	bge.n	80144ae <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014578:	2b00      	cmp	r3, #0
 801457a:	d059      	beq.n	8014630 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801457c:	4b88      	ldr	r3, [pc, #544]	@ (80147a0 <tcp_receive+0xb04>)
 801457e:	881b      	ldrh	r3, [r3, #0]
 8014580:	461a      	mov	r2, r3
 8014582:	4b88      	ldr	r3, [pc, #544]	@ (80147a4 <tcp_receive+0xb08>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	441a      	add	r2, r3
 8014588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801458a:	68db      	ldr	r3, [r3, #12]
 801458c:	685b      	ldr	r3, [r3, #4]
 801458e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014590:	2b00      	cmp	r3, #0
 8014592:	dd4d      	ble.n	8014630 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014596:	68db      	ldr	r3, [r3, #12]
 8014598:	685b      	ldr	r3, [r3, #4]
 801459a:	b29a      	uxth	r2, r3
 801459c:	4b81      	ldr	r3, [pc, #516]	@ (80147a4 <tcp_receive+0xb08>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	b29b      	uxth	r3, r3
 80145a2:	1ad3      	subs	r3, r2, r3
 80145a4:	b29a      	uxth	r2, r3
 80145a6:	4b80      	ldr	r3, [pc, #512]	@ (80147a8 <tcp_receive+0xb0c>)
 80145a8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80145aa:	4b7f      	ldr	r3, [pc, #508]	@ (80147a8 <tcp_receive+0xb0c>)
 80145ac:	68db      	ldr	r3, [r3, #12]
 80145ae:	899b      	ldrh	r3, [r3, #12]
 80145b0:	b29b      	uxth	r3, r3
 80145b2:	4618      	mov	r0, r3
 80145b4:	f7f5 fdda 	bl	800a16c <lwip_htons>
 80145b8:	4603      	mov	r3, r0
 80145ba:	b2db      	uxtb	r3, r3
 80145bc:	f003 0302 	and.w	r3, r3, #2
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d005      	beq.n	80145d0 <tcp_receive+0x934>
                inseg.len -= 1;
 80145c4:	4b78      	ldr	r3, [pc, #480]	@ (80147a8 <tcp_receive+0xb0c>)
 80145c6:	891b      	ldrh	r3, [r3, #8]
 80145c8:	3b01      	subs	r3, #1
 80145ca:	b29a      	uxth	r2, r3
 80145cc:	4b76      	ldr	r3, [pc, #472]	@ (80147a8 <tcp_receive+0xb0c>)
 80145ce:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80145d0:	4b75      	ldr	r3, [pc, #468]	@ (80147a8 <tcp_receive+0xb0c>)
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	4a74      	ldr	r2, [pc, #464]	@ (80147a8 <tcp_receive+0xb0c>)
 80145d6:	8912      	ldrh	r2, [r2, #8]
 80145d8:	4611      	mov	r1, r2
 80145da:	4618      	mov	r0, r3
 80145dc:	f7fb fe6c 	bl	80102b8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80145e0:	4b71      	ldr	r3, [pc, #452]	@ (80147a8 <tcp_receive+0xb0c>)
 80145e2:	891c      	ldrh	r4, [r3, #8]
 80145e4:	4b70      	ldr	r3, [pc, #448]	@ (80147a8 <tcp_receive+0xb0c>)
 80145e6:	68db      	ldr	r3, [r3, #12]
 80145e8:	899b      	ldrh	r3, [r3, #12]
 80145ea:	b29b      	uxth	r3, r3
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7f5 fdbd 	bl	800a16c <lwip_htons>
 80145f2:	4603      	mov	r3, r0
 80145f4:	b2db      	uxtb	r3, r3
 80145f6:	f003 0303 	and.w	r3, r3, #3
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d001      	beq.n	8014602 <tcp_receive+0x966>
 80145fe:	2301      	movs	r3, #1
 8014600:	e000      	b.n	8014604 <tcp_receive+0x968>
 8014602:	2300      	movs	r3, #0
 8014604:	4423      	add	r3, r4
 8014606:	b29a      	uxth	r2, r3
 8014608:	4b65      	ldr	r3, [pc, #404]	@ (80147a0 <tcp_receive+0xb04>)
 801460a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801460c:	4b64      	ldr	r3, [pc, #400]	@ (80147a0 <tcp_receive+0xb04>)
 801460e:	881b      	ldrh	r3, [r3, #0]
 8014610:	461a      	mov	r2, r3
 8014612:	4b64      	ldr	r3, [pc, #400]	@ (80147a4 <tcp_receive+0xb08>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	441a      	add	r2, r3
 8014618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801461a:	68db      	ldr	r3, [r3, #12]
 801461c:	685b      	ldr	r3, [r3, #4]
 801461e:	429a      	cmp	r2, r3
 8014620:	d006      	beq.n	8014630 <tcp_receive+0x994>
 8014622:	4b62      	ldr	r3, [pc, #392]	@ (80147ac <tcp_receive+0xb10>)
 8014624:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8014628:	4961      	ldr	r1, [pc, #388]	@ (80147b0 <tcp_receive+0xb14>)
 801462a:	4862      	ldr	r0, [pc, #392]	@ (80147b4 <tcp_receive+0xb18>)
 801462c:	f002 ff6e 	bl	801750c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014634:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014636:	4b5a      	ldr	r3, [pc, #360]	@ (80147a0 <tcp_receive+0xb04>)
 8014638:	881b      	ldrh	r3, [r3, #0]
 801463a:	461a      	mov	r2, r3
 801463c:	4b59      	ldr	r3, [pc, #356]	@ (80147a4 <tcp_receive+0xb08>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	441a      	add	r2, r3
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801464a:	4b55      	ldr	r3, [pc, #340]	@ (80147a0 <tcp_receive+0xb04>)
 801464c:	881b      	ldrh	r3, [r3, #0]
 801464e:	429a      	cmp	r2, r3
 8014650:	d206      	bcs.n	8014660 <tcp_receive+0x9c4>
 8014652:	4b56      	ldr	r3, [pc, #344]	@ (80147ac <tcp_receive+0xb10>)
 8014654:	f240 6207 	movw	r2, #1543	@ 0x607
 8014658:	4957      	ldr	r1, [pc, #348]	@ (80147b8 <tcp_receive+0xb1c>)
 801465a:	4856      	ldr	r0, [pc, #344]	@ (80147b4 <tcp_receive+0xb18>)
 801465c:	f002 ff56 	bl	801750c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014664:	4b4e      	ldr	r3, [pc, #312]	@ (80147a0 <tcp_receive+0xb04>)
 8014666:	881b      	ldrh	r3, [r3, #0]
 8014668:	1ad3      	subs	r3, r2, r3
 801466a:	b29a      	uxth	r2, r3
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014670:	6878      	ldr	r0, [r7, #4]
 8014672:	f7fc ffc5 	bl	8011600 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014676:	4b4c      	ldr	r3, [pc, #304]	@ (80147a8 <tcp_receive+0xb0c>)
 8014678:	685b      	ldr	r3, [r3, #4]
 801467a:	891b      	ldrh	r3, [r3, #8]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d006      	beq.n	801468e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8014680:	4b49      	ldr	r3, [pc, #292]	@ (80147a8 <tcp_receive+0xb0c>)
 8014682:	685b      	ldr	r3, [r3, #4]
 8014684:	4a4d      	ldr	r2, [pc, #308]	@ (80147bc <tcp_receive+0xb20>)
 8014686:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014688:	4b47      	ldr	r3, [pc, #284]	@ (80147a8 <tcp_receive+0xb0c>)
 801468a:	2200      	movs	r2, #0
 801468c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801468e:	4b46      	ldr	r3, [pc, #280]	@ (80147a8 <tcp_receive+0xb0c>)
 8014690:	68db      	ldr	r3, [r3, #12]
 8014692:	899b      	ldrh	r3, [r3, #12]
 8014694:	b29b      	uxth	r3, r3
 8014696:	4618      	mov	r0, r3
 8014698:	f7f5 fd68 	bl	800a16c <lwip_htons>
 801469c:	4603      	mov	r3, r0
 801469e:	b2db      	uxtb	r3, r3
 80146a0:	f003 0301 	and.w	r3, r3, #1
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	f000 80b8 	beq.w	801481a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80146aa:	4b45      	ldr	r3, [pc, #276]	@ (80147c0 <tcp_receive+0xb24>)
 80146ac:	781b      	ldrb	r3, [r3, #0]
 80146ae:	f043 0320 	orr.w	r3, r3, #32
 80146b2:	b2da      	uxtb	r2, r3
 80146b4:	4b42      	ldr	r3, [pc, #264]	@ (80147c0 <tcp_receive+0xb24>)
 80146b6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80146b8:	e0af      	b.n	801481a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80146be:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80146c4:	68db      	ldr	r3, [r3, #12]
 80146c6:	685b      	ldr	r3, [r3, #4]
 80146c8:	4a36      	ldr	r2, [pc, #216]	@ (80147a4 <tcp_receive+0xb08>)
 80146ca:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80146cc:	68bb      	ldr	r3, [r7, #8]
 80146ce:	891b      	ldrh	r3, [r3, #8]
 80146d0:	461c      	mov	r4, r3
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	68db      	ldr	r3, [r3, #12]
 80146d6:	899b      	ldrh	r3, [r3, #12]
 80146d8:	b29b      	uxth	r3, r3
 80146da:	4618      	mov	r0, r3
 80146dc:	f7f5 fd46 	bl	800a16c <lwip_htons>
 80146e0:	4603      	mov	r3, r0
 80146e2:	b2db      	uxtb	r3, r3
 80146e4:	f003 0303 	and.w	r3, r3, #3
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d001      	beq.n	80146f0 <tcp_receive+0xa54>
 80146ec:	2301      	movs	r3, #1
 80146ee:	e000      	b.n	80146f2 <tcp_receive+0xa56>
 80146f0:	2300      	movs	r3, #0
 80146f2:	191a      	adds	r2, r3, r4
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146f8:	441a      	add	r2, r3
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014702:	461c      	mov	r4, r3
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	891b      	ldrh	r3, [r3, #8]
 8014708:	461d      	mov	r5, r3
 801470a:	68bb      	ldr	r3, [r7, #8]
 801470c:	68db      	ldr	r3, [r3, #12]
 801470e:	899b      	ldrh	r3, [r3, #12]
 8014710:	b29b      	uxth	r3, r3
 8014712:	4618      	mov	r0, r3
 8014714:	f7f5 fd2a 	bl	800a16c <lwip_htons>
 8014718:	4603      	mov	r3, r0
 801471a:	b2db      	uxtb	r3, r3
 801471c:	f003 0303 	and.w	r3, r3, #3
 8014720:	2b00      	cmp	r3, #0
 8014722:	d001      	beq.n	8014728 <tcp_receive+0xa8c>
 8014724:	2301      	movs	r3, #1
 8014726:	e000      	b.n	801472a <tcp_receive+0xa8e>
 8014728:	2300      	movs	r3, #0
 801472a:	442b      	add	r3, r5
 801472c:	429c      	cmp	r4, r3
 801472e:	d206      	bcs.n	801473e <tcp_receive+0xaa2>
 8014730:	4b1e      	ldr	r3, [pc, #120]	@ (80147ac <tcp_receive+0xb10>)
 8014732:	f240 622b 	movw	r2, #1579	@ 0x62b
 8014736:	4923      	ldr	r1, [pc, #140]	@ (80147c4 <tcp_receive+0xb28>)
 8014738:	481e      	ldr	r0, [pc, #120]	@ (80147b4 <tcp_receive+0xb18>)
 801473a:	f002 fee7 	bl	801750c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	891b      	ldrh	r3, [r3, #8]
 8014742:	461c      	mov	r4, r3
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	68db      	ldr	r3, [r3, #12]
 8014748:	899b      	ldrh	r3, [r3, #12]
 801474a:	b29b      	uxth	r3, r3
 801474c:	4618      	mov	r0, r3
 801474e:	f7f5 fd0d 	bl	800a16c <lwip_htons>
 8014752:	4603      	mov	r3, r0
 8014754:	b2db      	uxtb	r3, r3
 8014756:	f003 0303 	and.w	r3, r3, #3
 801475a:	2b00      	cmp	r3, #0
 801475c:	d001      	beq.n	8014762 <tcp_receive+0xac6>
 801475e:	2301      	movs	r3, #1
 8014760:	e000      	b.n	8014764 <tcp_receive+0xac8>
 8014762:	2300      	movs	r3, #0
 8014764:	1919      	adds	r1, r3, r4
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801476a:	b28b      	uxth	r3, r1
 801476c:	1ad3      	subs	r3, r2, r3
 801476e:	b29a      	uxth	r2, r3
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f7fc ff43 	bl	8011600 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801477a:	68bb      	ldr	r3, [r7, #8]
 801477c:	685b      	ldr	r3, [r3, #4]
 801477e:	891b      	ldrh	r3, [r3, #8]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d028      	beq.n	80147d6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014784:	4b0d      	ldr	r3, [pc, #52]	@ (80147bc <tcp_receive+0xb20>)
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d01d      	beq.n	80147c8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801478c:	4b0b      	ldr	r3, [pc, #44]	@ (80147bc <tcp_receive+0xb20>)
 801478e:	681a      	ldr	r2, [r3, #0]
 8014790:	68bb      	ldr	r3, [r7, #8]
 8014792:	685b      	ldr	r3, [r3, #4]
 8014794:	4619      	mov	r1, r3
 8014796:	4610      	mov	r0, r2
 8014798:	f7fb ffe0 	bl	801075c <pbuf_cat>
 801479c:	e018      	b.n	80147d0 <tcp_receive+0xb34>
 801479e:	bf00      	nop
 80147a0:	24007bb2 	.word	0x24007bb2
 80147a4:	24007ba8 	.word	0x24007ba8
 80147a8:	24007b88 	.word	0x24007b88
 80147ac:	0801a538 	.word	0x0801a538
 80147b0:	0801a944 	.word	0x0801a944
 80147b4:	0801a5b0 	.word	0x0801a5b0
 80147b8:	0801a980 	.word	0x0801a980
 80147bc:	24007bb8 	.word	0x24007bb8
 80147c0:	24007bb5 	.word	0x24007bb5
 80147c4:	0801a9a0 	.word	0x0801a9a0
            } else {
              recv_data = cseg->p;
 80147c8:	68bb      	ldr	r3, [r7, #8]
 80147ca:	685b      	ldr	r3, [r3, #4]
 80147cc:	4a70      	ldr	r2, [pc, #448]	@ (8014990 <tcp_receive+0xcf4>)
 80147ce:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	2200      	movs	r2, #0
 80147d4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	68db      	ldr	r3, [r3, #12]
 80147da:	899b      	ldrh	r3, [r3, #12]
 80147dc:	b29b      	uxth	r3, r3
 80147de:	4618      	mov	r0, r3
 80147e0:	f7f5 fcc4 	bl	800a16c <lwip_htons>
 80147e4:	4603      	mov	r3, r0
 80147e6:	b2db      	uxtb	r3, r3
 80147e8:	f003 0301 	and.w	r3, r3, #1
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d00d      	beq.n	801480c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80147f0:	4b68      	ldr	r3, [pc, #416]	@ (8014994 <tcp_receive+0xcf8>)
 80147f2:	781b      	ldrb	r3, [r3, #0]
 80147f4:	f043 0320 	orr.w	r3, r3, #32
 80147f8:	b2da      	uxtb	r2, r3
 80147fa:	4b66      	ldr	r3, [pc, #408]	@ (8014994 <tcp_receive+0xcf8>)
 80147fc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	7d1b      	ldrb	r3, [r3, #20]
 8014802:	2b04      	cmp	r3, #4
 8014804:	d102      	bne.n	801480c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	2207      	movs	r2, #7
 801480a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	681a      	ldr	r2, [r3, #0]
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8014814:	68b8      	ldr	r0, [r7, #8]
 8014816:	f7fd fbd4 	bl	8011fc2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801481e:	2b00      	cmp	r3, #0
 8014820:	d008      	beq.n	8014834 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014826:	68db      	ldr	r3, [r3, #12]
 8014828:	685a      	ldr	r2, [r3, #4]
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801482e:	429a      	cmp	r2, r3
 8014830:	f43f af43 	beq.w	80146ba <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	8b5b      	ldrh	r3, [r3, #26]
 8014838:	f003 0301 	and.w	r3, r3, #1
 801483c:	2b00      	cmp	r3, #0
 801483e:	d00e      	beq.n	801485e <tcp_receive+0xbc2>
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	8b5b      	ldrh	r3, [r3, #26]
 8014844:	f023 0301 	bic.w	r3, r3, #1
 8014848:	b29a      	uxth	r2, r3
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	835a      	strh	r2, [r3, #26]
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	8b5b      	ldrh	r3, [r3, #26]
 8014852:	f043 0302 	orr.w	r3, r3, #2
 8014856:	b29a      	uxth	r2, r3
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801485c:	e187      	b.n	8014b6e <tcp_receive+0xed2>
        tcp_ack(pcb);
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	8b5b      	ldrh	r3, [r3, #26]
 8014862:	f043 0301 	orr.w	r3, r3, #1
 8014866:	b29a      	uxth	r2, r3
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801486c:	e17f      	b.n	8014b6e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014872:	2b00      	cmp	r3, #0
 8014874:	d106      	bne.n	8014884 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014876:	4848      	ldr	r0, [pc, #288]	@ (8014998 <tcp_receive+0xcfc>)
 8014878:	f7fd fbbc 	bl	8011ff4 <tcp_seg_copy>
 801487c:	4602      	mov	r2, r0
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	675a      	str	r2, [r3, #116]	@ 0x74
 8014882:	e16c      	b.n	8014b5e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014884:	2300      	movs	r3, #0
 8014886:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801488c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801488e:	e156      	b.n	8014b3e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8014890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014892:	68db      	ldr	r3, [r3, #12]
 8014894:	685a      	ldr	r2, [r3, #4]
 8014896:	4b41      	ldr	r3, [pc, #260]	@ (801499c <tcp_receive+0xd00>)
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	429a      	cmp	r2, r3
 801489c:	d11d      	bne.n	80148da <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801489e:	4b3e      	ldr	r3, [pc, #248]	@ (8014998 <tcp_receive+0xcfc>)
 80148a0:	891a      	ldrh	r2, [r3, #8]
 80148a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148a4:	891b      	ldrh	r3, [r3, #8]
 80148a6:	429a      	cmp	r2, r3
 80148a8:	f240 814e 	bls.w	8014b48 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80148ac:	483a      	ldr	r0, [pc, #232]	@ (8014998 <tcp_receive+0xcfc>)
 80148ae:	f7fd fba1 	bl	8011ff4 <tcp_seg_copy>
 80148b2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80148b4:	697b      	ldr	r3, [r7, #20]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	f000 8148 	beq.w	8014b4c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80148bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d003      	beq.n	80148ca <tcp_receive+0xc2e>
                    prev->next = cseg;
 80148c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80148c4:	697a      	ldr	r2, [r7, #20]
 80148c6:	601a      	str	r2, [r3, #0]
 80148c8:	e002      	b.n	80148d0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	697a      	ldr	r2, [r7, #20]
 80148ce:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80148d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80148d2:	6978      	ldr	r0, [r7, #20]
 80148d4:	f7ff f8de 	bl	8013a94 <tcp_oos_insert_segment>
                }
                break;
 80148d8:	e138      	b.n	8014b4c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80148da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d117      	bne.n	8014910 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80148e0:	4b2e      	ldr	r3, [pc, #184]	@ (801499c <tcp_receive+0xd00>)
 80148e2:	681a      	ldr	r2, [r3, #0]
 80148e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148e6:	68db      	ldr	r3, [r3, #12]
 80148e8:	685b      	ldr	r3, [r3, #4]
 80148ea:	1ad3      	subs	r3, r2, r3
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	da57      	bge.n	80149a0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80148f0:	4829      	ldr	r0, [pc, #164]	@ (8014998 <tcp_receive+0xcfc>)
 80148f2:	f7fd fb7f 	bl	8011ff4 <tcp_seg_copy>
 80148f6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80148f8:	69bb      	ldr	r3, [r7, #24]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	f000 8128 	beq.w	8014b50 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	69ba      	ldr	r2, [r7, #24]
 8014904:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014906:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014908:	69b8      	ldr	r0, [r7, #24]
 801490a:	f7ff f8c3 	bl	8013a94 <tcp_oos_insert_segment>
                  }
                  break;
 801490e:	e11f      	b.n	8014b50 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014910:	4b22      	ldr	r3, [pc, #136]	@ (801499c <tcp_receive+0xd00>)
 8014912:	681a      	ldr	r2, [r3, #0]
 8014914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014916:	68db      	ldr	r3, [r3, #12]
 8014918:	685b      	ldr	r3, [r3, #4]
 801491a:	1ad3      	subs	r3, r2, r3
 801491c:	3b01      	subs	r3, #1
 801491e:	2b00      	cmp	r3, #0
 8014920:	db3e      	blt.n	80149a0 <tcp_receive+0xd04>
 8014922:	4b1e      	ldr	r3, [pc, #120]	@ (801499c <tcp_receive+0xd00>)
 8014924:	681a      	ldr	r2, [r3, #0]
 8014926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014928:	68db      	ldr	r3, [r3, #12]
 801492a:	685b      	ldr	r3, [r3, #4]
 801492c:	1ad3      	subs	r3, r2, r3
 801492e:	3301      	adds	r3, #1
 8014930:	2b00      	cmp	r3, #0
 8014932:	dc35      	bgt.n	80149a0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014934:	4818      	ldr	r0, [pc, #96]	@ (8014998 <tcp_receive+0xcfc>)
 8014936:	f7fd fb5d 	bl	8011ff4 <tcp_seg_copy>
 801493a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801493c:	69fb      	ldr	r3, [r7, #28]
 801493e:	2b00      	cmp	r3, #0
 8014940:	f000 8108 	beq.w	8014b54 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014946:	68db      	ldr	r3, [r3, #12]
 8014948:	685b      	ldr	r3, [r3, #4]
 801494a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801494c:	8912      	ldrh	r2, [r2, #8]
 801494e:	441a      	add	r2, r3
 8014950:	4b12      	ldr	r3, [pc, #72]	@ (801499c <tcp_receive+0xd00>)
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	1ad3      	subs	r3, r2, r3
 8014956:	2b00      	cmp	r3, #0
 8014958:	dd12      	ble.n	8014980 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801495a:	4b10      	ldr	r3, [pc, #64]	@ (801499c <tcp_receive+0xd00>)
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	b29a      	uxth	r2, r3
 8014960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014962:	68db      	ldr	r3, [r3, #12]
 8014964:	685b      	ldr	r3, [r3, #4]
 8014966:	b29b      	uxth	r3, r3
 8014968:	1ad3      	subs	r3, r2, r3
 801496a:	b29a      	uxth	r2, r3
 801496c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801496e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014972:	685a      	ldr	r2, [r3, #4]
 8014974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014976:	891b      	ldrh	r3, [r3, #8]
 8014978:	4619      	mov	r1, r3
 801497a:	4610      	mov	r0, r2
 801497c:	f7fb fc9c 	bl	80102b8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014982:	69fa      	ldr	r2, [r7, #28]
 8014984:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014986:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014988:	69f8      	ldr	r0, [r7, #28]
 801498a:	f7ff f883 	bl	8013a94 <tcp_oos_insert_segment>
                  }
                  break;
 801498e:	e0e1      	b.n	8014b54 <tcp_receive+0xeb8>
 8014990:	24007bb8 	.word	0x24007bb8
 8014994:	24007bb5 	.word	0x24007bb5
 8014998:	24007b88 	.word	0x24007b88
 801499c:	24007ba8 	.word	0x24007ba8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80149a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149a2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80149a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	f040 80c5 	bne.w	8014b38 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80149ae:	4b7f      	ldr	r3, [pc, #508]	@ (8014bac <tcp_receive+0xf10>)
 80149b0:	681a      	ldr	r2, [r3, #0]
 80149b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149b4:	68db      	ldr	r3, [r3, #12]
 80149b6:	685b      	ldr	r3, [r3, #4]
 80149b8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	f340 80bc 	ble.w	8014b38 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80149c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149c2:	68db      	ldr	r3, [r3, #12]
 80149c4:	899b      	ldrh	r3, [r3, #12]
 80149c6:	b29b      	uxth	r3, r3
 80149c8:	4618      	mov	r0, r3
 80149ca:	f7f5 fbcf 	bl	800a16c <lwip_htons>
 80149ce:	4603      	mov	r3, r0
 80149d0:	b2db      	uxtb	r3, r3
 80149d2:	f003 0301 	and.w	r3, r3, #1
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	f040 80be 	bne.w	8014b58 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80149dc:	4874      	ldr	r0, [pc, #464]	@ (8014bb0 <tcp_receive+0xf14>)
 80149de:	f7fd fb09 	bl	8011ff4 <tcp_seg_copy>
 80149e2:	4602      	mov	r2, r0
 80149e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149e6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80149e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	f000 80b5 	beq.w	8014b5c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80149f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149f4:	68db      	ldr	r3, [r3, #12]
 80149f6:	685b      	ldr	r3, [r3, #4]
 80149f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80149fa:	8912      	ldrh	r2, [r2, #8]
 80149fc:	441a      	add	r2, r3
 80149fe:	4b6b      	ldr	r3, [pc, #428]	@ (8014bac <tcp_receive+0xf10>)
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	1ad3      	subs	r3, r2, r3
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	dd12      	ble.n	8014a2e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014a08:	4b68      	ldr	r3, [pc, #416]	@ (8014bac <tcp_receive+0xf10>)
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	b29a      	uxth	r2, r3
 8014a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a10:	68db      	ldr	r3, [r3, #12]
 8014a12:	685b      	ldr	r3, [r3, #4]
 8014a14:	b29b      	uxth	r3, r3
 8014a16:	1ad3      	subs	r3, r2, r3
 8014a18:	b29a      	uxth	r2, r3
 8014a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a1c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a20:	685a      	ldr	r2, [r3, #4]
 8014a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a24:	891b      	ldrh	r3, [r3, #8]
 8014a26:	4619      	mov	r1, r3
 8014a28:	4610      	mov	r0, r2
 8014a2a:	f7fb fc45 	bl	80102b8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014a2e:	4b61      	ldr	r3, [pc, #388]	@ (8014bb4 <tcp_receive+0xf18>)
 8014a30:	881b      	ldrh	r3, [r3, #0]
 8014a32:	461a      	mov	r2, r3
 8014a34:	4b5d      	ldr	r3, [pc, #372]	@ (8014bac <tcp_receive+0xf10>)
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	441a      	add	r2, r3
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a3e:	6879      	ldr	r1, [r7, #4]
 8014a40:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014a42:	440b      	add	r3, r1
 8014a44:	1ad3      	subs	r3, r2, r3
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	f340 8088 	ble.w	8014b5c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	68db      	ldr	r3, [r3, #12]
 8014a52:	899b      	ldrh	r3, [r3, #12]
 8014a54:	b29b      	uxth	r3, r3
 8014a56:	4618      	mov	r0, r3
 8014a58:	f7f5 fb88 	bl	800a16c <lwip_htons>
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	b2db      	uxtb	r3, r3
 8014a60:	f003 0301 	and.w	r3, r3, #1
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d021      	beq.n	8014aac <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	68db      	ldr	r3, [r3, #12]
 8014a6e:	899b      	ldrh	r3, [r3, #12]
 8014a70:	b29b      	uxth	r3, r3
 8014a72:	b21b      	sxth	r3, r3
 8014a74:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8014a78:	b21c      	sxth	r4, r3
 8014a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	68db      	ldr	r3, [r3, #12]
 8014a80:	899b      	ldrh	r3, [r3, #12]
 8014a82:	b29b      	uxth	r3, r3
 8014a84:	4618      	mov	r0, r3
 8014a86:	f7f5 fb71 	bl	800a16c <lwip_htons>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	b2db      	uxtb	r3, r3
 8014a8e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	4618      	mov	r0, r3
 8014a96:	f7f5 fb69 	bl	800a16c <lwip_htons>
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	b21b      	sxth	r3, r3
 8014a9e:	4323      	orrs	r3, r4
 8014aa0:	b21a      	sxth	r2, r3
 8014aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	68db      	ldr	r3, [r3, #12]
 8014aa8:	b292      	uxth	r2, r2
 8014aaa:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ab0:	b29a      	uxth	r2, r3
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ab6:	4413      	add	r3, r2
 8014ab8:	b299      	uxth	r1, r3
 8014aba:	4b3c      	ldr	r3, [pc, #240]	@ (8014bac <tcp_receive+0xf10>)
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	b29a      	uxth	r2, r3
 8014ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	1a8a      	subs	r2, r1, r2
 8014ac6:	b292      	uxth	r2, r2
 8014ac8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	685a      	ldr	r2, [r3, #4]
 8014ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	891b      	ldrh	r3, [r3, #8]
 8014ad6:	4619      	mov	r1, r3
 8014ad8:	4610      	mov	r0, r2
 8014ada:	f7fb fbed 	bl	80102b8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	891c      	ldrh	r4, [r3, #8]
 8014ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	68db      	ldr	r3, [r3, #12]
 8014aea:	899b      	ldrh	r3, [r3, #12]
 8014aec:	b29b      	uxth	r3, r3
 8014aee:	4618      	mov	r0, r3
 8014af0:	f7f5 fb3c 	bl	800a16c <lwip_htons>
 8014af4:	4603      	mov	r3, r0
 8014af6:	b2db      	uxtb	r3, r3
 8014af8:	f003 0303 	and.w	r3, r3, #3
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d001      	beq.n	8014b04 <tcp_receive+0xe68>
 8014b00:	2301      	movs	r3, #1
 8014b02:	e000      	b.n	8014b06 <tcp_receive+0xe6a>
 8014b04:	2300      	movs	r3, #0
 8014b06:	4423      	add	r3, r4
 8014b08:	b29a      	uxth	r2, r3
 8014b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8014bb4 <tcp_receive+0xf18>)
 8014b0c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014b0e:	4b29      	ldr	r3, [pc, #164]	@ (8014bb4 <tcp_receive+0xf18>)
 8014b10:	881b      	ldrh	r3, [r3, #0]
 8014b12:	461a      	mov	r2, r3
 8014b14:	4b25      	ldr	r3, [pc, #148]	@ (8014bac <tcp_receive+0xf10>)
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	441a      	add	r2, r3
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b1e:	6879      	ldr	r1, [r7, #4]
 8014b20:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014b22:	440b      	add	r3, r1
 8014b24:	429a      	cmp	r2, r3
 8014b26:	d019      	beq.n	8014b5c <tcp_receive+0xec0>
 8014b28:	4b23      	ldr	r3, [pc, #140]	@ (8014bb8 <tcp_receive+0xf1c>)
 8014b2a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8014b2e:	4923      	ldr	r1, [pc, #140]	@ (8014bbc <tcp_receive+0xf20>)
 8014b30:	4823      	ldr	r0, [pc, #140]	@ (8014bc0 <tcp_receive+0xf24>)
 8014b32:	f002 fceb 	bl	801750c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014b36:	e011      	b.n	8014b5c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	f47f aea5 	bne.w	8014890 <tcp_receive+0xbf4>
 8014b46:	e00a      	b.n	8014b5e <tcp_receive+0xec2>
                break;
 8014b48:	bf00      	nop
 8014b4a:	e008      	b.n	8014b5e <tcp_receive+0xec2>
                break;
 8014b4c:	bf00      	nop
 8014b4e:	e006      	b.n	8014b5e <tcp_receive+0xec2>
                  break;
 8014b50:	bf00      	nop
 8014b52:	e004      	b.n	8014b5e <tcp_receive+0xec2>
                  break;
 8014b54:	bf00      	nop
 8014b56:	e002      	b.n	8014b5e <tcp_receive+0xec2>
                  break;
 8014b58:	bf00      	nop
 8014b5a:	e000      	b.n	8014b5e <tcp_receive+0xec2>
                break;
 8014b5c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014b5e:	6878      	ldr	r0, [r7, #4]
 8014b60:	f001 fa30 	bl	8015fc4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014b64:	e003      	b.n	8014b6e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014b66:	6878      	ldr	r0, [r7, #4]
 8014b68:	f001 fa2c 	bl	8015fc4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014b6c:	e01a      	b.n	8014ba4 <tcp_receive+0xf08>
 8014b6e:	e019      	b.n	8014ba4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014b70:	4b0e      	ldr	r3, [pc, #56]	@ (8014bac <tcp_receive+0xf10>)
 8014b72:	681a      	ldr	r2, [r3, #0]
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b78:	1ad3      	subs	r3, r2, r3
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	db0a      	blt.n	8014b94 <tcp_receive+0xef8>
 8014b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8014bac <tcp_receive+0xf10>)
 8014b80:	681a      	ldr	r2, [r3, #0]
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b86:	6879      	ldr	r1, [r7, #4]
 8014b88:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014b8a:	440b      	add	r3, r1
 8014b8c:	1ad3      	subs	r3, r2, r3
 8014b8e:	3301      	adds	r3, #1
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	dd07      	ble.n	8014ba4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	8b5b      	ldrh	r3, [r3, #26]
 8014b98:	f043 0302 	orr.w	r3, r3, #2
 8014b9c:	b29a      	uxth	r2, r3
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014ba2:	e7ff      	b.n	8014ba4 <tcp_receive+0xf08>
 8014ba4:	bf00      	nop
 8014ba6:	3750      	adds	r7, #80	@ 0x50
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bdb0      	pop	{r4, r5, r7, pc}
 8014bac:	24007ba8 	.word	0x24007ba8
 8014bb0:	24007b88 	.word	0x24007b88
 8014bb4:	24007bb2 	.word	0x24007bb2
 8014bb8:	0801a538 	.word	0x0801a538
 8014bbc:	0801a90c 	.word	0x0801a90c
 8014bc0:	0801a5b0 	.word	0x0801a5b0

08014bc4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014bc4:	b480      	push	{r7}
 8014bc6:	b083      	sub	sp, #12
 8014bc8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014bca:	4b15      	ldr	r3, [pc, #84]	@ (8014c20 <tcp_get_next_optbyte+0x5c>)
 8014bcc:	881b      	ldrh	r3, [r3, #0]
 8014bce:	1c5a      	adds	r2, r3, #1
 8014bd0:	b291      	uxth	r1, r2
 8014bd2:	4a13      	ldr	r2, [pc, #76]	@ (8014c20 <tcp_get_next_optbyte+0x5c>)
 8014bd4:	8011      	strh	r1, [r2, #0]
 8014bd6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014bd8:	4b12      	ldr	r3, [pc, #72]	@ (8014c24 <tcp_get_next_optbyte+0x60>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d004      	beq.n	8014bea <tcp_get_next_optbyte+0x26>
 8014be0:	4b11      	ldr	r3, [pc, #68]	@ (8014c28 <tcp_get_next_optbyte+0x64>)
 8014be2:	881b      	ldrh	r3, [r3, #0]
 8014be4:	88fa      	ldrh	r2, [r7, #6]
 8014be6:	429a      	cmp	r2, r3
 8014be8:	d208      	bcs.n	8014bfc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014bea:	4b10      	ldr	r3, [pc, #64]	@ (8014c2c <tcp_get_next_optbyte+0x68>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	3314      	adds	r3, #20
 8014bf0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014bf2:	88fb      	ldrh	r3, [r7, #6]
 8014bf4:	683a      	ldr	r2, [r7, #0]
 8014bf6:	4413      	add	r3, r2
 8014bf8:	781b      	ldrb	r3, [r3, #0]
 8014bfa:	e00b      	b.n	8014c14 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014bfc:	88fb      	ldrh	r3, [r7, #6]
 8014bfe:	b2da      	uxtb	r2, r3
 8014c00:	4b09      	ldr	r3, [pc, #36]	@ (8014c28 <tcp_get_next_optbyte+0x64>)
 8014c02:	881b      	ldrh	r3, [r3, #0]
 8014c04:	b2db      	uxtb	r3, r3
 8014c06:	1ad3      	subs	r3, r2, r3
 8014c08:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014c0a:	4b06      	ldr	r3, [pc, #24]	@ (8014c24 <tcp_get_next_optbyte+0x60>)
 8014c0c:	681a      	ldr	r2, [r3, #0]
 8014c0e:	797b      	ldrb	r3, [r7, #5]
 8014c10:	4413      	add	r3, r2
 8014c12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014c14:	4618      	mov	r0, r3
 8014c16:	370c      	adds	r7, #12
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1e:	4770      	bx	lr
 8014c20:	24007ba4 	.word	0x24007ba4
 8014c24:	24007ba0 	.word	0x24007ba0
 8014c28:	24007b9e 	.word	0x24007b9e
 8014c2c:	24007b98 	.word	0x24007b98

08014c30 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b084      	sub	sp, #16
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d106      	bne.n	8014c4c <tcp_parseopt+0x1c>
 8014c3e:	4b32      	ldr	r3, [pc, #200]	@ (8014d08 <tcp_parseopt+0xd8>)
 8014c40:	f240 727d 	movw	r2, #1917	@ 0x77d
 8014c44:	4931      	ldr	r1, [pc, #196]	@ (8014d0c <tcp_parseopt+0xdc>)
 8014c46:	4832      	ldr	r0, [pc, #200]	@ (8014d10 <tcp_parseopt+0xe0>)
 8014c48:	f002 fc60 	bl	801750c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014c4c:	4b31      	ldr	r3, [pc, #196]	@ (8014d14 <tcp_parseopt+0xe4>)
 8014c4e:	881b      	ldrh	r3, [r3, #0]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d056      	beq.n	8014d02 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014c54:	4b30      	ldr	r3, [pc, #192]	@ (8014d18 <tcp_parseopt+0xe8>)
 8014c56:	2200      	movs	r2, #0
 8014c58:	801a      	strh	r2, [r3, #0]
 8014c5a:	e046      	b.n	8014cea <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8014c5c:	f7ff ffb2 	bl	8014bc4 <tcp_get_next_optbyte>
 8014c60:	4603      	mov	r3, r0
 8014c62:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014c64:	7bfb      	ldrb	r3, [r7, #15]
 8014c66:	2b02      	cmp	r3, #2
 8014c68:	d006      	beq.n	8014c78 <tcp_parseopt+0x48>
 8014c6a:	2b02      	cmp	r3, #2
 8014c6c:	dc2a      	bgt.n	8014cc4 <tcp_parseopt+0x94>
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d042      	beq.n	8014cf8 <tcp_parseopt+0xc8>
 8014c72:	2b01      	cmp	r3, #1
 8014c74:	d038      	beq.n	8014ce8 <tcp_parseopt+0xb8>
 8014c76:	e025      	b.n	8014cc4 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014c78:	f7ff ffa4 	bl	8014bc4 <tcp_get_next_optbyte>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	2b04      	cmp	r3, #4
 8014c80:	d13c      	bne.n	8014cfc <tcp_parseopt+0xcc>
 8014c82:	4b25      	ldr	r3, [pc, #148]	@ (8014d18 <tcp_parseopt+0xe8>)
 8014c84:	881b      	ldrh	r3, [r3, #0]
 8014c86:	3301      	adds	r3, #1
 8014c88:	4a22      	ldr	r2, [pc, #136]	@ (8014d14 <tcp_parseopt+0xe4>)
 8014c8a:	8812      	ldrh	r2, [r2, #0]
 8014c8c:	4293      	cmp	r3, r2
 8014c8e:	da35      	bge.n	8014cfc <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014c90:	f7ff ff98 	bl	8014bc4 <tcp_get_next_optbyte>
 8014c94:	4603      	mov	r3, r0
 8014c96:	021b      	lsls	r3, r3, #8
 8014c98:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014c9a:	f7ff ff93 	bl	8014bc4 <tcp_get_next_optbyte>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	461a      	mov	r2, r3
 8014ca2:	89bb      	ldrh	r3, [r7, #12]
 8014ca4:	4313      	orrs	r3, r2
 8014ca6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014ca8:	89bb      	ldrh	r3, [r7, #12]
 8014caa:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8014cae:	d804      	bhi.n	8014cba <tcp_parseopt+0x8a>
 8014cb0:	89bb      	ldrh	r3, [r7, #12]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d001      	beq.n	8014cba <tcp_parseopt+0x8a>
 8014cb6:	89ba      	ldrh	r2, [r7, #12]
 8014cb8:	e001      	b.n	8014cbe <tcp_parseopt+0x8e>
 8014cba:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8014cc2:	e012      	b.n	8014cea <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014cc4:	f7ff ff7e 	bl	8014bc4 <tcp_get_next_optbyte>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014ccc:	7afb      	ldrb	r3, [r7, #11]
 8014cce:	2b01      	cmp	r3, #1
 8014cd0:	d916      	bls.n	8014d00 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014cd2:	7afb      	ldrb	r3, [r7, #11]
 8014cd4:	b29a      	uxth	r2, r3
 8014cd6:	4b10      	ldr	r3, [pc, #64]	@ (8014d18 <tcp_parseopt+0xe8>)
 8014cd8:	881b      	ldrh	r3, [r3, #0]
 8014cda:	4413      	add	r3, r2
 8014cdc:	b29b      	uxth	r3, r3
 8014cde:	3b02      	subs	r3, #2
 8014ce0:	b29a      	uxth	r2, r3
 8014ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8014d18 <tcp_parseopt+0xe8>)
 8014ce4:	801a      	strh	r2, [r3, #0]
 8014ce6:	e000      	b.n	8014cea <tcp_parseopt+0xba>
          break;
 8014ce8:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014cea:	4b0b      	ldr	r3, [pc, #44]	@ (8014d18 <tcp_parseopt+0xe8>)
 8014cec:	881a      	ldrh	r2, [r3, #0]
 8014cee:	4b09      	ldr	r3, [pc, #36]	@ (8014d14 <tcp_parseopt+0xe4>)
 8014cf0:	881b      	ldrh	r3, [r3, #0]
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d3b2      	bcc.n	8014c5c <tcp_parseopt+0x2c>
 8014cf6:	e004      	b.n	8014d02 <tcp_parseopt+0xd2>
          return;
 8014cf8:	bf00      	nop
 8014cfa:	e002      	b.n	8014d02 <tcp_parseopt+0xd2>
            return;
 8014cfc:	bf00      	nop
 8014cfe:	e000      	b.n	8014d02 <tcp_parseopt+0xd2>
            return;
 8014d00:	bf00      	nop
      }
    }
  }
}
 8014d02:	3710      	adds	r7, #16
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd80      	pop	{r7, pc}
 8014d08:	0801a538 	.word	0x0801a538
 8014d0c:	0801a9c8 	.word	0x0801a9c8
 8014d10:	0801a5b0 	.word	0x0801a5b0
 8014d14:	24007b9c 	.word	0x24007b9c
 8014d18:	24007ba4 	.word	0x24007ba4

08014d1c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014d1c:	b480      	push	{r7}
 8014d1e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014d20:	4b05      	ldr	r3, [pc, #20]	@ (8014d38 <tcp_trigger_input_pcb_close+0x1c>)
 8014d22:	781b      	ldrb	r3, [r3, #0]
 8014d24:	f043 0310 	orr.w	r3, r3, #16
 8014d28:	b2da      	uxtb	r2, r3
 8014d2a:	4b03      	ldr	r3, [pc, #12]	@ (8014d38 <tcp_trigger_input_pcb_close+0x1c>)
 8014d2c:	701a      	strb	r2, [r3, #0]
}
 8014d2e:	bf00      	nop
 8014d30:	46bd      	mov	sp, r7
 8014d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d36:	4770      	bx	lr
 8014d38:	24007bb5 	.word	0x24007bb5

08014d3c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b084      	sub	sp, #16
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	60f8      	str	r0, [r7, #12]
 8014d44:	60b9      	str	r1, [r7, #8]
 8014d46:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d00a      	beq.n	8014d64 <tcp_route+0x28>
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	7a1b      	ldrb	r3, [r3, #8]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d006      	beq.n	8014d64 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	7a1b      	ldrb	r3, [r3, #8]
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7fb f8a4 	bl	800fea8 <netif_get_by_index>
 8014d60:	4603      	mov	r3, r0
 8014d62:	e003      	b.n	8014d6c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014d64:	6878      	ldr	r0, [r7, #4]
 8014d66:	f7f8 fead 	bl	800dac4 <ip4_route>
 8014d6a:	4603      	mov	r3, r0
  }
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	3710      	adds	r7, #16
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}

08014d74 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014d74:	b590      	push	{r4, r7, lr}
 8014d76:	b087      	sub	sp, #28
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	60f8      	str	r0, [r7, #12]
 8014d7c:	60b9      	str	r1, [r7, #8]
 8014d7e:	603b      	str	r3, [r7, #0]
 8014d80:	4613      	mov	r3, r2
 8014d82:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d105      	bne.n	8014d96 <tcp_create_segment+0x22>
 8014d8a:	4b43      	ldr	r3, [pc, #268]	@ (8014e98 <tcp_create_segment+0x124>)
 8014d8c:	22a3      	movs	r2, #163	@ 0xa3
 8014d8e:	4943      	ldr	r1, [pc, #268]	@ (8014e9c <tcp_create_segment+0x128>)
 8014d90:	4843      	ldr	r0, [pc, #268]	@ (8014ea0 <tcp_create_segment+0x12c>)
 8014d92:	f002 fbbb 	bl	801750c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014d96:	68bb      	ldr	r3, [r7, #8]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d105      	bne.n	8014da8 <tcp_create_segment+0x34>
 8014d9c:	4b3e      	ldr	r3, [pc, #248]	@ (8014e98 <tcp_create_segment+0x124>)
 8014d9e:	22a4      	movs	r2, #164	@ 0xa4
 8014da0:	4940      	ldr	r1, [pc, #256]	@ (8014ea4 <tcp_create_segment+0x130>)
 8014da2:	483f      	ldr	r0, [pc, #252]	@ (8014ea0 <tcp_create_segment+0x12c>)
 8014da4:	f002 fbb2 	bl	801750c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014da8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014dac:	009b      	lsls	r3, r3, #2
 8014dae:	b2db      	uxtb	r3, r3
 8014db0:	f003 0304 	and.w	r3, r3, #4
 8014db4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014db6:	2003      	movs	r0, #3
 8014db8:	f7fa fcc4 	bl	800f744 <memp_malloc>
 8014dbc:	6138      	str	r0, [r7, #16]
 8014dbe:	693b      	ldr	r3, [r7, #16]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d104      	bne.n	8014dce <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014dc4:	68b8      	ldr	r0, [r7, #8]
 8014dc6:	f7fb fbfb 	bl	80105c0 <pbuf_free>
    return NULL;
 8014dca:	2300      	movs	r3, #0
 8014dcc:	e060      	b.n	8014e90 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8014dce:	693b      	ldr	r3, [r7, #16]
 8014dd0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014dd4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014dd6:	693b      	ldr	r3, [r7, #16]
 8014dd8:	2200      	movs	r2, #0
 8014dda:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014ddc:	693b      	ldr	r3, [r7, #16]
 8014dde:	68ba      	ldr	r2, [r7, #8]
 8014de0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014de2:	68bb      	ldr	r3, [r7, #8]
 8014de4:	891a      	ldrh	r2, [r3, #8]
 8014de6:	7dfb      	ldrb	r3, [r7, #23]
 8014de8:	b29b      	uxth	r3, r3
 8014dea:	429a      	cmp	r2, r3
 8014dec:	d205      	bcs.n	8014dfa <tcp_create_segment+0x86>
 8014dee:	4b2a      	ldr	r3, [pc, #168]	@ (8014e98 <tcp_create_segment+0x124>)
 8014df0:	22b0      	movs	r2, #176	@ 0xb0
 8014df2:	492d      	ldr	r1, [pc, #180]	@ (8014ea8 <tcp_create_segment+0x134>)
 8014df4:	482a      	ldr	r0, [pc, #168]	@ (8014ea0 <tcp_create_segment+0x12c>)
 8014df6:	f002 fb89 	bl	801750c <iprintf>
  seg->len = p->tot_len - optlen;
 8014dfa:	68bb      	ldr	r3, [r7, #8]
 8014dfc:	891a      	ldrh	r2, [r3, #8]
 8014dfe:	7dfb      	ldrb	r3, [r7, #23]
 8014e00:	b29b      	uxth	r3, r3
 8014e02:	1ad3      	subs	r3, r2, r3
 8014e04:	b29a      	uxth	r2, r3
 8014e06:	693b      	ldr	r3, [r7, #16]
 8014e08:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014e0a:	2114      	movs	r1, #20
 8014e0c:	68b8      	ldr	r0, [r7, #8]
 8014e0e:	f7fb fb41 	bl	8010494 <pbuf_add_header>
 8014e12:	4603      	mov	r3, r0
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d004      	beq.n	8014e22 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014e18:	6938      	ldr	r0, [r7, #16]
 8014e1a:	f7fd f8d2 	bl	8011fc2 <tcp_seg_free>
    return NULL;
 8014e1e:	2300      	movs	r3, #0
 8014e20:	e036      	b.n	8014e90 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014e22:	693b      	ldr	r3, [r7, #16]
 8014e24:	685b      	ldr	r3, [r3, #4]
 8014e26:	685a      	ldr	r2, [r3, #4]
 8014e28:	693b      	ldr	r3, [r7, #16]
 8014e2a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	8ada      	ldrh	r2, [r3, #22]
 8014e30:	693b      	ldr	r3, [r7, #16]
 8014e32:	68dc      	ldr	r4, [r3, #12]
 8014e34:	4610      	mov	r0, r2
 8014e36:	f7f5 f999 	bl	800a16c <lwip_htons>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	8b1a      	ldrh	r2, [r3, #24]
 8014e42:	693b      	ldr	r3, [r7, #16]
 8014e44:	68dc      	ldr	r4, [r3, #12]
 8014e46:	4610      	mov	r0, r2
 8014e48:	f7f5 f990 	bl	800a16c <lwip_htons>
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014e50:	693b      	ldr	r3, [r7, #16]
 8014e52:	68dc      	ldr	r4, [r3, #12]
 8014e54:	6838      	ldr	r0, [r7, #0]
 8014e56:	f7f5 f99f 	bl	800a198 <lwip_htonl>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014e5e:	7dfb      	ldrb	r3, [r7, #23]
 8014e60:	089b      	lsrs	r3, r3, #2
 8014e62:	b2db      	uxtb	r3, r3
 8014e64:	3305      	adds	r3, #5
 8014e66:	b29b      	uxth	r3, r3
 8014e68:	031b      	lsls	r3, r3, #12
 8014e6a:	b29a      	uxth	r2, r3
 8014e6c:	79fb      	ldrb	r3, [r7, #7]
 8014e6e:	b29b      	uxth	r3, r3
 8014e70:	4313      	orrs	r3, r2
 8014e72:	b29a      	uxth	r2, r3
 8014e74:	693b      	ldr	r3, [r7, #16]
 8014e76:	68dc      	ldr	r4, [r3, #12]
 8014e78:	4610      	mov	r0, r2
 8014e7a:	f7f5 f977 	bl	800a16c <lwip_htons>
 8014e7e:	4603      	mov	r3, r0
 8014e80:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014e82:	693b      	ldr	r3, [r7, #16]
 8014e84:	68db      	ldr	r3, [r3, #12]
 8014e86:	2200      	movs	r2, #0
 8014e88:	749a      	strb	r2, [r3, #18]
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	74da      	strb	r2, [r3, #19]
  return seg;
 8014e8e:	693b      	ldr	r3, [r7, #16]
}
 8014e90:	4618      	mov	r0, r3
 8014e92:	371c      	adds	r7, #28
 8014e94:	46bd      	mov	sp, r7
 8014e96:	bd90      	pop	{r4, r7, pc}
 8014e98:	0801a9e4 	.word	0x0801a9e4
 8014e9c:	0801aa44 	.word	0x0801aa44
 8014ea0:	0801aa64 	.word	0x0801aa64
 8014ea4:	0801aa8c 	.word	0x0801aa8c
 8014ea8:	0801aab0 	.word	0x0801aab0

08014eac <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014eac:	b590      	push	{r4, r7, lr}
 8014eae:	b08b      	sub	sp, #44	@ 0x2c
 8014eb0:	af02      	add	r7, sp, #8
 8014eb2:	6078      	str	r0, [r7, #4]
 8014eb4:	460b      	mov	r3, r1
 8014eb6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014eb8:	2300      	movs	r3, #0
 8014eba:	61fb      	str	r3, [r7, #28]
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d106      	bne.n	8014ed8 <tcp_split_unsent_seg+0x2c>
 8014eca:	4b95      	ldr	r3, [pc, #596]	@ (8015120 <tcp_split_unsent_seg+0x274>)
 8014ecc:	f240 324b 	movw	r2, #843	@ 0x34b
 8014ed0:	4994      	ldr	r1, [pc, #592]	@ (8015124 <tcp_split_unsent_seg+0x278>)
 8014ed2:	4895      	ldr	r0, [pc, #596]	@ (8015128 <tcp_split_unsent_seg+0x27c>)
 8014ed4:	f002 fb1a 	bl	801750c <iprintf>

  useg = pcb->unsent;
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014edc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014ede:	697b      	ldr	r3, [r7, #20]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d102      	bne.n	8014eea <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ee8:	e116      	b.n	8015118 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014eea:	887b      	ldrh	r3, [r7, #2]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d109      	bne.n	8014f04 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014ef0:	4b8b      	ldr	r3, [pc, #556]	@ (8015120 <tcp_split_unsent_seg+0x274>)
 8014ef2:	f240 3253 	movw	r2, #851	@ 0x353
 8014ef6:	498d      	ldr	r1, [pc, #564]	@ (801512c <tcp_split_unsent_seg+0x280>)
 8014ef8:	488b      	ldr	r0, [pc, #556]	@ (8015128 <tcp_split_unsent_seg+0x27c>)
 8014efa:	f002 fb07 	bl	801750c <iprintf>
    return ERR_VAL;
 8014efe:	f06f 0305 	mvn.w	r3, #5
 8014f02:	e109      	b.n	8015118 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014f04:	697b      	ldr	r3, [r7, #20]
 8014f06:	891b      	ldrh	r3, [r3, #8]
 8014f08:	887a      	ldrh	r2, [r7, #2]
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	d301      	bcc.n	8014f12 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014f0e:	2300      	movs	r3, #0
 8014f10:	e102      	b.n	8015118 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f16:	887a      	ldrh	r2, [r7, #2]
 8014f18:	429a      	cmp	r2, r3
 8014f1a:	d906      	bls.n	8014f2a <tcp_split_unsent_seg+0x7e>
 8014f1c:	4b80      	ldr	r3, [pc, #512]	@ (8015120 <tcp_split_unsent_seg+0x274>)
 8014f1e:	f240 325b 	movw	r2, #859	@ 0x35b
 8014f22:	4983      	ldr	r1, [pc, #524]	@ (8015130 <tcp_split_unsent_seg+0x284>)
 8014f24:	4880      	ldr	r0, [pc, #512]	@ (8015128 <tcp_split_unsent_seg+0x27c>)
 8014f26:	f002 faf1 	bl	801750c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	891b      	ldrh	r3, [r3, #8]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d106      	bne.n	8014f40 <tcp_split_unsent_seg+0x94>
 8014f32:	4b7b      	ldr	r3, [pc, #492]	@ (8015120 <tcp_split_unsent_seg+0x274>)
 8014f34:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8014f38:	497e      	ldr	r1, [pc, #504]	@ (8015134 <tcp_split_unsent_seg+0x288>)
 8014f3a:	487b      	ldr	r0, [pc, #492]	@ (8015128 <tcp_split_unsent_seg+0x27c>)
 8014f3c:	f002 fae6 	bl	801750c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014f40:	697b      	ldr	r3, [r7, #20]
 8014f42:	7a9b      	ldrb	r3, [r3, #10]
 8014f44:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014f46:	7bfb      	ldrb	r3, [r7, #15]
 8014f48:	009b      	lsls	r3, r3, #2
 8014f4a:	b2db      	uxtb	r3, r3
 8014f4c:	f003 0304 	and.w	r3, r3, #4
 8014f50:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014f52:	697b      	ldr	r3, [r7, #20]
 8014f54:	891a      	ldrh	r2, [r3, #8]
 8014f56:	887b      	ldrh	r3, [r7, #2]
 8014f58:	1ad3      	subs	r3, r2, r3
 8014f5a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014f5c:	7bbb      	ldrb	r3, [r7, #14]
 8014f5e:	b29a      	uxth	r2, r3
 8014f60:	89bb      	ldrh	r3, [r7, #12]
 8014f62:	4413      	add	r3, r2
 8014f64:	b29b      	uxth	r3, r3
 8014f66:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014f6a:	4619      	mov	r1, r3
 8014f6c:	2036      	movs	r0, #54	@ 0x36
 8014f6e:	f7fb f845 	bl	800fffc <pbuf_alloc>
 8014f72:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014f74:	693b      	ldr	r3, [r7, #16]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	f000 80b7 	beq.w	80150ea <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014f7c:	697b      	ldr	r3, [r7, #20]
 8014f7e:	685b      	ldr	r3, [r3, #4]
 8014f80:	891a      	ldrh	r2, [r3, #8]
 8014f82:	697b      	ldr	r3, [r7, #20]
 8014f84:	891b      	ldrh	r3, [r3, #8]
 8014f86:	1ad3      	subs	r3, r2, r3
 8014f88:	b29a      	uxth	r2, r3
 8014f8a:	887b      	ldrh	r3, [r7, #2]
 8014f8c:	4413      	add	r3, r2
 8014f8e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014f90:	697b      	ldr	r3, [r7, #20]
 8014f92:	6858      	ldr	r0, [r3, #4]
 8014f94:	693b      	ldr	r3, [r7, #16]
 8014f96:	685a      	ldr	r2, [r3, #4]
 8014f98:	7bbb      	ldrb	r3, [r7, #14]
 8014f9a:	18d1      	adds	r1, r2, r3
 8014f9c:	897b      	ldrh	r3, [r7, #10]
 8014f9e:	89ba      	ldrh	r2, [r7, #12]
 8014fa0:	f7fb fd14 	bl	80109cc <pbuf_copy_partial>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	461a      	mov	r2, r3
 8014fa8:	89bb      	ldrh	r3, [r7, #12]
 8014faa:	4293      	cmp	r3, r2
 8014fac:	f040 809f 	bne.w	80150ee <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014fb0:	697b      	ldr	r3, [r7, #20]
 8014fb2:	68db      	ldr	r3, [r3, #12]
 8014fb4:	899b      	ldrh	r3, [r3, #12]
 8014fb6:	b29b      	uxth	r3, r3
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f7f5 f8d7 	bl	800a16c <lwip_htons>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	b2db      	uxtb	r3, r3
 8014fc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014fc6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014fc8:	2300      	movs	r3, #0
 8014fca:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014fcc:	7efb      	ldrb	r3, [r7, #27]
 8014fce:	f003 0308 	and.w	r3, r3, #8
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d007      	beq.n	8014fe6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014fd6:	7efb      	ldrb	r3, [r7, #27]
 8014fd8:	f023 0308 	bic.w	r3, r3, #8
 8014fdc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014fde:	7ebb      	ldrb	r3, [r7, #26]
 8014fe0:	f043 0308 	orr.w	r3, r3, #8
 8014fe4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014fe6:	7efb      	ldrb	r3, [r7, #27]
 8014fe8:	f003 0301 	and.w	r3, r3, #1
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d007      	beq.n	8015000 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014ff0:	7efb      	ldrb	r3, [r7, #27]
 8014ff2:	f023 0301 	bic.w	r3, r3, #1
 8014ff6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014ff8:	7ebb      	ldrb	r3, [r7, #26]
 8014ffa:	f043 0301 	orr.w	r3, r3, #1
 8014ffe:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015000:	697b      	ldr	r3, [r7, #20]
 8015002:	68db      	ldr	r3, [r3, #12]
 8015004:	685b      	ldr	r3, [r3, #4]
 8015006:	4618      	mov	r0, r3
 8015008:	f7f5 f8c6 	bl	800a198 <lwip_htonl>
 801500c:	4602      	mov	r2, r0
 801500e:	887b      	ldrh	r3, [r7, #2]
 8015010:	18d1      	adds	r1, r2, r3
 8015012:	7eba      	ldrb	r2, [r7, #26]
 8015014:	7bfb      	ldrb	r3, [r7, #15]
 8015016:	9300      	str	r3, [sp, #0]
 8015018:	460b      	mov	r3, r1
 801501a:	6939      	ldr	r1, [r7, #16]
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f7ff fea9 	bl	8014d74 <tcp_create_segment>
 8015022:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015024:	69fb      	ldr	r3, [r7, #28]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d063      	beq.n	80150f2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801502a:	697b      	ldr	r3, [r7, #20]
 801502c:	685b      	ldr	r3, [r3, #4]
 801502e:	4618      	mov	r0, r3
 8015030:	f7fb fb54 	bl	80106dc <pbuf_clen>
 8015034:	4603      	mov	r3, r0
 8015036:	461a      	mov	r2, r3
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801503e:	1a9b      	subs	r3, r3, r2
 8015040:	b29a      	uxth	r2, r3
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015048:	697b      	ldr	r3, [r7, #20]
 801504a:	6858      	ldr	r0, [r3, #4]
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	685b      	ldr	r3, [r3, #4]
 8015050:	891a      	ldrh	r2, [r3, #8]
 8015052:	89bb      	ldrh	r3, [r7, #12]
 8015054:	1ad3      	subs	r3, r2, r3
 8015056:	b29b      	uxth	r3, r3
 8015058:	4619      	mov	r1, r3
 801505a:	f7fb f92d 	bl	80102b8 <pbuf_realloc>
  useg->len -= remainder;
 801505e:	697b      	ldr	r3, [r7, #20]
 8015060:	891a      	ldrh	r2, [r3, #8]
 8015062:	89bb      	ldrh	r3, [r7, #12]
 8015064:	1ad3      	subs	r3, r2, r3
 8015066:	b29a      	uxth	r2, r3
 8015068:	697b      	ldr	r3, [r7, #20]
 801506a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801506c:	697b      	ldr	r3, [r7, #20]
 801506e:	68db      	ldr	r3, [r3, #12]
 8015070:	899b      	ldrh	r3, [r3, #12]
 8015072:	b29c      	uxth	r4, r3
 8015074:	7efb      	ldrb	r3, [r7, #27]
 8015076:	b29b      	uxth	r3, r3
 8015078:	4618      	mov	r0, r3
 801507a:	f7f5 f877 	bl	800a16c <lwip_htons>
 801507e:	4603      	mov	r3, r0
 8015080:	461a      	mov	r2, r3
 8015082:	697b      	ldr	r3, [r7, #20]
 8015084:	68db      	ldr	r3, [r3, #12]
 8015086:	4322      	orrs	r2, r4
 8015088:	b292      	uxth	r2, r2
 801508a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801508c:	697b      	ldr	r3, [r7, #20]
 801508e:	685b      	ldr	r3, [r3, #4]
 8015090:	4618      	mov	r0, r3
 8015092:	f7fb fb23 	bl	80106dc <pbuf_clen>
 8015096:	4603      	mov	r3, r0
 8015098:	461a      	mov	r2, r3
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80150a0:	4413      	add	r3, r2
 80150a2:	b29a      	uxth	r2, r3
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80150aa:	69fb      	ldr	r3, [r7, #28]
 80150ac:	685b      	ldr	r3, [r3, #4]
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7fb fb14 	bl	80106dc <pbuf_clen>
 80150b4:	4603      	mov	r3, r0
 80150b6:	461a      	mov	r2, r3
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80150be:	4413      	add	r3, r2
 80150c0:	b29a      	uxth	r2, r3
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80150c8:	697b      	ldr	r3, [r7, #20]
 80150ca:	681a      	ldr	r2, [r3, #0]
 80150cc:	69fb      	ldr	r3, [r7, #28]
 80150ce:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80150d0:	697b      	ldr	r3, [r7, #20]
 80150d2:	69fa      	ldr	r2, [r7, #28]
 80150d4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80150d6:	69fb      	ldr	r3, [r7, #28]
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d103      	bne.n	80150e6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	2200      	movs	r2, #0
 80150e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80150e6:	2300      	movs	r3, #0
 80150e8:	e016      	b.n	8015118 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80150ea:	bf00      	nop
 80150ec:	e002      	b.n	80150f4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80150ee:	bf00      	nop
 80150f0:	e000      	b.n	80150f4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80150f2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80150f4:	69fb      	ldr	r3, [r7, #28]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d006      	beq.n	8015108 <tcp_split_unsent_seg+0x25c>
 80150fa:	4b09      	ldr	r3, [pc, #36]	@ (8015120 <tcp_split_unsent_seg+0x274>)
 80150fc:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8015100:	490d      	ldr	r1, [pc, #52]	@ (8015138 <tcp_split_unsent_seg+0x28c>)
 8015102:	4809      	ldr	r0, [pc, #36]	@ (8015128 <tcp_split_unsent_seg+0x27c>)
 8015104:	f002 fa02 	bl	801750c <iprintf>
  if (p != NULL) {
 8015108:	693b      	ldr	r3, [r7, #16]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d002      	beq.n	8015114 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801510e:	6938      	ldr	r0, [r7, #16]
 8015110:	f7fb fa56 	bl	80105c0 <pbuf_free>
  }

  return ERR_MEM;
 8015114:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015118:	4618      	mov	r0, r3
 801511a:	3724      	adds	r7, #36	@ 0x24
 801511c:	46bd      	mov	sp, r7
 801511e:	bd90      	pop	{r4, r7, pc}
 8015120:	0801a9e4 	.word	0x0801a9e4
 8015124:	0801ada4 	.word	0x0801ada4
 8015128:	0801aa64 	.word	0x0801aa64
 801512c:	0801adc8 	.word	0x0801adc8
 8015130:	0801adec 	.word	0x0801adec
 8015134:	0801adfc 	.word	0x0801adfc
 8015138:	0801ae0c 	.word	0x0801ae0c

0801513c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801513c:	b590      	push	{r4, r7, lr}
 801513e:	b085      	sub	sp, #20
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d106      	bne.n	8015158 <tcp_send_fin+0x1c>
 801514a:	4b21      	ldr	r3, [pc, #132]	@ (80151d0 <tcp_send_fin+0x94>)
 801514c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8015150:	4920      	ldr	r1, [pc, #128]	@ (80151d4 <tcp_send_fin+0x98>)
 8015152:	4821      	ldr	r0, [pc, #132]	@ (80151d8 <tcp_send_fin+0x9c>)
 8015154:	f002 f9da 	bl	801750c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801515c:	2b00      	cmp	r3, #0
 801515e:	d02e      	beq.n	80151be <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015164:	60fb      	str	r3, [r7, #12]
 8015166:	e002      	b.n	801516e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d1f8      	bne.n	8015168 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	68db      	ldr	r3, [r3, #12]
 801517a:	899b      	ldrh	r3, [r3, #12]
 801517c:	b29b      	uxth	r3, r3
 801517e:	4618      	mov	r0, r3
 8015180:	f7f4 fff4 	bl	800a16c <lwip_htons>
 8015184:	4603      	mov	r3, r0
 8015186:	b2db      	uxtb	r3, r3
 8015188:	f003 0307 	and.w	r3, r3, #7
 801518c:	2b00      	cmp	r3, #0
 801518e:	d116      	bne.n	80151be <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	68db      	ldr	r3, [r3, #12]
 8015194:	899b      	ldrh	r3, [r3, #12]
 8015196:	b29c      	uxth	r4, r3
 8015198:	2001      	movs	r0, #1
 801519a:	f7f4 ffe7 	bl	800a16c <lwip_htons>
 801519e:	4603      	mov	r3, r0
 80151a0:	461a      	mov	r2, r3
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	68db      	ldr	r3, [r3, #12]
 80151a6:	4322      	orrs	r2, r4
 80151a8:	b292      	uxth	r2, r2
 80151aa:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	8b5b      	ldrh	r3, [r3, #26]
 80151b0:	f043 0320 	orr.w	r3, r3, #32
 80151b4:	b29a      	uxth	r2, r3
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80151ba:	2300      	movs	r3, #0
 80151bc:	e004      	b.n	80151c8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80151be:	2101      	movs	r1, #1
 80151c0:	6878      	ldr	r0, [r7, #4]
 80151c2:	f000 f80b 	bl	80151dc <tcp_enqueue_flags>
 80151c6:	4603      	mov	r3, r0
}
 80151c8:	4618      	mov	r0, r3
 80151ca:	3714      	adds	r7, #20
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd90      	pop	{r4, r7, pc}
 80151d0:	0801a9e4 	.word	0x0801a9e4
 80151d4:	0801ae18 	.word	0x0801ae18
 80151d8:	0801aa64 	.word	0x0801aa64

080151dc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b08a      	sub	sp, #40	@ 0x28
 80151e0:	af02      	add	r7, sp, #8
 80151e2:	6078      	str	r0, [r7, #4]
 80151e4:	460b      	mov	r3, r1
 80151e6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80151e8:	2300      	movs	r3, #0
 80151ea:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80151ec:	2300      	movs	r3, #0
 80151ee:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80151f0:	78fb      	ldrb	r3, [r7, #3]
 80151f2:	f003 0303 	and.w	r3, r3, #3
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d106      	bne.n	8015208 <tcp_enqueue_flags+0x2c>
 80151fa:	4b67      	ldr	r3, [pc, #412]	@ (8015398 <tcp_enqueue_flags+0x1bc>)
 80151fc:	f240 4211 	movw	r2, #1041	@ 0x411
 8015200:	4966      	ldr	r1, [pc, #408]	@ (801539c <tcp_enqueue_flags+0x1c0>)
 8015202:	4867      	ldr	r0, [pc, #412]	@ (80153a0 <tcp_enqueue_flags+0x1c4>)
 8015204:	f002 f982 	bl	801750c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d106      	bne.n	801521c <tcp_enqueue_flags+0x40>
 801520e:	4b62      	ldr	r3, [pc, #392]	@ (8015398 <tcp_enqueue_flags+0x1bc>)
 8015210:	f240 4213 	movw	r2, #1043	@ 0x413
 8015214:	4963      	ldr	r1, [pc, #396]	@ (80153a4 <tcp_enqueue_flags+0x1c8>)
 8015216:	4862      	ldr	r0, [pc, #392]	@ (80153a0 <tcp_enqueue_flags+0x1c4>)
 8015218:	f002 f978 	bl	801750c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801521c:	78fb      	ldrb	r3, [r7, #3]
 801521e:	f003 0302 	and.w	r3, r3, #2
 8015222:	2b00      	cmp	r3, #0
 8015224:	d001      	beq.n	801522a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015226:	2301      	movs	r3, #1
 8015228:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801522a:	7ffb      	ldrb	r3, [r7, #31]
 801522c:	009b      	lsls	r3, r3, #2
 801522e:	b2db      	uxtb	r3, r3
 8015230:	f003 0304 	and.w	r3, r3, #4
 8015234:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015236:	7dfb      	ldrb	r3, [r7, #23]
 8015238:	b29b      	uxth	r3, r3
 801523a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801523e:	4619      	mov	r1, r3
 8015240:	2036      	movs	r0, #54	@ 0x36
 8015242:	f7fa fedb 	bl	800fffc <pbuf_alloc>
 8015246:	6138      	str	r0, [r7, #16]
 8015248:	693b      	ldr	r3, [r7, #16]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d109      	bne.n	8015262 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	8b5b      	ldrh	r3, [r3, #26]
 8015252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015256:	b29a      	uxth	r2, r3
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801525c:	f04f 33ff 	mov.w	r3, #4294967295
 8015260:	e095      	b.n	801538e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015262:	693b      	ldr	r3, [r7, #16]
 8015264:	895a      	ldrh	r2, [r3, #10]
 8015266:	7dfb      	ldrb	r3, [r7, #23]
 8015268:	b29b      	uxth	r3, r3
 801526a:	429a      	cmp	r2, r3
 801526c:	d206      	bcs.n	801527c <tcp_enqueue_flags+0xa0>
 801526e:	4b4a      	ldr	r3, [pc, #296]	@ (8015398 <tcp_enqueue_flags+0x1bc>)
 8015270:	f240 4239 	movw	r2, #1081	@ 0x439
 8015274:	494c      	ldr	r1, [pc, #304]	@ (80153a8 <tcp_enqueue_flags+0x1cc>)
 8015276:	484a      	ldr	r0, [pc, #296]	@ (80153a0 <tcp_enqueue_flags+0x1c4>)
 8015278:	f002 f948 	bl	801750c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8015280:	78fa      	ldrb	r2, [r7, #3]
 8015282:	7ffb      	ldrb	r3, [r7, #31]
 8015284:	9300      	str	r3, [sp, #0]
 8015286:	460b      	mov	r3, r1
 8015288:	6939      	ldr	r1, [r7, #16]
 801528a:	6878      	ldr	r0, [r7, #4]
 801528c:	f7ff fd72 	bl	8014d74 <tcp_create_segment>
 8015290:	60f8      	str	r0, [r7, #12]
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d109      	bne.n	80152ac <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	8b5b      	ldrh	r3, [r3, #26]
 801529c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80152a0:	b29a      	uxth	r2, r3
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80152a6:	f04f 33ff 	mov.w	r3, #4294967295
 80152aa:	e070      	b.n	801538e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	68db      	ldr	r3, [r3, #12]
 80152b0:	f003 0303 	and.w	r3, r3, #3
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d006      	beq.n	80152c6 <tcp_enqueue_flags+0xea>
 80152b8:	4b37      	ldr	r3, [pc, #220]	@ (8015398 <tcp_enqueue_flags+0x1bc>)
 80152ba:	f240 4242 	movw	r2, #1090	@ 0x442
 80152be:	493b      	ldr	r1, [pc, #236]	@ (80153ac <tcp_enqueue_flags+0x1d0>)
 80152c0:	4837      	ldr	r0, [pc, #220]	@ (80153a0 <tcp_enqueue_flags+0x1c4>)
 80152c2:	f002 f923 	bl	801750c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	891b      	ldrh	r3, [r3, #8]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d006      	beq.n	80152dc <tcp_enqueue_flags+0x100>
 80152ce:	4b32      	ldr	r3, [pc, #200]	@ (8015398 <tcp_enqueue_flags+0x1bc>)
 80152d0:	f240 4243 	movw	r2, #1091	@ 0x443
 80152d4:	4936      	ldr	r1, [pc, #216]	@ (80153b0 <tcp_enqueue_flags+0x1d4>)
 80152d6:	4832      	ldr	r0, [pc, #200]	@ (80153a0 <tcp_enqueue_flags+0x1c4>)
 80152d8:	f002 f918 	bl	801750c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d103      	bne.n	80152ec <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	68fa      	ldr	r2, [r7, #12]
 80152e8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80152ea:	e00d      	b.n	8015308 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80152f0:	61bb      	str	r3, [r7, #24]
 80152f2:	e002      	b.n	80152fa <tcp_enqueue_flags+0x11e>
 80152f4:	69bb      	ldr	r3, [r7, #24]
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	61bb      	str	r3, [r7, #24]
 80152fa:	69bb      	ldr	r3, [r7, #24]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d1f8      	bne.n	80152f4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015302:	69bb      	ldr	r3, [r7, #24]
 8015304:	68fa      	ldr	r2, [r7, #12]
 8015306:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	2200      	movs	r2, #0
 801530c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015310:	78fb      	ldrb	r3, [r7, #3]
 8015312:	f003 0302 	and.w	r3, r3, #2
 8015316:	2b00      	cmp	r3, #0
 8015318:	d104      	bne.n	8015324 <tcp_enqueue_flags+0x148>
 801531a:	78fb      	ldrb	r3, [r7, #3]
 801531c:	f003 0301 	and.w	r3, r3, #1
 8015320:	2b00      	cmp	r3, #0
 8015322:	d004      	beq.n	801532e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015328:	1c5a      	adds	r2, r3, #1
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801532e:	78fb      	ldrb	r3, [r7, #3]
 8015330:	f003 0301 	and.w	r3, r3, #1
 8015334:	2b00      	cmp	r3, #0
 8015336:	d006      	beq.n	8015346 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	8b5b      	ldrh	r3, [r3, #26]
 801533c:	f043 0320 	orr.w	r3, r3, #32
 8015340:	b29a      	uxth	r2, r3
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	685b      	ldr	r3, [r3, #4]
 801534a:	4618      	mov	r0, r3
 801534c:	f7fb f9c6 	bl	80106dc <pbuf_clen>
 8015350:	4603      	mov	r3, r0
 8015352:	461a      	mov	r2, r3
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801535a:	4413      	add	r3, r2
 801535c:	b29a      	uxth	r2, r3
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801536a:	2b00      	cmp	r3, #0
 801536c:	d00e      	beq.n	801538c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015372:	2b00      	cmp	r3, #0
 8015374:	d10a      	bne.n	801538c <tcp_enqueue_flags+0x1b0>
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801537a:	2b00      	cmp	r3, #0
 801537c:	d106      	bne.n	801538c <tcp_enqueue_flags+0x1b0>
 801537e:	4b06      	ldr	r3, [pc, #24]	@ (8015398 <tcp_enqueue_flags+0x1bc>)
 8015380:	f240 4265 	movw	r2, #1125	@ 0x465
 8015384:	490b      	ldr	r1, [pc, #44]	@ (80153b4 <tcp_enqueue_flags+0x1d8>)
 8015386:	4806      	ldr	r0, [pc, #24]	@ (80153a0 <tcp_enqueue_flags+0x1c4>)
 8015388:	f002 f8c0 	bl	801750c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801538c:	2300      	movs	r3, #0
}
 801538e:	4618      	mov	r0, r3
 8015390:	3720      	adds	r7, #32
 8015392:	46bd      	mov	sp, r7
 8015394:	bd80      	pop	{r7, pc}
 8015396:	bf00      	nop
 8015398:	0801a9e4 	.word	0x0801a9e4
 801539c:	0801ae34 	.word	0x0801ae34
 80153a0:	0801aa64 	.word	0x0801aa64
 80153a4:	0801ae8c 	.word	0x0801ae8c
 80153a8:	0801aeac 	.word	0x0801aeac
 80153ac:	0801aee8 	.word	0x0801aee8
 80153b0:	0801af00 	.word	0x0801af00
 80153b4:	0801af2c 	.word	0x0801af2c

080153b8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80153b8:	b5b0      	push	{r4, r5, r7, lr}
 80153ba:	b08a      	sub	sp, #40	@ 0x28
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d106      	bne.n	80153d4 <tcp_output+0x1c>
 80153c6:	4b8a      	ldr	r3, [pc, #552]	@ (80155f0 <tcp_output+0x238>)
 80153c8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80153cc:	4989      	ldr	r1, [pc, #548]	@ (80155f4 <tcp_output+0x23c>)
 80153ce:	488a      	ldr	r0, [pc, #552]	@ (80155f8 <tcp_output+0x240>)
 80153d0:	f002 f89c 	bl	801750c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	7d1b      	ldrb	r3, [r3, #20]
 80153d8:	2b01      	cmp	r3, #1
 80153da:	d106      	bne.n	80153ea <tcp_output+0x32>
 80153dc:	4b84      	ldr	r3, [pc, #528]	@ (80155f0 <tcp_output+0x238>)
 80153de:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80153e2:	4986      	ldr	r1, [pc, #536]	@ (80155fc <tcp_output+0x244>)
 80153e4:	4884      	ldr	r0, [pc, #528]	@ (80155f8 <tcp_output+0x240>)
 80153e6:	f002 f891 	bl	801750c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80153ea:	4b85      	ldr	r3, [pc, #532]	@ (8015600 <tcp_output+0x248>)
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	687a      	ldr	r2, [r7, #4]
 80153f0:	429a      	cmp	r2, r3
 80153f2:	d101      	bne.n	80153f8 <tcp_output+0x40>
    return ERR_OK;
 80153f4:	2300      	movs	r3, #0
 80153f6:	e1ce      	b.n	8015796 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015404:	4293      	cmp	r3, r2
 8015406:	bf28      	it	cs
 8015408:	4613      	movcs	r3, r2
 801540a:	b29b      	uxth	r3, r3
 801540c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015412:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8015414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015416:	2b00      	cmp	r3, #0
 8015418:	d10b      	bne.n	8015432 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	8b5b      	ldrh	r3, [r3, #26]
 801541e:	f003 0302 	and.w	r3, r3, #2
 8015422:	2b00      	cmp	r3, #0
 8015424:	f000 81aa 	beq.w	801577c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015428:	6878      	ldr	r0, [r7, #4]
 801542a:	f000 fdcb 	bl	8015fc4 <tcp_send_empty_ack>
 801542e:	4603      	mov	r3, r0
 8015430:	e1b1      	b.n	8015796 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015432:	6879      	ldr	r1, [r7, #4]
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	3304      	adds	r3, #4
 8015438:	461a      	mov	r2, r3
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	f7ff fc7e 	bl	8014d3c <tcp_route>
 8015440:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015442:	697b      	ldr	r3, [r7, #20]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d102      	bne.n	801544e <tcp_output+0x96>
    return ERR_RTE;
 8015448:	f06f 0303 	mvn.w	r3, #3
 801544c:	e1a3      	b.n	8015796 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d003      	beq.n	801545c <tcp_output+0xa4>
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d111      	bne.n	8015480 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801545c:	697b      	ldr	r3, [r7, #20]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d002      	beq.n	8015468 <tcp_output+0xb0>
 8015462:	697b      	ldr	r3, [r7, #20]
 8015464:	3304      	adds	r3, #4
 8015466:	e000      	b.n	801546a <tcp_output+0xb2>
 8015468:	2300      	movs	r3, #0
 801546a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801546c:	693b      	ldr	r3, [r7, #16]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d102      	bne.n	8015478 <tcp_output+0xc0>
      return ERR_RTE;
 8015472:	f06f 0303 	mvn.w	r3, #3
 8015476:	e18e      	b.n	8015796 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015478:	693b      	ldr	r3, [r7, #16]
 801547a:	681a      	ldr	r2, [r3, #0]
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015482:	68db      	ldr	r3, [r3, #12]
 8015484:	685b      	ldr	r3, [r3, #4]
 8015486:	4618      	mov	r0, r3
 8015488:	f7f4 fe86 	bl	800a198 <lwip_htonl>
 801548c:	4602      	mov	r2, r0
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015492:	1ad3      	subs	r3, r2, r3
 8015494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015496:	8912      	ldrh	r2, [r2, #8]
 8015498:	4413      	add	r3, r2
 801549a:	69ba      	ldr	r2, [r7, #24]
 801549c:	429a      	cmp	r2, r3
 801549e:	d227      	bcs.n	80154f0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80154a6:	461a      	mov	r2, r3
 80154a8:	69bb      	ldr	r3, [r7, #24]
 80154aa:	4293      	cmp	r3, r2
 80154ac:	d114      	bne.n	80154d8 <tcp_output+0x120>
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d110      	bne.n	80154d8 <tcp_output+0x120>
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d10b      	bne.n	80154d8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	2200      	movs	r2, #0
 80154c4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	2201      	movs	r2, #1
 80154cc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	2200      	movs	r2, #0
 80154d4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	8b5b      	ldrh	r3, [r3, #26]
 80154dc:	f003 0302 	and.w	r3, r3, #2
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	f000 814d 	beq.w	8015780 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80154e6:	6878      	ldr	r0, [r7, #4]
 80154e8:	f000 fd6c 	bl	8015fc4 <tcp_send_empty_ack>
 80154ec:	4603      	mov	r3, r0
 80154ee:	e152      	b.n	8015796 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2200      	movs	r2, #0
 80154f4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80154fc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80154fe:	6a3b      	ldr	r3, [r7, #32]
 8015500:	2b00      	cmp	r3, #0
 8015502:	f000 811c 	beq.w	801573e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8015506:	e002      	b.n	801550e <tcp_output+0x156>
 8015508:	6a3b      	ldr	r3, [r7, #32]
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	623b      	str	r3, [r7, #32]
 801550e:	6a3b      	ldr	r3, [r7, #32]
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d1f8      	bne.n	8015508 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015516:	e112      	b.n	801573e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801551a:	68db      	ldr	r3, [r3, #12]
 801551c:	899b      	ldrh	r3, [r3, #12]
 801551e:	b29b      	uxth	r3, r3
 8015520:	4618      	mov	r0, r3
 8015522:	f7f4 fe23 	bl	800a16c <lwip_htons>
 8015526:	4603      	mov	r3, r0
 8015528:	b2db      	uxtb	r3, r3
 801552a:	f003 0304 	and.w	r3, r3, #4
 801552e:	2b00      	cmp	r3, #0
 8015530:	d006      	beq.n	8015540 <tcp_output+0x188>
 8015532:	4b2f      	ldr	r3, [pc, #188]	@ (80155f0 <tcp_output+0x238>)
 8015534:	f240 5236 	movw	r2, #1334	@ 0x536
 8015538:	4932      	ldr	r1, [pc, #200]	@ (8015604 <tcp_output+0x24c>)
 801553a:	482f      	ldr	r0, [pc, #188]	@ (80155f8 <tcp_output+0x240>)
 801553c:	f001 ffe6 	bl	801750c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015544:	2b00      	cmp	r3, #0
 8015546:	d01f      	beq.n	8015588 <tcp_output+0x1d0>
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	8b5b      	ldrh	r3, [r3, #26]
 801554c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8015550:	2b00      	cmp	r3, #0
 8015552:	d119      	bne.n	8015588 <tcp_output+0x1d0>
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015558:	2b00      	cmp	r3, #0
 801555a:	d00b      	beq.n	8015574 <tcp_output+0x1bc>
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d110      	bne.n	8015588 <tcp_output+0x1d0>
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801556a:	891a      	ldrh	r2, [r3, #8]
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015570:	429a      	cmp	r2, r3
 8015572:	d209      	bcs.n	8015588 <tcp_output+0x1d0>
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801557a:	2b00      	cmp	r3, #0
 801557c:	d004      	beq.n	8015588 <tcp_output+0x1d0>
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015584:	2b08      	cmp	r3, #8
 8015586:	d901      	bls.n	801558c <tcp_output+0x1d4>
 8015588:	2301      	movs	r3, #1
 801558a:	e000      	b.n	801558e <tcp_output+0x1d6>
 801558c:	2300      	movs	r3, #0
 801558e:	2b00      	cmp	r3, #0
 8015590:	d106      	bne.n	80155a0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	8b5b      	ldrh	r3, [r3, #26]
 8015596:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801559a:	2b00      	cmp	r3, #0
 801559c:	f000 80e4 	beq.w	8015768 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	7d1b      	ldrb	r3, [r3, #20]
 80155a4:	2b02      	cmp	r3, #2
 80155a6:	d00d      	beq.n	80155c4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80155a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155aa:	68db      	ldr	r3, [r3, #12]
 80155ac:	899b      	ldrh	r3, [r3, #12]
 80155ae:	b29c      	uxth	r4, r3
 80155b0:	2010      	movs	r0, #16
 80155b2:	f7f4 fddb 	bl	800a16c <lwip_htons>
 80155b6:	4603      	mov	r3, r0
 80155b8:	461a      	mov	r2, r3
 80155ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155bc:	68db      	ldr	r3, [r3, #12]
 80155be:	4322      	orrs	r2, r4
 80155c0:	b292      	uxth	r2, r2
 80155c2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80155c4:	697a      	ldr	r2, [r7, #20]
 80155c6:	6879      	ldr	r1, [r7, #4]
 80155c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80155ca:	f000 f909 	bl	80157e0 <tcp_output_segment>
 80155ce:	4603      	mov	r3, r0
 80155d0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80155d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d016      	beq.n	8015608 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	8b5b      	ldrh	r3, [r3, #26]
 80155de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80155e2:	b29a      	uxth	r2, r3
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	835a      	strh	r2, [r3, #26]
      return err;
 80155e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80155ec:	e0d3      	b.n	8015796 <tcp_output+0x3de>
 80155ee:	bf00      	nop
 80155f0:	0801a9e4 	.word	0x0801a9e4
 80155f4:	0801af54 	.word	0x0801af54
 80155f8:	0801aa64 	.word	0x0801aa64
 80155fc:	0801af6c 	.word	0x0801af6c
 8015600:	24007bbc 	.word	0x24007bbc
 8015604:	0801af94 	.word	0x0801af94
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801560a:	681a      	ldr	r2, [r3, #0]
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	7d1b      	ldrb	r3, [r3, #20]
 8015614:	2b02      	cmp	r3, #2
 8015616:	d006      	beq.n	8015626 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	8b5b      	ldrh	r3, [r3, #26]
 801561c:	f023 0303 	bic.w	r3, r3, #3
 8015620:	b29a      	uxth	r2, r3
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015628:	68db      	ldr	r3, [r3, #12]
 801562a:	685b      	ldr	r3, [r3, #4]
 801562c:	4618      	mov	r0, r3
 801562e:	f7f4 fdb3 	bl	800a198 <lwip_htonl>
 8015632:	4604      	mov	r4, r0
 8015634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015636:	891b      	ldrh	r3, [r3, #8]
 8015638:	461d      	mov	r5, r3
 801563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801563c:	68db      	ldr	r3, [r3, #12]
 801563e:	899b      	ldrh	r3, [r3, #12]
 8015640:	b29b      	uxth	r3, r3
 8015642:	4618      	mov	r0, r3
 8015644:	f7f4 fd92 	bl	800a16c <lwip_htons>
 8015648:	4603      	mov	r3, r0
 801564a:	b2db      	uxtb	r3, r3
 801564c:	f003 0303 	and.w	r3, r3, #3
 8015650:	2b00      	cmp	r3, #0
 8015652:	d001      	beq.n	8015658 <tcp_output+0x2a0>
 8015654:	2301      	movs	r3, #1
 8015656:	e000      	b.n	801565a <tcp_output+0x2a2>
 8015658:	2300      	movs	r3, #0
 801565a:	442b      	add	r3, r5
 801565c:	4423      	add	r3, r4
 801565e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015664:	68bb      	ldr	r3, [r7, #8]
 8015666:	1ad3      	subs	r3, r2, r3
 8015668:	2b00      	cmp	r3, #0
 801566a:	da02      	bge.n	8015672 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	68ba      	ldr	r2, [r7, #8]
 8015670:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015674:	891b      	ldrh	r3, [r3, #8]
 8015676:	461c      	mov	r4, r3
 8015678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801567a:	68db      	ldr	r3, [r3, #12]
 801567c:	899b      	ldrh	r3, [r3, #12]
 801567e:	b29b      	uxth	r3, r3
 8015680:	4618      	mov	r0, r3
 8015682:	f7f4 fd73 	bl	800a16c <lwip_htons>
 8015686:	4603      	mov	r3, r0
 8015688:	b2db      	uxtb	r3, r3
 801568a:	f003 0303 	and.w	r3, r3, #3
 801568e:	2b00      	cmp	r3, #0
 8015690:	d001      	beq.n	8015696 <tcp_output+0x2de>
 8015692:	2301      	movs	r3, #1
 8015694:	e000      	b.n	8015698 <tcp_output+0x2e0>
 8015696:	2300      	movs	r3, #0
 8015698:	4423      	add	r3, r4
 801569a:	2b00      	cmp	r3, #0
 801569c:	d049      	beq.n	8015732 <tcp_output+0x37a>
      seg->next = NULL;
 801569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156a0:	2200      	movs	r2, #0
 80156a2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d105      	bne.n	80156b8 <tcp_output+0x300>
        pcb->unacked = seg;
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156b0:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80156b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156b4:	623b      	str	r3, [r7, #32]
 80156b6:	e03f      	b.n	8015738 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80156b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156ba:	68db      	ldr	r3, [r3, #12]
 80156bc:	685b      	ldr	r3, [r3, #4]
 80156be:	4618      	mov	r0, r3
 80156c0:	f7f4 fd6a 	bl	800a198 <lwip_htonl>
 80156c4:	4604      	mov	r4, r0
 80156c6:	6a3b      	ldr	r3, [r7, #32]
 80156c8:	68db      	ldr	r3, [r3, #12]
 80156ca:	685b      	ldr	r3, [r3, #4]
 80156cc:	4618      	mov	r0, r3
 80156ce:	f7f4 fd63 	bl	800a198 <lwip_htonl>
 80156d2:	4603      	mov	r3, r0
 80156d4:	1ae3      	subs	r3, r4, r3
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	da24      	bge.n	8015724 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	3370      	adds	r3, #112	@ 0x70
 80156de:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80156e0:	e002      	b.n	80156e8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80156e2:	69fb      	ldr	r3, [r7, #28]
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80156e8:	69fb      	ldr	r3, [r7, #28]
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d011      	beq.n	8015714 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80156f0:	69fb      	ldr	r3, [r7, #28]
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	68db      	ldr	r3, [r3, #12]
 80156f6:	685b      	ldr	r3, [r3, #4]
 80156f8:	4618      	mov	r0, r3
 80156fa:	f7f4 fd4d 	bl	800a198 <lwip_htonl>
 80156fe:	4604      	mov	r4, r0
 8015700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015702:	68db      	ldr	r3, [r3, #12]
 8015704:	685b      	ldr	r3, [r3, #4]
 8015706:	4618      	mov	r0, r3
 8015708:	f7f4 fd46 	bl	800a198 <lwip_htonl>
 801570c:	4603      	mov	r3, r0
 801570e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015710:	2b00      	cmp	r3, #0
 8015712:	dbe6      	blt.n	80156e2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015714:	69fb      	ldr	r3, [r7, #28]
 8015716:	681a      	ldr	r2, [r3, #0]
 8015718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801571a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801571c:	69fb      	ldr	r3, [r7, #28]
 801571e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015720:	601a      	str	r2, [r3, #0]
 8015722:	e009      	b.n	8015738 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015724:	6a3b      	ldr	r3, [r7, #32]
 8015726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015728:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801572a:	6a3b      	ldr	r3, [r7, #32]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	623b      	str	r3, [r7, #32]
 8015730:	e002      	b.n	8015738 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015732:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015734:	f7fc fc45 	bl	8011fc2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801573c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015740:	2b00      	cmp	r3, #0
 8015742:	d012      	beq.n	801576a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015746:	68db      	ldr	r3, [r3, #12]
 8015748:	685b      	ldr	r3, [r3, #4]
 801574a:	4618      	mov	r0, r3
 801574c:	f7f4 fd24 	bl	800a198 <lwip_htonl>
 8015750:	4602      	mov	r2, r0
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015756:	1ad3      	subs	r3, r2, r3
 8015758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801575a:	8912      	ldrh	r2, [r2, #8]
 801575c:	4413      	add	r3, r2
  while (seg != NULL &&
 801575e:	69ba      	ldr	r2, [r7, #24]
 8015760:	429a      	cmp	r2, r3
 8015762:	f4bf aed9 	bcs.w	8015518 <tcp_output+0x160>
 8015766:	e000      	b.n	801576a <tcp_output+0x3b2>
      break;
 8015768:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801576e:	2b00      	cmp	r3, #0
 8015770:	d108      	bne.n	8015784 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	2200      	movs	r2, #0
 8015776:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801577a:	e004      	b.n	8015786 <tcp_output+0x3ce>
    goto output_done;
 801577c:	bf00      	nop
 801577e:	e002      	b.n	8015786 <tcp_output+0x3ce>
    goto output_done;
 8015780:	bf00      	nop
 8015782:	e000      	b.n	8015786 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015784:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	8b5b      	ldrh	r3, [r3, #26]
 801578a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801578e:	b29a      	uxth	r2, r3
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015794:	2300      	movs	r3, #0
}
 8015796:	4618      	mov	r0, r3
 8015798:	3728      	adds	r7, #40	@ 0x28
 801579a:	46bd      	mov	sp, r7
 801579c:	bdb0      	pop	{r4, r5, r7, pc}
 801579e:	bf00      	nop

080157a0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b082      	sub	sp, #8
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d106      	bne.n	80157bc <tcp_output_segment_busy+0x1c>
 80157ae:	4b09      	ldr	r3, [pc, #36]	@ (80157d4 <tcp_output_segment_busy+0x34>)
 80157b0:	f240 529a 	movw	r2, #1434	@ 0x59a
 80157b4:	4908      	ldr	r1, [pc, #32]	@ (80157d8 <tcp_output_segment_busy+0x38>)
 80157b6:	4809      	ldr	r0, [pc, #36]	@ (80157dc <tcp_output_segment_busy+0x3c>)
 80157b8:	f001 fea8 	bl	801750c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	685b      	ldr	r3, [r3, #4]
 80157c0:	7b9b      	ldrb	r3, [r3, #14]
 80157c2:	2b01      	cmp	r3, #1
 80157c4:	d001      	beq.n	80157ca <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80157c6:	2301      	movs	r3, #1
 80157c8:	e000      	b.n	80157cc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80157ca:	2300      	movs	r3, #0
}
 80157cc:	4618      	mov	r0, r3
 80157ce:	3708      	adds	r7, #8
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd80      	pop	{r7, pc}
 80157d4:	0801a9e4 	.word	0x0801a9e4
 80157d8:	0801afac 	.word	0x0801afac
 80157dc:	0801aa64 	.word	0x0801aa64

080157e0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80157e0:	b5b0      	push	{r4, r5, r7, lr}
 80157e2:	b08c      	sub	sp, #48	@ 0x30
 80157e4:	af04      	add	r7, sp, #16
 80157e6:	60f8      	str	r0, [r7, #12]
 80157e8:	60b9      	str	r1, [r7, #8]
 80157ea:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d106      	bne.n	8015800 <tcp_output_segment+0x20>
 80157f2:	4b64      	ldr	r3, [pc, #400]	@ (8015984 <tcp_output_segment+0x1a4>)
 80157f4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80157f8:	4963      	ldr	r1, [pc, #396]	@ (8015988 <tcp_output_segment+0x1a8>)
 80157fa:	4864      	ldr	r0, [pc, #400]	@ (801598c <tcp_output_segment+0x1ac>)
 80157fc:	f001 fe86 	bl	801750c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d106      	bne.n	8015814 <tcp_output_segment+0x34>
 8015806:	4b5f      	ldr	r3, [pc, #380]	@ (8015984 <tcp_output_segment+0x1a4>)
 8015808:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801580c:	4960      	ldr	r1, [pc, #384]	@ (8015990 <tcp_output_segment+0x1b0>)
 801580e:	485f      	ldr	r0, [pc, #380]	@ (801598c <tcp_output_segment+0x1ac>)
 8015810:	f001 fe7c 	bl	801750c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d106      	bne.n	8015828 <tcp_output_segment+0x48>
 801581a:	4b5a      	ldr	r3, [pc, #360]	@ (8015984 <tcp_output_segment+0x1a4>)
 801581c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8015820:	495c      	ldr	r1, [pc, #368]	@ (8015994 <tcp_output_segment+0x1b4>)
 8015822:	485a      	ldr	r0, [pc, #360]	@ (801598c <tcp_output_segment+0x1ac>)
 8015824:	f001 fe72 	bl	801750c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015828:	68f8      	ldr	r0, [r7, #12]
 801582a:	f7ff ffb9 	bl	80157a0 <tcp_output_segment_busy>
 801582e:	4603      	mov	r3, r0
 8015830:	2b00      	cmp	r3, #0
 8015832:	d001      	beq.n	8015838 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015834:	2300      	movs	r3, #0
 8015836:	e0a1      	b.n	801597c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015838:	68bb      	ldr	r3, [r7, #8]
 801583a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	68dc      	ldr	r4, [r3, #12]
 8015840:	4610      	mov	r0, r2
 8015842:	f7f4 fca9 	bl	800a198 <lwip_htonl>
 8015846:	4603      	mov	r3, r0
 8015848:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801584a:	68bb      	ldr	r3, [r7, #8]
 801584c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	68dc      	ldr	r4, [r3, #12]
 8015852:	4610      	mov	r0, r2
 8015854:	f7f4 fc8a 	bl	800a16c <lwip_htons>
 8015858:	4603      	mov	r3, r0
 801585a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801585c:	68bb      	ldr	r3, [r7, #8]
 801585e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015860:	68ba      	ldr	r2, [r7, #8]
 8015862:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015864:	441a      	add	r2, r3
 8015866:	68bb      	ldr	r3, [r7, #8]
 8015868:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	68db      	ldr	r3, [r3, #12]
 801586e:	3314      	adds	r3, #20
 8015870:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	7a9b      	ldrb	r3, [r3, #10]
 8015876:	f003 0301 	and.w	r3, r3, #1
 801587a:	2b00      	cmp	r3, #0
 801587c:	d015      	beq.n	80158aa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	3304      	adds	r3, #4
 8015882:	461a      	mov	r2, r3
 8015884:	6879      	ldr	r1, [r7, #4]
 8015886:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801588a:	f7fc fe91 	bl	80125b0 <tcp_eff_send_mss_netif>
 801588e:	4603      	mov	r3, r0
 8015890:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015892:	8b7b      	ldrh	r3, [r7, #26]
 8015894:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8015898:	4618      	mov	r0, r3
 801589a:	f7f4 fc7d 	bl	800a198 <lwip_htonl>
 801589e:	4602      	mov	r2, r0
 80158a0:	69fb      	ldr	r3, [r7, #28]
 80158a2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80158a4:	69fb      	ldr	r3, [r7, #28]
 80158a6:	3304      	adds	r3, #4
 80158a8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80158aa:	68bb      	ldr	r3, [r7, #8]
 80158ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	da02      	bge.n	80158ba <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80158b4:	68bb      	ldr	r3, [r7, #8]
 80158b6:	2200      	movs	r2, #0
 80158b8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d10c      	bne.n	80158dc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80158c2:	4b35      	ldr	r3, [pc, #212]	@ (8015998 <tcp_output_segment+0x1b8>)
 80158c4:	681a      	ldr	r2, [r3, #0]
 80158c6:	68bb      	ldr	r3, [r7, #8]
 80158c8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	68db      	ldr	r3, [r3, #12]
 80158ce:	685b      	ldr	r3, [r3, #4]
 80158d0:	4618      	mov	r0, r3
 80158d2:	f7f4 fc61 	bl	800a198 <lwip_htonl>
 80158d6:	4602      	mov	r2, r0
 80158d8:	68bb      	ldr	r3, [r7, #8]
 80158da:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	68da      	ldr	r2, [r3, #12]
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	685b      	ldr	r3, [r3, #4]
 80158e4:	685b      	ldr	r3, [r3, #4]
 80158e6:	1ad3      	subs	r3, r2, r3
 80158e8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	685b      	ldr	r3, [r3, #4]
 80158ee:	8959      	ldrh	r1, [r3, #10]
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	685b      	ldr	r3, [r3, #4]
 80158f4:	8b3a      	ldrh	r2, [r7, #24]
 80158f6:	1a8a      	subs	r2, r1, r2
 80158f8:	b292      	uxth	r2, r2
 80158fa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	685b      	ldr	r3, [r3, #4]
 8015900:	8919      	ldrh	r1, [r3, #8]
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	685b      	ldr	r3, [r3, #4]
 8015906:	8b3a      	ldrh	r2, [r7, #24]
 8015908:	1a8a      	subs	r2, r1, r2
 801590a:	b292      	uxth	r2, r2
 801590c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	685b      	ldr	r3, [r3, #4]
 8015912:	68fa      	ldr	r2, [r7, #12]
 8015914:	68d2      	ldr	r2, [r2, #12]
 8015916:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	68db      	ldr	r3, [r3, #12]
 801591c:	2200      	movs	r2, #0
 801591e:	741a      	strb	r2, [r3, #16]
 8015920:	2200      	movs	r2, #0
 8015922:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	68da      	ldr	r2, [r3, #12]
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	7a9b      	ldrb	r3, [r3, #10]
 801592c:	f003 0301 	and.w	r3, r3, #1
 8015930:	2b00      	cmp	r3, #0
 8015932:	d001      	beq.n	8015938 <tcp_output_segment+0x158>
 8015934:	2318      	movs	r3, #24
 8015936:	e000      	b.n	801593a <tcp_output_segment+0x15a>
 8015938:	2314      	movs	r3, #20
 801593a:	4413      	add	r3, r2
 801593c:	69fa      	ldr	r2, [r7, #28]
 801593e:	429a      	cmp	r2, r3
 8015940:	d006      	beq.n	8015950 <tcp_output_segment+0x170>
 8015942:	4b10      	ldr	r3, [pc, #64]	@ (8015984 <tcp_output_segment+0x1a4>)
 8015944:	f240 621c 	movw	r2, #1564	@ 0x61c
 8015948:	4914      	ldr	r1, [pc, #80]	@ (801599c <tcp_output_segment+0x1bc>)
 801594a:	4810      	ldr	r0, [pc, #64]	@ (801598c <tcp_output_segment+0x1ac>)
 801594c:	f001 fdde 	bl	801750c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	6858      	ldr	r0, [r3, #4]
 8015954:	68b9      	ldr	r1, [r7, #8]
 8015956:	68bb      	ldr	r3, [r7, #8]
 8015958:	1d1c      	adds	r4, r3, #4
 801595a:	68bb      	ldr	r3, [r7, #8]
 801595c:	7add      	ldrb	r5, [r3, #11]
 801595e:	68bb      	ldr	r3, [r7, #8]
 8015960:	7a9b      	ldrb	r3, [r3, #10]
 8015962:	687a      	ldr	r2, [r7, #4]
 8015964:	9202      	str	r2, [sp, #8]
 8015966:	2206      	movs	r2, #6
 8015968:	9201      	str	r2, [sp, #4]
 801596a:	9300      	str	r3, [sp, #0]
 801596c:	462b      	mov	r3, r5
 801596e:	4622      	mov	r2, r4
 8015970:	f7f8 fa84 	bl	800de7c <ip4_output_if>
 8015974:	4603      	mov	r3, r0
 8015976:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015978:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801597c:	4618      	mov	r0, r3
 801597e:	3720      	adds	r7, #32
 8015980:	46bd      	mov	sp, r7
 8015982:	bdb0      	pop	{r4, r5, r7, pc}
 8015984:	0801a9e4 	.word	0x0801a9e4
 8015988:	0801afd4 	.word	0x0801afd4
 801598c:	0801aa64 	.word	0x0801aa64
 8015990:	0801aff4 	.word	0x0801aff4
 8015994:	0801b014 	.word	0x0801b014
 8015998:	24007b70 	.word	0x24007b70
 801599c:	0801b038 	.word	0x0801b038

080159a0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80159a0:	b5b0      	push	{r4, r5, r7, lr}
 80159a2:	b084      	sub	sp, #16
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d106      	bne.n	80159bc <tcp_rexmit_rto_prepare+0x1c>
 80159ae:	4b31      	ldr	r3, [pc, #196]	@ (8015a74 <tcp_rexmit_rto_prepare+0xd4>)
 80159b0:	f240 6263 	movw	r2, #1635	@ 0x663
 80159b4:	4930      	ldr	r1, [pc, #192]	@ (8015a78 <tcp_rexmit_rto_prepare+0xd8>)
 80159b6:	4831      	ldr	r0, [pc, #196]	@ (8015a7c <tcp_rexmit_rto_prepare+0xdc>)
 80159b8:	f001 fda8 	bl	801750c <iprintf>

  if (pcb->unacked == NULL) {
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d102      	bne.n	80159ca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80159c4:	f06f 0305 	mvn.w	r3, #5
 80159c8:	e050      	b.n	8015a6c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80159ce:	60fb      	str	r3, [r7, #12]
 80159d0:	e00b      	b.n	80159ea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80159d2:	68f8      	ldr	r0, [r7, #12]
 80159d4:	f7ff fee4 	bl	80157a0 <tcp_output_segment_busy>
 80159d8:	4603      	mov	r3, r0
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d002      	beq.n	80159e4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80159de:	f06f 0305 	mvn.w	r3, #5
 80159e2:	e043      	b.n	8015a6c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	60fb      	str	r3, [r7, #12]
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d1ef      	bne.n	80159d2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80159f2:	68f8      	ldr	r0, [r7, #12]
 80159f4:	f7ff fed4 	bl	80157a0 <tcp_output_segment_busy>
 80159f8:	4603      	mov	r3, r0
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d002      	beq.n	8015a04 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80159fe:	f06f 0305 	mvn.w	r3, #5
 8015a02:	e033      	b.n	8015a6c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	2200      	movs	r2, #0
 8015a18:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	8b5b      	ldrh	r3, [r3, #26]
 8015a1e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8015a22:	b29a      	uxth	r2, r3
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	68db      	ldr	r3, [r3, #12]
 8015a2c:	685b      	ldr	r3, [r3, #4]
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f7f4 fbb2 	bl	800a198 <lwip_htonl>
 8015a34:	4604      	mov	r4, r0
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	891b      	ldrh	r3, [r3, #8]
 8015a3a:	461d      	mov	r5, r3
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	68db      	ldr	r3, [r3, #12]
 8015a40:	899b      	ldrh	r3, [r3, #12]
 8015a42:	b29b      	uxth	r3, r3
 8015a44:	4618      	mov	r0, r3
 8015a46:	f7f4 fb91 	bl	800a16c <lwip_htons>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	b2db      	uxtb	r3, r3
 8015a4e:	f003 0303 	and.w	r3, r3, #3
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d001      	beq.n	8015a5a <tcp_rexmit_rto_prepare+0xba>
 8015a56:	2301      	movs	r3, #1
 8015a58:	e000      	b.n	8015a5c <tcp_rexmit_rto_prepare+0xbc>
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	442b      	add	r3, r5
 8015a5e:	18e2      	adds	r2, r4, r3
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	2200      	movs	r2, #0
 8015a68:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8015a6a:	2300      	movs	r3, #0
}
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	3710      	adds	r7, #16
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bdb0      	pop	{r4, r5, r7, pc}
 8015a74:	0801a9e4 	.word	0x0801a9e4
 8015a78:	0801b04c 	.word	0x0801b04c
 8015a7c:	0801aa64 	.word	0x0801aa64

08015a80 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b082      	sub	sp, #8
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d106      	bne.n	8015a9c <tcp_rexmit_rto_commit+0x1c>
 8015a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8015ac4 <tcp_rexmit_rto_commit+0x44>)
 8015a90:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015a94:	490c      	ldr	r1, [pc, #48]	@ (8015ac8 <tcp_rexmit_rto_commit+0x48>)
 8015a96:	480d      	ldr	r0, [pc, #52]	@ (8015acc <tcp_rexmit_rto_commit+0x4c>)
 8015a98:	f001 fd38 	bl	801750c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015aa2:	2bff      	cmp	r3, #255	@ 0xff
 8015aa4:	d007      	beq.n	8015ab6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015aac:	3301      	adds	r3, #1
 8015aae:	b2da      	uxtb	r2, r3
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015ab6:	6878      	ldr	r0, [r7, #4]
 8015ab8:	f7ff fc7e 	bl	80153b8 <tcp_output>
}
 8015abc:	bf00      	nop
 8015abe:	3708      	adds	r7, #8
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	bd80      	pop	{r7, pc}
 8015ac4:	0801a9e4 	.word	0x0801a9e4
 8015ac8:	0801b070 	.word	0x0801b070
 8015acc:	0801aa64 	.word	0x0801aa64

08015ad0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b082      	sub	sp, #8
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d106      	bne.n	8015aec <tcp_rexmit_rto+0x1c>
 8015ade:	4b0a      	ldr	r3, [pc, #40]	@ (8015b08 <tcp_rexmit_rto+0x38>)
 8015ae0:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8015ae4:	4909      	ldr	r1, [pc, #36]	@ (8015b0c <tcp_rexmit_rto+0x3c>)
 8015ae6:	480a      	ldr	r0, [pc, #40]	@ (8015b10 <tcp_rexmit_rto+0x40>)
 8015ae8:	f001 fd10 	bl	801750c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015aec:	6878      	ldr	r0, [r7, #4]
 8015aee:	f7ff ff57 	bl	80159a0 <tcp_rexmit_rto_prepare>
 8015af2:	4603      	mov	r3, r0
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d102      	bne.n	8015afe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f7ff ffc1 	bl	8015a80 <tcp_rexmit_rto_commit>
  }
}
 8015afe:	bf00      	nop
 8015b00:	3708      	adds	r7, #8
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}
 8015b06:	bf00      	nop
 8015b08:	0801a9e4 	.word	0x0801a9e4
 8015b0c:	0801b094 	.word	0x0801b094
 8015b10:	0801aa64 	.word	0x0801aa64

08015b14 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015b14:	b590      	push	{r4, r7, lr}
 8015b16:	b085      	sub	sp, #20
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d106      	bne.n	8015b30 <tcp_rexmit+0x1c>
 8015b22:	4b2f      	ldr	r3, [pc, #188]	@ (8015be0 <tcp_rexmit+0xcc>)
 8015b24:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8015b28:	492e      	ldr	r1, [pc, #184]	@ (8015be4 <tcp_rexmit+0xd0>)
 8015b2a:	482f      	ldr	r0, [pc, #188]	@ (8015be8 <tcp_rexmit+0xd4>)
 8015b2c:	f001 fcee 	bl	801750c <iprintf>

  if (pcb->unacked == NULL) {
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d102      	bne.n	8015b3e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015b38:	f06f 0305 	mvn.w	r3, #5
 8015b3c:	e04c      	b.n	8015bd8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015b42:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015b44:	68b8      	ldr	r0, [r7, #8]
 8015b46:	f7ff fe2b 	bl	80157a0 <tcp_output_segment_busy>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d002      	beq.n	8015b56 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015b50:	f06f 0305 	mvn.w	r3, #5
 8015b54:	e040      	b.n	8015bd8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015b56:	68bb      	ldr	r3, [r7, #8]
 8015b58:	681a      	ldr	r2, [r3, #0]
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	336c      	adds	r3, #108	@ 0x6c
 8015b62:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015b64:	e002      	b.n	8015b6c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d011      	beq.n	8015b98 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	68db      	ldr	r3, [r3, #12]
 8015b7a:	685b      	ldr	r3, [r3, #4]
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	f7f4 fb0b 	bl	800a198 <lwip_htonl>
 8015b82:	4604      	mov	r4, r0
 8015b84:	68bb      	ldr	r3, [r7, #8]
 8015b86:	68db      	ldr	r3, [r3, #12]
 8015b88:	685b      	ldr	r3, [r3, #4]
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	f7f4 fb04 	bl	800a198 <lwip_htonl>
 8015b90:	4603      	mov	r3, r0
 8015b92:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	dbe6      	blt.n	8015b66 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	681a      	ldr	r2, [r3, #0]
 8015b9c:	68bb      	ldr	r3, [r7, #8]
 8015b9e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	68ba      	ldr	r2, [r7, #8]
 8015ba4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015ba6:	68bb      	ldr	r3, [r7, #8]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d103      	bne.n	8015bb6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015bbc:	2bff      	cmp	r3, #255	@ 0xff
 8015bbe:	d007      	beq.n	8015bd0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015bc6:	3301      	adds	r3, #1
 8015bc8:	b2da      	uxtb	r2, r3
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015bd6:	2300      	movs	r3, #0
}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	3714      	adds	r7, #20
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd90      	pop	{r4, r7, pc}
 8015be0:	0801a9e4 	.word	0x0801a9e4
 8015be4:	0801b0b0 	.word	0x0801b0b0
 8015be8:	0801aa64 	.word	0x0801aa64

08015bec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b082      	sub	sp, #8
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d106      	bne.n	8015c08 <tcp_rexmit_fast+0x1c>
 8015bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8015ca4 <tcp_rexmit_fast+0xb8>)
 8015bfc:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8015c00:	4929      	ldr	r1, [pc, #164]	@ (8015ca8 <tcp_rexmit_fast+0xbc>)
 8015c02:	482a      	ldr	r0, [pc, #168]	@ (8015cac <tcp_rexmit_fast+0xc0>)
 8015c04:	f001 fc82 	bl	801750c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d045      	beq.n	8015c9c <tcp_rexmit_fast+0xb0>
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	8b5b      	ldrh	r3, [r3, #26]
 8015c14:	f003 0304 	and.w	r3, r3, #4
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d13f      	bne.n	8015c9c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	f7ff ff79 	bl	8015b14 <tcp_rexmit>
 8015c22:	4603      	mov	r3, r0
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d139      	bne.n	8015c9c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015c34:	4293      	cmp	r3, r2
 8015c36:	bf28      	it	cs
 8015c38:	4613      	movcs	r3, r2
 8015c3a:	b29b      	uxth	r3, r3
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	da00      	bge.n	8015c42 <tcp_rexmit_fast+0x56>
 8015c40:	3301      	adds	r3, #1
 8015c42:	105b      	asrs	r3, r3, #1
 8015c44:	b29a      	uxth	r2, r3
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015c52:	461a      	mov	r2, r3
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c58:	005b      	lsls	r3, r3, #1
 8015c5a:	429a      	cmp	r2, r3
 8015c5c:	d206      	bcs.n	8015c6c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c62:	005b      	lsls	r3, r3, #1
 8015c64:	b29a      	uxth	r2, r3
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c76:	4619      	mov	r1, r3
 8015c78:	0049      	lsls	r1, r1, #1
 8015c7a:	440b      	add	r3, r1
 8015c7c:	b29b      	uxth	r3, r3
 8015c7e:	4413      	add	r3, r2
 8015c80:	b29a      	uxth	r2, r3
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	8b5b      	ldrh	r3, [r3, #26]
 8015c8c:	f043 0304 	orr.w	r3, r3, #4
 8015c90:	b29a      	uxth	r2, r3
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	2200      	movs	r2, #0
 8015c9a:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8015c9c:	bf00      	nop
 8015c9e:	3708      	adds	r7, #8
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	bd80      	pop	{r7, pc}
 8015ca4:	0801a9e4 	.word	0x0801a9e4
 8015ca8:	0801b0c8 	.word	0x0801b0c8
 8015cac:	0801aa64 	.word	0x0801aa64

08015cb0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b086      	sub	sp, #24
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	60f8      	str	r0, [r7, #12]
 8015cb8:	607b      	str	r3, [r7, #4]
 8015cba:	460b      	mov	r3, r1
 8015cbc:	817b      	strh	r3, [r7, #10]
 8015cbe:	4613      	mov	r3, r2
 8015cc0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015cc2:	897a      	ldrh	r2, [r7, #10]
 8015cc4:	893b      	ldrh	r3, [r7, #8]
 8015cc6:	4413      	add	r3, r2
 8015cc8:	b29b      	uxth	r3, r3
 8015cca:	3314      	adds	r3, #20
 8015ccc:	b29b      	uxth	r3, r3
 8015cce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015cd2:	4619      	mov	r1, r3
 8015cd4:	2022      	movs	r0, #34	@ 0x22
 8015cd6:	f7fa f991 	bl	800fffc <pbuf_alloc>
 8015cda:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015cdc:	697b      	ldr	r3, [r7, #20]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d04d      	beq.n	8015d7e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015ce2:	897b      	ldrh	r3, [r7, #10]
 8015ce4:	3313      	adds	r3, #19
 8015ce6:	697a      	ldr	r2, [r7, #20]
 8015ce8:	8952      	ldrh	r2, [r2, #10]
 8015cea:	4293      	cmp	r3, r2
 8015cec:	db06      	blt.n	8015cfc <tcp_output_alloc_header_common+0x4c>
 8015cee:	4b26      	ldr	r3, [pc, #152]	@ (8015d88 <tcp_output_alloc_header_common+0xd8>)
 8015cf0:	f240 7223 	movw	r2, #1827	@ 0x723
 8015cf4:	4925      	ldr	r1, [pc, #148]	@ (8015d8c <tcp_output_alloc_header_common+0xdc>)
 8015cf6:	4826      	ldr	r0, [pc, #152]	@ (8015d90 <tcp_output_alloc_header_common+0xe0>)
 8015cf8:	f001 fc08 	bl	801750c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015cfc:	697b      	ldr	r3, [r7, #20]
 8015cfe:	685b      	ldr	r3, [r3, #4]
 8015d00:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015d02:	8c3b      	ldrh	r3, [r7, #32]
 8015d04:	4618      	mov	r0, r3
 8015d06:	f7f4 fa31 	bl	800a16c <lwip_htons>
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	461a      	mov	r2, r3
 8015d0e:	693b      	ldr	r3, [r7, #16]
 8015d10:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015d12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015d14:	4618      	mov	r0, r3
 8015d16:	f7f4 fa29 	bl	800a16c <lwip_htons>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	461a      	mov	r2, r3
 8015d1e:	693b      	ldr	r3, [r7, #16]
 8015d20:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015d22:	693b      	ldr	r3, [r7, #16]
 8015d24:	687a      	ldr	r2, [r7, #4]
 8015d26:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015d28:	68f8      	ldr	r0, [r7, #12]
 8015d2a:	f7f4 fa35 	bl	800a198 <lwip_htonl>
 8015d2e:	4602      	mov	r2, r0
 8015d30:	693b      	ldr	r3, [r7, #16]
 8015d32:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015d34:	897b      	ldrh	r3, [r7, #10]
 8015d36:	089b      	lsrs	r3, r3, #2
 8015d38:	b29b      	uxth	r3, r3
 8015d3a:	3305      	adds	r3, #5
 8015d3c:	b29b      	uxth	r3, r3
 8015d3e:	031b      	lsls	r3, r3, #12
 8015d40:	b29a      	uxth	r2, r3
 8015d42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015d46:	b29b      	uxth	r3, r3
 8015d48:	4313      	orrs	r3, r2
 8015d4a:	b29b      	uxth	r3, r3
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	f7f4 fa0d 	bl	800a16c <lwip_htons>
 8015d52:	4603      	mov	r3, r0
 8015d54:	461a      	mov	r2, r3
 8015d56:	693b      	ldr	r3, [r7, #16]
 8015d58:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015d5a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	f7f4 fa05 	bl	800a16c <lwip_htons>
 8015d62:	4603      	mov	r3, r0
 8015d64:	461a      	mov	r2, r3
 8015d66:	693b      	ldr	r3, [r7, #16]
 8015d68:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015d6a:	693b      	ldr	r3, [r7, #16]
 8015d6c:	2200      	movs	r2, #0
 8015d6e:	741a      	strb	r2, [r3, #16]
 8015d70:	2200      	movs	r2, #0
 8015d72:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015d74:	693b      	ldr	r3, [r7, #16]
 8015d76:	2200      	movs	r2, #0
 8015d78:	749a      	strb	r2, [r3, #18]
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015d7e:	697b      	ldr	r3, [r7, #20]
}
 8015d80:	4618      	mov	r0, r3
 8015d82:	3718      	adds	r7, #24
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd80      	pop	{r7, pc}
 8015d88:	0801a9e4 	.word	0x0801a9e4
 8015d8c:	0801b0e8 	.word	0x0801b0e8
 8015d90:	0801aa64 	.word	0x0801aa64

08015d94 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015d94:	b5b0      	push	{r4, r5, r7, lr}
 8015d96:	b08a      	sub	sp, #40	@ 0x28
 8015d98:	af04      	add	r7, sp, #16
 8015d9a:	60f8      	str	r0, [r7, #12]
 8015d9c:	607b      	str	r3, [r7, #4]
 8015d9e:	460b      	mov	r3, r1
 8015da0:	817b      	strh	r3, [r7, #10]
 8015da2:	4613      	mov	r3, r2
 8015da4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d106      	bne.n	8015dba <tcp_output_alloc_header+0x26>
 8015dac:	4b15      	ldr	r3, [pc, #84]	@ (8015e04 <tcp_output_alloc_header+0x70>)
 8015dae:	f240 7242 	movw	r2, #1858	@ 0x742
 8015db2:	4915      	ldr	r1, [pc, #84]	@ (8015e08 <tcp_output_alloc_header+0x74>)
 8015db4:	4815      	ldr	r0, [pc, #84]	@ (8015e0c <tcp_output_alloc_header+0x78>)
 8015db6:	f001 fba9 	bl	801750c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	8adb      	ldrh	r3, [r3, #22]
 8015dc2:	68fa      	ldr	r2, [r7, #12]
 8015dc4:	8b12      	ldrh	r2, [r2, #24]
 8015dc6:	68f9      	ldr	r1, [r7, #12]
 8015dc8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8015dca:	893d      	ldrh	r5, [r7, #8]
 8015dcc:	897c      	ldrh	r4, [r7, #10]
 8015dce:	9103      	str	r1, [sp, #12]
 8015dd0:	2110      	movs	r1, #16
 8015dd2:	9102      	str	r1, [sp, #8]
 8015dd4:	9201      	str	r2, [sp, #4]
 8015dd6:	9300      	str	r3, [sp, #0]
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	462a      	mov	r2, r5
 8015ddc:	4621      	mov	r1, r4
 8015dde:	f7ff ff67 	bl	8015cb0 <tcp_output_alloc_header_common>
 8015de2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015de4:	697b      	ldr	r3, [r7, #20]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d006      	beq.n	8015df8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dee:	68fa      	ldr	r2, [r7, #12]
 8015df0:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015df2:	441a      	add	r2, r3
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8015df8:	697b      	ldr	r3, [r7, #20]
}
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	3718      	adds	r7, #24
 8015dfe:	46bd      	mov	sp, r7
 8015e00:	bdb0      	pop	{r4, r5, r7, pc}
 8015e02:	bf00      	nop
 8015e04:	0801a9e4 	.word	0x0801a9e4
 8015e08:	0801b118 	.word	0x0801b118
 8015e0c:	0801aa64 	.word	0x0801aa64

08015e10 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b088      	sub	sp, #32
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	60f8      	str	r0, [r7, #12]
 8015e18:	60b9      	str	r1, [r7, #8]
 8015e1a:	4611      	mov	r1, r2
 8015e1c:	461a      	mov	r2, r3
 8015e1e:	460b      	mov	r3, r1
 8015e20:	71fb      	strb	r3, [r7, #7]
 8015e22:	4613      	mov	r3, r2
 8015e24:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015e26:	2300      	movs	r3, #0
 8015e28:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015e2a:	68bb      	ldr	r3, [r7, #8]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d106      	bne.n	8015e3e <tcp_output_fill_options+0x2e>
 8015e30:	4b12      	ldr	r3, [pc, #72]	@ (8015e7c <tcp_output_fill_options+0x6c>)
 8015e32:	f240 7256 	movw	r2, #1878	@ 0x756
 8015e36:	4912      	ldr	r1, [pc, #72]	@ (8015e80 <tcp_output_fill_options+0x70>)
 8015e38:	4812      	ldr	r0, [pc, #72]	@ (8015e84 <tcp_output_fill_options+0x74>)
 8015e3a:	f001 fb67 	bl	801750c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015e3e:	68bb      	ldr	r3, [r7, #8]
 8015e40:	685b      	ldr	r3, [r3, #4]
 8015e42:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015e44:	69bb      	ldr	r3, [r7, #24]
 8015e46:	3314      	adds	r3, #20
 8015e48:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015e4a:	8bfb      	ldrh	r3, [r7, #30]
 8015e4c:	009b      	lsls	r3, r3, #2
 8015e4e:	461a      	mov	r2, r3
 8015e50:	79fb      	ldrb	r3, [r7, #7]
 8015e52:	009b      	lsls	r3, r3, #2
 8015e54:	f003 0304 	and.w	r3, r3, #4
 8015e58:	4413      	add	r3, r2
 8015e5a:	3314      	adds	r3, #20
 8015e5c:	69ba      	ldr	r2, [r7, #24]
 8015e5e:	4413      	add	r3, r2
 8015e60:	697a      	ldr	r2, [r7, #20]
 8015e62:	429a      	cmp	r2, r3
 8015e64:	d006      	beq.n	8015e74 <tcp_output_fill_options+0x64>
 8015e66:	4b05      	ldr	r3, [pc, #20]	@ (8015e7c <tcp_output_fill_options+0x6c>)
 8015e68:	f240 7275 	movw	r2, #1909	@ 0x775
 8015e6c:	4906      	ldr	r1, [pc, #24]	@ (8015e88 <tcp_output_fill_options+0x78>)
 8015e6e:	4805      	ldr	r0, [pc, #20]	@ (8015e84 <tcp_output_fill_options+0x74>)
 8015e70:	f001 fb4c 	bl	801750c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015e74:	bf00      	nop
 8015e76:	3720      	adds	r7, #32
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	bd80      	pop	{r7, pc}
 8015e7c:	0801a9e4 	.word	0x0801a9e4
 8015e80:	0801b140 	.word	0x0801b140
 8015e84:	0801aa64 	.word	0x0801aa64
 8015e88:	0801b038 	.word	0x0801b038

08015e8c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b08a      	sub	sp, #40	@ 0x28
 8015e90:	af04      	add	r7, sp, #16
 8015e92:	60f8      	str	r0, [r7, #12]
 8015e94:	60b9      	str	r1, [r7, #8]
 8015e96:	607a      	str	r2, [r7, #4]
 8015e98:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015e9a:	68bb      	ldr	r3, [r7, #8]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d106      	bne.n	8015eae <tcp_output_control_segment+0x22>
 8015ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8015f14 <tcp_output_control_segment+0x88>)
 8015ea2:	f240 7287 	movw	r2, #1927	@ 0x787
 8015ea6:	491c      	ldr	r1, [pc, #112]	@ (8015f18 <tcp_output_control_segment+0x8c>)
 8015ea8:	481c      	ldr	r0, [pc, #112]	@ (8015f1c <tcp_output_control_segment+0x90>)
 8015eaa:	f001 fb2f 	bl	801750c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015eae:	683a      	ldr	r2, [r7, #0]
 8015eb0:	6879      	ldr	r1, [r7, #4]
 8015eb2:	68f8      	ldr	r0, [r7, #12]
 8015eb4:	f7fe ff42 	bl	8014d3c <tcp_route>
 8015eb8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015eba:	693b      	ldr	r3, [r7, #16]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d102      	bne.n	8015ec6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015ec0:	23fc      	movs	r3, #252	@ 0xfc
 8015ec2:	75fb      	strb	r3, [r7, #23]
 8015ec4:	e01c      	b.n	8015f00 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d006      	beq.n	8015eda <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	7adb      	ldrb	r3, [r3, #11]
 8015ed0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	7a9b      	ldrb	r3, [r3, #10]
 8015ed6:	757b      	strb	r3, [r7, #21]
 8015ed8:	e003      	b.n	8015ee2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015eda:	23ff      	movs	r3, #255	@ 0xff
 8015edc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015ede:	2300      	movs	r3, #0
 8015ee0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015ee2:	7dba      	ldrb	r2, [r7, #22]
 8015ee4:	693b      	ldr	r3, [r7, #16]
 8015ee6:	9302      	str	r3, [sp, #8]
 8015ee8:	2306      	movs	r3, #6
 8015eea:	9301      	str	r3, [sp, #4]
 8015eec:	7d7b      	ldrb	r3, [r7, #21]
 8015eee:	9300      	str	r3, [sp, #0]
 8015ef0:	4613      	mov	r3, r2
 8015ef2:	683a      	ldr	r2, [r7, #0]
 8015ef4:	6879      	ldr	r1, [r7, #4]
 8015ef6:	68b8      	ldr	r0, [r7, #8]
 8015ef8:	f7f7 ffc0 	bl	800de7c <ip4_output_if>
 8015efc:	4603      	mov	r3, r0
 8015efe:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015f00:	68b8      	ldr	r0, [r7, #8]
 8015f02:	f7fa fb5d 	bl	80105c0 <pbuf_free>
  return err;
 8015f06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	3718      	adds	r7, #24
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bd80      	pop	{r7, pc}
 8015f12:	bf00      	nop
 8015f14:	0801a9e4 	.word	0x0801a9e4
 8015f18:	0801b168 	.word	0x0801b168
 8015f1c:	0801aa64 	.word	0x0801aa64

08015f20 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015f20:	b590      	push	{r4, r7, lr}
 8015f22:	b08b      	sub	sp, #44	@ 0x2c
 8015f24:	af04      	add	r7, sp, #16
 8015f26:	60f8      	str	r0, [r7, #12]
 8015f28:	60b9      	str	r1, [r7, #8]
 8015f2a:	607a      	str	r2, [r7, #4]
 8015f2c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d106      	bne.n	8015f42 <tcp_rst+0x22>
 8015f34:	4b1f      	ldr	r3, [pc, #124]	@ (8015fb4 <tcp_rst+0x94>)
 8015f36:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8015f3a:	491f      	ldr	r1, [pc, #124]	@ (8015fb8 <tcp_rst+0x98>)
 8015f3c:	481f      	ldr	r0, [pc, #124]	@ (8015fbc <tcp_rst+0x9c>)
 8015f3e:	f001 fae5 	bl	801750c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d106      	bne.n	8015f56 <tcp_rst+0x36>
 8015f48:	4b1a      	ldr	r3, [pc, #104]	@ (8015fb4 <tcp_rst+0x94>)
 8015f4a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8015f4e:	491c      	ldr	r1, [pc, #112]	@ (8015fc0 <tcp_rst+0xa0>)
 8015f50:	481a      	ldr	r0, [pc, #104]	@ (8015fbc <tcp_rst+0x9c>)
 8015f52:	f001 fadb 	bl	801750c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015f56:	2300      	movs	r3, #0
 8015f58:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015f5a:	f246 0308 	movw	r3, #24584	@ 0x6008
 8015f5e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015f60:	7dfb      	ldrb	r3, [r7, #23]
 8015f62:	b29c      	uxth	r4, r3
 8015f64:	68b8      	ldr	r0, [r7, #8]
 8015f66:	f7f4 f917 	bl	800a198 <lwip_htonl>
 8015f6a:	4602      	mov	r2, r0
 8015f6c:	8abb      	ldrh	r3, [r7, #20]
 8015f6e:	9303      	str	r3, [sp, #12]
 8015f70:	2314      	movs	r3, #20
 8015f72:	9302      	str	r3, [sp, #8]
 8015f74:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015f76:	9301      	str	r3, [sp, #4]
 8015f78:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015f7a:	9300      	str	r3, [sp, #0]
 8015f7c:	4613      	mov	r3, r2
 8015f7e:	2200      	movs	r2, #0
 8015f80:	4621      	mov	r1, r4
 8015f82:	6878      	ldr	r0, [r7, #4]
 8015f84:	f7ff fe94 	bl	8015cb0 <tcp_output_alloc_header_common>
 8015f88:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015f8a:	693b      	ldr	r3, [r7, #16]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d00c      	beq.n	8015faa <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015f90:	7dfb      	ldrb	r3, [r7, #23]
 8015f92:	2200      	movs	r2, #0
 8015f94:	6939      	ldr	r1, [r7, #16]
 8015f96:	68f8      	ldr	r0, [r7, #12]
 8015f98:	f7ff ff3a 	bl	8015e10 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f9e:	683a      	ldr	r2, [r7, #0]
 8015fa0:	6939      	ldr	r1, [r7, #16]
 8015fa2:	68f8      	ldr	r0, [r7, #12]
 8015fa4:	f7ff ff72 	bl	8015e8c <tcp_output_control_segment>
 8015fa8:	e000      	b.n	8015fac <tcp_rst+0x8c>
    return;
 8015faa:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015fac:	371c      	adds	r7, #28
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd90      	pop	{r4, r7, pc}
 8015fb2:	bf00      	nop
 8015fb4:	0801a9e4 	.word	0x0801a9e4
 8015fb8:	0801b194 	.word	0x0801b194
 8015fbc:	0801aa64 	.word	0x0801aa64
 8015fc0:	0801b1b0 	.word	0x0801b1b0

08015fc4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015fc4:	b590      	push	{r4, r7, lr}
 8015fc6:	b087      	sub	sp, #28
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015fcc:	2300      	movs	r3, #0
 8015fce:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d106      	bne.n	8015fe8 <tcp_send_empty_ack+0x24>
 8015fda:	4b28      	ldr	r3, [pc, #160]	@ (801607c <tcp_send_empty_ack+0xb8>)
 8015fdc:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8015fe0:	4927      	ldr	r1, [pc, #156]	@ (8016080 <tcp_send_empty_ack+0xbc>)
 8015fe2:	4828      	ldr	r0, [pc, #160]	@ (8016084 <tcp_send_empty_ack+0xc0>)
 8015fe4:	f001 fa92 	bl	801750c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015fe8:	7dfb      	ldrb	r3, [r7, #23]
 8015fea:	009b      	lsls	r3, r3, #2
 8015fec:	b2db      	uxtb	r3, r3
 8015fee:	f003 0304 	and.w	r3, r3, #4
 8015ff2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015ff4:	7d7b      	ldrb	r3, [r7, #21]
 8015ff6:	b29c      	uxth	r4, r3
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	f7f4 f8cb 	bl	800a198 <lwip_htonl>
 8016002:	4603      	mov	r3, r0
 8016004:	2200      	movs	r2, #0
 8016006:	4621      	mov	r1, r4
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	f7ff fec3 	bl	8015d94 <tcp_output_alloc_header>
 801600e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016010:	693b      	ldr	r3, [r7, #16]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d109      	bne.n	801602a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	8b5b      	ldrh	r3, [r3, #26]
 801601a:	f043 0303 	orr.w	r3, r3, #3
 801601e:	b29a      	uxth	r2, r3
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016024:	f06f 0301 	mvn.w	r3, #1
 8016028:	e023      	b.n	8016072 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801602a:	7dbb      	ldrb	r3, [r7, #22]
 801602c:	7dfa      	ldrb	r2, [r7, #23]
 801602e:	6939      	ldr	r1, [r7, #16]
 8016030:	6878      	ldr	r0, [r7, #4]
 8016032:	f7ff feed 	bl	8015e10 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016036:	687a      	ldr	r2, [r7, #4]
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	3304      	adds	r3, #4
 801603c:	6939      	ldr	r1, [r7, #16]
 801603e:	6878      	ldr	r0, [r7, #4]
 8016040:	f7ff ff24 	bl	8015e8c <tcp_output_control_segment>
 8016044:	4603      	mov	r3, r0
 8016046:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d007      	beq.n	8016060 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	8b5b      	ldrh	r3, [r3, #26]
 8016054:	f043 0303 	orr.w	r3, r3, #3
 8016058:	b29a      	uxth	r2, r3
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	835a      	strh	r2, [r3, #26]
 801605e:	e006      	b.n	801606e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	8b5b      	ldrh	r3, [r3, #26]
 8016064:	f023 0303 	bic.w	r3, r3, #3
 8016068:	b29a      	uxth	r2, r3
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801606e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016072:	4618      	mov	r0, r3
 8016074:	371c      	adds	r7, #28
 8016076:	46bd      	mov	sp, r7
 8016078:	bd90      	pop	{r4, r7, pc}
 801607a:	bf00      	nop
 801607c:	0801a9e4 	.word	0x0801a9e4
 8016080:	0801b1cc 	.word	0x0801b1cc
 8016084:	0801aa64 	.word	0x0801aa64

08016088 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016088:	b590      	push	{r4, r7, lr}
 801608a:	b087      	sub	sp, #28
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016090:	2300      	movs	r3, #0
 8016092:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d106      	bne.n	80160a8 <tcp_keepalive+0x20>
 801609a:	4b18      	ldr	r3, [pc, #96]	@ (80160fc <tcp_keepalive+0x74>)
 801609c:	f640 0224 	movw	r2, #2084	@ 0x824
 80160a0:	4917      	ldr	r1, [pc, #92]	@ (8016100 <tcp_keepalive+0x78>)
 80160a2:	4818      	ldr	r0, [pc, #96]	@ (8016104 <tcp_keepalive+0x7c>)
 80160a4:	f001 fa32 	bl	801750c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80160a8:	7dfb      	ldrb	r3, [r7, #23]
 80160aa:	b29c      	uxth	r4, r3
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80160b0:	3b01      	subs	r3, #1
 80160b2:	4618      	mov	r0, r3
 80160b4:	f7f4 f870 	bl	800a198 <lwip_htonl>
 80160b8:	4603      	mov	r3, r0
 80160ba:	2200      	movs	r2, #0
 80160bc:	4621      	mov	r1, r4
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	f7ff fe68 	bl	8015d94 <tcp_output_alloc_header>
 80160c4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80160c6:	693b      	ldr	r3, [r7, #16]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d102      	bne.n	80160d2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80160cc:	f04f 33ff 	mov.w	r3, #4294967295
 80160d0:	e010      	b.n	80160f4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80160d2:	7dfb      	ldrb	r3, [r7, #23]
 80160d4:	2200      	movs	r2, #0
 80160d6:	6939      	ldr	r1, [r7, #16]
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	f7ff fe99 	bl	8015e10 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80160de:	687a      	ldr	r2, [r7, #4]
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	3304      	adds	r3, #4
 80160e4:	6939      	ldr	r1, [r7, #16]
 80160e6:	6878      	ldr	r0, [r7, #4]
 80160e8:	f7ff fed0 	bl	8015e8c <tcp_output_control_segment>
 80160ec:	4603      	mov	r3, r0
 80160ee:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80160f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80160f4:	4618      	mov	r0, r3
 80160f6:	371c      	adds	r7, #28
 80160f8:	46bd      	mov	sp, r7
 80160fa:	bd90      	pop	{r4, r7, pc}
 80160fc:	0801a9e4 	.word	0x0801a9e4
 8016100:	0801b1ec 	.word	0x0801b1ec
 8016104:	0801aa64 	.word	0x0801aa64

08016108 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016108:	b590      	push	{r4, r7, lr}
 801610a:	b08b      	sub	sp, #44	@ 0x2c
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016110:	2300      	movs	r3, #0
 8016112:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d106      	bne.n	801612a <tcp_zero_window_probe+0x22>
 801611c:	4b4c      	ldr	r3, [pc, #304]	@ (8016250 <tcp_zero_window_probe+0x148>)
 801611e:	f640 024f 	movw	r2, #2127	@ 0x84f
 8016122:	494c      	ldr	r1, [pc, #304]	@ (8016254 <tcp_zero_window_probe+0x14c>)
 8016124:	484c      	ldr	r0, [pc, #304]	@ (8016258 <tcp_zero_window_probe+0x150>)
 8016126:	f001 f9f1 	bl	801750c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801612e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016130:	6a3b      	ldr	r3, [r7, #32]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d101      	bne.n	801613a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8016136:	2300      	movs	r3, #0
 8016138:	e086      	b.n	8016248 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8016140:	2bff      	cmp	r3, #255	@ 0xff
 8016142:	d007      	beq.n	8016154 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801614a:	3301      	adds	r3, #1
 801614c:	b2da      	uxtb	r2, r3
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016154:	6a3b      	ldr	r3, [r7, #32]
 8016156:	68db      	ldr	r3, [r3, #12]
 8016158:	899b      	ldrh	r3, [r3, #12]
 801615a:	b29b      	uxth	r3, r3
 801615c:	4618      	mov	r0, r3
 801615e:	f7f4 f805 	bl	800a16c <lwip_htons>
 8016162:	4603      	mov	r3, r0
 8016164:	b2db      	uxtb	r3, r3
 8016166:	f003 0301 	and.w	r3, r3, #1
 801616a:	2b00      	cmp	r3, #0
 801616c:	d005      	beq.n	801617a <tcp_zero_window_probe+0x72>
 801616e:	6a3b      	ldr	r3, [r7, #32]
 8016170:	891b      	ldrh	r3, [r3, #8]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d101      	bne.n	801617a <tcp_zero_window_probe+0x72>
 8016176:	2301      	movs	r3, #1
 8016178:	e000      	b.n	801617c <tcp_zero_window_probe+0x74>
 801617a:	2300      	movs	r3, #0
 801617c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801617e:	7ffb      	ldrb	r3, [r7, #31]
 8016180:	2b00      	cmp	r3, #0
 8016182:	bf0c      	ite	eq
 8016184:	2301      	moveq	r3, #1
 8016186:	2300      	movne	r3, #0
 8016188:	b2db      	uxtb	r3, r3
 801618a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801618c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016190:	b299      	uxth	r1, r3
 8016192:	6a3b      	ldr	r3, [r7, #32]
 8016194:	68db      	ldr	r3, [r3, #12]
 8016196:	685b      	ldr	r3, [r3, #4]
 8016198:	8bba      	ldrh	r2, [r7, #28]
 801619a:	6878      	ldr	r0, [r7, #4]
 801619c:	f7ff fdfa 	bl	8015d94 <tcp_output_alloc_header>
 80161a0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80161a2:	69bb      	ldr	r3, [r7, #24]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d102      	bne.n	80161ae <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80161a8:	f04f 33ff 	mov.w	r3, #4294967295
 80161ac:	e04c      	b.n	8016248 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80161ae:	69bb      	ldr	r3, [r7, #24]
 80161b0:	685b      	ldr	r3, [r3, #4]
 80161b2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80161b4:	7ffb      	ldrb	r3, [r7, #31]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d011      	beq.n	80161de <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80161ba:	697b      	ldr	r3, [r7, #20]
 80161bc:	899b      	ldrh	r3, [r3, #12]
 80161be:	b29b      	uxth	r3, r3
 80161c0:	b21b      	sxth	r3, r3
 80161c2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80161c6:	b21c      	sxth	r4, r3
 80161c8:	2011      	movs	r0, #17
 80161ca:	f7f3 ffcf 	bl	800a16c <lwip_htons>
 80161ce:	4603      	mov	r3, r0
 80161d0:	b21b      	sxth	r3, r3
 80161d2:	4323      	orrs	r3, r4
 80161d4:	b21b      	sxth	r3, r3
 80161d6:	b29a      	uxth	r2, r3
 80161d8:	697b      	ldr	r3, [r7, #20]
 80161da:	819a      	strh	r2, [r3, #12]
 80161dc:	e010      	b.n	8016200 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80161de:	69bb      	ldr	r3, [r7, #24]
 80161e0:	685b      	ldr	r3, [r3, #4]
 80161e2:	3314      	adds	r3, #20
 80161e4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80161e6:	6a3b      	ldr	r3, [r7, #32]
 80161e8:	6858      	ldr	r0, [r3, #4]
 80161ea:	6a3b      	ldr	r3, [r7, #32]
 80161ec:	685b      	ldr	r3, [r3, #4]
 80161ee:	891a      	ldrh	r2, [r3, #8]
 80161f0:	6a3b      	ldr	r3, [r7, #32]
 80161f2:	891b      	ldrh	r3, [r3, #8]
 80161f4:	1ad3      	subs	r3, r2, r3
 80161f6:	b29b      	uxth	r3, r3
 80161f8:	2201      	movs	r2, #1
 80161fa:	6939      	ldr	r1, [r7, #16]
 80161fc:	f7fa fbe6 	bl	80109cc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016200:	6a3b      	ldr	r3, [r7, #32]
 8016202:	68db      	ldr	r3, [r3, #12]
 8016204:	685b      	ldr	r3, [r3, #4]
 8016206:	4618      	mov	r0, r3
 8016208:	f7f3 ffc6 	bl	800a198 <lwip_htonl>
 801620c:	4603      	mov	r3, r0
 801620e:	3301      	adds	r3, #1
 8016210:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	1ad3      	subs	r3, r2, r3
 801621a:	2b00      	cmp	r3, #0
 801621c:	da02      	bge.n	8016224 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	68fa      	ldr	r2, [r7, #12]
 8016222:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016228:	2200      	movs	r2, #0
 801622a:	69b9      	ldr	r1, [r7, #24]
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f7ff fdef 	bl	8015e10 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016232:	687a      	ldr	r2, [r7, #4]
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	3304      	adds	r3, #4
 8016238:	69b9      	ldr	r1, [r7, #24]
 801623a:	6878      	ldr	r0, [r7, #4]
 801623c:	f7ff fe26 	bl	8015e8c <tcp_output_control_segment>
 8016240:	4603      	mov	r3, r0
 8016242:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016244:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016248:	4618      	mov	r0, r3
 801624a:	372c      	adds	r7, #44	@ 0x2c
 801624c:	46bd      	mov	sp, r7
 801624e:	bd90      	pop	{r4, r7, pc}
 8016250:	0801a9e4 	.word	0x0801a9e4
 8016254:	0801b208 	.word	0x0801b208
 8016258:	0801aa64 	.word	0x0801aa64

0801625c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b084      	sub	sp, #16
 8016260:	af00      	add	r7, sp, #0
 8016262:	6078      	str	r0, [r7, #4]
 8016264:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8016266:	f000 fb01 	bl	801686c <sys_timeouts_sleeptime>
 801626a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016272:	d10b      	bne.n	801628c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8016274:	4813      	ldr	r0, [pc, #76]	@ (80162c4 <tcpip_timeouts_mbox_fetch+0x68>)
 8016276:	f7fa fe6c 	bl	8010f52 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801627a:	2200      	movs	r2, #0
 801627c:	6839      	ldr	r1, [r7, #0]
 801627e:	6878      	ldr	r0, [r7, #4]
 8016280:	f7fa fdde 	bl	8010e40 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8016284:	480f      	ldr	r0, [pc, #60]	@ (80162c4 <tcpip_timeouts_mbox_fetch+0x68>)
 8016286:	f7fa fe55 	bl	8010f34 <sys_mutex_lock>
    return;
 801628a:	e018      	b.n	80162be <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d102      	bne.n	8016298 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8016292:	f000 fab1 	bl	80167f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016296:	e7e6      	b.n	8016266 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8016298:	480a      	ldr	r0, [pc, #40]	@ (80162c4 <tcpip_timeouts_mbox_fetch+0x68>)
 801629a:	f7fa fe5a 	bl	8010f52 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801629e:	68fa      	ldr	r2, [r7, #12]
 80162a0:	6839      	ldr	r1, [r7, #0]
 80162a2:	6878      	ldr	r0, [r7, #4]
 80162a4:	f7fa fdcc 	bl	8010e40 <sys_arch_mbox_fetch>
 80162a8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80162aa:	4806      	ldr	r0, [pc, #24]	@ (80162c4 <tcpip_timeouts_mbox_fetch+0x68>)
 80162ac:	f7fa fe42 	bl	8010f34 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80162b0:	68bb      	ldr	r3, [r7, #8]
 80162b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162b6:	d102      	bne.n	80162be <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80162b8:	f000 fa9e 	bl	80167f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80162bc:	e7d3      	b.n	8016266 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80162be:	3710      	adds	r7, #16
 80162c0:	46bd      	mov	sp, r7
 80162c2:	bd80      	pop	{r7, pc}
 80162c4:	24007bcc 	.word	0x24007bcc

080162c8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b084      	sub	sp, #16
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80162d0:	4810      	ldr	r0, [pc, #64]	@ (8016314 <tcpip_thread+0x4c>)
 80162d2:	f7fa fe2f 	bl	8010f34 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80162d6:	4b10      	ldr	r3, [pc, #64]	@ (8016318 <tcpip_thread+0x50>)
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d005      	beq.n	80162ea <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80162de:	4b0e      	ldr	r3, [pc, #56]	@ (8016318 <tcpip_thread+0x50>)
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	4a0e      	ldr	r2, [pc, #56]	@ (801631c <tcpip_thread+0x54>)
 80162e4:	6812      	ldr	r2, [r2, #0]
 80162e6:	4610      	mov	r0, r2
 80162e8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80162ea:	f107 030c 	add.w	r3, r7, #12
 80162ee:	4619      	mov	r1, r3
 80162f0:	480b      	ldr	r0, [pc, #44]	@ (8016320 <tcpip_thread+0x58>)
 80162f2:	f7ff ffb3 	bl	801625c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d106      	bne.n	801630a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80162fc:	4b09      	ldr	r3, [pc, #36]	@ (8016324 <tcpip_thread+0x5c>)
 80162fe:	2291      	movs	r2, #145	@ 0x91
 8016300:	4909      	ldr	r1, [pc, #36]	@ (8016328 <tcpip_thread+0x60>)
 8016302:	480a      	ldr	r0, [pc, #40]	@ (801632c <tcpip_thread+0x64>)
 8016304:	f001 f902 	bl	801750c <iprintf>
      continue;
 8016308:	e003      	b.n	8016312 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	4618      	mov	r0, r3
 801630e:	f000 f80f 	bl	8016330 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016312:	e7ea      	b.n	80162ea <tcpip_thread+0x22>
 8016314:	24007bcc 	.word	0x24007bcc
 8016318:	24007bc0 	.word	0x24007bc0
 801631c:	24007bc4 	.word	0x24007bc4
 8016320:	24007bc8 	.word	0x24007bc8
 8016324:	0801b22c 	.word	0x0801b22c
 8016328:	0801b288 	.word	0x0801b288
 801632c:	0801b2a8 	.word	0x0801b2a8

08016330 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b082      	sub	sp, #8
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	781b      	ldrb	r3, [r3, #0]
 801633c:	2b02      	cmp	r3, #2
 801633e:	d026      	beq.n	801638e <tcpip_thread_handle_msg+0x5e>
 8016340:	2b02      	cmp	r3, #2
 8016342:	dc2b      	bgt.n	801639c <tcpip_thread_handle_msg+0x6c>
 8016344:	2b00      	cmp	r3, #0
 8016346:	d002      	beq.n	801634e <tcpip_thread_handle_msg+0x1e>
 8016348:	2b01      	cmp	r3, #1
 801634a:	d015      	beq.n	8016378 <tcpip_thread_handle_msg+0x48>
 801634c:	e026      	b.n	801639c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	68db      	ldr	r3, [r3, #12]
 8016352:	687a      	ldr	r2, [r7, #4]
 8016354:	6850      	ldr	r0, [r2, #4]
 8016356:	687a      	ldr	r2, [r7, #4]
 8016358:	6892      	ldr	r2, [r2, #8]
 801635a:	4611      	mov	r1, r2
 801635c:	4798      	blx	r3
 801635e:	4603      	mov	r3, r0
 8016360:	2b00      	cmp	r3, #0
 8016362:	d004      	beq.n	801636e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	685b      	ldr	r3, [r3, #4]
 8016368:	4618      	mov	r0, r3
 801636a:	f7fa f929 	bl	80105c0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801636e:	6879      	ldr	r1, [r7, #4]
 8016370:	2009      	movs	r0, #9
 8016372:	f7f9 fa5d 	bl	800f830 <memp_free>
      break;
 8016376:	e018      	b.n	80163aa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	685b      	ldr	r3, [r3, #4]
 801637c:	687a      	ldr	r2, [r7, #4]
 801637e:	6892      	ldr	r2, [r2, #8]
 8016380:	4610      	mov	r0, r2
 8016382:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8016384:	6879      	ldr	r1, [r7, #4]
 8016386:	2008      	movs	r0, #8
 8016388:	f7f9 fa52 	bl	800f830 <memp_free>
      break;
 801638c:	e00d      	b.n	80163aa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	685b      	ldr	r3, [r3, #4]
 8016392:	687a      	ldr	r2, [r7, #4]
 8016394:	6892      	ldr	r2, [r2, #8]
 8016396:	4610      	mov	r0, r2
 8016398:	4798      	blx	r3
      break;
 801639a:	e006      	b.n	80163aa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801639c:	4b05      	ldr	r3, [pc, #20]	@ (80163b4 <tcpip_thread_handle_msg+0x84>)
 801639e:	22cf      	movs	r2, #207	@ 0xcf
 80163a0:	4905      	ldr	r1, [pc, #20]	@ (80163b8 <tcpip_thread_handle_msg+0x88>)
 80163a2:	4806      	ldr	r0, [pc, #24]	@ (80163bc <tcpip_thread_handle_msg+0x8c>)
 80163a4:	f001 f8b2 	bl	801750c <iprintf>
      break;
 80163a8:	bf00      	nop
  }
}
 80163aa:	bf00      	nop
 80163ac:	3708      	adds	r7, #8
 80163ae:	46bd      	mov	sp, r7
 80163b0:	bd80      	pop	{r7, pc}
 80163b2:	bf00      	nop
 80163b4:	0801b22c 	.word	0x0801b22c
 80163b8:	0801b288 	.word	0x0801b288
 80163bc:	0801b2a8 	.word	0x0801b2a8

080163c0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b086      	sub	sp, #24
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	60f8      	str	r0, [r7, #12]
 80163c8:	60b9      	str	r1, [r7, #8]
 80163ca:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80163cc:	481a      	ldr	r0, [pc, #104]	@ (8016438 <tcpip_inpkt+0x78>)
 80163ce:	f7fa fd76 	bl	8010ebe <sys_mbox_valid>
 80163d2:	4603      	mov	r3, r0
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d105      	bne.n	80163e4 <tcpip_inpkt+0x24>
 80163d8:	4b18      	ldr	r3, [pc, #96]	@ (801643c <tcpip_inpkt+0x7c>)
 80163da:	22fc      	movs	r2, #252	@ 0xfc
 80163dc:	4918      	ldr	r1, [pc, #96]	@ (8016440 <tcpip_inpkt+0x80>)
 80163de:	4819      	ldr	r0, [pc, #100]	@ (8016444 <tcpip_inpkt+0x84>)
 80163e0:	f001 f894 	bl	801750c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80163e4:	2009      	movs	r0, #9
 80163e6:	f7f9 f9ad 	bl	800f744 <memp_malloc>
 80163ea:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80163ec:	697b      	ldr	r3, [r7, #20]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d102      	bne.n	80163f8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80163f2:	f04f 33ff 	mov.w	r3, #4294967295
 80163f6:	e01a      	b.n	801642e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80163f8:	697b      	ldr	r3, [r7, #20]
 80163fa:	2200      	movs	r2, #0
 80163fc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80163fe:	697b      	ldr	r3, [r7, #20]
 8016400:	68fa      	ldr	r2, [r7, #12]
 8016402:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8016404:	697b      	ldr	r3, [r7, #20]
 8016406:	68ba      	ldr	r2, [r7, #8]
 8016408:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801640a:	697b      	ldr	r3, [r7, #20]
 801640c:	687a      	ldr	r2, [r7, #4]
 801640e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016410:	6979      	ldr	r1, [r7, #20]
 8016412:	4809      	ldr	r0, [pc, #36]	@ (8016438 <tcpip_inpkt+0x78>)
 8016414:	f7fa fcfa 	bl	8010e0c <sys_mbox_trypost>
 8016418:	4603      	mov	r3, r0
 801641a:	2b00      	cmp	r3, #0
 801641c:	d006      	beq.n	801642c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801641e:	6979      	ldr	r1, [r7, #20]
 8016420:	2009      	movs	r0, #9
 8016422:	f7f9 fa05 	bl	800f830 <memp_free>
    return ERR_MEM;
 8016426:	f04f 33ff 	mov.w	r3, #4294967295
 801642a:	e000      	b.n	801642e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801642c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801642e:	4618      	mov	r0, r3
 8016430:	3718      	adds	r7, #24
 8016432:	46bd      	mov	sp, r7
 8016434:	bd80      	pop	{r7, pc}
 8016436:	bf00      	nop
 8016438:	24007bc8 	.word	0x24007bc8
 801643c:	0801b22c 	.word	0x0801b22c
 8016440:	0801b2d0 	.word	0x0801b2d0
 8016444:	0801b2a8 	.word	0x0801b2a8

08016448 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b082      	sub	sp, #8
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
 8016450:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8016452:	683b      	ldr	r3, [r7, #0]
 8016454:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8016458:	f003 0318 	and.w	r3, r3, #24
 801645c:	2b00      	cmp	r3, #0
 801645e:	d006      	beq.n	801646e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8016460:	4a08      	ldr	r2, [pc, #32]	@ (8016484 <tcpip_input+0x3c>)
 8016462:	6839      	ldr	r1, [r7, #0]
 8016464:	6878      	ldr	r0, [r7, #4]
 8016466:	f7ff ffab 	bl	80163c0 <tcpip_inpkt>
 801646a:	4603      	mov	r3, r0
 801646c:	e005      	b.n	801647a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801646e:	4a06      	ldr	r2, [pc, #24]	@ (8016488 <tcpip_input+0x40>)
 8016470:	6839      	ldr	r1, [r7, #0]
 8016472:	6878      	ldr	r0, [r7, #4]
 8016474:	f7ff ffa4 	bl	80163c0 <tcpip_inpkt>
 8016478:	4603      	mov	r3, r0
}
 801647a:	4618      	mov	r0, r3
 801647c:	3708      	adds	r7, #8
 801647e:	46bd      	mov	sp, r7
 8016480:	bd80      	pop	{r7, pc}
 8016482:	bf00      	nop
 8016484:	0800d405 	.word	0x0800d405
 8016488:	0800dbf9 	.word	0x0800dbf9

0801648c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801648c:	b580      	push	{r7, lr}
 801648e:	b084      	sub	sp, #16
 8016490:	af00      	add	r7, sp, #0
 8016492:	6078      	str	r0, [r7, #4]
 8016494:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016496:	4819      	ldr	r0, [pc, #100]	@ (80164fc <tcpip_try_callback+0x70>)
 8016498:	f7fa fd11 	bl	8010ebe <sys_mbox_valid>
 801649c:	4603      	mov	r3, r0
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d106      	bne.n	80164b0 <tcpip_try_callback+0x24>
 80164a2:	4b17      	ldr	r3, [pc, #92]	@ (8016500 <tcpip_try_callback+0x74>)
 80164a4:	f240 125d 	movw	r2, #349	@ 0x15d
 80164a8:	4916      	ldr	r1, [pc, #88]	@ (8016504 <tcpip_try_callback+0x78>)
 80164aa:	4817      	ldr	r0, [pc, #92]	@ (8016508 <tcpip_try_callback+0x7c>)
 80164ac:	f001 f82e 	bl	801750c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80164b0:	2008      	movs	r0, #8
 80164b2:	f7f9 f947 	bl	800f744 <memp_malloc>
 80164b6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d102      	bne.n	80164c4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80164be:	f04f 33ff 	mov.w	r3, #4294967295
 80164c2:	e017      	b.n	80164f4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	2201      	movs	r2, #1
 80164c8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	687a      	ldr	r2, [r7, #4]
 80164ce:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	683a      	ldr	r2, [r7, #0]
 80164d4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80164d6:	68f9      	ldr	r1, [r7, #12]
 80164d8:	4808      	ldr	r0, [pc, #32]	@ (80164fc <tcpip_try_callback+0x70>)
 80164da:	f7fa fc97 	bl	8010e0c <sys_mbox_trypost>
 80164de:	4603      	mov	r3, r0
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d006      	beq.n	80164f2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80164e4:	68f9      	ldr	r1, [r7, #12]
 80164e6:	2008      	movs	r0, #8
 80164e8:	f7f9 f9a2 	bl	800f830 <memp_free>
    return ERR_MEM;
 80164ec:	f04f 33ff 	mov.w	r3, #4294967295
 80164f0:	e000      	b.n	80164f4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80164f2:	2300      	movs	r3, #0
}
 80164f4:	4618      	mov	r0, r3
 80164f6:	3710      	adds	r7, #16
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd80      	pop	{r7, pc}
 80164fc:	24007bc8 	.word	0x24007bc8
 8016500:	0801b22c 	.word	0x0801b22c
 8016504:	0801b2d0 	.word	0x0801b2d0
 8016508:	0801b2a8 	.word	0x0801b2a8

0801650c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b084      	sub	sp, #16
 8016510:	af02      	add	r7, sp, #8
 8016512:	6078      	str	r0, [r7, #4]
 8016514:	6039      	str	r1, [r7, #0]
  lwip_init();
 8016516:	f7f7 fabb 	bl	800da90 <lwip_init>

  tcpip_init_done = initfunc;
 801651a:	4a17      	ldr	r2, [pc, #92]	@ (8016578 <tcpip_init+0x6c>)
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8016520:	4a16      	ldr	r2, [pc, #88]	@ (801657c <tcpip_init+0x70>)
 8016522:	683b      	ldr	r3, [r7, #0]
 8016524:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8016526:	2106      	movs	r1, #6
 8016528:	4815      	ldr	r0, [pc, #84]	@ (8016580 <tcpip_init+0x74>)
 801652a:	f7fa fc4d 	bl	8010dc8 <sys_mbox_new>
 801652e:	4603      	mov	r3, r0
 8016530:	2b00      	cmp	r3, #0
 8016532:	d006      	beq.n	8016542 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8016534:	4b13      	ldr	r3, [pc, #76]	@ (8016584 <tcpip_init+0x78>)
 8016536:	f240 2261 	movw	r2, #609	@ 0x261
 801653a:	4913      	ldr	r1, [pc, #76]	@ (8016588 <tcpip_init+0x7c>)
 801653c:	4813      	ldr	r0, [pc, #76]	@ (801658c <tcpip_init+0x80>)
 801653e:	f000 ffe5 	bl	801750c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8016542:	4813      	ldr	r0, [pc, #76]	@ (8016590 <tcpip_init+0x84>)
 8016544:	f7fa fcda 	bl	8010efc <sys_mutex_new>
 8016548:	4603      	mov	r3, r0
 801654a:	2b00      	cmp	r3, #0
 801654c:	d006      	beq.n	801655c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801654e:	4b0d      	ldr	r3, [pc, #52]	@ (8016584 <tcpip_init+0x78>)
 8016550:	f240 2265 	movw	r2, #613	@ 0x265
 8016554:	490f      	ldr	r1, [pc, #60]	@ (8016594 <tcpip_init+0x88>)
 8016556:	480d      	ldr	r0, [pc, #52]	@ (801658c <tcpip_init+0x80>)
 8016558:	f000 ffd8 	bl	801750c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801655c:	2300      	movs	r3, #0
 801655e:	9300      	str	r3, [sp, #0]
 8016560:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016564:	2200      	movs	r2, #0
 8016566:	490c      	ldr	r1, [pc, #48]	@ (8016598 <tcpip_init+0x8c>)
 8016568:	480c      	ldr	r0, [pc, #48]	@ (801659c <tcpip_init+0x90>)
 801656a:	f7fa fcff 	bl	8010f6c <sys_thread_new>
}
 801656e:	bf00      	nop
 8016570:	3708      	adds	r7, #8
 8016572:	46bd      	mov	sp, r7
 8016574:	bd80      	pop	{r7, pc}
 8016576:	bf00      	nop
 8016578:	24007bc0 	.word	0x24007bc0
 801657c:	24007bc4 	.word	0x24007bc4
 8016580:	24007bc8 	.word	0x24007bc8
 8016584:	0801b22c 	.word	0x0801b22c
 8016588:	0801b2e0 	.word	0x0801b2e0
 801658c:	0801b2a8 	.word	0x0801b2a8
 8016590:	24007bcc 	.word	0x24007bcc
 8016594:	0801b304 	.word	0x0801b304
 8016598:	080162c9 	.word	0x080162c9
 801659c:	0801b328 	.word	0x0801b328

080165a0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b082      	sub	sp, #8
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80165a8:	f7fa fd6e 	bl	8011088 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80165ac:	4b0a      	ldr	r3, [pc, #40]	@ (80165d8 <tcpip_tcp_timer+0x38>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d103      	bne.n	80165bc <tcpip_tcp_timer+0x1c>
 80165b4:	4b09      	ldr	r3, [pc, #36]	@ (80165dc <tcpip_tcp_timer+0x3c>)
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d005      	beq.n	80165c8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80165bc:	2200      	movs	r2, #0
 80165be:	4908      	ldr	r1, [pc, #32]	@ (80165e0 <tcpip_tcp_timer+0x40>)
 80165c0:	20fa      	movs	r0, #250	@ 0xfa
 80165c2:	f000 f8f3 	bl	80167ac <sys_timeout>
 80165c6:	e003      	b.n	80165d0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80165c8:	4b06      	ldr	r3, [pc, #24]	@ (80165e4 <tcpip_tcp_timer+0x44>)
 80165ca:	2200      	movs	r2, #0
 80165cc:	601a      	str	r2, [r3, #0]
  }
}
 80165ce:	bf00      	nop
 80165d0:	bf00      	nop
 80165d2:	3708      	adds	r7, #8
 80165d4:	46bd      	mov	sp, r7
 80165d6:	bd80      	pop	{r7, pc}
 80165d8:	24007b7c 	.word	0x24007b7c
 80165dc:	24007b80 	.word	0x24007b80
 80165e0:	080165a1 	.word	0x080165a1
 80165e4:	24007bd8 	.word	0x24007bd8

080165e8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80165ec:	4b0a      	ldr	r3, [pc, #40]	@ (8016618 <tcp_timer_needed+0x30>)
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d10f      	bne.n	8016614 <tcp_timer_needed+0x2c>
 80165f4:	4b09      	ldr	r3, [pc, #36]	@ (801661c <tcp_timer_needed+0x34>)
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d103      	bne.n	8016604 <tcp_timer_needed+0x1c>
 80165fc:	4b08      	ldr	r3, [pc, #32]	@ (8016620 <tcp_timer_needed+0x38>)
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d007      	beq.n	8016614 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016604:	4b04      	ldr	r3, [pc, #16]	@ (8016618 <tcp_timer_needed+0x30>)
 8016606:	2201      	movs	r2, #1
 8016608:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801660a:	2200      	movs	r2, #0
 801660c:	4905      	ldr	r1, [pc, #20]	@ (8016624 <tcp_timer_needed+0x3c>)
 801660e:	20fa      	movs	r0, #250	@ 0xfa
 8016610:	f000 f8cc 	bl	80167ac <sys_timeout>
  }
}
 8016614:	bf00      	nop
 8016616:	bd80      	pop	{r7, pc}
 8016618:	24007bd8 	.word	0x24007bd8
 801661c:	24007b7c 	.word	0x24007b7c
 8016620:	24007b80 	.word	0x24007b80
 8016624:	080165a1 	.word	0x080165a1

08016628 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b086      	sub	sp, #24
 801662c:	af00      	add	r7, sp, #0
 801662e:	60f8      	str	r0, [r7, #12]
 8016630:	60b9      	str	r1, [r7, #8]
 8016632:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016634:	200a      	movs	r0, #10
 8016636:	f7f9 f885 	bl	800f744 <memp_malloc>
 801663a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801663c:	693b      	ldr	r3, [r7, #16]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d109      	bne.n	8016656 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016642:	693b      	ldr	r3, [r7, #16]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d151      	bne.n	80166ec <sys_timeout_abs+0xc4>
 8016648:	4b2a      	ldr	r3, [pc, #168]	@ (80166f4 <sys_timeout_abs+0xcc>)
 801664a:	22be      	movs	r2, #190	@ 0xbe
 801664c:	492a      	ldr	r1, [pc, #168]	@ (80166f8 <sys_timeout_abs+0xd0>)
 801664e:	482b      	ldr	r0, [pc, #172]	@ (80166fc <sys_timeout_abs+0xd4>)
 8016650:	f000 ff5c 	bl	801750c <iprintf>
    return;
 8016654:	e04a      	b.n	80166ec <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016656:	693b      	ldr	r3, [r7, #16]
 8016658:	2200      	movs	r2, #0
 801665a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801665c:	693b      	ldr	r3, [r7, #16]
 801665e:	68ba      	ldr	r2, [r7, #8]
 8016660:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016662:	693b      	ldr	r3, [r7, #16]
 8016664:	687a      	ldr	r2, [r7, #4]
 8016666:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016668:	693b      	ldr	r3, [r7, #16]
 801666a:	68fa      	ldr	r2, [r7, #12]
 801666c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801666e:	4b24      	ldr	r3, [pc, #144]	@ (8016700 <sys_timeout_abs+0xd8>)
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d103      	bne.n	801667e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016676:	4a22      	ldr	r2, [pc, #136]	@ (8016700 <sys_timeout_abs+0xd8>)
 8016678:	693b      	ldr	r3, [r7, #16]
 801667a:	6013      	str	r3, [r2, #0]
    return;
 801667c:	e037      	b.n	80166ee <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801667e:	693b      	ldr	r3, [r7, #16]
 8016680:	685a      	ldr	r2, [r3, #4]
 8016682:	4b1f      	ldr	r3, [pc, #124]	@ (8016700 <sys_timeout_abs+0xd8>)
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	685b      	ldr	r3, [r3, #4]
 8016688:	1ad3      	subs	r3, r2, r3
 801668a:	0fdb      	lsrs	r3, r3, #31
 801668c:	f003 0301 	and.w	r3, r3, #1
 8016690:	b2db      	uxtb	r3, r3
 8016692:	2b00      	cmp	r3, #0
 8016694:	d007      	beq.n	80166a6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016696:	4b1a      	ldr	r3, [pc, #104]	@ (8016700 <sys_timeout_abs+0xd8>)
 8016698:	681a      	ldr	r2, [r3, #0]
 801669a:	693b      	ldr	r3, [r7, #16]
 801669c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801669e:	4a18      	ldr	r2, [pc, #96]	@ (8016700 <sys_timeout_abs+0xd8>)
 80166a0:	693b      	ldr	r3, [r7, #16]
 80166a2:	6013      	str	r3, [r2, #0]
 80166a4:	e023      	b.n	80166ee <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80166a6:	4b16      	ldr	r3, [pc, #88]	@ (8016700 <sys_timeout_abs+0xd8>)
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	617b      	str	r3, [r7, #20]
 80166ac:	e01a      	b.n	80166e4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80166ae:	697b      	ldr	r3, [r7, #20]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d00b      	beq.n	80166ce <sys_timeout_abs+0xa6>
 80166b6:	693b      	ldr	r3, [r7, #16]
 80166b8:	685a      	ldr	r2, [r3, #4]
 80166ba:	697b      	ldr	r3, [r7, #20]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	685b      	ldr	r3, [r3, #4]
 80166c0:	1ad3      	subs	r3, r2, r3
 80166c2:	0fdb      	lsrs	r3, r3, #31
 80166c4:	f003 0301 	and.w	r3, r3, #1
 80166c8:	b2db      	uxtb	r3, r3
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d007      	beq.n	80166de <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80166ce:	697b      	ldr	r3, [r7, #20]
 80166d0:	681a      	ldr	r2, [r3, #0]
 80166d2:	693b      	ldr	r3, [r7, #16]
 80166d4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80166d6:	697b      	ldr	r3, [r7, #20]
 80166d8:	693a      	ldr	r2, [r7, #16]
 80166da:	601a      	str	r2, [r3, #0]
        break;
 80166dc:	e007      	b.n	80166ee <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80166de:	697b      	ldr	r3, [r7, #20]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	617b      	str	r3, [r7, #20]
 80166e4:	697b      	ldr	r3, [r7, #20]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d1e1      	bne.n	80166ae <sys_timeout_abs+0x86>
 80166ea:	e000      	b.n	80166ee <sys_timeout_abs+0xc6>
    return;
 80166ec:	bf00      	nop
      }
    }
  }
}
 80166ee:	3718      	adds	r7, #24
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}
 80166f4:	0801b338 	.word	0x0801b338
 80166f8:	0801b398 	.word	0x0801b398
 80166fc:	0801b3d8 	.word	0x0801b3d8
 8016700:	24007bd0 	.word	0x24007bd0

08016704 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b086      	sub	sp, #24
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016710:	697b      	ldr	r3, [r7, #20]
 8016712:	685b      	ldr	r3, [r3, #4]
 8016714:	4798      	blx	r3

  now = sys_now();
 8016716:	f7f0 fb53 	bl	8006dc0 <sys_now>
 801671a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801671c:	697b      	ldr	r3, [r7, #20]
 801671e:	681a      	ldr	r2, [r3, #0]
 8016720:	4b0f      	ldr	r3, [pc, #60]	@ (8016760 <lwip_cyclic_timer+0x5c>)
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	4413      	add	r3, r2
 8016726:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016728:	68fa      	ldr	r2, [r7, #12]
 801672a:	693b      	ldr	r3, [r7, #16]
 801672c:	1ad3      	subs	r3, r2, r3
 801672e:	0fdb      	lsrs	r3, r3, #31
 8016730:	f003 0301 	and.w	r3, r3, #1
 8016734:	b2db      	uxtb	r3, r3
 8016736:	2b00      	cmp	r3, #0
 8016738:	d009      	beq.n	801674e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801673a:	697b      	ldr	r3, [r7, #20]
 801673c:	681a      	ldr	r2, [r3, #0]
 801673e:	693b      	ldr	r3, [r7, #16]
 8016740:	4413      	add	r3, r2
 8016742:	687a      	ldr	r2, [r7, #4]
 8016744:	4907      	ldr	r1, [pc, #28]	@ (8016764 <lwip_cyclic_timer+0x60>)
 8016746:	4618      	mov	r0, r3
 8016748:	f7ff ff6e 	bl	8016628 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801674c:	e004      	b.n	8016758 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801674e:	687a      	ldr	r2, [r7, #4]
 8016750:	4904      	ldr	r1, [pc, #16]	@ (8016764 <lwip_cyclic_timer+0x60>)
 8016752:	68f8      	ldr	r0, [r7, #12]
 8016754:	f7ff ff68 	bl	8016628 <sys_timeout_abs>
}
 8016758:	bf00      	nop
 801675a:	3718      	adds	r7, #24
 801675c:	46bd      	mov	sp, r7
 801675e:	bd80      	pop	{r7, pc}
 8016760:	24007bd4 	.word	0x24007bd4
 8016764:	08016705 	.word	0x08016705

08016768 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b082      	sub	sp, #8
 801676c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801676e:	2301      	movs	r3, #1
 8016770:	607b      	str	r3, [r7, #4]
 8016772:	e00e      	b.n	8016792 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016774:	4a0b      	ldr	r2, [pc, #44]	@ (80167a4 <sys_timeouts_init+0x3c>)
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	00db      	lsls	r3, r3, #3
 8016780:	4a08      	ldr	r2, [pc, #32]	@ (80167a4 <sys_timeouts_init+0x3c>)
 8016782:	4413      	add	r3, r2
 8016784:	461a      	mov	r2, r3
 8016786:	4908      	ldr	r1, [pc, #32]	@ (80167a8 <sys_timeouts_init+0x40>)
 8016788:	f000 f810 	bl	80167ac <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	3301      	adds	r3, #1
 8016790:	607b      	str	r3, [r7, #4]
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	2b05      	cmp	r3, #5
 8016796:	d9ed      	bls.n	8016774 <sys_timeouts_init+0xc>
  }
}
 8016798:	bf00      	nop
 801679a:	bf00      	nop
 801679c:	3708      	adds	r7, #8
 801679e:	46bd      	mov	sp, r7
 80167a0:	bd80      	pop	{r7, pc}
 80167a2:	bf00      	nop
 80167a4:	0801b944 	.word	0x0801b944
 80167a8:	08016705 	.word	0x08016705

080167ac <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b086      	sub	sp, #24
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	60f8      	str	r0, [r7, #12]
 80167b4:	60b9      	str	r1, [r7, #8]
 80167b6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80167be:	d306      	bcc.n	80167ce <sys_timeout+0x22>
 80167c0:	4b0a      	ldr	r3, [pc, #40]	@ (80167ec <sys_timeout+0x40>)
 80167c2:	f240 1229 	movw	r2, #297	@ 0x129
 80167c6:	490a      	ldr	r1, [pc, #40]	@ (80167f0 <sys_timeout+0x44>)
 80167c8:	480a      	ldr	r0, [pc, #40]	@ (80167f4 <sys_timeout+0x48>)
 80167ca:	f000 fe9f 	bl	801750c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80167ce:	f7f0 faf7 	bl	8006dc0 <sys_now>
 80167d2:	4602      	mov	r2, r0
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	4413      	add	r3, r2
 80167d8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80167da:	687a      	ldr	r2, [r7, #4]
 80167dc:	68b9      	ldr	r1, [r7, #8]
 80167de:	6978      	ldr	r0, [r7, #20]
 80167e0:	f7ff ff22 	bl	8016628 <sys_timeout_abs>
#endif
}
 80167e4:	bf00      	nop
 80167e6:	3718      	adds	r7, #24
 80167e8:	46bd      	mov	sp, r7
 80167ea:	bd80      	pop	{r7, pc}
 80167ec:	0801b338 	.word	0x0801b338
 80167f0:	0801b400 	.word	0x0801b400
 80167f4:	0801b3d8 	.word	0x0801b3d8

080167f8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b084      	sub	sp, #16
 80167fc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80167fe:	f7f0 fadf 	bl	8006dc0 <sys_now>
 8016802:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016804:	4b17      	ldr	r3, [pc, #92]	@ (8016864 <sys_check_timeouts+0x6c>)
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801680a:	68bb      	ldr	r3, [r7, #8]
 801680c:	2b00      	cmp	r3, #0
 801680e:	d022      	beq.n	8016856 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8016810:	68bb      	ldr	r3, [r7, #8]
 8016812:	685b      	ldr	r3, [r3, #4]
 8016814:	68fa      	ldr	r2, [r7, #12]
 8016816:	1ad3      	subs	r3, r2, r3
 8016818:	0fdb      	lsrs	r3, r3, #31
 801681a:	f003 0301 	and.w	r3, r3, #1
 801681e:	b2db      	uxtb	r3, r3
 8016820:	2b00      	cmp	r3, #0
 8016822:	d11a      	bne.n	801685a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016824:	68bb      	ldr	r3, [r7, #8]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	4a0e      	ldr	r2, [pc, #56]	@ (8016864 <sys_check_timeouts+0x6c>)
 801682a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801682c:	68bb      	ldr	r3, [r7, #8]
 801682e:	689b      	ldr	r3, [r3, #8]
 8016830:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8016832:	68bb      	ldr	r3, [r7, #8]
 8016834:	68db      	ldr	r3, [r3, #12]
 8016836:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016838:	68bb      	ldr	r3, [r7, #8]
 801683a:	685b      	ldr	r3, [r3, #4]
 801683c:	4a0a      	ldr	r2, [pc, #40]	@ (8016868 <sys_check_timeouts+0x70>)
 801683e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016840:	68b9      	ldr	r1, [r7, #8]
 8016842:	200a      	movs	r0, #10
 8016844:	f7f8 fff4 	bl	800f830 <memp_free>
    if (handler != NULL) {
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d0da      	beq.n	8016804 <sys_check_timeouts+0xc>
      handler(arg);
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	6838      	ldr	r0, [r7, #0]
 8016852:	4798      	blx	r3
  do {
 8016854:	e7d6      	b.n	8016804 <sys_check_timeouts+0xc>
      return;
 8016856:	bf00      	nop
 8016858:	e000      	b.n	801685c <sys_check_timeouts+0x64>
      return;
 801685a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801685c:	3710      	adds	r7, #16
 801685e:	46bd      	mov	sp, r7
 8016860:	bd80      	pop	{r7, pc}
 8016862:	bf00      	nop
 8016864:	24007bd0 	.word	0x24007bd0
 8016868:	24007bd4 	.word	0x24007bd4

0801686c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b082      	sub	sp, #8
 8016870:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016872:	4b16      	ldr	r3, [pc, #88]	@ (80168cc <sys_timeouts_sleeptime+0x60>)
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d102      	bne.n	8016880 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801687a:	f04f 33ff 	mov.w	r3, #4294967295
 801687e:	e020      	b.n	80168c2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016880:	f7f0 fa9e 	bl	8006dc0 <sys_now>
 8016884:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016886:	4b11      	ldr	r3, [pc, #68]	@ (80168cc <sys_timeouts_sleeptime+0x60>)
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	685a      	ldr	r2, [r3, #4]
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	1ad3      	subs	r3, r2, r3
 8016890:	0fdb      	lsrs	r3, r3, #31
 8016892:	f003 0301 	and.w	r3, r3, #1
 8016896:	b2db      	uxtb	r3, r3
 8016898:	2b00      	cmp	r3, #0
 801689a:	d001      	beq.n	80168a0 <sys_timeouts_sleeptime+0x34>
    return 0;
 801689c:	2300      	movs	r3, #0
 801689e:	e010      	b.n	80168c2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80168a0:	4b0a      	ldr	r3, [pc, #40]	@ (80168cc <sys_timeouts_sleeptime+0x60>)
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	685a      	ldr	r2, [r3, #4]
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	1ad3      	subs	r3, r2, r3
 80168aa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80168ac:	683b      	ldr	r3, [r7, #0]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	da06      	bge.n	80168c0 <sys_timeouts_sleeptime+0x54>
 80168b2:	4b07      	ldr	r3, [pc, #28]	@ (80168d0 <sys_timeouts_sleeptime+0x64>)
 80168b4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80168b8:	4906      	ldr	r1, [pc, #24]	@ (80168d4 <sys_timeouts_sleeptime+0x68>)
 80168ba:	4807      	ldr	r0, [pc, #28]	@ (80168d8 <sys_timeouts_sleeptime+0x6c>)
 80168bc:	f000 fe26 	bl	801750c <iprintf>
    return ret;
 80168c0:	683b      	ldr	r3, [r7, #0]
  }
}
 80168c2:	4618      	mov	r0, r3
 80168c4:	3708      	adds	r7, #8
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd80      	pop	{r7, pc}
 80168ca:	bf00      	nop
 80168cc:	24007bd0 	.word	0x24007bd0
 80168d0:	0801b338 	.word	0x0801b338
 80168d4:	0801b438 	.word	0x0801b438
 80168d8:	0801b3d8 	.word	0x0801b3d8

080168dc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80168e0:	f000 fd14 	bl	801730c <rand>
 80168e4:	4603      	mov	r3, r0
 80168e6:	b29b      	uxth	r3, r3
 80168e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80168ec:	b29b      	uxth	r3, r3
 80168ee:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80168f2:	b29a      	uxth	r2, r3
 80168f4:	4b01      	ldr	r3, [pc, #4]	@ (80168fc <udp_init+0x20>)
 80168f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80168f8:	bf00      	nop
 80168fa:	bd80      	pop	{r7, pc}
 80168fc:	24000050 	.word	0x24000050

08016900 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016900:	b480      	push	{r7}
 8016902:	b083      	sub	sp, #12
 8016904:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016906:	2300      	movs	r3, #0
 8016908:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801690a:	4b17      	ldr	r3, [pc, #92]	@ (8016968 <udp_new_port+0x68>)
 801690c:	881b      	ldrh	r3, [r3, #0]
 801690e:	1c5a      	adds	r2, r3, #1
 8016910:	b291      	uxth	r1, r2
 8016912:	4a15      	ldr	r2, [pc, #84]	@ (8016968 <udp_new_port+0x68>)
 8016914:	8011      	strh	r1, [r2, #0]
 8016916:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801691a:	4293      	cmp	r3, r2
 801691c:	d103      	bne.n	8016926 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801691e:	4b12      	ldr	r3, [pc, #72]	@ (8016968 <udp_new_port+0x68>)
 8016920:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8016924:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016926:	4b11      	ldr	r3, [pc, #68]	@ (801696c <udp_new_port+0x6c>)
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	603b      	str	r3, [r7, #0]
 801692c:	e011      	b.n	8016952 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801692e:	683b      	ldr	r3, [r7, #0]
 8016930:	8a5a      	ldrh	r2, [r3, #18]
 8016932:	4b0d      	ldr	r3, [pc, #52]	@ (8016968 <udp_new_port+0x68>)
 8016934:	881b      	ldrh	r3, [r3, #0]
 8016936:	429a      	cmp	r2, r3
 8016938:	d108      	bne.n	801694c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801693a:	88fb      	ldrh	r3, [r7, #6]
 801693c:	3301      	adds	r3, #1
 801693e:	80fb      	strh	r3, [r7, #6]
 8016940:	88fb      	ldrh	r3, [r7, #6]
 8016942:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016946:	d3e0      	bcc.n	801690a <udp_new_port+0xa>
        return 0;
 8016948:	2300      	movs	r3, #0
 801694a:	e007      	b.n	801695c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801694c:	683b      	ldr	r3, [r7, #0]
 801694e:	68db      	ldr	r3, [r3, #12]
 8016950:	603b      	str	r3, [r7, #0]
 8016952:	683b      	ldr	r3, [r7, #0]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d1ea      	bne.n	801692e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016958:	4b03      	ldr	r3, [pc, #12]	@ (8016968 <udp_new_port+0x68>)
 801695a:	881b      	ldrh	r3, [r3, #0]
}
 801695c:	4618      	mov	r0, r3
 801695e:	370c      	adds	r7, #12
 8016960:	46bd      	mov	sp, r7
 8016962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016966:	4770      	bx	lr
 8016968:	24000050 	.word	0x24000050
 801696c:	24007bdc 	.word	0x24007bdc

08016970 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b084      	sub	sp, #16
 8016974:	af00      	add	r7, sp, #0
 8016976:	60f8      	str	r0, [r7, #12]
 8016978:	60b9      	str	r1, [r7, #8]
 801697a:	4613      	mov	r3, r2
 801697c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d105      	bne.n	8016990 <udp_input_local_match+0x20>
 8016984:	4b27      	ldr	r3, [pc, #156]	@ (8016a24 <udp_input_local_match+0xb4>)
 8016986:	2287      	movs	r2, #135	@ 0x87
 8016988:	4927      	ldr	r1, [pc, #156]	@ (8016a28 <udp_input_local_match+0xb8>)
 801698a:	4828      	ldr	r0, [pc, #160]	@ (8016a2c <udp_input_local_match+0xbc>)
 801698c:	f000 fdbe 	bl	801750c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016990:	68bb      	ldr	r3, [r7, #8]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d105      	bne.n	80169a2 <udp_input_local_match+0x32>
 8016996:	4b23      	ldr	r3, [pc, #140]	@ (8016a24 <udp_input_local_match+0xb4>)
 8016998:	2288      	movs	r2, #136	@ 0x88
 801699a:	4925      	ldr	r1, [pc, #148]	@ (8016a30 <udp_input_local_match+0xc0>)
 801699c:	4823      	ldr	r0, [pc, #140]	@ (8016a2c <udp_input_local_match+0xbc>)
 801699e:	f000 fdb5 	bl	801750c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	7a1b      	ldrb	r3, [r3, #8]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d00b      	beq.n	80169c2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	7a1a      	ldrb	r2, [r3, #8]
 80169ae:	4b21      	ldr	r3, [pc, #132]	@ (8016a34 <udp_input_local_match+0xc4>)
 80169b0:	685b      	ldr	r3, [r3, #4]
 80169b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80169b6:	3301      	adds	r3, #1
 80169b8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80169ba:	429a      	cmp	r2, r3
 80169bc:	d001      	beq.n	80169c2 <udp_input_local_match+0x52>
    return 0;
 80169be:	2300      	movs	r3, #0
 80169c0:	e02b      	b.n	8016a1a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80169c2:	79fb      	ldrb	r3, [r7, #7]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d018      	beq.n	80169fa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d013      	beq.n	80169f6 <udp_input_local_match+0x86>
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d00f      	beq.n	80169f6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80169d6:	4b17      	ldr	r3, [pc, #92]	@ (8016a34 <udp_input_local_match+0xc4>)
 80169d8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80169da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169de:	d00a      	beq.n	80169f6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	681a      	ldr	r2, [r3, #0]
 80169e4:	4b13      	ldr	r3, [pc, #76]	@ (8016a34 <udp_input_local_match+0xc4>)
 80169e6:	695b      	ldr	r3, [r3, #20]
 80169e8:	405a      	eors	r2, r3
 80169ea:	68bb      	ldr	r3, [r7, #8]
 80169ec:	3308      	adds	r3, #8
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d110      	bne.n	8016a18 <udp_input_local_match+0xa8>
          return 1;
 80169f6:	2301      	movs	r3, #1
 80169f8:	e00f      	b.n	8016a1a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d009      	beq.n	8016a14 <udp_input_local_match+0xa4>
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d005      	beq.n	8016a14 <udp_input_local_match+0xa4>
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	681a      	ldr	r2, [r3, #0]
 8016a0c:	4b09      	ldr	r3, [pc, #36]	@ (8016a34 <udp_input_local_match+0xc4>)
 8016a0e:	695b      	ldr	r3, [r3, #20]
 8016a10:	429a      	cmp	r2, r3
 8016a12:	d101      	bne.n	8016a18 <udp_input_local_match+0xa8>
        return 1;
 8016a14:	2301      	movs	r3, #1
 8016a16:	e000      	b.n	8016a1a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016a18:	2300      	movs	r3, #0
}
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	3710      	adds	r7, #16
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	bd80      	pop	{r7, pc}
 8016a22:	bf00      	nop
 8016a24:	0801b44c 	.word	0x0801b44c
 8016a28:	0801b4a8 	.word	0x0801b4a8
 8016a2c:	0801b4cc 	.word	0x0801b4cc
 8016a30:	0801b4f4 	.word	0x0801b4f4
 8016a34:	240048e4 	.word	0x240048e4

08016a38 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016a38:	b590      	push	{r4, r7, lr}
 8016a3a:	b08d      	sub	sp, #52	@ 0x34
 8016a3c:	af02      	add	r7, sp, #8
 8016a3e:	6078      	str	r0, [r7, #4]
 8016a40:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016a42:	2300      	movs	r3, #0
 8016a44:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d105      	bne.n	8016a58 <udp_input+0x20>
 8016a4c:	4b7c      	ldr	r3, [pc, #496]	@ (8016c40 <udp_input+0x208>)
 8016a4e:	22cf      	movs	r2, #207	@ 0xcf
 8016a50:	497c      	ldr	r1, [pc, #496]	@ (8016c44 <udp_input+0x20c>)
 8016a52:	487d      	ldr	r0, [pc, #500]	@ (8016c48 <udp_input+0x210>)
 8016a54:	f000 fd5a 	bl	801750c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016a58:	683b      	ldr	r3, [r7, #0]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d105      	bne.n	8016a6a <udp_input+0x32>
 8016a5e:	4b78      	ldr	r3, [pc, #480]	@ (8016c40 <udp_input+0x208>)
 8016a60:	22d0      	movs	r2, #208	@ 0xd0
 8016a62:	497a      	ldr	r1, [pc, #488]	@ (8016c4c <udp_input+0x214>)
 8016a64:	4878      	ldr	r0, [pc, #480]	@ (8016c48 <udp_input+0x210>)
 8016a66:	f000 fd51 	bl	801750c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	895b      	ldrh	r3, [r3, #10]
 8016a6e:	2b07      	cmp	r3, #7
 8016a70:	d803      	bhi.n	8016a7a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016a72:	6878      	ldr	r0, [r7, #4]
 8016a74:	f7f9 fda4 	bl	80105c0 <pbuf_free>
    goto end;
 8016a78:	e0de      	b.n	8016c38 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	685b      	ldr	r3, [r3, #4]
 8016a7e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016a80:	4b73      	ldr	r3, [pc, #460]	@ (8016c50 <udp_input+0x218>)
 8016a82:	695b      	ldr	r3, [r3, #20]
 8016a84:	4a72      	ldr	r2, [pc, #456]	@ (8016c50 <udp_input+0x218>)
 8016a86:	6812      	ldr	r2, [r2, #0]
 8016a88:	4611      	mov	r1, r2
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	f7f7 face 	bl	800e02c <ip4_addr_isbroadcast_u32>
 8016a90:	4603      	mov	r3, r0
 8016a92:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016a94:	697b      	ldr	r3, [r7, #20]
 8016a96:	881b      	ldrh	r3, [r3, #0]
 8016a98:	b29b      	uxth	r3, r3
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	f7f3 fb66 	bl	800a16c <lwip_htons>
 8016aa0:	4603      	mov	r3, r0
 8016aa2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016aa4:	697b      	ldr	r3, [r7, #20]
 8016aa6:	885b      	ldrh	r3, [r3, #2]
 8016aa8:	b29b      	uxth	r3, r3
 8016aaa:	4618      	mov	r0, r3
 8016aac:	f7f3 fb5e 	bl	800a16c <lwip_htons>
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8016ab8:	2300      	movs	r3, #0
 8016aba:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016abc:	2300      	movs	r3, #0
 8016abe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ac0:	4b64      	ldr	r3, [pc, #400]	@ (8016c54 <udp_input+0x21c>)
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8016ac6:	e054      	b.n	8016b72 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aca:	8a5b      	ldrh	r3, [r3, #18]
 8016acc:	89fa      	ldrh	r2, [r7, #14]
 8016ace:	429a      	cmp	r2, r3
 8016ad0:	d14a      	bne.n	8016b68 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016ad2:	7cfb      	ldrb	r3, [r7, #19]
 8016ad4:	461a      	mov	r2, r3
 8016ad6:	6839      	ldr	r1, [r7, #0]
 8016ad8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016ada:	f7ff ff49 	bl	8016970 <udp_input_local_match>
 8016ade:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d041      	beq.n	8016b68 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ae6:	7c1b      	ldrb	r3, [r3, #16]
 8016ae8:	f003 0304 	and.w	r3, r3, #4
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d11d      	bne.n	8016b2c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016af0:	69fb      	ldr	r3, [r7, #28]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d102      	bne.n	8016afc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016af8:	61fb      	str	r3, [r7, #28]
 8016afa:	e017      	b.n	8016b2c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016afc:	7cfb      	ldrb	r3, [r7, #19]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d014      	beq.n	8016b2c <udp_input+0xf4>
 8016b02:	4b53      	ldr	r3, [pc, #332]	@ (8016c50 <udp_input+0x218>)
 8016b04:	695b      	ldr	r3, [r3, #20]
 8016b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b0a:	d10f      	bne.n	8016b2c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016b0c:	69fb      	ldr	r3, [r7, #28]
 8016b0e:	681a      	ldr	r2, [r3, #0]
 8016b10:	683b      	ldr	r3, [r7, #0]
 8016b12:	3304      	adds	r3, #4
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	429a      	cmp	r2, r3
 8016b18:	d008      	beq.n	8016b2c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b1c:	681a      	ldr	r2, [r3, #0]
 8016b1e:	683b      	ldr	r3, [r7, #0]
 8016b20:	3304      	adds	r3, #4
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	429a      	cmp	r2, r3
 8016b26:	d101      	bne.n	8016b2c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b2a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b2e:	8a9b      	ldrh	r3, [r3, #20]
 8016b30:	8a3a      	ldrh	r2, [r7, #16]
 8016b32:	429a      	cmp	r2, r3
 8016b34:	d118      	bne.n	8016b68 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b38:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d005      	beq.n	8016b4a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b40:	685a      	ldr	r2, [r3, #4]
 8016b42:	4b43      	ldr	r3, [pc, #268]	@ (8016c50 <udp_input+0x218>)
 8016b44:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016b46:	429a      	cmp	r2, r3
 8016b48:	d10e      	bne.n	8016b68 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016b4a:	6a3b      	ldr	r3, [r7, #32]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d014      	beq.n	8016b7a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b52:	68da      	ldr	r2, [r3, #12]
 8016b54:	6a3b      	ldr	r3, [r7, #32]
 8016b56:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016b58:	4b3e      	ldr	r3, [pc, #248]	@ (8016c54 <udp_input+0x21c>)
 8016b5a:	681a      	ldr	r2, [r3, #0]
 8016b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b5e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016b60:	4a3c      	ldr	r2, [pc, #240]	@ (8016c54 <udp_input+0x21c>)
 8016b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b64:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016b66:	e008      	b.n	8016b7a <udp_input+0x142>
      }
    }

    prev = pcb;
 8016b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b6a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b6e:	68db      	ldr	r3, [r3, #12]
 8016b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8016b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d1a7      	bne.n	8016ac8 <udp_input+0x90>
 8016b78:	e000      	b.n	8016b7c <udp_input+0x144>
        break;
 8016b7a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d101      	bne.n	8016b86 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016b82:	69fb      	ldr	r3, [r7, #28]
 8016b84:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d002      	beq.n	8016b92 <udp_input+0x15a>
    for_us = 1;
 8016b8c:	2301      	movs	r3, #1
 8016b8e:	76fb      	strb	r3, [r7, #27]
 8016b90:	e00a      	b.n	8016ba8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016b92:	683b      	ldr	r3, [r7, #0]
 8016b94:	3304      	adds	r3, #4
 8016b96:	681a      	ldr	r2, [r3, #0]
 8016b98:	4b2d      	ldr	r3, [pc, #180]	@ (8016c50 <udp_input+0x218>)
 8016b9a:	695b      	ldr	r3, [r3, #20]
 8016b9c:	429a      	cmp	r2, r3
 8016b9e:	bf0c      	ite	eq
 8016ba0:	2301      	moveq	r3, #1
 8016ba2:	2300      	movne	r3, #0
 8016ba4:	b2db      	uxtb	r3, r3
 8016ba6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016ba8:	7efb      	ldrb	r3, [r7, #27]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d041      	beq.n	8016c32 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016bae:	2108      	movs	r1, #8
 8016bb0:	6878      	ldr	r0, [r7, #4]
 8016bb2:	f7f9 fc7f 	bl	80104b4 <pbuf_remove_header>
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d00a      	beq.n	8016bd2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016bbc:	4b20      	ldr	r3, [pc, #128]	@ (8016c40 <udp_input+0x208>)
 8016bbe:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8016bc2:	4925      	ldr	r1, [pc, #148]	@ (8016c58 <udp_input+0x220>)
 8016bc4:	4820      	ldr	r0, [pc, #128]	@ (8016c48 <udp_input+0x210>)
 8016bc6:	f000 fca1 	bl	801750c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016bca:	6878      	ldr	r0, [r7, #4]
 8016bcc:	f7f9 fcf8 	bl	80105c0 <pbuf_free>
      goto end;
 8016bd0:	e032      	b.n	8016c38 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d012      	beq.n	8016bfe <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bda:	699b      	ldr	r3, [r3, #24]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d00a      	beq.n	8016bf6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016be2:	699c      	ldr	r4, [r3, #24]
 8016be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016be6:	69d8      	ldr	r0, [r3, #28]
 8016be8:	8a3b      	ldrh	r3, [r7, #16]
 8016bea:	9300      	str	r3, [sp, #0]
 8016bec:	4b1b      	ldr	r3, [pc, #108]	@ (8016c5c <udp_input+0x224>)
 8016bee:	687a      	ldr	r2, [r7, #4]
 8016bf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016bf2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016bf4:	e021      	b.n	8016c3a <udp_input+0x202>
        pbuf_free(p);
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f7f9 fce2 	bl	80105c0 <pbuf_free>
        goto end;
 8016bfc:	e01c      	b.n	8016c38 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016bfe:	7cfb      	ldrb	r3, [r7, #19]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d112      	bne.n	8016c2a <udp_input+0x1f2>
 8016c04:	4b12      	ldr	r3, [pc, #72]	@ (8016c50 <udp_input+0x218>)
 8016c06:	695b      	ldr	r3, [r3, #20]
 8016c08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016c0c:	2be0      	cmp	r3, #224	@ 0xe0
 8016c0e:	d00c      	beq.n	8016c2a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016c10:	4b0f      	ldr	r3, [pc, #60]	@ (8016c50 <udp_input+0x218>)
 8016c12:	899b      	ldrh	r3, [r3, #12]
 8016c14:	3308      	adds	r3, #8
 8016c16:	b29b      	uxth	r3, r3
 8016c18:	b21b      	sxth	r3, r3
 8016c1a:	4619      	mov	r1, r3
 8016c1c:	6878      	ldr	r0, [r7, #4]
 8016c1e:	f7f9 fcbc 	bl	801059a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016c22:	2103      	movs	r1, #3
 8016c24:	6878      	ldr	r0, [r7, #4]
 8016c26:	f7f6 fde3 	bl	800d7f0 <icmp_dest_unreach>
      pbuf_free(p);
 8016c2a:	6878      	ldr	r0, [r7, #4]
 8016c2c:	f7f9 fcc8 	bl	80105c0 <pbuf_free>
  return;
 8016c30:	e003      	b.n	8016c3a <udp_input+0x202>
    pbuf_free(p);
 8016c32:	6878      	ldr	r0, [r7, #4]
 8016c34:	f7f9 fcc4 	bl	80105c0 <pbuf_free>
  return;
 8016c38:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016c3a:	372c      	adds	r7, #44	@ 0x2c
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	bd90      	pop	{r4, r7, pc}
 8016c40:	0801b44c 	.word	0x0801b44c
 8016c44:	0801b51c 	.word	0x0801b51c
 8016c48:	0801b4cc 	.word	0x0801b4cc
 8016c4c:	0801b534 	.word	0x0801b534
 8016c50:	240048e4 	.word	0x240048e4
 8016c54:	24007bdc 	.word	0x24007bdc
 8016c58:	0801b550 	.word	0x0801b550
 8016c5c:	240048f4 	.word	0x240048f4

08016c60 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b088      	sub	sp, #32
 8016c64:	af02      	add	r7, sp, #8
 8016c66:	60f8      	str	r0, [r7, #12]
 8016c68:	60b9      	str	r1, [r7, #8]
 8016c6a:	607a      	str	r2, [r7, #4]
 8016c6c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d109      	bne.n	8016c88 <udp_sendto+0x28>
 8016c74:	4b23      	ldr	r3, [pc, #140]	@ (8016d04 <udp_sendto+0xa4>)
 8016c76:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8016c7a:	4923      	ldr	r1, [pc, #140]	@ (8016d08 <udp_sendto+0xa8>)
 8016c7c:	4823      	ldr	r0, [pc, #140]	@ (8016d0c <udp_sendto+0xac>)
 8016c7e:	f000 fc45 	bl	801750c <iprintf>
 8016c82:	f06f 030f 	mvn.w	r3, #15
 8016c86:	e038      	b.n	8016cfa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8016c88:	68bb      	ldr	r3, [r7, #8]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d109      	bne.n	8016ca2 <udp_sendto+0x42>
 8016c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8016d04 <udp_sendto+0xa4>)
 8016c90:	f240 2219 	movw	r2, #537	@ 0x219
 8016c94:	491e      	ldr	r1, [pc, #120]	@ (8016d10 <udp_sendto+0xb0>)
 8016c96:	481d      	ldr	r0, [pc, #116]	@ (8016d0c <udp_sendto+0xac>)
 8016c98:	f000 fc38 	bl	801750c <iprintf>
 8016c9c:	f06f 030f 	mvn.w	r3, #15
 8016ca0:	e02b      	b.n	8016cfa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d109      	bne.n	8016cbc <udp_sendto+0x5c>
 8016ca8:	4b16      	ldr	r3, [pc, #88]	@ (8016d04 <udp_sendto+0xa4>)
 8016caa:	f240 221a 	movw	r2, #538	@ 0x21a
 8016cae:	4919      	ldr	r1, [pc, #100]	@ (8016d14 <udp_sendto+0xb4>)
 8016cb0:	4816      	ldr	r0, [pc, #88]	@ (8016d0c <udp_sendto+0xac>)
 8016cb2:	f000 fc2b 	bl	801750c <iprintf>
 8016cb6:	f06f 030f 	mvn.w	r3, #15
 8016cba:	e01e      	b.n	8016cfa <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	7a1b      	ldrb	r3, [r3, #8]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d006      	beq.n	8016cd2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	7a1b      	ldrb	r3, [r3, #8]
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f7f9 f8ed 	bl	800fea8 <netif_get_by_index>
 8016cce:	6178      	str	r0, [r7, #20]
 8016cd0:	e003      	b.n	8016cda <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8016cd2:	6878      	ldr	r0, [r7, #4]
 8016cd4:	f7f6 fef6 	bl	800dac4 <ip4_route>
 8016cd8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8016cda:	697b      	ldr	r3, [r7, #20]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d102      	bne.n	8016ce6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8016ce0:	f06f 0303 	mvn.w	r3, #3
 8016ce4:	e009      	b.n	8016cfa <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8016ce6:	887a      	ldrh	r2, [r7, #2]
 8016ce8:	697b      	ldr	r3, [r7, #20]
 8016cea:	9300      	str	r3, [sp, #0]
 8016cec:	4613      	mov	r3, r2
 8016cee:	687a      	ldr	r2, [r7, #4]
 8016cf0:	68b9      	ldr	r1, [r7, #8]
 8016cf2:	68f8      	ldr	r0, [r7, #12]
 8016cf4:	f000 f810 	bl	8016d18 <udp_sendto_if>
 8016cf8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	3718      	adds	r7, #24
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	bd80      	pop	{r7, pc}
 8016d02:	bf00      	nop
 8016d04:	0801b44c 	.word	0x0801b44c
 8016d08:	0801b59c 	.word	0x0801b59c
 8016d0c:	0801b4cc 	.word	0x0801b4cc
 8016d10:	0801b5b4 	.word	0x0801b5b4
 8016d14:	0801b5d0 	.word	0x0801b5d0

08016d18 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b088      	sub	sp, #32
 8016d1c:	af02      	add	r7, sp, #8
 8016d1e:	60f8      	str	r0, [r7, #12]
 8016d20:	60b9      	str	r1, [r7, #8]
 8016d22:	607a      	str	r2, [r7, #4]
 8016d24:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d109      	bne.n	8016d40 <udp_sendto_if+0x28>
 8016d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8016de8 <udp_sendto_if+0xd0>)
 8016d2e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016d32:	492e      	ldr	r1, [pc, #184]	@ (8016dec <udp_sendto_if+0xd4>)
 8016d34:	482e      	ldr	r0, [pc, #184]	@ (8016df0 <udp_sendto_if+0xd8>)
 8016d36:	f000 fbe9 	bl	801750c <iprintf>
 8016d3a:	f06f 030f 	mvn.w	r3, #15
 8016d3e:	e04f      	b.n	8016de0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016d40:	68bb      	ldr	r3, [r7, #8]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d109      	bne.n	8016d5a <udp_sendto_if+0x42>
 8016d46:	4b28      	ldr	r3, [pc, #160]	@ (8016de8 <udp_sendto_if+0xd0>)
 8016d48:	f240 2281 	movw	r2, #641	@ 0x281
 8016d4c:	4929      	ldr	r1, [pc, #164]	@ (8016df4 <udp_sendto_if+0xdc>)
 8016d4e:	4828      	ldr	r0, [pc, #160]	@ (8016df0 <udp_sendto_if+0xd8>)
 8016d50:	f000 fbdc 	bl	801750c <iprintf>
 8016d54:	f06f 030f 	mvn.w	r3, #15
 8016d58:	e042      	b.n	8016de0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d109      	bne.n	8016d74 <udp_sendto_if+0x5c>
 8016d60:	4b21      	ldr	r3, [pc, #132]	@ (8016de8 <udp_sendto_if+0xd0>)
 8016d62:	f240 2282 	movw	r2, #642	@ 0x282
 8016d66:	4924      	ldr	r1, [pc, #144]	@ (8016df8 <udp_sendto_if+0xe0>)
 8016d68:	4821      	ldr	r0, [pc, #132]	@ (8016df0 <udp_sendto_if+0xd8>)
 8016d6a:	f000 fbcf 	bl	801750c <iprintf>
 8016d6e:	f06f 030f 	mvn.w	r3, #15
 8016d72:	e035      	b.n	8016de0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8016d74:	6a3b      	ldr	r3, [r7, #32]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d109      	bne.n	8016d8e <udp_sendto_if+0x76>
 8016d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8016de8 <udp_sendto_if+0xd0>)
 8016d7c:	f240 2283 	movw	r2, #643	@ 0x283
 8016d80:	491e      	ldr	r1, [pc, #120]	@ (8016dfc <udp_sendto_if+0xe4>)
 8016d82:	481b      	ldr	r0, [pc, #108]	@ (8016df0 <udp_sendto_if+0xd8>)
 8016d84:	f000 fbc2 	bl	801750c <iprintf>
 8016d88:	f06f 030f 	mvn.w	r3, #15
 8016d8c:	e028      	b.n	8016de0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d009      	beq.n	8016da8 <udp_sendto_if+0x90>
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d005      	beq.n	8016da8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016da4:	2be0      	cmp	r3, #224	@ 0xe0
 8016da6:	d103      	bne.n	8016db0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8016da8:	6a3b      	ldr	r3, [r7, #32]
 8016daa:	3304      	adds	r3, #4
 8016dac:	617b      	str	r3, [r7, #20]
 8016dae:	e00b      	b.n	8016dc8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	681a      	ldr	r2, [r3, #0]
 8016db4:	6a3b      	ldr	r3, [r7, #32]
 8016db6:	3304      	adds	r3, #4
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	429a      	cmp	r2, r3
 8016dbc:	d002      	beq.n	8016dc4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016dbe:	f06f 0303 	mvn.w	r3, #3
 8016dc2:	e00d      	b.n	8016de0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016dc8:	887a      	ldrh	r2, [r7, #2]
 8016dca:	697b      	ldr	r3, [r7, #20]
 8016dcc:	9301      	str	r3, [sp, #4]
 8016dce:	6a3b      	ldr	r3, [r7, #32]
 8016dd0:	9300      	str	r3, [sp, #0]
 8016dd2:	4613      	mov	r3, r2
 8016dd4:	687a      	ldr	r2, [r7, #4]
 8016dd6:	68b9      	ldr	r1, [r7, #8]
 8016dd8:	68f8      	ldr	r0, [r7, #12]
 8016dda:	f000 f811 	bl	8016e00 <udp_sendto_if_src>
 8016dde:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016de0:	4618      	mov	r0, r3
 8016de2:	3718      	adds	r7, #24
 8016de4:	46bd      	mov	sp, r7
 8016de6:	bd80      	pop	{r7, pc}
 8016de8:	0801b44c 	.word	0x0801b44c
 8016dec:	0801b5ec 	.word	0x0801b5ec
 8016df0:	0801b4cc 	.word	0x0801b4cc
 8016df4:	0801b608 	.word	0x0801b608
 8016df8:	0801b624 	.word	0x0801b624
 8016dfc:	0801b644 	.word	0x0801b644

08016e00 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b08c      	sub	sp, #48	@ 0x30
 8016e04:	af04      	add	r7, sp, #16
 8016e06:	60f8      	str	r0, [r7, #12]
 8016e08:	60b9      	str	r1, [r7, #8]
 8016e0a:	607a      	str	r2, [r7, #4]
 8016e0c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d109      	bne.n	8016e28 <udp_sendto_if_src+0x28>
 8016e14:	4b65      	ldr	r3, [pc, #404]	@ (8016fac <udp_sendto_if_src+0x1ac>)
 8016e16:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8016e1a:	4965      	ldr	r1, [pc, #404]	@ (8016fb0 <udp_sendto_if_src+0x1b0>)
 8016e1c:	4865      	ldr	r0, [pc, #404]	@ (8016fb4 <udp_sendto_if_src+0x1b4>)
 8016e1e:	f000 fb75 	bl	801750c <iprintf>
 8016e22:	f06f 030f 	mvn.w	r3, #15
 8016e26:	e0bc      	b.n	8016fa2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8016e28:	68bb      	ldr	r3, [r7, #8]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d109      	bne.n	8016e42 <udp_sendto_if_src+0x42>
 8016e2e:	4b5f      	ldr	r3, [pc, #380]	@ (8016fac <udp_sendto_if_src+0x1ac>)
 8016e30:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8016e34:	4960      	ldr	r1, [pc, #384]	@ (8016fb8 <udp_sendto_if_src+0x1b8>)
 8016e36:	485f      	ldr	r0, [pc, #380]	@ (8016fb4 <udp_sendto_if_src+0x1b4>)
 8016e38:	f000 fb68 	bl	801750c <iprintf>
 8016e3c:	f06f 030f 	mvn.w	r3, #15
 8016e40:	e0af      	b.n	8016fa2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d109      	bne.n	8016e5c <udp_sendto_if_src+0x5c>
 8016e48:	4b58      	ldr	r3, [pc, #352]	@ (8016fac <udp_sendto_if_src+0x1ac>)
 8016e4a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8016e4e:	495b      	ldr	r1, [pc, #364]	@ (8016fbc <udp_sendto_if_src+0x1bc>)
 8016e50:	4858      	ldr	r0, [pc, #352]	@ (8016fb4 <udp_sendto_if_src+0x1b4>)
 8016e52:	f000 fb5b 	bl	801750c <iprintf>
 8016e56:	f06f 030f 	mvn.w	r3, #15
 8016e5a:	e0a2      	b.n	8016fa2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8016e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d109      	bne.n	8016e76 <udp_sendto_if_src+0x76>
 8016e62:	4b52      	ldr	r3, [pc, #328]	@ (8016fac <udp_sendto_if_src+0x1ac>)
 8016e64:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8016e68:	4955      	ldr	r1, [pc, #340]	@ (8016fc0 <udp_sendto_if_src+0x1c0>)
 8016e6a:	4852      	ldr	r0, [pc, #328]	@ (8016fb4 <udp_sendto_if_src+0x1b4>)
 8016e6c:	f000 fb4e 	bl	801750c <iprintf>
 8016e70:	f06f 030f 	mvn.w	r3, #15
 8016e74:	e095      	b.n	8016fa2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8016e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d109      	bne.n	8016e90 <udp_sendto_if_src+0x90>
 8016e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8016fac <udp_sendto_if_src+0x1ac>)
 8016e7e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8016e82:	4950      	ldr	r1, [pc, #320]	@ (8016fc4 <udp_sendto_if_src+0x1c4>)
 8016e84:	484b      	ldr	r0, [pc, #300]	@ (8016fb4 <udp_sendto_if_src+0x1b4>)
 8016e86:	f000 fb41 	bl	801750c <iprintf>
 8016e8a:	f06f 030f 	mvn.w	r3, #15
 8016e8e:	e088      	b.n	8016fa2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	8a5b      	ldrh	r3, [r3, #18]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d10f      	bne.n	8016eb8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016e98:	68f9      	ldr	r1, [r7, #12]
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	8a5b      	ldrh	r3, [r3, #18]
 8016e9e:	461a      	mov	r2, r3
 8016ea0:	68f8      	ldr	r0, [r7, #12]
 8016ea2:	f000 f893 	bl	8016fcc <udp_bind>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8016eaa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d002      	beq.n	8016eb8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8016eb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016eb6:	e074      	b.n	8016fa2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016eb8:	68bb      	ldr	r3, [r7, #8]
 8016eba:	891b      	ldrh	r3, [r3, #8]
 8016ebc:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8016ec0:	4293      	cmp	r3, r2
 8016ec2:	d902      	bls.n	8016eca <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8016ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ec8:	e06b      	b.n	8016fa2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016eca:	2108      	movs	r1, #8
 8016ecc:	68b8      	ldr	r0, [r7, #8]
 8016ece:	f7f9 fae1 	bl	8010494 <pbuf_add_header>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d015      	beq.n	8016f04 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016ed8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016edc:	2108      	movs	r1, #8
 8016ede:	2022      	movs	r0, #34	@ 0x22
 8016ee0:	f7f9 f88c 	bl	800fffc <pbuf_alloc>
 8016ee4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8016ee6:	69fb      	ldr	r3, [r7, #28]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d102      	bne.n	8016ef2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016eec:	f04f 33ff 	mov.w	r3, #4294967295
 8016ef0:	e057      	b.n	8016fa2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8016ef2:	68bb      	ldr	r3, [r7, #8]
 8016ef4:	891b      	ldrh	r3, [r3, #8]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d006      	beq.n	8016f08 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016efa:	68b9      	ldr	r1, [r7, #8]
 8016efc:	69f8      	ldr	r0, [r7, #28]
 8016efe:	f7f9 fc83 	bl	8010808 <pbuf_chain>
 8016f02:	e001      	b.n	8016f08 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8016f04:	68bb      	ldr	r3, [r7, #8]
 8016f06:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016f08:	69fb      	ldr	r3, [r7, #28]
 8016f0a:	895b      	ldrh	r3, [r3, #10]
 8016f0c:	2b07      	cmp	r3, #7
 8016f0e:	d806      	bhi.n	8016f1e <udp_sendto_if_src+0x11e>
 8016f10:	4b26      	ldr	r3, [pc, #152]	@ (8016fac <udp_sendto_if_src+0x1ac>)
 8016f12:	f240 320d 	movw	r2, #781	@ 0x30d
 8016f16:	492c      	ldr	r1, [pc, #176]	@ (8016fc8 <udp_sendto_if_src+0x1c8>)
 8016f18:	4826      	ldr	r0, [pc, #152]	@ (8016fb4 <udp_sendto_if_src+0x1b4>)
 8016f1a:	f000 faf7 	bl	801750c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016f1e:	69fb      	ldr	r3, [r7, #28]
 8016f20:	685b      	ldr	r3, [r3, #4]
 8016f22:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	8a5b      	ldrh	r3, [r3, #18]
 8016f28:	4618      	mov	r0, r3
 8016f2a:	f7f3 f91f 	bl	800a16c <lwip_htons>
 8016f2e:	4603      	mov	r3, r0
 8016f30:	461a      	mov	r2, r3
 8016f32:	697b      	ldr	r3, [r7, #20]
 8016f34:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8016f36:	887b      	ldrh	r3, [r7, #2]
 8016f38:	4618      	mov	r0, r3
 8016f3a:	f7f3 f917 	bl	800a16c <lwip_htons>
 8016f3e:	4603      	mov	r3, r0
 8016f40:	461a      	mov	r2, r3
 8016f42:	697b      	ldr	r3, [r7, #20]
 8016f44:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8016f46:	697b      	ldr	r3, [r7, #20]
 8016f48:	2200      	movs	r2, #0
 8016f4a:	719a      	strb	r2, [r3, #6]
 8016f4c:	2200      	movs	r2, #0
 8016f4e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016f50:	69fb      	ldr	r3, [r7, #28]
 8016f52:	891b      	ldrh	r3, [r3, #8]
 8016f54:	4618      	mov	r0, r3
 8016f56:	f7f3 f909 	bl	800a16c <lwip_htons>
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	461a      	mov	r2, r3
 8016f5e:	697b      	ldr	r3, [r7, #20]
 8016f60:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8016f62:	2311      	movs	r3, #17
 8016f64:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	7adb      	ldrb	r3, [r3, #11]
 8016f6a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	7a9b      	ldrb	r3, [r3, #10]
 8016f70:	7cb9      	ldrb	r1, [r7, #18]
 8016f72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016f74:	9202      	str	r2, [sp, #8]
 8016f76:	7cfa      	ldrb	r2, [r7, #19]
 8016f78:	9201      	str	r2, [sp, #4]
 8016f7a:	9300      	str	r3, [sp, #0]
 8016f7c:	460b      	mov	r3, r1
 8016f7e:	687a      	ldr	r2, [r7, #4]
 8016f80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016f82:	69f8      	ldr	r0, [r7, #28]
 8016f84:	f7f6 ffa4 	bl	800ded0 <ip4_output_if_src>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016f8c:	69fa      	ldr	r2, [r7, #28]
 8016f8e:	68bb      	ldr	r3, [r7, #8]
 8016f90:	429a      	cmp	r2, r3
 8016f92:	d004      	beq.n	8016f9e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8016f94:	69f8      	ldr	r0, [r7, #28]
 8016f96:	f7f9 fb13 	bl	80105c0 <pbuf_free>
    q = NULL;
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016f9e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	3720      	adds	r7, #32
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	bd80      	pop	{r7, pc}
 8016faa:	bf00      	nop
 8016fac:	0801b44c 	.word	0x0801b44c
 8016fb0:	0801b664 	.word	0x0801b664
 8016fb4:	0801b4cc 	.word	0x0801b4cc
 8016fb8:	0801b684 	.word	0x0801b684
 8016fbc:	0801b6a4 	.word	0x0801b6a4
 8016fc0:	0801b6c8 	.word	0x0801b6c8
 8016fc4:	0801b6ec 	.word	0x0801b6ec
 8016fc8:	0801b710 	.word	0x0801b710

08016fcc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b086      	sub	sp, #24
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	60f8      	str	r0, [r7, #12]
 8016fd4:	60b9      	str	r1, [r7, #8]
 8016fd6:	4613      	mov	r3, r2
 8016fd8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016fda:	68bb      	ldr	r3, [r7, #8]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d101      	bne.n	8016fe4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016fe0:	4b39      	ldr	r3, [pc, #228]	@ (80170c8 <udp_bind+0xfc>)
 8016fe2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d109      	bne.n	8016ffe <udp_bind+0x32>
 8016fea:	4b38      	ldr	r3, [pc, #224]	@ (80170cc <udp_bind+0x100>)
 8016fec:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8016ff0:	4937      	ldr	r1, [pc, #220]	@ (80170d0 <udp_bind+0x104>)
 8016ff2:	4838      	ldr	r0, [pc, #224]	@ (80170d4 <udp_bind+0x108>)
 8016ff4:	f000 fa8a 	bl	801750c <iprintf>
 8016ff8:	f06f 030f 	mvn.w	r3, #15
 8016ffc:	e060      	b.n	80170c0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016ffe:	2300      	movs	r3, #0
 8017000:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017002:	4b35      	ldr	r3, [pc, #212]	@ (80170d8 <udp_bind+0x10c>)
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	617b      	str	r3, [r7, #20]
 8017008:	e009      	b.n	801701e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801700a:	68fa      	ldr	r2, [r7, #12]
 801700c:	697b      	ldr	r3, [r7, #20]
 801700e:	429a      	cmp	r2, r3
 8017010:	d102      	bne.n	8017018 <udp_bind+0x4c>
      rebind = 1;
 8017012:	2301      	movs	r3, #1
 8017014:	74fb      	strb	r3, [r7, #19]
      break;
 8017016:	e005      	b.n	8017024 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017018:	697b      	ldr	r3, [r7, #20]
 801701a:	68db      	ldr	r3, [r3, #12]
 801701c:	617b      	str	r3, [r7, #20]
 801701e:	697b      	ldr	r3, [r7, #20]
 8017020:	2b00      	cmp	r3, #0
 8017022:	d1f2      	bne.n	801700a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8017024:	88fb      	ldrh	r3, [r7, #6]
 8017026:	2b00      	cmp	r3, #0
 8017028:	d109      	bne.n	801703e <udp_bind+0x72>
    port = udp_new_port();
 801702a:	f7ff fc69 	bl	8016900 <udp_new_port>
 801702e:	4603      	mov	r3, r0
 8017030:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8017032:	88fb      	ldrh	r3, [r7, #6]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d12c      	bne.n	8017092 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017038:	f06f 0307 	mvn.w	r3, #7
 801703c:	e040      	b.n	80170c0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801703e:	4b26      	ldr	r3, [pc, #152]	@ (80170d8 <udp_bind+0x10c>)
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	617b      	str	r3, [r7, #20]
 8017044:	e022      	b.n	801708c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8017046:	68fa      	ldr	r2, [r7, #12]
 8017048:	697b      	ldr	r3, [r7, #20]
 801704a:	429a      	cmp	r2, r3
 801704c:	d01b      	beq.n	8017086 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801704e:	697b      	ldr	r3, [r7, #20]
 8017050:	8a5b      	ldrh	r3, [r3, #18]
 8017052:	88fa      	ldrh	r2, [r7, #6]
 8017054:	429a      	cmp	r2, r3
 8017056:	d116      	bne.n	8017086 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017058:	697b      	ldr	r3, [r7, #20]
 801705a:	681a      	ldr	r2, [r3, #0]
 801705c:	68bb      	ldr	r3, [r7, #8]
 801705e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017060:	429a      	cmp	r2, r3
 8017062:	d00d      	beq.n	8017080 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017064:	68bb      	ldr	r3, [r7, #8]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d00a      	beq.n	8017080 <udp_bind+0xb4>
 801706a:	68bb      	ldr	r3, [r7, #8]
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d006      	beq.n	8017080 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017072:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017074:	2b00      	cmp	r3, #0
 8017076:	d003      	beq.n	8017080 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017078:	697b      	ldr	r3, [r7, #20]
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d102      	bne.n	8017086 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017080:	f06f 0307 	mvn.w	r3, #7
 8017084:	e01c      	b.n	80170c0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017086:	697b      	ldr	r3, [r7, #20]
 8017088:	68db      	ldr	r3, [r3, #12]
 801708a:	617b      	str	r3, [r7, #20]
 801708c:	697b      	ldr	r3, [r7, #20]
 801708e:	2b00      	cmp	r3, #0
 8017090:	d1d9      	bne.n	8017046 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8017092:	68bb      	ldr	r3, [r7, #8]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d002      	beq.n	801709e <udp_bind+0xd2>
 8017098:	68bb      	ldr	r3, [r7, #8]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	e000      	b.n	80170a0 <udp_bind+0xd4>
 801709e:	2300      	movs	r3, #0
 80170a0:	68fa      	ldr	r2, [r7, #12]
 80170a2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	88fa      	ldrh	r2, [r7, #6]
 80170a8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80170aa:	7cfb      	ldrb	r3, [r7, #19]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d106      	bne.n	80170be <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80170b0:	4b09      	ldr	r3, [pc, #36]	@ (80170d8 <udp_bind+0x10c>)
 80170b2:	681a      	ldr	r2, [r3, #0]
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80170b8:	4a07      	ldr	r2, [pc, #28]	@ (80170d8 <udp_bind+0x10c>)
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80170be:	2300      	movs	r3, #0
}
 80170c0:	4618      	mov	r0, r3
 80170c2:	3718      	adds	r7, #24
 80170c4:	46bd      	mov	sp, r7
 80170c6:	bd80      	pop	{r7, pc}
 80170c8:	0801b82c 	.word	0x0801b82c
 80170cc:	0801b44c 	.word	0x0801b44c
 80170d0:	0801b740 	.word	0x0801b740
 80170d4:	0801b4cc 	.word	0x0801b4cc
 80170d8:	24007bdc 	.word	0x24007bdc

080170dc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b086      	sub	sp, #24
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	60f8      	str	r0, [r7, #12]
 80170e4:	60b9      	str	r1, [r7, #8]
 80170e6:	4613      	mov	r3, r2
 80170e8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d109      	bne.n	8017104 <udp_connect+0x28>
 80170f0:	4b2c      	ldr	r3, [pc, #176]	@ (80171a4 <udp_connect+0xc8>)
 80170f2:	f240 4235 	movw	r2, #1077	@ 0x435
 80170f6:	492c      	ldr	r1, [pc, #176]	@ (80171a8 <udp_connect+0xcc>)
 80170f8:	482c      	ldr	r0, [pc, #176]	@ (80171ac <udp_connect+0xd0>)
 80170fa:	f000 fa07 	bl	801750c <iprintf>
 80170fe:	f06f 030f 	mvn.w	r3, #15
 8017102:	e04b      	b.n	801719c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8017104:	68bb      	ldr	r3, [r7, #8]
 8017106:	2b00      	cmp	r3, #0
 8017108:	d109      	bne.n	801711e <udp_connect+0x42>
 801710a:	4b26      	ldr	r3, [pc, #152]	@ (80171a4 <udp_connect+0xc8>)
 801710c:	f240 4236 	movw	r2, #1078	@ 0x436
 8017110:	4927      	ldr	r1, [pc, #156]	@ (80171b0 <udp_connect+0xd4>)
 8017112:	4826      	ldr	r0, [pc, #152]	@ (80171ac <udp_connect+0xd0>)
 8017114:	f000 f9fa 	bl	801750c <iprintf>
 8017118:	f06f 030f 	mvn.w	r3, #15
 801711c:	e03e      	b.n	801719c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	8a5b      	ldrh	r3, [r3, #18]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d10f      	bne.n	8017146 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017126:	68f9      	ldr	r1, [r7, #12]
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	8a5b      	ldrh	r3, [r3, #18]
 801712c:	461a      	mov	r2, r3
 801712e:	68f8      	ldr	r0, [r7, #12]
 8017130:	f7ff ff4c 	bl	8016fcc <udp_bind>
 8017134:	4603      	mov	r3, r0
 8017136:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8017138:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801713c:	2b00      	cmp	r3, #0
 801713e:	d002      	beq.n	8017146 <udp_connect+0x6a>
      return err;
 8017140:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017144:	e02a      	b.n	801719c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8017146:	68bb      	ldr	r3, [r7, #8]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d002      	beq.n	8017152 <udp_connect+0x76>
 801714c:	68bb      	ldr	r3, [r7, #8]
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	e000      	b.n	8017154 <udp_connect+0x78>
 8017152:	2300      	movs	r3, #0
 8017154:	68fa      	ldr	r2, [r7, #12]
 8017156:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	88fa      	ldrh	r2, [r7, #6]
 801715c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	7c1b      	ldrb	r3, [r3, #16]
 8017162:	f043 0304 	orr.w	r3, r3, #4
 8017166:	b2da      	uxtb	r2, r3
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801716c:	4b11      	ldr	r3, [pc, #68]	@ (80171b4 <udp_connect+0xd8>)
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	617b      	str	r3, [r7, #20]
 8017172:	e008      	b.n	8017186 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8017174:	68fa      	ldr	r2, [r7, #12]
 8017176:	697b      	ldr	r3, [r7, #20]
 8017178:	429a      	cmp	r2, r3
 801717a:	d101      	bne.n	8017180 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801717c:	2300      	movs	r3, #0
 801717e:	e00d      	b.n	801719c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017180:	697b      	ldr	r3, [r7, #20]
 8017182:	68db      	ldr	r3, [r3, #12]
 8017184:	617b      	str	r3, [r7, #20]
 8017186:	697b      	ldr	r3, [r7, #20]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d1f3      	bne.n	8017174 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801718c:	4b09      	ldr	r3, [pc, #36]	@ (80171b4 <udp_connect+0xd8>)
 801718e:	681a      	ldr	r2, [r3, #0]
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8017194:	4a07      	ldr	r2, [pc, #28]	@ (80171b4 <udp_connect+0xd8>)
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801719a:	2300      	movs	r3, #0
}
 801719c:	4618      	mov	r0, r3
 801719e:	3718      	adds	r7, #24
 80171a0:	46bd      	mov	sp, r7
 80171a2:	bd80      	pop	{r7, pc}
 80171a4:	0801b44c 	.word	0x0801b44c
 80171a8:	0801b758 	.word	0x0801b758
 80171ac:	0801b4cc 	.word	0x0801b4cc
 80171b0:	0801b774 	.word	0x0801b774
 80171b4:	24007bdc 	.word	0x24007bdc

080171b8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80171b8:	b580      	push	{r7, lr}
 80171ba:	b084      	sub	sp, #16
 80171bc:	af00      	add	r7, sp, #0
 80171be:	60f8      	str	r0, [r7, #12]
 80171c0:	60b9      	str	r1, [r7, #8]
 80171c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d107      	bne.n	80171da <udp_recv+0x22>
 80171ca:	4b08      	ldr	r3, [pc, #32]	@ (80171ec <udp_recv+0x34>)
 80171cc:	f240 428a 	movw	r2, #1162	@ 0x48a
 80171d0:	4907      	ldr	r1, [pc, #28]	@ (80171f0 <udp_recv+0x38>)
 80171d2:	4808      	ldr	r0, [pc, #32]	@ (80171f4 <udp_recv+0x3c>)
 80171d4:	f000 f99a 	bl	801750c <iprintf>
 80171d8:	e005      	b.n	80171e6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	68ba      	ldr	r2, [r7, #8]
 80171de:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	687a      	ldr	r2, [r7, #4]
 80171e4:	61da      	str	r2, [r3, #28]
}
 80171e6:	3710      	adds	r7, #16
 80171e8:	46bd      	mov	sp, r7
 80171ea:	bd80      	pop	{r7, pc}
 80171ec:	0801b44c 	.word	0x0801b44c
 80171f0:	0801b7ac 	.word	0x0801b7ac
 80171f4:	0801b4cc 	.word	0x0801b4cc

080171f8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80171f8:	b580      	push	{r7, lr}
 80171fa:	b084      	sub	sp, #16
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d107      	bne.n	8017216 <udp_remove+0x1e>
 8017206:	4b19      	ldr	r3, [pc, #100]	@ (801726c <udp_remove+0x74>)
 8017208:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801720c:	4918      	ldr	r1, [pc, #96]	@ (8017270 <udp_remove+0x78>)
 801720e:	4819      	ldr	r0, [pc, #100]	@ (8017274 <udp_remove+0x7c>)
 8017210:	f000 f97c 	bl	801750c <iprintf>
 8017214:	e026      	b.n	8017264 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8017216:	4b18      	ldr	r3, [pc, #96]	@ (8017278 <udp_remove+0x80>)
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	687a      	ldr	r2, [r7, #4]
 801721c:	429a      	cmp	r2, r3
 801721e:	d105      	bne.n	801722c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8017220:	4b15      	ldr	r3, [pc, #84]	@ (8017278 <udp_remove+0x80>)
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	68db      	ldr	r3, [r3, #12]
 8017226:	4a14      	ldr	r2, [pc, #80]	@ (8017278 <udp_remove+0x80>)
 8017228:	6013      	str	r3, [r2, #0]
 801722a:	e017      	b.n	801725c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801722c:	4b12      	ldr	r3, [pc, #72]	@ (8017278 <udp_remove+0x80>)
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	60fb      	str	r3, [r7, #12]
 8017232:	e010      	b.n	8017256 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	68db      	ldr	r3, [r3, #12]
 8017238:	2b00      	cmp	r3, #0
 801723a:	d009      	beq.n	8017250 <udp_remove+0x58>
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	68db      	ldr	r3, [r3, #12]
 8017240:	687a      	ldr	r2, [r7, #4]
 8017242:	429a      	cmp	r2, r3
 8017244:	d104      	bne.n	8017250 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	68da      	ldr	r2, [r3, #12]
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	60da      	str	r2, [r3, #12]
        break;
 801724e:	e005      	b.n	801725c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	68db      	ldr	r3, [r3, #12]
 8017254:	60fb      	str	r3, [r7, #12]
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d1eb      	bne.n	8017234 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801725c:	6879      	ldr	r1, [r7, #4]
 801725e:	2000      	movs	r0, #0
 8017260:	f7f8 fae6 	bl	800f830 <memp_free>
}
 8017264:	3710      	adds	r7, #16
 8017266:	46bd      	mov	sp, r7
 8017268:	bd80      	pop	{r7, pc}
 801726a:	bf00      	nop
 801726c:	0801b44c 	.word	0x0801b44c
 8017270:	0801b7c4 	.word	0x0801b7c4
 8017274:	0801b4cc 	.word	0x0801b4cc
 8017278:	24007bdc 	.word	0x24007bdc

0801727c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801727c:	b580      	push	{r7, lr}
 801727e:	b082      	sub	sp, #8
 8017280:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8017282:	2000      	movs	r0, #0
 8017284:	f7f8 fa5e 	bl	800f744 <memp_malloc>
 8017288:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2b00      	cmp	r3, #0
 801728e:	d007      	beq.n	80172a0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8017290:	2220      	movs	r2, #32
 8017292:	2100      	movs	r1, #0
 8017294:	6878      	ldr	r0, [r7, #4]
 8017296:	f000 fa91 	bl	80177bc <memset>
    pcb->ttl = UDP_TTL;
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	22ff      	movs	r2, #255	@ 0xff
 801729e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80172a0:	687b      	ldr	r3, [r7, #4]
}
 80172a2:	4618      	mov	r0, r3
 80172a4:	3708      	adds	r7, #8
 80172a6:	46bd      	mov	sp, r7
 80172a8:	bd80      	pop	{r7, pc}
	...

080172ac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80172ac:	b480      	push	{r7}
 80172ae:	b085      	sub	sp, #20
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]
 80172b4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d01e      	beq.n	80172fa <udp_netif_ip_addr_changed+0x4e>
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d01a      	beq.n	80172fa <udp_netif_ip_addr_changed+0x4e>
 80172c4:	683b      	ldr	r3, [r7, #0]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d017      	beq.n	80172fa <udp_netif_ip_addr_changed+0x4e>
 80172ca:	683b      	ldr	r3, [r7, #0]
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d013      	beq.n	80172fa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80172d2:	4b0d      	ldr	r3, [pc, #52]	@ (8017308 <udp_netif_ip_addr_changed+0x5c>)
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	60fb      	str	r3, [r7, #12]
 80172d8:	e00c      	b.n	80172f4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	681a      	ldr	r2, [r3, #0]
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	429a      	cmp	r2, r3
 80172e4:	d103      	bne.n	80172ee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80172e6:	683b      	ldr	r3, [r7, #0]
 80172e8:	681a      	ldr	r2, [r3, #0]
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	68db      	ldr	r3, [r3, #12]
 80172f2:	60fb      	str	r3, [r7, #12]
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d1ef      	bne.n	80172da <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80172fa:	bf00      	nop
 80172fc:	3714      	adds	r7, #20
 80172fe:	46bd      	mov	sp, r7
 8017300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017304:	4770      	bx	lr
 8017306:	bf00      	nop
 8017308:	24007bdc 	.word	0x24007bdc

0801730c <rand>:
 801730c:	4b16      	ldr	r3, [pc, #88]	@ (8017368 <rand+0x5c>)
 801730e:	b510      	push	{r4, lr}
 8017310:	681c      	ldr	r4, [r3, #0]
 8017312:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017314:	b9b3      	cbnz	r3, 8017344 <rand+0x38>
 8017316:	2018      	movs	r0, #24
 8017318:	f000 fb9a 	bl	8017a50 <malloc>
 801731c:	4602      	mov	r2, r0
 801731e:	6320      	str	r0, [r4, #48]	@ 0x30
 8017320:	b920      	cbnz	r0, 801732c <rand+0x20>
 8017322:	4b12      	ldr	r3, [pc, #72]	@ (801736c <rand+0x60>)
 8017324:	4812      	ldr	r0, [pc, #72]	@ (8017370 <rand+0x64>)
 8017326:	2152      	movs	r1, #82	@ 0x52
 8017328:	f000 fb2a 	bl	8017980 <__assert_func>
 801732c:	4911      	ldr	r1, [pc, #68]	@ (8017374 <rand+0x68>)
 801732e:	4b12      	ldr	r3, [pc, #72]	@ (8017378 <rand+0x6c>)
 8017330:	e9c0 1300 	strd	r1, r3, [r0]
 8017334:	4b11      	ldr	r3, [pc, #68]	@ (801737c <rand+0x70>)
 8017336:	6083      	str	r3, [r0, #8]
 8017338:	230b      	movs	r3, #11
 801733a:	8183      	strh	r3, [r0, #12]
 801733c:	2100      	movs	r1, #0
 801733e:	2001      	movs	r0, #1
 8017340:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017344:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017346:	480e      	ldr	r0, [pc, #56]	@ (8017380 <rand+0x74>)
 8017348:	690b      	ldr	r3, [r1, #16]
 801734a:	694c      	ldr	r4, [r1, #20]
 801734c:	4a0d      	ldr	r2, [pc, #52]	@ (8017384 <rand+0x78>)
 801734e:	4358      	muls	r0, r3
 8017350:	fb02 0004 	mla	r0, r2, r4, r0
 8017354:	fba3 3202 	umull	r3, r2, r3, r2
 8017358:	3301      	adds	r3, #1
 801735a:	eb40 0002 	adc.w	r0, r0, r2
 801735e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017362:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017366:	bd10      	pop	{r4, pc}
 8017368:	24000060 	.word	0x24000060
 801736c:	0801b974 	.word	0x0801b974
 8017370:	0801b98b 	.word	0x0801b98b
 8017374:	abcd330e 	.word	0xabcd330e
 8017378:	e66d1234 	.word	0xe66d1234
 801737c:	0005deec 	.word	0x0005deec
 8017380:	5851f42d 	.word	0x5851f42d
 8017384:	4c957f2d 	.word	0x4c957f2d

08017388 <std>:
 8017388:	2300      	movs	r3, #0
 801738a:	b510      	push	{r4, lr}
 801738c:	4604      	mov	r4, r0
 801738e:	e9c0 3300 	strd	r3, r3, [r0]
 8017392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017396:	6083      	str	r3, [r0, #8]
 8017398:	8181      	strh	r1, [r0, #12]
 801739a:	6643      	str	r3, [r0, #100]	@ 0x64
 801739c:	81c2      	strh	r2, [r0, #14]
 801739e:	6183      	str	r3, [r0, #24]
 80173a0:	4619      	mov	r1, r3
 80173a2:	2208      	movs	r2, #8
 80173a4:	305c      	adds	r0, #92	@ 0x5c
 80173a6:	f000 fa09 	bl	80177bc <memset>
 80173aa:	4b0d      	ldr	r3, [pc, #52]	@ (80173e0 <std+0x58>)
 80173ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80173ae:	4b0d      	ldr	r3, [pc, #52]	@ (80173e4 <std+0x5c>)
 80173b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80173b2:	4b0d      	ldr	r3, [pc, #52]	@ (80173e8 <std+0x60>)
 80173b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80173b6:	4b0d      	ldr	r3, [pc, #52]	@ (80173ec <std+0x64>)
 80173b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80173ba:	4b0d      	ldr	r3, [pc, #52]	@ (80173f0 <std+0x68>)
 80173bc:	6224      	str	r4, [r4, #32]
 80173be:	429c      	cmp	r4, r3
 80173c0:	d006      	beq.n	80173d0 <std+0x48>
 80173c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80173c6:	4294      	cmp	r4, r2
 80173c8:	d002      	beq.n	80173d0 <std+0x48>
 80173ca:	33d0      	adds	r3, #208	@ 0xd0
 80173cc:	429c      	cmp	r4, r3
 80173ce:	d105      	bne.n	80173dc <std+0x54>
 80173d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80173d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173d8:	f000 bac0 	b.w	801795c <__retarget_lock_init_recursive>
 80173dc:	bd10      	pop	{r4, pc}
 80173de:	bf00      	nop
 80173e0:	080175ed 	.word	0x080175ed
 80173e4:	0801760f 	.word	0x0801760f
 80173e8:	08017647 	.word	0x08017647
 80173ec:	0801766b 	.word	0x0801766b
 80173f0:	24007be0 	.word	0x24007be0

080173f4 <stdio_exit_handler>:
 80173f4:	4a02      	ldr	r2, [pc, #8]	@ (8017400 <stdio_exit_handler+0xc>)
 80173f6:	4903      	ldr	r1, [pc, #12]	@ (8017404 <stdio_exit_handler+0x10>)
 80173f8:	4803      	ldr	r0, [pc, #12]	@ (8017408 <stdio_exit_handler+0x14>)
 80173fa:	f000 b869 	b.w	80174d0 <_fwalk_sglue>
 80173fe:	bf00      	nop
 8017400:	24000054 	.word	0x24000054
 8017404:	08018261 	.word	0x08018261
 8017408:	24000064 	.word	0x24000064

0801740c <cleanup_stdio>:
 801740c:	6841      	ldr	r1, [r0, #4]
 801740e:	4b0c      	ldr	r3, [pc, #48]	@ (8017440 <cleanup_stdio+0x34>)
 8017410:	4299      	cmp	r1, r3
 8017412:	b510      	push	{r4, lr}
 8017414:	4604      	mov	r4, r0
 8017416:	d001      	beq.n	801741c <cleanup_stdio+0x10>
 8017418:	f000 ff22 	bl	8018260 <_fflush_r>
 801741c:	68a1      	ldr	r1, [r4, #8]
 801741e:	4b09      	ldr	r3, [pc, #36]	@ (8017444 <cleanup_stdio+0x38>)
 8017420:	4299      	cmp	r1, r3
 8017422:	d002      	beq.n	801742a <cleanup_stdio+0x1e>
 8017424:	4620      	mov	r0, r4
 8017426:	f000 ff1b 	bl	8018260 <_fflush_r>
 801742a:	68e1      	ldr	r1, [r4, #12]
 801742c:	4b06      	ldr	r3, [pc, #24]	@ (8017448 <cleanup_stdio+0x3c>)
 801742e:	4299      	cmp	r1, r3
 8017430:	d004      	beq.n	801743c <cleanup_stdio+0x30>
 8017432:	4620      	mov	r0, r4
 8017434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017438:	f000 bf12 	b.w	8018260 <_fflush_r>
 801743c:	bd10      	pop	{r4, pc}
 801743e:	bf00      	nop
 8017440:	24007be0 	.word	0x24007be0
 8017444:	24007c48 	.word	0x24007c48
 8017448:	24007cb0 	.word	0x24007cb0

0801744c <global_stdio_init.part.0>:
 801744c:	b510      	push	{r4, lr}
 801744e:	4b0b      	ldr	r3, [pc, #44]	@ (801747c <global_stdio_init.part.0+0x30>)
 8017450:	4c0b      	ldr	r4, [pc, #44]	@ (8017480 <global_stdio_init.part.0+0x34>)
 8017452:	4a0c      	ldr	r2, [pc, #48]	@ (8017484 <global_stdio_init.part.0+0x38>)
 8017454:	601a      	str	r2, [r3, #0]
 8017456:	4620      	mov	r0, r4
 8017458:	2200      	movs	r2, #0
 801745a:	2104      	movs	r1, #4
 801745c:	f7ff ff94 	bl	8017388 <std>
 8017460:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017464:	2201      	movs	r2, #1
 8017466:	2109      	movs	r1, #9
 8017468:	f7ff ff8e 	bl	8017388 <std>
 801746c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017470:	2202      	movs	r2, #2
 8017472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017476:	2112      	movs	r1, #18
 8017478:	f7ff bf86 	b.w	8017388 <std>
 801747c:	24007d18 	.word	0x24007d18
 8017480:	24007be0 	.word	0x24007be0
 8017484:	080173f5 	.word	0x080173f5

08017488 <__sfp_lock_acquire>:
 8017488:	4801      	ldr	r0, [pc, #4]	@ (8017490 <__sfp_lock_acquire+0x8>)
 801748a:	f000 ba68 	b.w	801795e <__retarget_lock_acquire_recursive>
 801748e:	bf00      	nop
 8017490:	24007d21 	.word	0x24007d21

08017494 <__sfp_lock_release>:
 8017494:	4801      	ldr	r0, [pc, #4]	@ (801749c <__sfp_lock_release+0x8>)
 8017496:	f000 ba63 	b.w	8017960 <__retarget_lock_release_recursive>
 801749a:	bf00      	nop
 801749c:	24007d21 	.word	0x24007d21

080174a0 <__sinit>:
 80174a0:	b510      	push	{r4, lr}
 80174a2:	4604      	mov	r4, r0
 80174a4:	f7ff fff0 	bl	8017488 <__sfp_lock_acquire>
 80174a8:	6a23      	ldr	r3, [r4, #32]
 80174aa:	b11b      	cbz	r3, 80174b4 <__sinit+0x14>
 80174ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174b0:	f7ff bff0 	b.w	8017494 <__sfp_lock_release>
 80174b4:	4b04      	ldr	r3, [pc, #16]	@ (80174c8 <__sinit+0x28>)
 80174b6:	6223      	str	r3, [r4, #32]
 80174b8:	4b04      	ldr	r3, [pc, #16]	@ (80174cc <__sinit+0x2c>)
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d1f5      	bne.n	80174ac <__sinit+0xc>
 80174c0:	f7ff ffc4 	bl	801744c <global_stdio_init.part.0>
 80174c4:	e7f2      	b.n	80174ac <__sinit+0xc>
 80174c6:	bf00      	nop
 80174c8:	0801740d 	.word	0x0801740d
 80174cc:	24007d18 	.word	0x24007d18

080174d0 <_fwalk_sglue>:
 80174d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174d4:	4607      	mov	r7, r0
 80174d6:	4688      	mov	r8, r1
 80174d8:	4614      	mov	r4, r2
 80174da:	2600      	movs	r6, #0
 80174dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80174e0:	f1b9 0901 	subs.w	r9, r9, #1
 80174e4:	d505      	bpl.n	80174f2 <_fwalk_sglue+0x22>
 80174e6:	6824      	ldr	r4, [r4, #0]
 80174e8:	2c00      	cmp	r4, #0
 80174ea:	d1f7      	bne.n	80174dc <_fwalk_sglue+0xc>
 80174ec:	4630      	mov	r0, r6
 80174ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174f2:	89ab      	ldrh	r3, [r5, #12]
 80174f4:	2b01      	cmp	r3, #1
 80174f6:	d907      	bls.n	8017508 <_fwalk_sglue+0x38>
 80174f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80174fc:	3301      	adds	r3, #1
 80174fe:	d003      	beq.n	8017508 <_fwalk_sglue+0x38>
 8017500:	4629      	mov	r1, r5
 8017502:	4638      	mov	r0, r7
 8017504:	47c0      	blx	r8
 8017506:	4306      	orrs	r6, r0
 8017508:	3568      	adds	r5, #104	@ 0x68
 801750a:	e7e9      	b.n	80174e0 <_fwalk_sglue+0x10>

0801750c <iprintf>:
 801750c:	b40f      	push	{r0, r1, r2, r3}
 801750e:	b507      	push	{r0, r1, r2, lr}
 8017510:	4906      	ldr	r1, [pc, #24]	@ (801752c <iprintf+0x20>)
 8017512:	ab04      	add	r3, sp, #16
 8017514:	6808      	ldr	r0, [r1, #0]
 8017516:	f853 2b04 	ldr.w	r2, [r3], #4
 801751a:	6881      	ldr	r1, [r0, #8]
 801751c:	9301      	str	r3, [sp, #4]
 801751e:	f000 fb77 	bl	8017c10 <_vfiprintf_r>
 8017522:	b003      	add	sp, #12
 8017524:	f85d eb04 	ldr.w	lr, [sp], #4
 8017528:	b004      	add	sp, #16
 801752a:	4770      	bx	lr
 801752c:	24000060 	.word	0x24000060

08017530 <_puts_r>:
 8017530:	6a03      	ldr	r3, [r0, #32]
 8017532:	b570      	push	{r4, r5, r6, lr}
 8017534:	6884      	ldr	r4, [r0, #8]
 8017536:	4605      	mov	r5, r0
 8017538:	460e      	mov	r6, r1
 801753a:	b90b      	cbnz	r3, 8017540 <_puts_r+0x10>
 801753c:	f7ff ffb0 	bl	80174a0 <__sinit>
 8017540:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017542:	07db      	lsls	r3, r3, #31
 8017544:	d405      	bmi.n	8017552 <_puts_r+0x22>
 8017546:	89a3      	ldrh	r3, [r4, #12]
 8017548:	0598      	lsls	r0, r3, #22
 801754a:	d402      	bmi.n	8017552 <_puts_r+0x22>
 801754c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801754e:	f000 fa06 	bl	801795e <__retarget_lock_acquire_recursive>
 8017552:	89a3      	ldrh	r3, [r4, #12]
 8017554:	0719      	lsls	r1, r3, #28
 8017556:	d502      	bpl.n	801755e <_puts_r+0x2e>
 8017558:	6923      	ldr	r3, [r4, #16]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d135      	bne.n	80175ca <_puts_r+0x9a>
 801755e:	4621      	mov	r1, r4
 8017560:	4628      	mov	r0, r5
 8017562:	f000 f8c5 	bl	80176f0 <__swsetup_r>
 8017566:	b380      	cbz	r0, 80175ca <_puts_r+0x9a>
 8017568:	f04f 35ff 	mov.w	r5, #4294967295
 801756c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801756e:	07da      	lsls	r2, r3, #31
 8017570:	d405      	bmi.n	801757e <_puts_r+0x4e>
 8017572:	89a3      	ldrh	r3, [r4, #12]
 8017574:	059b      	lsls	r3, r3, #22
 8017576:	d402      	bmi.n	801757e <_puts_r+0x4e>
 8017578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801757a:	f000 f9f1 	bl	8017960 <__retarget_lock_release_recursive>
 801757e:	4628      	mov	r0, r5
 8017580:	bd70      	pop	{r4, r5, r6, pc}
 8017582:	2b00      	cmp	r3, #0
 8017584:	da04      	bge.n	8017590 <_puts_r+0x60>
 8017586:	69a2      	ldr	r2, [r4, #24]
 8017588:	429a      	cmp	r2, r3
 801758a:	dc17      	bgt.n	80175bc <_puts_r+0x8c>
 801758c:	290a      	cmp	r1, #10
 801758e:	d015      	beq.n	80175bc <_puts_r+0x8c>
 8017590:	6823      	ldr	r3, [r4, #0]
 8017592:	1c5a      	adds	r2, r3, #1
 8017594:	6022      	str	r2, [r4, #0]
 8017596:	7019      	strb	r1, [r3, #0]
 8017598:	68a3      	ldr	r3, [r4, #8]
 801759a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801759e:	3b01      	subs	r3, #1
 80175a0:	60a3      	str	r3, [r4, #8]
 80175a2:	2900      	cmp	r1, #0
 80175a4:	d1ed      	bne.n	8017582 <_puts_r+0x52>
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	da11      	bge.n	80175ce <_puts_r+0x9e>
 80175aa:	4622      	mov	r2, r4
 80175ac:	210a      	movs	r1, #10
 80175ae:	4628      	mov	r0, r5
 80175b0:	f000 f85f 	bl	8017672 <__swbuf_r>
 80175b4:	3001      	adds	r0, #1
 80175b6:	d0d7      	beq.n	8017568 <_puts_r+0x38>
 80175b8:	250a      	movs	r5, #10
 80175ba:	e7d7      	b.n	801756c <_puts_r+0x3c>
 80175bc:	4622      	mov	r2, r4
 80175be:	4628      	mov	r0, r5
 80175c0:	f000 f857 	bl	8017672 <__swbuf_r>
 80175c4:	3001      	adds	r0, #1
 80175c6:	d1e7      	bne.n	8017598 <_puts_r+0x68>
 80175c8:	e7ce      	b.n	8017568 <_puts_r+0x38>
 80175ca:	3e01      	subs	r6, #1
 80175cc:	e7e4      	b.n	8017598 <_puts_r+0x68>
 80175ce:	6823      	ldr	r3, [r4, #0]
 80175d0:	1c5a      	adds	r2, r3, #1
 80175d2:	6022      	str	r2, [r4, #0]
 80175d4:	220a      	movs	r2, #10
 80175d6:	701a      	strb	r2, [r3, #0]
 80175d8:	e7ee      	b.n	80175b8 <_puts_r+0x88>
	...

080175dc <puts>:
 80175dc:	4b02      	ldr	r3, [pc, #8]	@ (80175e8 <puts+0xc>)
 80175de:	4601      	mov	r1, r0
 80175e0:	6818      	ldr	r0, [r3, #0]
 80175e2:	f7ff bfa5 	b.w	8017530 <_puts_r>
 80175e6:	bf00      	nop
 80175e8:	24000060 	.word	0x24000060

080175ec <__sread>:
 80175ec:	b510      	push	{r4, lr}
 80175ee:	460c      	mov	r4, r1
 80175f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175f4:	f000 f96a 	bl	80178cc <_read_r>
 80175f8:	2800      	cmp	r0, #0
 80175fa:	bfab      	itete	ge
 80175fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80175fe:	89a3      	ldrhlt	r3, [r4, #12]
 8017600:	181b      	addge	r3, r3, r0
 8017602:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017606:	bfac      	ite	ge
 8017608:	6563      	strge	r3, [r4, #84]	@ 0x54
 801760a:	81a3      	strhlt	r3, [r4, #12]
 801760c:	bd10      	pop	{r4, pc}

0801760e <__swrite>:
 801760e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017612:	461f      	mov	r7, r3
 8017614:	898b      	ldrh	r3, [r1, #12]
 8017616:	05db      	lsls	r3, r3, #23
 8017618:	4605      	mov	r5, r0
 801761a:	460c      	mov	r4, r1
 801761c:	4616      	mov	r6, r2
 801761e:	d505      	bpl.n	801762c <__swrite+0x1e>
 8017620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017624:	2302      	movs	r3, #2
 8017626:	2200      	movs	r2, #0
 8017628:	f000 f93e 	bl	80178a8 <_lseek_r>
 801762c:	89a3      	ldrh	r3, [r4, #12]
 801762e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017632:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017636:	81a3      	strh	r3, [r4, #12]
 8017638:	4632      	mov	r2, r6
 801763a:	463b      	mov	r3, r7
 801763c:	4628      	mov	r0, r5
 801763e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017642:	f000 b955 	b.w	80178f0 <_write_r>

08017646 <__sseek>:
 8017646:	b510      	push	{r4, lr}
 8017648:	460c      	mov	r4, r1
 801764a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801764e:	f000 f92b 	bl	80178a8 <_lseek_r>
 8017652:	1c43      	adds	r3, r0, #1
 8017654:	89a3      	ldrh	r3, [r4, #12]
 8017656:	bf15      	itete	ne
 8017658:	6560      	strne	r0, [r4, #84]	@ 0x54
 801765a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801765e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017662:	81a3      	strheq	r3, [r4, #12]
 8017664:	bf18      	it	ne
 8017666:	81a3      	strhne	r3, [r4, #12]
 8017668:	bd10      	pop	{r4, pc}

0801766a <__sclose>:
 801766a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801766e:	f000 b8ad 	b.w	80177cc <_close_r>

08017672 <__swbuf_r>:
 8017672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017674:	460e      	mov	r6, r1
 8017676:	4614      	mov	r4, r2
 8017678:	4605      	mov	r5, r0
 801767a:	b118      	cbz	r0, 8017684 <__swbuf_r+0x12>
 801767c:	6a03      	ldr	r3, [r0, #32]
 801767e:	b90b      	cbnz	r3, 8017684 <__swbuf_r+0x12>
 8017680:	f7ff ff0e 	bl	80174a0 <__sinit>
 8017684:	69a3      	ldr	r3, [r4, #24]
 8017686:	60a3      	str	r3, [r4, #8]
 8017688:	89a3      	ldrh	r3, [r4, #12]
 801768a:	071a      	lsls	r2, r3, #28
 801768c:	d501      	bpl.n	8017692 <__swbuf_r+0x20>
 801768e:	6923      	ldr	r3, [r4, #16]
 8017690:	b943      	cbnz	r3, 80176a4 <__swbuf_r+0x32>
 8017692:	4621      	mov	r1, r4
 8017694:	4628      	mov	r0, r5
 8017696:	f000 f82b 	bl	80176f0 <__swsetup_r>
 801769a:	b118      	cbz	r0, 80176a4 <__swbuf_r+0x32>
 801769c:	f04f 37ff 	mov.w	r7, #4294967295
 80176a0:	4638      	mov	r0, r7
 80176a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176a4:	6823      	ldr	r3, [r4, #0]
 80176a6:	6922      	ldr	r2, [r4, #16]
 80176a8:	1a98      	subs	r0, r3, r2
 80176aa:	6963      	ldr	r3, [r4, #20]
 80176ac:	b2f6      	uxtb	r6, r6
 80176ae:	4283      	cmp	r3, r0
 80176b0:	4637      	mov	r7, r6
 80176b2:	dc05      	bgt.n	80176c0 <__swbuf_r+0x4e>
 80176b4:	4621      	mov	r1, r4
 80176b6:	4628      	mov	r0, r5
 80176b8:	f000 fdd2 	bl	8018260 <_fflush_r>
 80176bc:	2800      	cmp	r0, #0
 80176be:	d1ed      	bne.n	801769c <__swbuf_r+0x2a>
 80176c0:	68a3      	ldr	r3, [r4, #8]
 80176c2:	3b01      	subs	r3, #1
 80176c4:	60a3      	str	r3, [r4, #8]
 80176c6:	6823      	ldr	r3, [r4, #0]
 80176c8:	1c5a      	adds	r2, r3, #1
 80176ca:	6022      	str	r2, [r4, #0]
 80176cc:	701e      	strb	r6, [r3, #0]
 80176ce:	6962      	ldr	r2, [r4, #20]
 80176d0:	1c43      	adds	r3, r0, #1
 80176d2:	429a      	cmp	r2, r3
 80176d4:	d004      	beq.n	80176e0 <__swbuf_r+0x6e>
 80176d6:	89a3      	ldrh	r3, [r4, #12]
 80176d8:	07db      	lsls	r3, r3, #31
 80176da:	d5e1      	bpl.n	80176a0 <__swbuf_r+0x2e>
 80176dc:	2e0a      	cmp	r6, #10
 80176de:	d1df      	bne.n	80176a0 <__swbuf_r+0x2e>
 80176e0:	4621      	mov	r1, r4
 80176e2:	4628      	mov	r0, r5
 80176e4:	f000 fdbc 	bl	8018260 <_fflush_r>
 80176e8:	2800      	cmp	r0, #0
 80176ea:	d0d9      	beq.n	80176a0 <__swbuf_r+0x2e>
 80176ec:	e7d6      	b.n	801769c <__swbuf_r+0x2a>
	...

080176f0 <__swsetup_r>:
 80176f0:	b538      	push	{r3, r4, r5, lr}
 80176f2:	4b29      	ldr	r3, [pc, #164]	@ (8017798 <__swsetup_r+0xa8>)
 80176f4:	4605      	mov	r5, r0
 80176f6:	6818      	ldr	r0, [r3, #0]
 80176f8:	460c      	mov	r4, r1
 80176fa:	b118      	cbz	r0, 8017704 <__swsetup_r+0x14>
 80176fc:	6a03      	ldr	r3, [r0, #32]
 80176fe:	b90b      	cbnz	r3, 8017704 <__swsetup_r+0x14>
 8017700:	f7ff fece 	bl	80174a0 <__sinit>
 8017704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017708:	0719      	lsls	r1, r3, #28
 801770a:	d422      	bmi.n	8017752 <__swsetup_r+0x62>
 801770c:	06da      	lsls	r2, r3, #27
 801770e:	d407      	bmi.n	8017720 <__swsetup_r+0x30>
 8017710:	2209      	movs	r2, #9
 8017712:	602a      	str	r2, [r5, #0]
 8017714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017718:	81a3      	strh	r3, [r4, #12]
 801771a:	f04f 30ff 	mov.w	r0, #4294967295
 801771e:	e033      	b.n	8017788 <__swsetup_r+0x98>
 8017720:	0758      	lsls	r0, r3, #29
 8017722:	d512      	bpl.n	801774a <__swsetup_r+0x5a>
 8017724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017726:	b141      	cbz	r1, 801773a <__swsetup_r+0x4a>
 8017728:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801772c:	4299      	cmp	r1, r3
 801772e:	d002      	beq.n	8017736 <__swsetup_r+0x46>
 8017730:	4628      	mov	r0, r5
 8017732:	f000 f943 	bl	80179bc <_free_r>
 8017736:	2300      	movs	r3, #0
 8017738:	6363      	str	r3, [r4, #52]	@ 0x34
 801773a:	89a3      	ldrh	r3, [r4, #12]
 801773c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017740:	81a3      	strh	r3, [r4, #12]
 8017742:	2300      	movs	r3, #0
 8017744:	6063      	str	r3, [r4, #4]
 8017746:	6923      	ldr	r3, [r4, #16]
 8017748:	6023      	str	r3, [r4, #0]
 801774a:	89a3      	ldrh	r3, [r4, #12]
 801774c:	f043 0308 	orr.w	r3, r3, #8
 8017750:	81a3      	strh	r3, [r4, #12]
 8017752:	6923      	ldr	r3, [r4, #16]
 8017754:	b94b      	cbnz	r3, 801776a <__swsetup_r+0x7a>
 8017756:	89a3      	ldrh	r3, [r4, #12]
 8017758:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801775c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017760:	d003      	beq.n	801776a <__swsetup_r+0x7a>
 8017762:	4621      	mov	r1, r4
 8017764:	4628      	mov	r0, r5
 8017766:	f000 fddb 	bl	8018320 <__smakebuf_r>
 801776a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801776e:	f013 0201 	ands.w	r2, r3, #1
 8017772:	d00a      	beq.n	801778a <__swsetup_r+0x9a>
 8017774:	2200      	movs	r2, #0
 8017776:	60a2      	str	r2, [r4, #8]
 8017778:	6962      	ldr	r2, [r4, #20]
 801777a:	4252      	negs	r2, r2
 801777c:	61a2      	str	r2, [r4, #24]
 801777e:	6922      	ldr	r2, [r4, #16]
 8017780:	b942      	cbnz	r2, 8017794 <__swsetup_r+0xa4>
 8017782:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017786:	d1c5      	bne.n	8017714 <__swsetup_r+0x24>
 8017788:	bd38      	pop	{r3, r4, r5, pc}
 801778a:	0799      	lsls	r1, r3, #30
 801778c:	bf58      	it	pl
 801778e:	6962      	ldrpl	r2, [r4, #20]
 8017790:	60a2      	str	r2, [r4, #8]
 8017792:	e7f4      	b.n	801777e <__swsetup_r+0x8e>
 8017794:	2000      	movs	r0, #0
 8017796:	e7f7      	b.n	8017788 <__swsetup_r+0x98>
 8017798:	24000060 	.word	0x24000060

0801779c <memcmp>:
 801779c:	b510      	push	{r4, lr}
 801779e:	3901      	subs	r1, #1
 80177a0:	4402      	add	r2, r0
 80177a2:	4290      	cmp	r0, r2
 80177a4:	d101      	bne.n	80177aa <memcmp+0xe>
 80177a6:	2000      	movs	r0, #0
 80177a8:	e005      	b.n	80177b6 <memcmp+0x1a>
 80177aa:	7803      	ldrb	r3, [r0, #0]
 80177ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80177b0:	42a3      	cmp	r3, r4
 80177b2:	d001      	beq.n	80177b8 <memcmp+0x1c>
 80177b4:	1b18      	subs	r0, r3, r4
 80177b6:	bd10      	pop	{r4, pc}
 80177b8:	3001      	adds	r0, #1
 80177ba:	e7f2      	b.n	80177a2 <memcmp+0x6>

080177bc <memset>:
 80177bc:	4402      	add	r2, r0
 80177be:	4603      	mov	r3, r0
 80177c0:	4293      	cmp	r3, r2
 80177c2:	d100      	bne.n	80177c6 <memset+0xa>
 80177c4:	4770      	bx	lr
 80177c6:	f803 1b01 	strb.w	r1, [r3], #1
 80177ca:	e7f9      	b.n	80177c0 <memset+0x4>

080177cc <_close_r>:
 80177cc:	b538      	push	{r3, r4, r5, lr}
 80177ce:	4d06      	ldr	r5, [pc, #24]	@ (80177e8 <_close_r+0x1c>)
 80177d0:	2300      	movs	r3, #0
 80177d2:	4604      	mov	r4, r0
 80177d4:	4608      	mov	r0, r1
 80177d6:	602b      	str	r3, [r5, #0]
 80177d8:	f7e9 fc0c 	bl	8000ff4 <_close>
 80177dc:	1c43      	adds	r3, r0, #1
 80177de:	d102      	bne.n	80177e6 <_close_r+0x1a>
 80177e0:	682b      	ldr	r3, [r5, #0]
 80177e2:	b103      	cbz	r3, 80177e6 <_close_r+0x1a>
 80177e4:	6023      	str	r3, [r4, #0]
 80177e6:	bd38      	pop	{r3, r4, r5, pc}
 80177e8:	24007d1c 	.word	0x24007d1c

080177ec <_reclaim_reent>:
 80177ec:	4b2d      	ldr	r3, [pc, #180]	@ (80178a4 <_reclaim_reent+0xb8>)
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	4283      	cmp	r3, r0
 80177f2:	b570      	push	{r4, r5, r6, lr}
 80177f4:	4604      	mov	r4, r0
 80177f6:	d053      	beq.n	80178a0 <_reclaim_reent+0xb4>
 80177f8:	69c3      	ldr	r3, [r0, #28]
 80177fa:	b31b      	cbz	r3, 8017844 <_reclaim_reent+0x58>
 80177fc:	68db      	ldr	r3, [r3, #12]
 80177fe:	b163      	cbz	r3, 801781a <_reclaim_reent+0x2e>
 8017800:	2500      	movs	r5, #0
 8017802:	69e3      	ldr	r3, [r4, #28]
 8017804:	68db      	ldr	r3, [r3, #12]
 8017806:	5959      	ldr	r1, [r3, r5]
 8017808:	b9b1      	cbnz	r1, 8017838 <_reclaim_reent+0x4c>
 801780a:	3504      	adds	r5, #4
 801780c:	2d80      	cmp	r5, #128	@ 0x80
 801780e:	d1f8      	bne.n	8017802 <_reclaim_reent+0x16>
 8017810:	69e3      	ldr	r3, [r4, #28]
 8017812:	4620      	mov	r0, r4
 8017814:	68d9      	ldr	r1, [r3, #12]
 8017816:	f000 f8d1 	bl	80179bc <_free_r>
 801781a:	69e3      	ldr	r3, [r4, #28]
 801781c:	6819      	ldr	r1, [r3, #0]
 801781e:	b111      	cbz	r1, 8017826 <_reclaim_reent+0x3a>
 8017820:	4620      	mov	r0, r4
 8017822:	f000 f8cb 	bl	80179bc <_free_r>
 8017826:	69e3      	ldr	r3, [r4, #28]
 8017828:	689d      	ldr	r5, [r3, #8]
 801782a:	b15d      	cbz	r5, 8017844 <_reclaim_reent+0x58>
 801782c:	4629      	mov	r1, r5
 801782e:	4620      	mov	r0, r4
 8017830:	682d      	ldr	r5, [r5, #0]
 8017832:	f000 f8c3 	bl	80179bc <_free_r>
 8017836:	e7f8      	b.n	801782a <_reclaim_reent+0x3e>
 8017838:	680e      	ldr	r6, [r1, #0]
 801783a:	4620      	mov	r0, r4
 801783c:	f000 f8be 	bl	80179bc <_free_r>
 8017840:	4631      	mov	r1, r6
 8017842:	e7e1      	b.n	8017808 <_reclaim_reent+0x1c>
 8017844:	6961      	ldr	r1, [r4, #20]
 8017846:	b111      	cbz	r1, 801784e <_reclaim_reent+0x62>
 8017848:	4620      	mov	r0, r4
 801784a:	f000 f8b7 	bl	80179bc <_free_r>
 801784e:	69e1      	ldr	r1, [r4, #28]
 8017850:	b111      	cbz	r1, 8017858 <_reclaim_reent+0x6c>
 8017852:	4620      	mov	r0, r4
 8017854:	f000 f8b2 	bl	80179bc <_free_r>
 8017858:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801785a:	b111      	cbz	r1, 8017862 <_reclaim_reent+0x76>
 801785c:	4620      	mov	r0, r4
 801785e:	f000 f8ad 	bl	80179bc <_free_r>
 8017862:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017864:	b111      	cbz	r1, 801786c <_reclaim_reent+0x80>
 8017866:	4620      	mov	r0, r4
 8017868:	f000 f8a8 	bl	80179bc <_free_r>
 801786c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801786e:	b111      	cbz	r1, 8017876 <_reclaim_reent+0x8a>
 8017870:	4620      	mov	r0, r4
 8017872:	f000 f8a3 	bl	80179bc <_free_r>
 8017876:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017878:	b111      	cbz	r1, 8017880 <_reclaim_reent+0x94>
 801787a:	4620      	mov	r0, r4
 801787c:	f000 f89e 	bl	80179bc <_free_r>
 8017880:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017882:	b111      	cbz	r1, 801788a <_reclaim_reent+0x9e>
 8017884:	4620      	mov	r0, r4
 8017886:	f000 f899 	bl	80179bc <_free_r>
 801788a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801788c:	b111      	cbz	r1, 8017894 <_reclaim_reent+0xa8>
 801788e:	4620      	mov	r0, r4
 8017890:	f000 f894 	bl	80179bc <_free_r>
 8017894:	6a23      	ldr	r3, [r4, #32]
 8017896:	b11b      	cbz	r3, 80178a0 <_reclaim_reent+0xb4>
 8017898:	4620      	mov	r0, r4
 801789a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801789e:	4718      	bx	r3
 80178a0:	bd70      	pop	{r4, r5, r6, pc}
 80178a2:	bf00      	nop
 80178a4:	24000060 	.word	0x24000060

080178a8 <_lseek_r>:
 80178a8:	b538      	push	{r3, r4, r5, lr}
 80178aa:	4d07      	ldr	r5, [pc, #28]	@ (80178c8 <_lseek_r+0x20>)
 80178ac:	4604      	mov	r4, r0
 80178ae:	4608      	mov	r0, r1
 80178b0:	4611      	mov	r1, r2
 80178b2:	2200      	movs	r2, #0
 80178b4:	602a      	str	r2, [r5, #0]
 80178b6:	461a      	mov	r2, r3
 80178b8:	f7e9 fbc3 	bl	8001042 <_lseek>
 80178bc:	1c43      	adds	r3, r0, #1
 80178be:	d102      	bne.n	80178c6 <_lseek_r+0x1e>
 80178c0:	682b      	ldr	r3, [r5, #0]
 80178c2:	b103      	cbz	r3, 80178c6 <_lseek_r+0x1e>
 80178c4:	6023      	str	r3, [r4, #0]
 80178c6:	bd38      	pop	{r3, r4, r5, pc}
 80178c8:	24007d1c 	.word	0x24007d1c

080178cc <_read_r>:
 80178cc:	b538      	push	{r3, r4, r5, lr}
 80178ce:	4d07      	ldr	r5, [pc, #28]	@ (80178ec <_read_r+0x20>)
 80178d0:	4604      	mov	r4, r0
 80178d2:	4608      	mov	r0, r1
 80178d4:	4611      	mov	r1, r2
 80178d6:	2200      	movs	r2, #0
 80178d8:	602a      	str	r2, [r5, #0]
 80178da:	461a      	mov	r2, r3
 80178dc:	f7e9 fb51 	bl	8000f82 <_read>
 80178e0:	1c43      	adds	r3, r0, #1
 80178e2:	d102      	bne.n	80178ea <_read_r+0x1e>
 80178e4:	682b      	ldr	r3, [r5, #0]
 80178e6:	b103      	cbz	r3, 80178ea <_read_r+0x1e>
 80178e8:	6023      	str	r3, [r4, #0]
 80178ea:	bd38      	pop	{r3, r4, r5, pc}
 80178ec:	24007d1c 	.word	0x24007d1c

080178f0 <_write_r>:
 80178f0:	b538      	push	{r3, r4, r5, lr}
 80178f2:	4d07      	ldr	r5, [pc, #28]	@ (8017910 <_write_r+0x20>)
 80178f4:	4604      	mov	r4, r0
 80178f6:	4608      	mov	r0, r1
 80178f8:	4611      	mov	r1, r2
 80178fa:	2200      	movs	r2, #0
 80178fc:	602a      	str	r2, [r5, #0]
 80178fe:	461a      	mov	r2, r3
 8017900:	f7e9 fb5c 	bl	8000fbc <_write>
 8017904:	1c43      	adds	r3, r0, #1
 8017906:	d102      	bne.n	801790e <_write_r+0x1e>
 8017908:	682b      	ldr	r3, [r5, #0]
 801790a:	b103      	cbz	r3, 801790e <_write_r+0x1e>
 801790c:	6023      	str	r3, [r4, #0]
 801790e:	bd38      	pop	{r3, r4, r5, pc}
 8017910:	24007d1c 	.word	0x24007d1c

08017914 <__libc_init_array>:
 8017914:	b570      	push	{r4, r5, r6, lr}
 8017916:	4d0d      	ldr	r5, [pc, #52]	@ (801794c <__libc_init_array+0x38>)
 8017918:	4c0d      	ldr	r4, [pc, #52]	@ (8017950 <__libc_init_array+0x3c>)
 801791a:	1b64      	subs	r4, r4, r5
 801791c:	10a4      	asrs	r4, r4, #2
 801791e:	2600      	movs	r6, #0
 8017920:	42a6      	cmp	r6, r4
 8017922:	d109      	bne.n	8017938 <__libc_init_array+0x24>
 8017924:	4d0b      	ldr	r5, [pc, #44]	@ (8017954 <__libc_init_array+0x40>)
 8017926:	4c0c      	ldr	r4, [pc, #48]	@ (8017958 <__libc_init_array+0x44>)
 8017928:	f000 fdb4 	bl	8018494 <_init>
 801792c:	1b64      	subs	r4, r4, r5
 801792e:	10a4      	asrs	r4, r4, #2
 8017930:	2600      	movs	r6, #0
 8017932:	42a6      	cmp	r6, r4
 8017934:	d105      	bne.n	8017942 <__libc_init_array+0x2e>
 8017936:	bd70      	pop	{r4, r5, r6, pc}
 8017938:	f855 3b04 	ldr.w	r3, [r5], #4
 801793c:	4798      	blx	r3
 801793e:	3601      	adds	r6, #1
 8017940:	e7ee      	b.n	8017920 <__libc_init_array+0xc>
 8017942:	f855 3b04 	ldr.w	r3, [r5], #4
 8017946:	4798      	blx	r3
 8017948:	3601      	adds	r6, #1
 801794a:	e7f2      	b.n	8017932 <__libc_init_array+0x1e>
 801794c:	0801ba5c 	.word	0x0801ba5c
 8017950:	0801ba5c 	.word	0x0801ba5c
 8017954:	0801ba5c 	.word	0x0801ba5c
 8017958:	0801ba60 	.word	0x0801ba60

0801795c <__retarget_lock_init_recursive>:
 801795c:	4770      	bx	lr

0801795e <__retarget_lock_acquire_recursive>:
 801795e:	4770      	bx	lr

08017960 <__retarget_lock_release_recursive>:
 8017960:	4770      	bx	lr

08017962 <memcpy>:
 8017962:	440a      	add	r2, r1
 8017964:	4291      	cmp	r1, r2
 8017966:	f100 33ff 	add.w	r3, r0, #4294967295
 801796a:	d100      	bne.n	801796e <memcpy+0xc>
 801796c:	4770      	bx	lr
 801796e:	b510      	push	{r4, lr}
 8017970:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017974:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017978:	4291      	cmp	r1, r2
 801797a:	d1f9      	bne.n	8017970 <memcpy+0xe>
 801797c:	bd10      	pop	{r4, pc}
	...

08017980 <__assert_func>:
 8017980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017982:	4614      	mov	r4, r2
 8017984:	461a      	mov	r2, r3
 8017986:	4b09      	ldr	r3, [pc, #36]	@ (80179ac <__assert_func+0x2c>)
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	4605      	mov	r5, r0
 801798c:	68d8      	ldr	r0, [r3, #12]
 801798e:	b14c      	cbz	r4, 80179a4 <__assert_func+0x24>
 8017990:	4b07      	ldr	r3, [pc, #28]	@ (80179b0 <__assert_func+0x30>)
 8017992:	9100      	str	r1, [sp, #0]
 8017994:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017998:	4906      	ldr	r1, [pc, #24]	@ (80179b4 <__assert_func+0x34>)
 801799a:	462b      	mov	r3, r5
 801799c:	f000 fc88 	bl	80182b0 <fiprintf>
 80179a0:	f000 fd2c 	bl	80183fc <abort>
 80179a4:	4b04      	ldr	r3, [pc, #16]	@ (80179b8 <__assert_func+0x38>)
 80179a6:	461c      	mov	r4, r3
 80179a8:	e7f3      	b.n	8017992 <__assert_func+0x12>
 80179aa:	bf00      	nop
 80179ac:	24000060 	.word	0x24000060
 80179b0:	0801b9e3 	.word	0x0801b9e3
 80179b4:	0801b9f0 	.word	0x0801b9f0
 80179b8:	0801ba1e 	.word	0x0801ba1e

080179bc <_free_r>:
 80179bc:	b538      	push	{r3, r4, r5, lr}
 80179be:	4605      	mov	r5, r0
 80179c0:	2900      	cmp	r1, #0
 80179c2:	d041      	beq.n	8017a48 <_free_r+0x8c>
 80179c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80179c8:	1f0c      	subs	r4, r1, #4
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	bfb8      	it	lt
 80179ce:	18e4      	addlt	r4, r4, r3
 80179d0:	f000 f8e8 	bl	8017ba4 <__malloc_lock>
 80179d4:	4a1d      	ldr	r2, [pc, #116]	@ (8017a4c <_free_r+0x90>)
 80179d6:	6813      	ldr	r3, [r2, #0]
 80179d8:	b933      	cbnz	r3, 80179e8 <_free_r+0x2c>
 80179da:	6063      	str	r3, [r4, #4]
 80179dc:	6014      	str	r4, [r2, #0]
 80179de:	4628      	mov	r0, r5
 80179e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179e4:	f000 b8e4 	b.w	8017bb0 <__malloc_unlock>
 80179e8:	42a3      	cmp	r3, r4
 80179ea:	d908      	bls.n	80179fe <_free_r+0x42>
 80179ec:	6820      	ldr	r0, [r4, #0]
 80179ee:	1821      	adds	r1, r4, r0
 80179f0:	428b      	cmp	r3, r1
 80179f2:	bf01      	itttt	eq
 80179f4:	6819      	ldreq	r1, [r3, #0]
 80179f6:	685b      	ldreq	r3, [r3, #4]
 80179f8:	1809      	addeq	r1, r1, r0
 80179fa:	6021      	streq	r1, [r4, #0]
 80179fc:	e7ed      	b.n	80179da <_free_r+0x1e>
 80179fe:	461a      	mov	r2, r3
 8017a00:	685b      	ldr	r3, [r3, #4]
 8017a02:	b10b      	cbz	r3, 8017a08 <_free_r+0x4c>
 8017a04:	42a3      	cmp	r3, r4
 8017a06:	d9fa      	bls.n	80179fe <_free_r+0x42>
 8017a08:	6811      	ldr	r1, [r2, #0]
 8017a0a:	1850      	adds	r0, r2, r1
 8017a0c:	42a0      	cmp	r0, r4
 8017a0e:	d10b      	bne.n	8017a28 <_free_r+0x6c>
 8017a10:	6820      	ldr	r0, [r4, #0]
 8017a12:	4401      	add	r1, r0
 8017a14:	1850      	adds	r0, r2, r1
 8017a16:	4283      	cmp	r3, r0
 8017a18:	6011      	str	r1, [r2, #0]
 8017a1a:	d1e0      	bne.n	80179de <_free_r+0x22>
 8017a1c:	6818      	ldr	r0, [r3, #0]
 8017a1e:	685b      	ldr	r3, [r3, #4]
 8017a20:	6053      	str	r3, [r2, #4]
 8017a22:	4408      	add	r0, r1
 8017a24:	6010      	str	r0, [r2, #0]
 8017a26:	e7da      	b.n	80179de <_free_r+0x22>
 8017a28:	d902      	bls.n	8017a30 <_free_r+0x74>
 8017a2a:	230c      	movs	r3, #12
 8017a2c:	602b      	str	r3, [r5, #0]
 8017a2e:	e7d6      	b.n	80179de <_free_r+0x22>
 8017a30:	6820      	ldr	r0, [r4, #0]
 8017a32:	1821      	adds	r1, r4, r0
 8017a34:	428b      	cmp	r3, r1
 8017a36:	bf04      	itt	eq
 8017a38:	6819      	ldreq	r1, [r3, #0]
 8017a3a:	685b      	ldreq	r3, [r3, #4]
 8017a3c:	6063      	str	r3, [r4, #4]
 8017a3e:	bf04      	itt	eq
 8017a40:	1809      	addeq	r1, r1, r0
 8017a42:	6021      	streq	r1, [r4, #0]
 8017a44:	6054      	str	r4, [r2, #4]
 8017a46:	e7ca      	b.n	80179de <_free_r+0x22>
 8017a48:	bd38      	pop	{r3, r4, r5, pc}
 8017a4a:	bf00      	nop
 8017a4c:	24007d28 	.word	0x24007d28

08017a50 <malloc>:
 8017a50:	4b02      	ldr	r3, [pc, #8]	@ (8017a5c <malloc+0xc>)
 8017a52:	4601      	mov	r1, r0
 8017a54:	6818      	ldr	r0, [r3, #0]
 8017a56:	f000 b825 	b.w	8017aa4 <_malloc_r>
 8017a5a:	bf00      	nop
 8017a5c:	24000060 	.word	0x24000060

08017a60 <sbrk_aligned>:
 8017a60:	b570      	push	{r4, r5, r6, lr}
 8017a62:	4e0f      	ldr	r6, [pc, #60]	@ (8017aa0 <sbrk_aligned+0x40>)
 8017a64:	460c      	mov	r4, r1
 8017a66:	6831      	ldr	r1, [r6, #0]
 8017a68:	4605      	mov	r5, r0
 8017a6a:	b911      	cbnz	r1, 8017a72 <sbrk_aligned+0x12>
 8017a6c:	f000 fcb6 	bl	80183dc <_sbrk_r>
 8017a70:	6030      	str	r0, [r6, #0]
 8017a72:	4621      	mov	r1, r4
 8017a74:	4628      	mov	r0, r5
 8017a76:	f000 fcb1 	bl	80183dc <_sbrk_r>
 8017a7a:	1c43      	adds	r3, r0, #1
 8017a7c:	d103      	bne.n	8017a86 <sbrk_aligned+0x26>
 8017a7e:	f04f 34ff 	mov.w	r4, #4294967295
 8017a82:	4620      	mov	r0, r4
 8017a84:	bd70      	pop	{r4, r5, r6, pc}
 8017a86:	1cc4      	adds	r4, r0, #3
 8017a88:	f024 0403 	bic.w	r4, r4, #3
 8017a8c:	42a0      	cmp	r0, r4
 8017a8e:	d0f8      	beq.n	8017a82 <sbrk_aligned+0x22>
 8017a90:	1a21      	subs	r1, r4, r0
 8017a92:	4628      	mov	r0, r5
 8017a94:	f000 fca2 	bl	80183dc <_sbrk_r>
 8017a98:	3001      	adds	r0, #1
 8017a9a:	d1f2      	bne.n	8017a82 <sbrk_aligned+0x22>
 8017a9c:	e7ef      	b.n	8017a7e <sbrk_aligned+0x1e>
 8017a9e:	bf00      	nop
 8017aa0:	24007d24 	.word	0x24007d24

08017aa4 <_malloc_r>:
 8017aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017aa8:	1ccd      	adds	r5, r1, #3
 8017aaa:	f025 0503 	bic.w	r5, r5, #3
 8017aae:	3508      	adds	r5, #8
 8017ab0:	2d0c      	cmp	r5, #12
 8017ab2:	bf38      	it	cc
 8017ab4:	250c      	movcc	r5, #12
 8017ab6:	2d00      	cmp	r5, #0
 8017ab8:	4606      	mov	r6, r0
 8017aba:	db01      	blt.n	8017ac0 <_malloc_r+0x1c>
 8017abc:	42a9      	cmp	r1, r5
 8017abe:	d904      	bls.n	8017aca <_malloc_r+0x26>
 8017ac0:	230c      	movs	r3, #12
 8017ac2:	6033      	str	r3, [r6, #0]
 8017ac4:	2000      	movs	r0, #0
 8017ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017aca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017ba0 <_malloc_r+0xfc>
 8017ace:	f000 f869 	bl	8017ba4 <__malloc_lock>
 8017ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8017ad6:	461c      	mov	r4, r3
 8017ad8:	bb44      	cbnz	r4, 8017b2c <_malloc_r+0x88>
 8017ada:	4629      	mov	r1, r5
 8017adc:	4630      	mov	r0, r6
 8017ade:	f7ff ffbf 	bl	8017a60 <sbrk_aligned>
 8017ae2:	1c43      	adds	r3, r0, #1
 8017ae4:	4604      	mov	r4, r0
 8017ae6:	d158      	bne.n	8017b9a <_malloc_r+0xf6>
 8017ae8:	f8d8 4000 	ldr.w	r4, [r8]
 8017aec:	4627      	mov	r7, r4
 8017aee:	2f00      	cmp	r7, #0
 8017af0:	d143      	bne.n	8017b7a <_malloc_r+0xd6>
 8017af2:	2c00      	cmp	r4, #0
 8017af4:	d04b      	beq.n	8017b8e <_malloc_r+0xea>
 8017af6:	6823      	ldr	r3, [r4, #0]
 8017af8:	4639      	mov	r1, r7
 8017afa:	4630      	mov	r0, r6
 8017afc:	eb04 0903 	add.w	r9, r4, r3
 8017b00:	f000 fc6c 	bl	80183dc <_sbrk_r>
 8017b04:	4581      	cmp	r9, r0
 8017b06:	d142      	bne.n	8017b8e <_malloc_r+0xea>
 8017b08:	6821      	ldr	r1, [r4, #0]
 8017b0a:	1a6d      	subs	r5, r5, r1
 8017b0c:	4629      	mov	r1, r5
 8017b0e:	4630      	mov	r0, r6
 8017b10:	f7ff ffa6 	bl	8017a60 <sbrk_aligned>
 8017b14:	3001      	adds	r0, #1
 8017b16:	d03a      	beq.n	8017b8e <_malloc_r+0xea>
 8017b18:	6823      	ldr	r3, [r4, #0]
 8017b1a:	442b      	add	r3, r5
 8017b1c:	6023      	str	r3, [r4, #0]
 8017b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8017b22:	685a      	ldr	r2, [r3, #4]
 8017b24:	bb62      	cbnz	r2, 8017b80 <_malloc_r+0xdc>
 8017b26:	f8c8 7000 	str.w	r7, [r8]
 8017b2a:	e00f      	b.n	8017b4c <_malloc_r+0xa8>
 8017b2c:	6822      	ldr	r2, [r4, #0]
 8017b2e:	1b52      	subs	r2, r2, r5
 8017b30:	d420      	bmi.n	8017b74 <_malloc_r+0xd0>
 8017b32:	2a0b      	cmp	r2, #11
 8017b34:	d917      	bls.n	8017b66 <_malloc_r+0xc2>
 8017b36:	1961      	adds	r1, r4, r5
 8017b38:	42a3      	cmp	r3, r4
 8017b3a:	6025      	str	r5, [r4, #0]
 8017b3c:	bf18      	it	ne
 8017b3e:	6059      	strne	r1, [r3, #4]
 8017b40:	6863      	ldr	r3, [r4, #4]
 8017b42:	bf08      	it	eq
 8017b44:	f8c8 1000 	streq.w	r1, [r8]
 8017b48:	5162      	str	r2, [r4, r5]
 8017b4a:	604b      	str	r3, [r1, #4]
 8017b4c:	4630      	mov	r0, r6
 8017b4e:	f000 f82f 	bl	8017bb0 <__malloc_unlock>
 8017b52:	f104 000b 	add.w	r0, r4, #11
 8017b56:	1d23      	adds	r3, r4, #4
 8017b58:	f020 0007 	bic.w	r0, r0, #7
 8017b5c:	1ac2      	subs	r2, r0, r3
 8017b5e:	bf1c      	itt	ne
 8017b60:	1a1b      	subne	r3, r3, r0
 8017b62:	50a3      	strne	r3, [r4, r2]
 8017b64:	e7af      	b.n	8017ac6 <_malloc_r+0x22>
 8017b66:	6862      	ldr	r2, [r4, #4]
 8017b68:	42a3      	cmp	r3, r4
 8017b6a:	bf0c      	ite	eq
 8017b6c:	f8c8 2000 	streq.w	r2, [r8]
 8017b70:	605a      	strne	r2, [r3, #4]
 8017b72:	e7eb      	b.n	8017b4c <_malloc_r+0xa8>
 8017b74:	4623      	mov	r3, r4
 8017b76:	6864      	ldr	r4, [r4, #4]
 8017b78:	e7ae      	b.n	8017ad8 <_malloc_r+0x34>
 8017b7a:	463c      	mov	r4, r7
 8017b7c:	687f      	ldr	r7, [r7, #4]
 8017b7e:	e7b6      	b.n	8017aee <_malloc_r+0x4a>
 8017b80:	461a      	mov	r2, r3
 8017b82:	685b      	ldr	r3, [r3, #4]
 8017b84:	42a3      	cmp	r3, r4
 8017b86:	d1fb      	bne.n	8017b80 <_malloc_r+0xdc>
 8017b88:	2300      	movs	r3, #0
 8017b8a:	6053      	str	r3, [r2, #4]
 8017b8c:	e7de      	b.n	8017b4c <_malloc_r+0xa8>
 8017b8e:	230c      	movs	r3, #12
 8017b90:	6033      	str	r3, [r6, #0]
 8017b92:	4630      	mov	r0, r6
 8017b94:	f000 f80c 	bl	8017bb0 <__malloc_unlock>
 8017b98:	e794      	b.n	8017ac4 <_malloc_r+0x20>
 8017b9a:	6005      	str	r5, [r0, #0]
 8017b9c:	e7d6      	b.n	8017b4c <_malloc_r+0xa8>
 8017b9e:	bf00      	nop
 8017ba0:	24007d28 	.word	0x24007d28

08017ba4 <__malloc_lock>:
 8017ba4:	4801      	ldr	r0, [pc, #4]	@ (8017bac <__malloc_lock+0x8>)
 8017ba6:	f7ff beda 	b.w	801795e <__retarget_lock_acquire_recursive>
 8017baa:	bf00      	nop
 8017bac:	24007d20 	.word	0x24007d20

08017bb0 <__malloc_unlock>:
 8017bb0:	4801      	ldr	r0, [pc, #4]	@ (8017bb8 <__malloc_unlock+0x8>)
 8017bb2:	f7ff bed5 	b.w	8017960 <__retarget_lock_release_recursive>
 8017bb6:	bf00      	nop
 8017bb8:	24007d20 	.word	0x24007d20

08017bbc <__sfputc_r>:
 8017bbc:	6893      	ldr	r3, [r2, #8]
 8017bbe:	3b01      	subs	r3, #1
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	b410      	push	{r4}
 8017bc4:	6093      	str	r3, [r2, #8]
 8017bc6:	da08      	bge.n	8017bda <__sfputc_r+0x1e>
 8017bc8:	6994      	ldr	r4, [r2, #24]
 8017bca:	42a3      	cmp	r3, r4
 8017bcc:	db01      	blt.n	8017bd2 <__sfputc_r+0x16>
 8017bce:	290a      	cmp	r1, #10
 8017bd0:	d103      	bne.n	8017bda <__sfputc_r+0x1e>
 8017bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bd6:	f7ff bd4c 	b.w	8017672 <__swbuf_r>
 8017bda:	6813      	ldr	r3, [r2, #0]
 8017bdc:	1c58      	adds	r0, r3, #1
 8017bde:	6010      	str	r0, [r2, #0]
 8017be0:	7019      	strb	r1, [r3, #0]
 8017be2:	4608      	mov	r0, r1
 8017be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017be8:	4770      	bx	lr

08017bea <__sfputs_r>:
 8017bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bec:	4606      	mov	r6, r0
 8017bee:	460f      	mov	r7, r1
 8017bf0:	4614      	mov	r4, r2
 8017bf2:	18d5      	adds	r5, r2, r3
 8017bf4:	42ac      	cmp	r4, r5
 8017bf6:	d101      	bne.n	8017bfc <__sfputs_r+0x12>
 8017bf8:	2000      	movs	r0, #0
 8017bfa:	e007      	b.n	8017c0c <__sfputs_r+0x22>
 8017bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c00:	463a      	mov	r2, r7
 8017c02:	4630      	mov	r0, r6
 8017c04:	f7ff ffda 	bl	8017bbc <__sfputc_r>
 8017c08:	1c43      	adds	r3, r0, #1
 8017c0a:	d1f3      	bne.n	8017bf4 <__sfputs_r+0xa>
 8017c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017c10 <_vfiprintf_r>:
 8017c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c14:	460d      	mov	r5, r1
 8017c16:	b09d      	sub	sp, #116	@ 0x74
 8017c18:	4614      	mov	r4, r2
 8017c1a:	4698      	mov	r8, r3
 8017c1c:	4606      	mov	r6, r0
 8017c1e:	b118      	cbz	r0, 8017c28 <_vfiprintf_r+0x18>
 8017c20:	6a03      	ldr	r3, [r0, #32]
 8017c22:	b90b      	cbnz	r3, 8017c28 <_vfiprintf_r+0x18>
 8017c24:	f7ff fc3c 	bl	80174a0 <__sinit>
 8017c28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017c2a:	07d9      	lsls	r1, r3, #31
 8017c2c:	d405      	bmi.n	8017c3a <_vfiprintf_r+0x2a>
 8017c2e:	89ab      	ldrh	r3, [r5, #12]
 8017c30:	059a      	lsls	r2, r3, #22
 8017c32:	d402      	bmi.n	8017c3a <_vfiprintf_r+0x2a>
 8017c34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017c36:	f7ff fe92 	bl	801795e <__retarget_lock_acquire_recursive>
 8017c3a:	89ab      	ldrh	r3, [r5, #12]
 8017c3c:	071b      	lsls	r3, r3, #28
 8017c3e:	d501      	bpl.n	8017c44 <_vfiprintf_r+0x34>
 8017c40:	692b      	ldr	r3, [r5, #16]
 8017c42:	b99b      	cbnz	r3, 8017c6c <_vfiprintf_r+0x5c>
 8017c44:	4629      	mov	r1, r5
 8017c46:	4630      	mov	r0, r6
 8017c48:	f7ff fd52 	bl	80176f0 <__swsetup_r>
 8017c4c:	b170      	cbz	r0, 8017c6c <_vfiprintf_r+0x5c>
 8017c4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017c50:	07dc      	lsls	r4, r3, #31
 8017c52:	d504      	bpl.n	8017c5e <_vfiprintf_r+0x4e>
 8017c54:	f04f 30ff 	mov.w	r0, #4294967295
 8017c58:	b01d      	add	sp, #116	@ 0x74
 8017c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c5e:	89ab      	ldrh	r3, [r5, #12]
 8017c60:	0598      	lsls	r0, r3, #22
 8017c62:	d4f7      	bmi.n	8017c54 <_vfiprintf_r+0x44>
 8017c64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017c66:	f7ff fe7b 	bl	8017960 <__retarget_lock_release_recursive>
 8017c6a:	e7f3      	b.n	8017c54 <_vfiprintf_r+0x44>
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017c70:	2320      	movs	r3, #32
 8017c72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8017c7a:	2330      	movs	r3, #48	@ 0x30
 8017c7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017e2c <_vfiprintf_r+0x21c>
 8017c80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017c84:	f04f 0901 	mov.w	r9, #1
 8017c88:	4623      	mov	r3, r4
 8017c8a:	469a      	mov	sl, r3
 8017c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c90:	b10a      	cbz	r2, 8017c96 <_vfiprintf_r+0x86>
 8017c92:	2a25      	cmp	r2, #37	@ 0x25
 8017c94:	d1f9      	bne.n	8017c8a <_vfiprintf_r+0x7a>
 8017c96:	ebba 0b04 	subs.w	fp, sl, r4
 8017c9a:	d00b      	beq.n	8017cb4 <_vfiprintf_r+0xa4>
 8017c9c:	465b      	mov	r3, fp
 8017c9e:	4622      	mov	r2, r4
 8017ca0:	4629      	mov	r1, r5
 8017ca2:	4630      	mov	r0, r6
 8017ca4:	f7ff ffa1 	bl	8017bea <__sfputs_r>
 8017ca8:	3001      	adds	r0, #1
 8017caa:	f000 80a7 	beq.w	8017dfc <_vfiprintf_r+0x1ec>
 8017cae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017cb0:	445a      	add	r2, fp
 8017cb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8017cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	f000 809f 	beq.w	8017dfc <_vfiprintf_r+0x1ec>
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8017cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017cc8:	f10a 0a01 	add.w	sl, sl, #1
 8017ccc:	9304      	str	r3, [sp, #16]
 8017cce:	9307      	str	r3, [sp, #28]
 8017cd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017cd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8017cd6:	4654      	mov	r4, sl
 8017cd8:	2205      	movs	r2, #5
 8017cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cde:	4853      	ldr	r0, [pc, #332]	@ (8017e2c <_vfiprintf_r+0x21c>)
 8017ce0:	f7e8 fb06 	bl	80002f0 <memchr>
 8017ce4:	9a04      	ldr	r2, [sp, #16]
 8017ce6:	b9d8      	cbnz	r0, 8017d20 <_vfiprintf_r+0x110>
 8017ce8:	06d1      	lsls	r1, r2, #27
 8017cea:	bf44      	itt	mi
 8017cec:	2320      	movmi	r3, #32
 8017cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017cf2:	0713      	lsls	r3, r2, #28
 8017cf4:	bf44      	itt	mi
 8017cf6:	232b      	movmi	r3, #43	@ 0x2b
 8017cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8017d00:	2b2a      	cmp	r3, #42	@ 0x2a
 8017d02:	d015      	beq.n	8017d30 <_vfiprintf_r+0x120>
 8017d04:	9a07      	ldr	r2, [sp, #28]
 8017d06:	4654      	mov	r4, sl
 8017d08:	2000      	movs	r0, #0
 8017d0a:	f04f 0c0a 	mov.w	ip, #10
 8017d0e:	4621      	mov	r1, r4
 8017d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d14:	3b30      	subs	r3, #48	@ 0x30
 8017d16:	2b09      	cmp	r3, #9
 8017d18:	d94b      	bls.n	8017db2 <_vfiprintf_r+0x1a2>
 8017d1a:	b1b0      	cbz	r0, 8017d4a <_vfiprintf_r+0x13a>
 8017d1c:	9207      	str	r2, [sp, #28]
 8017d1e:	e014      	b.n	8017d4a <_vfiprintf_r+0x13a>
 8017d20:	eba0 0308 	sub.w	r3, r0, r8
 8017d24:	fa09 f303 	lsl.w	r3, r9, r3
 8017d28:	4313      	orrs	r3, r2
 8017d2a:	9304      	str	r3, [sp, #16]
 8017d2c:	46a2      	mov	sl, r4
 8017d2e:	e7d2      	b.n	8017cd6 <_vfiprintf_r+0xc6>
 8017d30:	9b03      	ldr	r3, [sp, #12]
 8017d32:	1d19      	adds	r1, r3, #4
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	9103      	str	r1, [sp, #12]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	bfbb      	ittet	lt
 8017d3c:	425b      	neglt	r3, r3
 8017d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8017d42:	9307      	strge	r3, [sp, #28]
 8017d44:	9307      	strlt	r3, [sp, #28]
 8017d46:	bfb8      	it	lt
 8017d48:	9204      	strlt	r2, [sp, #16]
 8017d4a:	7823      	ldrb	r3, [r4, #0]
 8017d4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8017d4e:	d10a      	bne.n	8017d66 <_vfiprintf_r+0x156>
 8017d50:	7863      	ldrb	r3, [r4, #1]
 8017d52:	2b2a      	cmp	r3, #42	@ 0x2a
 8017d54:	d132      	bne.n	8017dbc <_vfiprintf_r+0x1ac>
 8017d56:	9b03      	ldr	r3, [sp, #12]
 8017d58:	1d1a      	adds	r2, r3, #4
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	9203      	str	r2, [sp, #12]
 8017d5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017d62:	3402      	adds	r4, #2
 8017d64:	9305      	str	r3, [sp, #20]
 8017d66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017e3c <_vfiprintf_r+0x22c>
 8017d6a:	7821      	ldrb	r1, [r4, #0]
 8017d6c:	2203      	movs	r2, #3
 8017d6e:	4650      	mov	r0, sl
 8017d70:	f7e8 fabe 	bl	80002f0 <memchr>
 8017d74:	b138      	cbz	r0, 8017d86 <_vfiprintf_r+0x176>
 8017d76:	9b04      	ldr	r3, [sp, #16]
 8017d78:	eba0 000a 	sub.w	r0, r0, sl
 8017d7c:	2240      	movs	r2, #64	@ 0x40
 8017d7e:	4082      	lsls	r2, r0
 8017d80:	4313      	orrs	r3, r2
 8017d82:	3401      	adds	r4, #1
 8017d84:	9304      	str	r3, [sp, #16]
 8017d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d8a:	4829      	ldr	r0, [pc, #164]	@ (8017e30 <_vfiprintf_r+0x220>)
 8017d8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017d90:	2206      	movs	r2, #6
 8017d92:	f7e8 faad 	bl	80002f0 <memchr>
 8017d96:	2800      	cmp	r0, #0
 8017d98:	d03f      	beq.n	8017e1a <_vfiprintf_r+0x20a>
 8017d9a:	4b26      	ldr	r3, [pc, #152]	@ (8017e34 <_vfiprintf_r+0x224>)
 8017d9c:	bb1b      	cbnz	r3, 8017de6 <_vfiprintf_r+0x1d6>
 8017d9e:	9b03      	ldr	r3, [sp, #12]
 8017da0:	3307      	adds	r3, #7
 8017da2:	f023 0307 	bic.w	r3, r3, #7
 8017da6:	3308      	adds	r3, #8
 8017da8:	9303      	str	r3, [sp, #12]
 8017daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017dac:	443b      	add	r3, r7
 8017dae:	9309      	str	r3, [sp, #36]	@ 0x24
 8017db0:	e76a      	b.n	8017c88 <_vfiprintf_r+0x78>
 8017db2:	fb0c 3202 	mla	r2, ip, r2, r3
 8017db6:	460c      	mov	r4, r1
 8017db8:	2001      	movs	r0, #1
 8017dba:	e7a8      	b.n	8017d0e <_vfiprintf_r+0xfe>
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	3401      	adds	r4, #1
 8017dc0:	9305      	str	r3, [sp, #20]
 8017dc2:	4619      	mov	r1, r3
 8017dc4:	f04f 0c0a 	mov.w	ip, #10
 8017dc8:	4620      	mov	r0, r4
 8017dca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017dce:	3a30      	subs	r2, #48	@ 0x30
 8017dd0:	2a09      	cmp	r2, #9
 8017dd2:	d903      	bls.n	8017ddc <_vfiprintf_r+0x1cc>
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d0c6      	beq.n	8017d66 <_vfiprintf_r+0x156>
 8017dd8:	9105      	str	r1, [sp, #20]
 8017dda:	e7c4      	b.n	8017d66 <_vfiprintf_r+0x156>
 8017ddc:	fb0c 2101 	mla	r1, ip, r1, r2
 8017de0:	4604      	mov	r4, r0
 8017de2:	2301      	movs	r3, #1
 8017de4:	e7f0      	b.n	8017dc8 <_vfiprintf_r+0x1b8>
 8017de6:	ab03      	add	r3, sp, #12
 8017de8:	9300      	str	r3, [sp, #0]
 8017dea:	462a      	mov	r2, r5
 8017dec:	4b12      	ldr	r3, [pc, #72]	@ (8017e38 <_vfiprintf_r+0x228>)
 8017dee:	a904      	add	r1, sp, #16
 8017df0:	4630      	mov	r0, r6
 8017df2:	f3af 8000 	nop.w
 8017df6:	4607      	mov	r7, r0
 8017df8:	1c78      	adds	r0, r7, #1
 8017dfa:	d1d6      	bne.n	8017daa <_vfiprintf_r+0x19a>
 8017dfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017dfe:	07d9      	lsls	r1, r3, #31
 8017e00:	d405      	bmi.n	8017e0e <_vfiprintf_r+0x1fe>
 8017e02:	89ab      	ldrh	r3, [r5, #12]
 8017e04:	059a      	lsls	r2, r3, #22
 8017e06:	d402      	bmi.n	8017e0e <_vfiprintf_r+0x1fe>
 8017e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017e0a:	f7ff fda9 	bl	8017960 <__retarget_lock_release_recursive>
 8017e0e:	89ab      	ldrh	r3, [r5, #12]
 8017e10:	065b      	lsls	r3, r3, #25
 8017e12:	f53f af1f 	bmi.w	8017c54 <_vfiprintf_r+0x44>
 8017e16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e18:	e71e      	b.n	8017c58 <_vfiprintf_r+0x48>
 8017e1a:	ab03      	add	r3, sp, #12
 8017e1c:	9300      	str	r3, [sp, #0]
 8017e1e:	462a      	mov	r2, r5
 8017e20:	4b05      	ldr	r3, [pc, #20]	@ (8017e38 <_vfiprintf_r+0x228>)
 8017e22:	a904      	add	r1, sp, #16
 8017e24:	4630      	mov	r0, r6
 8017e26:	f000 f879 	bl	8017f1c <_printf_i>
 8017e2a:	e7e4      	b.n	8017df6 <_vfiprintf_r+0x1e6>
 8017e2c:	0801ba1f 	.word	0x0801ba1f
 8017e30:	0801ba29 	.word	0x0801ba29
 8017e34:	00000000 	.word	0x00000000
 8017e38:	08017beb 	.word	0x08017beb
 8017e3c:	0801ba25 	.word	0x0801ba25

08017e40 <_printf_common>:
 8017e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e44:	4616      	mov	r6, r2
 8017e46:	4698      	mov	r8, r3
 8017e48:	688a      	ldr	r2, [r1, #8]
 8017e4a:	690b      	ldr	r3, [r1, #16]
 8017e4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017e50:	4293      	cmp	r3, r2
 8017e52:	bfb8      	it	lt
 8017e54:	4613      	movlt	r3, r2
 8017e56:	6033      	str	r3, [r6, #0]
 8017e58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017e5c:	4607      	mov	r7, r0
 8017e5e:	460c      	mov	r4, r1
 8017e60:	b10a      	cbz	r2, 8017e66 <_printf_common+0x26>
 8017e62:	3301      	adds	r3, #1
 8017e64:	6033      	str	r3, [r6, #0]
 8017e66:	6823      	ldr	r3, [r4, #0]
 8017e68:	0699      	lsls	r1, r3, #26
 8017e6a:	bf42      	ittt	mi
 8017e6c:	6833      	ldrmi	r3, [r6, #0]
 8017e6e:	3302      	addmi	r3, #2
 8017e70:	6033      	strmi	r3, [r6, #0]
 8017e72:	6825      	ldr	r5, [r4, #0]
 8017e74:	f015 0506 	ands.w	r5, r5, #6
 8017e78:	d106      	bne.n	8017e88 <_printf_common+0x48>
 8017e7a:	f104 0a19 	add.w	sl, r4, #25
 8017e7e:	68e3      	ldr	r3, [r4, #12]
 8017e80:	6832      	ldr	r2, [r6, #0]
 8017e82:	1a9b      	subs	r3, r3, r2
 8017e84:	42ab      	cmp	r3, r5
 8017e86:	dc26      	bgt.n	8017ed6 <_printf_common+0x96>
 8017e88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017e8c:	6822      	ldr	r2, [r4, #0]
 8017e8e:	3b00      	subs	r3, #0
 8017e90:	bf18      	it	ne
 8017e92:	2301      	movne	r3, #1
 8017e94:	0692      	lsls	r2, r2, #26
 8017e96:	d42b      	bmi.n	8017ef0 <_printf_common+0xb0>
 8017e98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017e9c:	4641      	mov	r1, r8
 8017e9e:	4638      	mov	r0, r7
 8017ea0:	47c8      	blx	r9
 8017ea2:	3001      	adds	r0, #1
 8017ea4:	d01e      	beq.n	8017ee4 <_printf_common+0xa4>
 8017ea6:	6823      	ldr	r3, [r4, #0]
 8017ea8:	6922      	ldr	r2, [r4, #16]
 8017eaa:	f003 0306 	and.w	r3, r3, #6
 8017eae:	2b04      	cmp	r3, #4
 8017eb0:	bf02      	ittt	eq
 8017eb2:	68e5      	ldreq	r5, [r4, #12]
 8017eb4:	6833      	ldreq	r3, [r6, #0]
 8017eb6:	1aed      	subeq	r5, r5, r3
 8017eb8:	68a3      	ldr	r3, [r4, #8]
 8017eba:	bf0c      	ite	eq
 8017ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ec0:	2500      	movne	r5, #0
 8017ec2:	4293      	cmp	r3, r2
 8017ec4:	bfc4      	itt	gt
 8017ec6:	1a9b      	subgt	r3, r3, r2
 8017ec8:	18ed      	addgt	r5, r5, r3
 8017eca:	2600      	movs	r6, #0
 8017ecc:	341a      	adds	r4, #26
 8017ece:	42b5      	cmp	r5, r6
 8017ed0:	d11a      	bne.n	8017f08 <_printf_common+0xc8>
 8017ed2:	2000      	movs	r0, #0
 8017ed4:	e008      	b.n	8017ee8 <_printf_common+0xa8>
 8017ed6:	2301      	movs	r3, #1
 8017ed8:	4652      	mov	r2, sl
 8017eda:	4641      	mov	r1, r8
 8017edc:	4638      	mov	r0, r7
 8017ede:	47c8      	blx	r9
 8017ee0:	3001      	adds	r0, #1
 8017ee2:	d103      	bne.n	8017eec <_printf_common+0xac>
 8017ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8017ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017eec:	3501      	adds	r5, #1
 8017eee:	e7c6      	b.n	8017e7e <_printf_common+0x3e>
 8017ef0:	18e1      	adds	r1, r4, r3
 8017ef2:	1c5a      	adds	r2, r3, #1
 8017ef4:	2030      	movs	r0, #48	@ 0x30
 8017ef6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017efa:	4422      	add	r2, r4
 8017efc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017f00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017f04:	3302      	adds	r3, #2
 8017f06:	e7c7      	b.n	8017e98 <_printf_common+0x58>
 8017f08:	2301      	movs	r3, #1
 8017f0a:	4622      	mov	r2, r4
 8017f0c:	4641      	mov	r1, r8
 8017f0e:	4638      	mov	r0, r7
 8017f10:	47c8      	blx	r9
 8017f12:	3001      	adds	r0, #1
 8017f14:	d0e6      	beq.n	8017ee4 <_printf_common+0xa4>
 8017f16:	3601      	adds	r6, #1
 8017f18:	e7d9      	b.n	8017ece <_printf_common+0x8e>
	...

08017f1c <_printf_i>:
 8017f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017f20:	7e0f      	ldrb	r7, [r1, #24]
 8017f22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017f24:	2f78      	cmp	r7, #120	@ 0x78
 8017f26:	4691      	mov	r9, r2
 8017f28:	4680      	mov	r8, r0
 8017f2a:	460c      	mov	r4, r1
 8017f2c:	469a      	mov	sl, r3
 8017f2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017f32:	d807      	bhi.n	8017f44 <_printf_i+0x28>
 8017f34:	2f62      	cmp	r7, #98	@ 0x62
 8017f36:	d80a      	bhi.n	8017f4e <_printf_i+0x32>
 8017f38:	2f00      	cmp	r7, #0
 8017f3a:	f000 80d1 	beq.w	80180e0 <_printf_i+0x1c4>
 8017f3e:	2f58      	cmp	r7, #88	@ 0x58
 8017f40:	f000 80b8 	beq.w	80180b4 <_printf_i+0x198>
 8017f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017f48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017f4c:	e03a      	b.n	8017fc4 <_printf_i+0xa8>
 8017f4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017f52:	2b15      	cmp	r3, #21
 8017f54:	d8f6      	bhi.n	8017f44 <_printf_i+0x28>
 8017f56:	a101      	add	r1, pc, #4	@ (adr r1, 8017f5c <_printf_i+0x40>)
 8017f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017f5c:	08017fb5 	.word	0x08017fb5
 8017f60:	08017fc9 	.word	0x08017fc9
 8017f64:	08017f45 	.word	0x08017f45
 8017f68:	08017f45 	.word	0x08017f45
 8017f6c:	08017f45 	.word	0x08017f45
 8017f70:	08017f45 	.word	0x08017f45
 8017f74:	08017fc9 	.word	0x08017fc9
 8017f78:	08017f45 	.word	0x08017f45
 8017f7c:	08017f45 	.word	0x08017f45
 8017f80:	08017f45 	.word	0x08017f45
 8017f84:	08017f45 	.word	0x08017f45
 8017f88:	080180c7 	.word	0x080180c7
 8017f8c:	08017ff3 	.word	0x08017ff3
 8017f90:	08018081 	.word	0x08018081
 8017f94:	08017f45 	.word	0x08017f45
 8017f98:	08017f45 	.word	0x08017f45
 8017f9c:	080180e9 	.word	0x080180e9
 8017fa0:	08017f45 	.word	0x08017f45
 8017fa4:	08017ff3 	.word	0x08017ff3
 8017fa8:	08017f45 	.word	0x08017f45
 8017fac:	08017f45 	.word	0x08017f45
 8017fb0:	08018089 	.word	0x08018089
 8017fb4:	6833      	ldr	r3, [r6, #0]
 8017fb6:	1d1a      	adds	r2, r3, #4
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	6032      	str	r2, [r6, #0]
 8017fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017fc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017fc4:	2301      	movs	r3, #1
 8017fc6:	e09c      	b.n	8018102 <_printf_i+0x1e6>
 8017fc8:	6833      	ldr	r3, [r6, #0]
 8017fca:	6820      	ldr	r0, [r4, #0]
 8017fcc:	1d19      	adds	r1, r3, #4
 8017fce:	6031      	str	r1, [r6, #0]
 8017fd0:	0606      	lsls	r6, r0, #24
 8017fd2:	d501      	bpl.n	8017fd8 <_printf_i+0xbc>
 8017fd4:	681d      	ldr	r5, [r3, #0]
 8017fd6:	e003      	b.n	8017fe0 <_printf_i+0xc4>
 8017fd8:	0645      	lsls	r5, r0, #25
 8017fda:	d5fb      	bpl.n	8017fd4 <_printf_i+0xb8>
 8017fdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017fe0:	2d00      	cmp	r5, #0
 8017fe2:	da03      	bge.n	8017fec <_printf_i+0xd0>
 8017fe4:	232d      	movs	r3, #45	@ 0x2d
 8017fe6:	426d      	negs	r5, r5
 8017fe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017fec:	4858      	ldr	r0, [pc, #352]	@ (8018150 <_printf_i+0x234>)
 8017fee:	230a      	movs	r3, #10
 8017ff0:	e011      	b.n	8018016 <_printf_i+0xfa>
 8017ff2:	6821      	ldr	r1, [r4, #0]
 8017ff4:	6833      	ldr	r3, [r6, #0]
 8017ff6:	0608      	lsls	r0, r1, #24
 8017ff8:	f853 5b04 	ldr.w	r5, [r3], #4
 8017ffc:	d402      	bmi.n	8018004 <_printf_i+0xe8>
 8017ffe:	0649      	lsls	r1, r1, #25
 8018000:	bf48      	it	mi
 8018002:	b2ad      	uxthmi	r5, r5
 8018004:	2f6f      	cmp	r7, #111	@ 0x6f
 8018006:	4852      	ldr	r0, [pc, #328]	@ (8018150 <_printf_i+0x234>)
 8018008:	6033      	str	r3, [r6, #0]
 801800a:	bf14      	ite	ne
 801800c:	230a      	movne	r3, #10
 801800e:	2308      	moveq	r3, #8
 8018010:	2100      	movs	r1, #0
 8018012:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018016:	6866      	ldr	r6, [r4, #4]
 8018018:	60a6      	str	r6, [r4, #8]
 801801a:	2e00      	cmp	r6, #0
 801801c:	db05      	blt.n	801802a <_printf_i+0x10e>
 801801e:	6821      	ldr	r1, [r4, #0]
 8018020:	432e      	orrs	r6, r5
 8018022:	f021 0104 	bic.w	r1, r1, #4
 8018026:	6021      	str	r1, [r4, #0]
 8018028:	d04b      	beq.n	80180c2 <_printf_i+0x1a6>
 801802a:	4616      	mov	r6, r2
 801802c:	fbb5 f1f3 	udiv	r1, r5, r3
 8018030:	fb03 5711 	mls	r7, r3, r1, r5
 8018034:	5dc7      	ldrb	r7, [r0, r7]
 8018036:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801803a:	462f      	mov	r7, r5
 801803c:	42bb      	cmp	r3, r7
 801803e:	460d      	mov	r5, r1
 8018040:	d9f4      	bls.n	801802c <_printf_i+0x110>
 8018042:	2b08      	cmp	r3, #8
 8018044:	d10b      	bne.n	801805e <_printf_i+0x142>
 8018046:	6823      	ldr	r3, [r4, #0]
 8018048:	07df      	lsls	r7, r3, #31
 801804a:	d508      	bpl.n	801805e <_printf_i+0x142>
 801804c:	6923      	ldr	r3, [r4, #16]
 801804e:	6861      	ldr	r1, [r4, #4]
 8018050:	4299      	cmp	r1, r3
 8018052:	bfde      	ittt	le
 8018054:	2330      	movle	r3, #48	@ 0x30
 8018056:	f806 3c01 	strble.w	r3, [r6, #-1]
 801805a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801805e:	1b92      	subs	r2, r2, r6
 8018060:	6122      	str	r2, [r4, #16]
 8018062:	f8cd a000 	str.w	sl, [sp]
 8018066:	464b      	mov	r3, r9
 8018068:	aa03      	add	r2, sp, #12
 801806a:	4621      	mov	r1, r4
 801806c:	4640      	mov	r0, r8
 801806e:	f7ff fee7 	bl	8017e40 <_printf_common>
 8018072:	3001      	adds	r0, #1
 8018074:	d14a      	bne.n	801810c <_printf_i+0x1f0>
 8018076:	f04f 30ff 	mov.w	r0, #4294967295
 801807a:	b004      	add	sp, #16
 801807c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018080:	6823      	ldr	r3, [r4, #0]
 8018082:	f043 0320 	orr.w	r3, r3, #32
 8018086:	6023      	str	r3, [r4, #0]
 8018088:	4832      	ldr	r0, [pc, #200]	@ (8018154 <_printf_i+0x238>)
 801808a:	2778      	movs	r7, #120	@ 0x78
 801808c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018090:	6823      	ldr	r3, [r4, #0]
 8018092:	6831      	ldr	r1, [r6, #0]
 8018094:	061f      	lsls	r7, r3, #24
 8018096:	f851 5b04 	ldr.w	r5, [r1], #4
 801809a:	d402      	bmi.n	80180a2 <_printf_i+0x186>
 801809c:	065f      	lsls	r7, r3, #25
 801809e:	bf48      	it	mi
 80180a0:	b2ad      	uxthmi	r5, r5
 80180a2:	6031      	str	r1, [r6, #0]
 80180a4:	07d9      	lsls	r1, r3, #31
 80180a6:	bf44      	itt	mi
 80180a8:	f043 0320 	orrmi.w	r3, r3, #32
 80180ac:	6023      	strmi	r3, [r4, #0]
 80180ae:	b11d      	cbz	r5, 80180b8 <_printf_i+0x19c>
 80180b0:	2310      	movs	r3, #16
 80180b2:	e7ad      	b.n	8018010 <_printf_i+0xf4>
 80180b4:	4826      	ldr	r0, [pc, #152]	@ (8018150 <_printf_i+0x234>)
 80180b6:	e7e9      	b.n	801808c <_printf_i+0x170>
 80180b8:	6823      	ldr	r3, [r4, #0]
 80180ba:	f023 0320 	bic.w	r3, r3, #32
 80180be:	6023      	str	r3, [r4, #0]
 80180c0:	e7f6      	b.n	80180b0 <_printf_i+0x194>
 80180c2:	4616      	mov	r6, r2
 80180c4:	e7bd      	b.n	8018042 <_printf_i+0x126>
 80180c6:	6833      	ldr	r3, [r6, #0]
 80180c8:	6825      	ldr	r5, [r4, #0]
 80180ca:	6961      	ldr	r1, [r4, #20]
 80180cc:	1d18      	adds	r0, r3, #4
 80180ce:	6030      	str	r0, [r6, #0]
 80180d0:	062e      	lsls	r6, r5, #24
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	d501      	bpl.n	80180da <_printf_i+0x1be>
 80180d6:	6019      	str	r1, [r3, #0]
 80180d8:	e002      	b.n	80180e0 <_printf_i+0x1c4>
 80180da:	0668      	lsls	r0, r5, #25
 80180dc:	d5fb      	bpl.n	80180d6 <_printf_i+0x1ba>
 80180de:	8019      	strh	r1, [r3, #0]
 80180e0:	2300      	movs	r3, #0
 80180e2:	6123      	str	r3, [r4, #16]
 80180e4:	4616      	mov	r6, r2
 80180e6:	e7bc      	b.n	8018062 <_printf_i+0x146>
 80180e8:	6833      	ldr	r3, [r6, #0]
 80180ea:	1d1a      	adds	r2, r3, #4
 80180ec:	6032      	str	r2, [r6, #0]
 80180ee:	681e      	ldr	r6, [r3, #0]
 80180f0:	6862      	ldr	r2, [r4, #4]
 80180f2:	2100      	movs	r1, #0
 80180f4:	4630      	mov	r0, r6
 80180f6:	f7e8 f8fb 	bl	80002f0 <memchr>
 80180fa:	b108      	cbz	r0, 8018100 <_printf_i+0x1e4>
 80180fc:	1b80      	subs	r0, r0, r6
 80180fe:	6060      	str	r0, [r4, #4]
 8018100:	6863      	ldr	r3, [r4, #4]
 8018102:	6123      	str	r3, [r4, #16]
 8018104:	2300      	movs	r3, #0
 8018106:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801810a:	e7aa      	b.n	8018062 <_printf_i+0x146>
 801810c:	6923      	ldr	r3, [r4, #16]
 801810e:	4632      	mov	r2, r6
 8018110:	4649      	mov	r1, r9
 8018112:	4640      	mov	r0, r8
 8018114:	47d0      	blx	sl
 8018116:	3001      	adds	r0, #1
 8018118:	d0ad      	beq.n	8018076 <_printf_i+0x15a>
 801811a:	6823      	ldr	r3, [r4, #0]
 801811c:	079b      	lsls	r3, r3, #30
 801811e:	d413      	bmi.n	8018148 <_printf_i+0x22c>
 8018120:	68e0      	ldr	r0, [r4, #12]
 8018122:	9b03      	ldr	r3, [sp, #12]
 8018124:	4298      	cmp	r0, r3
 8018126:	bfb8      	it	lt
 8018128:	4618      	movlt	r0, r3
 801812a:	e7a6      	b.n	801807a <_printf_i+0x15e>
 801812c:	2301      	movs	r3, #1
 801812e:	4632      	mov	r2, r6
 8018130:	4649      	mov	r1, r9
 8018132:	4640      	mov	r0, r8
 8018134:	47d0      	blx	sl
 8018136:	3001      	adds	r0, #1
 8018138:	d09d      	beq.n	8018076 <_printf_i+0x15a>
 801813a:	3501      	adds	r5, #1
 801813c:	68e3      	ldr	r3, [r4, #12]
 801813e:	9903      	ldr	r1, [sp, #12]
 8018140:	1a5b      	subs	r3, r3, r1
 8018142:	42ab      	cmp	r3, r5
 8018144:	dcf2      	bgt.n	801812c <_printf_i+0x210>
 8018146:	e7eb      	b.n	8018120 <_printf_i+0x204>
 8018148:	2500      	movs	r5, #0
 801814a:	f104 0619 	add.w	r6, r4, #25
 801814e:	e7f5      	b.n	801813c <_printf_i+0x220>
 8018150:	0801ba30 	.word	0x0801ba30
 8018154:	0801ba41 	.word	0x0801ba41

08018158 <__sflush_r>:
 8018158:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801815c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018160:	0716      	lsls	r6, r2, #28
 8018162:	4605      	mov	r5, r0
 8018164:	460c      	mov	r4, r1
 8018166:	d454      	bmi.n	8018212 <__sflush_r+0xba>
 8018168:	684b      	ldr	r3, [r1, #4]
 801816a:	2b00      	cmp	r3, #0
 801816c:	dc02      	bgt.n	8018174 <__sflush_r+0x1c>
 801816e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018170:	2b00      	cmp	r3, #0
 8018172:	dd48      	ble.n	8018206 <__sflush_r+0xae>
 8018174:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018176:	2e00      	cmp	r6, #0
 8018178:	d045      	beq.n	8018206 <__sflush_r+0xae>
 801817a:	2300      	movs	r3, #0
 801817c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018180:	682f      	ldr	r7, [r5, #0]
 8018182:	6a21      	ldr	r1, [r4, #32]
 8018184:	602b      	str	r3, [r5, #0]
 8018186:	d030      	beq.n	80181ea <__sflush_r+0x92>
 8018188:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801818a:	89a3      	ldrh	r3, [r4, #12]
 801818c:	0759      	lsls	r1, r3, #29
 801818e:	d505      	bpl.n	801819c <__sflush_r+0x44>
 8018190:	6863      	ldr	r3, [r4, #4]
 8018192:	1ad2      	subs	r2, r2, r3
 8018194:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018196:	b10b      	cbz	r3, 801819c <__sflush_r+0x44>
 8018198:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801819a:	1ad2      	subs	r2, r2, r3
 801819c:	2300      	movs	r3, #0
 801819e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80181a0:	6a21      	ldr	r1, [r4, #32]
 80181a2:	4628      	mov	r0, r5
 80181a4:	47b0      	blx	r6
 80181a6:	1c43      	adds	r3, r0, #1
 80181a8:	89a3      	ldrh	r3, [r4, #12]
 80181aa:	d106      	bne.n	80181ba <__sflush_r+0x62>
 80181ac:	6829      	ldr	r1, [r5, #0]
 80181ae:	291d      	cmp	r1, #29
 80181b0:	d82b      	bhi.n	801820a <__sflush_r+0xb2>
 80181b2:	4a2a      	ldr	r2, [pc, #168]	@ (801825c <__sflush_r+0x104>)
 80181b4:	40ca      	lsrs	r2, r1
 80181b6:	07d6      	lsls	r6, r2, #31
 80181b8:	d527      	bpl.n	801820a <__sflush_r+0xb2>
 80181ba:	2200      	movs	r2, #0
 80181bc:	6062      	str	r2, [r4, #4]
 80181be:	04d9      	lsls	r1, r3, #19
 80181c0:	6922      	ldr	r2, [r4, #16]
 80181c2:	6022      	str	r2, [r4, #0]
 80181c4:	d504      	bpl.n	80181d0 <__sflush_r+0x78>
 80181c6:	1c42      	adds	r2, r0, #1
 80181c8:	d101      	bne.n	80181ce <__sflush_r+0x76>
 80181ca:	682b      	ldr	r3, [r5, #0]
 80181cc:	b903      	cbnz	r3, 80181d0 <__sflush_r+0x78>
 80181ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80181d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80181d2:	602f      	str	r7, [r5, #0]
 80181d4:	b1b9      	cbz	r1, 8018206 <__sflush_r+0xae>
 80181d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80181da:	4299      	cmp	r1, r3
 80181dc:	d002      	beq.n	80181e4 <__sflush_r+0x8c>
 80181de:	4628      	mov	r0, r5
 80181e0:	f7ff fbec 	bl	80179bc <_free_r>
 80181e4:	2300      	movs	r3, #0
 80181e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80181e8:	e00d      	b.n	8018206 <__sflush_r+0xae>
 80181ea:	2301      	movs	r3, #1
 80181ec:	4628      	mov	r0, r5
 80181ee:	47b0      	blx	r6
 80181f0:	4602      	mov	r2, r0
 80181f2:	1c50      	adds	r0, r2, #1
 80181f4:	d1c9      	bne.n	801818a <__sflush_r+0x32>
 80181f6:	682b      	ldr	r3, [r5, #0]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d0c6      	beq.n	801818a <__sflush_r+0x32>
 80181fc:	2b1d      	cmp	r3, #29
 80181fe:	d001      	beq.n	8018204 <__sflush_r+0xac>
 8018200:	2b16      	cmp	r3, #22
 8018202:	d11e      	bne.n	8018242 <__sflush_r+0xea>
 8018204:	602f      	str	r7, [r5, #0]
 8018206:	2000      	movs	r0, #0
 8018208:	e022      	b.n	8018250 <__sflush_r+0xf8>
 801820a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801820e:	b21b      	sxth	r3, r3
 8018210:	e01b      	b.n	801824a <__sflush_r+0xf2>
 8018212:	690f      	ldr	r7, [r1, #16]
 8018214:	2f00      	cmp	r7, #0
 8018216:	d0f6      	beq.n	8018206 <__sflush_r+0xae>
 8018218:	0793      	lsls	r3, r2, #30
 801821a:	680e      	ldr	r6, [r1, #0]
 801821c:	bf08      	it	eq
 801821e:	694b      	ldreq	r3, [r1, #20]
 8018220:	600f      	str	r7, [r1, #0]
 8018222:	bf18      	it	ne
 8018224:	2300      	movne	r3, #0
 8018226:	eba6 0807 	sub.w	r8, r6, r7
 801822a:	608b      	str	r3, [r1, #8]
 801822c:	f1b8 0f00 	cmp.w	r8, #0
 8018230:	dde9      	ble.n	8018206 <__sflush_r+0xae>
 8018232:	6a21      	ldr	r1, [r4, #32]
 8018234:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018236:	4643      	mov	r3, r8
 8018238:	463a      	mov	r2, r7
 801823a:	4628      	mov	r0, r5
 801823c:	47b0      	blx	r6
 801823e:	2800      	cmp	r0, #0
 8018240:	dc08      	bgt.n	8018254 <__sflush_r+0xfc>
 8018242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801824a:	81a3      	strh	r3, [r4, #12]
 801824c:	f04f 30ff 	mov.w	r0, #4294967295
 8018250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018254:	4407      	add	r7, r0
 8018256:	eba8 0800 	sub.w	r8, r8, r0
 801825a:	e7e7      	b.n	801822c <__sflush_r+0xd4>
 801825c:	20400001 	.word	0x20400001

08018260 <_fflush_r>:
 8018260:	b538      	push	{r3, r4, r5, lr}
 8018262:	690b      	ldr	r3, [r1, #16]
 8018264:	4605      	mov	r5, r0
 8018266:	460c      	mov	r4, r1
 8018268:	b913      	cbnz	r3, 8018270 <_fflush_r+0x10>
 801826a:	2500      	movs	r5, #0
 801826c:	4628      	mov	r0, r5
 801826e:	bd38      	pop	{r3, r4, r5, pc}
 8018270:	b118      	cbz	r0, 801827a <_fflush_r+0x1a>
 8018272:	6a03      	ldr	r3, [r0, #32]
 8018274:	b90b      	cbnz	r3, 801827a <_fflush_r+0x1a>
 8018276:	f7ff f913 	bl	80174a0 <__sinit>
 801827a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d0f3      	beq.n	801826a <_fflush_r+0xa>
 8018282:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018284:	07d0      	lsls	r0, r2, #31
 8018286:	d404      	bmi.n	8018292 <_fflush_r+0x32>
 8018288:	0599      	lsls	r1, r3, #22
 801828a:	d402      	bmi.n	8018292 <_fflush_r+0x32>
 801828c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801828e:	f7ff fb66 	bl	801795e <__retarget_lock_acquire_recursive>
 8018292:	4628      	mov	r0, r5
 8018294:	4621      	mov	r1, r4
 8018296:	f7ff ff5f 	bl	8018158 <__sflush_r>
 801829a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801829c:	07da      	lsls	r2, r3, #31
 801829e:	4605      	mov	r5, r0
 80182a0:	d4e4      	bmi.n	801826c <_fflush_r+0xc>
 80182a2:	89a3      	ldrh	r3, [r4, #12]
 80182a4:	059b      	lsls	r3, r3, #22
 80182a6:	d4e1      	bmi.n	801826c <_fflush_r+0xc>
 80182a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80182aa:	f7ff fb59 	bl	8017960 <__retarget_lock_release_recursive>
 80182ae:	e7dd      	b.n	801826c <_fflush_r+0xc>

080182b0 <fiprintf>:
 80182b0:	b40e      	push	{r1, r2, r3}
 80182b2:	b503      	push	{r0, r1, lr}
 80182b4:	4601      	mov	r1, r0
 80182b6:	ab03      	add	r3, sp, #12
 80182b8:	4805      	ldr	r0, [pc, #20]	@ (80182d0 <fiprintf+0x20>)
 80182ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80182be:	6800      	ldr	r0, [r0, #0]
 80182c0:	9301      	str	r3, [sp, #4]
 80182c2:	f7ff fca5 	bl	8017c10 <_vfiprintf_r>
 80182c6:	b002      	add	sp, #8
 80182c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80182cc:	b003      	add	sp, #12
 80182ce:	4770      	bx	lr
 80182d0:	24000060 	.word	0x24000060

080182d4 <__swhatbuf_r>:
 80182d4:	b570      	push	{r4, r5, r6, lr}
 80182d6:	460c      	mov	r4, r1
 80182d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182dc:	2900      	cmp	r1, #0
 80182de:	b096      	sub	sp, #88	@ 0x58
 80182e0:	4615      	mov	r5, r2
 80182e2:	461e      	mov	r6, r3
 80182e4:	da0d      	bge.n	8018302 <__swhatbuf_r+0x2e>
 80182e6:	89a3      	ldrh	r3, [r4, #12]
 80182e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80182ec:	f04f 0100 	mov.w	r1, #0
 80182f0:	bf14      	ite	ne
 80182f2:	2340      	movne	r3, #64	@ 0x40
 80182f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80182f8:	2000      	movs	r0, #0
 80182fa:	6031      	str	r1, [r6, #0]
 80182fc:	602b      	str	r3, [r5, #0]
 80182fe:	b016      	add	sp, #88	@ 0x58
 8018300:	bd70      	pop	{r4, r5, r6, pc}
 8018302:	466a      	mov	r2, sp
 8018304:	f000 f848 	bl	8018398 <_fstat_r>
 8018308:	2800      	cmp	r0, #0
 801830a:	dbec      	blt.n	80182e6 <__swhatbuf_r+0x12>
 801830c:	9901      	ldr	r1, [sp, #4]
 801830e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018312:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018316:	4259      	negs	r1, r3
 8018318:	4159      	adcs	r1, r3
 801831a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801831e:	e7eb      	b.n	80182f8 <__swhatbuf_r+0x24>

08018320 <__smakebuf_r>:
 8018320:	898b      	ldrh	r3, [r1, #12]
 8018322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018324:	079d      	lsls	r5, r3, #30
 8018326:	4606      	mov	r6, r0
 8018328:	460c      	mov	r4, r1
 801832a:	d507      	bpl.n	801833c <__smakebuf_r+0x1c>
 801832c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018330:	6023      	str	r3, [r4, #0]
 8018332:	6123      	str	r3, [r4, #16]
 8018334:	2301      	movs	r3, #1
 8018336:	6163      	str	r3, [r4, #20]
 8018338:	b003      	add	sp, #12
 801833a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801833c:	ab01      	add	r3, sp, #4
 801833e:	466a      	mov	r2, sp
 8018340:	f7ff ffc8 	bl	80182d4 <__swhatbuf_r>
 8018344:	9f00      	ldr	r7, [sp, #0]
 8018346:	4605      	mov	r5, r0
 8018348:	4639      	mov	r1, r7
 801834a:	4630      	mov	r0, r6
 801834c:	f7ff fbaa 	bl	8017aa4 <_malloc_r>
 8018350:	b948      	cbnz	r0, 8018366 <__smakebuf_r+0x46>
 8018352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018356:	059a      	lsls	r2, r3, #22
 8018358:	d4ee      	bmi.n	8018338 <__smakebuf_r+0x18>
 801835a:	f023 0303 	bic.w	r3, r3, #3
 801835e:	f043 0302 	orr.w	r3, r3, #2
 8018362:	81a3      	strh	r3, [r4, #12]
 8018364:	e7e2      	b.n	801832c <__smakebuf_r+0xc>
 8018366:	89a3      	ldrh	r3, [r4, #12]
 8018368:	6020      	str	r0, [r4, #0]
 801836a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801836e:	81a3      	strh	r3, [r4, #12]
 8018370:	9b01      	ldr	r3, [sp, #4]
 8018372:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018376:	b15b      	cbz	r3, 8018390 <__smakebuf_r+0x70>
 8018378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801837c:	4630      	mov	r0, r6
 801837e:	f000 f81d 	bl	80183bc <_isatty_r>
 8018382:	b128      	cbz	r0, 8018390 <__smakebuf_r+0x70>
 8018384:	89a3      	ldrh	r3, [r4, #12]
 8018386:	f023 0303 	bic.w	r3, r3, #3
 801838a:	f043 0301 	orr.w	r3, r3, #1
 801838e:	81a3      	strh	r3, [r4, #12]
 8018390:	89a3      	ldrh	r3, [r4, #12]
 8018392:	431d      	orrs	r5, r3
 8018394:	81a5      	strh	r5, [r4, #12]
 8018396:	e7cf      	b.n	8018338 <__smakebuf_r+0x18>

08018398 <_fstat_r>:
 8018398:	b538      	push	{r3, r4, r5, lr}
 801839a:	4d07      	ldr	r5, [pc, #28]	@ (80183b8 <_fstat_r+0x20>)
 801839c:	2300      	movs	r3, #0
 801839e:	4604      	mov	r4, r0
 80183a0:	4608      	mov	r0, r1
 80183a2:	4611      	mov	r1, r2
 80183a4:	602b      	str	r3, [r5, #0]
 80183a6:	f7e8 fe31 	bl	800100c <_fstat>
 80183aa:	1c43      	adds	r3, r0, #1
 80183ac:	d102      	bne.n	80183b4 <_fstat_r+0x1c>
 80183ae:	682b      	ldr	r3, [r5, #0]
 80183b0:	b103      	cbz	r3, 80183b4 <_fstat_r+0x1c>
 80183b2:	6023      	str	r3, [r4, #0]
 80183b4:	bd38      	pop	{r3, r4, r5, pc}
 80183b6:	bf00      	nop
 80183b8:	24007d1c 	.word	0x24007d1c

080183bc <_isatty_r>:
 80183bc:	b538      	push	{r3, r4, r5, lr}
 80183be:	4d06      	ldr	r5, [pc, #24]	@ (80183d8 <_isatty_r+0x1c>)
 80183c0:	2300      	movs	r3, #0
 80183c2:	4604      	mov	r4, r0
 80183c4:	4608      	mov	r0, r1
 80183c6:	602b      	str	r3, [r5, #0]
 80183c8:	f7e8 fe30 	bl	800102c <_isatty>
 80183cc:	1c43      	adds	r3, r0, #1
 80183ce:	d102      	bne.n	80183d6 <_isatty_r+0x1a>
 80183d0:	682b      	ldr	r3, [r5, #0]
 80183d2:	b103      	cbz	r3, 80183d6 <_isatty_r+0x1a>
 80183d4:	6023      	str	r3, [r4, #0]
 80183d6:	bd38      	pop	{r3, r4, r5, pc}
 80183d8:	24007d1c 	.word	0x24007d1c

080183dc <_sbrk_r>:
 80183dc:	b538      	push	{r3, r4, r5, lr}
 80183de:	4d06      	ldr	r5, [pc, #24]	@ (80183f8 <_sbrk_r+0x1c>)
 80183e0:	2300      	movs	r3, #0
 80183e2:	4604      	mov	r4, r0
 80183e4:	4608      	mov	r0, r1
 80183e6:	602b      	str	r3, [r5, #0]
 80183e8:	f7e8 fe38 	bl	800105c <_sbrk>
 80183ec:	1c43      	adds	r3, r0, #1
 80183ee:	d102      	bne.n	80183f6 <_sbrk_r+0x1a>
 80183f0:	682b      	ldr	r3, [r5, #0]
 80183f2:	b103      	cbz	r3, 80183f6 <_sbrk_r+0x1a>
 80183f4:	6023      	str	r3, [r4, #0]
 80183f6:	bd38      	pop	{r3, r4, r5, pc}
 80183f8:	24007d1c 	.word	0x24007d1c

080183fc <abort>:
 80183fc:	b508      	push	{r3, lr}
 80183fe:	2006      	movs	r0, #6
 8018400:	f000 f82c 	bl	801845c <raise>
 8018404:	2001      	movs	r0, #1
 8018406:	f7e8 fdb1 	bl	8000f6c <_exit>

0801840a <_raise_r>:
 801840a:	291f      	cmp	r1, #31
 801840c:	b538      	push	{r3, r4, r5, lr}
 801840e:	4605      	mov	r5, r0
 8018410:	460c      	mov	r4, r1
 8018412:	d904      	bls.n	801841e <_raise_r+0x14>
 8018414:	2316      	movs	r3, #22
 8018416:	6003      	str	r3, [r0, #0]
 8018418:	f04f 30ff 	mov.w	r0, #4294967295
 801841c:	bd38      	pop	{r3, r4, r5, pc}
 801841e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018420:	b112      	cbz	r2, 8018428 <_raise_r+0x1e>
 8018422:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018426:	b94b      	cbnz	r3, 801843c <_raise_r+0x32>
 8018428:	4628      	mov	r0, r5
 801842a:	f000 f831 	bl	8018490 <_getpid_r>
 801842e:	4622      	mov	r2, r4
 8018430:	4601      	mov	r1, r0
 8018432:	4628      	mov	r0, r5
 8018434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018438:	f000 b818 	b.w	801846c <_kill_r>
 801843c:	2b01      	cmp	r3, #1
 801843e:	d00a      	beq.n	8018456 <_raise_r+0x4c>
 8018440:	1c59      	adds	r1, r3, #1
 8018442:	d103      	bne.n	801844c <_raise_r+0x42>
 8018444:	2316      	movs	r3, #22
 8018446:	6003      	str	r3, [r0, #0]
 8018448:	2001      	movs	r0, #1
 801844a:	e7e7      	b.n	801841c <_raise_r+0x12>
 801844c:	2100      	movs	r1, #0
 801844e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018452:	4620      	mov	r0, r4
 8018454:	4798      	blx	r3
 8018456:	2000      	movs	r0, #0
 8018458:	e7e0      	b.n	801841c <_raise_r+0x12>
	...

0801845c <raise>:
 801845c:	4b02      	ldr	r3, [pc, #8]	@ (8018468 <raise+0xc>)
 801845e:	4601      	mov	r1, r0
 8018460:	6818      	ldr	r0, [r3, #0]
 8018462:	f7ff bfd2 	b.w	801840a <_raise_r>
 8018466:	bf00      	nop
 8018468:	24000060 	.word	0x24000060

0801846c <_kill_r>:
 801846c:	b538      	push	{r3, r4, r5, lr}
 801846e:	4d07      	ldr	r5, [pc, #28]	@ (801848c <_kill_r+0x20>)
 8018470:	2300      	movs	r3, #0
 8018472:	4604      	mov	r4, r0
 8018474:	4608      	mov	r0, r1
 8018476:	4611      	mov	r1, r2
 8018478:	602b      	str	r3, [r5, #0]
 801847a:	f7e8 fd65 	bl	8000f48 <_kill>
 801847e:	1c43      	adds	r3, r0, #1
 8018480:	d102      	bne.n	8018488 <_kill_r+0x1c>
 8018482:	682b      	ldr	r3, [r5, #0]
 8018484:	b103      	cbz	r3, 8018488 <_kill_r+0x1c>
 8018486:	6023      	str	r3, [r4, #0]
 8018488:	bd38      	pop	{r3, r4, r5, pc}
 801848a:	bf00      	nop
 801848c:	24007d1c 	.word	0x24007d1c

08018490 <_getpid_r>:
 8018490:	f7e8 bd52 	b.w	8000f38 <_getpid>

08018494 <_init>:
 8018494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018496:	bf00      	nop
 8018498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801849a:	bc08      	pop	{r3}
 801849c:	469e      	mov	lr, r3
 801849e:	4770      	bx	lr

080184a0 <_fini>:
 80184a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184a2:	bf00      	nop
 80184a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184a6:	bc08      	pop	{r3}
 80184a8:	469e      	mov	lr, r3
 80184aa:	4770      	bx	lr
