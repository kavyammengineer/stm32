
tcp_h755_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001837c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000349c  0801861c  0801861c  0001961c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bab8  0801bab8  0001d0b0  2**0
                  CONTENTS
  4 .ARM          00000008  0801bab8  0801bab8  0001cab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bac0  0801bac0  0001d0b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bac0  0801bac0  0001cac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801bac4  0801bac4  0001cac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  24000000  0801bac8  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008008  240000b0  0801bb78  0001d0b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240080b8  0801bb78  0001d0b8  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  0001e000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0001d0b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003b13a  00000000  00000000  0001d0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008504  00000000  00000000  00058218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002998  00000000  00000000  00060720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000020d1  00000000  00000000  000630b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004ba96  00000000  00000000  00065189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00042854  00000000  00000000  000b0c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001b04a5  00000000  00000000  000f3473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  002a3918  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b650  00000000  00000000  002a395c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  002aefac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000b0 	.word	0x240000b0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018604 	.word	0x08018604

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000b4 	.word	0x240000b4
 80002dc:	08018604 	.word	0x08018604

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b49      	ldr	r3, [pc, #292]	@ (800079c <SystemInit+0x12c>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a48      	ldr	r2, [pc, #288]	@ (800079c <SystemInit+0x12c>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b45      	ldr	r3, [pc, #276]	@ (800079c <SystemInit+0x12c>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a44      	ldr	r2, [pc, #272]	@ (800079c <SystemInit+0x12c>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b43      	ldr	r3, [pc, #268]	@ (80007a0 <SystemInit+0x130>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b40      	ldr	r3, [pc, #256]	@ (80007a0 <SystemInit+0x130>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a3e      	ldr	r2, [pc, #248]	@ (80007a0 <SystemInit+0x130>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b3d      	ldr	r3, [pc, #244]	@ (80007a4 <SystemInit+0x134>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a3c      	ldr	r2, [pc, #240]	@ (80007a4 <SystemInit+0x134>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b3a      	ldr	r3, [pc, #232]	@ (80007a4 <SystemInit+0x134>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b39      	ldr	r3, [pc, #228]	@ (80007a4 <SystemInit+0x134>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4938      	ldr	r1, [pc, #224]	@ (80007a4 <SystemInit+0x134>)
 80006c4:	4b38      	ldr	r3, [pc, #224]	@ (80007a8 <SystemInit+0x138>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b35      	ldr	r3, [pc, #212]	@ (80007a0 <SystemInit+0x130>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b32      	ldr	r3, [pc, #200]	@ (80007a0 <SystemInit+0x130>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a30      	ldr	r2, [pc, #192]	@ (80007a0 <SystemInit+0x130>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b2f      	ldr	r3, [pc, #188]	@ (80007a4 <SystemInit+0x134>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <SystemInit+0x134>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b2c      	ldr	r3, [pc, #176]	@ (80007a4 <SystemInit+0x134>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <SystemInit+0x134>)
 80006fa:	4a2c      	ldr	r2, [pc, #176]	@ (80007ac <SystemInit+0x13c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <SystemInit+0x134>)
 8000700:	4a2b      	ldr	r2, [pc, #172]	@ (80007b0 <SystemInit+0x140>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <SystemInit+0x134>)
 8000706:	4a2b      	ldr	r2, [pc, #172]	@ (80007b4 <SystemInit+0x144>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <SystemInit+0x134>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <SystemInit+0x134>)
 8000712:	4a28      	ldr	r2, [pc, #160]	@ (80007b4 <SystemInit+0x144>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <SystemInit+0x134>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b21      	ldr	r3, [pc, #132]	@ (80007a4 <SystemInit+0x134>)
 800071e:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <SystemInit+0x144>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <SystemInit+0x134>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a1d      	ldr	r2, [pc, #116]	@ (80007a4 <SystemInit+0x134>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <SystemInit+0x134>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <SystemInit+0x148>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a1e      	ldr	r2, [pc, #120]	@ (80007b8 <SystemInit+0x148>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <SystemInit+0x14c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <SystemInit+0x150>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <SystemInit+0x154>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <SystemInit+0x134>)
 800075c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d113      	bne.n	8000790 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <SystemInit+0x134>)
 800076a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800076e:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <SystemInit+0x134>)
 8000770:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000774:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <SystemInit+0x158>)
 800077a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800077e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <SystemInit+0x134>)
 8000782:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000786:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <SystemInit+0x134>)
 8000788:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800078c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	52002000 	.word	0x52002000
 80007a4:	58024400 	.word	0x58024400
 80007a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007ac:	02020200 	.word	0x02020200
 80007b0:	01ff0000 	.word	0x01ff0000
 80007b4:	01010280 	.word	0x01010280
 80007b8:	580000c0 	.word	0x580000c0
 80007bc:	5c001000 	.word	0x5c001000
 80007c0:	ffff0000 	.word	0xffff0000
 80007c4:	51008108 	.word	0x51008108
 80007c8:	52004000 	.word	0x52004000

080007cc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007d6:	f023 0302 	bic.w	r3, r3, #2
 80007da:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80007dc:	bf00      	nop
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0f9      	beq.n	80007de <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80007ea:	bf00      	nop
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	58024800 	.word	0x58024800

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000802:	f000 fa17 	bl	8000c34 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000806:	4b6d      	ldr	r3, [pc, #436]	@ (80009bc <main+0x1c0>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d11b      	bne.n	800084a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000812:	f3bf 8f4f 	dsb	sy
}
 8000816:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000818:	f3bf 8f6f 	isb	sy
}
 800081c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800081e:	4b67      	ldr	r3, [pc, #412]	@ (80009bc <main+0x1c0>)
 8000820:	2200      	movs	r2, #0
 8000822:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000826:	f3bf 8f4f 	dsb	sy
}
 800082a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800082c:	f3bf 8f6f 	isb	sy
}
 8000830:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000832:	4b62      	ldr	r3, [pc, #392]	@ (80009bc <main+0x1c0>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a61      	ldr	r2, [pc, #388]	@ (80009bc <main+0x1c0>)
 8000838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800083c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800083e:	f3bf 8f4f 	dsb	sy
}
 8000842:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000844:	f3bf 8f6f 	isb	sy
}
 8000848:	e000      	b.n	800084c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800084a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800084c:	4b5b      	ldr	r3, [pc, #364]	@ (80009bc <main+0x1c0>)
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000854:	2b00      	cmp	r3, #0
 8000856:	d138      	bne.n	80008ca <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000858:	4b58      	ldr	r3, [pc, #352]	@ (80009bc <main+0x1c0>)
 800085a:	2200      	movs	r2, #0
 800085c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000860:	f3bf 8f4f 	dsb	sy
}
 8000864:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000866:	4b55      	ldr	r3, [pc, #340]	@ (80009bc <main+0x1c0>)
 8000868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800086c:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	0b5b      	lsrs	r3, r3, #13
 8000872:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000876:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	08db      	lsrs	r3, r3, #3
 800087c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000880:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	015a      	lsls	r2, r3, #5
 8000886:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800088a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800088c:	68ba      	ldr	r2, [r7, #8]
 800088e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000890:	494a      	ldr	r1, [pc, #296]	@ (80009bc <main+0x1c0>)
 8000892:	4313      	orrs	r3, r2
 8000894:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	1e5a      	subs	r2, r3, #1
 800089c:	60ba      	str	r2, [r7, #8]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1ef      	bne.n	8000882 <main+0x86>
    } while(sets-- != 0U);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	1e5a      	subs	r2, r3, #1
 80008a6:	60fa      	str	r2, [r7, #12]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1e5      	bne.n	8000878 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80008ac:	f3bf 8f4f 	dsb	sy
}
 80008b0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008b2:	4b42      	ldr	r3, [pc, #264]	@ (80009bc <main+0x1c0>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	4a41      	ldr	r2, [pc, #260]	@ (80009bc <main+0x1c0>)
 80008b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008be:	f3bf 8f4f 	dsb	sy
}
 80008c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008c4:	f3bf 8f6f 	isb	sy
}
 80008c8:	e000      	b.n	80008cc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008ca:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008d0:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008d2:	bf00      	nop
 80008d4:	4b3a      	ldr	r3, [pc, #232]	@ (80009c0 <main+0x1c4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d004      	beq.n	80008ea <main+0xee>
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	1e5a      	subs	r2, r3, #1
 80008e4:	617a      	str	r2, [r7, #20]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	dcf4      	bgt.n	80008d4 <main+0xd8>
  if ( timeout < 0 )
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	da01      	bge.n	80008f4 <main+0xf8>
  {
  Error_Handler();
 80008f0:	f000 f9f4 	bl	8000cdc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f4:	f000 fe98 	bl	8001628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f8:	f000 f86c 	bl	80009d4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008fc:	4b30      	ldr	r3, [pc, #192]	@ (80009c0 <main+0x1c4>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	4a2f      	ldr	r2, [pc, #188]	@ (80009c0 <main+0x1c4>)
 8000904:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000908:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800090c:	4b2c      	ldr	r3, [pc, #176]	@ (80009c0 <main+0x1c4>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800091a:	2000      	movs	r0, #0
 800091c:	f003 f824 	bl	8003968 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000920:	2100      	movs	r1, #0
 8000922:	2000      	movs	r0, #0
 8000924:	f003 f83a 	bl	800399c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000928:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800092c:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800092e:	bf00      	nop
 8000930:	4b23      	ldr	r3, [pc, #140]	@ (80009c0 <main+0x1c4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000938:	2b00      	cmp	r3, #0
 800093a:	d104      	bne.n	8000946 <main+0x14a>
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	1e5a      	subs	r2, r3, #1
 8000940:	617a      	str	r2, [r7, #20]
 8000942:	2b00      	cmp	r3, #0
 8000944:	dcf4      	bgt.n	8000930 <main+0x134>
if ( timeout < 0 )
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	2b00      	cmp	r3, #0
 800094a:	da01      	bge.n	8000950 <main+0x154>
{
Error_Handler();
 800094c:	f000 f9c6 	bl	8000cdc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000950:	f000 f8aa 	bl	8000aa8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000954:	f006 fc66 	bl	8007224 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000958:	4a1a      	ldr	r2, [pc, #104]	@ (80009c4 <main+0x1c8>)
 800095a:	2100      	movs	r1, #0
 800095c:	481a      	ldr	r0, [pc, #104]	@ (80009c8 <main+0x1cc>)
 800095e:	f006 fcc0 	bl	80072e2 <osThreadNew>
 8000962:	4603      	mov	r3, r0
 8000964:	4a19      	ldr	r2, [pc, #100]	@ (80009cc <main+0x1d0>)
 8000966:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000968:	2000      	movs	r0, #0
 800096a:	f000 fc79 	bl	8001260 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 800096e:	2001      	movs	r0, #1
 8000970:	f000 fc76 	bl	8001260 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000974:	2002      	movs	r0, #2
 8000976:	f000 fc73 	bl	8001260 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800097a:	2101      	movs	r1, #1
 800097c:	2000      	movs	r0, #0
 800097e:	f000 fce5 	bl	800134c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000982:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <main+0x1d4>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000988:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800098a:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <main+0x1d4>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000990:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <main+0x1d4>)
 8000992:	2200      	movs	r2, #0
 8000994:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <main+0x1d4>)
 8000998:	2200      	movs	r2, #0
 800099a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <main+0x1d4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80009a2:	490b      	ldr	r1, [pc, #44]	@ (80009d0 <main+0x1d4>)
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 fd61 	bl	800146c <BSP_COM_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <main+0x1b8>
  {
    Error_Handler();
 80009b0:	f000 f994 	bl	8000cdc <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 80009b4:	f006 fc5a 	bl	800726c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  SCB_CleanInvalidateDCache();
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <main+0x1bc>
 80009bc:	e000ed00 	.word	0xe000ed00
 80009c0:	58024400 	.word	0x58024400
 80009c4:	0801b84c 	.word	0x0801b84c
 80009c8:	08000b69 	.word	0x08000b69
 80009cc:	240000dc 	.word	0x240000dc
 80009d0:	240000cc 	.word	0x240000cc

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09c      	sub	sp, #112	@ 0x70
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009de:	224c      	movs	r2, #76	@ 0x4c
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f016 fffe 	bl	80179e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2220      	movs	r2, #32
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f016 fff8 	bl	80179e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009f4:	2004      	movs	r0, #4
 80009f6:	f002 ffe5 	bl	80039c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <SystemClock_Config+0xcc>)
 8000a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a02:	4a27      	ldr	r2, [pc, #156]	@ (8000aa0 <SystemClock_Config+0xcc>)
 8000a04:	f023 0301 	bic.w	r3, r3, #1
 8000a08:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a0a:	4b25      	ldr	r3, [pc, #148]	@ (8000aa0 <SystemClock_Config+0xcc>)
 8000a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <SystemClock_Config+0xd0>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a1c:	4a21      	ldr	r2, [pc, #132]	@ (8000aa4 <SystemClock_Config+0xd0>)
 8000a1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <SystemClock_Config+0xd0>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a30:	bf00      	nop
 8000a32:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <SystemClock_Config+0xd0>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a3e:	d1f8      	bne.n	8000a32 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a40:	2302      	movs	r3, #2
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a48:	2340      	movs	r3, #64	@ 0x40
 8000a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a54:	4618      	mov	r0, r3
 8000a56:	f003 f80f 	bl	8003a78 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a60:	f000 f93c 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	233f      	movs	r3, #63	@ 0x3f
 8000a66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2101      	movs	r1, #1
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f003 fc4f 	bl	800432c <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a94:	f000 f922 	bl	8000cdc <Error_Handler>
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3770      	adds	r7, #112	@ 0x70
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	58000400 	.word	0x58000400
 8000aa4:	58024800 	.word	0x58024800

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	4b28      	ldr	r3, [pc, #160]	@ (8000b60 <MX_GPIO_Init+0xb8>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac4:	4a26      	ldr	r2, [pc, #152]	@ (8000b60 <MX_GPIO_Init+0xb8>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ace:	4b24      	ldr	r3, [pc, #144]	@ (8000b60 <MX_GPIO_Init+0xb8>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	4b20      	ldr	r3, [pc, #128]	@ (8000b60 <MX_GPIO_Init+0xb8>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b60 <MX_GPIO_Init+0xb8>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aec:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <MX_GPIO_Init+0xb8>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <MX_GPIO_Init+0xb8>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b00:	4a17      	ldr	r2, [pc, #92]	@ (8000b60 <MX_GPIO_Init+0xb8>)
 8000b02:	f043 0302 	orr.w	r3, r3, #2
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <MX_GPIO_Init+0xb8>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_GPIO_Init+0xb8>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1e:	4a10      	ldr	r2, [pc, #64]	@ (8000b60 <MX_GPIO_Init+0xb8>)
 8000b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b28:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <MX_GPIO_Init+0xb8>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b36:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b48:	230a      	movs	r3, #10
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <MX_GPIO_Init+0xbc>)
 8000b54:	f002 fd3e 	bl	80035d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	@ 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	58024400 	.word	0x58024400
 8000b64:	58020000 	.word	0x58020000

08000b68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	@ 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b70:	f005 fda0 	bl	80066b4 <MX_LWIP_Init>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b74:	4b29      	ldr	r3, [pc, #164]	@ (8000c1c <StartDefaultTask+0xb4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b7c:	f3bf 8f4f 	dsb	sy
}
 8000b80:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b82:	4b26      	ldr	r3, [pc, #152]	@ (8000c1c <StartDefaultTask+0xb4>)
 8000b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8c:	0b5b      	lsrs	r3, r3, #13
 8000b8e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b92:	623b      	str	r3, [r7, #32]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b96:	08db      	lsrs	r3, r3, #3
 8000b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b9c:	61fb      	str	r3, [r7, #28]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000b9e:	6a3b      	ldr	r3, [r7, #32]
 8000ba0:	015a      	lsls	r2, r3, #5
 8000ba2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000ba6:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000ba8:	69fa      	ldr	r2, [r7, #28]
 8000baa:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000bac:	491b      	ldr	r1, [pc, #108]	@ (8000c1c <StartDefaultTask+0xb4>)
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	1e5a      	subs	r2, r3, #1
 8000bb8:	61fa      	str	r2, [r7, #28]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d1ef      	bne.n	8000b9e <StartDefaultTask+0x36>
    } while(sets-- != 0U);
 8000bbe:	6a3b      	ldr	r3, [r7, #32]
 8000bc0:	1e5a      	subs	r2, r3, #1
 8000bc2:	623a      	str	r2, [r7, #32]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1e5      	bne.n	8000b94 <StartDefaultTask+0x2c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bc8:	f3bf 8f4f 	dsb	sy
}
 8000bcc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bce:	f3bf 8f6f 	isb	sy
}
 8000bd2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000bd4:	bf00      	nop
  {

	  SCB_CleanInvalidateDCache();
//	  ethernetif_input(&gnetif);
//	   sys_check_timeouts();
	  if (dhcp_supplied_address(&gnetif)) {
 8000bd6:	4812      	ldr	r0, [pc, #72]	@ (8000c20 <StartDefaultTask+0xb8>)
 8000bd8:	f00b ffba 	bl	800cb50 <dhcp_supplied_address>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d014      	beq.n	8000c0c <StartDefaultTask+0xa4>
		  char ip_str[16]; // Buffer for IP address string IP address to string using ip4addr_ntoa_r

		  if (ip4addr_ntoa_r(&gnetif.ip_addr, ip_str, sizeof(ip_str)) != NULL) {
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2210      	movs	r2, #16
 8000be8:	4619      	mov	r1, r3
 8000bea:	480e      	ldr	r0, [pc, #56]	@ (8000c24 <StartDefaultTask+0xbc>)
 8000bec:	f00d fd78 	bl	800e6e0 <ip4addr_ntoa_r>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d006      	beq.n	8000c04 <StartDefaultTask+0x9c>
			  printf("DHCP assigned IP: %s\n", ip_str);
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480a      	ldr	r0, [pc, #40]	@ (8000c28 <StartDefaultTask+0xc0>)
 8000bfe:	f016 fd99 	bl	8017734 <iprintf>
 8000c02:	e006      	b.n	8000c12 <StartDefaultTask+0xaa>
		  } //if ip
		  else {
			  printf("Error converting IP address\n");
 8000c04:	4809      	ldr	r0, [pc, #36]	@ (8000c2c <StartDefaultTask+0xc4>)
 8000c06:	f016 fdfd 	bl	8017804 <puts>
 8000c0a:	e002      	b.n	8000c12 <StartDefaultTask+0xaa>
		  } //else if
	  }//  main if
	  else {
		  printf("Waiting for DHCP...\n");
 8000c0c:	4808      	ldr	r0, [pc, #32]	@ (8000c30 <StartDefaultTask+0xc8>)
 8000c0e:	f016 fdf9 	bl	8017804 <puts>
	//  printf("IP: %s\n", ip4addr_ntoa(&gnetif.ip_addr));




    osDelay(1);
 8000c12:	2001      	movs	r0, #1
 8000c14:	f006 fbf7 	bl	8007406 <osDelay>
	  SCB_CleanInvalidateDCache();
 8000c18:	e7ac      	b.n	8000b74 <StartDefaultTask+0xc>
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00
 8000c20:	240001d4 	.word	0x240001d4
 8000c24:	240001d8 	.word	0x240001d8
 8000c28:	08018628 	.word	0x08018628
 8000c2c:	08018640 	.word	0x08018640
 8000c30:	0801865c 	.word	0x0801865c

08000c34 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c46:	f000 fe4b 	bl	80018e0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <MPU_Config+0x7c>)
 8000c54:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000c56:	2310      	movs	r3, #16
 8000c58:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c62:	2303      	movs	r3, #3
 8000c64:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c76:	463b      	mov	r3, r7
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 fe69 	bl	8001950 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <MPU_Config+0x80>)
 8000c84:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000c86:	2308      	movs	r3, #8
 8000c88:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c92:	2301      	movs	r3, #1
 8000c94:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c96:	2301      	movs	r3, #1
 8000c98:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 fe57 	bl	8001950 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ca2:	2004      	movs	r0, #4
 8000ca4:	f000 fe34 	bl	8001910 <HAL_MPU_Enable>

}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	30020000 	.word	0x30020000
 8000cb4:	30040000 	.word	0x30040000

08000cb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d101      	bne.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cca:	f000 fce9 	bl	80016a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40001000 	.word	0x40001000

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <Error_Handler+0x8>

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <HAL_MspInit+0x38>)
 8000cf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <HAL_MspInit+0x38>)
 8000cf6:	f043 0302 	orr.w	r3, r3, #2
 8000cfa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <HAL_MspInit+0x38>)
 8000d00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	210f      	movs	r1, #15
 8000d10:	f06f 0001 	mvn.w	r0, #1
 8000d14:	f000 fdbc 	bl	8001890 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	58024400 	.word	0x58024400

08000d24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b090      	sub	sp, #64	@ 0x40
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b0f      	cmp	r3, #15
 8000d30:	d827      	bhi.n	8000d82 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	6879      	ldr	r1, [r7, #4]
 8000d36:	2036      	movs	r0, #54	@ 0x36
 8000d38:	f000 fdaa 	bl	8001890 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d3c:	2036      	movs	r0, #54	@ 0x36
 8000d3e:	f000 fdc1 	bl	80018c4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000d42:	4a29      	ldr	r2, [pc, #164]	@ (8000de8 <HAL_InitTick+0xc4>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d48:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <HAL_InitTick+0xc8>)
 8000d4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d4e:	4a27      	ldr	r2, [pc, #156]	@ (8000dec <HAL_InitTick+0xc8>)
 8000d50:	f043 0310 	orr.w	r3, r3, #16
 8000d54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d58:	4b24      	ldr	r3, [pc, #144]	@ (8000dec <HAL_InitTick+0xc8>)
 8000d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d66:	f107 0210 	add.w	r2, r7, #16
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 fe67 	bl	8004a44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d78:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d106      	bne.n	8000d8e <HAL_InitTick+0x6a>
 8000d80:	e001      	b.n	8000d86 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e02b      	b.n	8000dde <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d86:	f003 fe31 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 8000d8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000d8c:	e004      	b.n	8000d98 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d8e:	f003 fe2d 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 8000d92:	4603      	mov	r3, r0
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d9a:	4a15      	ldr	r2, [pc, #84]	@ (8000df0 <HAL_InitTick+0xcc>)
 8000d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000da0:	0c9b      	lsrs	r3, r3, #18
 8000da2:	3b01      	subs	r3, #1
 8000da4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <HAL_InitTick+0xd0>)
 8000da8:	4a13      	ldr	r2, [pc, #76]	@ (8000df8 <HAL_InitTick+0xd4>)
 8000daa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <HAL_InitTick+0xd0>)
 8000dae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000db2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000db4:	4a0f      	ldr	r2, [pc, #60]	@ (8000df4 <HAL_InitTick+0xd0>)
 8000db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000db8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <HAL_InitTick+0xd0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <HAL_InitTick+0xd0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000dc6:	480b      	ldr	r0, [pc, #44]	@ (8000df4 <HAL_InitTick+0xd0>)
 8000dc8:	f004 f93c 	bl	8005044 <HAL_TIM_Base_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d104      	bne.n	8000ddc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dd2:	4808      	ldr	r0, [pc, #32]	@ (8000df4 <HAL_InitTick+0xd0>)
 8000dd4:	f004 f998 	bl	8005108 <HAL_TIM_Base_Start_IT>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	e000      	b.n	8000dde <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3740      	adds	r7, #64	@ 0x40
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	24000024 	.word	0x24000024
 8000dec:	58024400 	.word	0x58024400
 8000df0:	431bde83 	.word	0x431bde83
 8000df4:	240000e0 	.word	0x240000e0
 8000df8:	40001000 	.word	0x40001000

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <NMI_Handler+0x4>

08000e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <MemManage_Handler+0x4>

08000e14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 fafa 	bl	8001430 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e44:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <TIM6_DAC_IRQHandler+0x10>)
 8000e46:	f004 f9d7 	bl	80051f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	240000e0 	.word	0x240000e0

08000e54 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e58:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <ETH_IRQHandler+0x10>)
 8000e5a:	f001 f9a1 	bl	80021a0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2400024c 	.word	0x2400024c

08000e68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return 1;
 8000e6c:	2301      	movs	r3, #1
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_kill>:

int _kill(int pid, int sig)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e82:	4b05      	ldr	r3, [pc, #20]	@ (8000e98 <_kill+0x20>)
 8000e84:	2216      	movs	r2, #22
 8000e86:	601a      	str	r2, [r3, #0]
  return -1;
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	24007ef8 	.word	0x24007ef8

08000e9c <_exit>:

void _exit (int status)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ffe5 	bl	8000e78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000eae:	bf00      	nop
 8000eb0:	e7fd      	b.n	8000eae <_exit+0x12>

08000eb2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	e00a      	b.n	8000eda <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	4601      	mov	r1, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	60ba      	str	r2, [r7, #8]
 8000ed0:	b2ca      	uxtb	r2, r1
 8000ed2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	dbf0      	blt.n	8000ec4 <_read+0x12>
  }

  return len;
 8000ee2:	687b      	ldr	r3, [r7, #4]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	e009      	b.n	8000f12 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1c5a      	adds	r2, r3, #1
 8000f02:	60ba      	str	r2, [r7, #8]
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fb12 	bl	8001530 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	dbf1      	blt.n	8000efe <_write+0x12>
  }
  return len;
 8000f1a:	687b      	ldr	r3, [r7, #4]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <_close>:

int _close(int file)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f4c:	605a      	str	r2, [r3, #4]
  return 0;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <_isatty>:

int _isatty(int file)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f64:	2301      	movs	r3, #1
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f94:	4a14      	ldr	r2, [pc, #80]	@ (8000fe8 <_sbrk+0x5c>)
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <_sbrk+0x60>)
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa0:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <_sbrk+0x64>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	@ (8000ff4 <_sbrk+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fae:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d205      	bcs.n	8000fc8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <_sbrk+0x6c>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e009      	b.n	8000fdc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4a06      	ldr	r2, [pc, #24]	@ (8000ff0 <_sbrk+0x64>)
 8000fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fda:	68fb      	ldr	r3, [r7, #12]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	371c      	adds	r7, #28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	24080000 	.word	0x24080000
 8000fec:	00000400 	.word	0x00000400
 8000ff0:	2400012c 	.word	0x2400012c
 8000ff4:	240080b8 	.word	0x240080b8
 8000ff8:	24007ef8 	.word	0x24007ef8

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ffc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001038 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001000:	f7ff fbe4 	bl	80007cc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001004:	f7ff fb34 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001008:	480c      	ldr	r0, [pc, #48]	@ (800103c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800100a:	490d      	ldr	r1, [pc, #52]	@ (8001040 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800100c:	4a0d      	ldr	r2, [pc, #52]	@ (8001044 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	@ (8001048 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001020:	4c0a      	ldr	r4, [pc, #40]	@ (800104c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102e:	f016 fd27 	bl	8017a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001032:	f7ff fbe3 	bl	80007fc <main>
  bx  lr
 8001036:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001038:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800103c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001040:	240000b0 	.word	0x240000b0
  ldr r2, =_sidata
 8001044:	0801bac8 	.word	0x0801bac8
  ldr r2, =_sbss
 8001048:	240000b0 	.word	0x240000b0
  ldr r4, =_ebss
 800104c:	240080b8 	.word	0x240080b8

08001050 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC3_IRQHandler>

08001052 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00b      	beq.n	800107a <LAN8742_RegisterBusIO+0x28>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d007      	beq.n	800107a <LAN8742_RegisterBusIO+0x28>
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <LAN8742_RegisterBusIO+0x28>
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d102      	bne.n	8001080 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e014      	b.n	80010aa <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	691a      	ldr	r2, [r3, #16]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d139      	bne.n	8001146 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2220      	movs	r2, #32
 80010e4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e01c      	b.n	8001126 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	f107 020c 	add.w	r2, r7, #12
 80010f4:	2112      	movs	r1, #18
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	4798      	blx	r3
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	da03      	bge.n	8001108 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001100:	f06f 0304 	mvn.w	r3, #4
 8001104:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001106:	e00b      	b.n	8001120 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 031f 	and.w	r3, r3, #31
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	429a      	cmp	r2, r3
 8001112:	d105      	bne.n	8001120 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
         break;
 800111e:	e005      	b.n	800112c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2b1f      	cmp	r3, #31
 800112a:	d9df      	bls.n	80010ec <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b1f      	cmp	r3, #31
 8001132:	d902      	bls.n	800113a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001134:	f06f 0302 	mvn.w	r3, #2
 8001138:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001146:	693b      	ldr	r3, [r7, #16]
 }
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	6810      	ldr	r0, [r2, #0]
 8001164:	f107 020c 	add.w	r2, r7, #12
 8001168:	2101      	movs	r1, #1
 800116a:	4798      	blx	r3
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	da02      	bge.n	8001178 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001172:	f06f 0304 	mvn.w	r3, #4
 8001176:	e06e      	b.n	8001256 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6810      	ldr	r0, [r2, #0]
 8001180:	f107 020c 	add.w	r2, r7, #12
 8001184:	2101      	movs	r1, #1
 8001186:	4798      	blx	r3
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	da02      	bge.n	8001194 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800118e:	f06f 0304 	mvn.w	r3, #4
 8001192:	e060      	b.n	8001256 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800119e:	2301      	movs	r3, #1
 80011a0:	e059      	b.n	8001256 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	6810      	ldr	r0, [r2, #0]
 80011aa:	f107 020c 	add.w	r2, r7, #12
 80011ae:	2100      	movs	r1, #0
 80011b0:	4798      	blx	r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	da02      	bge.n	80011be <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011b8:	f06f 0304 	mvn.w	r3, #4
 80011bc:	e04b      	b.n	8001256 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d11b      	bne.n	8001200 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d006      	beq.n	80011e0 <LAN8742_GetLinkState+0x90>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80011dc:	2302      	movs	r3, #2
 80011de:	e03a      	b.n	8001256 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e033      	b.n	8001256 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80011f8:	2304      	movs	r3, #4
 80011fa:	e02c      	b.n	8001256 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80011fc:	2305      	movs	r3, #5
 80011fe:	e02a      	b.n	8001256 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6810      	ldr	r0, [r2, #0]
 8001208:	f107 020c 	add.w	r2, r7, #12
 800120c:	211f      	movs	r1, #31
 800120e:	4798      	blx	r3
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	da02      	bge.n	800121c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001216:	f06f 0304 	mvn.w	r3, #4
 800121a:	e01c      	b.n	8001256 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001226:	2306      	movs	r3, #6
 8001228:	e015      	b.n	8001256 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f003 031c 	and.w	r3, r3, #28
 8001230:	2b18      	cmp	r3, #24
 8001232:	d101      	bne.n	8001238 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001234:	2302      	movs	r3, #2
 8001236:	e00e      	b.n	8001256 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 031c 	and.w	r3, r3, #28
 800123e:	2b08      	cmp	r3, #8
 8001240:	d101      	bne.n	8001246 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001242:	2303      	movs	r3, #3
 8001244:	e007      	b.n	8001256 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f003 031c 	and.w	r3, r3, #28
 800124c:	2b14      	cmp	r3, #20
 800124e:	d101      	bne.n	8001254 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001250:	2304      	movs	r3, #4
 8001252:	e000      	b.n	8001256 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001254:	2305      	movs	r3, #5
    }
  }
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	@ 0x30
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800126a:	2300      	movs	r3, #0
 800126c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d009      	beq.n	8001288 <BSP_LED_Init+0x28>
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d006      	beq.n	8001288 <BSP_LED_Init+0x28>
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d003      	beq.n	8001288 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001280:	f06f 0301 	mvn.w	r3, #1
 8001284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001286:	e055      	b.n	8001334 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10f      	bne.n	80012ae <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800128e:	4b2c      	ldr	r3, [pc, #176]	@ (8001340 <BSP_LED_Init+0xe0>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001294:	4a2a      	ldr	r2, [pc, #168]	@ (8001340 <BSP_LED_Init+0xe0>)
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800129e:	4b28      	ldr	r3, [pc, #160]	@ (8001340 <BSP_LED_Init+0xe0>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	e021      	b.n	80012f2 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d10f      	bne.n	80012d4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80012b4:	4b22      	ldr	r3, [pc, #136]	@ (8001340 <BSP_LED_Init+0xe0>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ba:	4a21      	ldr	r2, [pc, #132]	@ (8001340 <BSP_LED_Init+0xe0>)
 80012bc:	f043 0310 	orr.w	r3, r3, #16
 80012c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <BSP_LED_Init+0xe0>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	e00e      	b.n	80012f2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80012d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001340 <BSP_LED_Init+0xe0>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012da:	4a19      	ldr	r2, [pc, #100]	@ (8001340 <BSP_LED_Init+0xe0>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <BSP_LED_Init+0xe0>)
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4a13      	ldr	r2, [pc, #76]	@ (8001344 <BSP_LED_Init+0xe4>)
 80012f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012fa:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4a0f      	ldr	r2, [pc, #60]	@ (8001348 <BSP_LED_Init+0xe8>)
 800130c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001310:	f107 0218 	add.w	r2, r7, #24
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f002 f95c 	bl	80035d4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <BSP_LED_Init+0xe8>)
 8001320:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	4a07      	ldr	r2, [pc, #28]	@ (8001344 <BSP_LED_Init+0xe4>)
 8001328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800132c:	2200      	movs	r2, #0
 800132e:	4619      	mov	r1, r3
 8001330:	f002 fb00 	bl	8003934 <HAL_GPIO_WritePin>
  }

  return ret;
 8001334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001336:	4618      	mov	r0, r3
 8001338:	3730      	adds	r7, #48	@ 0x30
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	58024400 	.word	0x58024400
 8001344:	0801b870 	.word	0x0801b870
 8001348:	2400000c 	.word	0x2400000c

0800134c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	460a      	mov	r2, r1
 8001356:	71fb      	strb	r3, [r7, #7]
 8001358:	4613      	mov	r3, r2
 800135a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800135c:	4b2e      	ldr	r3, [pc, #184]	@ (8001418 <BSP_PB_Init+0xcc>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001362:	4a2d      	ldr	r2, [pc, #180]	@ (8001418 <BSP_PB_Init+0xcc>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800136c:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <BSP_PB_Init+0xcc>)
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800137a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800137e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001380:	2302      	movs	r3, #2
 8001382:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001384:	2302      	movs	r3, #2
 8001386:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10c      	bne.n	80013a8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	4a21      	ldr	r2, [pc, #132]	@ (800141c <BSP_PB_Init+0xd0>)
 8001396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139a:	f107 020c 	add.w	r2, r7, #12
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 f917 	bl	80035d4 <HAL_GPIO_Init>
 80013a6:	e031      	b.n	800140c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80013a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013ac:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	4a1a      	ldr	r2, [pc, #104]	@ (800141c <BSP_PB_Init+0xd0>)
 80013b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b6:	f107 020c 	add.w	r2, r7, #12
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 f909 	bl	80035d4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	4a16      	ldr	r2, [pc, #88]	@ (8001420 <BSP_PB_Init+0xd4>)
 80013c8:	441a      	add	r2, r3
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	4915      	ldr	r1, [pc, #84]	@ (8001424 <BSP_PB_Init+0xd8>)
 80013ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013d2:	4619      	mov	r1, r3
 80013d4:	4610      	mov	r0, r2
 80013d6:	f002 f8ac 	bl	8003532 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4a10      	ldr	r2, [pc, #64]	@ (8001420 <BSP_PB_Init+0xd4>)
 80013e0:	1898      	adds	r0, r3, r2
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	4a10      	ldr	r2, [pc, #64]	@ (8001428 <BSP_PB_Init+0xdc>)
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	461a      	mov	r2, r3
 80013ec:	2100      	movs	r1, #0
 80013ee:	f002 f881 	bl	80034f4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80013f2:	2028      	movs	r0, #40	@ 0x28
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	4a0d      	ldr	r2, [pc, #52]	@ (800142c <BSP_PB_Init+0xe0>)
 80013f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fc:	2200      	movs	r2, #0
 80013fe:	4619      	mov	r1, r3
 8001400:	f000 fa46 	bl	8001890 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001404:	2328      	movs	r3, #40	@ 0x28
 8001406:	4618      	mov	r0, r3
 8001408:	f000 fa5c 	bl	80018c4 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	58024400 	.word	0x58024400
 800141c:	24000018 	.word	0x24000018
 8001420:	24000130 	.word	0x24000130
 8001424:	0801b878 	.word	0x0801b878
 8001428:	2400001c 	.word	0x2400001c
 800142c:	24000020 	.word	0x24000020

08001430 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <BSP_PB_IRQHandler+0x20>)
 8001440:	4413      	add	r3, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f002 f88a 	bl	800355c <HAL_EXTI_IRQHandler>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	24000130 	.word	0x24000130

08001454 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001482:	f06f 0301 	mvn.w	r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	e018      	b.n	80014bc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2294      	movs	r2, #148	@ 0x94
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	4a0d      	ldr	r2, [pc, #52]	@ (80014c8 <BSP_COM_Init+0x5c>)
 8001494:	4413      	add	r3, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f86e 	bl	8001578 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	2294      	movs	r2, #148	@ 0x94
 80014a0:	fb02 f303 	mul.w	r3, r2, r3
 80014a4:	4a08      	ldr	r2, [pc, #32]	@ (80014c8 <BSP_COM_Init+0x5c>)
 80014a6:	4413      	add	r3, r2
 80014a8:	6839      	ldr	r1, [r7, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f80e 	bl	80014cc <MX_USART3_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80014b6:	f06f 0303 	mvn.w	r3, #3
 80014ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80014bc:	68fb      	ldr	r3, [r7, #12]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	24000138 	.word	0x24000138

080014cc <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <MX_USART3_Init+0x60>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	220c      	movs	r2, #12
 80014ea:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	895b      	ldrh	r3, [r3, #10]
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	891b      	ldrh	r3, [r3, #8]
 8001502:	461a      	mov	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	899b      	ldrh	r3, [r3, #12]
 800150c:	461a      	mov	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001518:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f004 f85a 	bl	80055d4 <HAL_UART_Init>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	24000008 	.word	0x24000008

08001530 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <__io_putchar+0x30>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	2394      	movs	r3, #148	@ 0x94
 8001540:	fb02 f303 	mul.w	r3, r2, r3
 8001544:	4a07      	ldr	r2, [pc, #28]	@ (8001564 <__io_putchar+0x34>)
 8001546:	1898      	adds	r0, r3, r2
 8001548:	1d39      	adds	r1, r7, #4
 800154a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800154e:	2201      	movs	r2, #1
 8001550:	f004 f89a 	bl	8005688 <HAL_UART_Transmit>
  return ch;
 8001554:	687b      	ldr	r3, [r7, #4]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	240001cc 	.word	0x240001cc
 8001564:	24000138 	.word	0x24000138

08001568 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff ff71 	bl	8001454 <BSP_PB_Callback>
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	@ 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001580:	4b27      	ldr	r3, [pc, #156]	@ (8001620 <COM1_MspInit+0xa8>)
 8001582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001586:	4a26      	ldr	r2, [pc, #152]	@ (8001620 <COM1_MspInit+0xa8>)
 8001588:	f043 0308 	orr.w	r3, r3, #8
 800158c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001590:	4b23      	ldr	r3, [pc, #140]	@ (8001620 <COM1_MspInit+0xa8>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800159e:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <COM1_MspInit+0xa8>)
 80015a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001620 <COM1_MspInit+0xa8>)
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <COM1_MspInit+0xa8>)
 80015b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80015bc:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <COM1_MspInit+0xa8>)
 80015be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015c2:	4a17      	ldr	r2, [pc, #92]	@ (8001620 <COM1_MspInit+0xa8>)
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015cc:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <COM1_MspInit+0xa8>)
 80015ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80015da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015de:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e4:	2302      	movs	r3, #2
 80015e6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80015ec:	2307      	movs	r3, #7
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	480b      	ldr	r0, [pc, #44]	@ (8001624 <COM1_MspInit+0xac>)
 80015f8:	f001 ffec 	bl	80035d4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80015fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001600:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001606:	2307      	movs	r3, #7
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4804      	ldr	r0, [pc, #16]	@ (8001624 <COM1_MspInit+0xac>)
 8001612:	f001 ffdf 	bl	80035d4 <HAL_GPIO_Init>
}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	@ 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	58024400 	.word	0x58024400
 8001624:	58020c00 	.word	0x58020c00

08001628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162e:	2003      	movs	r0, #3
 8001630:	f000 f923 	bl	800187a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001634:	f003 f830 	bl	8004698 <HAL_RCC_GetSysClockFreq>
 8001638:	4602      	mov	r2, r0
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <HAL_Init+0x68>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	0a1b      	lsrs	r3, r3, #8
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	4913      	ldr	r1, [pc, #76]	@ (8001694 <HAL_Init+0x6c>)
 8001646:	5ccb      	ldrb	r3, [r1, r3]
 8001648:	f003 031f 	and.w	r3, r3, #31
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
 8001650:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <HAL_Init+0x68>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	4a0e      	ldr	r2, [pc, #56]	@ (8001694 <HAL_Init+0x6c>)
 800165c:	5cd3      	ldrb	r3, [r2, r3]
 800165e:	f003 031f 	and.w	r3, r3, #31
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	fa22 f303 	lsr.w	r3, r2, r3
 8001668:	4a0b      	ldr	r2, [pc, #44]	@ (8001698 <HAL_Init+0x70>)
 800166a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800166c:	4a0b      	ldr	r2, [pc, #44]	@ (800169c <HAL_Init+0x74>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001672:	200f      	movs	r0, #15
 8001674:	f7ff fb56 	bl	8000d24 <HAL_InitTick>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e002      	b.n	8001688 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001682:	f7ff fb31 	bl	8000ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	58024400 	.word	0x58024400
 8001694:	0801b83c 	.word	0x0801b83c
 8001698:	24000004 	.word	0x24000004
 800169c:	24000000 	.word	0x24000000

080016a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_IncTick+0x20>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_IncTick+0x24>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <HAL_IncTick+0x24>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	24000028 	.word	0x24000028
 80016c4:	240001d0 	.word	0x240001d0

080016c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b03      	ldr	r3, [pc, #12]	@ (80016dc <HAL_GetTick+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	240001d0 	.word	0x240001d0

080016e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016e4:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <HAL_GetREVID+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	0c1b      	lsrs	r3, r3, #16
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	5c001000 	.word	0x5c001000

080016f8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001708:	4904      	ldr	r1, [pc, #16]	@ (800171c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	58000400 	.word	0x58000400

08001720 <__NVIC_SetPriorityGrouping>:
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <__NVIC_SetPriorityGrouping+0x40>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800173c:	4013      	ands	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 800174a:	4313      	orrs	r3, r2
 800174c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174e:	4a04      	ldr	r2, [pc, #16]	@ (8001760 <__NVIC_SetPriorityGrouping+0x40>)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	60d3      	str	r3, [r2, #12]
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00
 8001764:	05fa0000 	.word	0x05fa0000

08001768 <__NVIC_GetPriorityGrouping>:
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <__NVIC_GetPriorityGrouping+0x18>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f003 0307 	and.w	r3, r3, #7
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_EnableIRQ>:
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800178e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001792:	2b00      	cmp	r3, #0
 8001794:	db0b      	blt.n	80017ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	f003 021f 	and.w	r2, r3, #31
 800179c:	4907      	ldr	r1, [pc, #28]	@ (80017bc <__NVIC_EnableIRQ+0x38>)
 800179e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	2001      	movs	r0, #1
 80017a6:	fa00 f202 	lsl.w	r2, r0, r2
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000e100 	.word	0xe000e100

080017c0 <__NVIC_SetPriority>:
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	6039      	str	r1, [r7, #0]
 80017ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	db0a      	blt.n	80017ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	490c      	ldr	r1, [pc, #48]	@ (800180c <__NVIC_SetPriority+0x4c>)
 80017da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017de:	0112      	lsls	r2, r2, #4
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	440b      	add	r3, r1
 80017e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80017e8:	e00a      	b.n	8001800 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4908      	ldr	r1, [pc, #32]	@ (8001810 <__NVIC_SetPriority+0x50>)
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	3b04      	subs	r3, #4
 80017f8:	0112      	lsls	r2, r2, #4
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	440b      	add	r3, r1
 80017fe:	761a      	strb	r2, [r3, #24]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000e100 	.word	0xe000e100
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <NVIC_EncodePriority>:
{
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	@ 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f1c3 0307 	rsb	r3, r3, #7
 800182e:	2b04      	cmp	r3, #4
 8001830:	bf28      	it	cs
 8001832:	2304      	movcs	r3, #4
 8001834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3304      	adds	r3, #4
 800183a:	2b06      	cmp	r3, #6
 800183c:	d902      	bls.n	8001844 <NVIC_EncodePriority+0x30>
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3b03      	subs	r3, #3
 8001842:	e000      	b.n	8001846 <NVIC_EncodePriority+0x32>
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	f04f 32ff 	mov.w	r2, #4294967295
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43da      	mvns	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	401a      	ands	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800185c:	f04f 31ff 	mov.w	r1, #4294967295
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	43d9      	mvns	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	4313      	orrs	r3, r2
}
 800186e:	4618      	mov	r0, r3
 8001870:	3724      	adds	r7, #36	@ 0x24
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ff4c 	bl	8001720 <__NVIC_SetPriorityGrouping>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800189e:	f7ff ff63 	bl	8001768 <__NVIC_GetPriorityGrouping>
 80018a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	68b9      	ldr	r1, [r7, #8]
 80018a8:	6978      	ldr	r0, [r7, #20]
 80018aa:	f7ff ffb3 	bl	8001814 <NVIC_EncodePriority>
 80018ae:	4602      	mov	r2, r0
 80018b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff82 	bl	80017c0 <__NVIC_SetPriority>
}
 80018bc:	bf00      	nop
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ff56 	bl	8001784 <__NVIC_EnableIRQ>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80018e4:	f3bf 8f5f 	dmb	sy
}
 80018e8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80018ea:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <HAL_MPU_Disable+0x28>)
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	4a06      	ldr	r2, [pc, #24]	@ (8001908 <HAL_MPU_Disable+0x28>)
 80018f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018f4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80018f6:	4b05      	ldr	r3, [pc, #20]	@ (800190c <HAL_MPU_Disable+0x2c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	605a      	str	r2, [r3, #4]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00
 800190c:	e000ed90 	.word	0xe000ed90

08001910 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001918:	4a0b      	ldr	r2, [pc, #44]	@ (8001948 <HAL_MPU_Enable+0x38>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001922:	4b0a      	ldr	r3, [pc, #40]	@ (800194c <HAL_MPU_Enable+0x3c>)
 8001924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001926:	4a09      	ldr	r2, [pc, #36]	@ (800194c <HAL_MPU_Enable+0x3c>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800192c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800192e:	f3bf 8f4f 	dsb	sy
}
 8001932:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001934:	f3bf 8f6f 	isb	sy
}
 8001938:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed90 	.word	0xe000ed90
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	785a      	ldrb	r2, [r3, #1]
 800195c:	4b1b      	ldr	r3, [pc, #108]	@ (80019cc <HAL_MPU_ConfigRegion+0x7c>)
 800195e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001960:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <HAL_MPU_ConfigRegion+0x7c>)
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	4a19      	ldr	r2, [pc, #100]	@ (80019cc <HAL_MPU_ConfigRegion+0x7c>)
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800196c:	4a17      	ldr	r2, [pc, #92]	@ (80019cc <HAL_MPU_ConfigRegion+0x7c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7b1b      	ldrb	r3, [r3, #12]
 8001978:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7adb      	ldrb	r3, [r3, #11]
 800197e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001980:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7a9b      	ldrb	r3, [r3, #10]
 8001986:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001988:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7b5b      	ldrb	r3, [r3, #13]
 800198e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001990:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7b9b      	ldrb	r3, [r3, #14]
 8001996:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001998:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7bdb      	ldrb	r3, [r3, #15]
 800199e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7a5b      	ldrb	r3, [r3, #9]
 80019a6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7a1b      	ldrb	r3, [r3, #8]
 80019ae:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019b0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	7812      	ldrb	r2, [r2, #0]
 80019b6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019b8:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019ba:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019bc:	6113      	str	r3, [r2, #16]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed90 	.word	0xe000ed90

080019d0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80019d4:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <HAL_GetCurrentCPUID+0x24>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	2b07      	cmp	r3, #7
 80019e0:	d101      	bne.n	80019e6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e000      	b.n	80019e8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80019e6:	2301      	movs	r3, #1
  }
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0e3      	b.n	8001bd2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d106      	bne.n	8001a22 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f005 f967 	bl	8006cf0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	4b6e      	ldr	r3, [pc, #440]	@ (8001bdc <HAL_ETH_Init+0x1e4>)
 8001a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a28:	4a6c      	ldr	r2, [pc, #432]	@ (8001bdc <HAL_ETH_Init+0x1e4>)
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a32:	4b6a      	ldr	r3, [pc, #424]	@ (8001bdc <HAL_ETH_Init+0x1e4>)
 8001a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7a1b      	ldrb	r3, [r3, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d103      	bne.n	8001a50 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff fe55 	bl	80016f8 <HAL_SYSCFG_ETHInterfaceSelect>
 8001a4e:	e003      	b.n	8001a58 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a50:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001a54:	f7ff fe50 	bl	80016f8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001a58:	4b61      	ldr	r3, [pc, #388]	@ (8001be0 <HAL_ETH_Init+0x1e8>)
 8001a5a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a74:	f7ff fe28 	bl	80016c8 <HAL_GetTick>
 8001a78:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a7a:	e011      	b.n	8001aa0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a7c:	f7ff fe24 	bl	80016c8 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a8a:	d909      	bls.n	8001aa0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2204      	movs	r2, #4
 8001a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	22e0      	movs	r2, #224	@ 0xe0
 8001a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e098      	b.n	8001bd2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1e4      	bne.n	8001a7c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 ff32 	bl	800291c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001ab8:	f002 ff68 	bl	800498c <HAL_RCC_GetHCLKFreq>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a49      	ldr	r2, [pc, #292]	@ (8001be4 <HAL_ETH_Init+0x1ec>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	0c9a      	lsrs	r2, r3, #18
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	3a01      	subs	r2, #1
 8001acc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f001 f92f 	bl	8002d34 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ade:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001ae2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001aee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001af2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	22e0      	movs	r2, #224	@ 0xe0
 8001b0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e05d      	b.n	8001bd2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b1e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001b22:	4b31      	ldr	r3, [pc, #196]	@ (8001be8 <HAL_ETH_Init+0x1f0>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6952      	ldr	r2, [r2, #20]
 8001b2a:	0051      	lsls	r1, r2, #1
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b36:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f001 f997 	bl	8002e6e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f001 f9dd 	bl	8002f00 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	3305      	adds	r3, #5
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	021a      	lsls	r2, r3, #8
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	3304      	adds	r3, #4
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	3303      	adds	r3, #3
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	061a      	lsls	r2, r3, #24
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	3302      	adds	r3, #2
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	041b      	lsls	r3, r3, #16
 8001b78:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b84:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b92:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b94:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <HAL_ETH_Init+0x1f4>)
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <HAL_ETH_Init+0x1f8>)
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2210      	movs	r2, #16
 8001bcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	58024400 	.word	0x58024400
 8001be0:	58000400 	.word	0x58000400
 8001be4:	431bde83 	.word	0x431bde83
 8001be8:	ffff8001 	.word	0xffff8001
 8001bec:	0c020060 	.word	0x0c020060
 8001bf0:	0c20c000 	.word	0x0c20c000

08001bf4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c02:	2b10      	cmp	r3, #16
 8001c04:	d165      	bne.n	8001cd2 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2204      	movs	r2, #4
 8001c18:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f9e4 	bl	8001fe8 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c28:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c38:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c44:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c54:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c60:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8001c6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c70:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0201 	orr.w	r2, r2, #1
 8001c84:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0202 	orr.w	r2, r2, #2
 8001c96:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cb0:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cc2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2240      	movs	r2, #64	@ 0x40
 8001cca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
  }
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cea:	2b40      	cmp	r3, #64	@ 0x40
 8001cec:	d165      	bne.n	8001dba <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cfe:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	4b30      	ldr	r3, [pc, #192]	@ (8001dc8 <HAL_ETH_Stop_IT+0xec>)
 8001d08:	400b      	ands	r3, r1
 8001d0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d0e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d1a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d2a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d36:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d46:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0201 	bic.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0202 	bic.w	r2, r2, #2
 8001d7c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	e00e      	b.n	8001da2 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	3212      	adds	r2, #18
 8001d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8e:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d9ed      	bls.n	8001d84 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2210      	movs	r2, #16
 8001db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e000      	b.n	8001dbc <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
  }
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	ffff2f3e 	.word	0xffff2f3e

08001dcc <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de2:	f043 0201 	orr.w	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e03a      	b.n	8001e66 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001df6:	2b40      	cmp	r3, #64	@ 0x40
 8001df8:	d134      	bne.n	8001e64 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001e02:	2201      	movs	r2, #1
 8001e04:	6839      	ldr	r1, [r7, #0]
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f001 f8d8 	bl	8002fbc <ETH_Prepare_Tx_Descriptors>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d009      	beq.n	8001e26 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e18:	f043 0202 	orr.w	r2, r3, #2
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e01f      	b.n	8001e66 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e26:	f3bf 8f4f 	dsb	sy
}
 8001e2a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d904      	bls.n	8001e48 <HAL_ETH_Transmit_IT+0x7c>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e42:	1f1a      	subs	r2, r3, #4
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3106      	adds	r1, #6
 8001e54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e5c:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e000      	b.n	8001e66 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
  }
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b088      	sub	sp, #32
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d109      	bne.n	8001e9a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e8c:	f043 0201 	orr.w	r2, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0a2      	b.n	8001fe0 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ea0:	2b40      	cmp	r3, #64	@ 0x40
 8001ea2:	d001      	beq.n	8001ea8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e09b      	b.n	8001fe0 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eac:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	3212      	adds	r2, #18
 8001eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ebe:	f1c3 0304 	rsb	r3, r3, #4
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ec4:	e064      	b.n	8001f90 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d103      	bne.n	8001ef6 <HAL_ETH_ReadData+0x88>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d03a      	beq.n	8001f6c <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f46:	461a      	mov	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	f005 f8b2 	bl	80070b4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	441a      	add	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d902      	bls.n	8001f7e <HAL_ETH_ReadData+0x110>
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	3b04      	subs	r3, #4
 8001f7c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	3212      	adds	r2, #18
 8001f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f88:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	db06      	blt.n	8001fa6 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d202      	bcs.n	8001fa6 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8001fa0:	7cfb      	ldrb	r3, [r7, #19]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d08f      	beq.n	8001ec6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	441a      	add	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f814 	bl	8001fe8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001fc6:	7cfb      	ldrb	r3, [r7, #19]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d108      	bne.n	8001fde <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e000      	b.n	8001fe0 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ffc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	3212      	adds	r2, #18
 8002004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002008:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800200e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002010:	e038      	b.n	8002084 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d112      	bne.n	8002040 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	4618      	mov	r0, r3
 8002020:	f005 f818 	bl	8007054 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	74fb      	strb	r3, [r7, #19]
 800202e:	e007      	b.n	8002040 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	461a      	mov	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	461a      	mov	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8002040:	7cfb      	ldrb	r3, [r7, #19]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d01e      	beq.n	8002084 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	e003      	b.n	8002060 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 800205e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	3301      	adds	r3, #1
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d902      	bls.n	8002072 <ETH_UpdateDescriptor+0x8a>
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	3b04      	subs	r3, #4
 8002070:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	3212      	adds	r2, #18
 8002078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207c:	617b      	str	r3, [r7, #20]
      desccount--;
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	3b01      	subs	r3, #1
 8002082:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <ETH_UpdateDescriptor+0xa8>
 800208a:	7cfb      	ldrb	r3, [r7, #19]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1c0      	bne.n	8002012 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	429a      	cmp	r2, r3
 8002098:	d01b      	beq.n	80020d2 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3303      	adds	r3, #3
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80020a4:	f3bf 8f5f 	dmb	sy
}
 80020a8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6919      	ldr	r1, [r3, #16]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4613      	mov	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	18ca      	adds	r2, r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69fa      	ldr	r2, [r7, #28]
 80020ca:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80020d2:	bf00      	nop
 80020d4:	3720      	adds	r7, #32
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3318      	adds	r3, #24
 80020e6:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ec:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f2:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80020f8:	e047      	b.n	800218a <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80020fa:	2301      	movs	r3, #1
 80020fc:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3b01      	subs	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	3304      	adds	r3, #4
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10a      	bne.n	800212a <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	3301      	adds	r3, #1
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d902      	bls.n	8002126 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	3b04      	subs	r3, #4
 8002124:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800212a:	7bbb      	ldrb	r3, [r7, #14]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d02c      	beq.n	800218a <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68d9      	ldr	r1, [r3, #12]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	440b      	add	r3, r1
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	db1f      	blt.n	8002186 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	3304      	adds	r3, #4
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4618      	mov	r0, r3
 8002154:	f005 f816 	bl	8007184 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	3304      	adds	r3, #4
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	2200      	movs	r2, #0
 8002164:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	3301      	adds	r3, #1
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d902      	bls.n	8002178 <HAL_ETH_ReleaseTxPacket+0x9e>
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	3b04      	subs	r3, #4
 8002176:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002184:	e001      	b.n	800218a <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <HAL_ETH_ReleaseTxPacket+0xbc>
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1b1      	bne.n	80020fa <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80021b0:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ba:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80021be:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021c8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80021cc:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 80021ce:	4b77      	ldr	r3, [pc, #476]	@ (80023ac <HAL_ETH_IRQHandler+0x20c>)
 80021d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d2:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 80021d4:	4b76      	ldr	r3, [pc, #472]	@ (80023b0 <HAL_ETH_IRQHandler+0x210>)
 80021d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d8:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d010      	beq.n	8002206 <HAL_ETH_IRQHandler+0x66>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021f6:	461a      	mov	r2, r3
 80021f8:	f248 0340 	movw	r3, #32832	@ 0x8040
 80021fc:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f004 fab5 	bl	8006770 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d010      	beq.n	8002232 <HAL_ETH_IRQHandler+0x92>
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002222:	461a      	mov	r2, r3
 8002224:	f248 0301 	movw	r3, #32769	@ 0x8001
 8002228:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f004 faaf 	bl	8006790 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d047      	beq.n	80022cc <HAL_ETH_IRQHandler+0x12c>
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d042      	beq.n	80022cc <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224c:	f043 0208 	orr.w	r2, r3, #8
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01e      	beq.n	800229e <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002268:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800226c:	f241 1302 	movw	r3, #4354	@ 0x1102
 8002270:	4013      	ands	r3, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002280:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800228c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002290:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	22e0      	movs	r2, #224	@ 0xe0
 8002298:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800229c:	e013      	b.n	80022c6 <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022a6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80022aa:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022bc:	461a      	mov	r2, r3
 80022be:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 80022c2:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f004 fa72 	bl	80067b0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d104      	bne.n	80022e0 <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d019      	beq.n	8002314 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e6:	f043 0210 	orr.w	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	22e0      	movs	r2, #224	@ 0xe0
 8002302:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f004 fa52 	bl	80067b0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00f      	beq.n	800233e <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002326:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f83f 	bl	80023b4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00f      	beq.n	8002368 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002350:	f003 020f 	and.w	r2, r3, #15
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f834 	bl	80023c8 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8002368:	f7ff fb32 	bl	80019d0 <HAL_GetCurrentCPUID>
 800236c:	4603      	mov	r3, r0
 800236e:	2b03      	cmp	r3, #3
 8002370:	d10c      	bne.n	800238c <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800237c:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <HAL_ETH_IRQHandler+0x20c>)
 800237e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002382:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f829 	bl	80023dc <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 800238a:	e00b      	b.n	80023a4 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d006      	beq.n	80023a4 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002396:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <HAL_ETH_IRQHandler+0x210>)
 8002398:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800239c:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f81c 	bl	80023dc <HAL_ETH_WakeUpCallback>
}
 80023a4:	bf00      	nop
 80023a6:	3720      	adds	r7, #32
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	58000080 	.word	0x58000080
 80023b0:	580000c0 	.word	0x580000c0

080023b4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e03e      	b.n	8002490 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800241a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	055b      	lsls	r3, r3, #21
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	041b      	lsls	r3, r3, #16
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f043 030c 	orr.w	r3, r3, #12
 800243e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002452:	f7ff f939 	bl	80016c8 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002458:	e009      	b.n	800246e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800245a:	f7ff f935 	bl	80016c8 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002468:	d901      	bls.n	800246e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e010      	b.n	8002490 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1ed      	bne.n	800245a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002486:	b29b      	uxth	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e03c      	b.n	8002534 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024c2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	055b      	lsls	r3, r3, #21
 80024ce:	4313      	orrs	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	041b      	lsls	r3, r3, #16
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f023 030c 	bic.w	r3, r3, #12
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	4b10      	ldr	r3, [pc, #64]	@ (800253c <HAL_ETH_WritePHYRegister+0xa4>)
 80024fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80024fe:	4a0f      	ldr	r2, [pc, #60]	@ (800253c <HAL_ETH_WritePHYRegister+0xa4>)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002506:	f7ff f8df 	bl	80016c8 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800250c:	e009      	b.n	8002522 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800250e:	f7ff f8db 	bl	80016c8 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800251c:	d901      	bls.n	8002522 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e008      	b.n	8002534 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1ed      	bne.n	800250e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40028000 	.word	0x40028000

08002540 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e1c3      	b.n	80028dc <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 020c 	and.w	r2, r3, #12
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf0c      	ite	eq
 800259a:	2301      	moveq	r3, #1
 800259c:	2300      	movne	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	bf14      	ite	ne
 80025b6:	2301      	movne	r3, #1
 80025b8:	2300      	moveq	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf0c      	ite	eq
 80025d0:	2301      	moveq	r3, #1
 80025d2:	2300      	movne	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80025e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	bf14      	ite	ne
 80025ea:	2301      	movne	r3, #1
 80025ec:	2300      	moveq	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf14      	ite	ne
 8002604:	2301      	movne	r3, #1
 8002606:	2300      	moveq	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	bf14      	ite	ne
 800263a:	2301      	movne	r3, #1
 800263c:	2300      	moveq	r3, #0
 800263e:	b2db      	uxtb	r3, r3
 8002640:	461a      	mov	r2, r3
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf0c      	ite	eq
 8002654:	2301      	moveq	r3, #1
 8002656:	2300      	movne	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800266a:	2b00      	cmp	r3, #0
 800266c:	bf0c      	ite	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	2300      	movne	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002684:	2b00      	cmp	r3, #0
 8002686:	bf14      	ite	ne
 8002688:	2301      	movne	r3, #1
 800268a:	2300      	moveq	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf14      	ite	ne
 80026a2:	2301      	movne	r3, #1
 80026a4:	2300      	moveq	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bf14      	ite	ne
 80026bc:	2301      	movne	r3, #1
 80026be:	2300      	moveq	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80026ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bf14      	ite	ne
 80026d6:	2301      	movne	r3, #1
 80026d8:	2300      	moveq	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf14      	ite	ne
 80026fe:	2301      	movne	r3, #1
 8002700:	2300      	moveq	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf0c      	ite	eq
 8002734:	2301      	moveq	r3, #1
 8002736:	2300      	movne	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf14      	ite	ne
 8002750:	2301      	movne	r3, #1
 8002752:	2300      	moveq	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002764:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf14      	ite	ne
 800276c:	2301      	movne	r3, #1
 800276e:	2300      	moveq	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf14      	ite	ne
 8002788:	2301      	movne	r3, #1
 800278a:	2300      	moveq	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	0e5b      	lsrs	r3, r3, #25
 800279e:	f003 021f 	and.w	r2, r3, #31
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf14      	ite	ne
 80027b4:	2301      	movne	r3, #1
 80027b6:	2300      	moveq	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 020f 	and.w	r2, r3, #15
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	bf14      	ite	ne
 80027de:	2301      	movne	r3, #1
 80027e0:	2300      	moveq	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	bf0c      	ite	eq
 80027fa:	2301      	moveq	r3, #1
 80027fc:	2300      	movne	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	b29a      	uxth	r2, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf14      	ite	ne
 8002834:	2301      	movne	r3, #1
 8002836:	2300      	moveq	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800284e:	2b00      	cmp	r3, #0
 8002850:	bf14      	ite	ne
 8002852:	2301      	movne	r3, #1
 8002854:	2300      	moveq	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002868:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002878:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf14      	ite	ne
 8002890:	2301      	movne	r3, #1
 8002892:	2300      	moveq	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	bf14      	ite	ne
 80028ae:	2301      	movne	r3, #1
 80028b0:	2300      	moveq	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80028c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bf0c      	ite	eq
 80028cc:	2301      	moveq	r3, #1
 80028ce:	2300      	movne	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e00b      	b.n	8002914 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002902:	2b10      	cmp	r3, #16
 8002904:	d105      	bne.n	8002912 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f871 	bl	80029f0 <ETH_SetMACConfig>

    return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e000      	b.n	8002914 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
  }
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800292c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002934:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002936:	f002 f829 	bl	800498c <HAL_RCC_GetHCLKFreq>
 800293a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4a1a      	ldr	r2, [pc, #104]	@ (80029a8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d804      	bhi.n	800294e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	e022      	b.n	8002994 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	4a16      	ldr	r2, [pc, #88]	@ (80029ac <HAL_ETH_SetMDIOClockRange+0x90>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d204      	bcs.n	8002960 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	e019      	b.n	8002994 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4a13      	ldr	r2, [pc, #76]	@ (80029b0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d915      	bls.n	8002994 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4a12      	ldr	r2, [pc, #72]	@ (80029b4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d804      	bhi.n	800297a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e00c      	b.n	8002994 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4a0e      	ldr	r2, [pc, #56]	@ (80029b8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d804      	bhi.n	800298c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	e003      	b.n	8002994 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002992:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	02160ebf 	.word	0x02160ebf
 80029ac:	03938700 	.word	0x03938700
 80029b0:	05f5e0ff 	.word	0x05f5e0ff
 80029b4:	08f0d17f 	.word	0x08f0d17f
 80029b8:	0ee6b27f 	.word	0x0ee6b27f

080029bc <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002a02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	791b      	ldrb	r3, [r3, #4]
 8002a08:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002a0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	7b1b      	ldrb	r3, [r3, #12]
 8002a10:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002a12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	7b5b      	ldrb	r3, [r3, #13]
 8002a18:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	7b9b      	ldrb	r3, [r3, #14]
 8002a20:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	7bdb      	ldrb	r3, [r3, #15]
 8002a28:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a2a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	7c12      	ldrb	r2, [r2, #16]
 8002a30:	2a00      	cmp	r2, #0
 8002a32:	d102      	bne.n	8002a3a <ETH_SetMACConfig+0x4a>
 8002a34:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002a38:	e000      	b.n	8002a3c <ETH_SetMACConfig+0x4c>
 8002a3a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a3c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	7c52      	ldrb	r2, [r2, #17]
 8002a42:	2a00      	cmp	r2, #0
 8002a44:	d102      	bne.n	8002a4c <ETH_SetMACConfig+0x5c>
 8002a46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a4a:	e000      	b.n	8002a4e <ETH_SetMACConfig+0x5e>
 8002a4c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	7c9b      	ldrb	r3, [r3, #18]
 8002a54:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a56:	431a      	orrs	r2, r3
               macconf->Speed |
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002a5c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002a62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	7f1b      	ldrb	r3, [r3, #28]
 8002a68:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002a6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	7f5b      	ldrb	r3, [r3, #29]
 8002a70:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002a72:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	7f92      	ldrb	r2, [r2, #30]
 8002a78:	2a00      	cmp	r2, #0
 8002a7a:	d102      	bne.n	8002a82 <ETH_SetMACConfig+0x92>
 8002a7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a80:	e000      	b.n	8002a84 <ETH_SetMACConfig+0x94>
 8002a82:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002a84:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	7fdb      	ldrb	r3, [r3, #31]
 8002a8a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002a8c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a94:	2a00      	cmp	r2, #0
 8002a96:	d102      	bne.n	8002a9e <ETH_SetMACConfig+0xae>
 8002a98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a9c:	e000      	b.n	8002aa0 <ETH_SetMACConfig+0xb0>
 8002a9e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002aa0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002aa6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002aae:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002ab0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b56      	ldr	r3, [pc, #344]	@ (8002c1c <ETH_SetMACConfig+0x22c>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	68f9      	ldr	r1, [r7, #12]
 8002aca:	430b      	orrs	r3, r1
 8002acc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ada:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002adc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ae4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ae6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002aee:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002af0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002af8:	2a00      	cmp	r2, #0
 8002afa:	d102      	bne.n	8002b02 <ETH_SetMACConfig+0x112>
 8002afc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b00:	e000      	b.n	8002b04 <ETH_SetMACConfig+0x114>
 8002b02:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002b04:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	4b42      	ldr	r3, [pc, #264]	@ (8002c20 <ETH_SetMACConfig+0x230>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	68f9      	ldr	r1, [r7, #12]
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b28:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	4b3a      	ldr	r3, [pc, #232]	@ (8002c24 <ETH_SetMACConfig+0x234>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	68f9      	ldr	r1, [r7, #12]
 8002b42:	430b      	orrs	r3, r1
 8002b44:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002b4c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b52:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002b5a:	2a00      	cmp	r2, #0
 8002b5c:	d101      	bne.n	8002b62 <ETH_SetMACConfig+0x172>
 8002b5e:	2280      	movs	r2, #128	@ 0x80
 8002b60:	e000      	b.n	8002b64 <ETH_SetMACConfig+0x174>
 8002b62:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002b64:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b6a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b76:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	68f9      	ldr	r1, [r7, #12]
 8002b82:	430b      	orrs	r3, r1
 8002b84:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002b8c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002b94:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba2:	f023 0103 	bic.w	r1, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002bba:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002bd6:	2a00      	cmp	r2, #0
 8002bd8:	d101      	bne.n	8002bde <ETH_SetMACConfig+0x1ee>
 8002bda:	2240      	movs	r2, #64	@ 0x40
 8002bdc:	e000      	b.n	8002be0 <ETH_SetMACConfig+0x1f0>
 8002bde:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002be0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002be8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002bea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002bf2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002c00:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	00048083 	.word	0x00048083
 8002c20:	c0f88000 	.word	0xc0f88000
 8002c24:	fffffef0 	.word	0xfffffef0

08002c28 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b38      	ldr	r3, [pc, #224]	@ (8002d20 <ETH_SetDMAConfig+0xf8>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	6811      	ldr	r1, [r2, #0]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c4e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	791b      	ldrb	r3, [r3, #4]
 8002c54:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c5a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	7b1b      	ldrb	r3, [r3, #12]
 8002c60:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	4b2c      	ldr	r3, [pc, #176]	@ (8002d24 <ETH_SetDMAConfig+0xfc>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	68f9      	ldr	r1, [r7, #12]
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c80:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	7b5b      	ldrb	r3, [r3, #13]
 8002c86:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c98:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002c9c:	4b22      	ldr	r3, [pc, #136]	@ (8002d28 <ETH_SetDMAConfig+0x100>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	68f9      	ldr	r1, [r7, #12]
 8002ca6:	430b      	orrs	r3, r1
 8002ca8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cac:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	7d1b      	ldrb	r3, [r3, #20]
 8002cb8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	7f5b      	ldrb	r3, [r3, #29]
 8002cc0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cce:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002cd2:	4b16      	ldr	r3, [pc, #88]	@ (8002d2c <ETH_SetDMAConfig+0x104>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	68f9      	ldr	r1, [r7, #12]
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ce2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	7f1b      	ldrb	r3, [r3, #28]
 8002cea:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cfc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002d00:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <ETH_SetDMAConfig+0x108>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	68f9      	ldr	r1, [r7, #12]
 8002d0a:	430b      	orrs	r3, r1
 8002d0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d10:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	ffff87fd 	.word	0xffff87fd
 8002d24:	ffff2ffe 	.word	0xffff2ffe
 8002d28:	fffec000 	.word	0xfffec000
 8002d2c:	ffc0efef 	.word	0xffc0efef
 8002d30:	7fc0ffff 	.word	0x7fc0ffff

08002d34 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b0a4      	sub	sp, #144	@ 0x90
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d42:	2300      	movs	r3, #0
 8002d44:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d74:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002d8c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002d90:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002dae:	2300      	movs	r3, #0
 8002db0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002db6:	2300      	movs	r3, #0
 8002db8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002dcc:	2320      	movs	r3, #32
 8002dce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002dde:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002de4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002de8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002df0:	2302      	movs	r3, #2
 8002df2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff fde6 	bl	80029f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e24:	2301      	movs	r3, #1
 8002e26:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e3e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e42:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e4c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002e54:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002e58:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e5a:	f107 0308 	add.w	r3, r7, #8
 8002e5e:	4619      	mov	r1, r3
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff fee1 	bl	8002c28 <ETH_SetDMAConfig>
}
 8002e66:	bf00      	nop
 8002e68:	3790      	adds	r7, #144	@ 0x90
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	e01d      	b.n	8002eb8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68d9      	ldr	r1, [r3, #12]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4613      	mov	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4413      	add	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	440b      	add	r3, r1
 8002e8c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2200      	movs	r2, #0
 8002e98:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	3206      	adds	r2, #6
 8002eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d9de      	bls.n	8002e7c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2303      	movs	r3, #3
 8002ed0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ee0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ef0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e023      	b.n	8002f56 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6919      	ldr	r1, [r3, #16]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4613      	mov	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	440b      	add	r3, r1
 8002f1e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2200      	movs	r2, #0
 8002f36:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2200      	movs	r2, #0
 8002f42:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	3212      	adds	r2, #18
 8002f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3301      	adds	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d9d8      	bls.n	8002f0e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f82:	461a      	mov	r2, r3
 8002f84:	2303      	movs	r3, #3
 8002f86:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f96:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002faa:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b091      	sub	sp, #68	@ 0x44
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3318      	adds	r3, #24
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ffe:	d007      	beq.n	8003010 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003004:	3304      	adds	r3, #4
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003010:	2302      	movs	r3, #2
 8003012:	e266      	b.n	80034e2 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d044      	beq.n	80030aa <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	4b75      	ldr	r3, [pc, #468]	@ (80031fc <ETH_Prepare_Tx_Descriptors+0x240>)
 8003026:	4013      	ands	r3, r2
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800302c:	431a      	orrs	r2, r3
 800302e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003030:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800303a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800303c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800304c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d027      	beq.n	80030aa <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800305a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	b29a      	uxth	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003064:	041b      	lsls	r3, r3, #16
 8003066:	431a      	orrs	r2, r3
 8003068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800306c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003076:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003084:	431a      	orrs	r2, r3
 8003086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003088:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003098:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80030a8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00e      	beq.n	80030d4 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	4b51      	ldr	r3, [pc, #324]	@ (8003200 <ETH_Prepare_Tx_Descriptors+0x244>)
 80030bc:	4013      	ands	r3, r2
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	6992      	ldr	r2, [r2, #24]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80030c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80030d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d2:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d036      	beq.n	800315a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80030ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80030f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80030f8:	f3bf 8f5f 	dmb	sy
}
 80030fc:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80030fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003108:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800310a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800310c:	3301      	adds	r3, #1
 800310e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003112:	2b03      	cmp	r3, #3
 8003114:	d902      	bls.n	800311c <ETH_Prepare_Tx_Descriptors+0x160>
 8003116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003118:	3b04      	subs	r3, #4
 800311a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003124:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8003126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003128:	3301      	adds	r3, #1
 800312a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800312c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003134:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003138:	d10f      	bne.n	800315a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	6a3a      	ldr	r2, [r7, #32]
 800313e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003142:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003144:	f3bf 8f5f 	dmb	sy
}
 8003148:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800314a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003154:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003156:	2302      	movs	r3, #2
 8003158:	e1c3      	b.n	80034e2 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800315a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315c:	3301      	adds	r3, #1
 800315e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003168:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800316a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	4b24      	ldr	r3, [pc, #144]	@ (8003200 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003170:	4013      	ands	r3, r2
 8003172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003174:	6852      	ldr	r2, [r2, #4]
 8003176:	431a      	orrs	r2, r3
 8003178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317a:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 800317c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d012      	beq.n	80031aa <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8003184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800318a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003192:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	4b1a      	ldr	r3, [pc, #104]	@ (8003204 <ETH_Prepare_Tx_Descriptors+0x248>)
 800319a:	4013      	ands	r3, r2
 800319c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800319e:	6852      	ldr	r2, [r2, #4]
 80031a0:	0412      	lsls	r2, r2, #16
 80031a2:	431a      	orrs	r2, r3
 80031a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	e008      	b.n	80031bc <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80031aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ac:	2200      	movs	r2, #0
 80031ae:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80031b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	4b13      	ldr	r3, [pc, #76]	@ (8003204 <ETH_Prepare_Tx_Descriptors+0x248>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ba:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d021      	beq.n	800320c <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80031c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	04db      	lsls	r3, r3, #19
 80031d6:	431a      	orrs	r2, r3
 80031d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031da:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80031dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	4b09      	ldr	r3, [pc, #36]	@ (8003208 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	69d2      	ldr	r2, [r2, #28]
 80031e8:	431a      	orrs	r2, r3
 80031ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ec:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80031ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80031f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	e02e      	b.n	800325a <ETH_Prepare_Tx_Descriptors+0x29e>
 80031fc:	ffff0000 	.word	0xffff0000
 8003200:	ffffc000 	.word	0xffffc000
 8003204:	c000ffff 	.word	0xc000ffff
 8003208:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800320c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	4b7b      	ldr	r3, [pc, #492]	@ (8003400 <ETH_Prepare_Tx_Descriptors+0x444>)
 8003212:	4013      	ands	r3, r2
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	6852      	ldr	r2, [r2, #4]
 8003218:	431a      	orrs	r2, r3
 800321a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321c:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800322a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	431a      	orrs	r2, r3
 8003238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	431a      	orrs	r2, r3
 8003256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003258:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b00      	cmp	r3, #0
 8003264:	d008      	beq.n	8003278 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003272:	431a      	orrs	r2, r3
 8003274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003276:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003282:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800328c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003290:	f3bf 8f5f 	dmb	sy
}
 8003294:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800329e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a0:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 80da 	beq.w	8003464 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80032b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	431a      	orrs	r2, r3
 80032be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c0:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80032c2:	e0cf      	b.n	8003464 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80032c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80032cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ce:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80032d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d2:	3301      	adds	r3, #1
 80032d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d902      	bls.n	80032e2 <ETH_Prepare_Tx_Descriptors+0x326>
 80032dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032de:	3b04      	subs	r3, #4
 80032e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ea:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80032ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80032f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f6:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80032f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003300:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003304:	d007      	beq.n	8003316 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800330a:	3304      	adds	r3, #4
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d029      	beq.n	800336a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800331e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003322:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003324:	2300      	movs	r3, #0
 8003326:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003328:	e019      	b.n	800335e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800332a:	f3bf 8f5f 	dmb	sy
}
 800332e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800333c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800333e:	3301      	adds	r3, #1
 8003340:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003344:	2b03      	cmp	r3, #3
 8003346:	d902      	bls.n	800334e <ETH_Prepare_Tx_Descriptors+0x392>
 8003348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800334a:	3b04      	subs	r3, #4
 800334c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800334e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003350:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003356:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800335a:	3301      	adds	r3, #1
 800335c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800335e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003362:	429a      	cmp	r2, r3
 8003364:	d3e1      	bcc.n	800332a <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8003366:	2302      	movs	r3, #2
 8003368:	e0bb      	b.n	80034e2 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 800336a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336c:	3301      	adds	r3, #1
 800336e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	4b1f      	ldr	r3, [pc, #124]	@ (8003404 <ETH_Prepare_Tx_Descriptors+0x448>)
 8003386:	4013      	ands	r3, r2
 8003388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800338a:	6852      	ldr	r2, [r2, #4]
 800338c:	431a      	orrs	r2, r3
 800338e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003390:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d012      	beq.n	80033c0 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800339a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80033a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80033aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	4b16      	ldr	r3, [pc, #88]	@ (8003408 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033b4:	6852      	ldr	r2, [r2, #4]
 80033b6:	0412      	lsls	r2, r2, #16
 80033b8:	431a      	orrs	r2, r3
 80033ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	e008      	b.n	80033d2 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80033c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c2:	2200      	movs	r2, #0
 80033c4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80033c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003408 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033d0:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d018      	beq.n	8003410 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80033de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <ETH_Prepare_Tx_Descriptors+0x450>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	69d2      	ldr	r2, [r2, #28]
 80033ea:	431a      	orrs	r2, r3
 80033ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ee:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80033f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80033f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fa:	60da      	str	r2, [r3, #12]
 80033fc:	e020      	b.n	8003440 <ETH_Prepare_Tx_Descriptors+0x484>
 80033fe:	bf00      	nop
 8003400:	ffff8000 	.word	0xffff8000
 8003404:	ffffc000 	.word	0xffffc000
 8003408:	c000ffff 	.word	0xc000ffff
 800340c:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	4b36      	ldr	r3, [pc, #216]	@ (80034f0 <ETH_Prepare_Tx_Descriptors+0x534>)
 8003416:	4013      	ands	r3, r2
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	6852      	ldr	r2, [r2, #4]
 800341c:	431a      	orrs	r2, r3
 800341e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003420:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800342e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	431a      	orrs	r2, r3
 800343c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003442:	3301      	adds	r3, #1
 8003444:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003446:	f3bf 8f5f 	dmb	sy
}
 800344a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800344c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003456:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003462:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	f47f af2b 	bne.w	80032c4 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d006      	beq.n	8003482 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800347c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	e005      	b.n	800348e <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800348a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800348e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003498:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800349e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034a2:	3304      	adds	r3, #4
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034ae:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b0:	f3ef 8310 	mrs	r3, PRIMASK
 80034b4:	613b      	str	r3, [r7, #16]
  return(result);
 80034b6:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80034b8:	61fb      	str	r3, [r7, #28]
 80034ba:	2301      	movs	r3, #1
 80034bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f383 8810 	msr	PRIMASK, r3
}
 80034c4:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034cc:	4413      	add	r3, r2
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f383 8810 	msr	PRIMASK, r3
}
 80034de:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3744      	adds	r7, #68	@ 0x44
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	ffff8000 	.word	0xffff8000

080034f4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	460b      	mov	r3, r1
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e00a      	b.n	8003526 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8003510:	7afb      	ldrb	r3, [r7, #11]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	605a      	str	r2, [r3, #4]
      break;
 800351c:	e002      	b.n	8003524 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	75fb      	strb	r3, [r7, #23]
      break;
 8003522:	bf00      	nop
  }

  return status;
 8003524:	7dfb      	ldrb	r3, [r7, #23]
}
 8003526:	4618      	mov	r0, r3
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e003      	b.n	800354e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800354c:	2300      	movs	r3, #0
  }
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	0c1b      	lsrs	r3, r3, #16
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	2201      	movs	r2, #1
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8003580:	f7fe fa26 	bl	80019d0 <HAL_GetCurrentCPUID>
 8003584:	4603      	mov	r3, r0
 8003586:	2b03      	cmp	r3, #3
 8003588:	d105      	bne.n	8003596 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	011a      	lsls	r2, r3, #4
 800358e:	4b0f      	ldr	r3, [pc, #60]	@ (80035cc <HAL_EXTI_IRQHandler+0x70>)
 8003590:	4413      	add	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	e004      	b.n	80035a0 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	011a      	lsls	r2, r3, #4
 800359a:	4b0d      	ldr	r3, [pc, #52]	@ (80035d0 <HAL_EXTI_IRQHandler+0x74>)
 800359c:	4413      	add	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4013      	ands	r3, r2
 80035a8:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d009      	beq.n	80035c4 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4798      	blx	r3
    }
  }
}
 80035c4:	bf00      	nop
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	58000088 	.word	0x58000088
 80035d0:	580000c8 	.word	0x580000c8

080035d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b089      	sub	sp, #36	@ 0x24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80035e2:	4b89      	ldr	r3, [pc, #548]	@ (8003808 <HAL_GPIO_Init+0x234>)
 80035e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035e6:	e194      	b.n	8003912 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	2101      	movs	r1, #1
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	fa01 f303 	lsl.w	r3, r1, r3
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8186 	beq.w	800390c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d005      	beq.n	8003618 <HAL_GPIO_Init+0x44>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d130      	bne.n	800367a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	2203      	movs	r2, #3
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800364e:	2201      	movs	r2, #1
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	f003 0201 	and.w	r2, r3, #1
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b03      	cmp	r3, #3
 8003684:	d017      	beq.n	80036b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	2203      	movs	r2, #3
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4013      	ands	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d123      	bne.n	800370a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	08da      	lsrs	r2, r3, #3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3208      	adds	r2, #8
 80036ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	220f      	movs	r2, #15
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	08da      	lsrs	r2, r3, #3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3208      	adds	r2, #8
 8003704:	69b9      	ldr	r1, [r7, #24]
 8003706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	2203      	movs	r2, #3
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43db      	mvns	r3, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4013      	ands	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 0203 	and.w	r2, r3, #3
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 80e0 	beq.w	800390c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374c:	4b2f      	ldr	r3, [pc, #188]	@ (800380c <HAL_GPIO_Init+0x238>)
 800374e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003752:	4a2e      	ldr	r2, [pc, #184]	@ (800380c <HAL_GPIO_Init+0x238>)
 8003754:	f043 0302 	orr.w	r3, r3, #2
 8003758:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800375c:	4b2b      	ldr	r3, [pc, #172]	@ (800380c <HAL_GPIO_Init+0x238>)
 800375e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800376a:	4a29      	ldr	r2, [pc, #164]	@ (8003810 <HAL_GPIO_Init+0x23c>)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	089b      	lsrs	r3, r3, #2
 8003770:	3302      	adds	r3, #2
 8003772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	220f      	movs	r2, #15
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43db      	mvns	r3, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4013      	ands	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a20      	ldr	r2, [pc, #128]	@ (8003814 <HAL_GPIO_Init+0x240>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d052      	beq.n	800383c <HAL_GPIO_Init+0x268>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1f      	ldr	r2, [pc, #124]	@ (8003818 <HAL_GPIO_Init+0x244>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d031      	beq.n	8003802 <HAL_GPIO_Init+0x22e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1e      	ldr	r2, [pc, #120]	@ (800381c <HAL_GPIO_Init+0x248>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d02b      	beq.n	80037fe <HAL_GPIO_Init+0x22a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003820 <HAL_GPIO_Init+0x24c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d025      	beq.n	80037fa <HAL_GPIO_Init+0x226>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003824 <HAL_GPIO_Init+0x250>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01f      	beq.n	80037f6 <HAL_GPIO_Init+0x222>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003828 <HAL_GPIO_Init+0x254>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d019      	beq.n	80037f2 <HAL_GPIO_Init+0x21e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1a      	ldr	r2, [pc, #104]	@ (800382c <HAL_GPIO_Init+0x258>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d013      	beq.n	80037ee <HAL_GPIO_Init+0x21a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a19      	ldr	r2, [pc, #100]	@ (8003830 <HAL_GPIO_Init+0x25c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00d      	beq.n	80037ea <HAL_GPIO_Init+0x216>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a18      	ldr	r2, [pc, #96]	@ (8003834 <HAL_GPIO_Init+0x260>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d007      	beq.n	80037e6 <HAL_GPIO_Init+0x212>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a17      	ldr	r2, [pc, #92]	@ (8003838 <HAL_GPIO_Init+0x264>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d101      	bne.n	80037e2 <HAL_GPIO_Init+0x20e>
 80037de:	2309      	movs	r3, #9
 80037e0:	e02d      	b.n	800383e <HAL_GPIO_Init+0x26a>
 80037e2:	230a      	movs	r3, #10
 80037e4:	e02b      	b.n	800383e <HAL_GPIO_Init+0x26a>
 80037e6:	2308      	movs	r3, #8
 80037e8:	e029      	b.n	800383e <HAL_GPIO_Init+0x26a>
 80037ea:	2307      	movs	r3, #7
 80037ec:	e027      	b.n	800383e <HAL_GPIO_Init+0x26a>
 80037ee:	2306      	movs	r3, #6
 80037f0:	e025      	b.n	800383e <HAL_GPIO_Init+0x26a>
 80037f2:	2305      	movs	r3, #5
 80037f4:	e023      	b.n	800383e <HAL_GPIO_Init+0x26a>
 80037f6:	2304      	movs	r3, #4
 80037f8:	e021      	b.n	800383e <HAL_GPIO_Init+0x26a>
 80037fa:	2303      	movs	r3, #3
 80037fc:	e01f      	b.n	800383e <HAL_GPIO_Init+0x26a>
 80037fe:	2302      	movs	r3, #2
 8003800:	e01d      	b.n	800383e <HAL_GPIO_Init+0x26a>
 8003802:	2301      	movs	r3, #1
 8003804:	e01b      	b.n	800383e <HAL_GPIO_Init+0x26a>
 8003806:	bf00      	nop
 8003808:	58000080 	.word	0x58000080
 800380c:	58024400 	.word	0x58024400
 8003810:	58000400 	.word	0x58000400
 8003814:	58020000 	.word	0x58020000
 8003818:	58020400 	.word	0x58020400
 800381c:	58020800 	.word	0x58020800
 8003820:	58020c00 	.word	0x58020c00
 8003824:	58021000 	.word	0x58021000
 8003828:	58021400 	.word	0x58021400
 800382c:	58021800 	.word	0x58021800
 8003830:	58021c00 	.word	0x58021c00
 8003834:	58022000 	.word	0x58022000
 8003838:	58022400 	.word	0x58022400
 800383c:	2300      	movs	r3, #0
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	f002 0203 	and.w	r2, r2, #3
 8003844:	0092      	lsls	r2, r2, #2
 8003846:	4093      	lsls	r3, r2
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800384e:	4938      	ldr	r1, [pc, #224]	@ (8003930 <HAL_GPIO_Init+0x35c>)
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	089b      	lsrs	r3, r3, #2
 8003854:	3302      	adds	r3, #2
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800388a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80038b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4013      	ands	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	3301      	adds	r3, #1
 8003910:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	f47f ae63 	bne.w	80035e8 <HAL_GPIO_Init+0x14>
  }
}
 8003922:	bf00      	nop
 8003924:	bf00      	nop
 8003926:	3724      	adds	r7, #36	@ 0x24
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	58000400 	.word	0x58000400

08003934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	807b      	strh	r3, [r7, #2]
 8003940:	4613      	mov	r3, r2
 8003942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003944:	787b      	ldrb	r3, [r7, #1]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003950:	e003      	b.n	800395a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003952:	887b      	ldrh	r3, [r7, #2]
 8003954:	041a      	lsls	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	619a      	str	r2, [r3, #24]
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003970:	4a08      	ldr	r2, [pc, #32]	@ (8003994 <HAL_HSEM_FastTake+0x2c>)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3320      	adds	r3, #32
 8003976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397a:	4a07      	ldr	r2, [pc, #28]	@ (8003998 <HAL_HSEM_FastTake+0x30>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d101      	bne.n	8003984 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	58026400 	.word	0x58026400
 8003998:	80000300 	.word	0x80000300

0800399c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80039a6:	4906      	ldr	r1, [pc, #24]	@ (80039c0 <HAL_HSEM_Release+0x24>)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	58026400 	.word	0x58026400

080039c4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80039cc:	4b29      	ldr	r3, [pc, #164]	@ (8003a74 <HAL_PWREx_ConfigSupply+0xb0>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	2b06      	cmp	r3, #6
 80039d6:	d00a      	beq.n	80039ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039d8:	4b26      	ldr	r3, [pc, #152]	@ (8003a74 <HAL_PWREx_ConfigSupply+0xb0>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d001      	beq.n	80039ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e040      	b.n	8003a6c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e03e      	b.n	8003a6c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039ee:	4b21      	ldr	r3, [pc, #132]	@ (8003a74 <HAL_PWREx_ConfigSupply+0xb0>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80039f6:	491f      	ldr	r1, [pc, #124]	@ (8003a74 <HAL_PWREx_ConfigSupply+0xb0>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039fe:	f7fd fe63 	bl	80016c8 <HAL_GetTick>
 8003a02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a04:	e009      	b.n	8003a1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a06:	f7fd fe5f 	bl	80016c8 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a14:	d901      	bls.n	8003a1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e028      	b.n	8003a6c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a1a:	4b16      	ldr	r3, [pc, #88]	@ (8003a74 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a26:	d1ee      	bne.n	8003a06 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b1e      	cmp	r3, #30
 8003a2c:	d008      	beq.n	8003a40 <HAL_PWREx_ConfigSupply+0x7c>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a32:	d005      	beq.n	8003a40 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b1d      	cmp	r3, #29
 8003a38:	d002      	beq.n	8003a40 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b2d      	cmp	r3, #45	@ 0x2d
 8003a3e:	d114      	bne.n	8003a6a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003a40:	f7fd fe42 	bl	80016c8 <HAL_GetTick>
 8003a44:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a46:	e009      	b.n	8003a5c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a48:	f7fd fe3e 	bl	80016c8 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a56:	d901      	bls.n	8003a5c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e007      	b.n	8003a6c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a5c:	4b05      	ldr	r3, [pc, #20]	@ (8003a74 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a68:	d1ee      	bne.n	8003a48 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	58024800 	.word	0x58024800

08003a78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08c      	sub	sp, #48	@ 0x30
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d102      	bne.n	8003a8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f000 bc48 	b.w	800431c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8088 	beq.w	8003baa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9a:	4b99      	ldr	r3, [pc, #612]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003aa4:	4b96      	ldr	r3, [pc, #600]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d007      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x48>
 8003ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab2:	2b18      	cmp	r3, #24
 8003ab4:	d111      	bne.n	8003ada <HAL_RCC_OscConfig+0x62>
 8003ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d10c      	bne.n	8003ada <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac0:	4b8f      	ldr	r3, [pc, #572]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d06d      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x130>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d169      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f000 bc21 	b.w	800431c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCC_OscConfig+0x7a>
 8003ae4:	4b86      	ldr	r3, [pc, #536]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a85      	ldr	r2, [pc, #532]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003aea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	e02e      	b.n	8003b50 <HAL_RCC_OscConfig+0xd8>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCC_OscConfig+0x9c>
 8003afa:	4b81      	ldr	r3, [pc, #516]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a80      	ldr	r2, [pc, #512]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	4b7e      	ldr	r3, [pc, #504]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a7d      	ldr	r2, [pc, #500]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	e01d      	b.n	8003b50 <HAL_RCC_OscConfig+0xd8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b1c:	d10c      	bne.n	8003b38 <HAL_RCC_OscConfig+0xc0>
 8003b1e:	4b78      	ldr	r3, [pc, #480]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a77      	ldr	r2, [pc, #476]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	4b75      	ldr	r3, [pc, #468]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a74      	ldr	r2, [pc, #464]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e00b      	b.n	8003b50 <HAL_RCC_OscConfig+0xd8>
 8003b38:	4b71      	ldr	r3, [pc, #452]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a70      	ldr	r2, [pc, #448]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	4b6e      	ldr	r3, [pc, #440]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a6d      	ldr	r2, [pc, #436]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d013      	beq.n	8003b80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd fdb6 	bl	80016c8 <HAL_GetTick>
 8003b5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b60:	f7fd fdb2 	bl	80016c8 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	@ 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e3d4      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b72:	4b63      	ldr	r3, [pc, #396]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0xe8>
 8003b7e:	e014      	b.n	8003baa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fd fda2 	bl	80016c8 <HAL_GetTick>
 8003b84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b88:	f7fd fd9e 	bl	80016c8 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	@ 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e3c0      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b9a:	4b59      	ldr	r3, [pc, #356]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x110>
 8003ba6:	e000      	b.n	8003baa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 80ca 	beq.w	8003d4c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bb8:	4b51      	ldr	r3, [pc, #324]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bc0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bc2:	4b4f      	ldr	r3, [pc, #316]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d007      	beq.n	8003bde <HAL_RCC_OscConfig+0x166>
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	2b18      	cmp	r3, #24
 8003bd2:	d156      	bne.n	8003c82 <HAL_RCC_OscConfig+0x20a>
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d151      	bne.n	8003c82 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bde:	4b48      	ldr	r3, [pc, #288]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x17e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e392      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bf6:	4b42      	ldr	r3, [pc, #264]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 0219 	bic.w	r2, r3, #25
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	493f      	ldr	r1, [pc, #252]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fd fd5e 	bl	80016c8 <HAL_GetTick>
 8003c0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c10:	f7fd fd5a 	bl	80016c8 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e37c      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c22:	4b37      	ldr	r3, [pc, #220]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2e:	f7fd fd57 	bl	80016e0 <HAL_GetREVID>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d817      	bhi.n	8003c6c <HAL_RCC_OscConfig+0x1f4>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b40      	cmp	r3, #64	@ 0x40
 8003c42:	d108      	bne.n	8003c56 <HAL_RCC_OscConfig+0x1de>
 8003c44:	4b2e      	ldr	r3, [pc, #184]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003c4c:	4a2c      	ldr	r2, [pc, #176]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c52:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c54:	e07a      	b.n	8003d4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c56:	4b2a      	ldr	r3, [pc, #168]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	031b      	lsls	r3, r3, #12
 8003c64:	4926      	ldr	r1, [pc, #152]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c6a:	e06f      	b.n	8003d4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6c:	4b24      	ldr	r3, [pc, #144]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	4921      	ldr	r1, [pc, #132]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c80:	e064      	b.n	8003d4c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d047      	beq.n	8003d1a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f023 0219 	bic.w	r2, r3, #25
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	491a      	ldr	r1, [pc, #104]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fd fd14 	bl	80016c8 <HAL_GetTick>
 8003ca0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca4:	f7fd fd10 	bl	80016c8 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e332      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cb6:	4b12      	ldr	r3, [pc, #72]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc2:	f7fd fd0d 	bl	80016e0 <HAL_GetREVID>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d819      	bhi.n	8003d04 <HAL_RCC_OscConfig+0x28c>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	2b40      	cmp	r3, #64	@ 0x40
 8003cd6:	d108      	bne.n	8003cea <HAL_RCC_OscConfig+0x272>
 8003cd8:	4b09      	ldr	r3, [pc, #36]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003ce0:	4a07      	ldr	r2, [pc, #28]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ce6:	6053      	str	r3, [r2, #4]
 8003ce8:	e030      	b.n	8003d4c <HAL_RCC_OscConfig+0x2d4>
 8003cea:	4b05      	ldr	r3, [pc, #20]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	031b      	lsls	r3, r3, #12
 8003cf8:	4901      	ldr	r1, [pc, #4]	@ (8003d00 <HAL_RCC_OscConfig+0x288>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	604b      	str	r3, [r1, #4]
 8003cfe:	e025      	b.n	8003d4c <HAL_RCC_OscConfig+0x2d4>
 8003d00:	58024400 	.word	0x58024400
 8003d04:	4b9a      	ldr	r3, [pc, #616]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	4997      	ldr	r1, [pc, #604]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
 8003d18:	e018      	b.n	8003d4c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d1a:	4b95      	ldr	r3, [pc, #596]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a94      	ldr	r2, [pc, #592]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7fd fccf 	bl	80016c8 <HAL_GetTick>
 8003d2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d2e:	f7fd fccb 	bl	80016c8 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e2ed      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d40:	4b8b      	ldr	r3, [pc, #556]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f0      	bne.n	8003d2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80a9 	beq.w	8003eac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5a:	4b85      	ldr	r3, [pc, #532]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d64:	4b82      	ldr	r3, [pc, #520]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d68:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d007      	beq.n	8003d80 <HAL_RCC_OscConfig+0x308>
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2b18      	cmp	r3, #24
 8003d74:	d13a      	bne.n	8003dec <HAL_RCC_OscConfig+0x374>
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d135      	bne.n	8003dec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d80:	4b7b      	ldr	r3, [pc, #492]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_OscConfig+0x320>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	2b80      	cmp	r3, #128	@ 0x80
 8003d92:	d001      	beq.n	8003d98 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e2c1      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d98:	f7fd fca2 	bl	80016e0 <HAL_GetREVID>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d817      	bhi.n	8003dd6 <HAL_RCC_OscConfig+0x35e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d108      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x348>
 8003dae:	4b70      	ldr	r3, [pc, #448]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003db6:	4a6e      	ldr	r2, [pc, #440]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003db8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003dbc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dbe:	e075      	b.n	8003eac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dc0:	4b6b      	ldr	r3, [pc, #428]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	069b      	lsls	r3, r3, #26
 8003dce:	4968      	ldr	r1, [pc, #416]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dd4:	e06a      	b.n	8003eac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dd6:	4b66      	ldr	r3, [pc, #408]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	061b      	lsls	r3, r3, #24
 8003de4:	4962      	ldr	r1, [pc, #392]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dea:	e05f      	b.n	8003eac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d042      	beq.n	8003e7a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003df4:	4b5e      	ldr	r3, [pc, #376]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a5d      	ldr	r2, [pc, #372]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fd fc62 	bl	80016c8 <HAL_GetTick>
 8003e04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e08:	f7fd fc5e 	bl	80016c8 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e280      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e1a:	4b55      	ldr	r3, [pc, #340]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e26:	f7fd fc5b 	bl	80016e0 <HAL_GetREVID>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d817      	bhi.n	8003e64 <HAL_RCC_OscConfig+0x3ec>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d108      	bne.n	8003e4e <HAL_RCC_OscConfig+0x3d6>
 8003e3c:	4b4c      	ldr	r3, [pc, #304]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003e44:	4a4a      	ldr	r2, [pc, #296]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e4a:	6053      	str	r3, [r2, #4]
 8003e4c:	e02e      	b.n	8003eac <HAL_RCC_OscConfig+0x434>
 8003e4e:	4b48      	ldr	r3, [pc, #288]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	069b      	lsls	r3, r3, #26
 8003e5c:	4944      	ldr	r1, [pc, #272]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	604b      	str	r3, [r1, #4]
 8003e62:	e023      	b.n	8003eac <HAL_RCC_OscConfig+0x434>
 8003e64:	4b42      	ldr	r3, [pc, #264]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	061b      	lsls	r3, r3, #24
 8003e72:	493f      	ldr	r1, [pc, #252]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60cb      	str	r3, [r1, #12]
 8003e78:	e018      	b.n	8003eac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a3c      	ldr	r2, [pc, #240]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003e80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e86:	f7fd fc1f 	bl	80016c8 <HAL_GetTick>
 8003e8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e8e:	f7fd fc1b 	bl	80016c8 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e23d      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ea0:	4b33      	ldr	r3, [pc, #204]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f0      	bne.n	8003e8e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d036      	beq.n	8003f26 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d019      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ecc:	f7fd fbfc 	bl	80016c8 <HAL_GetTick>
 8003ed0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed4:	f7fd fbf8 	bl	80016c8 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e21a      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ee6:	4b22      	ldr	r3, [pc, #136]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x45c>
 8003ef2:	e018      	b.n	8003f26 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7fd fbe2 	bl	80016c8 <HAL_GetTick>
 8003f04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f08:	f7fd fbde 	bl	80016c8 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e200      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f1a:	4b15      	ldr	r3, [pc, #84]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d039      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01c      	beq.n	8003f74 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a0c      	ldr	r2, [pc, #48]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003f40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f46:	f7fd fbbf 	bl	80016c8 <HAL_GetTick>
 8003f4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f4e:	f7fd fbbb 	bl	80016c8 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e1dd      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f60:	4b03      	ldr	r3, [pc, #12]	@ (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x4d6>
 8003f6c:	e01b      	b.n	8003fa6 <HAL_RCC_OscConfig+0x52e>
 8003f6e:	bf00      	nop
 8003f70:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f74:	4b9b      	ldr	r3, [pc, #620]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a9a      	ldr	r2, [pc, #616]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8003f7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f80:	f7fd fba2 	bl	80016c8 <HAL_GetTick>
 8003f84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f88:	f7fd fb9e 	bl	80016c8 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e1c0      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f9a:	4b92      	ldr	r3, [pc, #584]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8081 	beq.w	80040b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fb4:	4b8c      	ldr	r3, [pc, #560]	@ (80041e8 <HAL_RCC_OscConfig+0x770>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a8b      	ldr	r2, [pc, #556]	@ (80041e8 <HAL_RCC_OscConfig+0x770>)
 8003fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fc0:	f7fd fb82 	bl	80016c8 <HAL_GetTick>
 8003fc4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc8:	f7fd fb7e 	bl	80016c8 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	@ 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e1a0      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fda:	4b83      	ldr	r3, [pc, #524]	@ (80041e8 <HAL_RCC_OscConfig+0x770>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d106      	bne.n	8003ffc <HAL_RCC_OscConfig+0x584>
 8003fee:	4b7d      	ldr	r3, [pc, #500]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff2:	4a7c      	ldr	r2, [pc, #496]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffa:	e02d      	b.n	8004058 <HAL_RCC_OscConfig+0x5e0>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10c      	bne.n	800401e <HAL_RCC_OscConfig+0x5a6>
 8004004:	4b77      	ldr	r3, [pc, #476]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004008:	4a76      	ldr	r2, [pc, #472]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004010:	4b74      	ldr	r3, [pc, #464]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004014:	4a73      	ldr	r2, [pc, #460]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004016:	f023 0304 	bic.w	r3, r3, #4
 800401a:	6713      	str	r3, [r2, #112]	@ 0x70
 800401c:	e01c      	b.n	8004058 <HAL_RCC_OscConfig+0x5e0>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b05      	cmp	r3, #5
 8004024:	d10c      	bne.n	8004040 <HAL_RCC_OscConfig+0x5c8>
 8004026:	4b6f      	ldr	r3, [pc, #444]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402a:	4a6e      	ldr	r2, [pc, #440]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 800402c:	f043 0304 	orr.w	r3, r3, #4
 8004030:	6713      	str	r3, [r2, #112]	@ 0x70
 8004032:	4b6c      	ldr	r3, [pc, #432]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004036:	4a6b      	ldr	r2, [pc, #428]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	6713      	str	r3, [r2, #112]	@ 0x70
 800403e:	e00b      	b.n	8004058 <HAL_RCC_OscConfig+0x5e0>
 8004040:	4b68      	ldr	r3, [pc, #416]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004044:	4a67      	ldr	r2, [pc, #412]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	6713      	str	r3, [r2, #112]	@ 0x70
 800404c:	4b65      	ldr	r3, [pc, #404]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 800404e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004050:	4a64      	ldr	r2, [pc, #400]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004052:	f023 0304 	bic.w	r3, r3, #4
 8004056:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d015      	beq.n	800408c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004060:	f7fd fb32 	bl	80016c8 <HAL_GetTick>
 8004064:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004066:	e00a      	b.n	800407e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004068:	f7fd fb2e 	bl	80016c8 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e14e      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800407e:	4b59      	ldr	r3, [pc, #356]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0ee      	beq.n	8004068 <HAL_RCC_OscConfig+0x5f0>
 800408a:	e014      	b.n	80040b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408c:	f7fd fb1c 	bl	80016c8 <HAL_GetTick>
 8004090:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004092:	e00a      	b.n	80040aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004094:	f7fd fb18 	bl	80016c8 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e138      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040aa:	4b4e      	ldr	r3, [pc, #312]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1ee      	bne.n	8004094 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 812d 	beq.w	800431a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040c0:	4b48      	ldr	r3, [pc, #288]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040c8:	2b18      	cmp	r3, #24
 80040ca:	f000 80bd 	beq.w	8004248 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	f040 809e 	bne.w	8004214 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d8:	4b42      	ldr	r3, [pc, #264]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a41      	ldr	r2, [pc, #260]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80040de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fd faf0 	bl	80016c8 <HAL_GetTick>
 80040e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ec:	f7fd faec 	bl	80016c8 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e10e      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040fe:	4b39      	ldr	r3, [pc, #228]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800410a:	4b36      	ldr	r3, [pc, #216]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 800410c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800410e:	4b37      	ldr	r3, [pc, #220]	@ (80041ec <HAL_RCC_OscConfig+0x774>)
 8004110:	4013      	ands	r3, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800411a:	0112      	lsls	r2, r2, #4
 800411c:	430a      	orrs	r2, r1
 800411e:	4931      	ldr	r1, [pc, #196]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004120:	4313      	orrs	r3, r2
 8004122:	628b      	str	r3, [r1, #40]	@ 0x28
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004128:	3b01      	subs	r3, #1
 800412a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004132:	3b01      	subs	r3, #1
 8004134:	025b      	lsls	r3, r3, #9
 8004136:	b29b      	uxth	r3, r3
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413e:	3b01      	subs	r3, #1
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414c:	3b01      	subs	r3, #1
 800414e:	061b      	lsls	r3, r3, #24
 8004150:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004154:	4923      	ldr	r1, [pc, #140]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004156:	4313      	orrs	r3, r2
 8004158:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800415a:	4b22      	ldr	r3, [pc, #136]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 800415c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415e:	4a21      	ldr	r2, [pc, #132]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004166:	4b1f      	ldr	r3, [pc, #124]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800416a:	4b21      	ldr	r3, [pc, #132]	@ (80041f0 <HAL_RCC_OscConfig+0x778>)
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004172:	00d2      	lsls	r2, r2, #3
 8004174:	491b      	ldr	r1, [pc, #108]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004176:	4313      	orrs	r3, r2
 8004178:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800417a:	4b1a      	ldr	r3, [pc, #104]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 800417c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417e:	f023 020c 	bic.w	r2, r3, #12
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004186:	4917      	ldr	r1, [pc, #92]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 8004188:	4313      	orrs	r3, r2
 800418a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800418c:	4b15      	ldr	r3, [pc, #84]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	f023 0202 	bic.w	r2, r3, #2
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004198:	4912      	ldr	r1, [pc, #72]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 800419a:	4313      	orrs	r3, r2
 800419c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800419e:	4b11      	ldr	r3, [pc, #68]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a2:	4a10      	ldr	r2, [pc, #64]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041aa:	4b0e      	ldr	r3, [pc, #56]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ae:	4a0d      	ldr	r2, [pc, #52]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041b6:	4b0b      	ldr	r3, [pc, #44]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ba:	4a0a      	ldr	r2, [pc, #40]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80041c2:	4b08      	ldr	r3, [pc, #32]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c6:	4a07      	ldr	r2, [pc, #28]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ce:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a04      	ldr	r2, [pc, #16]	@ (80041e4 <HAL_RCC_OscConfig+0x76c>)
 80041d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041da:	f7fd fa75 	bl	80016c8 <HAL_GetTick>
 80041de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041e0:	e011      	b.n	8004206 <HAL_RCC_OscConfig+0x78e>
 80041e2:	bf00      	nop
 80041e4:	58024400 	.word	0x58024400
 80041e8:	58024800 	.word	0x58024800
 80041ec:	fffffc0c 	.word	0xfffffc0c
 80041f0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f4:	f7fd fa68 	bl	80016c8 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e08a      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004206:	4b47      	ldr	r3, [pc, #284]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x77c>
 8004212:	e082      	b.n	800431a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004214:	4b43      	ldr	r3, [pc, #268]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a42      	ldr	r2, [pc, #264]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 800421a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800421e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fd fa52 	bl	80016c8 <HAL_GetTick>
 8004224:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004228:	f7fd fa4e 	bl	80016c8 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e070      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800423a:	4b3a      	ldr	r3, [pc, #232]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x7b0>
 8004246:	e068      	b.n	800431a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004248:	4b36      	ldr	r3, [pc, #216]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 800424a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800424e:	4b35      	ldr	r3, [pc, #212]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004252:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004258:	2b01      	cmp	r3, #1
 800425a:	d031      	beq.n	80042c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f003 0203 	and.w	r2, r3, #3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004266:	429a      	cmp	r2, r3
 8004268:	d12a      	bne.n	80042c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004276:	429a      	cmp	r2, r3
 8004278:	d122      	bne.n	80042c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004284:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004286:	429a      	cmp	r2, r3
 8004288:	d11a      	bne.n	80042c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	0a5b      	lsrs	r3, r3, #9
 800428e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004296:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004298:	429a      	cmp	r2, r3
 800429a:	d111      	bne.n	80042c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	0c1b      	lsrs	r3, r3, #16
 80042a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d108      	bne.n	80042c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	0e1b      	lsrs	r3, r3, #24
 80042b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042bc:	429a      	cmp	r2, r3
 80042be:	d001      	beq.n	80042c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e02b      	b.n	800431c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80042c4:	4b17      	ldr	r3, [pc, #92]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 80042c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c8:	08db      	lsrs	r3, r3, #3
 80042ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d01f      	beq.n	800431a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80042da:	4b12      	ldr	r3, [pc, #72]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 80042dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042de:	4a11      	ldr	r2, [pc, #68]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042e6:	f7fd f9ef 	bl	80016c8 <HAL_GetTick>
 80042ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80042ec:	bf00      	nop
 80042ee:	f7fd f9eb 	bl	80016c8 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d0f9      	beq.n	80042ee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 80042fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <HAL_RCC_OscConfig+0x8b0>)
 8004300:	4013      	ands	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004306:	00d2      	lsls	r2, r2, #3
 8004308:	4906      	ldr	r1, [pc, #24]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 800430a:	4313      	orrs	r3, r2
 800430c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800430e:	4b05      	ldr	r3, [pc, #20]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 8004310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004312:	4a04      	ldr	r2, [pc, #16]	@ (8004324 <HAL_RCC_OscConfig+0x8ac>)
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3730      	adds	r7, #48	@ 0x30
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	58024400 	.word	0x58024400
 8004328:	ffff0007 	.word	0xffff0007

0800432c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e19c      	b.n	800467a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004340:	4b8a      	ldr	r3, [pc, #552]	@ (800456c <HAL_RCC_ClockConfig+0x240>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d910      	bls.n	8004370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b87      	ldr	r3, [pc, #540]	@ (800456c <HAL_RCC_ClockConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 020f 	bic.w	r2, r3, #15
 8004356:	4985      	ldr	r1, [pc, #532]	@ (800456c <HAL_RCC_ClockConfig+0x240>)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b83      	ldr	r3, [pc, #524]	@ (800456c <HAL_RCC_ClockConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e184      	b.n	800467a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d010      	beq.n	800439e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	4b7b      	ldr	r3, [pc, #492]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004388:	429a      	cmp	r2, r3
 800438a:	d908      	bls.n	800439e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800438c:	4b78      	ldr	r3, [pc, #480]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	4975      	ldr	r1, [pc, #468]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 800439a:	4313      	orrs	r3, r2
 800439c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d010      	beq.n	80043cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695a      	ldr	r2, [r3, #20]
 80043ae:	4b70      	ldr	r3, [pc, #448]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d908      	bls.n	80043cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	496a      	ldr	r1, [pc, #424]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d010      	beq.n	80043fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699a      	ldr	r2, [r3, #24]
 80043dc:	4b64      	ldr	r3, [pc, #400]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d908      	bls.n	80043fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043e8:	4b61      	ldr	r3, [pc, #388]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	495e      	ldr	r1, [pc, #376]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0320 	and.w	r3, r3, #32
 8004402:	2b00      	cmp	r3, #0
 8004404:	d010      	beq.n	8004428 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69da      	ldr	r2, [r3, #28]
 800440a:	4b59      	ldr	r3, [pc, #356]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004412:	429a      	cmp	r2, r3
 8004414:	d908      	bls.n	8004428 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004416:	4b56      	ldr	r3, [pc, #344]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	4953      	ldr	r1, [pc, #332]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004424:	4313      	orrs	r3, r2
 8004426:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d010      	beq.n	8004456 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	4b4d      	ldr	r3, [pc, #308]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	429a      	cmp	r2, r3
 8004442:	d908      	bls.n	8004456 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004444:	4b4a      	ldr	r3, [pc, #296]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	f023 020f 	bic.w	r2, r3, #15
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4947      	ldr	r1, [pc, #284]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004452:	4313      	orrs	r3, r2
 8004454:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d055      	beq.n	800450e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004462:	4b43      	ldr	r3, [pc, #268]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	4940      	ldr	r1, [pc, #256]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004470:	4313      	orrs	r3, r2
 8004472:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d107      	bne.n	800448c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800447c:	4b3c      	ldr	r3, [pc, #240]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d121      	bne.n	80044cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0f6      	b.n	800467a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b03      	cmp	r3, #3
 8004492:	d107      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004494:	4b36      	ldr	r3, [pc, #216]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d115      	bne.n	80044cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0ea      	b.n	800467a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d107      	bne.n	80044bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044ac:	4b30      	ldr	r3, [pc, #192]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d109      	bne.n	80044cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0de      	b.n	800467a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0d6      	b.n	800467a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044cc:	4b28      	ldr	r3, [pc, #160]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f023 0207 	bic.w	r2, r3, #7
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	4925      	ldr	r1, [pc, #148]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044de:	f7fd f8f3 	bl	80016c8 <HAL_GetTick>
 80044e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e4:	e00a      	b.n	80044fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e6:	f7fd f8ef 	bl	80016c8 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e0be      	b.n	800467a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	429a      	cmp	r2, r3
 800450c:	d1eb      	bne.n	80044e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d010      	beq.n	800453c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	4b14      	ldr	r3, [pc, #80]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	429a      	cmp	r2, r3
 8004528:	d208      	bcs.n	800453c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800452a:	4b11      	ldr	r3, [pc, #68]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f023 020f 	bic.w	r2, r3, #15
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	490e      	ldr	r1, [pc, #56]	@ (8004570 <HAL_RCC_ClockConfig+0x244>)
 8004538:	4313      	orrs	r3, r2
 800453a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800453c:	4b0b      	ldr	r3, [pc, #44]	@ (800456c <HAL_RCC_ClockConfig+0x240>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d214      	bcs.n	8004574 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454a:	4b08      	ldr	r3, [pc, #32]	@ (800456c <HAL_RCC_ClockConfig+0x240>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 020f 	bic.w	r2, r3, #15
 8004552:	4906      	ldr	r1, [pc, #24]	@ (800456c <HAL_RCC_ClockConfig+0x240>)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	4313      	orrs	r3, r2
 8004558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455a:	4b04      	ldr	r3, [pc, #16]	@ (800456c <HAL_RCC_ClockConfig+0x240>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d005      	beq.n	8004574 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e086      	b.n	800467a <HAL_RCC_ClockConfig+0x34e>
 800456c:	52002000 	.word	0x52002000
 8004570:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d010      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	4b3f      	ldr	r3, [pc, #252]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800458c:	429a      	cmp	r2, r3
 800458e:	d208      	bcs.n	80045a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004590:	4b3c      	ldr	r3, [pc, #240]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	4939      	ldr	r1, [pc, #228]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d010      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	4b34      	ldr	r3, [pc, #208]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d208      	bcs.n	80045d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045be:	4b31      	ldr	r3, [pc, #196]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	492e      	ldr	r1, [pc, #184]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d010      	beq.n	80045fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699a      	ldr	r2, [r3, #24]
 80045e0:	4b28      	ldr	r3, [pc, #160]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d208      	bcs.n	80045fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045ec:	4b25      	ldr	r3, [pc, #148]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	4922      	ldr	r1, [pc, #136]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b00      	cmp	r3, #0
 8004608:	d010      	beq.n	800462c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	4b1d      	ldr	r3, [pc, #116]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004616:	429a      	cmp	r2, r3
 8004618:	d208      	bcs.n	800462c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800461a:	4b1a      	ldr	r3, [pc, #104]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	4917      	ldr	r1, [pc, #92]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 8004628:	4313      	orrs	r3, r2
 800462a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800462c:	f000 f834 	bl	8004698 <HAL_RCC_GetSysClockFreq>
 8004630:	4602      	mov	r2, r0
 8004632:	4b14      	ldr	r3, [pc, #80]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	0a1b      	lsrs	r3, r3, #8
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	4912      	ldr	r1, [pc, #72]	@ (8004688 <HAL_RCC_ClockConfig+0x35c>)
 800463e:	5ccb      	ldrb	r3, [r1, r3]
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	fa22 f303 	lsr.w	r3, r2, r3
 8004648:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800464a:	4b0e      	ldr	r3, [pc, #56]	@ (8004684 <HAL_RCC_ClockConfig+0x358>)
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	4a0d      	ldr	r2, [pc, #52]	@ (8004688 <HAL_RCC_ClockConfig+0x35c>)
 8004654:	5cd3      	ldrb	r3, [r2, r3]
 8004656:	f003 031f 	and.w	r3, r3, #31
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	fa22 f303 	lsr.w	r3, r2, r3
 8004660:	4a0a      	ldr	r2, [pc, #40]	@ (800468c <HAL_RCC_ClockConfig+0x360>)
 8004662:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004664:	4a0a      	ldr	r2, [pc, #40]	@ (8004690 <HAL_RCC_ClockConfig+0x364>)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800466a:	4b0a      	ldr	r3, [pc, #40]	@ (8004694 <HAL_RCC_ClockConfig+0x368>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f7fc fb58 	bl	8000d24 <HAL_InitTick>
 8004674:	4603      	mov	r3, r0
 8004676:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	58024400 	.word	0x58024400
 8004688:	0801b83c 	.word	0x0801b83c
 800468c:	24000004 	.word	0x24000004
 8004690:	24000000 	.word	0x24000000
 8004694:	24000024 	.word	0x24000024

08004698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004698:	b480      	push	{r7}
 800469a:	b089      	sub	sp, #36	@ 0x24
 800469c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800469e:	4bb3      	ldr	r3, [pc, #716]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046a6:	2b18      	cmp	r3, #24
 80046a8:	f200 8155 	bhi.w	8004956 <HAL_RCC_GetSysClockFreq+0x2be>
 80046ac:	a201      	add	r2, pc, #4	@ (adr r2, 80046b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	08004719 	.word	0x08004719
 80046b8:	08004957 	.word	0x08004957
 80046bc:	08004957 	.word	0x08004957
 80046c0:	08004957 	.word	0x08004957
 80046c4:	08004957 	.word	0x08004957
 80046c8:	08004957 	.word	0x08004957
 80046cc:	08004957 	.word	0x08004957
 80046d0:	08004957 	.word	0x08004957
 80046d4:	0800473f 	.word	0x0800473f
 80046d8:	08004957 	.word	0x08004957
 80046dc:	08004957 	.word	0x08004957
 80046e0:	08004957 	.word	0x08004957
 80046e4:	08004957 	.word	0x08004957
 80046e8:	08004957 	.word	0x08004957
 80046ec:	08004957 	.word	0x08004957
 80046f0:	08004957 	.word	0x08004957
 80046f4:	08004745 	.word	0x08004745
 80046f8:	08004957 	.word	0x08004957
 80046fc:	08004957 	.word	0x08004957
 8004700:	08004957 	.word	0x08004957
 8004704:	08004957 	.word	0x08004957
 8004708:	08004957 	.word	0x08004957
 800470c:	08004957 	.word	0x08004957
 8004710:	08004957 	.word	0x08004957
 8004714:	0800474b 	.word	0x0800474b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004718:	4b94      	ldr	r3, [pc, #592]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d009      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004724:	4b91      	ldr	r3, [pc, #580]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	08db      	lsrs	r3, r3, #3
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	4a90      	ldr	r2, [pc, #576]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
 8004734:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004736:	e111      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004738:	4b8d      	ldr	r3, [pc, #564]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800473a:	61bb      	str	r3, [r7, #24]
      break;
 800473c:	e10e      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800473e:	4b8d      	ldr	r3, [pc, #564]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004740:	61bb      	str	r3, [r7, #24]
      break;
 8004742:	e10b      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004744:	4b8c      	ldr	r3, [pc, #560]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004746:	61bb      	str	r3, [r7, #24]
      break;
 8004748:	e108      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800474a:	4b88      	ldr	r3, [pc, #544]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800474c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004754:	4b85      	ldr	r3, [pc, #532]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004758:	091b      	lsrs	r3, r3, #4
 800475a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800475e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004760:	4b82      	ldr	r3, [pc, #520]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800476a:	4b80      	ldr	r3, [pc, #512]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800476c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800476e:	08db      	lsrs	r3, r3, #3
 8004770:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004782:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 80e1 	beq.w	8004950 <HAL_RCC_GetSysClockFreq+0x2b8>
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b02      	cmp	r3, #2
 8004792:	f000 8083 	beq.w	800489c <HAL_RCC_GetSysClockFreq+0x204>
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b02      	cmp	r3, #2
 800479a:	f200 80a1 	bhi.w	80048e0 <HAL_RCC_GetSysClockFreq+0x248>
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0x114>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d056      	beq.n	8004858 <HAL_RCC_GetSysClockFreq+0x1c0>
 80047aa:	e099      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047ac:	4b6f      	ldr	r3, [pc, #444]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d02d      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047b8:	4b6c      	ldr	r3, [pc, #432]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	08db      	lsrs	r3, r3, #3
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	4a6b      	ldr	r2, [pc, #428]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
 80047c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	ee07 3a90 	vmov	s15, r3
 80047d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e2:	4b62      	ldr	r3, [pc, #392]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80047f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800497c <HAL_RCC_GetSysClockFreq+0x2e4>
 80047fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800480e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004812:	e087      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004980 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004826:	4b51      	ldr	r3, [pc, #324]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004836:	ed97 6a02 	vldr	s12, [r7, #8]
 800483a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800497c <HAL_RCC_GetSysClockFreq+0x2e4>
 800483e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004846:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800484a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800484e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004852:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004856:	e065      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004984 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486a:	4b40      	ldr	r3, [pc, #256]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800486c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800486e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487a:	ed97 6a02 	vldr	s12, [r7, #8]
 800487e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800497c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800488e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004896:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800489a:	e043      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004988 <HAL_RCC_GetSysClockFreq+0x2f0>
 80048aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ae:	4b2f      	ldr	r3, [pc, #188]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048be:	ed97 6a02 	vldr	s12, [r7, #8]
 80048c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800497c <HAL_RCC_GetSysClockFreq+0x2e4>
 80048c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048de:	e021      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004984 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f2:	4b1e      	ldr	r3, [pc, #120]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004902:	ed97 6a02 	vldr	s12, [r7, #8]
 8004906:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800497c <HAL_RCC_GetSysClockFreq+0x2e4>
 800490a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004922:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004924:	4b11      	ldr	r3, [pc, #68]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004928:	0a5b      	lsrs	r3, r3, #9
 800492a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800492e:	3301      	adds	r3, #1
 8004930:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	ee07 3a90 	vmov	s15, r3
 8004938:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800493c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004948:	ee17 3a90 	vmov	r3, s15
 800494c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800494e:	e005      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	61bb      	str	r3, [r7, #24]
      break;
 8004954:	e002      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004956:	4b07      	ldr	r3, [pc, #28]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004958:	61bb      	str	r3, [r7, #24]
      break;
 800495a:	bf00      	nop
  }

  return sysclockfreq;
 800495c:	69bb      	ldr	r3, [r7, #24]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3724      	adds	r7, #36	@ 0x24
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	58024400 	.word	0x58024400
 8004970:	03d09000 	.word	0x03d09000
 8004974:	003d0900 	.word	0x003d0900
 8004978:	017d7840 	.word	0x017d7840
 800497c:	46000000 	.word	0x46000000
 8004980:	4c742400 	.word	0x4c742400
 8004984:	4a742400 	.word	0x4a742400
 8004988:	4bbebc20 	.word	0x4bbebc20

0800498c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004992:	f7ff fe81 	bl	8004698 <HAL_RCC_GetSysClockFreq>
 8004996:	4602      	mov	r2, r0
 8004998:	4b10      	ldr	r3, [pc, #64]	@ (80049dc <HAL_RCC_GetHCLKFreq+0x50>)
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	490f      	ldr	r1, [pc, #60]	@ (80049e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80049a4:	5ccb      	ldrb	r3, [r1, r3]
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	fa22 f303 	lsr.w	r3, r2, r3
 80049ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049b0:	4b0a      	ldr	r3, [pc, #40]	@ (80049dc <HAL_RCC_GetHCLKFreq+0x50>)
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	4a09      	ldr	r2, [pc, #36]	@ (80049e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80049ba:	5cd3      	ldrb	r3, [r2, r3]
 80049bc:	f003 031f 	and.w	r3, r3, #31
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	fa22 f303 	lsr.w	r3, r2, r3
 80049c6:	4a07      	ldr	r2, [pc, #28]	@ (80049e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80049c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049ca:	4a07      	ldr	r2, [pc, #28]	@ (80049e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80049d0:	4b04      	ldr	r3, [pc, #16]	@ (80049e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80049d2:	681b      	ldr	r3, [r3, #0]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	58024400 	.word	0x58024400
 80049e0:	0801b83c 	.word	0x0801b83c
 80049e4:	24000004 	.word	0x24000004
 80049e8:	24000000 	.word	0x24000000

080049ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80049f0:	f7ff ffcc 	bl	800498c <HAL_RCC_GetHCLKFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b06      	ldr	r3, [pc, #24]	@ (8004a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	091b      	lsrs	r3, r3, #4
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	4904      	ldr	r1, [pc, #16]	@ (8004a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	58024400 	.word	0x58024400
 8004a14:	0801b83c 	.word	0x0801b83c

08004a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004a1c:	f7ff ffb6 	bl	800498c <HAL_RCC_GetHCLKFreq>
 8004a20:	4602      	mov	r2, r0
 8004a22:	4b06      	ldr	r3, [pc, #24]	@ (8004a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	0a1b      	lsrs	r3, r3, #8
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	4904      	ldr	r1, [pc, #16]	@ (8004a40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a2e:	5ccb      	ldrb	r3, [r1, r3]
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	58024400 	.word	0x58024400
 8004a40:	0801b83c 	.word	0x0801b83c

08004a44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	223f      	movs	r2, #63	@ 0x3f
 8004a52:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a54:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f003 0207 	and.w	r2, r3, #7
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004a60:	4b17      	ldr	r3, [pc, #92]	@ (8004ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004a6c:	4b14      	ldr	r3, [pc, #80]	@ (8004ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f003 020f 	and.w	r2, r3, #15
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004a78:	4b11      	ldr	r3, [pc, #68]	@ (8004ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004a84:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004a90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004a9c:	4b08      	ldr	r3, [pc, #32]	@ (8004ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004aa8:	4b06      	ldr	r3, [pc, #24]	@ (8004ac4 <HAL_RCC_GetClockConfig+0x80>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 020f 	and.w	r2, r3, #15
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	601a      	str	r2, [r3, #0]
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	58024400 	.word	0x58024400
 8004ac4:	52002000 	.word	0x52002000

08004ac8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004acc:	f7ff ff5e 	bl	800498c <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b06      	ldr	r3, [pc, #24]	@ (8004aec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	091b      	lsrs	r3, r3, #4
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4904      	ldr	r1, [pc, #16]	@ (8004af0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	f003 031f 	and.w	r3, r3, #31
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	58024400 	.word	0x58024400
 8004af0:	0801b83c 	.word	0x0801b83c

08004af4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b089      	sub	sp, #36	@ 0x24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004afc:	4ba1      	ldr	r3, [pc, #644]	@ (8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004b06:	4b9f      	ldr	r3, [pc, #636]	@ (8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0a:	0b1b      	lsrs	r3, r3, #12
 8004b0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b12:	4b9c      	ldr	r3, [pc, #624]	@ (8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b16:	091b      	lsrs	r3, r3, #4
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004b1e:	4b99      	ldr	r3, [pc, #612]	@ (8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b22:	08db      	lsrs	r3, r3, #3
 8004b24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	fb02 f303 	mul.w	r3, r2, r3
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 8111 	beq.w	8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	f000 8083 	beq.w	8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	f200 80a1 	bhi.w	8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d056      	beq.n	8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b5e:	e099      	b.n	8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b60:	4b88      	ldr	r3, [pc, #544]	@ (8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d02d      	beq.n	8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b6c:	4b85      	ldr	r3, [pc, #532]	@ (8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	08db      	lsrs	r3, r3, #3
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	4a84      	ldr	r2, [pc, #528]	@ (8004d88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	ee07 3a90 	vmov	s15, r3
 8004b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b96:	4b7b      	ldr	r3, [pc, #492]	@ (8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004baa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004bc6:	e087      	b.n	8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bda:	4b6a      	ldr	r3, [pc, #424]	@ (8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c0a:	e065      	b.n	8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1e:	4b59      	ldr	r3, [pc, #356]	@ (8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c4e:	e043      	b.n	8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c62:	4b48      	ldr	r3, [pc, #288]	@ (8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c92:	e021      	b.n	8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca6:	4b37      	ldr	r3, [pc, #220]	@ (8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cdc:	0a5b      	lsrs	r3, r3, #9
 8004cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cfe:	ee17 2a90 	vmov	r2, s15
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004d06:	4b1f      	ldr	r3, [pc, #124]	@ (8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0a:	0c1b      	lsrs	r3, r3, #16
 8004d0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d10:	ee07 3a90 	vmov	s15, r3
 8004d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d20:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d2c:	ee17 2a90 	vmov	r2, s15
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004d34:	4b13      	ldr	r3, [pc, #76]	@ (8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d38:	0e1b      	lsrs	r3, r3, #24
 8004d3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d5a:	ee17 2a90 	vmov	r2, s15
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d62:	e008      	b.n	8004d76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	609a      	str	r2, [r3, #8]
}
 8004d76:	bf00      	nop
 8004d78:	3724      	adds	r7, #36	@ 0x24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	58024400 	.word	0x58024400
 8004d88:	03d09000 	.word	0x03d09000
 8004d8c:	46000000 	.word	0x46000000
 8004d90:	4c742400 	.word	0x4c742400
 8004d94:	4a742400 	.word	0x4a742400
 8004d98:	4bbebc20 	.word	0x4bbebc20

08004d9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b089      	sub	sp, #36	@ 0x24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004da4:	4ba1      	ldr	r3, [pc, #644]	@ (800502c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004dae:	4b9f      	ldr	r3, [pc, #636]	@ (800502c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db2:	0d1b      	lsrs	r3, r3, #20
 8004db4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004db8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004dba:	4b9c      	ldr	r3, [pc, #624]	@ (800502c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbe:	0a1b      	lsrs	r3, r3, #8
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004dc6:	4b99      	ldr	r3, [pc, #612]	@ (800502c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dca:	08db      	lsrs	r3, r3, #3
 8004dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	fb02 f303 	mul.w	r3, r2, r3
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 8111 	beq.w	800500c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	f000 8083 	beq.w	8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	f200 80a1 	bhi.w	8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d056      	beq.n	8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e06:	e099      	b.n	8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e08:	4b88      	ldr	r3, [pc, #544]	@ (800502c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d02d      	beq.n	8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e14:	4b85      	ldr	r3, [pc, #532]	@ (800502c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	08db      	lsrs	r3, r3, #3
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	4a84      	ldr	r2, [pc, #528]	@ (8005030 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e20:	fa22 f303 	lsr.w	r3, r2, r3
 8004e24:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	ee07 3a90 	vmov	s15, r3
 8004e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e3e:	4b7b      	ldr	r3, [pc, #492]	@ (800502c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e52:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005034 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e6e:	e087      	b.n	8004f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e82:	4b6a      	ldr	r3, [pc, #424]	@ (800502c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e96:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005034 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eb2:	e065      	b.n	8004f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ebe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800503c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec6:	4b59      	ldr	r3, [pc, #356]	@ (800502c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eda:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005034 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ef6:	e043      	b.n	8004f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f02:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0a:	4b48      	ldr	r3, [pc, #288]	@ (800502c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f1e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005034 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f3a:	e021      	b.n	8004f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f46:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800503c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4e:	4b37      	ldr	r3, [pc, #220]	@ (800502c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005034 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004f80:	4b2a      	ldr	r3, [pc, #168]	@ (800502c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f84:	0a5b      	lsrs	r3, r3, #9
 8004f86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f8a:	ee07 3a90 	vmov	s15, r3
 8004f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fa6:	ee17 2a90 	vmov	r2, s15
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004fae:	4b1f      	ldr	r3, [pc, #124]	@ (800502c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb2:	0c1b      	lsrs	r3, r3, #16
 8004fb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fd4:	ee17 2a90 	vmov	r2, s15
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004fdc:	4b13      	ldr	r3, [pc, #76]	@ (800502c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe0:	0e1b      	lsrs	r3, r3, #24
 8004fe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005002:	ee17 2a90 	vmov	r2, s15
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800500a:	e008      	b.n	800501e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	609a      	str	r2, [r3, #8]
}
 800501e:	bf00      	nop
 8005020:	3724      	adds	r7, #36	@ 0x24
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	58024400 	.word	0x58024400
 8005030:	03d09000 	.word	0x03d09000
 8005034:	46000000 	.word	0x46000000
 8005038:	4c742400 	.word	0x4c742400
 800503c:	4a742400 	.word	0x4a742400
 8005040:	4bbebc20 	.word	0x4bbebc20

08005044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e049      	b.n	80050ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d106      	bne.n	8005070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f841 	bl	80050f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3304      	adds	r3, #4
 8005080:	4619      	mov	r1, r3
 8005082:	4610      	mov	r0, r2
 8005084:	f000 f9e8 	bl	8005458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
	...

08005108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	d001      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e054      	b.n	80051ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0201 	orr.w	r2, r2, #1
 8005136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a26      	ldr	r2, [pc, #152]	@ (80051d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d022      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800514a:	d01d      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a22      	ldr	r2, [pc, #136]	@ (80051dc <HAL_TIM_Base_Start_IT+0xd4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d018      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a21      	ldr	r2, [pc, #132]	@ (80051e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d013      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1f      	ldr	r2, [pc, #124]	@ (80051e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00e      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1e      	ldr	r2, [pc, #120]	@ (80051e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d009      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1c      	ldr	r2, [pc, #112]	@ (80051ec <HAL_TIM_Base_Start_IT+0xe4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1b      	ldr	r2, [pc, #108]	@ (80051f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d115      	bne.n	80051b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	4b19      	ldr	r3, [pc, #100]	@ (80051f4 <HAL_TIM_Base_Start_IT+0xec>)
 8005190:	4013      	ands	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b06      	cmp	r3, #6
 8005198:	d015      	beq.n	80051c6 <HAL_TIM_Base_Start_IT+0xbe>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a0:	d011      	beq.n	80051c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f042 0201 	orr.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b2:	e008      	b.n	80051c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e000      	b.n	80051c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40010000 	.word	0x40010000
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40000800 	.word	0x40000800
 80051e4:	40000c00 	.word	0x40000c00
 80051e8:	40010400 	.word	0x40010400
 80051ec:	40001800 	.word	0x40001800
 80051f0:	40014000 	.word	0x40014000
 80051f4:	00010007 	.word	0x00010007

080051f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d020      	beq.n	800525c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01b      	beq.n	800525c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0202 	mvn.w	r2, #2
 800522c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f8e9 	bl	800541a <HAL_TIM_IC_CaptureCallback>
 8005248:	e005      	b.n	8005256 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f8db 	bl	8005406 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f8ec 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f003 0304 	and.w	r3, r3, #4
 8005262:	2b00      	cmp	r3, #0
 8005264:	d020      	beq.n	80052a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01b      	beq.n	80052a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0204 	mvn.w	r2, #4
 8005278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2202      	movs	r2, #2
 800527e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f8c3 	bl	800541a <HAL_TIM_IC_CaptureCallback>
 8005294:	e005      	b.n	80052a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f8b5 	bl	8005406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f8c6 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d020      	beq.n	80052f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f003 0308 	and.w	r3, r3, #8
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01b      	beq.n	80052f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f06f 0208 	mvn.w	r2, #8
 80052c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2204      	movs	r2, #4
 80052ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f89d 	bl	800541a <HAL_TIM_IC_CaptureCallback>
 80052e0:	e005      	b.n	80052ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f88f 	bl	8005406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f8a0 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f003 0310 	and.w	r3, r3, #16
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d020      	beq.n	8005340 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f003 0310 	and.w	r3, r3, #16
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01b      	beq.n	8005340 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0210 	mvn.w	r2, #16
 8005310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2208      	movs	r2, #8
 8005316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f877 	bl	800541a <HAL_TIM_IC_CaptureCallback>
 800532c:	e005      	b.n	800533a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f869 	bl	8005406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f87a 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00c      	beq.n	8005364 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f06f 0201 	mvn.w	r2, #1
 800535c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fb fcaa 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800536a:	2b00      	cmp	r3, #0
 800536c:	d104      	bne.n	8005378 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00c      	beq.n	8005392 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800538a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f90d 	bl	80055ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00c      	beq.n	80053b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d007      	beq.n	80053b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80053ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f905 	bl	80055c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00c      	beq.n	80053da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d007      	beq.n	80053da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f834 	bl	8005442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00c      	beq.n	80053fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d007      	beq.n	80053fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f06f 0220 	mvn.w	r2, #32
 80053f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f8cd 	bl	8005598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053fe:	bf00      	nop
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a43      	ldr	r2, [pc, #268]	@ (8005578 <TIM_Base_SetConfig+0x120>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d013      	beq.n	8005498 <TIM_Base_SetConfig+0x40>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005476:	d00f      	beq.n	8005498 <TIM_Base_SetConfig+0x40>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a40      	ldr	r2, [pc, #256]	@ (800557c <TIM_Base_SetConfig+0x124>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d00b      	beq.n	8005498 <TIM_Base_SetConfig+0x40>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a3f      	ldr	r2, [pc, #252]	@ (8005580 <TIM_Base_SetConfig+0x128>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d007      	beq.n	8005498 <TIM_Base_SetConfig+0x40>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a3e      	ldr	r2, [pc, #248]	@ (8005584 <TIM_Base_SetConfig+0x12c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d003      	beq.n	8005498 <TIM_Base_SetConfig+0x40>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a3d      	ldr	r2, [pc, #244]	@ (8005588 <TIM_Base_SetConfig+0x130>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d108      	bne.n	80054aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800549e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a32      	ldr	r2, [pc, #200]	@ (8005578 <TIM_Base_SetConfig+0x120>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d01f      	beq.n	80054f2 <TIM_Base_SetConfig+0x9a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054b8:	d01b      	beq.n	80054f2 <TIM_Base_SetConfig+0x9a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a2f      	ldr	r2, [pc, #188]	@ (800557c <TIM_Base_SetConfig+0x124>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d017      	beq.n	80054f2 <TIM_Base_SetConfig+0x9a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a2e      	ldr	r2, [pc, #184]	@ (8005580 <TIM_Base_SetConfig+0x128>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <TIM_Base_SetConfig+0x9a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a2d      	ldr	r2, [pc, #180]	@ (8005584 <TIM_Base_SetConfig+0x12c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00f      	beq.n	80054f2 <TIM_Base_SetConfig+0x9a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a2c      	ldr	r2, [pc, #176]	@ (8005588 <TIM_Base_SetConfig+0x130>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00b      	beq.n	80054f2 <TIM_Base_SetConfig+0x9a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a2b      	ldr	r2, [pc, #172]	@ (800558c <TIM_Base_SetConfig+0x134>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d007      	beq.n	80054f2 <TIM_Base_SetConfig+0x9a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a2a      	ldr	r2, [pc, #168]	@ (8005590 <TIM_Base_SetConfig+0x138>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d003      	beq.n	80054f2 <TIM_Base_SetConfig+0x9a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a29      	ldr	r2, [pc, #164]	@ (8005594 <TIM_Base_SetConfig+0x13c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d108      	bne.n	8005504 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a14      	ldr	r2, [pc, #80]	@ (8005578 <TIM_Base_SetConfig+0x120>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00f      	beq.n	800554a <TIM_Base_SetConfig+0xf2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a16      	ldr	r2, [pc, #88]	@ (8005588 <TIM_Base_SetConfig+0x130>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00b      	beq.n	800554a <TIM_Base_SetConfig+0xf2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a15      	ldr	r2, [pc, #84]	@ (800558c <TIM_Base_SetConfig+0x134>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d007      	beq.n	800554a <TIM_Base_SetConfig+0xf2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a14      	ldr	r2, [pc, #80]	@ (8005590 <TIM_Base_SetConfig+0x138>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d003      	beq.n	800554a <TIM_Base_SetConfig+0xf2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a13      	ldr	r2, [pc, #76]	@ (8005594 <TIM_Base_SetConfig+0x13c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d103      	bne.n	8005552 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f043 0204 	orr.w	r2, r3, #4
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	601a      	str	r2, [r3, #0]
}
 800556a:	bf00      	nop
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	40010000 	.word	0x40010000
 800557c:	40000400 	.word	0x40000400
 8005580:	40000800 	.word	0x40000800
 8005584:	40000c00 	.word	0x40000c00
 8005588:	40010400 	.word	0x40010400
 800558c:	40014000 	.word	0x40014000
 8005590:	40014400 	.word	0x40014400
 8005594:	40014800 	.word	0x40014800

08005598 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e042      	b.n	800566c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d106      	bne.n	80055fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f83b 	bl	8005674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2224      	movs	r2, #36	@ 0x24
 8005602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0201 	bic.w	r2, r2, #1
 8005614:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fe28 	bl	8006274 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f8bd 	bl	80057a4 <UART_SetConfig>
 800562a:	4603      	mov	r3, r0
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e01b      	b.n	800566c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005642:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005652:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fea7 	bl	80063b8 <UART_CheckIdleState>
 800566a:	4603      	mov	r3, r0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08a      	sub	sp, #40	@ 0x28
 800568c:	af02      	add	r7, sp, #8
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	4613      	mov	r3, r2
 8005696:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569e:	2b20      	cmp	r3, #32
 80056a0:	d17b      	bne.n	800579a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <HAL_UART_Transmit+0x26>
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e074      	b.n	800579c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2221      	movs	r2, #33	@ 0x21
 80056be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056c2:	f7fc f801 	bl	80016c8 <HAL_GetTick>
 80056c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	88fa      	ldrh	r2, [r7, #6]
 80056cc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	88fa      	ldrh	r2, [r7, #6]
 80056d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e0:	d108      	bne.n	80056f4 <HAL_UART_Transmit+0x6c>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d104      	bne.n	80056f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	61bb      	str	r3, [r7, #24]
 80056f2:	e003      	b.n	80056fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056f8:	2300      	movs	r3, #0
 80056fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056fc:	e030      	b.n	8005760 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2200      	movs	r2, #0
 8005706:	2180      	movs	r1, #128	@ 0x80
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 feff 	bl	800650c <UART_WaitOnFlagUntilTimeout>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e03d      	b.n	800579c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10b      	bne.n	800573e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005734:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	3302      	adds	r3, #2
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	e007      	b.n	800574e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	781a      	ldrb	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	3301      	adds	r3, #1
 800574c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1c8      	bne.n	80056fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	2200      	movs	r2, #0
 8005774:	2140      	movs	r1, #64	@ 0x40
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 fec8 	bl	800650c <UART_WaitOnFlagUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e006      	b.n	800579c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	e000      	b.n	800579c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800579a:	2302      	movs	r3, #2
  }
}
 800579c:	4618      	mov	r0, r3
 800579e:	3720      	adds	r7, #32
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057a8:	b092      	sub	sp, #72	@ 0x48
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	431a      	orrs	r2, r3
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4bbe      	ldr	r3, [pc, #760]	@ (8005acc <UART_SetConfig+0x328>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	6812      	ldr	r2, [r2, #0]
 80057da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057dc:	430b      	orrs	r3, r1
 80057de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4ab3      	ldr	r2, [pc, #716]	@ (8005ad0 <UART_SetConfig+0x32c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800580c:	4313      	orrs	r3, r2
 800580e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	4baf      	ldr	r3, [pc, #700]	@ (8005ad4 <UART_SetConfig+0x330>)
 8005818:	4013      	ands	r3, r2
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	6812      	ldr	r2, [r2, #0]
 800581e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005820:	430b      	orrs	r3, r1
 8005822:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582a:	f023 010f 	bic.w	r1, r3, #15
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4aa6      	ldr	r2, [pc, #664]	@ (8005ad8 <UART_SetConfig+0x334>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d177      	bne.n	8005934 <UART_SetConfig+0x190>
 8005844:	4ba5      	ldr	r3, [pc, #660]	@ (8005adc <UART_SetConfig+0x338>)
 8005846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005848:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800584c:	2b28      	cmp	r3, #40	@ 0x28
 800584e:	d86d      	bhi.n	800592c <UART_SetConfig+0x188>
 8005850:	a201      	add	r2, pc, #4	@ (adr r2, 8005858 <UART_SetConfig+0xb4>)
 8005852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005856:	bf00      	nop
 8005858:	080058fd 	.word	0x080058fd
 800585c:	0800592d 	.word	0x0800592d
 8005860:	0800592d 	.word	0x0800592d
 8005864:	0800592d 	.word	0x0800592d
 8005868:	0800592d 	.word	0x0800592d
 800586c:	0800592d 	.word	0x0800592d
 8005870:	0800592d 	.word	0x0800592d
 8005874:	0800592d 	.word	0x0800592d
 8005878:	08005905 	.word	0x08005905
 800587c:	0800592d 	.word	0x0800592d
 8005880:	0800592d 	.word	0x0800592d
 8005884:	0800592d 	.word	0x0800592d
 8005888:	0800592d 	.word	0x0800592d
 800588c:	0800592d 	.word	0x0800592d
 8005890:	0800592d 	.word	0x0800592d
 8005894:	0800592d 	.word	0x0800592d
 8005898:	0800590d 	.word	0x0800590d
 800589c:	0800592d 	.word	0x0800592d
 80058a0:	0800592d 	.word	0x0800592d
 80058a4:	0800592d 	.word	0x0800592d
 80058a8:	0800592d 	.word	0x0800592d
 80058ac:	0800592d 	.word	0x0800592d
 80058b0:	0800592d 	.word	0x0800592d
 80058b4:	0800592d 	.word	0x0800592d
 80058b8:	08005915 	.word	0x08005915
 80058bc:	0800592d 	.word	0x0800592d
 80058c0:	0800592d 	.word	0x0800592d
 80058c4:	0800592d 	.word	0x0800592d
 80058c8:	0800592d 	.word	0x0800592d
 80058cc:	0800592d 	.word	0x0800592d
 80058d0:	0800592d 	.word	0x0800592d
 80058d4:	0800592d 	.word	0x0800592d
 80058d8:	0800591d 	.word	0x0800591d
 80058dc:	0800592d 	.word	0x0800592d
 80058e0:	0800592d 	.word	0x0800592d
 80058e4:	0800592d 	.word	0x0800592d
 80058e8:	0800592d 	.word	0x0800592d
 80058ec:	0800592d 	.word	0x0800592d
 80058f0:	0800592d 	.word	0x0800592d
 80058f4:	0800592d 	.word	0x0800592d
 80058f8:	08005925 	.word	0x08005925
 80058fc:	2301      	movs	r3, #1
 80058fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005902:	e222      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005904:	2304      	movs	r3, #4
 8005906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800590a:	e21e      	b.n	8005d4a <UART_SetConfig+0x5a6>
 800590c:	2308      	movs	r3, #8
 800590e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005912:	e21a      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005914:	2310      	movs	r3, #16
 8005916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591a:	e216      	b.n	8005d4a <UART_SetConfig+0x5a6>
 800591c:	2320      	movs	r3, #32
 800591e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005922:	e212      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005924:	2340      	movs	r3, #64	@ 0x40
 8005926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800592a:	e20e      	b.n	8005d4a <UART_SetConfig+0x5a6>
 800592c:	2380      	movs	r3, #128	@ 0x80
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005932:	e20a      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a69      	ldr	r2, [pc, #420]	@ (8005ae0 <UART_SetConfig+0x33c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d130      	bne.n	80059a0 <UART_SetConfig+0x1fc>
 800593e:	4b67      	ldr	r3, [pc, #412]	@ (8005adc <UART_SetConfig+0x338>)
 8005940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	2b05      	cmp	r3, #5
 8005948:	d826      	bhi.n	8005998 <UART_SetConfig+0x1f4>
 800594a:	a201      	add	r2, pc, #4	@ (adr r2, 8005950 <UART_SetConfig+0x1ac>)
 800594c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005950:	08005969 	.word	0x08005969
 8005954:	08005971 	.word	0x08005971
 8005958:	08005979 	.word	0x08005979
 800595c:	08005981 	.word	0x08005981
 8005960:	08005989 	.word	0x08005989
 8005964:	08005991 	.word	0x08005991
 8005968:	2300      	movs	r3, #0
 800596a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800596e:	e1ec      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005970:	2304      	movs	r3, #4
 8005972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005976:	e1e8      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005978:	2308      	movs	r3, #8
 800597a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800597e:	e1e4      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005980:	2310      	movs	r3, #16
 8005982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005986:	e1e0      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005988:	2320      	movs	r3, #32
 800598a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598e:	e1dc      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005990:	2340      	movs	r3, #64	@ 0x40
 8005992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005996:	e1d8      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005998:	2380      	movs	r3, #128	@ 0x80
 800599a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800599e:	e1d4      	b.n	8005d4a <UART_SetConfig+0x5a6>
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a4f      	ldr	r2, [pc, #316]	@ (8005ae4 <UART_SetConfig+0x340>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d130      	bne.n	8005a0c <UART_SetConfig+0x268>
 80059aa:	4b4c      	ldr	r3, [pc, #304]	@ (8005adc <UART_SetConfig+0x338>)
 80059ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	2b05      	cmp	r3, #5
 80059b4:	d826      	bhi.n	8005a04 <UART_SetConfig+0x260>
 80059b6:	a201      	add	r2, pc, #4	@ (adr r2, 80059bc <UART_SetConfig+0x218>)
 80059b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059bc:	080059d5 	.word	0x080059d5
 80059c0:	080059dd 	.word	0x080059dd
 80059c4:	080059e5 	.word	0x080059e5
 80059c8:	080059ed 	.word	0x080059ed
 80059cc:	080059f5 	.word	0x080059f5
 80059d0:	080059fd 	.word	0x080059fd
 80059d4:	2300      	movs	r3, #0
 80059d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059da:	e1b6      	b.n	8005d4a <UART_SetConfig+0x5a6>
 80059dc:	2304      	movs	r3, #4
 80059de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e2:	e1b2      	b.n	8005d4a <UART_SetConfig+0x5a6>
 80059e4:	2308      	movs	r3, #8
 80059e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ea:	e1ae      	b.n	8005d4a <UART_SetConfig+0x5a6>
 80059ec:	2310      	movs	r3, #16
 80059ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f2:	e1aa      	b.n	8005d4a <UART_SetConfig+0x5a6>
 80059f4:	2320      	movs	r3, #32
 80059f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fa:	e1a6      	b.n	8005d4a <UART_SetConfig+0x5a6>
 80059fc:	2340      	movs	r3, #64	@ 0x40
 80059fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a02:	e1a2      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005a04:	2380      	movs	r3, #128	@ 0x80
 8005a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a0a:	e19e      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a35      	ldr	r2, [pc, #212]	@ (8005ae8 <UART_SetConfig+0x344>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d130      	bne.n	8005a78 <UART_SetConfig+0x2d4>
 8005a16:	4b31      	ldr	r3, [pc, #196]	@ (8005adc <UART_SetConfig+0x338>)
 8005a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	2b05      	cmp	r3, #5
 8005a20:	d826      	bhi.n	8005a70 <UART_SetConfig+0x2cc>
 8005a22:	a201      	add	r2, pc, #4	@ (adr r2, 8005a28 <UART_SetConfig+0x284>)
 8005a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a28:	08005a41 	.word	0x08005a41
 8005a2c:	08005a49 	.word	0x08005a49
 8005a30:	08005a51 	.word	0x08005a51
 8005a34:	08005a59 	.word	0x08005a59
 8005a38:	08005a61 	.word	0x08005a61
 8005a3c:	08005a69 	.word	0x08005a69
 8005a40:	2300      	movs	r3, #0
 8005a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a46:	e180      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a4e:	e17c      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005a50:	2308      	movs	r3, #8
 8005a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a56:	e178      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005a58:	2310      	movs	r3, #16
 8005a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5e:	e174      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005a60:	2320      	movs	r3, #32
 8005a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a66:	e170      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005a68:	2340      	movs	r3, #64	@ 0x40
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6e:	e16c      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005a70:	2380      	movs	r3, #128	@ 0x80
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a76:	e168      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005aec <UART_SetConfig+0x348>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d142      	bne.n	8005b08 <UART_SetConfig+0x364>
 8005a82:	4b16      	ldr	r3, [pc, #88]	@ (8005adc <UART_SetConfig+0x338>)
 8005a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	2b05      	cmp	r3, #5
 8005a8c:	d838      	bhi.n	8005b00 <UART_SetConfig+0x35c>
 8005a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a94 <UART_SetConfig+0x2f0>)
 8005a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a94:	08005aad 	.word	0x08005aad
 8005a98:	08005ab5 	.word	0x08005ab5
 8005a9c:	08005abd 	.word	0x08005abd
 8005aa0:	08005ac5 	.word	0x08005ac5
 8005aa4:	08005af1 	.word	0x08005af1
 8005aa8:	08005af9 	.word	0x08005af9
 8005aac:	2300      	movs	r3, #0
 8005aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab2:	e14a      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aba:	e146      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005abc:	2308      	movs	r3, #8
 8005abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac2:	e142      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aca:	e13e      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005acc:	cfff69f3 	.word	0xcfff69f3
 8005ad0:	58000c00 	.word	0x58000c00
 8005ad4:	11fff4ff 	.word	0x11fff4ff
 8005ad8:	40011000 	.word	0x40011000
 8005adc:	58024400 	.word	0x58024400
 8005ae0:	40004400 	.word	0x40004400
 8005ae4:	40004800 	.word	0x40004800
 8005ae8:	40004c00 	.word	0x40004c00
 8005aec:	40005000 	.word	0x40005000
 8005af0:	2320      	movs	r3, #32
 8005af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005af6:	e128      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005af8:	2340      	movs	r3, #64	@ 0x40
 8005afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005afe:	e124      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005b00:	2380      	movs	r3, #128	@ 0x80
 8005b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b06:	e120      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4acb      	ldr	r2, [pc, #812]	@ (8005e3c <UART_SetConfig+0x698>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d176      	bne.n	8005c00 <UART_SetConfig+0x45c>
 8005b12:	4bcb      	ldr	r3, [pc, #812]	@ (8005e40 <UART_SetConfig+0x69c>)
 8005b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b1a:	2b28      	cmp	r3, #40	@ 0x28
 8005b1c:	d86c      	bhi.n	8005bf8 <UART_SetConfig+0x454>
 8005b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b24 <UART_SetConfig+0x380>)
 8005b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b24:	08005bc9 	.word	0x08005bc9
 8005b28:	08005bf9 	.word	0x08005bf9
 8005b2c:	08005bf9 	.word	0x08005bf9
 8005b30:	08005bf9 	.word	0x08005bf9
 8005b34:	08005bf9 	.word	0x08005bf9
 8005b38:	08005bf9 	.word	0x08005bf9
 8005b3c:	08005bf9 	.word	0x08005bf9
 8005b40:	08005bf9 	.word	0x08005bf9
 8005b44:	08005bd1 	.word	0x08005bd1
 8005b48:	08005bf9 	.word	0x08005bf9
 8005b4c:	08005bf9 	.word	0x08005bf9
 8005b50:	08005bf9 	.word	0x08005bf9
 8005b54:	08005bf9 	.word	0x08005bf9
 8005b58:	08005bf9 	.word	0x08005bf9
 8005b5c:	08005bf9 	.word	0x08005bf9
 8005b60:	08005bf9 	.word	0x08005bf9
 8005b64:	08005bd9 	.word	0x08005bd9
 8005b68:	08005bf9 	.word	0x08005bf9
 8005b6c:	08005bf9 	.word	0x08005bf9
 8005b70:	08005bf9 	.word	0x08005bf9
 8005b74:	08005bf9 	.word	0x08005bf9
 8005b78:	08005bf9 	.word	0x08005bf9
 8005b7c:	08005bf9 	.word	0x08005bf9
 8005b80:	08005bf9 	.word	0x08005bf9
 8005b84:	08005be1 	.word	0x08005be1
 8005b88:	08005bf9 	.word	0x08005bf9
 8005b8c:	08005bf9 	.word	0x08005bf9
 8005b90:	08005bf9 	.word	0x08005bf9
 8005b94:	08005bf9 	.word	0x08005bf9
 8005b98:	08005bf9 	.word	0x08005bf9
 8005b9c:	08005bf9 	.word	0x08005bf9
 8005ba0:	08005bf9 	.word	0x08005bf9
 8005ba4:	08005be9 	.word	0x08005be9
 8005ba8:	08005bf9 	.word	0x08005bf9
 8005bac:	08005bf9 	.word	0x08005bf9
 8005bb0:	08005bf9 	.word	0x08005bf9
 8005bb4:	08005bf9 	.word	0x08005bf9
 8005bb8:	08005bf9 	.word	0x08005bf9
 8005bbc:	08005bf9 	.word	0x08005bf9
 8005bc0:	08005bf9 	.word	0x08005bf9
 8005bc4:	08005bf1 	.word	0x08005bf1
 8005bc8:	2301      	movs	r3, #1
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bce:	e0bc      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005bd0:	2304      	movs	r3, #4
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd6:	e0b8      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005bd8:	2308      	movs	r3, #8
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bde:	e0b4      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005be0:	2310      	movs	r3, #16
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be6:	e0b0      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005be8:	2320      	movs	r3, #32
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bee:	e0ac      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005bf0:	2340      	movs	r3, #64	@ 0x40
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf6:	e0a8      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005bf8:	2380      	movs	r3, #128	@ 0x80
 8005bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfe:	e0a4      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a8f      	ldr	r2, [pc, #572]	@ (8005e44 <UART_SetConfig+0x6a0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d130      	bne.n	8005c6c <UART_SetConfig+0x4c8>
 8005c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8005e40 <UART_SetConfig+0x69c>)
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	2b05      	cmp	r3, #5
 8005c14:	d826      	bhi.n	8005c64 <UART_SetConfig+0x4c0>
 8005c16:	a201      	add	r2, pc, #4	@ (adr r2, 8005c1c <UART_SetConfig+0x478>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005c35 	.word	0x08005c35
 8005c20:	08005c3d 	.word	0x08005c3d
 8005c24:	08005c45 	.word	0x08005c45
 8005c28:	08005c4d 	.word	0x08005c4d
 8005c2c:	08005c55 	.word	0x08005c55
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	2300      	movs	r3, #0
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3a:	e086      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c42:	e082      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005c44:	2308      	movs	r3, #8
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4a:	e07e      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c52:	e07a      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005c54:	2320      	movs	r3, #32
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5a:	e076      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005c5c:	2340      	movs	r3, #64	@ 0x40
 8005c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c62:	e072      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005c64:	2380      	movs	r3, #128	@ 0x80
 8005c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6a:	e06e      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a75      	ldr	r2, [pc, #468]	@ (8005e48 <UART_SetConfig+0x6a4>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d130      	bne.n	8005cd8 <UART_SetConfig+0x534>
 8005c76:	4b72      	ldr	r3, [pc, #456]	@ (8005e40 <UART_SetConfig+0x69c>)
 8005c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	2b05      	cmp	r3, #5
 8005c80:	d826      	bhi.n	8005cd0 <UART_SetConfig+0x52c>
 8005c82:	a201      	add	r2, pc, #4	@ (adr r2, 8005c88 <UART_SetConfig+0x4e4>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005ca1 	.word	0x08005ca1
 8005c8c:	08005ca9 	.word	0x08005ca9
 8005c90:	08005cb1 	.word	0x08005cb1
 8005c94:	08005cb9 	.word	0x08005cb9
 8005c98:	08005cc1 	.word	0x08005cc1
 8005c9c:	08005cc9 	.word	0x08005cc9
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca6:	e050      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005ca8:	2304      	movs	r3, #4
 8005caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cae:	e04c      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005cb0:	2308      	movs	r3, #8
 8005cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb6:	e048      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cbe:	e044      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005cc0:	2320      	movs	r3, #32
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc6:	e040      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005cc8:	2340      	movs	r3, #64	@ 0x40
 8005cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cce:	e03c      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005cd0:	2380      	movs	r3, #128	@ 0x80
 8005cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd6:	e038      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a5b      	ldr	r2, [pc, #364]	@ (8005e4c <UART_SetConfig+0x6a8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d130      	bne.n	8005d44 <UART_SetConfig+0x5a0>
 8005ce2:	4b57      	ldr	r3, [pc, #348]	@ (8005e40 <UART_SetConfig+0x69c>)
 8005ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	2b05      	cmp	r3, #5
 8005cec:	d826      	bhi.n	8005d3c <UART_SetConfig+0x598>
 8005cee:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf4 <UART_SetConfig+0x550>)
 8005cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf4:	08005d0d 	.word	0x08005d0d
 8005cf8:	08005d15 	.word	0x08005d15
 8005cfc:	08005d1d 	.word	0x08005d1d
 8005d00:	08005d25 	.word	0x08005d25
 8005d04:	08005d2d 	.word	0x08005d2d
 8005d08:	08005d35 	.word	0x08005d35
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d12:	e01a      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005d14:	2304      	movs	r3, #4
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1a:	e016      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005d1c:	2308      	movs	r3, #8
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d22:	e012      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005d24:	2310      	movs	r3, #16
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2a:	e00e      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005d2c:	2320      	movs	r3, #32
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d32:	e00a      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005d34:	2340      	movs	r3, #64	@ 0x40
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3a:	e006      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005d3c:	2380      	movs	r3, #128	@ 0x80
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d42:	e002      	b.n	8005d4a <UART_SetConfig+0x5a6>
 8005d44:	2380      	movs	r3, #128	@ 0x80
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a3f      	ldr	r2, [pc, #252]	@ (8005e4c <UART_SetConfig+0x6a8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	f040 80f8 	bne.w	8005f46 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	dc46      	bgt.n	8005dec <UART_SetConfig+0x648>
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	f2c0 8082 	blt.w	8005e68 <UART_SetConfig+0x6c4>
 8005d64:	3b02      	subs	r3, #2
 8005d66:	2b1e      	cmp	r3, #30
 8005d68:	d87e      	bhi.n	8005e68 <UART_SetConfig+0x6c4>
 8005d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <UART_SetConfig+0x5cc>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005df3 	.word	0x08005df3
 8005d74:	08005e69 	.word	0x08005e69
 8005d78:	08005dfb 	.word	0x08005dfb
 8005d7c:	08005e69 	.word	0x08005e69
 8005d80:	08005e69 	.word	0x08005e69
 8005d84:	08005e69 	.word	0x08005e69
 8005d88:	08005e0b 	.word	0x08005e0b
 8005d8c:	08005e69 	.word	0x08005e69
 8005d90:	08005e69 	.word	0x08005e69
 8005d94:	08005e69 	.word	0x08005e69
 8005d98:	08005e69 	.word	0x08005e69
 8005d9c:	08005e69 	.word	0x08005e69
 8005da0:	08005e69 	.word	0x08005e69
 8005da4:	08005e69 	.word	0x08005e69
 8005da8:	08005e1b 	.word	0x08005e1b
 8005dac:	08005e69 	.word	0x08005e69
 8005db0:	08005e69 	.word	0x08005e69
 8005db4:	08005e69 	.word	0x08005e69
 8005db8:	08005e69 	.word	0x08005e69
 8005dbc:	08005e69 	.word	0x08005e69
 8005dc0:	08005e69 	.word	0x08005e69
 8005dc4:	08005e69 	.word	0x08005e69
 8005dc8:	08005e69 	.word	0x08005e69
 8005dcc:	08005e69 	.word	0x08005e69
 8005dd0:	08005e69 	.word	0x08005e69
 8005dd4:	08005e69 	.word	0x08005e69
 8005dd8:	08005e69 	.word	0x08005e69
 8005ddc:	08005e69 	.word	0x08005e69
 8005de0:	08005e69 	.word	0x08005e69
 8005de4:	08005e69 	.word	0x08005e69
 8005de8:	08005e5b 	.word	0x08005e5b
 8005dec:	2b40      	cmp	r3, #64	@ 0x40
 8005dee:	d037      	beq.n	8005e60 <UART_SetConfig+0x6bc>
 8005df0:	e03a      	b.n	8005e68 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005df2:	f7fe fe69 	bl	8004ac8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005df6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005df8:	e03c      	b.n	8005e74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe fe78 	bl	8004af4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e08:	e034      	b.n	8005e74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e0a:	f107 0318 	add.w	r3, r7, #24
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fe ffc4 	bl	8004d9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e18:	e02c      	b.n	8005e74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e1a:	4b09      	ldr	r3, [pc, #36]	@ (8005e40 <UART_SetConfig+0x69c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d016      	beq.n	8005e54 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e26:	4b06      	ldr	r3, [pc, #24]	@ (8005e40 <UART_SetConfig+0x69c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	08db      	lsrs	r3, r3, #3
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	4a07      	ldr	r2, [pc, #28]	@ (8005e50 <UART_SetConfig+0x6ac>)
 8005e32:	fa22 f303 	lsr.w	r3, r2, r3
 8005e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e38:	e01c      	b.n	8005e74 <UART_SetConfig+0x6d0>
 8005e3a:	bf00      	nop
 8005e3c:	40011400 	.word	0x40011400
 8005e40:	58024400 	.word	0x58024400
 8005e44:	40007800 	.word	0x40007800
 8005e48:	40007c00 	.word	0x40007c00
 8005e4c:	58000c00 	.word	0x58000c00
 8005e50:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005e54:	4b9d      	ldr	r3, [pc, #628]	@ (80060cc <UART_SetConfig+0x928>)
 8005e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e58:	e00c      	b.n	8005e74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e5a:	4b9d      	ldr	r3, [pc, #628]	@ (80060d0 <UART_SetConfig+0x92c>)
 8005e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e5e:	e009      	b.n	8005e74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e66:	e005      	b.n	8005e74 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005e72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 81de 	beq.w	8006238 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e80:	4a94      	ldr	r2, [pc, #592]	@ (80060d4 <UART_SetConfig+0x930>)
 8005e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e86:	461a      	mov	r2, r3
 8005e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e8e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	4613      	mov	r3, r2
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	4413      	add	r3, r2
 8005e9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d305      	bcc.n	8005eac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d903      	bls.n	8005eb4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005eb2:	e1c1      	b.n	8006238 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	60bb      	str	r3, [r7, #8]
 8005eba:	60fa      	str	r2, [r7, #12]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec0:	4a84      	ldr	r2, [pc, #528]	@ (80060d4 <UART_SetConfig+0x930>)
 8005ec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2200      	movs	r2, #0
 8005eca:	603b      	str	r3, [r7, #0]
 8005ecc:	607a      	str	r2, [r7, #4]
 8005ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ed2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ed6:	f7fa fa53 	bl	8000380 <__aeabi_uldivmod>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4610      	mov	r0, r2
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	020b      	lsls	r3, r1, #8
 8005eec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ef0:	0202      	lsls	r2, r0, #8
 8005ef2:	6979      	ldr	r1, [r7, #20]
 8005ef4:	6849      	ldr	r1, [r1, #4]
 8005ef6:	0849      	lsrs	r1, r1, #1
 8005ef8:	2000      	movs	r0, #0
 8005efa:	460c      	mov	r4, r1
 8005efc:	4605      	mov	r5, r0
 8005efe:	eb12 0804 	adds.w	r8, r2, r4
 8005f02:	eb43 0905 	adc.w	r9, r3, r5
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	469a      	mov	sl, r3
 8005f0e:	4693      	mov	fp, r2
 8005f10:	4652      	mov	r2, sl
 8005f12:	465b      	mov	r3, fp
 8005f14:	4640      	mov	r0, r8
 8005f16:	4649      	mov	r1, r9
 8005f18:	f7fa fa32 	bl	8000380 <__aeabi_uldivmod>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4613      	mov	r3, r2
 8005f22:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f2a:	d308      	bcc.n	8005f3e <UART_SetConfig+0x79a>
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f32:	d204      	bcs.n	8005f3e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f3a:	60da      	str	r2, [r3, #12]
 8005f3c:	e17c      	b.n	8006238 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005f44:	e178      	b.n	8006238 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f4e:	f040 80c5 	bne.w	80060dc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005f52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	dc48      	bgt.n	8005fec <UART_SetConfig+0x848>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	db7b      	blt.n	8006056 <UART_SetConfig+0x8b2>
 8005f5e:	2b20      	cmp	r3, #32
 8005f60:	d879      	bhi.n	8006056 <UART_SetConfig+0x8b2>
 8005f62:	a201      	add	r2, pc, #4	@ (adr r2, 8005f68 <UART_SetConfig+0x7c4>)
 8005f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f68:	08005ff3 	.word	0x08005ff3
 8005f6c:	08005ffb 	.word	0x08005ffb
 8005f70:	08006057 	.word	0x08006057
 8005f74:	08006057 	.word	0x08006057
 8005f78:	08006003 	.word	0x08006003
 8005f7c:	08006057 	.word	0x08006057
 8005f80:	08006057 	.word	0x08006057
 8005f84:	08006057 	.word	0x08006057
 8005f88:	08006013 	.word	0x08006013
 8005f8c:	08006057 	.word	0x08006057
 8005f90:	08006057 	.word	0x08006057
 8005f94:	08006057 	.word	0x08006057
 8005f98:	08006057 	.word	0x08006057
 8005f9c:	08006057 	.word	0x08006057
 8005fa0:	08006057 	.word	0x08006057
 8005fa4:	08006057 	.word	0x08006057
 8005fa8:	08006023 	.word	0x08006023
 8005fac:	08006057 	.word	0x08006057
 8005fb0:	08006057 	.word	0x08006057
 8005fb4:	08006057 	.word	0x08006057
 8005fb8:	08006057 	.word	0x08006057
 8005fbc:	08006057 	.word	0x08006057
 8005fc0:	08006057 	.word	0x08006057
 8005fc4:	08006057 	.word	0x08006057
 8005fc8:	08006057 	.word	0x08006057
 8005fcc:	08006057 	.word	0x08006057
 8005fd0:	08006057 	.word	0x08006057
 8005fd4:	08006057 	.word	0x08006057
 8005fd8:	08006057 	.word	0x08006057
 8005fdc:	08006057 	.word	0x08006057
 8005fe0:	08006057 	.word	0x08006057
 8005fe4:	08006057 	.word	0x08006057
 8005fe8:	08006049 	.word	0x08006049
 8005fec:	2b40      	cmp	r3, #64	@ 0x40
 8005fee:	d02e      	beq.n	800604e <UART_SetConfig+0x8aa>
 8005ff0:	e031      	b.n	8006056 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff2:	f7fe fcfb 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 8005ff6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ff8:	e033      	b.n	8006062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ffa:	f7fe fd0d 	bl	8004a18 <HAL_RCC_GetPCLK2Freq>
 8005ffe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006000:	e02f      	b.n	8006062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006006:	4618      	mov	r0, r3
 8006008:	f7fe fd74 	bl	8004af4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800600c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006010:	e027      	b.n	8006062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006012:	f107 0318 	add.w	r3, r7, #24
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe fec0 	bl	8004d9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006020:	e01f      	b.n	8006062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006022:	4b2d      	ldr	r3, [pc, #180]	@ (80060d8 <UART_SetConfig+0x934>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800602e:	4b2a      	ldr	r3, [pc, #168]	@ (80060d8 <UART_SetConfig+0x934>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	08db      	lsrs	r3, r3, #3
 8006034:	f003 0303 	and.w	r3, r3, #3
 8006038:	4a24      	ldr	r2, [pc, #144]	@ (80060cc <UART_SetConfig+0x928>)
 800603a:	fa22 f303 	lsr.w	r3, r2, r3
 800603e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006040:	e00f      	b.n	8006062 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006042:	4b22      	ldr	r3, [pc, #136]	@ (80060cc <UART_SetConfig+0x928>)
 8006044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006046:	e00c      	b.n	8006062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006048:	4b21      	ldr	r3, [pc, #132]	@ (80060d0 <UART_SetConfig+0x92c>)
 800604a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800604c:	e009      	b.n	8006062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800604e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006054:	e005      	b.n	8006062 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006060:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 80e7 	beq.w	8006238 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	4a19      	ldr	r2, [pc, #100]	@ (80060d4 <UART_SetConfig+0x930>)
 8006070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006074:	461a      	mov	r2, r3
 8006076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006078:	fbb3 f3f2 	udiv	r3, r3, r2
 800607c:	005a      	lsls	r2, r3, #1
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	085b      	lsrs	r3, r3, #1
 8006084:	441a      	add	r2, r3
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	fbb2 f3f3 	udiv	r3, r2, r3
 800608e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006092:	2b0f      	cmp	r3, #15
 8006094:	d916      	bls.n	80060c4 <UART_SetConfig+0x920>
 8006096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800609c:	d212      	bcs.n	80060c4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800609e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f023 030f 	bic.w	r3, r3, #15
 80060a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060aa:	085b      	lsrs	r3, r3, #1
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80060b6:	4313      	orrs	r3, r2
 80060b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80060c0:	60da      	str	r2, [r3, #12]
 80060c2:	e0b9      	b.n	8006238 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80060ca:	e0b5      	b.n	8006238 <UART_SetConfig+0xa94>
 80060cc:	03d09000 	.word	0x03d09000
 80060d0:	003d0900 	.word	0x003d0900
 80060d4:	0801b87c 	.word	0x0801b87c
 80060d8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80060dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	dc49      	bgt.n	8006178 <UART_SetConfig+0x9d4>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	db7c      	blt.n	80061e2 <UART_SetConfig+0xa3e>
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d87a      	bhi.n	80061e2 <UART_SetConfig+0xa3e>
 80060ec:	a201      	add	r2, pc, #4	@ (adr r2, 80060f4 <UART_SetConfig+0x950>)
 80060ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f2:	bf00      	nop
 80060f4:	0800617f 	.word	0x0800617f
 80060f8:	08006187 	.word	0x08006187
 80060fc:	080061e3 	.word	0x080061e3
 8006100:	080061e3 	.word	0x080061e3
 8006104:	0800618f 	.word	0x0800618f
 8006108:	080061e3 	.word	0x080061e3
 800610c:	080061e3 	.word	0x080061e3
 8006110:	080061e3 	.word	0x080061e3
 8006114:	0800619f 	.word	0x0800619f
 8006118:	080061e3 	.word	0x080061e3
 800611c:	080061e3 	.word	0x080061e3
 8006120:	080061e3 	.word	0x080061e3
 8006124:	080061e3 	.word	0x080061e3
 8006128:	080061e3 	.word	0x080061e3
 800612c:	080061e3 	.word	0x080061e3
 8006130:	080061e3 	.word	0x080061e3
 8006134:	080061af 	.word	0x080061af
 8006138:	080061e3 	.word	0x080061e3
 800613c:	080061e3 	.word	0x080061e3
 8006140:	080061e3 	.word	0x080061e3
 8006144:	080061e3 	.word	0x080061e3
 8006148:	080061e3 	.word	0x080061e3
 800614c:	080061e3 	.word	0x080061e3
 8006150:	080061e3 	.word	0x080061e3
 8006154:	080061e3 	.word	0x080061e3
 8006158:	080061e3 	.word	0x080061e3
 800615c:	080061e3 	.word	0x080061e3
 8006160:	080061e3 	.word	0x080061e3
 8006164:	080061e3 	.word	0x080061e3
 8006168:	080061e3 	.word	0x080061e3
 800616c:	080061e3 	.word	0x080061e3
 8006170:	080061e3 	.word	0x080061e3
 8006174:	080061d5 	.word	0x080061d5
 8006178:	2b40      	cmp	r3, #64	@ 0x40
 800617a:	d02e      	beq.n	80061da <UART_SetConfig+0xa36>
 800617c:	e031      	b.n	80061e2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800617e:	f7fe fc35 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 8006182:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006184:	e033      	b.n	80061ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006186:	f7fe fc47 	bl	8004a18 <HAL_RCC_GetPCLK2Freq>
 800618a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800618c:	e02f      	b.n	80061ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800618e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe fcae 	bl	8004af4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800619c:	e027      	b.n	80061ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800619e:	f107 0318 	add.w	r3, r7, #24
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fe fdfa 	bl	8004d9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061ac:	e01f      	b.n	80061ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061ae:	4b2d      	ldr	r3, [pc, #180]	@ (8006264 <UART_SetConfig+0xac0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061ba:	4b2a      	ldr	r3, [pc, #168]	@ (8006264 <UART_SetConfig+0xac0>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	08db      	lsrs	r3, r3, #3
 80061c0:	f003 0303 	and.w	r3, r3, #3
 80061c4:	4a28      	ldr	r2, [pc, #160]	@ (8006268 <UART_SetConfig+0xac4>)
 80061c6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061cc:	e00f      	b.n	80061ee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80061ce:	4b26      	ldr	r3, [pc, #152]	@ (8006268 <UART_SetConfig+0xac4>)
 80061d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d2:	e00c      	b.n	80061ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061d4:	4b25      	ldr	r3, [pc, #148]	@ (800626c <UART_SetConfig+0xac8>)
 80061d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d8:	e009      	b.n	80061ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061e0:	e005      	b.n	80061ee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061ec:	bf00      	nop
    }

    if (pclk != 0U)
 80061ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d021      	beq.n	8006238 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006270 <UART_SetConfig+0xacc>)
 80061fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061fe:	461a      	mov	r2, r3
 8006200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006202:	fbb3 f2f2 	udiv	r2, r3, r2
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	085b      	lsrs	r3, r3, #1
 800620c:	441a      	add	r2, r3
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	fbb2 f3f3 	udiv	r3, r2, r3
 8006216:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621a:	2b0f      	cmp	r3, #15
 800621c:	d909      	bls.n	8006232 <UART_SetConfig+0xa8e>
 800621e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006224:	d205      	bcs.n	8006232 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006228:	b29a      	uxth	r2, r3
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60da      	str	r2, [r3, #12]
 8006230:	e002      	b.n	8006238 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2201      	movs	r2, #1
 800623c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2201      	movs	r2, #1
 8006244:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2200      	movs	r2, #0
 800624c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2200      	movs	r2, #0
 8006252:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006254:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006258:	4618      	mov	r0, r3
 800625a:	3748      	adds	r7, #72	@ 0x48
 800625c:	46bd      	mov	sp, r7
 800625e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006262:	bf00      	nop
 8006264:	58024400 	.word	0x58024400
 8006268:	03d09000 	.word	0x03d09000
 800626c:	003d0900 	.word	0x003d0900
 8006270:	0801b87c 	.word	0x0801b87c

08006274 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006280:	f003 0308 	and.w	r3, r3, #8
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00a      	beq.n	800629e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e6:	f003 0304 	and.w	r3, r3, #4
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006308:	f003 0310 	and.w	r3, r3, #16
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00a      	beq.n	8006326 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01a      	beq.n	800638a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006372:	d10a      	bne.n	800638a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800638e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	605a      	str	r2, [r3, #4]
  }
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b098      	sub	sp, #96	@ 0x60
 80063bc:	af02      	add	r7, sp, #8
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063c8:	f7fb f97e 	bl	80016c8 <HAL_GetTick>
 80063cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d12f      	bne.n	800643c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063e4:	2200      	movs	r2, #0
 80063e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f88e 	bl	800650c <UART_WaitOnFlagUntilTimeout>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d022      	beq.n	800643c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800640a:	653b      	str	r3, [r7, #80]	@ 0x50
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006414:	647b      	str	r3, [r7, #68]	@ 0x44
 8006416:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800641a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e6      	bne.n	80063f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e063      	b.n	8006504 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0304 	and.w	r3, r3, #4
 8006446:	2b04      	cmp	r3, #4
 8006448:	d149      	bne.n	80064de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800644a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006452:	2200      	movs	r2, #0
 8006454:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f857 	bl	800650c <UART_WaitOnFlagUntilTimeout>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d03c      	beq.n	80064de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	623b      	str	r3, [r7, #32]
   return(result);
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006478:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006482:	633b      	str	r3, [r7, #48]	@ 0x30
 8006484:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e6      	bne.n	8006464 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3308      	adds	r3, #8
 800649c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f023 0301 	bic.w	r3, r3, #1
 80064ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3308      	adds	r3, #8
 80064b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064b6:	61fa      	str	r2, [r7, #28]
 80064b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	69b9      	ldr	r1, [r7, #24]
 80064bc:	69fa      	ldr	r2, [r7, #28]
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	617b      	str	r3, [r7, #20]
   return(result);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e5      	bne.n	8006496 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e012      	b.n	8006504 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3758      	adds	r7, #88	@ 0x58
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	603b      	str	r3, [r7, #0]
 8006518:	4613      	mov	r3, r2
 800651a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800651c:	e04f      	b.n	80065be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006524:	d04b      	beq.n	80065be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006526:	f7fb f8cf 	bl	80016c8 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	429a      	cmp	r2, r3
 8006534:	d302      	bcc.n	800653c <UART_WaitOnFlagUntilTimeout+0x30>
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e04e      	b.n	80065de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	2b00      	cmp	r3, #0
 800654c:	d037      	beq.n	80065be <UART_WaitOnFlagUntilTimeout+0xb2>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b80      	cmp	r3, #128	@ 0x80
 8006552:	d034      	beq.n	80065be <UART_WaitOnFlagUntilTimeout+0xb2>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b40      	cmp	r3, #64	@ 0x40
 8006558:	d031      	beq.n	80065be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	f003 0308 	and.w	r3, r3, #8
 8006564:	2b08      	cmp	r3, #8
 8006566:	d110      	bne.n	800658a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2208      	movs	r2, #8
 800656e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f839 	bl	80065e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2208      	movs	r2, #8
 800657a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e029      	b.n	80065de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006598:	d111      	bne.n	80065be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f81f 	bl	80065e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2220      	movs	r2, #32
 80065ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e00f      	b.n	80065de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4013      	ands	r3, r2
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	bf0c      	ite	eq
 80065ce:	2301      	moveq	r3, #1
 80065d0:	2300      	movne	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	79fb      	ldrb	r3, [r7, #7]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d0a0      	beq.n	800651e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b095      	sub	sp, #84	@ 0x54
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006600:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006604:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800660e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006610:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006614:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800661c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e6      	bne.n	80065f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3308      	adds	r3, #8
 8006628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	61fb      	str	r3, [r7, #28]
   return(result);
 8006632:	69fa      	ldr	r2, [r7, #28]
 8006634:	4b1e      	ldr	r3, [pc, #120]	@ (80066b0 <UART_EndRxTransfer+0xc8>)
 8006636:	4013      	ands	r3, r2
 8006638:	64bb      	str	r3, [r7, #72]	@ 0x48
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3308      	adds	r3, #8
 8006640:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006642:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006644:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006648:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e5      	bne.n	8006622 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800665a:	2b01      	cmp	r3, #1
 800665c:	d118      	bne.n	8006690 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	e853 3f00 	ldrex	r3, [r3]
 800666a:	60bb      	str	r3, [r7, #8]
   return(result);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f023 0310 	bic.w	r3, r3, #16
 8006672:	647b      	str	r3, [r7, #68]	@ 0x44
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	461a      	mov	r2, r3
 800667a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800667c:	61bb      	str	r3, [r7, #24]
 800667e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	6979      	ldr	r1, [r7, #20]
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	613b      	str	r3, [r7, #16]
   return(result);
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e6      	bne.n	800665e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2220      	movs	r2, #32
 8006694:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066a4:	bf00      	nop
 80066a6:	3754      	adds	r7, #84	@ 0x54
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	effffffe 	.word	0xeffffffe

080066b4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80066ba:	2100      	movs	r1, #0
 80066bc:	2000      	movs	r0, #0
 80066be:	f010 f895 	bl	80167ec <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80066c2:	4b1c      	ldr	r3, [pc, #112]	@ (8006734 <MX_LWIP_Init+0x80>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80066c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006738 <MX_LWIP_Init+0x84>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80066ce:	4b1b      	ldr	r3, [pc, #108]	@ (800673c <MX_LWIP_Init+0x88>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80066d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006740 <MX_LWIP_Init+0x8c>)
 80066d6:	9302      	str	r3, [sp, #8]
 80066d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006744 <MX_LWIP_Init+0x90>)
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	2300      	movs	r3, #0
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	4b16      	ldr	r3, [pc, #88]	@ (800673c <MX_LWIP_Init+0x88>)
 80066e2:	4a15      	ldr	r2, [pc, #84]	@ (8006738 <MX_LWIP_Init+0x84>)
 80066e4:	4913      	ldr	r1, [pc, #76]	@ (8006734 <MX_LWIP_Init+0x80>)
 80066e6:	4818      	ldr	r0, [pc, #96]	@ (8006748 <MX_LWIP_Init+0x94>)
 80066e8:	f009 fbdc 	bl	800fea4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80066ec:	4816      	ldr	r0, [pc, #88]	@ (8006748 <MX_LWIP_Init+0x94>)
 80066ee:	f009 fd93 	bl	8010218 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80066f2:	4815      	ldr	r0, [pc, #84]	@ (8006748 <MX_LWIP_Init+0x94>)
 80066f4:	f009 fda0 	bl	8010238 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80066f8:	4914      	ldr	r1, [pc, #80]	@ (800674c <MX_LWIP_Init+0x98>)
 80066fa:	4813      	ldr	r0, [pc, #76]	@ (8006748 <MX_LWIP_Init+0x94>)
 80066fc:	f009 fea2 	bl	8010444 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006700:	2224      	movs	r2, #36	@ 0x24
 8006702:	2100      	movs	r1, #0
 8006704:	4812      	ldr	r0, [pc, #72]	@ (8006750 <MX_LWIP_Init+0x9c>)
 8006706:	f011 f96d 	bl	80179e4 <memset>
  attributes.name = "EthLink";
 800670a:	4b11      	ldr	r3, [pc, #68]	@ (8006750 <MX_LWIP_Init+0x9c>)
 800670c:	4a11      	ldr	r2, [pc, #68]	@ (8006754 <MX_LWIP_Init+0xa0>)
 800670e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006710:	4b0f      	ldr	r3, [pc, #60]	@ (8006750 <MX_LWIP_Init+0x9c>)
 8006712:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006716:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8006718:	4b0d      	ldr	r3, [pc, #52]	@ (8006750 <MX_LWIP_Init+0x9c>)
 800671a:	2210      	movs	r2, #16
 800671c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800671e:	4a0c      	ldr	r2, [pc, #48]	@ (8006750 <MX_LWIP_Init+0x9c>)
 8006720:	4909      	ldr	r1, [pc, #36]	@ (8006748 <MX_LWIP_Init+0x94>)
 8006722:	480d      	ldr	r0, [pc, #52]	@ (8006758 <MX_LWIP_Init+0xa4>)
 8006724:	f000 fddd 	bl	80072e2 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8006728:	4807      	ldr	r0, [pc, #28]	@ (8006748 <MX_LWIP_Init+0x94>)
 800672a:	f004 ff27 	bl	800b57c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800672e:	bf00      	nop
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	2400020c 	.word	0x2400020c
 8006738:	24000210 	.word	0x24000210
 800673c:	24000214 	.word	0x24000214
 8006740:	08016729 	.word	0x08016729
 8006744:	08006c45 	.word	0x08006c45
 8006748:	240001d4 	.word	0x240001d4
 800674c:	0800675d 	.word	0x0800675d
 8006750:	24000218 	.word	0x24000218
 8006754:	08018670 	.word	0x08018670
 8006758:	08006f39 	.word	0x08006f39

0800675c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8006778:	4b04      	ldr	r3, [pc, #16]	@ (800678c <HAL_ETH_RxCpltCallback+0x1c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4618      	mov	r0, r3
 800677e:	f001 f847 	bl	8007810 <osSemaphoreRelease>
}
 8006782:	bf00      	nop
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	24000244 	.word	0x24000244

08006790 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8006798:	4b04      	ldr	r3, [pc, #16]	@ (80067ac <HAL_ETH_TxCpltCallback+0x1c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4618      	mov	r0, r3
 800679e:	f001 f837 	bl	8007810 <osSemaphoreRelease>
}
 80067a2:	bf00      	nop
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	24000248 	.word	0x24000248

080067b0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7fc f90c 	bl	80029d6 <HAL_ETH_GetDMAError>
 80067be:	4603      	mov	r3, r0
 80067c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067c4:	2b80      	cmp	r3, #128	@ 0x80
 80067c6:	d104      	bne.n	80067d2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80067c8:	4b04      	ldr	r3, [pc, #16]	@ (80067dc <HAL_ETH_ErrorCallback+0x2c>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f001 f81f 	bl	8007810 <osSemaphoreRelease>
  }
}
 80067d2:	bf00      	nop
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	24000244 	.word	0x24000244

080067e0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b0aa      	sub	sp, #168	@ 0xa8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80067ee:	2300      	movs	r3, #0
 80067f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 80067fa:	f107 0310 	add.w	r3, r7, #16
 80067fe:	2264      	movs	r2, #100	@ 0x64
 8006800:	2100      	movs	r1, #0
 8006802:	4618      	mov	r0, r3
 8006804:	f011 f8ee 	bl	80179e4 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006808:	4b89      	ldr	r3, [pc, #548]	@ (8006a30 <low_level_init+0x250>)
 800680a:	4a8a      	ldr	r2, [pc, #552]	@ (8006a34 <low_level_init+0x254>)
 800680c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800680e:	2300      	movs	r3, #0
 8006810:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006812:	2380      	movs	r3, #128	@ 0x80
 8006814:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006816:	23e1      	movs	r3, #225	@ 0xe1
 8006818:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800681a:	2300      	movs	r3, #0
 800681c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800681e:	2300      	movs	r3, #0
 8006820:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8006822:	2300      	movs	r3, #0
 8006824:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006826:	4a82      	ldr	r2, [pc, #520]	@ (8006a30 <low_level_init+0x250>)
 8006828:	f107 0308 	add.w	r3, r7, #8
 800682c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800682e:	4b80      	ldr	r3, [pc, #512]	@ (8006a30 <low_level_init+0x250>)
 8006830:	2201      	movs	r2, #1
 8006832:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006834:	4b7e      	ldr	r3, [pc, #504]	@ (8006a30 <low_level_init+0x250>)
 8006836:	4a80      	ldr	r2, [pc, #512]	@ (8006a38 <low_level_init+0x258>)
 8006838:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800683a:	4b7d      	ldr	r3, [pc, #500]	@ (8006a30 <low_level_init+0x250>)
 800683c:	4a7f      	ldr	r2, [pc, #508]	@ (8006a3c <low_level_init+0x25c>)
 800683e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006840:	4b7b      	ldr	r3, [pc, #492]	@ (8006a30 <low_level_init+0x250>)
 8006842:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006846:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006848:	4879      	ldr	r0, [pc, #484]	@ (8006a30 <low_level_init+0x250>)
 800684a:	f7fb f8d5 	bl	80019f8 <HAL_ETH_Init>
 800684e:	4603      	mov	r3, r0
 8006850:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006854:	2238      	movs	r2, #56	@ 0x38
 8006856:	2100      	movs	r1, #0
 8006858:	4879      	ldr	r0, [pc, #484]	@ (8006a40 <low_level_init+0x260>)
 800685a:	f011 f8c3 	bl	80179e4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800685e:	4b78      	ldr	r3, [pc, #480]	@ (8006a40 <low_level_init+0x260>)
 8006860:	2221      	movs	r2, #33	@ 0x21
 8006862:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006864:	4b76      	ldr	r3, [pc, #472]	@ (8006a40 <low_level_init+0x260>)
 8006866:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800686a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800686c:	4b74      	ldr	r3, [pc, #464]	@ (8006a40 <low_level_init+0x260>)
 800686e:	2200      	movs	r2, #0
 8006870:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006872:	4874      	ldr	r0, [pc, #464]	@ (8006a44 <low_level_init+0x264>)
 8006874:	f009 f9d0 	bl	800fc18 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2206      	movs	r2, #6
 800687c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006880:	4b6b      	ldr	r3, [pc, #428]	@ (8006a30 <low_level_init+0x250>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	781a      	ldrb	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800688c:	4b68      	ldr	r3, [pc, #416]	@ (8006a30 <low_level_init+0x250>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	785a      	ldrb	r2, [r3, #1]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006898:	4b65      	ldr	r3, [pc, #404]	@ (8006a30 <low_level_init+0x250>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	789a      	ldrb	r2, [r3, #2]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80068a4:	4b62      	ldr	r3, [pc, #392]	@ (8006a30 <low_level_init+0x250>)
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	78da      	ldrb	r2, [r3, #3]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80068b0:	4b5f      	ldr	r3, [pc, #380]	@ (8006a30 <low_level_init+0x250>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	791a      	ldrb	r2, [r3, #4]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80068bc:	4b5c      	ldr	r3, [pc, #368]	@ (8006a30 <low_level_init+0x250>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	795a      	ldrb	r2, [r3, #5]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80068ce:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80068d6:	f043 030a 	orr.w	r3, r3, #10
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80068e2:	2200      	movs	r2, #0
 80068e4:	2100      	movs	r1, #0
 80068e6:	2001      	movs	r0, #1
 80068e8:	f000 feb6 	bl	8007658 <osSemaphoreNew>
 80068ec:	4603      	mov	r3, r0
 80068ee:	4a56      	ldr	r2, [pc, #344]	@ (8006a48 <low_level_init+0x268>)
 80068f0:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80068f2:	2200      	movs	r2, #0
 80068f4:	2100      	movs	r1, #0
 80068f6:	2001      	movs	r0, #1
 80068f8:	f000 feae 	bl	8007658 <osSemaphoreNew>
 80068fc:	4603      	mov	r3, r0
 80068fe:	4a53      	ldr	r2, [pc, #332]	@ (8006a4c <low_level_init+0x26c>)
 8006900:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006902:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8006906:	2224      	movs	r2, #36	@ 0x24
 8006908:	2100      	movs	r1, #0
 800690a:	4618      	mov	r0, r3
 800690c:	f011 f86a 	bl	80179e4 <memset>
  attributes.name = "EthIf";
 8006910:	4b4f      	ldr	r3, [pc, #316]	@ (8006a50 <low_level_init+0x270>)
 8006912:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006914:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8006918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800691c:	2330      	movs	r3, #48	@ 0x30
 800691e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8006922:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8006926:	461a      	mov	r2, r3
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	484a      	ldr	r0, [pc, #296]	@ (8006a54 <low_level_init+0x274>)
 800692c:	f000 fcd9 	bl	80072e2 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006930:	4949      	ldr	r1, [pc, #292]	@ (8006a58 <low_level_init+0x278>)
 8006932:	484a      	ldr	r0, [pc, #296]	@ (8006a5c <low_level_init+0x27c>)
 8006934:	f7fa fb8d 	bl	8001052 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8006938:	4848      	ldr	r0, [pc, #288]	@ (8006a5c <low_level_init+0x27c>)
 800693a:	f7fa fbbc 	bl	80010b6 <LAN8742_Init>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d006      	beq.n	8006952 <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f009 fd4d 	bl	80103e4 <netif_set_link_down>
    netif_set_down(netif);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f009 fce0 	bl	8010310 <netif_set_down>
 8006950:	e06b      	b.n	8006a2a <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8006952:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8006956:	2b00      	cmp	r3, #0
 8006958:	d165      	bne.n	8006a26 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800695a:	4840      	ldr	r0, [pc, #256]	@ (8006a5c <low_level_init+0x27c>)
 800695c:	f7fa fbf8 	bl	8001150 <LAN8742_GetLinkState>
 8006960:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006964:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006968:	2b01      	cmp	r3, #1
 800696a:	dc06      	bgt.n	800697a <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f009 fd39 	bl	80103e4 <netif_set_link_down>
      netif_set_down(netif);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f009 fccc 	bl	8010310 <netif_set_down>
 8006978:	e057      	b.n	8006a2a <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800697a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800697e:	3b02      	subs	r3, #2
 8006980:	2b03      	cmp	r3, #3
 8006982:	d82b      	bhi.n	80069dc <low_level_init+0x1fc>
 8006984:	a201      	add	r2, pc, #4	@ (adr r2, 800698c <low_level_init+0x1ac>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	0800699d 	.word	0x0800699d
 8006990:	080069af 	.word	0x080069af
 8006994:	080069bf 	.word	0x080069bf
 8006998:	080069cf 	.word	0x080069cf
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800699c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80069a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 80069a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80069a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80069ac:	e01f      	b.n	80069ee <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80069ae:	2300      	movs	r3, #0
 80069b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 80069b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80069b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80069bc:	e017      	b.n	80069ee <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80069be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80069c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 80069c6:	2300      	movs	r3, #0
 80069c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80069cc:	e00f      	b.n	80069ee <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80069ce:	2300      	movs	r3, #0
 80069d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 80069d4:	2300      	movs	r3, #0
 80069d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80069da:	e008      	b.n	80069ee <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 80069dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80069e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 80069e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80069e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80069ec:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80069ee:	f107 0310 	add.w	r3, r7, #16
 80069f2:	4619      	mov	r1, r3
 80069f4:	480e      	ldr	r0, [pc, #56]	@ (8006a30 <low_level_init+0x250>)
 80069f6:	f7fb fda3 	bl	8002540 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80069fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80069fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8006a00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006a06:	f107 0310 	add.w	r3, r7, #16
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	4808      	ldr	r0, [pc, #32]	@ (8006a30 <low_level_init+0x250>)
 8006a0e:	f7fb ff6b 	bl	80028e8 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8006a12:	4807      	ldr	r0, [pc, #28]	@ (8006a30 <low_level_init+0x250>)
 8006a14:	f7fb f8ee 	bl	8001bf4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f009 fc0d 	bl	8010238 <netif_set_up>
    netif_set_link_up(netif);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f009 fca8 	bl	8010374 <netif_set_link_up>
 8006a24:	e001      	b.n	8006a2a <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8006a26:	f7fa f959 	bl	8000cdc <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006a2a:	37a8      	adds	r7, #168	@ 0xa8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	2400024c 	.word	0x2400024c
 8006a34:	40028000 	.word	0x40028000
 8006a38:	30040060 	.word	0x30040060
 8006a3c:	30040000 	.word	0x30040000
 8006a40:	240002fc 	.word	0x240002fc
 8006a44:	0801b894 	.word	0x0801b894
 8006a48:	24000244 	.word	0x24000244
 8006a4c:	24000248 	.word	0x24000248
 8006a50:	08018678 	.word	0x08018678
 8006a54:	08006bf1 	.word	0x08006bf1
 8006a58:	2400002c 	.word	0x2400002c
 8006a5c:	24000334 	.word	0x24000334

08006a60 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b092      	sub	sp, #72	@ 0x48
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006a78:	f107 030c 	add.w	r3, r7, #12
 8006a7c:	2230      	movs	r2, #48	@ 0x30
 8006a7e:	2100      	movs	r1, #0
 8006a80:	4618      	mov	r0, r3
 8006a82:	f010 ffaf 	bl	80179e4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006a86:	f107 030c 	add.w	r3, r7, #12
 8006a8a:	2230      	movs	r2, #48	@ 0x30
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f010 ffa8 	bl	80179e4 <memset>

  for(q = p; q != NULL; q = q->next)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a98:	e045      	b.n	8006b26 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006a9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d902      	bls.n	8006aa6 <low_level_output+0x46>
      return ERR_IF;
 8006aa0:	f06f 030b 	mvn.w	r3, #11
 8006aa4:	e07f      	b.n	8006ba6 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8006aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aa8:	6859      	ldr	r1, [r3, #4]
 8006aaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aac:	4613      	mov	r3, r2
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	4413      	add	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	3348      	adds	r3, #72	@ 0x48
 8006ab6:	443b      	add	r3, r7
 8006ab8:	3b3c      	subs	r3, #60	@ 0x3c
 8006aba:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006abc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006abe:	895b      	ldrh	r3, [r3, #10]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	3348      	adds	r3, #72	@ 0x48
 8006ace:	443b      	add	r3, r7
 8006ad0:	3b38      	subs	r3, #56	@ 0x38
 8006ad2:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006ad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d011      	beq.n	8006afe <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006ada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006adc:	1e5a      	subs	r2, r3, #1
 8006ade:	f107 000c 	add.w	r0, r7, #12
 8006ae2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	440b      	add	r3, r1
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	18c1      	adds	r1, r0, r3
 8006aee:	4613      	mov	r3, r2
 8006af0:	005b      	lsls	r3, r3, #1
 8006af2:	4413      	add	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	3348      	adds	r3, #72	@ 0x48
 8006af8:	443b      	add	r3, r7
 8006afa:	3b34      	subs	r3, #52	@ 0x34
 8006afc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006afe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d109      	bne.n	8006b1a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006b06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b08:	4613      	mov	r3, r2
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	3348      	adds	r3, #72	@ 0x48
 8006b12:	443b      	add	r3, r7
 8006b14:	3b34      	subs	r3, #52	@ 0x34
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006b1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8006b20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1b6      	bne.n	8006a9a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	891b      	ldrh	r3, [r3, #8]
 8006b30:	461a      	mov	r2, r3
 8006b32:	4b1f      	ldr	r3, [pc, #124]	@ (8006bb0 <low_level_output+0x150>)
 8006b34:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006b36:	4a1e      	ldr	r2, [pc, #120]	@ (8006bb0 <low_level_output+0x150>)
 8006b38:	f107 030c 	add.w	r3, r7, #12
 8006b3c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8006bb0 <low_level_output+0x150>)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8006b44:	6838      	ldr	r0, [r7, #0]
 8006b46:	f00a f8cf 	bl	8010ce8 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8006b4a:	4919      	ldr	r1, [pc, #100]	@ (8006bb0 <low_level_output+0x150>)
 8006b4c:	4819      	ldr	r0, [pc, #100]	@ (8006bb4 <low_level_output+0x154>)
 8006b4e:	f7fb f93d 	bl	8001dcc <HAL_ETH_Transmit_IT>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d103      	bne.n	8006b60 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006b5e:	e01b      	b.n	8006b98 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8006b60:	4814      	ldr	r0, [pc, #80]	@ (8006bb4 <low_level_output+0x154>)
 8006b62:	f7fb ff2b 	bl	80029bc <HAL_ETH_GetError>
 8006b66:	4603      	mov	r3, r0
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00d      	beq.n	8006b8c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8006b70:	4b11      	ldr	r3, [pc, #68]	@ (8006bb8 <low_level_output+0x158>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 fdf7 	bl	800776c <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8006b7e:	480d      	ldr	r0, [pc, #52]	@ (8006bb4 <low_level_output+0x154>)
 8006b80:	f7fb faab 	bl	80020da <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8006b84:	23fe      	movs	r3, #254	@ 0xfe
 8006b86:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006b8a:	e005      	b.n	8006b98 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8006b8c:	6838      	ldr	r0, [r7, #0]
 8006b8e:	f00a f805 	bl	8010b9c <pbuf_free>
        errval =  ERR_IF;
 8006b92:	23f4      	movs	r3, #244	@ 0xf4
 8006b94:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8006b98:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006b9c:	f113 0f02 	cmn.w	r3, #2
 8006ba0:	d0d3      	beq.n	8006b4a <low_level_output+0xea>

  return errval;
 8006ba2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3748      	adds	r7, #72	@ 0x48
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	240002fc 	.word	0x240002fc
 8006bb4:	2400024c 	.word	0x2400024c
 8006bb8:	24000248 	.word	0x24000248

08006bbc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006bc8:	4b07      	ldr	r3, [pc, #28]	@ (8006be8 <low_level_input+0x2c>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d105      	bne.n	8006bdc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006bd0:	f107 030c 	add.w	r3, r7, #12
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4805      	ldr	r0, [pc, #20]	@ (8006bec <low_level_input+0x30>)
 8006bd8:	f7fb f949 	bl	8001e6e <HAL_ETH_ReadData>
  }

  return p;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	24000240 	.word	0x24000240
 8006bec:	2400024c 	.word	0x2400024c

08006bf0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006c00:	4b0f      	ldr	r3, [pc, #60]	@ (8006c40 <ethernetif_input+0x50>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f04f 31ff 	mov.w	r1, #4294967295
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 fdaf 	bl	800776c <osSemaphoreAcquire>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1f5      	bne.n	8006c00 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006c14:	68b8      	ldr	r0, [r7, #8]
 8006c16:	f7ff ffd1 	bl	8006bbc <low_level_input>
 8006c1a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	4798      	blx	r3
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f009 ffb2 	bl	8010b9c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1ea      	bne.n	8006c14 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006c3e:	e7df      	b.n	8006c00 <ethernetif_input+0x10>
 8006c40:	24000244 	.word	0x24000244

08006c44 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d106      	bne.n	8006c60 <ethernetif_init+0x1c>
 8006c52:	4b0e      	ldr	r3, [pc, #56]	@ (8006c8c <ethernetif_init+0x48>)
 8006c54:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8006c58:	490d      	ldr	r1, [pc, #52]	@ (8006c90 <ethernetif_init+0x4c>)
 8006c5a:	480e      	ldr	r0, [pc, #56]	@ (8006c94 <ethernetif_init+0x50>)
 8006c5c:	f010 fd6a 	bl	8017734 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2273      	movs	r2, #115	@ 0x73
 8006c64:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2274      	movs	r2, #116	@ 0x74
 8006c6c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a09      	ldr	r2, [pc, #36]	@ (8006c98 <ethernetif_init+0x54>)
 8006c74:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a08      	ldr	r2, [pc, #32]	@ (8006c9c <ethernetif_init+0x58>)
 8006c7a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7ff fdaf 	bl	80067e0 <low_level_init>

  return ERR_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	08018680 	.word	0x08018680
 8006c90:	0801869c 	.word	0x0801869c
 8006c94:	080186ac 	.word	0x080186ac
 8006c98:	0800d43d 	.word	0x0800d43d
 8006c9c:	08006a61 	.word	0x08006a61

08006ca0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006cac:	68f9      	ldr	r1, [r7, #12]
 8006cae:	4809      	ldr	r0, [pc, #36]	@ (8006cd4 <pbuf_free_custom+0x34>)
 8006cb0:	f009 f8a2 	bl	800fdf8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006cb4:	4b08      	ldr	r3, [pc, #32]	@ (8006cd8 <pbuf_free_custom+0x38>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d107      	bne.n	8006ccc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006cbc:	4b06      	ldr	r3, [pc, #24]	@ (8006cd8 <pbuf_free_custom+0x38>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8006cc2:	4b06      	ldr	r3, [pc, #24]	@ (8006cdc <pbuf_free_custom+0x3c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 fda2 	bl	8007810 <osSemaphoreRelease>
  }
}
 8006ccc:	bf00      	nop
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	0801b894 	.word	0x0801b894
 8006cd8:	24000240 	.word	0x24000240
 8006cdc:	24000244 	.word	0x24000244

08006ce0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006ce4:	f7fa fcf0 	bl	80016c8 <HAL_GetTick>
 8006ce8:	4603      	mov	r3, r0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08e      	sub	sp, #56	@ 0x38
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	605a      	str	r2, [r3, #4]
 8006d02:	609a      	str	r2, [r3, #8]
 8006d04:	60da      	str	r2, [r3, #12]
 8006d06:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a5d      	ldr	r2, [pc, #372]	@ (8006e84 <HAL_ETH_MspInit+0x194>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	f040 80b3 	bne.w	8006e7a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006d14:	4b5c      	ldr	r3, [pc, #368]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006d16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d1a:	4a5b      	ldr	r2, [pc, #364]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d20:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006d24:	4b58      	ldr	r3, [pc, #352]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006d26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d2e:	623b      	str	r3, [r7, #32]
 8006d30:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8006d32:	4b55      	ldr	r3, [pc, #340]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006d34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d38:	4a53      	ldr	r2, [pc, #332]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006d3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006d42:	4b51      	ldr	r3, [pc, #324]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006d44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d4c:	61fb      	str	r3, [r7, #28]
 8006d4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8006d50:	4b4d      	ldr	r3, [pc, #308]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006d52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d56:	4a4c      	ldr	r2, [pc, #304]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d5c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006d60:	4b49      	ldr	r3, [pc, #292]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006d62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d6a:	61bb      	str	r3, [r7, #24]
 8006d6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d6e:	4b46      	ldr	r3, [pc, #280]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d74:	4a44      	ldr	r2, [pc, #272]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006d76:	f043 0304 	orr.w	r3, r3, #4
 8006d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006d7e:	4b42      	ldr	r3, [pc, #264]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d8c:	4b3e      	ldr	r3, [pc, #248]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d92:	4a3d      	ldr	r2, [pc, #244]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006d94:	f043 0301 	orr.w	r3, r3, #1
 8006d98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006daa:	4b37      	ldr	r3, [pc, #220]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006db0:	4a35      	ldr	r2, [pc, #212]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006db2:	f043 0302 	orr.w	r3, r3, #2
 8006db6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006dba:	4b33      	ldr	r3, [pc, #204]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dce:	4a2e      	ldr	r2, [pc, #184]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006dd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8006e88 <HAL_ETH_MspInit+0x198>)
 8006dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de2:	60bb      	str	r3, [r7, #8]
 8006de4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006de6:	2332      	movs	r3, #50	@ 0x32
 8006de8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dea:	2302      	movs	r3, #2
 8006dec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006df2:	2300      	movs	r3, #0
 8006df4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006df6:	230b      	movs	r3, #11
 8006df8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4822      	ldr	r0, [pc, #136]	@ (8006e8c <HAL_ETH_MspInit+0x19c>)
 8006e02:	f7fc fbe7 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006e06:	2386      	movs	r3, #134	@ 0x86
 8006e08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e12:	2300      	movs	r3, #0
 8006e14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e16:	230b      	movs	r3, #11
 8006e18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e1e:	4619      	mov	r1, r3
 8006e20:	481b      	ldr	r0, [pc, #108]	@ (8006e90 <HAL_ETH_MspInit+0x1a0>)
 8006e22:	f7fc fbd7 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006e26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e30:	2300      	movs	r3, #0
 8006e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e34:	2300      	movs	r3, #0
 8006e36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e38:	230b      	movs	r3, #11
 8006e3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e40:	4619      	mov	r1, r3
 8006e42:	4814      	ldr	r0, [pc, #80]	@ (8006e94 <HAL_ETH_MspInit+0x1a4>)
 8006e44:	f7fc fbc6 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8006e48:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e4e:	2302      	movs	r3, #2
 8006e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e56:	2300      	movs	r3, #0
 8006e58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e5a:	230b      	movs	r3, #11
 8006e5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e62:	4619      	mov	r1, r3
 8006e64:	480c      	ldr	r0, [pc, #48]	@ (8006e98 <HAL_ETH_MspInit+0x1a8>)
 8006e66:	f7fc fbb5 	bl	80035d4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2105      	movs	r1, #5
 8006e6e:	203d      	movs	r0, #61	@ 0x3d
 8006e70:	f7fa fd0e 	bl	8001890 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006e74:	203d      	movs	r0, #61	@ 0x3d
 8006e76:	f7fa fd25 	bl	80018c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006e7a:	bf00      	nop
 8006e7c:	3738      	adds	r7, #56	@ 0x38
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	40028000 	.word	0x40028000
 8006e88:	58024400 	.word	0x58024400
 8006e8c:	58020800 	.word	0x58020800
 8006e90:	58020000 	.word	0x58020000
 8006e94:	58020400 	.word	0x58020400
 8006e98:	58021800 	.word	0x58021800

08006e9c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006ea0:	4802      	ldr	r0, [pc, #8]	@ (8006eac <ETH_PHY_IO_Init+0x10>)
 8006ea2:	f7fb fd3b 	bl	800291c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	2400024c 	.word	0x2400024c

08006eb0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
  return 0;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	68f9      	ldr	r1, [r7, #12]
 8006ed2:	4807      	ldr	r0, [pc, #28]	@ (8006ef0 <ETH_PHY_IO_ReadReg+0x30>)
 8006ed4:	f7fb fa8c 	bl	80023f0 <HAL_ETH_ReadPHYRegister>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006ede:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee2:	e000      	b.n	8006ee6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	2400024c 	.word	0x2400024c

08006ef4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	68f9      	ldr	r1, [r7, #12]
 8006f06:	4807      	ldr	r0, [pc, #28]	@ (8006f24 <ETH_PHY_IO_WriteReg+0x30>)
 8006f08:	f7fb fac6 	bl	8002498 <HAL_ETH_WritePHYRegister>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006f12:	f04f 33ff 	mov.w	r3, #4294967295
 8006f16:	e000      	b.n	8006f1a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	2400024c 	.word	0x2400024c

08006f28 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006f2c:	f7fa fbcc 	bl	80016c8 <HAL_GetTick>
 8006f30:	4603      	mov	r3, r0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	bd80      	pop	{r7, pc}
	...

08006f38 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b0a0      	sub	sp, #128	@ 0x80
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006f40:	f107 0308 	add.w	r3, r7, #8
 8006f44:	2264      	movs	r2, #100	@ 0x64
 8006f46:	2100      	movs	r1, #0
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f010 fd4b 	bl	80179e4 <memset>
  int32_t PHYLinkState = 0;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f56:	2300      	movs	r3, #0
 8006f58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006f62:	483a      	ldr	r0, [pc, #232]	@ (800704c <ethernet_link_thread+0x114>)
 8006f64:	f7fa f8f4 	bl	8001150 <LAN8742_GetLinkState>
 8006f68:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006f6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f6c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006f70:	089b      	lsrs	r3, r3, #2
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00c      	beq.n	8006f96 <ethernet_link_thread+0x5e>
 8006f7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	dc09      	bgt.n	8006f96 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8006f82:	4833      	ldr	r0, [pc, #204]	@ (8007050 <ethernet_link_thread+0x118>)
 8006f84:	f7fa feaa 	bl	8001cdc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006f88:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f8a:	f009 f9c1 	bl	8010310 <netif_set_down>
    netif_set_link_down(netif);
 8006f8e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f90:	f009 fa28 	bl	80103e4 <netif_set_link_down>
 8006f94:	e055      	b.n	8007042 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f98:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006f9c:	f003 0304 	and.w	r3, r3, #4
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d14e      	bne.n	8007042 <ethernet_link_thread+0x10a>
 8006fa4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	dd4b      	ble.n	8007042 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8006faa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fac:	3b02      	subs	r3, #2
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d82a      	bhi.n	8007008 <ethernet_link_thread+0xd0>
 8006fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb8 <ethernet_link_thread+0x80>)
 8006fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb8:	08006fc9 	.word	0x08006fc9
 8006fbc:	08006fdb 	.word	0x08006fdb
 8006fc0:	08006feb 	.word	0x08006feb
 8006fc4:	08006ffb 	.word	0x08006ffb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006fc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006fcc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006fce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006fd2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006fd8:	e017      	b.n	800700a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006fde:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006fe2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006fe8:	e00f      	b.n	800700a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006fea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006fee:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006ff8:	e007      	b.n	800700a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006ffe:	2300      	movs	r3, #0
 8007000:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007002:	2301      	movs	r3, #1
 8007004:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007006:	e000      	b.n	800700a <ethernet_link_thread+0xd2>
    default:
      break;
 8007008:	bf00      	nop
    }

    if(linkchanged)
 800700a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800700c:	2b00      	cmp	r3, #0
 800700e:	d018      	beq.n	8007042 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007010:	f107 0308 	add.w	r3, r7, #8
 8007014:	4619      	mov	r1, r3
 8007016:	480e      	ldr	r0, [pc, #56]	@ (8007050 <ethernet_link_thread+0x118>)
 8007018:	f7fb fa92 	bl	8002540 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800701c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800701e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8007020:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007022:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007024:	f107 0308 	add.w	r3, r7, #8
 8007028:	4619      	mov	r1, r3
 800702a:	4809      	ldr	r0, [pc, #36]	@ (8007050 <ethernet_link_thread+0x118>)
 800702c:	f7fb fc5c 	bl	80028e8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8007030:	4807      	ldr	r0, [pc, #28]	@ (8007050 <ethernet_link_thread+0x118>)
 8007032:	f7fa fddf 	bl	8001bf4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8007036:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007038:	f009 f8fe 	bl	8010238 <netif_set_up>
      netif_set_link_up(netif);
 800703c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800703e:	f009 f999 	bl	8010374 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8007042:	2064      	movs	r0, #100	@ 0x64
 8007044:	f000 f9df 	bl	8007406 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007048:	e78b      	b.n	8006f62 <ethernet_link_thread+0x2a>
 800704a:	bf00      	nop
 800704c:	24000334 	.word	0x24000334
 8007050:	2400024c 	.word	0x2400024c

08007054 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af02      	add	r7, sp, #8
 800705a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800705c:	4812      	ldr	r0, [pc, #72]	@ (80070a8 <HAL_ETH_RxAllocateCallback+0x54>)
 800705e:	f008 fe57 	bl	800fd10 <memp_malloc_pool>
 8007062:	60f8      	str	r0, [r7, #12]
  if (p)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d014      	beq.n	8007094 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f103 0220 	add.w	r2, r3, #32
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4a0d      	ldr	r2, [pc, #52]	@ (80070ac <HAL_ETH_RxAllocateCallback+0x58>)
 8007078:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007082:	9201      	str	r2, [sp, #4]
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2241      	movs	r2, #65	@ 0x41
 800708a:	2100      	movs	r1, #0
 800708c:	2000      	movs	r0, #0
 800708e:	f009 fbcd 	bl	801082c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007092:	e005      	b.n	80070a0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007094:	4b06      	ldr	r3, [pc, #24]	@ (80070b0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007096:	2201      	movs	r2, #1
 8007098:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]
}
 80070a0:	bf00      	nop
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	0801b894 	.word	0x0801b894
 80070ac:	08006ca1 	.word	0x08006ca1
 80070b0:	24000240 	.word	0x24000240

080070b4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b08d      	sub	sp, #52	@ 0x34
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
 80070c0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3b20      	subs	r3, #32
 80070d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 80070d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d6:	2200      	movs	r2, #0
 80070d8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80070da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070dc:	2200      	movs	r2, #0
 80070de:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80070e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e2:	887a      	ldrh	r2, [r7, #2]
 80070e4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80070e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d103      	bne.n	80070f6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80070ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	e003      	b.n	80070fe <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070fc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007102:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800710a:	e009      	b.n	8007120 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800710c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710e:	891a      	ldrh	r2, [r3, #8]
 8007110:	887b      	ldrh	r3, [r7, #2]
 8007112:	4413      	add	r3, r2
 8007114:	b29a      	uxth	r2, r3
 8007116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007118:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800711a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1f2      	bne.n	800710c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007126:	887b      	ldrh	r3, [r7, #2]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	623a      	str	r2, [r7, #32]
 800712c:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	2b00      	cmp	r3, #0
 8007132:	dd1d      	ble.n	8007170 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	f003 021f 	and.w	r2, r3, #31
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	4413      	add	r3, r2
 800713e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007144:	f3bf 8f4f 	dsb	sy
}
 8007148:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800714a:	4a0d      	ldr	r2, [pc, #52]	@ (8007180 <HAL_ETH_RxLinkCallback+0xcc>)
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	3320      	adds	r3, #32
 8007156:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	3b20      	subs	r3, #32
 800715c:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	2b00      	cmp	r3, #0
 8007162:	dcf2      	bgt.n	800714a <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8007164:	f3bf 8f4f 	dsb	sy
}
 8007168:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800716a:	f3bf 8f6f 	isb	sy
}
 800716e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8007170:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007172:	bf00      	nop
 8007174:	3734      	adds	r7, #52	@ 0x34
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	e000ed00 	.word	0xe000ed00

08007184 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f009 fd05 	bl	8010b9c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <__NVIC_SetPriority>:
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4603      	mov	r3, r0
 80071a4:	6039      	str	r1, [r7, #0]
 80071a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80071a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	db0a      	blt.n	80071c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	490c      	ldr	r1, [pc, #48]	@ (80071e8 <__NVIC_SetPriority+0x4c>)
 80071b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071ba:	0112      	lsls	r2, r2, #4
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	440b      	add	r3, r1
 80071c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80071c4:	e00a      	b.n	80071dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	4908      	ldr	r1, [pc, #32]	@ (80071ec <__NVIC_SetPriority+0x50>)
 80071cc:	88fb      	ldrh	r3, [r7, #6]
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	3b04      	subs	r3, #4
 80071d4:	0112      	lsls	r2, r2, #4
 80071d6:	b2d2      	uxtb	r2, r2
 80071d8:	440b      	add	r3, r1
 80071da:	761a      	strb	r2, [r3, #24]
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	e000e100 	.word	0xe000e100
 80071ec:	e000ed00 	.word	0xe000ed00

080071f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80071f4:	4b05      	ldr	r3, [pc, #20]	@ (800720c <SysTick_Handler+0x1c>)
 80071f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80071f8:	f003 f8d8 	bl	800a3ac <xTaskGetSchedulerState>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d001      	beq.n	8007206 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007202:	f001 f911 	bl	8008428 <xPortSysTickHandler>
  }
}
 8007206:	bf00      	nop
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	e000e010 	.word	0xe000e010

08007210 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007210:	b580      	push	{r7, lr}
 8007212:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007214:	2100      	movs	r1, #0
 8007216:	f06f 0004 	mvn.w	r0, #4
 800721a:	f7ff ffbf 	bl	800719c <__NVIC_SetPriority>
#endif
}
 800721e:	bf00      	nop
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800722a:	f3ef 8305 	mrs	r3, IPSR
 800722e:	603b      	str	r3, [r7, #0]
  return(result);
 8007230:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007236:	f06f 0305 	mvn.w	r3, #5
 800723a:	607b      	str	r3, [r7, #4]
 800723c:	e00c      	b.n	8007258 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800723e:	4b0a      	ldr	r3, [pc, #40]	@ (8007268 <osKernelInitialize+0x44>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d105      	bne.n	8007252 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007246:	4b08      	ldr	r3, [pc, #32]	@ (8007268 <osKernelInitialize+0x44>)
 8007248:	2201      	movs	r2, #1
 800724a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800724c:	2300      	movs	r3, #0
 800724e:	607b      	str	r3, [r7, #4]
 8007250:	e002      	b.n	8007258 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007252:	f04f 33ff 	mov.w	r3, #4294967295
 8007256:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007258:	687b      	ldr	r3, [r7, #4]
}
 800725a:	4618      	mov	r0, r3
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	24000354 	.word	0x24000354

0800726c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007272:	f3ef 8305 	mrs	r3, IPSR
 8007276:	603b      	str	r3, [r7, #0]
  return(result);
 8007278:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <osKernelStart+0x1a>
    stat = osErrorISR;
 800727e:	f06f 0305 	mvn.w	r3, #5
 8007282:	607b      	str	r3, [r7, #4]
 8007284:	e010      	b.n	80072a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007286:	4b0b      	ldr	r3, [pc, #44]	@ (80072b4 <osKernelStart+0x48>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d109      	bne.n	80072a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800728e:	f7ff ffbf 	bl	8007210 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007292:	4b08      	ldr	r3, [pc, #32]	@ (80072b4 <osKernelStart+0x48>)
 8007294:	2202      	movs	r2, #2
 8007296:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007298:	f002 fc18 	bl	8009acc <vTaskStartScheduler>
      stat = osOK;
 800729c:	2300      	movs	r3, #0
 800729e:	607b      	str	r3, [r7, #4]
 80072a0:	e002      	b.n	80072a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80072a2:	f04f 33ff 	mov.w	r3, #4294967295
 80072a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80072a8:	687b      	ldr	r3, [r7, #4]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	24000354 	.word	0x24000354

080072b8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072be:	f3ef 8305 	mrs	r3, IPSR
 80072c2:	603b      	str	r3, [r7, #0]
  return(result);
 80072c4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80072ca:	f002 fd23 	bl	8009d14 <xTaskGetTickCountFromISR>
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	e002      	b.n	80072d8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80072d2:	f002 fd0f 	bl	8009cf4 <xTaskGetTickCount>
 80072d6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80072d8:	687b      	ldr	r3, [r7, #4]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b08e      	sub	sp, #56	@ 0x38
 80072e6:	af04      	add	r7, sp, #16
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072f2:	f3ef 8305 	mrs	r3, IPSR
 80072f6:	617b      	str	r3, [r7, #20]
  return(result);
 80072f8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d17e      	bne.n	80073fc <osThreadNew+0x11a>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d07b      	beq.n	80073fc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007304:	2380      	movs	r3, #128	@ 0x80
 8007306:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007308:	2318      	movs	r3, #24
 800730a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800730c:	2300      	movs	r3, #0
 800730e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007310:	f04f 33ff 	mov.w	r3, #4294967295
 8007314:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d045      	beq.n	80073a8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <osThreadNew+0x48>
        name = attr->name;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d008      	beq.n	8007350 <osThreadNew+0x6e>
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	2b38      	cmp	r3, #56	@ 0x38
 8007342:	d805      	bhi.n	8007350 <osThreadNew+0x6e>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <osThreadNew+0x72>
        return (NULL);
 8007350:	2300      	movs	r3, #0
 8007352:	e054      	b.n	80073fe <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	089b      	lsrs	r3, r3, #2
 8007362:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00e      	beq.n	800738a <osThreadNew+0xa8>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	2b5b      	cmp	r3, #91	@ 0x5b
 8007372:	d90a      	bls.n	800738a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007378:	2b00      	cmp	r3, #0
 800737a:	d006      	beq.n	800738a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <osThreadNew+0xa8>
        mem = 1;
 8007384:	2301      	movs	r3, #1
 8007386:	61bb      	str	r3, [r7, #24]
 8007388:	e010      	b.n	80073ac <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10c      	bne.n	80073ac <osThreadNew+0xca>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d108      	bne.n	80073ac <osThreadNew+0xca>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d104      	bne.n	80073ac <osThreadNew+0xca>
          mem = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	e001      	b.n	80073ac <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d110      	bne.n	80073d4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073ba:	9202      	str	r2, [sp, #8]
 80073bc:	9301      	str	r3, [sp, #4]
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	6a3a      	ldr	r2, [r7, #32]
 80073c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f002 f9a3 	bl	8009714 <xTaskCreateStatic>
 80073ce:	4603      	mov	r3, r0
 80073d0:	613b      	str	r3, [r7, #16]
 80073d2:	e013      	b.n	80073fc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d110      	bne.n	80073fc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	b29a      	uxth	r2, r3
 80073de:	f107 0310 	add.w	r3, r7, #16
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f002 f9f1 	bl	80097d4 <xTaskCreate>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d001      	beq.n	80073fc <osThreadNew+0x11a>
            hTask = NULL;
 80073f8:	2300      	movs	r3, #0
 80073fa:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80073fc:	693b      	ldr	r3, [r7, #16]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3728      	adds	r7, #40	@ 0x28
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800740e:	f3ef 8305 	mrs	r3, IPSR
 8007412:	60bb      	str	r3, [r7, #8]
  return(result);
 8007414:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <osDelay+0x1c>
    stat = osErrorISR;
 800741a:	f06f 0305 	mvn.w	r3, #5
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	e007      	b.n	8007432 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007422:	2300      	movs	r3, #0
 8007424:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <osDelay+0x2c>
      vTaskDelay(ticks);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f002 fb17 	bl	8009a60 <vTaskDelay>
    }
  }

  return (stat);
 8007432:	68fb      	ldr	r3, [r7, #12]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007444:	2300      	movs	r3, #0
 8007446:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007448:	f3ef 8305 	mrs	r3, IPSR
 800744c:	60bb      	str	r3, [r7, #8]
  return(result);
 800744e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007450:	2b00      	cmp	r3, #0
 8007452:	d174      	bne.n	800753e <osMutexNew+0x102>
    if (attr != NULL) {
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <osMutexNew+0x26>
      type = attr->attr_bits;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	61bb      	str	r3, [r7, #24]
 8007460:	e001      	b.n	8007466 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <osMutexNew+0x3a>
      rmtx = 1U;
 8007470:	2301      	movs	r3, #1
 8007472:	617b      	str	r3, [r7, #20]
 8007474:	e001      	b.n	800747a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	f003 0308 	and.w	r3, r3, #8
 8007480:	2b00      	cmp	r3, #0
 8007482:	d15c      	bne.n	800753e <osMutexNew+0x102>
      mem = -1;
 8007484:	f04f 33ff 	mov.w	r3, #4294967295
 8007488:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d015      	beq.n	80074bc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d006      	beq.n	80074a6 <osMutexNew+0x6a>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	2b4f      	cmp	r3, #79	@ 0x4f
 800749e:	d902      	bls.n	80074a6 <osMutexNew+0x6a>
          mem = 1;
 80074a0:	2301      	movs	r3, #1
 80074a2:	613b      	str	r3, [r7, #16]
 80074a4:	e00c      	b.n	80074c0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d108      	bne.n	80074c0 <osMutexNew+0x84>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d104      	bne.n	80074c0 <osMutexNew+0x84>
            mem = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	613b      	str	r3, [r7, #16]
 80074ba:	e001      	b.n	80074c0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d112      	bne.n	80074ec <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d007      	beq.n	80074dc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	4619      	mov	r1, r3
 80074d2:	2004      	movs	r0, #4
 80074d4:	f001 f9b1 	bl	800883a <xQueueCreateMutexStatic>
 80074d8:	61f8      	str	r0, [r7, #28]
 80074da:	e016      	b.n	800750a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	4619      	mov	r1, r3
 80074e2:	2001      	movs	r0, #1
 80074e4:	f001 f9a9 	bl	800883a <xQueueCreateMutexStatic>
 80074e8:	61f8      	str	r0, [r7, #28]
 80074ea:	e00e      	b.n	800750a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10b      	bne.n	800750a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d004      	beq.n	8007502 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80074f8:	2004      	movs	r0, #4
 80074fa:	f001 f986 	bl	800880a <xQueueCreateMutex>
 80074fe:	61f8      	str	r0, [r7, #28]
 8007500:	e003      	b.n	800750a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007502:	2001      	movs	r0, #1
 8007504:	f001 f981 	bl	800880a <xQueueCreateMutex>
 8007508:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00c      	beq.n	800752a <osMutexNew+0xee>
        if (attr != NULL) {
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <osMutexNew+0xe2>
          name = attr->name;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	e001      	b.n	8007522 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800751e:	2300      	movs	r3, #0
 8007520:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007522:	68f9      	ldr	r1, [r7, #12]
 8007524:	69f8      	ldr	r0, [r7, #28]
 8007526:	f002 f86d 	bl	8009604 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d006      	beq.n	800753e <osMutexNew+0x102>
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	f043 0301 	orr.w	r3, r3, #1
 800753c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800753e:	69fb      	ldr	r3, [r7, #28]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f023 0301 	bic.w	r3, r3, #1
 8007558:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f003 0301 	and.w	r3, r3, #1
 8007560:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007562:	2300      	movs	r3, #0
 8007564:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007566:	f3ef 8305 	mrs	r3, IPSR
 800756a:	60bb      	str	r3, [r7, #8]
  return(result);
 800756c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007572:	f06f 0305 	mvn.w	r3, #5
 8007576:	617b      	str	r3, [r7, #20]
 8007578:	e02c      	b.n	80075d4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d103      	bne.n	8007588 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007580:	f06f 0303 	mvn.w	r3, #3
 8007584:	617b      	str	r3, [r7, #20]
 8007586:	e025      	b.n	80075d4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d011      	beq.n	80075b2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6938      	ldr	r0, [r7, #16]
 8007592:	f001 f9a2 	bl	80088da <xQueueTakeMutexRecursive>
 8007596:	4603      	mov	r3, r0
 8007598:	2b01      	cmp	r3, #1
 800759a:	d01b      	beq.n	80075d4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80075a2:	f06f 0301 	mvn.w	r3, #1
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	e014      	b.n	80075d4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80075aa:	f06f 0302 	mvn.w	r3, #2
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	e010      	b.n	80075d4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6938      	ldr	r0, [r7, #16]
 80075b6:	f001 fd47 	bl	8009048 <xQueueSemaphoreTake>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d009      	beq.n	80075d4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80075c6:	f06f 0301 	mvn.w	r3, #1
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	e002      	b.n	80075d4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80075ce:	f06f 0302 	mvn.w	r3, #2
 80075d2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80075d4:	697b      	ldr	r3, [r7, #20]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80075de:	b580      	push	{r7, lr}
 80075e0:	b086      	sub	sp, #24
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f023 0301 	bic.w	r3, r3, #1
 80075ec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075fa:	f3ef 8305 	mrs	r3, IPSR
 80075fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8007600:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <osMutexRelease+0x30>
    stat = osErrorISR;
 8007606:	f06f 0305 	mvn.w	r3, #5
 800760a:	617b      	str	r3, [r7, #20]
 800760c:	e01f      	b.n	800764e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d103      	bne.n	800761c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007614:	f06f 0303 	mvn.w	r3, #3
 8007618:	617b      	str	r3, [r7, #20]
 800761a:	e018      	b.n	800764e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d009      	beq.n	8007636 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007622:	6938      	ldr	r0, [r7, #16]
 8007624:	f001 f924 	bl	8008870 <xQueueGiveMutexRecursive>
 8007628:	4603      	mov	r3, r0
 800762a:	2b01      	cmp	r3, #1
 800762c:	d00f      	beq.n	800764e <osMutexRelease+0x70>
        stat = osErrorResource;
 800762e:	f06f 0302 	mvn.w	r3, #2
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	e00b      	b.n	800764e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007636:	2300      	movs	r3, #0
 8007638:	2200      	movs	r2, #0
 800763a:	2100      	movs	r1, #0
 800763c:	6938      	ldr	r0, [r7, #16]
 800763e:	f001 f9f1 	bl	8008a24 <xQueueGenericSend>
 8007642:	4603      	mov	r3, r0
 8007644:	2b01      	cmp	r3, #1
 8007646:	d002      	beq.n	800764e <osMutexRelease+0x70>
        stat = osErrorResource;
 8007648:	f06f 0302 	mvn.w	r3, #2
 800764c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800764e:	697b      	ldr	r3, [r7, #20]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007658:	b580      	push	{r7, lr}
 800765a:	b08a      	sub	sp, #40	@ 0x28
 800765c:	af02      	add	r7, sp, #8
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007664:	2300      	movs	r3, #0
 8007666:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007668:	f3ef 8305 	mrs	r3, IPSR
 800766c:	613b      	str	r3, [r7, #16]
  return(result);
 800766e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007670:	2b00      	cmp	r3, #0
 8007672:	d175      	bne.n	8007760 <osSemaphoreNew+0x108>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d072      	beq.n	8007760 <osSemaphoreNew+0x108>
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	429a      	cmp	r2, r3
 8007680:	d86e      	bhi.n	8007760 <osSemaphoreNew+0x108>
    mem = -1;
 8007682:	f04f 33ff 	mov.w	r3, #4294967295
 8007686:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d015      	beq.n	80076ba <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d006      	beq.n	80076a4 <osSemaphoreNew+0x4c>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	2b4f      	cmp	r3, #79	@ 0x4f
 800769c:	d902      	bls.n	80076a4 <osSemaphoreNew+0x4c>
        mem = 1;
 800769e:	2301      	movs	r3, #1
 80076a0:	61bb      	str	r3, [r7, #24]
 80076a2:	e00c      	b.n	80076be <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d108      	bne.n	80076be <osSemaphoreNew+0x66>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d104      	bne.n	80076be <osSemaphoreNew+0x66>
          mem = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	61bb      	str	r3, [r7, #24]
 80076b8:	e001      	b.n	80076be <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80076ba:	2300      	movs	r3, #0
 80076bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c4:	d04c      	beq.n	8007760 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d128      	bne.n	800771e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d10a      	bne.n	80076e8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2203      	movs	r2, #3
 80076d8:	9200      	str	r2, [sp, #0]
 80076da:	2200      	movs	r2, #0
 80076dc:	2100      	movs	r1, #0
 80076de:	2001      	movs	r0, #1
 80076e0:	f000 ff9e 	bl	8008620 <xQueueGenericCreateStatic>
 80076e4:	61f8      	str	r0, [r7, #28]
 80076e6:	e005      	b.n	80076f4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80076e8:	2203      	movs	r2, #3
 80076ea:	2100      	movs	r1, #0
 80076ec:	2001      	movs	r0, #1
 80076ee:	f001 f814 	bl	800871a <xQueueGenericCreate>
 80076f2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d022      	beq.n	8007740 <osSemaphoreNew+0xe8>
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d01f      	beq.n	8007740 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007700:	2300      	movs	r3, #0
 8007702:	2200      	movs	r2, #0
 8007704:	2100      	movs	r1, #0
 8007706:	69f8      	ldr	r0, [r7, #28]
 8007708:	f001 f98c 	bl	8008a24 <xQueueGenericSend>
 800770c:	4603      	mov	r3, r0
 800770e:	2b01      	cmp	r3, #1
 8007710:	d016      	beq.n	8007740 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007712:	69f8      	ldr	r0, [r7, #28]
 8007714:	f001 fe2a 	bl	800936c <vQueueDelete>
            hSemaphore = NULL;
 8007718:	2300      	movs	r3, #0
 800771a:	61fb      	str	r3, [r7, #28]
 800771c:	e010      	b.n	8007740 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d108      	bne.n	8007736 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	461a      	mov	r2, r3
 800772a:	68b9      	ldr	r1, [r7, #8]
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f001 f90b 	bl	8008948 <xQueueCreateCountingSemaphoreStatic>
 8007732:	61f8      	str	r0, [r7, #28]
 8007734:	e004      	b.n	8007740 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007736:	68b9      	ldr	r1, [r7, #8]
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f001 f93e 	bl	80089ba <xQueueCreateCountingSemaphore>
 800773e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00c      	beq.n	8007760 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <osSemaphoreNew+0xfc>
          name = attr->name;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	617b      	str	r3, [r7, #20]
 8007752:	e001      	b.n	8007758 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007758:	6979      	ldr	r1, [r7, #20]
 800775a:	69f8      	ldr	r0, [r7, #28]
 800775c:	f001 ff52 	bl	8009604 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007760:	69fb      	ldr	r3, [r7, #28]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
	...

0800776c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800777a:	2300      	movs	r3, #0
 800777c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d103      	bne.n	800778c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007784:	f06f 0303 	mvn.w	r3, #3
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	e039      	b.n	8007800 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800778c:	f3ef 8305 	mrs	r3, IPSR
 8007790:	60fb      	str	r3, [r7, #12]
  return(result);
 8007792:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007794:	2b00      	cmp	r3, #0
 8007796:	d022      	beq.n	80077de <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800779e:	f06f 0303 	mvn.w	r3, #3
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	e02c      	b.n	8007800 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80077aa:	f107 0308 	add.w	r3, r7, #8
 80077ae:	461a      	mov	r2, r3
 80077b0:	2100      	movs	r1, #0
 80077b2:	6938      	ldr	r0, [r7, #16]
 80077b4:	f001 fd58 	bl	8009268 <xQueueReceiveFromISR>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d003      	beq.n	80077c6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80077be:	f06f 0302 	mvn.w	r3, #2
 80077c2:	617b      	str	r3, [r7, #20]
 80077c4:	e01c      	b.n	8007800 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d019      	beq.n	8007800 <osSemaphoreAcquire+0x94>
 80077cc:	4b0f      	ldr	r3, [pc, #60]	@ (800780c <osSemaphoreAcquire+0xa0>)
 80077ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	e010      	b.n	8007800 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6938      	ldr	r0, [r7, #16]
 80077e2:	f001 fc31 	bl	8009048 <xQueueSemaphoreTake>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d009      	beq.n	8007800 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80077f2:	f06f 0301 	mvn.w	r3, #1
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	e002      	b.n	8007800 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80077fa:	f06f 0302 	mvn.w	r3, #2
 80077fe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007800:	697b      	ldr	r3, [r7, #20]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	e000ed04 	.word	0xe000ed04

08007810 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800781c:	2300      	movs	r3, #0
 800781e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d103      	bne.n	800782e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007826:	f06f 0303 	mvn.w	r3, #3
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	e02c      	b.n	8007888 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800782e:	f3ef 8305 	mrs	r3, IPSR
 8007832:	60fb      	str	r3, [r7, #12]
  return(result);
 8007834:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007836:	2b00      	cmp	r3, #0
 8007838:	d01a      	beq.n	8007870 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800783a:	2300      	movs	r3, #0
 800783c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800783e:	f107 0308 	add.w	r3, r7, #8
 8007842:	4619      	mov	r1, r3
 8007844:	6938      	ldr	r0, [r7, #16]
 8007846:	f001 fa8d 	bl	8008d64 <xQueueGiveFromISR>
 800784a:	4603      	mov	r3, r0
 800784c:	2b01      	cmp	r3, #1
 800784e:	d003      	beq.n	8007858 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007850:	f06f 0302 	mvn.w	r3, #2
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	e017      	b.n	8007888 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d014      	beq.n	8007888 <osSemaphoreRelease+0x78>
 800785e:	4b0d      	ldr	r3, [pc, #52]	@ (8007894 <osSemaphoreRelease+0x84>)
 8007860:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	e00b      	b.n	8007888 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007870:	2300      	movs	r3, #0
 8007872:	2200      	movs	r2, #0
 8007874:	2100      	movs	r1, #0
 8007876:	6938      	ldr	r0, [r7, #16]
 8007878:	f001 f8d4 	bl	8008a24 <xQueueGenericSend>
 800787c:	4603      	mov	r3, r0
 800787e:	2b01      	cmp	r3, #1
 8007880:	d002      	beq.n	8007888 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007882:	f06f 0302 	mvn.w	r3, #2
 8007886:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007888:	697b      	ldr	r3, [r7, #20]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3718      	adds	r7, #24
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	e000ed04 	.word	0xe000ed04

08007898 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	@ 0x28
 800789c:	af02      	add	r7, sp, #8
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078a8:	f3ef 8305 	mrs	r3, IPSR
 80078ac:	613b      	str	r3, [r7, #16]
  return(result);
 80078ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d15f      	bne.n	8007974 <osMessageQueueNew+0xdc>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d05c      	beq.n	8007974 <osMessageQueueNew+0xdc>
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d059      	beq.n	8007974 <osMessageQueueNew+0xdc>
    mem = -1;
 80078c0:	f04f 33ff 	mov.w	r3, #4294967295
 80078c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d029      	beq.n	8007920 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d012      	beq.n	80078fa <osMessageQueueNew+0x62>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	2b4f      	cmp	r3, #79	@ 0x4f
 80078da:	d90e      	bls.n	80078fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00a      	beq.n	80078fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	695a      	ldr	r2, [r3, #20]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	68b9      	ldr	r1, [r7, #8]
 80078ec:	fb01 f303 	mul.w	r3, r1, r3
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d302      	bcc.n	80078fa <osMessageQueueNew+0x62>
        mem = 1;
 80078f4:	2301      	movs	r3, #1
 80078f6:	61bb      	str	r3, [r7, #24]
 80078f8:	e014      	b.n	8007924 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d110      	bne.n	8007924 <osMessageQueueNew+0x8c>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10c      	bne.n	8007924 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800790e:	2b00      	cmp	r3, #0
 8007910:	d108      	bne.n	8007924 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d104      	bne.n	8007924 <osMessageQueueNew+0x8c>
          mem = 0;
 800791a:	2300      	movs	r3, #0
 800791c:	61bb      	str	r3, [r7, #24]
 800791e:	e001      	b.n	8007924 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007920:	2300      	movs	r3, #0
 8007922:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d10b      	bne.n	8007942 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	691a      	ldr	r2, [r3, #16]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	2100      	movs	r1, #0
 8007934:	9100      	str	r1, [sp, #0]
 8007936:	68b9      	ldr	r1, [r7, #8]
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 fe71 	bl	8008620 <xQueueGenericCreateStatic>
 800793e:	61f8      	str	r0, [r7, #28]
 8007940:	e008      	b.n	8007954 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d105      	bne.n	8007954 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007948:	2200      	movs	r2, #0
 800794a:	68b9      	ldr	r1, [r7, #8]
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 fee4 	bl	800871a <xQueueGenericCreate>
 8007952:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00c      	beq.n	8007974 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	617b      	str	r3, [r7, #20]
 8007966:	e001      	b.n	800796c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007968:	2300      	movs	r3, #0
 800796a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800796c:	6979      	ldr	r1, [r7, #20]
 800796e:	69f8      	ldr	r0, [r7, #28]
 8007970:	f001 fe48 	bl	8009604 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007974:	69fb      	ldr	r3, [r7, #28]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3720      	adds	r7, #32
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
	...

08007980 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	603b      	str	r3, [r7, #0]
 800798c:	4613      	mov	r3, r2
 800798e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007994:	2300      	movs	r3, #0
 8007996:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007998:	f3ef 8305 	mrs	r3, IPSR
 800799c:	617b      	str	r3, [r7, #20]
  return(result);
 800799e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d028      	beq.n	80079f6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d005      	beq.n	80079b6 <osMessageQueuePut+0x36>
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d002      	beq.n	80079b6 <osMessageQueuePut+0x36>
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80079b6:	f06f 0303 	mvn.w	r3, #3
 80079ba:	61fb      	str	r3, [r7, #28]
 80079bc:	e038      	b.n	8007a30 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80079be:	2300      	movs	r3, #0
 80079c0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80079c2:	f107 0210 	add.w	r2, r7, #16
 80079c6:	2300      	movs	r3, #0
 80079c8:	68b9      	ldr	r1, [r7, #8]
 80079ca:	69b8      	ldr	r0, [r7, #24]
 80079cc:	f001 f92c 	bl	8008c28 <xQueueGenericSendFromISR>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d003      	beq.n	80079de <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80079d6:	f06f 0302 	mvn.w	r3, #2
 80079da:	61fb      	str	r3, [r7, #28]
 80079dc:	e028      	b.n	8007a30 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d025      	beq.n	8007a30 <osMessageQueuePut+0xb0>
 80079e4:	4b15      	ldr	r3, [pc, #84]	@ (8007a3c <osMessageQueuePut+0xbc>)
 80079e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	e01c      	b.n	8007a30 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <osMessageQueuePut+0x82>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d103      	bne.n	8007a0a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007a02:	f06f 0303 	mvn.w	r3, #3
 8007a06:	61fb      	str	r3, [r7, #28]
 8007a08:	e012      	b.n	8007a30 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	69b8      	ldr	r0, [r7, #24]
 8007a12:	f001 f807 	bl	8008a24 <xQueueGenericSend>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d009      	beq.n	8007a30 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007a22:	f06f 0301 	mvn.w	r3, #1
 8007a26:	61fb      	str	r3, [r7, #28]
 8007a28:	e002      	b.n	8007a30 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007a2a:	f06f 0302 	mvn.w	r3, #2
 8007a2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007a30:	69fb      	ldr	r3, [r7, #28]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3720      	adds	r7, #32
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	e000ed04 	.word	0xe000ed04

08007a40 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b088      	sub	sp, #32
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
 8007a4c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a56:	f3ef 8305 	mrs	r3, IPSR
 8007a5a:	617b      	str	r3, [r7, #20]
  return(result);
 8007a5c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d028      	beq.n	8007ab4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d005      	beq.n	8007a74 <osMessageQueueGet+0x34>
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d002      	beq.n	8007a74 <osMessageQueueGet+0x34>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d003      	beq.n	8007a7c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007a74:	f06f 0303 	mvn.w	r3, #3
 8007a78:	61fb      	str	r3, [r7, #28]
 8007a7a:	e037      	b.n	8007aec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007a80:	f107 0310 	add.w	r3, r7, #16
 8007a84:	461a      	mov	r2, r3
 8007a86:	68b9      	ldr	r1, [r7, #8]
 8007a88:	69b8      	ldr	r0, [r7, #24]
 8007a8a:	f001 fbed 	bl	8009268 <xQueueReceiveFromISR>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d003      	beq.n	8007a9c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007a94:	f06f 0302 	mvn.w	r3, #2
 8007a98:	61fb      	str	r3, [r7, #28]
 8007a9a:	e027      	b.n	8007aec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d024      	beq.n	8007aec <osMessageQueueGet+0xac>
 8007aa2:	4b15      	ldr	r3, [pc, #84]	@ (8007af8 <osMessageQueueGet+0xb8>)
 8007aa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aa8:	601a      	str	r2, [r3, #0]
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	e01b      	b.n	8007aec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <osMessageQueueGet+0x80>
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d103      	bne.n	8007ac8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007ac0:	f06f 0303 	mvn.w	r3, #3
 8007ac4:	61fb      	str	r3, [r7, #28]
 8007ac6:	e011      	b.n	8007aec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	69b8      	ldr	r0, [r7, #24]
 8007ace:	f001 f9d9 	bl	8008e84 <xQueueReceive>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d009      	beq.n	8007aec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007ade:	f06f 0301 	mvn.w	r3, #1
 8007ae2:	61fb      	str	r3, [r7, #28]
 8007ae4:	e002      	b.n	8007aec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007ae6:	f06f 0302 	mvn.w	r3, #2
 8007aea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007aec:	69fb      	ldr	r3, [r7, #28]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3720      	adds	r7, #32
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	e000ed04 	.word	0xe000ed04

08007afc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4a07      	ldr	r2, [pc, #28]	@ (8007b28 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	4a06      	ldr	r2, [pc, #24]	@ (8007b2c <vApplicationGetIdleTaskMemory+0x30>)
 8007b12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2280      	movs	r2, #128	@ 0x80
 8007b18:	601a      	str	r2, [r3, #0]
}
 8007b1a:	bf00      	nop
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	24000358 	.word	0x24000358
 8007b2c:	240003b4 	.word	0x240003b4

08007b30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4a07      	ldr	r2, [pc, #28]	@ (8007b5c <vApplicationGetTimerTaskMemory+0x2c>)
 8007b40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	4a06      	ldr	r2, [pc, #24]	@ (8007b60 <vApplicationGetTimerTaskMemory+0x30>)
 8007b46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b4e:	601a      	str	r2, [r3, #0]
}
 8007b50:	bf00      	nop
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	240005b4 	.word	0x240005b4
 8007b60:	24000610 	.word	0x24000610

08007b64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08a      	sub	sp, #40	@ 0x28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b70:	f002 f814 	bl	8009b9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b74:	4b5c      	ldr	r3, [pc, #368]	@ (8007ce8 <pvPortMalloc+0x184>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b7c:	f000 f924 	bl	8007dc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b80:	4b5a      	ldr	r3, [pc, #360]	@ (8007cec <pvPortMalloc+0x188>)
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4013      	ands	r3, r2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f040 8095 	bne.w	8007cb8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d01e      	beq.n	8007bd2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007b94:	2208      	movs	r2, #8
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4413      	add	r3, r2
 8007b9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f003 0307 	and.w	r3, r3, #7
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d015      	beq.n	8007bd2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f023 0307 	bic.w	r3, r3, #7
 8007bac:	3308      	adds	r3, #8
 8007bae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f003 0307 	and.w	r3, r3, #7
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00b      	beq.n	8007bd2 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007bcc:	bf00      	nop
 8007bce:	bf00      	nop
 8007bd0:	e7fd      	b.n	8007bce <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d06f      	beq.n	8007cb8 <pvPortMalloc+0x154>
 8007bd8:	4b45      	ldr	r3, [pc, #276]	@ (8007cf0 <pvPortMalloc+0x18c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d86a      	bhi.n	8007cb8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007be2:	4b44      	ldr	r3, [pc, #272]	@ (8007cf4 <pvPortMalloc+0x190>)
 8007be4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007be6:	4b43      	ldr	r3, [pc, #268]	@ (8007cf4 <pvPortMalloc+0x190>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bec:	e004      	b.n	8007bf8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d903      	bls.n	8007c0a <pvPortMalloc+0xa6>
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1f1      	bne.n	8007bee <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c0a:	4b37      	ldr	r3, [pc, #220]	@ (8007ce8 <pvPortMalloc+0x184>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d051      	beq.n	8007cb8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2208      	movs	r2, #8
 8007c1a:	4413      	add	r3, r2
 8007c1c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	1ad2      	subs	r2, r2, r3
 8007c2e:	2308      	movs	r3, #8
 8007c30:	005b      	lsls	r3, r3, #1
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d920      	bls.n	8007c78 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	f003 0307 	and.w	r3, r3, #7
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00b      	beq.n	8007c60 <pvPortMalloc+0xfc>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	613b      	str	r3, [r7, #16]
}
 8007c5a:	bf00      	nop
 8007c5c:	bf00      	nop
 8007c5e:	e7fd      	b.n	8007c5c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	1ad2      	subs	r2, r2, r3
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c72:	69b8      	ldr	r0, [r7, #24]
 8007c74:	f000 f90a 	bl	8007e8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c78:	4b1d      	ldr	r3, [pc, #116]	@ (8007cf0 <pvPortMalloc+0x18c>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf0 <pvPortMalloc+0x18c>)
 8007c84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c86:	4b1a      	ldr	r3, [pc, #104]	@ (8007cf0 <pvPortMalloc+0x18c>)
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8007cf8 <pvPortMalloc+0x194>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d203      	bcs.n	8007c9a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c92:	4b17      	ldr	r3, [pc, #92]	@ (8007cf0 <pvPortMalloc+0x18c>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a18      	ldr	r2, [pc, #96]	@ (8007cf8 <pvPortMalloc+0x194>)
 8007c98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	4b13      	ldr	r3, [pc, #76]	@ (8007cec <pvPortMalloc+0x188>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cae:	4b13      	ldr	r3, [pc, #76]	@ (8007cfc <pvPortMalloc+0x198>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	4a11      	ldr	r2, [pc, #68]	@ (8007cfc <pvPortMalloc+0x198>)
 8007cb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cb8:	f001 ff7e 	bl	8009bb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	f003 0307 	and.w	r3, r3, #7
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00b      	beq.n	8007cde <pvPortMalloc+0x17a>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	60fb      	str	r3, [r7, #12]
}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	e7fd      	b.n	8007cda <pvPortMalloc+0x176>
	return pvReturn;
 8007cde:	69fb      	ldr	r3, [r7, #28]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3728      	adds	r7, #40	@ 0x28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	24004618 	.word	0x24004618
 8007cec:	2400462c 	.word	0x2400462c
 8007cf0:	2400461c 	.word	0x2400461c
 8007cf4:	24004610 	.word	0x24004610
 8007cf8:	24004620 	.word	0x24004620
 8007cfc:	24004624 	.word	0x24004624

08007d00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d04f      	beq.n	8007db2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d12:	2308      	movs	r3, #8
 8007d14:	425b      	negs	r3, r3
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	4413      	add	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	4b25      	ldr	r3, [pc, #148]	@ (8007dbc <vPortFree+0xbc>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10b      	bne.n	8007d46 <vPortFree+0x46>
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	60fb      	str	r3, [r7, #12]
}
 8007d40:	bf00      	nop
 8007d42:	bf00      	nop
 8007d44:	e7fd      	b.n	8007d42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00b      	beq.n	8007d66 <vPortFree+0x66>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	60bb      	str	r3, [r7, #8]
}
 8007d60:	bf00      	nop
 8007d62:	bf00      	nop
 8007d64:	e7fd      	b.n	8007d62 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	4b14      	ldr	r3, [pc, #80]	@ (8007dbc <vPortFree+0xbc>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4013      	ands	r3, r2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d01e      	beq.n	8007db2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d11a      	bne.n	8007db2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	4b0e      	ldr	r3, [pc, #56]	@ (8007dbc <vPortFree+0xbc>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	43db      	mvns	r3, r3
 8007d86:	401a      	ands	r2, r3
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d8c:	f001 ff06 	bl	8009b9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc0 <vPortFree+0xc0>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4413      	add	r3, r2
 8007d9a:	4a09      	ldr	r2, [pc, #36]	@ (8007dc0 <vPortFree+0xc0>)
 8007d9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d9e:	6938      	ldr	r0, [r7, #16]
 8007da0:	f000 f874 	bl	8007e8c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007da4:	4b07      	ldr	r3, [pc, #28]	@ (8007dc4 <vPortFree+0xc4>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3301      	adds	r3, #1
 8007daa:	4a06      	ldr	r2, [pc, #24]	@ (8007dc4 <vPortFree+0xc4>)
 8007dac:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dae:	f001 ff03 	bl	8009bb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007db2:	bf00      	nop
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	2400462c 	.word	0x2400462c
 8007dc0:	2400461c 	.word	0x2400461c
 8007dc4:	24004628 	.word	0x24004628

08007dc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dce:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007dd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007dd4:	4b27      	ldr	r3, [pc, #156]	@ (8007e74 <prvHeapInit+0xac>)
 8007dd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f003 0307 	and.w	r3, r3, #7
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00c      	beq.n	8007dfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3307      	adds	r3, #7
 8007de6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0307 	bic.w	r3, r3, #7
 8007dee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	4a1f      	ldr	r2, [pc, #124]	@ (8007e74 <prvHeapInit+0xac>)
 8007df8:	4413      	add	r3, r2
 8007dfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e00:	4a1d      	ldr	r2, [pc, #116]	@ (8007e78 <prvHeapInit+0xb0>)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e06:	4b1c      	ldr	r3, [pc, #112]	@ (8007e78 <prvHeapInit+0xb0>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	4413      	add	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e14:	2208      	movs	r2, #8
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	1a9b      	subs	r3, r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f023 0307 	bic.w	r3, r3, #7
 8007e22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4a15      	ldr	r2, [pc, #84]	@ (8007e7c <prvHeapInit+0xb4>)
 8007e28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e2a:	4b14      	ldr	r3, [pc, #80]	@ (8007e7c <prvHeapInit+0xb4>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e32:	4b12      	ldr	r3, [pc, #72]	@ (8007e7c <prvHeapInit+0xb4>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	1ad2      	subs	r2, r2, r3
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e48:	4b0c      	ldr	r3, [pc, #48]	@ (8007e7c <prvHeapInit+0xb4>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	4a0a      	ldr	r2, [pc, #40]	@ (8007e80 <prvHeapInit+0xb8>)
 8007e56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	4a09      	ldr	r2, [pc, #36]	@ (8007e84 <prvHeapInit+0xbc>)
 8007e5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e60:	4b09      	ldr	r3, [pc, #36]	@ (8007e88 <prvHeapInit+0xc0>)
 8007e62:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e66:	601a      	str	r2, [r3, #0]
}
 8007e68:	bf00      	nop
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr
 8007e74:	24000a10 	.word	0x24000a10
 8007e78:	24004610 	.word	0x24004610
 8007e7c:	24004618 	.word	0x24004618
 8007e80:	24004620 	.word	0x24004620
 8007e84:	2400461c 	.word	0x2400461c
 8007e88:	2400462c 	.word	0x2400462c

08007e8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e94:	4b28      	ldr	r3, [pc, #160]	@ (8007f38 <prvInsertBlockIntoFreeList+0xac>)
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	e002      	b.n	8007ea0 <prvInsertBlockIntoFreeList+0x14>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d8f7      	bhi.n	8007e9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d108      	bne.n	8007ece <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	441a      	add	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	441a      	add	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d118      	bne.n	8007f14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	4b15      	ldr	r3, [pc, #84]	@ (8007f3c <prvInsertBlockIntoFreeList+0xb0>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d00d      	beq.n	8007f0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	441a      	add	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	601a      	str	r2, [r3, #0]
 8007f08:	e008      	b.n	8007f1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8007f3c <prvInsertBlockIntoFreeList+0xb0>)
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	601a      	str	r2, [r3, #0]
 8007f12:	e003      	b.n	8007f1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d002      	beq.n	8007f2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f2a:	bf00      	nop
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	24004610 	.word	0x24004610
 8007f3c:	24004618 	.word	0x24004618

08007f40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f103 0208 	add.w	r2, r3, #8
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f04f 32ff 	mov.w	r2, #4294967295
 8007f58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f103 0208 	add.w	r2, r3, #8
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f103 0208 	add.w	r2, r3, #8
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f8e:	bf00      	nop
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b085      	sub	sp, #20
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	601a      	str	r2, [r3, #0]
}
 8007fd6:	bf00      	nop
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b085      	sub	sp, #20
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff8:	d103      	bne.n	8008002 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	e00c      	b.n	800801c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3308      	adds	r3, #8
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	e002      	b.n	8008010 <vListInsert+0x2e>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	60fb      	str	r3, [r7, #12]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	429a      	cmp	r2, r3
 800801a:	d2f6      	bcs.n	800800a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	601a      	str	r2, [r3, #0]
}
 8008048:	bf00      	nop
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	6892      	ldr	r2, [r2, #8]
 800806a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	6852      	ldr	r2, [r2, #4]
 8008074:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	429a      	cmp	r2, r3
 800807e:	d103      	bne.n	8008088 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689a      	ldr	r2, [r3, #8]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	1e5a      	subs	r2, r3, #1
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	3b04      	subs	r3, #4
 80080b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80080c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	3b04      	subs	r3, #4
 80080c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f023 0201 	bic.w	r2, r3, #1
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	3b04      	subs	r3, #4
 80080d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080d8:	4a0c      	ldr	r2, [pc, #48]	@ (800810c <pxPortInitialiseStack+0x64>)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3b14      	subs	r3, #20
 80080e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3b04      	subs	r3, #4
 80080ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f06f 0202 	mvn.w	r2, #2
 80080f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3b20      	subs	r3, #32
 80080fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080fe:	68fb      	ldr	r3, [r7, #12]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	08008111 	.word	0x08008111

08008110 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800811a:	4b13      	ldr	r3, [pc, #76]	@ (8008168 <prvTaskExitError+0x58>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008122:	d00b      	beq.n	800813c <prvTaskExitError+0x2c>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	60fb      	str	r3, [r7, #12]
}
 8008136:	bf00      	nop
 8008138:	bf00      	nop
 800813a:	e7fd      	b.n	8008138 <prvTaskExitError+0x28>
	__asm volatile
 800813c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	60bb      	str	r3, [r7, #8]
}
 800814e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008150:	bf00      	nop
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d0fc      	beq.n	8008152 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008158:	bf00      	nop
 800815a:	bf00      	nop
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	24000040 	.word	0x24000040
 800816c:	00000000 	.word	0x00000000

08008170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008170:	4b07      	ldr	r3, [pc, #28]	@ (8008190 <pxCurrentTCBConst2>)
 8008172:	6819      	ldr	r1, [r3, #0]
 8008174:	6808      	ldr	r0, [r1, #0]
 8008176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817a:	f380 8809 	msr	PSP, r0
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f04f 0000 	mov.w	r0, #0
 8008186:	f380 8811 	msr	BASEPRI, r0
 800818a:	4770      	bx	lr
 800818c:	f3af 8000 	nop.w

08008190 <pxCurrentTCBConst2>:
 8008190:	24004678 	.word	0x24004678
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008194:	bf00      	nop
 8008196:	bf00      	nop

08008198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008198:	4808      	ldr	r0, [pc, #32]	@ (80081bc <prvPortStartFirstTask+0x24>)
 800819a:	6800      	ldr	r0, [r0, #0]
 800819c:	6800      	ldr	r0, [r0, #0]
 800819e:	f380 8808 	msr	MSP, r0
 80081a2:	f04f 0000 	mov.w	r0, #0
 80081a6:	f380 8814 	msr	CONTROL, r0
 80081aa:	b662      	cpsie	i
 80081ac:	b661      	cpsie	f
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	df00      	svc	0
 80081b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081ba:	bf00      	nop
 80081bc:	e000ed08 	.word	0xe000ed08

080081c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081c6:	4b47      	ldr	r3, [pc, #284]	@ (80082e4 <xPortStartScheduler+0x124>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a47      	ldr	r2, [pc, #284]	@ (80082e8 <xPortStartScheduler+0x128>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d10b      	bne.n	80081e8 <xPortStartScheduler+0x28>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	613b      	str	r3, [r7, #16]
}
 80081e2:	bf00      	nop
 80081e4:	bf00      	nop
 80081e6:	e7fd      	b.n	80081e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80081e8:	4b3e      	ldr	r3, [pc, #248]	@ (80082e4 <xPortStartScheduler+0x124>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a3f      	ldr	r2, [pc, #252]	@ (80082ec <xPortStartScheduler+0x12c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d10b      	bne.n	800820a <xPortStartScheduler+0x4a>
	__asm volatile
 80081f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	60fb      	str	r3, [r7, #12]
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop
 8008208:	e7fd      	b.n	8008206 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800820a:	4b39      	ldr	r3, [pc, #228]	@ (80082f0 <xPortStartScheduler+0x130>)
 800820c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	b2db      	uxtb	r3, r3
 8008214:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	22ff      	movs	r2, #255	@ 0xff
 800821a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	b2db      	uxtb	r3, r3
 8008222:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008224:	78fb      	ldrb	r3, [r7, #3]
 8008226:	b2db      	uxtb	r3, r3
 8008228:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800822c:	b2da      	uxtb	r2, r3
 800822e:	4b31      	ldr	r3, [pc, #196]	@ (80082f4 <xPortStartScheduler+0x134>)
 8008230:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008232:	4b31      	ldr	r3, [pc, #196]	@ (80082f8 <xPortStartScheduler+0x138>)
 8008234:	2207      	movs	r2, #7
 8008236:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008238:	e009      	b.n	800824e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800823a:	4b2f      	ldr	r3, [pc, #188]	@ (80082f8 <xPortStartScheduler+0x138>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3b01      	subs	r3, #1
 8008240:	4a2d      	ldr	r2, [pc, #180]	@ (80082f8 <xPortStartScheduler+0x138>)
 8008242:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	b2db      	uxtb	r3, r3
 8008248:	005b      	lsls	r3, r3, #1
 800824a:	b2db      	uxtb	r3, r3
 800824c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800824e:	78fb      	ldrb	r3, [r7, #3]
 8008250:	b2db      	uxtb	r3, r3
 8008252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008256:	2b80      	cmp	r3, #128	@ 0x80
 8008258:	d0ef      	beq.n	800823a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800825a:	4b27      	ldr	r3, [pc, #156]	@ (80082f8 <xPortStartScheduler+0x138>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f1c3 0307 	rsb	r3, r3, #7
 8008262:	2b04      	cmp	r3, #4
 8008264:	d00b      	beq.n	800827e <xPortStartScheduler+0xbe>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	60bb      	str	r3, [r7, #8]
}
 8008278:	bf00      	nop
 800827a:	bf00      	nop
 800827c:	e7fd      	b.n	800827a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800827e:	4b1e      	ldr	r3, [pc, #120]	@ (80082f8 <xPortStartScheduler+0x138>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	021b      	lsls	r3, r3, #8
 8008284:	4a1c      	ldr	r2, [pc, #112]	@ (80082f8 <xPortStartScheduler+0x138>)
 8008286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008288:	4b1b      	ldr	r3, [pc, #108]	@ (80082f8 <xPortStartScheduler+0x138>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008290:	4a19      	ldr	r2, [pc, #100]	@ (80082f8 <xPortStartScheduler+0x138>)
 8008292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	b2da      	uxtb	r2, r3
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800829c:	4b17      	ldr	r3, [pc, #92]	@ (80082fc <xPortStartScheduler+0x13c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a16      	ldr	r2, [pc, #88]	@ (80082fc <xPortStartScheduler+0x13c>)
 80082a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80082a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082a8:	4b14      	ldr	r3, [pc, #80]	@ (80082fc <xPortStartScheduler+0x13c>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a13      	ldr	r2, [pc, #76]	@ (80082fc <xPortStartScheduler+0x13c>)
 80082ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80082b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082b4:	f000 f8da 	bl	800846c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082b8:	4b11      	ldr	r3, [pc, #68]	@ (8008300 <xPortStartScheduler+0x140>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082be:	f000 f8f9 	bl	80084b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082c2:	4b10      	ldr	r3, [pc, #64]	@ (8008304 <xPortStartScheduler+0x144>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a0f      	ldr	r2, [pc, #60]	@ (8008304 <xPortStartScheduler+0x144>)
 80082c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80082cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082ce:	f7ff ff63 	bl	8008198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082d2:	f001 fdeb 	bl	8009eac <vTaskSwitchContext>
	prvTaskExitError();
 80082d6:	f7ff ff1b 	bl	8008110 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	e000ed00 	.word	0xe000ed00
 80082e8:	410fc271 	.word	0x410fc271
 80082ec:	410fc270 	.word	0x410fc270
 80082f0:	e000e400 	.word	0xe000e400
 80082f4:	24004630 	.word	0x24004630
 80082f8:	24004634 	.word	0x24004634
 80082fc:	e000ed20 	.word	0xe000ed20
 8008300:	24000040 	.word	0x24000040
 8008304:	e000ef34 	.word	0xe000ef34

08008308 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	607b      	str	r3, [r7, #4]
}
 8008320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008322:	4b10      	ldr	r3, [pc, #64]	@ (8008364 <vPortEnterCritical+0x5c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3301      	adds	r3, #1
 8008328:	4a0e      	ldr	r2, [pc, #56]	@ (8008364 <vPortEnterCritical+0x5c>)
 800832a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800832c:	4b0d      	ldr	r3, [pc, #52]	@ (8008364 <vPortEnterCritical+0x5c>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d110      	bne.n	8008356 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008334:	4b0c      	ldr	r3, [pc, #48]	@ (8008368 <vPortEnterCritical+0x60>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00b      	beq.n	8008356 <vPortEnterCritical+0x4e>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	603b      	str	r3, [r7, #0]
}
 8008350:	bf00      	nop
 8008352:	bf00      	nop
 8008354:	e7fd      	b.n	8008352 <vPortEnterCritical+0x4a>
	}
}
 8008356:	bf00      	nop
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	24000040 	.word	0x24000040
 8008368:	e000ed04 	.word	0xe000ed04

0800836c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008372:	4b12      	ldr	r3, [pc, #72]	@ (80083bc <vPortExitCritical+0x50>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10b      	bne.n	8008392 <vPortExitCritical+0x26>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	607b      	str	r3, [r7, #4]
}
 800838c:	bf00      	nop
 800838e:	bf00      	nop
 8008390:	e7fd      	b.n	800838e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008392:	4b0a      	ldr	r3, [pc, #40]	@ (80083bc <vPortExitCritical+0x50>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	3b01      	subs	r3, #1
 8008398:	4a08      	ldr	r2, [pc, #32]	@ (80083bc <vPortExitCritical+0x50>)
 800839a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800839c:	4b07      	ldr	r3, [pc, #28]	@ (80083bc <vPortExitCritical+0x50>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d105      	bne.n	80083b0 <vPortExitCritical+0x44>
 80083a4:	2300      	movs	r3, #0
 80083a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	24000040 	.word	0x24000040

080083c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083c0:	f3ef 8009 	mrs	r0, PSP
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	4b15      	ldr	r3, [pc, #84]	@ (8008420 <pxCurrentTCBConst>)
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	f01e 0f10 	tst.w	lr, #16
 80083d0:	bf08      	it	eq
 80083d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083da:	6010      	str	r0, [r2, #0]
 80083dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80083e4:	f380 8811 	msr	BASEPRI, r0
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f001 fd5c 	bl	8009eac <vTaskSwitchContext>
 80083f4:	f04f 0000 	mov.w	r0, #0
 80083f8:	f380 8811 	msr	BASEPRI, r0
 80083fc:	bc09      	pop	{r0, r3}
 80083fe:	6819      	ldr	r1, [r3, #0]
 8008400:	6808      	ldr	r0, [r1, #0]
 8008402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008406:	f01e 0f10 	tst.w	lr, #16
 800840a:	bf08      	it	eq
 800840c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008410:	f380 8809 	msr	PSP, r0
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	f3af 8000 	nop.w

08008420 <pxCurrentTCBConst>:
 8008420:	24004678 	.word	0x24004678
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop

08008428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	607b      	str	r3, [r7, #4]
}
 8008440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008442:	f001 fc79 	bl	8009d38 <xTaskIncrementTick>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800844c:	4b06      	ldr	r3, [pc, #24]	@ (8008468 <xPortSysTickHandler+0x40>)
 800844e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	2300      	movs	r3, #0
 8008456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f383 8811 	msr	BASEPRI, r3
}
 800845e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800846c:	b480      	push	{r7}
 800846e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008470:	4b0b      	ldr	r3, [pc, #44]	@ (80084a0 <vPortSetupTimerInterrupt+0x34>)
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008476:	4b0b      	ldr	r3, [pc, #44]	@ (80084a4 <vPortSetupTimerInterrupt+0x38>)
 8008478:	2200      	movs	r2, #0
 800847a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800847c:	4b0a      	ldr	r3, [pc, #40]	@ (80084a8 <vPortSetupTimerInterrupt+0x3c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a0a      	ldr	r2, [pc, #40]	@ (80084ac <vPortSetupTimerInterrupt+0x40>)
 8008482:	fba2 2303 	umull	r2, r3, r2, r3
 8008486:	099b      	lsrs	r3, r3, #6
 8008488:	4a09      	ldr	r2, [pc, #36]	@ (80084b0 <vPortSetupTimerInterrupt+0x44>)
 800848a:	3b01      	subs	r3, #1
 800848c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800848e:	4b04      	ldr	r3, [pc, #16]	@ (80084a0 <vPortSetupTimerInterrupt+0x34>)
 8008490:	2207      	movs	r2, #7
 8008492:	601a      	str	r2, [r3, #0]
}
 8008494:	bf00      	nop
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	e000e010 	.word	0xe000e010
 80084a4:	e000e018 	.word	0xe000e018
 80084a8:	24000000 	.word	0x24000000
 80084ac:	10624dd3 	.word	0x10624dd3
 80084b0:	e000e014 	.word	0xe000e014

080084b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80084c4 <vPortEnableVFP+0x10>
 80084b8:	6801      	ldr	r1, [r0, #0]
 80084ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80084be:	6001      	str	r1, [r0, #0]
 80084c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084c2:	bf00      	nop
 80084c4:	e000ed88 	.word	0xe000ed88

080084c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084ce:	f3ef 8305 	mrs	r3, IPSR
 80084d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b0f      	cmp	r3, #15
 80084d8:	d915      	bls.n	8008506 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084da:	4a18      	ldr	r2, [pc, #96]	@ (800853c <vPortValidateInterruptPriority+0x74>)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80084e4:	4b16      	ldr	r3, [pc, #88]	@ (8008540 <vPortValidateInterruptPriority+0x78>)
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	7afa      	ldrb	r2, [r7, #11]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d20b      	bcs.n	8008506 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	607b      	str	r3, [r7, #4]
}
 8008500:	bf00      	nop
 8008502:	bf00      	nop
 8008504:	e7fd      	b.n	8008502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008506:	4b0f      	ldr	r3, [pc, #60]	@ (8008544 <vPortValidateInterruptPriority+0x7c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800850e:	4b0e      	ldr	r3, [pc, #56]	@ (8008548 <vPortValidateInterruptPriority+0x80>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	429a      	cmp	r2, r3
 8008514:	d90b      	bls.n	800852e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	603b      	str	r3, [r7, #0]
}
 8008528:	bf00      	nop
 800852a:	bf00      	nop
 800852c:	e7fd      	b.n	800852a <vPortValidateInterruptPriority+0x62>
	}
 800852e:	bf00      	nop
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	e000e3f0 	.word	0xe000e3f0
 8008540:	24004630 	.word	0x24004630
 8008544:	e000ed0c 	.word	0xe000ed0c
 8008548:	24004634 	.word	0x24004634

0800854c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10b      	bne.n	8008578 <xQueueGenericReset+0x2c>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	60bb      	str	r3, [r7, #8]
}
 8008572:	bf00      	nop
 8008574:	bf00      	nop
 8008576:	e7fd      	b.n	8008574 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008578:	f7ff fec6 	bl	8008308 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008584:	68f9      	ldr	r1, [r7, #12]
 8008586:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008588:	fb01 f303 	mul.w	r3, r1, r3
 800858c:	441a      	add	r2, r3
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a8:	3b01      	subs	r3, #1
 80085aa:	68f9      	ldr	r1, [r7, #12]
 80085ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085ae:	fb01 f303 	mul.w	r3, r1, r3
 80085b2:	441a      	add	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	22ff      	movs	r2, #255	@ 0xff
 80085bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	22ff      	movs	r2, #255	@ 0xff
 80085c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d114      	bne.n	80085f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d01a      	beq.n	800860c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3310      	adds	r3, #16
 80085da:	4618      	mov	r0, r3
 80085dc:	f001 fd16 	bl	800a00c <xTaskRemoveFromEventList>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d012      	beq.n	800860c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085e6:	4b0d      	ldr	r3, [pc, #52]	@ (800861c <xQueueGenericReset+0xd0>)
 80085e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	e009      	b.n	800860c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	3310      	adds	r3, #16
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7ff fc9f 	bl	8007f40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3324      	adds	r3, #36	@ 0x24
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff fc9a 	bl	8007f40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800860c:	f7ff feae 	bl	800836c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008610:	2301      	movs	r3, #1
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	e000ed04 	.word	0xe000ed04

08008620 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08e      	sub	sp, #56	@ 0x38
 8008624:	af02      	add	r7, sp, #8
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10b      	bne.n	800864c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008646:	bf00      	nop
 8008648:	bf00      	nop
 800864a:	e7fd      	b.n	8008648 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10b      	bne.n	800866a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop
 8008668:	e7fd      	b.n	8008666 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <xQueueGenericCreateStatic+0x56>
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <xQueueGenericCreateStatic+0x5a>
 8008676:	2301      	movs	r3, #1
 8008678:	e000      	b.n	800867c <xQueueGenericCreateStatic+0x5c>
 800867a:	2300      	movs	r3, #0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10b      	bne.n	8008698 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	623b      	str	r3, [r7, #32]
}
 8008692:	bf00      	nop
 8008694:	bf00      	nop
 8008696:	e7fd      	b.n	8008694 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d102      	bne.n	80086a4 <xQueueGenericCreateStatic+0x84>
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <xQueueGenericCreateStatic+0x88>
 80086a4:	2301      	movs	r3, #1
 80086a6:	e000      	b.n	80086aa <xQueueGenericCreateStatic+0x8a>
 80086a8:	2300      	movs	r3, #0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10b      	bne.n	80086c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	61fb      	str	r3, [r7, #28]
}
 80086c0:	bf00      	nop
 80086c2:	bf00      	nop
 80086c4:	e7fd      	b.n	80086c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086c6:	2350      	movs	r3, #80	@ 0x50
 80086c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	2b50      	cmp	r3, #80	@ 0x50
 80086ce:	d00b      	beq.n	80086e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	61bb      	str	r3, [r7, #24]
}
 80086e2:	bf00      	nop
 80086e4:	bf00      	nop
 80086e6:	e7fd      	b.n	80086e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80086e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80086ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00d      	beq.n	8008710 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008702:	9300      	str	r3, [sp, #0]
 8008704:	4613      	mov	r3, r2
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	68b9      	ldr	r1, [r7, #8]
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f000 f840 	bl	8008790 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008712:	4618      	mov	r0, r3
 8008714:	3730      	adds	r7, #48	@ 0x30
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800871a:	b580      	push	{r7, lr}
 800871c:	b08a      	sub	sp, #40	@ 0x28
 800871e:	af02      	add	r7, sp, #8
 8008720:	60f8      	str	r0, [r7, #12]
 8008722:	60b9      	str	r1, [r7, #8]
 8008724:	4613      	mov	r3, r2
 8008726:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10b      	bne.n	8008746 <xQueueGenericCreate+0x2c>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	613b      	str	r3, [r7, #16]
}
 8008740:	bf00      	nop
 8008742:	bf00      	nop
 8008744:	e7fd      	b.n	8008742 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	fb02 f303 	mul.w	r3, r2, r3
 800874e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	3350      	adds	r3, #80	@ 0x50
 8008754:	4618      	mov	r0, r3
 8008756:	f7ff fa05 	bl	8007b64 <pvPortMalloc>
 800875a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d011      	beq.n	8008786 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	3350      	adds	r3, #80	@ 0x50
 800876a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	2200      	movs	r2, #0
 8008770:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008774:	79fa      	ldrb	r2, [r7, #7]
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	4613      	mov	r3, r2
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	68b9      	ldr	r1, [r7, #8]
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 f805 	bl	8008790 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008786:	69bb      	ldr	r3, [r7, #24]
	}
 8008788:	4618      	mov	r0, r3
 800878a:	3720      	adds	r7, #32
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
 800879c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d103      	bne.n	80087ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	69ba      	ldr	r2, [r7, #24]
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	e002      	b.n	80087b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087be:	2101      	movs	r1, #1
 80087c0:	69b8      	ldr	r0, [r7, #24]
 80087c2:	f7ff fec3 	bl	800854c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	78fa      	ldrb	r2, [r7, #3]
 80087ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087ce:	bf00      	nop
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b082      	sub	sp, #8
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00e      	beq.n	8008802 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80087f6:	2300      	movs	r3, #0
 80087f8:	2200      	movs	r2, #0
 80087fa:	2100      	movs	r1, #0
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f911 	bl	8008a24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008802:	bf00      	nop
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800880a:	b580      	push	{r7, lr}
 800880c:	b086      	sub	sp, #24
 800880e:	af00      	add	r7, sp, #0
 8008810:	4603      	mov	r3, r0
 8008812:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008814:	2301      	movs	r3, #1
 8008816:	617b      	str	r3, [r7, #20]
 8008818:	2300      	movs	r3, #0
 800881a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800881c:	79fb      	ldrb	r3, [r7, #7]
 800881e:	461a      	mov	r2, r3
 8008820:	6939      	ldr	r1, [r7, #16]
 8008822:	6978      	ldr	r0, [r7, #20]
 8008824:	f7ff ff79 	bl	800871a <xQueueGenericCreate>
 8008828:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f7ff ffd3 	bl	80087d6 <prvInitialiseMutex>

		return xNewQueue;
 8008830:	68fb      	ldr	r3, [r7, #12]
	}
 8008832:	4618      	mov	r0, r3
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800883a:	b580      	push	{r7, lr}
 800883c:	b088      	sub	sp, #32
 800883e:	af02      	add	r7, sp, #8
 8008840:	4603      	mov	r3, r0
 8008842:	6039      	str	r1, [r7, #0]
 8008844:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008846:	2301      	movs	r3, #1
 8008848:	617b      	str	r3, [r7, #20]
 800884a:	2300      	movs	r3, #0
 800884c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800884e:	79fb      	ldrb	r3, [r7, #7]
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	2200      	movs	r2, #0
 8008856:	6939      	ldr	r1, [r7, #16]
 8008858:	6978      	ldr	r0, [r7, #20]
 800885a:	f7ff fee1 	bl	8008620 <xQueueGenericCreateStatic>
 800885e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f7ff ffb8 	bl	80087d6 <prvInitialiseMutex>

		return xNewQueue;
 8008866:	68fb      	ldr	r3, [r7, #12]
	}
 8008868:	4618      	mov	r0, r3
 800886a:	3718      	adds	r7, #24
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008870:	b590      	push	{r4, r7, lr}
 8008872:	b087      	sub	sp, #28
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10b      	bne.n	800889a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8008882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008886:	f383 8811 	msr	BASEPRI, r3
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	60fb      	str	r3, [r7, #12]
}
 8008894:	bf00      	nop
 8008896:	bf00      	nop
 8008898:	e7fd      	b.n	8008896 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	689c      	ldr	r4, [r3, #8]
 800889e:	f001 fd75 	bl	800a38c <xTaskGetCurrentTaskHandle>
 80088a2:	4603      	mov	r3, r0
 80088a4:	429c      	cmp	r4, r3
 80088a6:	d111      	bne.n	80088cc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	1e5a      	subs	r2, r3, #1
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d105      	bne.n	80088c6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80088ba:	2300      	movs	r3, #0
 80088bc:	2200      	movs	r2, #0
 80088be:	2100      	movs	r1, #0
 80088c0:	6938      	ldr	r0, [r7, #16]
 80088c2:	f000 f8af 	bl	8008a24 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80088c6:	2301      	movs	r3, #1
 80088c8:	617b      	str	r3, [r7, #20]
 80088ca:	e001      	b.n	80088d0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80088cc:	2300      	movs	r3, #0
 80088ce:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80088d0:	697b      	ldr	r3, [r7, #20]
	}
 80088d2:	4618      	mov	r0, r3
 80088d4:	371c      	adds	r7, #28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd90      	pop	{r4, r7, pc}

080088da <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80088da:	b590      	push	{r4, r7, lr}
 80088dc:	b087      	sub	sp, #28
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10b      	bne.n	8008906 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	60fb      	str	r3, [r7, #12]
}
 8008900:	bf00      	nop
 8008902:	bf00      	nop
 8008904:	e7fd      	b.n	8008902 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	689c      	ldr	r4, [r3, #8]
 800890a:	f001 fd3f 	bl	800a38c <xTaskGetCurrentTaskHandle>
 800890e:	4603      	mov	r3, r0
 8008910:	429c      	cmp	r4, r3
 8008912:	d107      	bne.n	8008924 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800891e:	2301      	movs	r3, #1
 8008920:	617b      	str	r3, [r7, #20]
 8008922:	e00c      	b.n	800893e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	6938      	ldr	r0, [r7, #16]
 8008928:	f000 fb8e 	bl	8009048 <xQueueSemaphoreTake>
 800892c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d004      	beq.n	800893e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800893e:	697b      	ldr	r3, [r7, #20]
	}
 8008940:	4618      	mov	r0, r3
 8008942:	371c      	adds	r7, #28
 8008944:	46bd      	mov	sp, r7
 8008946:	bd90      	pop	{r4, r7, pc}

08008948 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008948:	b580      	push	{r7, lr}
 800894a:	b08a      	sub	sp, #40	@ 0x28
 800894c:	af02      	add	r7, sp, #8
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10b      	bne.n	8008972 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	61bb      	str	r3, [r7, #24]
}
 800896c:	bf00      	nop
 800896e:	bf00      	nop
 8008970:	e7fd      	b.n	800896e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	429a      	cmp	r2, r3
 8008978:	d90b      	bls.n	8008992 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800897a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800897e:	f383 8811 	msr	BASEPRI, r3
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	617b      	str	r3, [r7, #20]
}
 800898c:	bf00      	nop
 800898e:	bf00      	nop
 8008990:	e7fd      	b.n	800898e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008992:	2302      	movs	r3, #2
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	2100      	movs	r1, #0
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f7ff fe3f 	bl	8008620 <xQueueGenericCreateStatic>
 80089a2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d002      	beq.n	80089b0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80089b0:	69fb      	ldr	r3, [r7, #28]
	}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3720      	adds	r7, #32
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b086      	sub	sp, #24
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d10b      	bne.n	80089e2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80089ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ce:	f383 8811 	msr	BASEPRI, r3
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	613b      	str	r3, [r7, #16]
}
 80089dc:	bf00      	nop
 80089de:	bf00      	nop
 80089e0:	e7fd      	b.n	80089de <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d90b      	bls.n	8008a02 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	60fb      	str	r3, [r7, #12]
}
 80089fc:	bf00      	nop
 80089fe:	bf00      	nop
 8008a00:	e7fd      	b.n	80089fe <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008a02:	2202      	movs	r2, #2
 8008a04:	2100      	movs	r1, #0
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff fe87 	bl	800871a <xQueueGenericCreate>
 8008a0c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d002      	beq.n	8008a1a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008a1a:	697b      	ldr	r3, [r7, #20]
	}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3718      	adds	r7, #24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b08e      	sub	sp, #56	@ 0x38
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a32:	2300      	movs	r3, #0
 8008a34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10b      	bne.n	8008a58 <xQueueGenericSend+0x34>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a52:	bf00      	nop
 8008a54:	bf00      	nop
 8008a56:	e7fd      	b.n	8008a54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d103      	bne.n	8008a66 <xQueueGenericSend+0x42>
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <xQueueGenericSend+0x46>
 8008a66:	2301      	movs	r3, #1
 8008a68:	e000      	b.n	8008a6c <xQueueGenericSend+0x48>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10b      	bne.n	8008a88 <xQueueGenericSend+0x64>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	e7fd      	b.n	8008a84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d103      	bne.n	8008a96 <xQueueGenericSend+0x72>
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d101      	bne.n	8008a9a <xQueueGenericSend+0x76>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e000      	b.n	8008a9c <xQueueGenericSend+0x78>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10b      	bne.n	8008ab8 <xQueueGenericSend+0x94>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	623b      	str	r3, [r7, #32]
}
 8008ab2:	bf00      	nop
 8008ab4:	bf00      	nop
 8008ab6:	e7fd      	b.n	8008ab4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ab8:	f001 fc78 	bl	800a3ac <xTaskGetSchedulerState>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d102      	bne.n	8008ac8 <xQueueGenericSend+0xa4>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <xQueueGenericSend+0xa8>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e000      	b.n	8008ace <xQueueGenericSend+0xaa>
 8008acc:	2300      	movs	r3, #0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10b      	bne.n	8008aea <xQueueGenericSend+0xc6>
	__asm volatile
 8008ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	61fb      	str	r3, [r7, #28]
}
 8008ae4:	bf00      	nop
 8008ae6:	bf00      	nop
 8008ae8:	e7fd      	b.n	8008ae6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008aea:	f7ff fc0d 	bl	8008308 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d302      	bcc.n	8008b00 <xQueueGenericSend+0xdc>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d129      	bne.n	8008b54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	68b9      	ldr	r1, [r7, #8]
 8008b04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b06:	f000 fc6d 	bl	80093e4 <prvCopyDataToQueue>
 8008b0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d010      	beq.n	8008b36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b16:	3324      	adds	r3, #36	@ 0x24
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f001 fa77 	bl	800a00c <xTaskRemoveFromEventList>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d013      	beq.n	8008b4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008b24:	4b3f      	ldr	r3, [pc, #252]	@ (8008c24 <xQueueGenericSend+0x200>)
 8008b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b2a:	601a      	str	r2, [r3, #0]
 8008b2c:	f3bf 8f4f 	dsb	sy
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	e00a      	b.n	8008b4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d007      	beq.n	8008b4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008b3c:	4b39      	ldr	r3, [pc, #228]	@ (8008c24 <xQueueGenericSend+0x200>)
 8008b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008b4c:	f7ff fc0e 	bl	800836c <vPortExitCritical>
				return pdPASS;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e063      	b.n	8008c1c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d103      	bne.n	8008b62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b5a:	f7ff fc07 	bl	800836c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e05c      	b.n	8008c1c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d106      	bne.n	8008b76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b68:	f107 0314 	add.w	r3, r7, #20
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f001 fab1 	bl	800a0d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b72:	2301      	movs	r3, #1
 8008b74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b76:	f7ff fbf9 	bl	800836c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b7a:	f001 f80f 	bl	8009b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b7e:	f7ff fbc3 	bl	8008308 <vPortEnterCritical>
 8008b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b88:	b25b      	sxtb	r3, r3
 8008b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8e:	d103      	bne.n	8008b98 <xQueueGenericSend+0x174>
 8008b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b9e:	b25b      	sxtb	r3, r3
 8008ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba4:	d103      	bne.n	8008bae <xQueueGenericSend+0x18a>
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bae:	f7ff fbdd 	bl	800836c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bb2:	1d3a      	adds	r2, r7, #4
 8008bb4:	f107 0314 	add.w	r3, r7, #20
 8008bb8:	4611      	mov	r1, r2
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f001 faa0 	bl	800a100 <xTaskCheckForTimeOut>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d124      	bne.n	8008c10 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008bc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bc8:	f000 fd04 	bl	80095d4 <prvIsQueueFull>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d018      	beq.n	8008c04 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd4:	3310      	adds	r3, #16
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	4611      	mov	r1, r2
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f001 f9c4 	bl	8009f68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008be0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008be2:	f000 fc8f 	bl	8009504 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008be6:	f000 ffe7 	bl	8009bb8 <xTaskResumeAll>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f47f af7c 	bne.w	8008aea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8008c24 <xQueueGenericSend+0x200>)
 8008bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	e772      	b.n	8008aea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008c04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c06:	f000 fc7d 	bl	8009504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c0a:	f000 ffd5 	bl	8009bb8 <xTaskResumeAll>
 8008c0e:	e76c      	b.n	8008aea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c12:	f000 fc77 	bl	8009504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c16:	f000 ffcf 	bl	8009bb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3738      	adds	r7, #56	@ 0x38
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	e000ed04 	.word	0xe000ed04

08008c28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b090      	sub	sp, #64	@ 0x40
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
 8008c34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10b      	bne.n	8008c58 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008c52:	bf00      	nop
 8008c54:	bf00      	nop
 8008c56:	e7fd      	b.n	8008c54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d103      	bne.n	8008c66 <xQueueGenericSendFromISR+0x3e>
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <xQueueGenericSendFromISR+0x42>
 8008c66:	2301      	movs	r3, #1
 8008c68:	e000      	b.n	8008c6c <xQueueGenericSendFromISR+0x44>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10b      	bne.n	8008c88 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c82:	bf00      	nop
 8008c84:	bf00      	nop
 8008c86:	e7fd      	b.n	8008c84 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d103      	bne.n	8008c96 <xQueueGenericSendFromISR+0x6e>
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d101      	bne.n	8008c9a <xQueueGenericSendFromISR+0x72>
 8008c96:	2301      	movs	r3, #1
 8008c98:	e000      	b.n	8008c9c <xQueueGenericSendFromISR+0x74>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10b      	bne.n	8008cb8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	623b      	str	r3, [r7, #32]
}
 8008cb2:	bf00      	nop
 8008cb4:	bf00      	nop
 8008cb6:	e7fd      	b.n	8008cb4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cb8:	f7ff fc06 	bl	80084c8 <vPortValidateInterruptPriority>
	__asm volatile
 8008cbc:	f3ef 8211 	mrs	r2, BASEPRI
 8008cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	61fa      	str	r2, [r7, #28]
 8008cd2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008cd4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cd6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d302      	bcc.n	8008cea <xQueueGenericSendFromISR+0xc2>
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d12f      	bne.n	8008d4a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cf0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	68b9      	ldr	r1, [r7, #8]
 8008cfe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008d00:	f000 fb70 	bl	80093e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d04:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0c:	d112      	bne.n	8008d34 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d016      	beq.n	8008d44 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d18:	3324      	adds	r3, #36	@ 0x24
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f001 f976 	bl	800a00c <xTaskRemoveFromEventList>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00e      	beq.n	8008d44 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00b      	beq.n	8008d44 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	e007      	b.n	8008d44 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008d38:	3301      	adds	r3, #1
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	b25a      	sxtb	r2, r3
 8008d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008d44:	2301      	movs	r3, #1
 8008d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008d48:	e001      	b.n	8008d4e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d50:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f383 8811 	msr	BASEPRI, r3
}
 8008d58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3740      	adds	r7, #64	@ 0x40
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b08e      	sub	sp, #56	@ 0x38
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10b      	bne.n	8008d90 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	623b      	str	r3, [r7, #32]
}
 8008d8a:	bf00      	nop
 8008d8c:	bf00      	nop
 8008d8e:	e7fd      	b.n	8008d8c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00b      	beq.n	8008db0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	61fb      	str	r3, [r7, #28]
}
 8008daa:	bf00      	nop
 8008dac:	bf00      	nop
 8008dae:	e7fd      	b.n	8008dac <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d103      	bne.n	8008dc0 <xQueueGiveFromISR+0x5c>
 8008db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d101      	bne.n	8008dc4 <xQueueGiveFromISR+0x60>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e000      	b.n	8008dc6 <xQueueGiveFromISR+0x62>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10b      	bne.n	8008de2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dce:	f383 8811 	msr	BASEPRI, r3
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	61bb      	str	r3, [r7, #24]
}
 8008ddc:	bf00      	nop
 8008dde:	bf00      	nop
 8008de0:	e7fd      	b.n	8008dde <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008de2:	f7ff fb71 	bl	80084c8 <vPortValidateInterruptPriority>
	__asm volatile
 8008de6:	f3ef 8211 	mrs	r2, BASEPRI
 8008dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	617a      	str	r2, [r7, #20]
 8008dfc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008dfe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e06:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d22b      	bcs.n	8008e6a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1e:	1c5a      	adds	r2, r3, #1
 8008e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e22:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e24:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2c:	d112      	bne.n	8008e54 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d016      	beq.n	8008e64 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e38:	3324      	adds	r3, #36	@ 0x24
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f001 f8e6 	bl	800a00c <xTaskRemoveFromEventList>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00e      	beq.n	8008e64 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00b      	beq.n	8008e64 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	601a      	str	r2, [r3, #0]
 8008e52:	e007      	b.n	8008e64 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e58:	3301      	adds	r3, #1
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	b25a      	sxtb	r2, r3
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008e64:	2301      	movs	r3, #1
 8008e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e68:	e001      	b.n	8008e6e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e70:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f383 8811 	msr	BASEPRI, r3
}
 8008e78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3738      	adds	r7, #56	@ 0x38
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b08c      	sub	sp, #48	@ 0x30
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e90:	2300      	movs	r3, #0
 8008e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10b      	bne.n	8008eb6 <xQueueReceive+0x32>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	623b      	str	r3, [r7, #32]
}
 8008eb0:	bf00      	nop
 8008eb2:	bf00      	nop
 8008eb4:	e7fd      	b.n	8008eb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d103      	bne.n	8008ec4 <xQueueReceive+0x40>
 8008ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d101      	bne.n	8008ec8 <xQueueReceive+0x44>
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e000      	b.n	8008eca <xQueueReceive+0x46>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10b      	bne.n	8008ee6 <xQueueReceive+0x62>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	61fb      	str	r3, [r7, #28]
}
 8008ee0:	bf00      	nop
 8008ee2:	bf00      	nop
 8008ee4:	e7fd      	b.n	8008ee2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ee6:	f001 fa61 	bl	800a3ac <xTaskGetSchedulerState>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d102      	bne.n	8008ef6 <xQueueReceive+0x72>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <xQueueReceive+0x76>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e000      	b.n	8008efc <xQueueReceive+0x78>
 8008efa:	2300      	movs	r3, #0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10b      	bne.n	8008f18 <xQueueReceive+0x94>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	61bb      	str	r3, [r7, #24]
}
 8008f12:	bf00      	nop
 8008f14:	bf00      	nop
 8008f16:	e7fd      	b.n	8008f14 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f18:	f7ff f9f6 	bl	8008308 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f20:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d01f      	beq.n	8008f68 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f28:	68b9      	ldr	r1, [r7, #8]
 8008f2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f2c:	f000 fac4 	bl	80094b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f32:	1e5a      	subs	r2, r3, #1
 8008f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f36:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00f      	beq.n	8008f60 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f42:	3310      	adds	r3, #16
 8008f44:	4618      	mov	r0, r3
 8008f46:	f001 f861 	bl	800a00c <xTaskRemoveFromEventList>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d007      	beq.n	8008f60 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f50:	4b3c      	ldr	r3, [pc, #240]	@ (8009044 <xQueueReceive+0x1c0>)
 8008f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f60:	f7ff fa04 	bl	800836c <vPortExitCritical>
				return pdPASS;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e069      	b.n	800903c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d103      	bne.n	8008f76 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f6e:	f7ff f9fd 	bl	800836c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f72:	2300      	movs	r3, #0
 8008f74:	e062      	b.n	800903c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d106      	bne.n	8008f8a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f7c:	f107 0310 	add.w	r3, r7, #16
 8008f80:	4618      	mov	r0, r3
 8008f82:	f001 f8a7 	bl	800a0d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f86:	2301      	movs	r3, #1
 8008f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f8a:	f7ff f9ef 	bl	800836c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f8e:	f000 fe05 	bl	8009b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f92:	f7ff f9b9 	bl	8008308 <vPortEnterCritical>
 8008f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f9c:	b25b      	sxtb	r3, r3
 8008f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa2:	d103      	bne.n	8008fac <xQueueReceive+0x128>
 8008fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fb2:	b25b      	sxtb	r3, r3
 8008fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb8:	d103      	bne.n	8008fc2 <xQueueReceive+0x13e>
 8008fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fc2:	f7ff f9d3 	bl	800836c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fc6:	1d3a      	adds	r2, r7, #4
 8008fc8:	f107 0310 	add.w	r3, r7, #16
 8008fcc:	4611      	mov	r1, r2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f001 f896 	bl	800a100 <xTaskCheckForTimeOut>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d123      	bne.n	8009022 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fdc:	f000 fae4 	bl	80095a8 <prvIsQueueEmpty>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d017      	beq.n	8009016 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe8:	3324      	adds	r3, #36	@ 0x24
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	4611      	mov	r1, r2
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 ffba 	bl	8009f68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ff4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ff6:	f000 fa85 	bl	8009504 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ffa:	f000 fddd 	bl	8009bb8 <xTaskResumeAll>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d189      	bne.n	8008f18 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009004:	4b0f      	ldr	r3, [pc, #60]	@ (8009044 <xQueueReceive+0x1c0>)
 8009006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	e780      	b.n	8008f18 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009016:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009018:	f000 fa74 	bl	8009504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800901c:	f000 fdcc 	bl	8009bb8 <xTaskResumeAll>
 8009020:	e77a      	b.n	8008f18 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009022:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009024:	f000 fa6e 	bl	8009504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009028:	f000 fdc6 	bl	8009bb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800902c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800902e:	f000 fabb 	bl	80095a8 <prvIsQueueEmpty>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	f43f af6f 	beq.w	8008f18 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800903a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800903c:	4618      	mov	r0, r3
 800903e:	3730      	adds	r7, #48	@ 0x30
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	e000ed04 	.word	0xe000ed04

08009048 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b08e      	sub	sp, #56	@ 0x38
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009052:	2300      	movs	r3, #0
 8009054:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800905a:	2300      	movs	r3, #0
 800905c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800905e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009060:	2b00      	cmp	r3, #0
 8009062:	d10b      	bne.n	800907c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009068:	f383 8811 	msr	BASEPRI, r3
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	623b      	str	r3, [r7, #32]
}
 8009076:	bf00      	nop
 8009078:	bf00      	nop
 800907a:	e7fd      	b.n	8009078 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800907c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800907e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00b      	beq.n	800909c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	61fb      	str	r3, [r7, #28]
}
 8009096:	bf00      	nop
 8009098:	bf00      	nop
 800909a:	e7fd      	b.n	8009098 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800909c:	f001 f986 	bl	800a3ac <xTaskGetSchedulerState>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d102      	bne.n	80090ac <xQueueSemaphoreTake+0x64>
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <xQueueSemaphoreTake+0x68>
 80090ac:	2301      	movs	r3, #1
 80090ae:	e000      	b.n	80090b2 <xQueueSemaphoreTake+0x6a>
 80090b0:	2300      	movs	r3, #0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10b      	bne.n	80090ce <xQueueSemaphoreTake+0x86>
	__asm volatile
 80090b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	61bb      	str	r3, [r7, #24]
}
 80090c8:	bf00      	nop
 80090ca:	bf00      	nop
 80090cc:	e7fd      	b.n	80090ca <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090ce:	f7ff f91b 	bl	8008308 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80090d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80090d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d024      	beq.n	8009128 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80090de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e0:	1e5a      	subs	r2, r3, #1
 80090e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d104      	bne.n	80090f8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80090ee:	f001 fad7 	bl	800a6a0 <pvTaskIncrementMutexHeldCount>
 80090f2:	4602      	mov	r2, r0
 80090f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00f      	beq.n	8009120 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009102:	3310      	adds	r3, #16
 8009104:	4618      	mov	r0, r3
 8009106:	f000 ff81 	bl	800a00c <xTaskRemoveFromEventList>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d007      	beq.n	8009120 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009110:	4b54      	ldr	r3, [pc, #336]	@ (8009264 <xQueueSemaphoreTake+0x21c>)
 8009112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009120:	f7ff f924 	bl	800836c <vPortExitCritical>
				return pdPASS;
 8009124:	2301      	movs	r3, #1
 8009126:	e098      	b.n	800925a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d112      	bne.n	8009154 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800912e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00b      	beq.n	800914c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	617b      	str	r3, [r7, #20]
}
 8009146:	bf00      	nop
 8009148:	bf00      	nop
 800914a:	e7fd      	b.n	8009148 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800914c:	f7ff f90e 	bl	800836c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009150:	2300      	movs	r3, #0
 8009152:	e082      	b.n	800925a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009156:	2b00      	cmp	r3, #0
 8009158:	d106      	bne.n	8009168 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800915a:	f107 030c 	add.w	r3, r7, #12
 800915e:	4618      	mov	r0, r3
 8009160:	f000 ffb8 	bl	800a0d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009164:	2301      	movs	r3, #1
 8009166:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009168:	f7ff f900 	bl	800836c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800916c:	f000 fd16 	bl	8009b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009170:	f7ff f8ca 	bl	8008308 <vPortEnterCritical>
 8009174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009176:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800917a:	b25b      	sxtb	r3, r3
 800917c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009180:	d103      	bne.n	800918a <xQueueSemaphoreTake+0x142>
 8009182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009184:	2200      	movs	r2, #0
 8009186:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800918a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800918c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009190:	b25b      	sxtb	r3, r3
 8009192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009196:	d103      	bne.n	80091a0 <xQueueSemaphoreTake+0x158>
 8009198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919a:	2200      	movs	r2, #0
 800919c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091a0:	f7ff f8e4 	bl	800836c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091a4:	463a      	mov	r2, r7
 80091a6:	f107 030c 	add.w	r3, r7, #12
 80091aa:	4611      	mov	r1, r2
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 ffa7 	bl	800a100 <xTaskCheckForTimeOut>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d132      	bne.n	800921e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80091ba:	f000 f9f5 	bl	80095a8 <prvIsQueueEmpty>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d026      	beq.n	8009212 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d109      	bne.n	80091e0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80091cc:	f7ff f89c 	bl	8008308 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80091d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f001 f907 	bl	800a3e8 <xTaskPriorityInherit>
 80091da:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80091dc:	f7ff f8c6 	bl	800836c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e2:	3324      	adds	r3, #36	@ 0x24
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	4611      	mov	r1, r2
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 febd 	bl	8009f68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80091f0:	f000 f988 	bl	8009504 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80091f4:	f000 fce0 	bl	8009bb8 <xTaskResumeAll>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f47f af67 	bne.w	80090ce <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009200:	4b18      	ldr	r3, [pc, #96]	@ (8009264 <xQueueSemaphoreTake+0x21c>)
 8009202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009206:	601a      	str	r2, [r3, #0]
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	e75d      	b.n	80090ce <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009212:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009214:	f000 f976 	bl	8009504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009218:	f000 fcce 	bl	8009bb8 <xTaskResumeAll>
 800921c:	e757      	b.n	80090ce <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800921e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009220:	f000 f970 	bl	8009504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009224:	f000 fcc8 	bl	8009bb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009228:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800922a:	f000 f9bd 	bl	80095a8 <prvIsQueueEmpty>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	f43f af4c 	beq.w	80090ce <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00d      	beq.n	8009258 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800923c:	f7ff f864 	bl	8008308 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009240:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009242:	f000 f8b7 	bl	80093b4 <prvGetDisinheritPriorityAfterTimeout>
 8009246:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800924e:	4618      	mov	r0, r3
 8009250:	f001 f9a2 	bl	800a598 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009254:	f7ff f88a 	bl	800836c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009258:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800925a:	4618      	mov	r0, r3
 800925c:	3738      	adds	r7, #56	@ 0x38
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	e000ed04 	.word	0xe000ed04

08009268 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b08e      	sub	sp, #56	@ 0x38
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10b      	bne.n	8009296 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	623b      	str	r3, [r7, #32]
}
 8009290:	bf00      	nop
 8009292:	bf00      	nop
 8009294:	e7fd      	b.n	8009292 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d103      	bne.n	80092a4 <xQueueReceiveFromISR+0x3c>
 800929c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d101      	bne.n	80092a8 <xQueueReceiveFromISR+0x40>
 80092a4:	2301      	movs	r3, #1
 80092a6:	e000      	b.n	80092aa <xQueueReceiveFromISR+0x42>
 80092a8:	2300      	movs	r3, #0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10b      	bne.n	80092c6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	61fb      	str	r3, [r7, #28]
}
 80092c0:	bf00      	nop
 80092c2:	bf00      	nop
 80092c4:	e7fd      	b.n	80092c2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092c6:	f7ff f8ff 	bl	80084c8 <vPortValidateInterruptPriority>
	__asm volatile
 80092ca:	f3ef 8211 	mrs	r2, BASEPRI
 80092ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	61ba      	str	r2, [r7, #24]
 80092e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80092e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d02f      	beq.n	8009352 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80092f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092fc:	68b9      	ldr	r1, [r7, #8]
 80092fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009300:	f000 f8da 	bl	80094b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009306:	1e5a      	subs	r2, r3, #1
 8009308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800930c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009314:	d112      	bne.n	800933c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d016      	beq.n	800934c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800931e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009320:	3310      	adds	r3, #16
 8009322:	4618      	mov	r0, r3
 8009324:	f000 fe72 	bl	800a00c <xTaskRemoveFromEventList>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00e      	beq.n	800934c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00b      	beq.n	800934c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	e007      	b.n	800934c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800933c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009340:	3301      	adds	r3, #1
 8009342:	b2db      	uxtb	r3, r3
 8009344:	b25a      	sxtb	r2, r3
 8009346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800934c:	2301      	movs	r3, #1
 800934e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009350:	e001      	b.n	8009356 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009352:	2300      	movs	r3, #0
 8009354:	637b      	str	r3, [r7, #52]	@ 0x34
 8009356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009358:	613b      	str	r3, [r7, #16]
	__asm volatile
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	f383 8811 	msr	BASEPRI, r3
}
 8009360:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009364:	4618      	mov	r0, r3
 8009366:	3738      	adds	r7, #56	@ 0x38
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10b      	bne.n	8009396 <vQueueDelete+0x2a>
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	60bb      	str	r3, [r7, #8]
}
 8009390:	bf00      	nop
 8009392:	bf00      	nop
 8009394:	e7fd      	b.n	8009392 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f000 f95e 	bl	8009658 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d102      	bne.n	80093ac <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f7fe fcaa 	bl	8007d00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80093ac:	bf00      	nop
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d006      	beq.n	80093d2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80093ce:	60fb      	str	r3, [r7, #12]
 80093d0:	e001      	b.n	80093d6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80093d2:	2300      	movs	r3, #0
 80093d4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80093d6:	68fb      	ldr	r3, [r7, #12]
	}
 80093d8:	4618      	mov	r0, r3
 80093da:	3714      	adds	r7, #20
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80093f0:	2300      	movs	r3, #0
 80093f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10d      	bne.n	800941e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d14d      	bne.n	80094a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	4618      	mov	r0, r3
 8009410:	f001 f852 	bl	800a4b8 <xTaskPriorityDisinherit>
 8009414:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	609a      	str	r2, [r3, #8]
 800941c:	e043      	b.n	80094a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d119      	bne.n	8009458 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6858      	ldr	r0, [r3, #4]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800942c:	461a      	mov	r2, r3
 800942e:	68b9      	ldr	r1, [r7, #8]
 8009430:	f00e fb4d 	bl	8017ace <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	685a      	ldr	r2, [r3, #4]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943c:	441a      	add	r2, r3
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	685a      	ldr	r2, [r3, #4]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	429a      	cmp	r2, r3
 800944c:	d32b      	bcc.n	80094a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	605a      	str	r2, [r3, #4]
 8009456:	e026      	b.n	80094a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	68d8      	ldr	r0, [r3, #12]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009460:	461a      	mov	r2, r3
 8009462:	68b9      	ldr	r1, [r7, #8]
 8009464:	f00e fb33 	bl	8017ace <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	68da      	ldr	r2, [r3, #12]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009470:	425b      	negs	r3, r3
 8009472:	441a      	add	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	68da      	ldr	r2, [r3, #12]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	429a      	cmp	r2, r3
 8009482:	d207      	bcs.n	8009494 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	689a      	ldr	r2, [r3, #8]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800948c:	425b      	negs	r3, r3
 800948e:	441a      	add	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b02      	cmp	r3, #2
 8009498:	d105      	bne.n	80094a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	3b01      	subs	r3, #1
 80094a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	1c5a      	adds	r2, r3, #1
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80094ae:	697b      	ldr	r3, [r7, #20]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3718      	adds	r7, #24
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d018      	beq.n	80094fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68da      	ldr	r2, [r3, #12]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094d2:	441a      	add	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68da      	ldr	r2, [r3, #12]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d303      	bcc.n	80094ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68d9      	ldr	r1, [r3, #12]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f4:	461a      	mov	r2, r3
 80094f6:	6838      	ldr	r0, [r7, #0]
 80094f8:	f00e fae9 	bl	8017ace <memcpy>
	}
}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800950c:	f7fe fefc 	bl	8008308 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009516:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009518:	e011      	b.n	800953e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800951e:	2b00      	cmp	r3, #0
 8009520:	d012      	beq.n	8009548 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	3324      	adds	r3, #36	@ 0x24
 8009526:	4618      	mov	r0, r3
 8009528:	f000 fd70 	bl	800a00c <xTaskRemoveFromEventList>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009532:	f000 fe49 	bl	800a1c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009536:	7bfb      	ldrb	r3, [r7, #15]
 8009538:	3b01      	subs	r3, #1
 800953a:	b2db      	uxtb	r3, r3
 800953c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800953e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009542:	2b00      	cmp	r3, #0
 8009544:	dce9      	bgt.n	800951a <prvUnlockQueue+0x16>
 8009546:	e000      	b.n	800954a <prvUnlockQueue+0x46>
					break;
 8009548:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	22ff      	movs	r2, #255	@ 0xff
 800954e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009552:	f7fe ff0b 	bl	800836c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009556:	f7fe fed7 	bl	8008308 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009560:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009562:	e011      	b.n	8009588 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d012      	beq.n	8009592 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	3310      	adds	r3, #16
 8009570:	4618      	mov	r0, r3
 8009572:	f000 fd4b 	bl	800a00c <xTaskRemoveFromEventList>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800957c:	f000 fe24 	bl	800a1c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009580:	7bbb      	ldrb	r3, [r7, #14]
 8009582:	3b01      	subs	r3, #1
 8009584:	b2db      	uxtb	r3, r3
 8009586:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800958c:	2b00      	cmp	r3, #0
 800958e:	dce9      	bgt.n	8009564 <prvUnlockQueue+0x60>
 8009590:	e000      	b.n	8009594 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009592:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	22ff      	movs	r2, #255	@ 0xff
 8009598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800959c:	f7fe fee6 	bl	800836c <vPortExitCritical>
}
 80095a0:	bf00      	nop
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095b0:	f7fe feaa 	bl	8008308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d102      	bne.n	80095c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80095bc:	2301      	movs	r3, #1
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	e001      	b.n	80095c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80095c2:	2300      	movs	r3, #0
 80095c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095c6:	f7fe fed1 	bl	800836c <vPortExitCritical>

	return xReturn;
 80095ca:	68fb      	ldr	r3, [r7, #12]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095dc:	f7fe fe94 	bl	8008308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d102      	bne.n	80095f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80095ec:	2301      	movs	r3, #1
 80095ee:	60fb      	str	r3, [r7, #12]
 80095f0:	e001      	b.n	80095f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80095f2:	2300      	movs	r3, #0
 80095f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095f6:	f7fe feb9 	bl	800836c <vPortExitCritical>

	return xReturn;
 80095fa:	68fb      	ldr	r3, [r7, #12]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800960e:	2300      	movs	r3, #0
 8009610:	60fb      	str	r3, [r7, #12]
 8009612:	e014      	b.n	800963e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009614:	4a0f      	ldr	r2, [pc, #60]	@ (8009654 <vQueueAddToRegistry+0x50>)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10b      	bne.n	8009638 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009620:	490c      	ldr	r1, [pc, #48]	@ (8009654 <vQueueAddToRegistry+0x50>)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800962a:	4a0a      	ldr	r2, [pc, #40]	@ (8009654 <vQueueAddToRegistry+0x50>)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	00db      	lsls	r3, r3, #3
 8009630:	4413      	add	r3, r2
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009636:	e006      	b.n	8009646 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	3301      	adds	r3, #1
 800963c:	60fb      	str	r3, [r7, #12]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2b07      	cmp	r3, #7
 8009642:	d9e7      	bls.n	8009614 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009644:	bf00      	nop
 8009646:	bf00      	nop
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	24004638 	.word	0x24004638

08009658 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009660:	2300      	movs	r3, #0
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	e016      	b.n	8009694 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009666:	4a10      	ldr	r2, [pc, #64]	@ (80096a8 <vQueueUnregisterQueue+0x50>)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	00db      	lsls	r3, r3, #3
 800966c:	4413      	add	r3, r2
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	429a      	cmp	r2, r3
 8009674:	d10b      	bne.n	800968e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009676:	4a0c      	ldr	r2, [pc, #48]	@ (80096a8 <vQueueUnregisterQueue+0x50>)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2100      	movs	r1, #0
 800967c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009680:	4a09      	ldr	r2, [pc, #36]	@ (80096a8 <vQueueUnregisterQueue+0x50>)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	00db      	lsls	r3, r3, #3
 8009686:	4413      	add	r3, r2
 8009688:	2200      	movs	r2, #0
 800968a:	605a      	str	r2, [r3, #4]
				break;
 800968c:	e006      	b.n	800969c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3301      	adds	r3, #1
 8009692:	60fb      	str	r3, [r7, #12]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b07      	cmp	r3, #7
 8009698:	d9e5      	bls.n	8009666 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800969a:	bf00      	nop
 800969c:	bf00      	nop
 800969e:	3714      	adds	r7, #20
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr
 80096a8:	24004638 	.word	0x24004638

080096ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80096bc:	f7fe fe24 	bl	8008308 <vPortEnterCritical>
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096c6:	b25b      	sxtb	r3, r3
 80096c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096cc:	d103      	bne.n	80096d6 <vQueueWaitForMessageRestricted+0x2a>
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096dc:	b25b      	sxtb	r3, r3
 80096de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e2:	d103      	bne.n	80096ec <vQueueWaitForMessageRestricted+0x40>
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096ec:	f7fe fe3e 	bl	800836c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d106      	bne.n	8009706 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	3324      	adds	r3, #36	@ 0x24
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	68b9      	ldr	r1, [r7, #8]
 8009700:	4618      	mov	r0, r3
 8009702:	f000 fc57 	bl	8009fb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009706:	6978      	ldr	r0, [r7, #20]
 8009708:	f7ff fefc 	bl	8009504 <prvUnlockQueue>
	}
 800970c:	bf00      	nop
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009714:	b580      	push	{r7, lr}
 8009716:	b08e      	sub	sp, #56	@ 0x38
 8009718:	af04      	add	r7, sp, #16
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
 8009720:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10b      	bne.n	8009740 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	623b      	str	r3, [r7, #32]
}
 800973a:	bf00      	nop
 800973c:	bf00      	nop
 800973e:	e7fd      	b.n	800973c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10b      	bne.n	800975e <xTaskCreateStatic+0x4a>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	61fb      	str	r3, [r7, #28]
}
 8009758:	bf00      	nop
 800975a:	bf00      	nop
 800975c:	e7fd      	b.n	800975a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800975e:	235c      	movs	r3, #92	@ 0x5c
 8009760:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	2b5c      	cmp	r3, #92	@ 0x5c
 8009766:	d00b      	beq.n	8009780 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	61bb      	str	r3, [r7, #24]
}
 800977a:	bf00      	nop
 800977c:	bf00      	nop
 800977e:	e7fd      	b.n	800977c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009780:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009784:	2b00      	cmp	r3, #0
 8009786:	d01e      	beq.n	80097c6 <xTaskCreateStatic+0xb2>
 8009788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800978a:	2b00      	cmp	r3, #0
 800978c:	d01b      	beq.n	80097c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800978e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009790:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009794:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009796:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979a:	2202      	movs	r2, #2
 800979c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80097a0:	2300      	movs	r3, #0
 80097a2:	9303      	str	r3, [sp, #12]
 80097a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a6:	9302      	str	r3, [sp, #8]
 80097a8:	f107 0314 	add.w	r3, r7, #20
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	68b9      	ldr	r1, [r7, #8]
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f000 f850 	bl	800985e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80097c0:	f000 f8de 	bl	8009980 <prvAddNewTaskToReadyList>
 80097c4:	e001      	b.n	80097ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80097c6:	2300      	movs	r3, #0
 80097c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80097ca:	697b      	ldr	r3, [r7, #20]
	}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3728      	adds	r7, #40	@ 0x28
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b08c      	sub	sp, #48	@ 0x30
 80097d8:	af04      	add	r7, sp, #16
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	603b      	str	r3, [r7, #0]
 80097e0:	4613      	mov	r3, r2
 80097e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80097e4:	88fb      	ldrh	r3, [r7, #6]
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7fe f9bb 	bl	8007b64 <pvPortMalloc>
 80097ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00e      	beq.n	8009814 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80097f6:	205c      	movs	r0, #92	@ 0x5c
 80097f8:	f7fe f9b4 	bl	8007b64 <pvPortMalloc>
 80097fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d003      	beq.n	800980c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	631a      	str	r2, [r3, #48]	@ 0x30
 800980a:	e005      	b.n	8009818 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800980c:	6978      	ldr	r0, [r7, #20]
 800980e:	f7fe fa77 	bl	8007d00 <vPortFree>
 8009812:	e001      	b.n	8009818 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009814:	2300      	movs	r3, #0
 8009816:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d017      	beq.n	800984e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009826:	88fa      	ldrh	r2, [r7, #6]
 8009828:	2300      	movs	r3, #0
 800982a:	9303      	str	r3, [sp, #12]
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	9302      	str	r3, [sp, #8]
 8009830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009832:	9301      	str	r3, [sp, #4]
 8009834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	68b9      	ldr	r1, [r7, #8]
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 f80e 	bl	800985e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009842:	69f8      	ldr	r0, [r7, #28]
 8009844:	f000 f89c 	bl	8009980 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009848:	2301      	movs	r3, #1
 800984a:	61bb      	str	r3, [r7, #24]
 800984c:	e002      	b.n	8009854 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800984e:	f04f 33ff 	mov.w	r3, #4294967295
 8009852:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009854:	69bb      	ldr	r3, [r7, #24]
	}
 8009856:	4618      	mov	r0, r3
 8009858:	3720      	adds	r7, #32
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b088      	sub	sp, #32
 8009862:	af00      	add	r7, sp, #0
 8009864:	60f8      	str	r0, [r7, #12]
 8009866:	60b9      	str	r1, [r7, #8]
 8009868:	607a      	str	r2, [r7, #4]
 800986a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800986c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	461a      	mov	r2, r3
 8009876:	21a5      	movs	r1, #165	@ 0xa5
 8009878:	f00e f8b4 	bl	80179e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800987c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009880:	6879      	ldr	r1, [r7, #4]
 8009882:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009886:	440b      	add	r3, r1
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	f023 0307 	bic.w	r3, r3, #7
 8009894:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	f003 0307 	and.w	r3, r3, #7
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00b      	beq.n	80098b8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	617b      	str	r3, [r7, #20]
}
 80098b2:	bf00      	nop
 80098b4:	bf00      	nop
 80098b6:	e7fd      	b.n	80098b4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d01f      	beq.n	80098fe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098be:	2300      	movs	r3, #0
 80098c0:	61fb      	str	r3, [r7, #28]
 80098c2:	e012      	b.n	80098ea <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	4413      	add	r3, r2
 80098ca:	7819      	ldrb	r1, [r3, #0]
 80098cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	4413      	add	r3, r2
 80098d2:	3334      	adds	r3, #52	@ 0x34
 80098d4:	460a      	mov	r2, r1
 80098d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	4413      	add	r3, r2
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d006      	beq.n	80098f2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	3301      	adds	r3, #1
 80098e8:	61fb      	str	r3, [r7, #28]
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	2b0f      	cmp	r3, #15
 80098ee:	d9e9      	bls.n	80098c4 <prvInitialiseNewTask+0x66>
 80098f0:	e000      	b.n	80098f4 <prvInitialiseNewTask+0x96>
			{
				break;
 80098f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80098fc:	e003      	b.n	8009906 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80098fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009900:	2200      	movs	r2, #0
 8009902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009908:	2b37      	cmp	r3, #55	@ 0x37
 800990a:	d901      	bls.n	8009910 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800990c:	2337      	movs	r3, #55	@ 0x37
 800990e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009912:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009914:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800991a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800991c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991e:	2200      	movs	r2, #0
 8009920:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009924:	3304      	adds	r3, #4
 8009926:	4618      	mov	r0, r3
 8009928:	f7fe fb2a 	bl	8007f80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800992c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992e:	3318      	adds	r3, #24
 8009930:	4618      	mov	r0, r3
 8009932:	f7fe fb25 	bl	8007f80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800993a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800993c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009944:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800994a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800994c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994e:	2200      	movs	r2, #0
 8009950:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009954:	2200      	movs	r2, #0
 8009956:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	68f9      	ldr	r1, [r7, #12]
 800995e:	69b8      	ldr	r0, [r7, #24]
 8009960:	f7fe fba2 	bl	80080a8 <pxPortInitialiseStack>
 8009964:	4602      	mov	r2, r0
 8009966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009968:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800996a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009976:	bf00      	nop
 8009978:	3720      	adds	r7, #32
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
	...

08009980 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009988:	f7fe fcbe 	bl	8008308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800998c:	4b2d      	ldr	r3, [pc, #180]	@ (8009a44 <prvAddNewTaskToReadyList+0xc4>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3301      	adds	r3, #1
 8009992:	4a2c      	ldr	r2, [pc, #176]	@ (8009a44 <prvAddNewTaskToReadyList+0xc4>)
 8009994:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009996:	4b2c      	ldr	r3, [pc, #176]	@ (8009a48 <prvAddNewTaskToReadyList+0xc8>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d109      	bne.n	80099b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800999e:	4a2a      	ldr	r2, [pc, #168]	@ (8009a48 <prvAddNewTaskToReadyList+0xc8>)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80099a4:	4b27      	ldr	r3, [pc, #156]	@ (8009a44 <prvAddNewTaskToReadyList+0xc4>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d110      	bne.n	80099ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80099ac:	f000 fc30 	bl	800a210 <prvInitialiseTaskLists>
 80099b0:	e00d      	b.n	80099ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80099b2:	4b26      	ldr	r3, [pc, #152]	@ (8009a4c <prvAddNewTaskToReadyList+0xcc>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d109      	bne.n	80099ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80099ba:	4b23      	ldr	r3, [pc, #140]	@ (8009a48 <prvAddNewTaskToReadyList+0xc8>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d802      	bhi.n	80099ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80099c8:	4a1f      	ldr	r2, [pc, #124]	@ (8009a48 <prvAddNewTaskToReadyList+0xc8>)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80099ce:	4b20      	ldr	r3, [pc, #128]	@ (8009a50 <prvAddNewTaskToReadyList+0xd0>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	3301      	adds	r3, #1
 80099d4:	4a1e      	ldr	r2, [pc, #120]	@ (8009a50 <prvAddNewTaskToReadyList+0xd0>)
 80099d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80099d8:	4b1d      	ldr	r3, [pc, #116]	@ (8009a50 <prvAddNewTaskToReadyList+0xd0>)
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099e4:	4b1b      	ldr	r3, [pc, #108]	@ (8009a54 <prvAddNewTaskToReadyList+0xd4>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d903      	bls.n	80099f4 <prvAddNewTaskToReadyList+0x74>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f0:	4a18      	ldr	r2, [pc, #96]	@ (8009a54 <prvAddNewTaskToReadyList+0xd4>)
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099f8:	4613      	mov	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4a15      	ldr	r2, [pc, #84]	@ (8009a58 <prvAddNewTaskToReadyList+0xd8>)
 8009a02:	441a      	add	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	3304      	adds	r3, #4
 8009a08:	4619      	mov	r1, r3
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	f7fe fac5 	bl	8007f9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a10:	f7fe fcac 	bl	800836c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a14:	4b0d      	ldr	r3, [pc, #52]	@ (8009a4c <prvAddNewTaskToReadyList+0xcc>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00e      	beq.n	8009a3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a48 <prvAddNewTaskToReadyList+0xc8>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d207      	bcs.n	8009a3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8009a5c <prvAddNewTaskToReadyList+0xdc>)
 8009a2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a3a:	bf00      	nop
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	24004b4c 	.word	0x24004b4c
 8009a48:	24004678 	.word	0x24004678
 8009a4c:	24004b58 	.word	0x24004b58
 8009a50:	24004b68 	.word	0x24004b68
 8009a54:	24004b54 	.word	0x24004b54
 8009a58:	2400467c 	.word	0x2400467c
 8009a5c:	e000ed04 	.word	0xe000ed04

08009a60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d018      	beq.n	8009aa4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a72:	4b14      	ldr	r3, [pc, #80]	@ (8009ac4 <vTaskDelay+0x64>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00b      	beq.n	8009a92 <vTaskDelay+0x32>
	__asm volatile
 8009a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	60bb      	str	r3, [r7, #8]
}
 8009a8c:	bf00      	nop
 8009a8e:	bf00      	nop
 8009a90:	e7fd      	b.n	8009a8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009a92:	f000 f883 	bl	8009b9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a96:	2100      	movs	r1, #0
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fe15 	bl	800a6c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009a9e:	f000 f88b 	bl	8009bb8 <xTaskResumeAll>
 8009aa2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d107      	bne.n	8009aba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009aaa:	4b07      	ldr	r3, [pc, #28]	@ (8009ac8 <vTaskDelay+0x68>)
 8009aac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009aba:	bf00      	nop
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	24004b74 	.word	0x24004b74
 8009ac8:	e000ed04 	.word	0xe000ed04

08009acc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b08a      	sub	sp, #40	@ 0x28
 8009ad0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009ada:	463a      	mov	r2, r7
 8009adc:	1d39      	adds	r1, r7, #4
 8009ade:	f107 0308 	add.w	r3, r7, #8
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fe f80a 	bl	8007afc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009ae8:	6839      	ldr	r1, [r7, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	9202      	str	r2, [sp, #8]
 8009af0:	9301      	str	r3, [sp, #4]
 8009af2:	2300      	movs	r3, #0
 8009af4:	9300      	str	r3, [sp, #0]
 8009af6:	2300      	movs	r3, #0
 8009af8:	460a      	mov	r2, r1
 8009afa:	4922      	ldr	r1, [pc, #136]	@ (8009b84 <vTaskStartScheduler+0xb8>)
 8009afc:	4822      	ldr	r0, [pc, #136]	@ (8009b88 <vTaskStartScheduler+0xbc>)
 8009afe:	f7ff fe09 	bl	8009714 <xTaskCreateStatic>
 8009b02:	4603      	mov	r3, r0
 8009b04:	4a21      	ldr	r2, [pc, #132]	@ (8009b8c <vTaskStartScheduler+0xc0>)
 8009b06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b08:	4b20      	ldr	r3, [pc, #128]	@ (8009b8c <vTaskStartScheduler+0xc0>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d002      	beq.n	8009b16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b10:	2301      	movs	r3, #1
 8009b12:	617b      	str	r3, [r7, #20]
 8009b14:	e001      	b.n	8009b1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009b16:	2300      	movs	r3, #0
 8009b18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d102      	bne.n	8009b26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009b20:	f000 fe26 	bl	800a770 <xTimerCreateTimerTask>
 8009b24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d116      	bne.n	8009b5a <vTaskStartScheduler+0x8e>
	__asm volatile
 8009b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	613b      	str	r3, [r7, #16]
}
 8009b3e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b40:	4b13      	ldr	r3, [pc, #76]	@ (8009b90 <vTaskStartScheduler+0xc4>)
 8009b42:	f04f 32ff 	mov.w	r2, #4294967295
 8009b46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b48:	4b12      	ldr	r3, [pc, #72]	@ (8009b94 <vTaskStartScheduler+0xc8>)
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009b4e:	4b12      	ldr	r3, [pc, #72]	@ (8009b98 <vTaskStartScheduler+0xcc>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b54:	f7fe fb34 	bl	80081c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b58:	e00f      	b.n	8009b7a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b60:	d10b      	bne.n	8009b7a <vTaskStartScheduler+0xae>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	60fb      	str	r3, [r7, #12]
}
 8009b74:	bf00      	nop
 8009b76:	bf00      	nop
 8009b78:	e7fd      	b.n	8009b76 <vTaskStartScheduler+0xaa>
}
 8009b7a:	bf00      	nop
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	080186d4 	.word	0x080186d4
 8009b88:	0800a1e1 	.word	0x0800a1e1
 8009b8c:	24004b70 	.word	0x24004b70
 8009b90:	24004b6c 	.word	0x24004b6c
 8009b94:	24004b58 	.word	0x24004b58
 8009b98:	24004b50 	.word	0x24004b50

08009b9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009ba0:	4b04      	ldr	r3, [pc, #16]	@ (8009bb4 <vTaskSuspendAll+0x18>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	4a03      	ldr	r2, [pc, #12]	@ (8009bb4 <vTaskSuspendAll+0x18>)
 8009ba8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009baa:	bf00      	nop
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	24004b74 	.word	0x24004b74

08009bb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009bc6:	4b42      	ldr	r3, [pc, #264]	@ (8009cd0 <xTaskResumeAll+0x118>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10b      	bne.n	8009be6 <xTaskResumeAll+0x2e>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	603b      	str	r3, [r7, #0]
}
 8009be0:	bf00      	nop
 8009be2:	bf00      	nop
 8009be4:	e7fd      	b.n	8009be2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009be6:	f7fe fb8f 	bl	8008308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009bea:	4b39      	ldr	r3, [pc, #228]	@ (8009cd0 <xTaskResumeAll+0x118>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	4a37      	ldr	r2, [pc, #220]	@ (8009cd0 <xTaskResumeAll+0x118>)
 8009bf2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bf4:	4b36      	ldr	r3, [pc, #216]	@ (8009cd0 <xTaskResumeAll+0x118>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d162      	bne.n	8009cc2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009bfc:	4b35      	ldr	r3, [pc, #212]	@ (8009cd4 <xTaskResumeAll+0x11c>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d05e      	beq.n	8009cc2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c04:	e02f      	b.n	8009c66 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c06:	4b34      	ldr	r3, [pc, #208]	@ (8009cd8 <xTaskResumeAll+0x120>)
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	3318      	adds	r3, #24
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fe fa1e 	bl	8008054 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7fe fa19 	bl	8008054 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c26:	4b2d      	ldr	r3, [pc, #180]	@ (8009cdc <xTaskResumeAll+0x124>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d903      	bls.n	8009c36 <xTaskResumeAll+0x7e>
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c32:	4a2a      	ldr	r2, [pc, #168]	@ (8009cdc <xTaskResumeAll+0x124>)
 8009c34:	6013      	str	r3, [r2, #0]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	4413      	add	r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4a27      	ldr	r2, [pc, #156]	@ (8009ce0 <xTaskResumeAll+0x128>)
 8009c44:	441a      	add	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	3304      	adds	r3, #4
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	f7fe f9a4 	bl	8007f9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c56:	4b23      	ldr	r3, [pc, #140]	@ (8009ce4 <xTaskResumeAll+0x12c>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d302      	bcc.n	8009c66 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009c60:	4b21      	ldr	r3, [pc, #132]	@ (8009ce8 <xTaskResumeAll+0x130>)
 8009c62:	2201      	movs	r2, #1
 8009c64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c66:	4b1c      	ldr	r3, [pc, #112]	@ (8009cd8 <xTaskResumeAll+0x120>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1cb      	bne.n	8009c06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c74:	f000 fb6a 	bl	800a34c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009c78:	4b1c      	ldr	r3, [pc, #112]	@ (8009cec <xTaskResumeAll+0x134>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d010      	beq.n	8009ca6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c84:	f000 f858 	bl	8009d38 <xTaskIncrementTick>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d002      	beq.n	8009c94 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009c8e:	4b16      	ldr	r3, [pc, #88]	@ (8009ce8 <xTaskResumeAll+0x130>)
 8009c90:	2201      	movs	r2, #1
 8009c92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d1f1      	bne.n	8009c84 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009ca0:	4b12      	ldr	r3, [pc, #72]	@ (8009cec <xTaskResumeAll+0x134>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ca6:	4b10      	ldr	r3, [pc, #64]	@ (8009ce8 <xTaskResumeAll+0x130>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d009      	beq.n	8009cc2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8009cf0 <xTaskResumeAll+0x138>)
 8009cb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cb8:	601a      	str	r2, [r3, #0]
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009cc2:	f7fe fb53 	bl	800836c <vPortExitCritical>

	return xAlreadyYielded;
 8009cc6:	68bb      	ldr	r3, [r7, #8]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3710      	adds	r7, #16
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	24004b74 	.word	0x24004b74
 8009cd4:	24004b4c 	.word	0x24004b4c
 8009cd8:	24004b0c 	.word	0x24004b0c
 8009cdc:	24004b54 	.word	0x24004b54
 8009ce0:	2400467c 	.word	0x2400467c
 8009ce4:	24004678 	.word	0x24004678
 8009ce8:	24004b60 	.word	0x24004b60
 8009cec:	24004b5c 	.word	0x24004b5c
 8009cf0:	e000ed04 	.word	0xe000ed04

08009cf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009cfa:	4b05      	ldr	r3, [pc, #20]	@ (8009d10 <xTaskGetTickCount+0x1c>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d00:	687b      	ldr	r3, [r7, #4]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	370c      	adds	r7, #12
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	24004b50 	.word	0x24004b50

08009d14 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d1a:	f7fe fbd5 	bl	80084c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009d1e:	2300      	movs	r3, #0
 8009d20:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009d22:	4b04      	ldr	r3, [pc, #16]	@ (8009d34 <xTaskGetTickCountFromISR+0x20>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d28:	683b      	ldr	r3, [r7, #0]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	24004b50 	.word	0x24004b50

08009d38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b086      	sub	sp, #24
 8009d3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d42:	4b4f      	ldr	r3, [pc, #316]	@ (8009e80 <xTaskIncrementTick+0x148>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f040 8090 	bne.w	8009e6c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d4c:	4b4d      	ldr	r3, [pc, #308]	@ (8009e84 <xTaskIncrementTick+0x14c>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3301      	adds	r3, #1
 8009d52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d54:	4a4b      	ldr	r2, [pc, #300]	@ (8009e84 <xTaskIncrementTick+0x14c>)
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d121      	bne.n	8009da4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d60:	4b49      	ldr	r3, [pc, #292]	@ (8009e88 <xTaskIncrementTick+0x150>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00b      	beq.n	8009d82 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d6e:	f383 8811 	msr	BASEPRI, r3
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	603b      	str	r3, [r7, #0]
}
 8009d7c:	bf00      	nop
 8009d7e:	bf00      	nop
 8009d80:	e7fd      	b.n	8009d7e <xTaskIncrementTick+0x46>
 8009d82:	4b41      	ldr	r3, [pc, #260]	@ (8009e88 <xTaskIncrementTick+0x150>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	60fb      	str	r3, [r7, #12]
 8009d88:	4b40      	ldr	r3, [pc, #256]	@ (8009e8c <xTaskIncrementTick+0x154>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a3e      	ldr	r2, [pc, #248]	@ (8009e88 <xTaskIncrementTick+0x150>)
 8009d8e:	6013      	str	r3, [r2, #0]
 8009d90:	4a3e      	ldr	r2, [pc, #248]	@ (8009e8c <xTaskIncrementTick+0x154>)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6013      	str	r3, [r2, #0]
 8009d96:	4b3e      	ldr	r3, [pc, #248]	@ (8009e90 <xTaskIncrementTick+0x158>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	4a3c      	ldr	r2, [pc, #240]	@ (8009e90 <xTaskIncrementTick+0x158>)
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	f000 fad4 	bl	800a34c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009da4:	4b3b      	ldr	r3, [pc, #236]	@ (8009e94 <xTaskIncrementTick+0x15c>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	693a      	ldr	r2, [r7, #16]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d349      	bcc.n	8009e42 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dae:	4b36      	ldr	r3, [pc, #216]	@ (8009e88 <xTaskIncrementTick+0x150>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d104      	bne.n	8009dc2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009db8:	4b36      	ldr	r3, [pc, #216]	@ (8009e94 <xTaskIncrementTick+0x15c>)
 8009dba:	f04f 32ff 	mov.w	r2, #4294967295
 8009dbe:	601a      	str	r2, [r3, #0]
					break;
 8009dc0:	e03f      	b.n	8009e42 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dc2:	4b31      	ldr	r3, [pc, #196]	@ (8009e88 <xTaskIncrementTick+0x150>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009dd2:	693a      	ldr	r2, [r7, #16]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d203      	bcs.n	8009de2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009dda:	4a2e      	ldr	r2, [pc, #184]	@ (8009e94 <xTaskIncrementTick+0x15c>)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009de0:	e02f      	b.n	8009e42 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	3304      	adds	r3, #4
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fe f934 	bl	8008054 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d004      	beq.n	8009dfe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	3318      	adds	r3, #24
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fe f92b 	bl	8008054 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e02:	4b25      	ldr	r3, [pc, #148]	@ (8009e98 <xTaskIncrementTick+0x160>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d903      	bls.n	8009e12 <xTaskIncrementTick+0xda>
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e0e:	4a22      	ldr	r2, [pc, #136]	@ (8009e98 <xTaskIncrementTick+0x160>)
 8009e10:	6013      	str	r3, [r2, #0]
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e16:	4613      	mov	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8009e9c <xTaskIncrementTick+0x164>)
 8009e20:	441a      	add	r2, r3
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	3304      	adds	r3, #4
 8009e26:	4619      	mov	r1, r3
 8009e28:	4610      	mov	r0, r2
 8009e2a:	f7fe f8b6 	bl	8007f9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e32:	4b1b      	ldr	r3, [pc, #108]	@ (8009ea0 <xTaskIncrementTick+0x168>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d3b8      	bcc.n	8009dae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e40:	e7b5      	b.n	8009dae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e42:	4b17      	ldr	r3, [pc, #92]	@ (8009ea0 <xTaskIncrementTick+0x168>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e48:	4914      	ldr	r1, [pc, #80]	@ (8009e9c <xTaskIncrementTick+0x164>)
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	440b      	add	r3, r1
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d901      	bls.n	8009e5e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009e5e:	4b11      	ldr	r3, [pc, #68]	@ (8009ea4 <xTaskIncrementTick+0x16c>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d007      	beq.n	8009e76 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009e66:	2301      	movs	r3, #1
 8009e68:	617b      	str	r3, [r7, #20]
 8009e6a:	e004      	b.n	8009e76 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8009ea8 <xTaskIncrementTick+0x170>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3301      	adds	r3, #1
 8009e72:	4a0d      	ldr	r2, [pc, #52]	@ (8009ea8 <xTaskIncrementTick+0x170>)
 8009e74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009e76:	697b      	ldr	r3, [r7, #20]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3718      	adds	r7, #24
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	24004b74 	.word	0x24004b74
 8009e84:	24004b50 	.word	0x24004b50
 8009e88:	24004b04 	.word	0x24004b04
 8009e8c:	24004b08 	.word	0x24004b08
 8009e90:	24004b64 	.word	0x24004b64
 8009e94:	24004b6c 	.word	0x24004b6c
 8009e98:	24004b54 	.word	0x24004b54
 8009e9c:	2400467c 	.word	0x2400467c
 8009ea0:	24004678 	.word	0x24004678
 8009ea4:	24004b60 	.word	0x24004b60
 8009ea8:	24004b5c 	.word	0x24004b5c

08009eac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009eb2:	4b28      	ldr	r3, [pc, #160]	@ (8009f54 <vTaskSwitchContext+0xa8>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d003      	beq.n	8009ec2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009eba:	4b27      	ldr	r3, [pc, #156]	@ (8009f58 <vTaskSwitchContext+0xac>)
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ec0:	e042      	b.n	8009f48 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009ec2:	4b25      	ldr	r3, [pc, #148]	@ (8009f58 <vTaskSwitchContext+0xac>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ec8:	4b24      	ldr	r3, [pc, #144]	@ (8009f5c <vTaskSwitchContext+0xb0>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	e011      	b.n	8009ef4 <vTaskSwitchContext+0x48>
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d10b      	bne.n	8009eee <vTaskSwitchContext+0x42>
	__asm volatile
 8009ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eda:	f383 8811 	msr	BASEPRI, r3
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	607b      	str	r3, [r7, #4]
}
 8009ee8:	bf00      	nop
 8009eea:	bf00      	nop
 8009eec:	e7fd      	b.n	8009eea <vTaskSwitchContext+0x3e>
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	60fb      	str	r3, [r7, #12]
 8009ef4:	491a      	ldr	r1, [pc, #104]	@ (8009f60 <vTaskSwitchContext+0xb4>)
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4413      	add	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	440b      	add	r3, r1
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d0e3      	beq.n	8009ed0 <vTaskSwitchContext+0x24>
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4a13      	ldr	r2, [pc, #76]	@ (8009f60 <vTaskSwitchContext+0xb4>)
 8009f14:	4413      	add	r3, r2
 8009f16:	60bb      	str	r3, [r7, #8]
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	685a      	ldr	r2, [r3, #4]
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	605a      	str	r2, [r3, #4]
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	685a      	ldr	r2, [r3, #4]
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	3308      	adds	r3, #8
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d104      	bne.n	8009f38 <vTaskSwitchContext+0x8c>
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	685a      	ldr	r2, [r3, #4]
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	605a      	str	r2, [r3, #4]
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	4a09      	ldr	r2, [pc, #36]	@ (8009f64 <vTaskSwitchContext+0xb8>)
 8009f40:	6013      	str	r3, [r2, #0]
 8009f42:	4a06      	ldr	r2, [pc, #24]	@ (8009f5c <vTaskSwitchContext+0xb0>)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6013      	str	r3, [r2, #0]
}
 8009f48:	bf00      	nop
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr
 8009f54:	24004b74 	.word	0x24004b74
 8009f58:	24004b60 	.word	0x24004b60
 8009f5c:	24004b54 	.word	0x24004b54
 8009f60:	2400467c 	.word	0x2400467c
 8009f64:	24004678 	.word	0x24004678

08009f68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10b      	bne.n	8009f90 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	60fb      	str	r3, [r7, #12]
}
 8009f8a:	bf00      	nop
 8009f8c:	bf00      	nop
 8009f8e:	e7fd      	b.n	8009f8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f90:	4b07      	ldr	r3, [pc, #28]	@ (8009fb0 <vTaskPlaceOnEventList+0x48>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3318      	adds	r3, #24
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7fe f822 	bl	8007fe2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f9e:	2101      	movs	r1, #1
 8009fa0:	6838      	ldr	r0, [r7, #0]
 8009fa2:	f000 fb91 	bl	800a6c8 <prvAddCurrentTaskToDelayedList>
}
 8009fa6:	bf00      	nop
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	24004678 	.word	0x24004678

08009fb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10b      	bne.n	8009fde <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	617b      	str	r3, [r7, #20]
}
 8009fd8:	bf00      	nop
 8009fda:	bf00      	nop
 8009fdc:	e7fd      	b.n	8009fda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fde:	4b0a      	ldr	r3, [pc, #40]	@ (800a008 <vTaskPlaceOnEventListRestricted+0x54>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	3318      	adds	r3, #24
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f7fd ffd7 	bl	8007f9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d002      	beq.n	8009ff8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ff8:	6879      	ldr	r1, [r7, #4]
 8009ffa:	68b8      	ldr	r0, [r7, #8]
 8009ffc:	f000 fb64 	bl	800a6c8 <prvAddCurrentTaskToDelayedList>
	}
 800a000:	bf00      	nop
 800a002:	3718      	adds	r7, #24
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	24004678 	.word	0x24004678

0800a00c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10b      	bne.n	800a03a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	60fb      	str	r3, [r7, #12]
}
 800a034:	bf00      	nop
 800a036:	bf00      	nop
 800a038:	e7fd      	b.n	800a036 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	3318      	adds	r3, #24
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe f808 	bl	8008054 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a044:	4b1d      	ldr	r3, [pc, #116]	@ (800a0bc <xTaskRemoveFromEventList+0xb0>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d11d      	bne.n	800a088 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	3304      	adds	r3, #4
 800a050:	4618      	mov	r0, r3
 800a052:	f7fd ffff 	bl	8008054 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a05a:	4b19      	ldr	r3, [pc, #100]	@ (800a0c0 <xTaskRemoveFromEventList+0xb4>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d903      	bls.n	800a06a <xTaskRemoveFromEventList+0x5e>
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a066:	4a16      	ldr	r2, [pc, #88]	@ (800a0c0 <xTaskRemoveFromEventList+0xb4>)
 800a068:	6013      	str	r3, [r2, #0]
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a06e:	4613      	mov	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4a13      	ldr	r2, [pc, #76]	@ (800a0c4 <xTaskRemoveFromEventList+0xb8>)
 800a078:	441a      	add	r2, r3
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	3304      	adds	r3, #4
 800a07e:	4619      	mov	r1, r3
 800a080:	4610      	mov	r0, r2
 800a082:	f7fd ff8a 	bl	8007f9a <vListInsertEnd>
 800a086:	e005      	b.n	800a094 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	3318      	adds	r3, #24
 800a08c:	4619      	mov	r1, r3
 800a08e:	480e      	ldr	r0, [pc, #56]	@ (800a0c8 <xTaskRemoveFromEventList+0xbc>)
 800a090:	f7fd ff83 	bl	8007f9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a098:	4b0c      	ldr	r3, [pc, #48]	@ (800a0cc <xTaskRemoveFromEventList+0xc0>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d905      	bls.n	800a0ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a0a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a0d0 <xTaskRemoveFromEventList+0xc4>)
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	601a      	str	r2, [r3, #0]
 800a0ac:	e001      	b.n	800a0b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a0b2:	697b      	ldr	r3, [r7, #20]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3718      	adds	r7, #24
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	24004b74 	.word	0x24004b74
 800a0c0:	24004b54 	.word	0x24004b54
 800a0c4:	2400467c 	.word	0x2400467c
 800a0c8:	24004b0c 	.word	0x24004b0c
 800a0cc:	24004678 	.word	0x24004678
 800a0d0:	24004b60 	.word	0x24004b60

0800a0d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0dc:	4b06      	ldr	r3, [pc, #24]	@ (800a0f8 <vTaskInternalSetTimeOutState+0x24>)
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0e4:	4b05      	ldr	r3, [pc, #20]	@ (800a0fc <vTaskInternalSetTimeOutState+0x28>)
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	605a      	str	r2, [r3, #4]
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr
 800a0f8:	24004b64 	.word	0x24004b64
 800a0fc:	24004b50 	.word	0x24004b50

0800a100 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b088      	sub	sp, #32
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10b      	bne.n	800a128 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	613b      	str	r3, [r7, #16]
}
 800a122:	bf00      	nop
 800a124:	bf00      	nop
 800a126:	e7fd      	b.n	800a124 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10b      	bne.n	800a146 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	60fb      	str	r3, [r7, #12]
}
 800a140:	bf00      	nop
 800a142:	bf00      	nop
 800a144:	e7fd      	b.n	800a142 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a146:	f7fe f8df 	bl	8008308 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a14a:	4b1d      	ldr	r3, [pc, #116]	@ (800a1c0 <xTaskCheckForTimeOut+0xc0>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	69ba      	ldr	r2, [r7, #24]
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a162:	d102      	bne.n	800a16a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a164:	2300      	movs	r3, #0
 800a166:	61fb      	str	r3, [r7, #28]
 800a168:	e023      	b.n	800a1b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	4b15      	ldr	r3, [pc, #84]	@ (800a1c4 <xTaskCheckForTimeOut+0xc4>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	429a      	cmp	r2, r3
 800a174:	d007      	beq.n	800a186 <xTaskCheckForTimeOut+0x86>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	69ba      	ldr	r2, [r7, #24]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d302      	bcc.n	800a186 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a180:	2301      	movs	r3, #1
 800a182:	61fb      	str	r3, [r7, #28]
 800a184:	e015      	b.n	800a1b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d20b      	bcs.n	800a1a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	1ad2      	subs	r2, r2, r3
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7ff ff99 	bl	800a0d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	61fb      	str	r3, [r7, #28]
 800a1a6:	e004      	b.n	800a1b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a1b2:	f7fe f8db 	bl	800836c <vPortExitCritical>

	return xReturn;
 800a1b6:	69fb      	ldr	r3, [r7, #28]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3720      	adds	r7, #32
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	24004b50 	.word	0x24004b50
 800a1c4:	24004b64 	.word	0x24004b64

0800a1c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a1cc:	4b03      	ldr	r3, [pc, #12]	@ (800a1dc <vTaskMissedYield+0x14>)
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	601a      	str	r2, [r3, #0]
}
 800a1d2:	bf00      	nop
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	24004b60 	.word	0x24004b60

0800a1e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1e8:	f000 f852 	bl	800a290 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1ec:	4b06      	ldr	r3, [pc, #24]	@ (800a208 <prvIdleTask+0x28>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d9f9      	bls.n	800a1e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a1f4:	4b05      	ldr	r3, [pc, #20]	@ (800a20c <prvIdleTask+0x2c>)
 800a1f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1fa:	601a      	str	r2, [r3, #0]
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a204:	e7f0      	b.n	800a1e8 <prvIdleTask+0x8>
 800a206:	bf00      	nop
 800a208:	2400467c 	.word	0x2400467c
 800a20c:	e000ed04 	.word	0xe000ed04

0800a210 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a216:	2300      	movs	r3, #0
 800a218:	607b      	str	r3, [r7, #4]
 800a21a:	e00c      	b.n	800a236 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	4613      	mov	r3, r2
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	4413      	add	r3, r2
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	4a12      	ldr	r2, [pc, #72]	@ (800a270 <prvInitialiseTaskLists+0x60>)
 800a228:	4413      	add	r3, r2
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fd fe88 	bl	8007f40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	3301      	adds	r3, #1
 800a234:	607b      	str	r3, [r7, #4]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2b37      	cmp	r3, #55	@ 0x37
 800a23a:	d9ef      	bls.n	800a21c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a23c:	480d      	ldr	r0, [pc, #52]	@ (800a274 <prvInitialiseTaskLists+0x64>)
 800a23e:	f7fd fe7f 	bl	8007f40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a242:	480d      	ldr	r0, [pc, #52]	@ (800a278 <prvInitialiseTaskLists+0x68>)
 800a244:	f7fd fe7c 	bl	8007f40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a248:	480c      	ldr	r0, [pc, #48]	@ (800a27c <prvInitialiseTaskLists+0x6c>)
 800a24a:	f7fd fe79 	bl	8007f40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a24e:	480c      	ldr	r0, [pc, #48]	@ (800a280 <prvInitialiseTaskLists+0x70>)
 800a250:	f7fd fe76 	bl	8007f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a254:	480b      	ldr	r0, [pc, #44]	@ (800a284 <prvInitialiseTaskLists+0x74>)
 800a256:	f7fd fe73 	bl	8007f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a25a:	4b0b      	ldr	r3, [pc, #44]	@ (800a288 <prvInitialiseTaskLists+0x78>)
 800a25c:	4a05      	ldr	r2, [pc, #20]	@ (800a274 <prvInitialiseTaskLists+0x64>)
 800a25e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a260:	4b0a      	ldr	r3, [pc, #40]	@ (800a28c <prvInitialiseTaskLists+0x7c>)
 800a262:	4a05      	ldr	r2, [pc, #20]	@ (800a278 <prvInitialiseTaskLists+0x68>)
 800a264:	601a      	str	r2, [r3, #0]
}
 800a266:	bf00      	nop
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	2400467c 	.word	0x2400467c
 800a274:	24004adc 	.word	0x24004adc
 800a278:	24004af0 	.word	0x24004af0
 800a27c:	24004b0c 	.word	0x24004b0c
 800a280:	24004b20 	.word	0x24004b20
 800a284:	24004b38 	.word	0x24004b38
 800a288:	24004b04 	.word	0x24004b04
 800a28c:	24004b08 	.word	0x24004b08

0800a290 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a296:	e019      	b.n	800a2cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a298:	f7fe f836 	bl	8008308 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a29c:	4b10      	ldr	r3, [pc, #64]	@ (800a2e0 <prvCheckTasksWaitingTermination+0x50>)
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7fd fed3 	bl	8008054 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a2ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a2e4 <prvCheckTasksWaitingTermination+0x54>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	4a0b      	ldr	r2, [pc, #44]	@ (800a2e4 <prvCheckTasksWaitingTermination+0x54>)
 800a2b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2b8:	4b0b      	ldr	r3, [pc, #44]	@ (800a2e8 <prvCheckTasksWaitingTermination+0x58>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	4a0a      	ldr	r2, [pc, #40]	@ (800a2e8 <prvCheckTasksWaitingTermination+0x58>)
 800a2c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a2c2:	f7fe f853 	bl	800836c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f810 	bl	800a2ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2cc:	4b06      	ldr	r3, [pc, #24]	@ (800a2e8 <prvCheckTasksWaitingTermination+0x58>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d1e1      	bne.n	800a298 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	24004b20 	.word	0x24004b20
 800a2e4:	24004b4c 	.word	0x24004b4c
 800a2e8:	24004b34 	.word	0x24004b34

0800a2ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d108      	bne.n	800a310 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a302:	4618      	mov	r0, r3
 800a304:	f7fd fcfc 	bl	8007d00 <vPortFree>
				vPortFree( pxTCB );
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f7fd fcf9 	bl	8007d00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a30e:	e019      	b.n	800a344 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a316:	2b01      	cmp	r3, #1
 800a318:	d103      	bne.n	800a322 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7fd fcf0 	bl	8007d00 <vPortFree>
	}
 800a320:	e010      	b.n	800a344 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d00b      	beq.n	800a344 <prvDeleteTCB+0x58>
	__asm volatile
 800a32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	60fb      	str	r3, [r7, #12]
}
 800a33e:	bf00      	nop
 800a340:	bf00      	nop
 800a342:	e7fd      	b.n	800a340 <prvDeleteTCB+0x54>
	}
 800a344:	bf00      	nop
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a352:	4b0c      	ldr	r3, [pc, #48]	@ (800a384 <prvResetNextTaskUnblockTime+0x38>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d104      	bne.n	800a366 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a35c:	4b0a      	ldr	r3, [pc, #40]	@ (800a388 <prvResetNextTaskUnblockTime+0x3c>)
 800a35e:	f04f 32ff 	mov.w	r2, #4294967295
 800a362:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a364:	e008      	b.n	800a378 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a366:	4b07      	ldr	r3, [pc, #28]	@ (800a384 <prvResetNextTaskUnblockTime+0x38>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	4a04      	ldr	r2, [pc, #16]	@ (800a388 <prvResetNextTaskUnblockTime+0x3c>)
 800a376:	6013      	str	r3, [r2, #0]
}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr
 800a384:	24004b04 	.word	0x24004b04
 800a388:	24004b6c 	.word	0x24004b6c

0800a38c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a392:	4b05      	ldr	r3, [pc, #20]	@ (800a3a8 <xTaskGetCurrentTaskHandle+0x1c>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a398:	687b      	ldr	r3, [r7, #4]
	}
 800a39a:	4618      	mov	r0, r3
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	24004678 	.word	0x24004678

0800a3ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a3b2:	4b0b      	ldr	r3, [pc, #44]	@ (800a3e0 <xTaskGetSchedulerState+0x34>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d102      	bne.n	800a3c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	607b      	str	r3, [r7, #4]
 800a3be:	e008      	b.n	800a3d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3c0:	4b08      	ldr	r3, [pc, #32]	@ (800a3e4 <xTaskGetSchedulerState+0x38>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d102      	bne.n	800a3ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a3c8:	2302      	movs	r3, #2
 800a3ca:	607b      	str	r3, [r7, #4]
 800a3cc:	e001      	b.n	800a3d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a3d2:	687b      	ldr	r3, [r7, #4]
	}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr
 800a3e0:	24004b58 	.word	0x24004b58
 800a3e4:	24004b74 	.word	0x24004b74

0800a3e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d051      	beq.n	800a4a2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a402:	4b2a      	ldr	r3, [pc, #168]	@ (800a4ac <xTaskPriorityInherit+0xc4>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a408:	429a      	cmp	r2, r3
 800a40a:	d241      	bcs.n	800a490 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	699b      	ldr	r3, [r3, #24]
 800a410:	2b00      	cmp	r3, #0
 800a412:	db06      	blt.n	800a422 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a414:	4b25      	ldr	r3, [pc, #148]	@ (800a4ac <xTaskPriorityInherit+0xc4>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a41a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	6959      	ldr	r1, [r3, #20]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a42a:	4613      	mov	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4a1f      	ldr	r2, [pc, #124]	@ (800a4b0 <xTaskPriorityInherit+0xc8>)
 800a434:	4413      	add	r3, r2
 800a436:	4299      	cmp	r1, r3
 800a438:	d122      	bne.n	800a480 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	3304      	adds	r3, #4
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fd fe08 	bl	8008054 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a444:	4b19      	ldr	r3, [pc, #100]	@ (800a4ac <xTaskPriorityInherit+0xc4>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a452:	4b18      	ldr	r3, [pc, #96]	@ (800a4b4 <xTaskPriorityInherit+0xcc>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	429a      	cmp	r2, r3
 800a458:	d903      	bls.n	800a462 <xTaskPriorityInherit+0x7a>
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a45e:	4a15      	ldr	r2, [pc, #84]	@ (800a4b4 <xTaskPriorityInherit+0xcc>)
 800a460:	6013      	str	r3, [r2, #0]
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a466:	4613      	mov	r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4413      	add	r3, r2
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	4a10      	ldr	r2, [pc, #64]	@ (800a4b0 <xTaskPriorityInherit+0xc8>)
 800a470:	441a      	add	r2, r3
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	3304      	adds	r3, #4
 800a476:	4619      	mov	r1, r3
 800a478:	4610      	mov	r0, r2
 800a47a:	f7fd fd8e 	bl	8007f9a <vListInsertEnd>
 800a47e:	e004      	b.n	800a48a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a480:	4b0a      	ldr	r3, [pc, #40]	@ (800a4ac <xTaskPriorityInherit+0xc4>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a48a:	2301      	movs	r3, #1
 800a48c:	60fb      	str	r3, [r7, #12]
 800a48e:	e008      	b.n	800a4a2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a494:	4b05      	ldr	r3, [pc, #20]	@ (800a4ac <xTaskPriorityInherit+0xc4>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d201      	bcs.n	800a4a2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
	}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	24004678 	.word	0x24004678
 800a4b0:	2400467c 	.word	0x2400467c
 800a4b4:	24004b54 	.word	0x24004b54

0800a4b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d058      	beq.n	800a580 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a4ce:	4b2f      	ldr	r3, [pc, #188]	@ (800a58c <xTaskPriorityDisinherit+0xd4>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d00b      	beq.n	800a4f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4dc:	f383 8811 	msr	BASEPRI, r3
 800a4e0:	f3bf 8f6f 	isb	sy
 800a4e4:	f3bf 8f4f 	dsb	sy
 800a4e8:	60fb      	str	r3, [r7, #12]
}
 800a4ea:	bf00      	nop
 800a4ec:	bf00      	nop
 800a4ee:	e7fd      	b.n	800a4ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10b      	bne.n	800a510 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4fc:	f383 8811 	msr	BASEPRI, r3
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	60bb      	str	r3, [r7, #8]
}
 800a50a:	bf00      	nop
 800a50c:	bf00      	nop
 800a50e:	e7fd      	b.n	800a50c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a514:	1e5a      	subs	r2, r3, #1
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a522:	429a      	cmp	r2, r3
 800a524:	d02c      	beq.n	800a580 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d128      	bne.n	800a580 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	3304      	adds	r3, #4
 800a532:	4618      	mov	r0, r3
 800a534:	f7fd fd8e 	bl	8008054 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a544:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a550:	4b0f      	ldr	r3, [pc, #60]	@ (800a590 <xTaskPriorityDisinherit+0xd8>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	429a      	cmp	r2, r3
 800a556:	d903      	bls.n	800a560 <xTaskPriorityDisinherit+0xa8>
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55c:	4a0c      	ldr	r2, [pc, #48]	@ (800a590 <xTaskPriorityDisinherit+0xd8>)
 800a55e:	6013      	str	r3, [r2, #0]
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a564:	4613      	mov	r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4413      	add	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4a09      	ldr	r2, [pc, #36]	@ (800a594 <xTaskPriorityDisinherit+0xdc>)
 800a56e:	441a      	add	r2, r3
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	3304      	adds	r3, #4
 800a574:	4619      	mov	r1, r3
 800a576:	4610      	mov	r0, r2
 800a578:	f7fd fd0f 	bl	8007f9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a57c:	2301      	movs	r3, #1
 800a57e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a580:	697b      	ldr	r3, [r7, #20]
	}
 800a582:	4618      	mov	r0, r3
 800a584:	3718      	adds	r7, #24
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	24004678 	.word	0x24004678
 800a590:	24004b54 	.word	0x24004b54
 800a594:	2400467c 	.word	0x2400467c

0800a598 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b088      	sub	sp, #32
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d06c      	beq.n	800a68a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10b      	bne.n	800a5d0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	60fb      	str	r3, [r7, #12]
}
 800a5ca:	bf00      	nop
 800a5cc:	bf00      	nop
 800a5ce:	e7fd      	b.n	800a5cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d902      	bls.n	800a5e0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	61fb      	str	r3, [r7, #28]
 800a5de:	e002      	b.n	800a5e6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5e4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ea:	69fa      	ldr	r2, [r7, #28]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d04c      	beq.n	800a68a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5f4:	697a      	ldr	r2, [r7, #20]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d147      	bne.n	800a68a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a5fa:	4b26      	ldr	r3, [pc, #152]	@ (800a694 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	69ba      	ldr	r2, [r7, #24]
 800a600:	429a      	cmp	r2, r3
 800a602:	d10b      	bne.n	800a61c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a608:	f383 8811 	msr	BASEPRI, r3
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	f3bf 8f4f 	dsb	sy
 800a614:	60bb      	str	r3, [r7, #8]
}
 800a616:	bf00      	nop
 800a618:	bf00      	nop
 800a61a:	e7fd      	b.n	800a618 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a620:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	69fa      	ldr	r2, [r7, #28]
 800a626:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	699b      	ldr	r3, [r3, #24]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	db04      	blt.n	800a63a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	6959      	ldr	r1, [r3, #20]
 800a63e:	693a      	ldr	r2, [r7, #16]
 800a640:	4613      	mov	r3, r2
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	4413      	add	r3, r2
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	4a13      	ldr	r2, [pc, #76]	@ (800a698 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a64a:	4413      	add	r3, r2
 800a64c:	4299      	cmp	r1, r3
 800a64e:	d11c      	bne.n	800a68a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	3304      	adds	r3, #4
 800a654:	4618      	mov	r0, r3
 800a656:	f7fd fcfd 	bl	8008054 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a65e:	4b0f      	ldr	r3, [pc, #60]	@ (800a69c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	429a      	cmp	r2, r3
 800a664:	d903      	bls.n	800a66e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a66a:	4a0c      	ldr	r2, [pc, #48]	@ (800a69c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a66c:	6013      	str	r3, [r2, #0]
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a672:	4613      	mov	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4413      	add	r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	4a07      	ldr	r2, [pc, #28]	@ (800a698 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a67c:	441a      	add	r2, r3
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	3304      	adds	r3, #4
 800a682:	4619      	mov	r1, r3
 800a684:	4610      	mov	r0, r2
 800a686:	f7fd fc88 	bl	8007f9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a68a:	bf00      	nop
 800a68c:	3720      	adds	r7, #32
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	24004678 	.word	0x24004678
 800a698:	2400467c 	.word	0x2400467c
 800a69c:	24004b54 	.word	0x24004b54

0800a6a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a6a0:	b480      	push	{r7}
 800a6a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a6a4:	4b07      	ldr	r3, [pc, #28]	@ (800a6c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d004      	beq.n	800a6b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a6ac:	4b05      	ldr	r3, [pc, #20]	@ (800a6c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a6b2:	3201      	adds	r2, #1
 800a6b4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a6b6:	4b03      	ldr	r3, [pc, #12]	@ (800a6c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
	}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr
 800a6c4:	24004678 	.word	0x24004678

0800a6c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a6d2:	4b21      	ldr	r3, [pc, #132]	@ (800a758 <prvAddCurrentTaskToDelayedList+0x90>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6d8:	4b20      	ldr	r3, [pc, #128]	@ (800a75c <prvAddCurrentTaskToDelayedList+0x94>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	3304      	adds	r3, #4
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fd fcb8 	bl	8008054 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ea:	d10a      	bne.n	800a702 <prvAddCurrentTaskToDelayedList+0x3a>
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d007      	beq.n	800a702 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6f2:	4b1a      	ldr	r3, [pc, #104]	@ (800a75c <prvAddCurrentTaskToDelayedList+0x94>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3304      	adds	r3, #4
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	4819      	ldr	r0, [pc, #100]	@ (800a760 <prvAddCurrentTaskToDelayedList+0x98>)
 800a6fc:	f7fd fc4d 	bl	8007f9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a700:	e026      	b.n	800a750 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4413      	add	r3, r2
 800a708:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a70a:	4b14      	ldr	r3, [pc, #80]	@ (800a75c <prvAddCurrentTaskToDelayedList+0x94>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	429a      	cmp	r2, r3
 800a718:	d209      	bcs.n	800a72e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a71a:	4b12      	ldr	r3, [pc, #72]	@ (800a764 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	4b0f      	ldr	r3, [pc, #60]	@ (800a75c <prvAddCurrentTaskToDelayedList+0x94>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3304      	adds	r3, #4
 800a724:	4619      	mov	r1, r3
 800a726:	4610      	mov	r0, r2
 800a728:	f7fd fc5b 	bl	8007fe2 <vListInsert>
}
 800a72c:	e010      	b.n	800a750 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a72e:	4b0e      	ldr	r3, [pc, #56]	@ (800a768 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	4b0a      	ldr	r3, [pc, #40]	@ (800a75c <prvAddCurrentTaskToDelayedList+0x94>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	3304      	adds	r3, #4
 800a738:	4619      	mov	r1, r3
 800a73a:	4610      	mov	r0, r2
 800a73c:	f7fd fc51 	bl	8007fe2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a740:	4b0a      	ldr	r3, [pc, #40]	@ (800a76c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	429a      	cmp	r2, r3
 800a748:	d202      	bcs.n	800a750 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a74a:	4a08      	ldr	r2, [pc, #32]	@ (800a76c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	6013      	str	r3, [r2, #0]
}
 800a750:	bf00      	nop
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	24004b50 	.word	0x24004b50
 800a75c:	24004678 	.word	0x24004678
 800a760:	24004b38 	.word	0x24004b38
 800a764:	24004b08 	.word	0x24004b08
 800a768:	24004b04 	.word	0x24004b04
 800a76c:	24004b6c 	.word	0x24004b6c

0800a770 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b08a      	sub	sp, #40	@ 0x28
 800a774:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a776:	2300      	movs	r3, #0
 800a778:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a77a:	f000 fb13 	bl	800ada4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a77e:	4b1d      	ldr	r3, [pc, #116]	@ (800a7f4 <xTimerCreateTimerTask+0x84>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d021      	beq.n	800a7ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a786:	2300      	movs	r3, #0
 800a788:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a78a:	2300      	movs	r3, #0
 800a78c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a78e:	1d3a      	adds	r2, r7, #4
 800a790:	f107 0108 	add.w	r1, r7, #8
 800a794:	f107 030c 	add.w	r3, r7, #12
 800a798:	4618      	mov	r0, r3
 800a79a:	f7fd f9c9 	bl	8007b30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a79e:	6879      	ldr	r1, [r7, #4]
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	9202      	str	r2, [sp, #8]
 800a7a6:	9301      	str	r3, [sp, #4]
 800a7a8:	2302      	movs	r3, #2
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	460a      	mov	r2, r1
 800a7b0:	4911      	ldr	r1, [pc, #68]	@ (800a7f8 <xTimerCreateTimerTask+0x88>)
 800a7b2:	4812      	ldr	r0, [pc, #72]	@ (800a7fc <xTimerCreateTimerTask+0x8c>)
 800a7b4:	f7fe ffae 	bl	8009714 <xTaskCreateStatic>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	4a11      	ldr	r2, [pc, #68]	@ (800a800 <xTimerCreateTimerTask+0x90>)
 800a7bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a7be:	4b10      	ldr	r3, [pc, #64]	@ (800a800 <xTimerCreateTimerTask+0x90>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d001      	beq.n	800a7ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10b      	bne.n	800a7e8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	613b      	str	r3, [r7, #16]
}
 800a7e2:	bf00      	nop
 800a7e4:	bf00      	nop
 800a7e6:	e7fd      	b.n	800a7e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a7e8:	697b      	ldr	r3, [r7, #20]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3718      	adds	r7, #24
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	24004ba8 	.word	0x24004ba8
 800a7f8:	080186dc 	.word	0x080186dc
 800a7fc:	0800a93d 	.word	0x0800a93d
 800a800:	24004bac 	.word	0x24004bac

0800a804 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b08a      	sub	sp, #40	@ 0x28
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	607a      	str	r2, [r7, #4]
 800a810:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a812:	2300      	movs	r3, #0
 800a814:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10b      	bne.n	800a834 <xTimerGenericCommand+0x30>
	__asm volatile
 800a81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	623b      	str	r3, [r7, #32]
}
 800a82e:	bf00      	nop
 800a830:	bf00      	nop
 800a832:	e7fd      	b.n	800a830 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a834:	4b19      	ldr	r3, [pc, #100]	@ (800a89c <xTimerGenericCommand+0x98>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d02a      	beq.n	800a892 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	2b05      	cmp	r3, #5
 800a84c:	dc18      	bgt.n	800a880 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a84e:	f7ff fdad 	bl	800a3ac <xTaskGetSchedulerState>
 800a852:	4603      	mov	r3, r0
 800a854:	2b02      	cmp	r3, #2
 800a856:	d109      	bne.n	800a86c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a858:	4b10      	ldr	r3, [pc, #64]	@ (800a89c <xTimerGenericCommand+0x98>)
 800a85a:	6818      	ldr	r0, [r3, #0]
 800a85c:	f107 0110 	add.w	r1, r7, #16
 800a860:	2300      	movs	r3, #0
 800a862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a864:	f7fe f8de 	bl	8008a24 <xQueueGenericSend>
 800a868:	6278      	str	r0, [r7, #36]	@ 0x24
 800a86a:	e012      	b.n	800a892 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a86c:	4b0b      	ldr	r3, [pc, #44]	@ (800a89c <xTimerGenericCommand+0x98>)
 800a86e:	6818      	ldr	r0, [r3, #0]
 800a870:	f107 0110 	add.w	r1, r7, #16
 800a874:	2300      	movs	r3, #0
 800a876:	2200      	movs	r2, #0
 800a878:	f7fe f8d4 	bl	8008a24 <xQueueGenericSend>
 800a87c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a87e:	e008      	b.n	800a892 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a880:	4b06      	ldr	r3, [pc, #24]	@ (800a89c <xTimerGenericCommand+0x98>)
 800a882:	6818      	ldr	r0, [r3, #0]
 800a884:	f107 0110 	add.w	r1, r7, #16
 800a888:	2300      	movs	r3, #0
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	f7fe f9cc 	bl	8008c28 <xQueueGenericSendFromISR>
 800a890:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a894:	4618      	mov	r0, r3
 800a896:	3728      	adds	r7, #40	@ 0x28
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	24004ba8 	.word	0x24004ba8

0800a8a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b088      	sub	sp, #32
 800a8a4:	af02      	add	r7, sp, #8
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8aa:	4b23      	ldr	r3, [pc, #140]	@ (800a938 <prvProcessExpiredTimer+0x98>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7fd fbcb 	bl	8008054 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8c4:	f003 0304 	and.w	r3, r3, #4
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d023      	beq.n	800a914 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	699a      	ldr	r2, [r3, #24]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	18d1      	adds	r1, r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	6978      	ldr	r0, [r7, #20]
 800a8da:	f000 f8d5 	bl	800aa88 <prvInsertTimerInActiveList>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d020      	beq.n	800a926 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	6978      	ldr	r0, [r7, #20]
 800a8f0:	f7ff ff88 	bl	800a804 <xTimerGenericCommand>
 800a8f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d114      	bne.n	800a926 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a8fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a900:	f383 8811 	msr	BASEPRI, r3
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	60fb      	str	r3, [r7, #12]
}
 800a90e:	bf00      	nop
 800a910:	bf00      	nop
 800a912:	e7fd      	b.n	800a910 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a91a:	f023 0301 	bic.w	r3, r3, #1
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	6a1b      	ldr	r3, [r3, #32]
 800a92a:	6978      	ldr	r0, [r7, #20]
 800a92c:	4798      	blx	r3
}
 800a92e:	bf00      	nop
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	24004ba0 	.word	0x24004ba0

0800a93c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a944:	f107 0308 	add.w	r3, r7, #8
 800a948:	4618      	mov	r0, r3
 800a94a:	f000 f859 	bl	800aa00 <prvGetNextExpireTime>
 800a94e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	4619      	mov	r1, r3
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f000 f805 	bl	800a964 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a95a:	f000 f8d7 	bl	800ab0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a95e:	bf00      	nop
 800a960:	e7f0      	b.n	800a944 <prvTimerTask+0x8>
	...

0800a964 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a96e:	f7ff f915 	bl	8009b9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a972:	f107 0308 	add.w	r3, r7, #8
 800a976:	4618      	mov	r0, r3
 800a978:	f000 f866 	bl	800aa48 <prvSampleTimeNow>
 800a97c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d130      	bne.n	800a9e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d10a      	bne.n	800a9a0 <prvProcessTimerOrBlockTask+0x3c>
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d806      	bhi.n	800a9a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a992:	f7ff f911 	bl	8009bb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a996:	68f9      	ldr	r1, [r7, #12]
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f7ff ff81 	bl	800a8a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a99e:	e024      	b.n	800a9ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d008      	beq.n	800a9b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a9a6:	4b13      	ldr	r3, [pc, #76]	@ (800a9f4 <prvProcessTimerOrBlockTask+0x90>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d101      	bne.n	800a9b4 <prvProcessTimerOrBlockTask+0x50>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e000      	b.n	800a9b6 <prvProcessTimerOrBlockTask+0x52>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a9b8:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f8 <prvProcessTimerOrBlockTask+0x94>)
 800a9ba:	6818      	ldr	r0, [r3, #0]
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	f7fe fe71 	bl	80096ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a9ca:	f7ff f8f5 	bl	8009bb8 <xTaskResumeAll>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10a      	bne.n	800a9ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a9d4:	4b09      	ldr	r3, [pc, #36]	@ (800a9fc <prvProcessTimerOrBlockTask+0x98>)
 800a9d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9da:	601a      	str	r2, [r3, #0]
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	f3bf 8f6f 	isb	sy
}
 800a9e4:	e001      	b.n	800a9ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a9e6:	f7ff f8e7 	bl	8009bb8 <xTaskResumeAll>
}
 800a9ea:	bf00      	nop
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	24004ba4 	.word	0x24004ba4
 800a9f8:	24004ba8 	.word	0x24004ba8
 800a9fc:	e000ed04 	.word	0xe000ed04

0800aa00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa08:	4b0e      	ldr	r3, [pc, #56]	@ (800aa44 <prvGetNextExpireTime+0x44>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d101      	bne.n	800aa16 <prvGetNextExpireTime+0x16>
 800aa12:	2201      	movs	r2, #1
 800aa14:	e000      	b.n	800aa18 <prvGetNextExpireTime+0x18>
 800aa16:	2200      	movs	r2, #0
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d105      	bne.n	800aa30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa24:	4b07      	ldr	r3, [pc, #28]	@ (800aa44 <prvGetNextExpireTime+0x44>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	60fb      	str	r3, [r7, #12]
 800aa2e:	e001      	b.n	800aa34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aa30:	2300      	movs	r3, #0
 800aa32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aa34:	68fb      	ldr	r3, [r7, #12]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	24004ba0 	.word	0x24004ba0

0800aa48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aa50:	f7ff f950 	bl	8009cf4 <xTaskGetTickCount>
 800aa54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aa56:	4b0b      	ldr	r3, [pc, #44]	@ (800aa84 <prvSampleTimeNow+0x3c>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d205      	bcs.n	800aa6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aa60:	f000 f93a 	bl	800acd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	601a      	str	r2, [r3, #0]
 800aa6a:	e002      	b.n	800aa72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aa72:	4a04      	ldr	r2, [pc, #16]	@ (800aa84 <prvSampleTimeNow+0x3c>)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aa78:	68fb      	ldr	r3, [r7, #12]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	24004bb0 	.word	0x24004bb0

0800aa88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aa96:	2300      	movs	r3, #0
 800aa98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	68ba      	ldr	r2, [r7, #8]
 800aa9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d812      	bhi.n	800aad4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	1ad2      	subs	r2, r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d302      	bcc.n	800aac2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aabc:	2301      	movs	r3, #1
 800aabe:	617b      	str	r3, [r7, #20]
 800aac0:	e01b      	b.n	800aafa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aac2:	4b10      	ldr	r3, [pc, #64]	@ (800ab04 <prvInsertTimerInActiveList+0x7c>)
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	3304      	adds	r3, #4
 800aaca:	4619      	mov	r1, r3
 800aacc:	4610      	mov	r0, r2
 800aace:	f7fd fa88 	bl	8007fe2 <vListInsert>
 800aad2:	e012      	b.n	800aafa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d206      	bcs.n	800aaea <prvInsertTimerInActiveList+0x62>
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d302      	bcc.n	800aaea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aae4:	2301      	movs	r3, #1
 800aae6:	617b      	str	r3, [r7, #20]
 800aae8:	e007      	b.n	800aafa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aaea:	4b07      	ldr	r3, [pc, #28]	@ (800ab08 <prvInsertTimerInActiveList+0x80>)
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	f7fd fa74 	bl	8007fe2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aafa:	697b      	ldr	r3, [r7, #20]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3718      	adds	r7, #24
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	24004ba4 	.word	0x24004ba4
 800ab08:	24004ba0 	.word	0x24004ba0

0800ab0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b08e      	sub	sp, #56	@ 0x38
 800ab10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab12:	e0ce      	b.n	800acb2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	da19      	bge.n	800ab4e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab1a:	1d3b      	adds	r3, r7, #4
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ab20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d10b      	bne.n	800ab3e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ab26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab2a:	f383 8811 	msr	BASEPRI, r3
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	61fb      	str	r3, [r7, #28]
}
 800ab38:	bf00      	nop
 800ab3a:	bf00      	nop
 800ab3c:	e7fd      	b.n	800ab3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ab3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab44:	6850      	ldr	r0, [r2, #4]
 800ab46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab48:	6892      	ldr	r2, [r2, #8]
 800ab4a:	4611      	mov	r1, r2
 800ab4c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f2c0 80ae 	blt.w	800acb2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ab5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab5c:	695b      	ldr	r3, [r3, #20]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d004      	beq.n	800ab6c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab64:	3304      	adds	r3, #4
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fd fa74 	bl	8008054 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab6c:	463b      	mov	r3, r7
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7ff ff6a 	bl	800aa48 <prvSampleTimeNow>
 800ab74:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b09      	cmp	r3, #9
 800ab7a:	f200 8097 	bhi.w	800acac <prvProcessReceivedCommands+0x1a0>
 800ab7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab84 <prvProcessReceivedCommands+0x78>)
 800ab80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab84:	0800abad 	.word	0x0800abad
 800ab88:	0800abad 	.word	0x0800abad
 800ab8c:	0800abad 	.word	0x0800abad
 800ab90:	0800ac23 	.word	0x0800ac23
 800ab94:	0800ac37 	.word	0x0800ac37
 800ab98:	0800ac83 	.word	0x0800ac83
 800ab9c:	0800abad 	.word	0x0800abad
 800aba0:	0800abad 	.word	0x0800abad
 800aba4:	0800ac23 	.word	0x0800ac23
 800aba8:	0800ac37 	.word	0x0800ac37
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800abac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abb2:	f043 0301 	orr.w	r3, r3, #1
 800abb6:	b2da      	uxtb	r2, r3
 800abb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	18d1      	adds	r1, r2, r3
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abcc:	f7ff ff5c 	bl	800aa88 <prvInsertTimerInActiveList>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d06c      	beq.n	800acb0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abd8:	6a1b      	ldr	r3, [r3, #32]
 800abda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abdc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abe4:	f003 0304 	and.w	r3, r3, #4
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d061      	beq.n	800acb0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abf0:	699b      	ldr	r3, [r3, #24]
 800abf2:	441a      	add	r2, r3
 800abf4:	2300      	movs	r3, #0
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	2300      	movs	r3, #0
 800abfa:	2100      	movs	r1, #0
 800abfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abfe:	f7ff fe01 	bl	800a804 <xTimerGenericCommand>
 800ac02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d152      	bne.n	800acb0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ac0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac0e:	f383 8811 	msr	BASEPRI, r3
 800ac12:	f3bf 8f6f 	isb	sy
 800ac16:	f3bf 8f4f 	dsb	sy
 800ac1a:	61bb      	str	r3, [r7, #24]
}
 800ac1c:	bf00      	nop
 800ac1e:	bf00      	nop
 800ac20:	e7fd      	b.n	800ac1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac28:	f023 0301 	bic.w	r3, r3, #1
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ac34:	e03d      	b.n	800acb2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac3c:	f043 0301 	orr.w	r3, r3, #1
 800ac40:	b2da      	uxtb	r2, r3
 800ac42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d10b      	bne.n	800ac6e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ac56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac5a:	f383 8811 	msr	BASEPRI, r3
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	617b      	str	r3, [r7, #20]
}
 800ac68:	bf00      	nop
 800ac6a:	bf00      	nop
 800ac6c:	e7fd      	b.n	800ac6a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ac6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac70:	699a      	ldr	r2, [r3, #24]
 800ac72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac74:	18d1      	adds	r1, r2, r3
 800ac76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac7c:	f7ff ff04 	bl	800aa88 <prvInsertTimerInActiveList>
					break;
 800ac80:	e017      	b.n	800acb2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ac82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac88:	f003 0302 	and.w	r3, r3, #2
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d103      	bne.n	800ac98 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ac90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac92:	f7fd f835 	bl	8007d00 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ac96:	e00c      	b.n	800acb2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac9e:	f023 0301 	bic.w	r3, r3, #1
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800acaa:	e002      	b.n	800acb2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800acac:	bf00      	nop
 800acae:	e000      	b.n	800acb2 <prvProcessReceivedCommands+0x1a6>
					break;
 800acb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800acb2:	4b08      	ldr	r3, [pc, #32]	@ (800acd4 <prvProcessReceivedCommands+0x1c8>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	1d39      	adds	r1, r7, #4
 800acb8:	2200      	movs	r2, #0
 800acba:	4618      	mov	r0, r3
 800acbc:	f7fe f8e2 	bl	8008e84 <xQueueReceive>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f47f af26 	bne.w	800ab14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800acc8:	bf00      	nop
 800acca:	bf00      	nop
 800accc:	3730      	adds	r7, #48	@ 0x30
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	24004ba8 	.word	0x24004ba8

0800acd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b088      	sub	sp, #32
 800acdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800acde:	e049      	b.n	800ad74 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ace0:	4b2e      	ldr	r3, [pc, #184]	@ (800ad9c <prvSwitchTimerLists+0xc4>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acea:	4b2c      	ldr	r3, [pc, #176]	@ (800ad9c <prvSwitchTimerLists+0xc4>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	3304      	adds	r3, #4
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7fd f9ab 	bl	8008054 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	6a1b      	ldr	r3, [r3, #32]
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad0c:	f003 0304 	and.w	r3, r3, #4
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d02f      	beq.n	800ad74 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	699b      	ldr	r3, [r3, #24]
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad1e:	68ba      	ldr	r2, [r7, #8]
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d90e      	bls.n	800ad44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	68ba      	ldr	r2, [r7, #8]
 800ad2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad32:	4b1a      	ldr	r3, [pc, #104]	@ (800ad9c <prvSwitchTimerLists+0xc4>)
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	3304      	adds	r3, #4
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	f7fd f950 	bl	8007fe2 <vListInsert>
 800ad42:	e017      	b.n	800ad74 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad44:	2300      	movs	r3, #0
 800ad46:	9300      	str	r3, [sp, #0]
 800ad48:	2300      	movs	r3, #0
 800ad4a:	693a      	ldr	r2, [r7, #16]
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f7ff fd58 	bl	800a804 <xTimerGenericCommand>
 800ad54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d10b      	bne.n	800ad74 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ad5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad60:	f383 8811 	msr	BASEPRI, r3
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	603b      	str	r3, [r7, #0]
}
 800ad6e:	bf00      	nop
 800ad70:	bf00      	nop
 800ad72:	e7fd      	b.n	800ad70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad74:	4b09      	ldr	r3, [pc, #36]	@ (800ad9c <prvSwitchTimerLists+0xc4>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1b0      	bne.n	800ace0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ad7e:	4b07      	ldr	r3, [pc, #28]	@ (800ad9c <prvSwitchTimerLists+0xc4>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ad84:	4b06      	ldr	r3, [pc, #24]	@ (800ada0 <prvSwitchTimerLists+0xc8>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a04      	ldr	r2, [pc, #16]	@ (800ad9c <prvSwitchTimerLists+0xc4>)
 800ad8a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ad8c:	4a04      	ldr	r2, [pc, #16]	@ (800ada0 <prvSwitchTimerLists+0xc8>)
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	6013      	str	r3, [r2, #0]
}
 800ad92:	bf00      	nop
 800ad94:	3718      	adds	r7, #24
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	24004ba0 	.word	0x24004ba0
 800ada0:	24004ba4 	.word	0x24004ba4

0800ada4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800adaa:	f7fd faad 	bl	8008308 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800adae:	4b15      	ldr	r3, [pc, #84]	@ (800ae04 <prvCheckForValidListAndQueue+0x60>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d120      	bne.n	800adf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800adb6:	4814      	ldr	r0, [pc, #80]	@ (800ae08 <prvCheckForValidListAndQueue+0x64>)
 800adb8:	f7fd f8c2 	bl	8007f40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800adbc:	4813      	ldr	r0, [pc, #76]	@ (800ae0c <prvCheckForValidListAndQueue+0x68>)
 800adbe:	f7fd f8bf 	bl	8007f40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800adc2:	4b13      	ldr	r3, [pc, #76]	@ (800ae10 <prvCheckForValidListAndQueue+0x6c>)
 800adc4:	4a10      	ldr	r2, [pc, #64]	@ (800ae08 <prvCheckForValidListAndQueue+0x64>)
 800adc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800adc8:	4b12      	ldr	r3, [pc, #72]	@ (800ae14 <prvCheckForValidListAndQueue+0x70>)
 800adca:	4a10      	ldr	r2, [pc, #64]	@ (800ae0c <prvCheckForValidListAndQueue+0x68>)
 800adcc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800adce:	2300      	movs	r3, #0
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	4b11      	ldr	r3, [pc, #68]	@ (800ae18 <prvCheckForValidListAndQueue+0x74>)
 800add4:	4a11      	ldr	r2, [pc, #68]	@ (800ae1c <prvCheckForValidListAndQueue+0x78>)
 800add6:	2110      	movs	r1, #16
 800add8:	200a      	movs	r0, #10
 800adda:	f7fd fc21 	bl	8008620 <xQueueGenericCreateStatic>
 800adde:	4603      	mov	r3, r0
 800ade0:	4a08      	ldr	r2, [pc, #32]	@ (800ae04 <prvCheckForValidListAndQueue+0x60>)
 800ade2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ade4:	4b07      	ldr	r3, [pc, #28]	@ (800ae04 <prvCheckForValidListAndQueue+0x60>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d005      	beq.n	800adf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800adec:	4b05      	ldr	r3, [pc, #20]	@ (800ae04 <prvCheckForValidListAndQueue+0x60>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	490b      	ldr	r1, [pc, #44]	@ (800ae20 <prvCheckForValidListAndQueue+0x7c>)
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fe fc06 	bl	8009604 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800adf8:	f7fd fab8 	bl	800836c <vPortExitCritical>
}
 800adfc:	bf00      	nop
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	24004ba8 	.word	0x24004ba8
 800ae08:	24004b78 	.word	0x24004b78
 800ae0c:	24004b8c 	.word	0x24004b8c
 800ae10:	24004ba0 	.word	0x24004ba0
 800ae14:	24004ba4 	.word	0x24004ba4
 800ae18:	24004c54 	.word	0x24004c54
 800ae1c:	24004bb4 	.word	0x24004bb4
 800ae20:	080186e4 	.word	0x080186e4

0800ae24 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ae2e:	88fb      	ldrh	r3, [r7, #6]
 800ae30:	021b      	lsls	r3, r3, #8
 800ae32:	b21a      	sxth	r2, r3
 800ae34:	88fb      	ldrh	r3, [r7, #6]
 800ae36:	0a1b      	lsrs	r3, r3, #8
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	b21b      	sxth	r3, r3
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	b21b      	sxth	r3, r3
 800ae40:	b29b      	uxth	r3, r3
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	370c      	adds	r7, #12
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr

0800ae4e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ae4e:	b480      	push	{r7}
 800ae50:	b083      	sub	sp, #12
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	061a      	lsls	r2, r3, #24
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	021b      	lsls	r3, r3, #8
 800ae5e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ae62:	431a      	orrs	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	0a1b      	lsrs	r3, r3, #8
 800ae68:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ae6c:	431a      	orrs	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	0e1b      	lsrs	r3, r3, #24
 800ae72:	4313      	orrs	r3, r2
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800ae84:	4b20      	ldr	r3, [pc, #128]	@ (800af08 <dhcp_inc_pcb_refcount+0x88>)
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d133      	bne.n	800aef4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800ae8c:	4b1f      	ldr	r3, [pc, #124]	@ (800af0c <dhcp_inc_pcb_refcount+0x8c>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d005      	beq.n	800aea0 <dhcp_inc_pcb_refcount+0x20>
 800ae94:	4b1e      	ldr	r3, [pc, #120]	@ (800af10 <dhcp_inc_pcb_refcount+0x90>)
 800ae96:	22e5      	movs	r2, #229	@ 0xe5
 800ae98:	491e      	ldr	r1, [pc, #120]	@ (800af14 <dhcp_inc_pcb_refcount+0x94>)
 800ae9a:	481f      	ldr	r0, [pc, #124]	@ (800af18 <dhcp_inc_pcb_refcount+0x98>)
 800ae9c:	f00c fc4a 	bl	8017734 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800aea0:	f00c fb00 	bl	80174a4 <udp_new>
 800aea4:	4603      	mov	r3, r0
 800aea6:	4a19      	ldr	r2, [pc, #100]	@ (800af0c <dhcp_inc_pcb_refcount+0x8c>)
 800aea8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800aeaa:	4b18      	ldr	r3, [pc, #96]	@ (800af0c <dhcp_inc_pcb_refcount+0x8c>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d102      	bne.n	800aeb8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800aeb2:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb6:	e024      	b.n	800af02 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800aeb8:	4b14      	ldr	r3, [pc, #80]	@ (800af0c <dhcp_inc_pcb_refcount+0x8c>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	7a5a      	ldrb	r2, [r3, #9]
 800aebe:	4b13      	ldr	r3, [pc, #76]	@ (800af0c <dhcp_inc_pcb_refcount+0x8c>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f042 0220 	orr.w	r2, r2, #32
 800aec6:	b2d2      	uxtb	r2, r2
 800aec8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800aeca:	4b10      	ldr	r3, [pc, #64]	@ (800af0c <dhcp_inc_pcb_refcount+0x8c>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2244      	movs	r2, #68	@ 0x44
 800aed0:	4912      	ldr	r1, [pc, #72]	@ (800af1c <dhcp_inc_pcb_refcount+0x9c>)
 800aed2:	4618      	mov	r0, r3
 800aed4:	f00c f98e 	bl	80171f4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800aed8:	4b0c      	ldr	r3, [pc, #48]	@ (800af0c <dhcp_inc_pcb_refcount+0x8c>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2243      	movs	r2, #67	@ 0x43
 800aede:	490f      	ldr	r1, [pc, #60]	@ (800af1c <dhcp_inc_pcb_refcount+0x9c>)
 800aee0:	4618      	mov	r0, r3
 800aee2:	f00c fa0f 	bl	8017304 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800aee6:	4b09      	ldr	r3, [pc, #36]	@ (800af0c <dhcp_inc_pcb_refcount+0x8c>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2200      	movs	r2, #0
 800aeec:	490c      	ldr	r1, [pc, #48]	@ (800af20 <dhcp_inc_pcb_refcount+0xa0>)
 800aeee:	4618      	mov	r0, r3
 800aef0:	f00c fa76 	bl	80173e0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800aef4:	4b04      	ldr	r3, [pc, #16]	@ (800af08 <dhcp_inc_pcb_refcount+0x88>)
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	3301      	adds	r3, #1
 800aefa:	b2da      	uxtb	r2, r3
 800aefc:	4b02      	ldr	r3, [pc, #8]	@ (800af08 <dhcp_inc_pcb_refcount+0x88>)
 800aefe:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	24004cd0 	.word	0x24004cd0
 800af0c:	24004ccc 	.word	0x24004ccc
 800af10:	080186ec 	.word	0x080186ec
 800af14:	08018754 	.word	0x08018754
 800af18:	0801877c 	.word	0x0801877c
 800af1c:	0801b8b0 	.word	0x0801b8b0
 800af20:	0800c7ad 	.word	0x0800c7ad

0800af24 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800af28:	4b0e      	ldr	r3, [pc, #56]	@ (800af64 <dhcp_dec_pcb_refcount+0x40>)
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d105      	bne.n	800af3c <dhcp_dec_pcb_refcount+0x18>
 800af30:	4b0d      	ldr	r3, [pc, #52]	@ (800af68 <dhcp_dec_pcb_refcount+0x44>)
 800af32:	22ff      	movs	r2, #255	@ 0xff
 800af34:	490d      	ldr	r1, [pc, #52]	@ (800af6c <dhcp_dec_pcb_refcount+0x48>)
 800af36:	480e      	ldr	r0, [pc, #56]	@ (800af70 <dhcp_dec_pcb_refcount+0x4c>)
 800af38:	f00c fbfc 	bl	8017734 <iprintf>
  dhcp_pcb_refcount--;
 800af3c:	4b09      	ldr	r3, [pc, #36]	@ (800af64 <dhcp_dec_pcb_refcount+0x40>)
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	3b01      	subs	r3, #1
 800af42:	b2da      	uxtb	r2, r3
 800af44:	4b07      	ldr	r3, [pc, #28]	@ (800af64 <dhcp_dec_pcb_refcount+0x40>)
 800af46:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800af48:	4b06      	ldr	r3, [pc, #24]	@ (800af64 <dhcp_dec_pcb_refcount+0x40>)
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d107      	bne.n	800af60 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800af50:	4b08      	ldr	r3, [pc, #32]	@ (800af74 <dhcp_dec_pcb_refcount+0x50>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4618      	mov	r0, r3
 800af56:	f00c fa63 	bl	8017420 <udp_remove>
    dhcp_pcb = NULL;
 800af5a:	4b06      	ldr	r3, [pc, #24]	@ (800af74 <dhcp_dec_pcb_refcount+0x50>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	601a      	str	r2, [r3, #0]
  }
}
 800af60:	bf00      	nop
 800af62:	bd80      	pop	{r7, pc}
 800af64:	24004cd0 	.word	0x24004cd0
 800af68:	080186ec 	.word	0x080186ec
 800af6c:	080187a4 	.word	0x080187a4
 800af70:	0801877c 	.word	0x0801877c
 800af74:	24004ccc 	.word	0x24004ccc

0800af78 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af84:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800af86:	210c      	movs	r1, #12
 800af88:	68f8      	ldr	r0, [r7, #12]
 800af8a:	f001 f851 	bl	800c030 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800af8e:	4b06      	ldr	r3, [pc, #24]	@ (800afa8 <dhcp_handle_nak+0x30>)
 800af90:	4a05      	ldr	r2, [pc, #20]	@ (800afa8 <dhcp_handle_nak+0x30>)
 800af92:	4905      	ldr	r1, [pc, #20]	@ (800afa8 <dhcp_handle_nak+0x30>)
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f005 f8f5 	bl	8010184 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fc4a 	bl	800b834 <dhcp_discover>
}
 800afa0:	bf00      	nop
 800afa2:	3710      	adds	r7, #16
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	0801b8b0 	.word	0x0801b8b0

0800afac <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800afba:	2108      	movs	r1, #8
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f001 f837 	bl	800c030 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	331c      	adds	r3, #28
 800afc6:	2200      	movs	r2, #0
 800afc8:	4619      	mov	r1, r3
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f002 fb38 	bl	800d640 <etharp_query>
 800afd0:	4603      	mov	r3, r0
 800afd2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	799b      	ldrb	r3, [r3, #6]
 800afd8:	2bff      	cmp	r3, #255	@ 0xff
 800afda:	d005      	beq.n	800afe8 <dhcp_check+0x3c>
    dhcp->tries++;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	799b      	ldrb	r3, [r3, #6]
 800afe0:	3301      	adds	r3, #1
 800afe2:	b2da      	uxtb	r2, r3
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800afe8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800afec:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800afee:	893b      	ldrh	r3, [r7, #8]
 800aff0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800aff4:	4a06      	ldr	r2, [pc, #24]	@ (800b010 <dhcp_check+0x64>)
 800aff6:	fb82 1203 	smull	r1, r2, r2, r3
 800affa:	1152      	asrs	r2, r2, #5
 800affc:	17db      	asrs	r3, r3, #31
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	b29a      	uxth	r2, r3
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800b006:	bf00      	nop
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	10624dd3 	.word	0x10624dd3

0800b014 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b022:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800b024:	4b0c      	ldr	r3, [pc, #48]	@ (800b058 <dhcp_handle_offer+0x44>)
 800b026:	789b      	ldrb	r3, [r3, #2]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d011      	beq.n	800b050 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800b032:	4b0a      	ldr	r3, [pc, #40]	@ (800b05c <dhcp_handle_offer+0x48>)
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	4618      	mov	r0, r3
 800b038:	f7ff ff09 	bl	800ae4e <lwip_htonl>
 800b03c:	4602      	mov	r2, r0
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	691a      	ldr	r2, [r3, #16]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f808 	bl	800b060 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800b050:	bf00      	nop
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	24004cc4 	.word	0x24004cc4
 800b05c:	24004ca4 	.word	0x24004ca4

0800b060 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800b060:	b5b0      	push	{r4, r5, r7, lr}
 800b062:	b08a      	sub	sp, #40	@ 0x28
 800b064:	af02      	add	r7, sp, #8
 800b066:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d109      	bne.n	800b082 <dhcp_select+0x22>
 800b06e:	4b71      	ldr	r3, [pc, #452]	@ (800b234 <dhcp_select+0x1d4>)
 800b070:	f240 1277 	movw	r2, #375	@ 0x177
 800b074:	4970      	ldr	r1, [pc, #448]	@ (800b238 <dhcp_select+0x1d8>)
 800b076:	4871      	ldr	r0, [pc, #452]	@ (800b23c <dhcp_select+0x1dc>)
 800b078:	f00c fb5c 	bl	8017734 <iprintf>
 800b07c:	f06f 030f 	mvn.w	r3, #15
 800b080:	e0d3      	b.n	800b22a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b086:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d109      	bne.n	800b0a2 <dhcp_select+0x42>
 800b08e:	4b69      	ldr	r3, [pc, #420]	@ (800b234 <dhcp_select+0x1d4>)
 800b090:	f240 1279 	movw	r2, #377	@ 0x179
 800b094:	496a      	ldr	r1, [pc, #424]	@ (800b240 <dhcp_select+0x1e0>)
 800b096:	4869      	ldr	r0, [pc, #420]	@ (800b23c <dhcp_select+0x1dc>)
 800b098:	f00c fb4c 	bl	8017734 <iprintf>
 800b09c:	f06f 0305 	mvn.w	r3, #5
 800b0a0:	e0c3      	b.n	800b22a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800b0a2:	2101      	movs	r1, #1
 800b0a4:	69b8      	ldr	r0, [r7, #24]
 800b0a6:	f000 ffc3 	bl	800c030 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800b0aa:	f107 030c 	add.w	r3, r7, #12
 800b0ae:	2203      	movs	r2, #3
 800b0b0:	69b9      	ldr	r1, [r7, #24]
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f001 fc48 	bl	800c948 <dhcp_create_msg>
 800b0b8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f000 8085 	beq.w	800b1cc <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800b0c8:	89b8      	ldrh	r0, [r7, #12]
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b0d0:	2302      	movs	r3, #2
 800b0d2:	2239      	movs	r2, #57	@ 0x39
 800b0d4:	f000 ffc6 	bl	800c064 <dhcp_option>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800b0dc:	89b8      	ldrh	r0, [r7, #12]
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	f001 f815 	bl	800c118 <dhcp_option_short>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800b0f2:	89b8      	ldrh	r0, [r7, #12]
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b0fa:	2304      	movs	r3, #4
 800b0fc:	2232      	movs	r2, #50	@ 0x32
 800b0fe:	f000 ffb1 	bl	800c064 <dhcp_option>
 800b102:	4603      	mov	r3, r0
 800b104:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800b106:	89bc      	ldrh	r4, [r7, #12]
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	69db      	ldr	r3, [r3, #28]
 800b112:	4618      	mov	r0, r3
 800b114:	f7ff fe9b 	bl	800ae4e <lwip_htonl>
 800b118:	4603      	mov	r3, r0
 800b11a:	461a      	mov	r2, r3
 800b11c:	4629      	mov	r1, r5
 800b11e:	4620      	mov	r0, r4
 800b120:	f001 f82c 	bl	800c17c <dhcp_option_long>
 800b124:	4603      	mov	r3, r0
 800b126:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800b128:	89b8      	ldrh	r0, [r7, #12]
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b130:	2304      	movs	r3, #4
 800b132:	2236      	movs	r2, #54	@ 0x36
 800b134:	f000 ff96 	bl	800c064 <dhcp_option>
 800b138:	4603      	mov	r3, r0
 800b13a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800b13c:	89bc      	ldrh	r4, [r7, #12]
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	4618      	mov	r0, r3
 800b14a:	f7ff fe80 	bl	800ae4e <lwip_htonl>
 800b14e:	4603      	mov	r3, r0
 800b150:	461a      	mov	r2, r3
 800b152:	4629      	mov	r1, r5
 800b154:	4620      	mov	r0, r4
 800b156:	f001 f811 	bl	800c17c <dhcp_option_long>
 800b15a:	4603      	mov	r3, r0
 800b15c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800b15e:	89b8      	ldrh	r0, [r7, #12]
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b166:	2303      	movs	r3, #3
 800b168:	2237      	movs	r2, #55	@ 0x37
 800b16a:	f000 ff7b 	bl	800c064 <dhcp_option>
 800b16e:	4603      	mov	r3, r0
 800b170:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b172:	2300      	movs	r3, #0
 800b174:	77bb      	strb	r3, [r7, #30]
 800b176:	e00e      	b.n	800b196 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800b178:	89b8      	ldrh	r0, [r7, #12]
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b180:	7fbb      	ldrb	r3, [r7, #30]
 800b182:	4a30      	ldr	r2, [pc, #192]	@ (800b244 <dhcp_select+0x1e4>)
 800b184:	5cd3      	ldrb	r3, [r2, r3]
 800b186:	461a      	mov	r2, r3
 800b188:	f000 ffa0 	bl	800c0cc <dhcp_option_byte>
 800b18c:	4603      	mov	r3, r0
 800b18e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b190:	7fbb      	ldrb	r3, [r7, #30]
 800b192:	3301      	adds	r3, #1
 800b194:	77bb      	strb	r3, [r7, #30]
 800b196:	7fbb      	ldrb	r3, [r7, #30]
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d9ed      	bls.n	800b178 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800b19c:	89b8      	ldrh	r0, [r7, #12]
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	33f0      	adds	r3, #240	@ 0xf0
 800b1a2:	697a      	ldr	r2, [r7, #20]
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	f001 fca5 	bl	800caf4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800b1aa:	4b27      	ldr	r3, [pc, #156]	@ (800b248 <dhcp_select+0x1e8>)
 800b1ac:	6818      	ldr	r0, [r3, #0]
 800b1ae:	4b27      	ldr	r3, [pc, #156]	@ (800b24c <dhcp_select+0x1ec>)
 800b1b0:	9301      	str	r3, [sp, #4]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	9300      	str	r3, [sp, #0]
 800b1b6:	2343      	movs	r3, #67	@ 0x43
 800b1b8:	4a25      	ldr	r2, [pc, #148]	@ (800b250 <dhcp_select+0x1f0>)
 800b1ba:	6979      	ldr	r1, [r7, #20]
 800b1bc:	f00b ff34 	bl	8017028 <udp_sendto_if_src>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800b1c4:	6978      	ldr	r0, [r7, #20]
 800b1c6:	f005 fce9 	bl	8010b9c <pbuf_free>
 800b1ca:	e001      	b.n	800b1d0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800b1cc:	23ff      	movs	r3, #255	@ 0xff
 800b1ce:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	799b      	ldrb	r3, [r3, #6]
 800b1d4:	2bff      	cmp	r3, #255	@ 0xff
 800b1d6:	d005      	beq.n	800b1e4 <dhcp_select+0x184>
    dhcp->tries++;
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	799b      	ldrb	r3, [r3, #6]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	b2da      	uxtb	r2, r3
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	799b      	ldrb	r3, [r3, #6]
 800b1e8:	2b05      	cmp	r3, #5
 800b1ea:	d80d      	bhi.n	800b208 <dhcp_select+0x1a8>
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	799b      	ldrb	r3, [r3, #6]
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	4093      	lsls	r3, r2
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	0152      	lsls	r2, r2, #5
 800b1fc:	1ad2      	subs	r2, r2, r3
 800b1fe:	0092      	lsls	r2, r2, #2
 800b200:	4413      	add	r3, r2
 800b202:	00db      	lsls	r3, r3, #3
 800b204:	b29b      	uxth	r3, r3
 800b206:	e001      	b.n	800b20c <dhcp_select+0x1ac>
 800b208:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800b20c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800b20e:	89fb      	ldrh	r3, [r7, #14]
 800b210:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800b214:	4a0f      	ldr	r2, [pc, #60]	@ (800b254 <dhcp_select+0x1f4>)
 800b216:	fb82 1203 	smull	r1, r2, r2, r3
 800b21a:	1152      	asrs	r2, r2, #5
 800b21c:	17db      	asrs	r3, r3, #31
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	b29a      	uxth	r2, r3
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800b226:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3720      	adds	r7, #32
 800b22e:	46bd      	mov	sp, r7
 800b230:	bdb0      	pop	{r4, r5, r7, pc}
 800b232:	bf00      	nop
 800b234:	080186ec 	.word	0x080186ec
 800b238:	080187c8 	.word	0x080187c8
 800b23c:	0801877c 	.word	0x0801877c
 800b240:	080187e4 	.word	0x080187e4
 800b244:	24000044 	.word	0x24000044
 800b248:	24004ccc 	.word	0x24004ccc
 800b24c:	0801b8b0 	.word	0x0801b8b0
 800b250:	0801b8b4 	.word	0x0801b8b4
 800b254:	10624dd3 	.word	0x10624dd3

0800b258 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800b25e:	4b27      	ldr	r3, [pc, #156]	@ (800b2fc <dhcp_coarse_tmr+0xa4>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	607b      	str	r3, [r7, #4]
 800b264:	e042      	b.n	800b2ec <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b26a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d039      	beq.n	800b2e6 <dhcp_coarse_tmr+0x8e>
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	795b      	ldrb	r3, [r3, #5]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d035      	beq.n	800b2e6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	8a9b      	ldrh	r3, [r3, #20]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d012      	beq.n	800b2a8 <dhcp_coarse_tmr+0x50>
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	8a5b      	ldrh	r3, [r3, #18]
 800b286:	3301      	adds	r3, #1
 800b288:	b29a      	uxth	r2, r3
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	825a      	strh	r2, [r3, #18]
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	8a5a      	ldrh	r2, [r3, #18]
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	8a9b      	ldrh	r3, [r3, #20]
 800b296:	429a      	cmp	r2, r3
 800b298:	d106      	bne.n	800b2a8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 fe2e 	bl	800befc <dhcp_release_and_stop>
        dhcp_start(netif);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 f96b 	bl	800b57c <dhcp_start>
 800b2a6:	e01e      	b.n	800b2e6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	8a1b      	ldrh	r3, [r3, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d00b      	beq.n	800b2c8 <dhcp_coarse_tmr+0x70>
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	8a1b      	ldrh	r3, [r3, #16]
 800b2b4:	1e5a      	subs	r2, r3, #1
 800b2b6:	b291      	uxth	r1, r2
 800b2b8:	683a      	ldr	r2, [r7, #0]
 800b2ba:	8211      	strh	r1, [r2, #16]
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d103      	bne.n	800b2c8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f8c7 	bl	800b454 <dhcp_t2_timeout>
 800b2c6:	e00e      	b.n	800b2e6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	89db      	ldrh	r3, [r3, #14]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00a      	beq.n	800b2e6 <dhcp_coarse_tmr+0x8e>
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	89db      	ldrh	r3, [r3, #14]
 800b2d4:	1e5a      	subs	r2, r3, #1
 800b2d6:	b291      	uxth	r1, r2
 800b2d8:	683a      	ldr	r2, [r7, #0]
 800b2da:	81d1      	strh	r1, [r2, #14]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d102      	bne.n	800b2e6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 f888 	bl	800b3f6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	607b      	str	r3, [r7, #4]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1b9      	bne.n	800b266 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800b2f2:	bf00      	nop
 800b2f4:	bf00      	nop
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	24007eec 	.word	0x24007eec

0800b300 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800b306:	4b16      	ldr	r3, [pc, #88]	@ (800b360 <dhcp_fine_tmr+0x60>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	607b      	str	r3, [r7, #4]
 800b30c:	e020      	b.n	800b350 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b312:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d017      	beq.n	800b34a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	891b      	ldrh	r3, [r3, #8]
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d906      	bls.n	800b330 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	891b      	ldrh	r3, [r3, #8]
 800b326:	3b01      	subs	r3, #1
 800b328:	b29a      	uxth	r2, r3
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	811a      	strh	r2, [r3, #8]
 800b32e:	e00c      	b.n	800b34a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	891b      	ldrh	r3, [r3, #8]
 800b334:	2b01      	cmp	r3, #1
 800b336:	d108      	bne.n	800b34a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	891b      	ldrh	r3, [r3, #8]
 800b33c:	3b01      	subs	r3, #1
 800b33e:	b29a      	uxth	r2, r3
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 f80d 	bl	800b364 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	607b      	str	r3, [r7, #4]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1db      	bne.n	800b30e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800b356:	bf00      	nop
 800b358:	bf00      	nop
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	24007eec 	.word	0x24007eec

0800b364 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b370:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	795b      	ldrb	r3, [r3, #5]
 800b376:	2b0c      	cmp	r3, #12
 800b378:	d003      	beq.n	800b382 <dhcp_timeout+0x1e>
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	795b      	ldrb	r3, [r3, #5]
 800b37e:	2b06      	cmp	r3, #6
 800b380:	d103      	bne.n	800b38a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 fa56 	bl	800b834 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800b388:	e031      	b.n	800b3ee <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	795b      	ldrb	r3, [r3, #5]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d10e      	bne.n	800b3b0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	799b      	ldrb	r3, [r3, #6]
 800b396:	2b05      	cmp	r3, #5
 800b398:	d803      	bhi.n	800b3a2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f7ff fe60 	bl	800b060 <dhcp_select>
}
 800b3a0:	e025      	b.n	800b3ee <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 fdaa 	bl	800befc <dhcp_release_and_stop>
      dhcp_start(netif);
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 f8e7 	bl	800b57c <dhcp_start>
}
 800b3ae:	e01e      	b.n	800b3ee <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	795b      	ldrb	r3, [r3, #5]
 800b3b4:	2b08      	cmp	r3, #8
 800b3b6:	d10b      	bne.n	800b3d0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	799b      	ldrb	r3, [r3, #6]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d803      	bhi.n	800b3c8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f7ff fdf3 	bl	800afac <dhcp_check>
}
 800b3c6:	e012      	b.n	800b3ee <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 fad5 	bl	800b978 <dhcp_bind>
}
 800b3ce:	e00e      	b.n	800b3ee <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	795b      	ldrb	r3, [r3, #5]
 800b3d4:	2b03      	cmp	r3, #3
 800b3d6:	d10a      	bne.n	800b3ee <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	799b      	ldrb	r3, [r3, #6]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d803      	bhi.n	800b3e8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 fcd7 	bl	800bd94 <dhcp_reboot>
}
 800b3e6:	e002      	b.n	800b3ee <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 fa23 	bl	800b834 <dhcp_discover>
}
 800b3ee:	bf00      	nop
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b084      	sub	sp, #16
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b402:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	795b      	ldrb	r3, [r3, #5]
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d007      	beq.n	800b41c <dhcp_t1_timeout+0x26>
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	795b      	ldrb	r3, [r3, #5]
 800b410:	2b0a      	cmp	r3, #10
 800b412:	d003      	beq.n	800b41c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800b418:	2b05      	cmp	r3, #5
 800b41a:	d117      	bne.n	800b44c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fb85 	bl	800bb2c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	899b      	ldrh	r3, [r3, #12]
 800b426:	461a      	mov	r2, r3
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	8a5b      	ldrh	r3, [r3, #18]
 800b42c:	1ad3      	subs	r3, r2, r3
 800b42e:	2b01      	cmp	r3, #1
 800b430:	dd0c      	ble.n	800b44c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	899b      	ldrh	r3, [r3, #12]
 800b436:	461a      	mov	r2, r3
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	8a5b      	ldrh	r3, [r3, #18]
 800b43c:	1ad3      	subs	r3, r2, r3
 800b43e:	2b00      	cmp	r3, #0
 800b440:	da00      	bge.n	800b444 <dhcp_t1_timeout+0x4e>
 800b442:	3301      	adds	r3, #1
 800b444:	105b      	asrs	r3, r3, #1
 800b446:	b29a      	uxth	r2, r3
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800b44c:	bf00      	nop
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b460:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	795b      	ldrb	r3, [r3, #5]
 800b466:	2b01      	cmp	r3, #1
 800b468:	d00b      	beq.n	800b482 <dhcp_t2_timeout+0x2e>
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	795b      	ldrb	r3, [r3, #5]
 800b46e:	2b0a      	cmp	r3, #10
 800b470:	d007      	beq.n	800b482 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800b476:	2b05      	cmp	r3, #5
 800b478:	d003      	beq.n	800b482 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	795b      	ldrb	r3, [r3, #5]
 800b47e:	2b04      	cmp	r3, #4
 800b480:	d117      	bne.n	800b4b2 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fbec 	bl	800bc60 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	8a9b      	ldrh	r3, [r3, #20]
 800b48c:	461a      	mov	r2, r3
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	8a5b      	ldrh	r3, [r3, #18]
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	2b01      	cmp	r3, #1
 800b496:	dd0c      	ble.n	800b4b2 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	8a9b      	ldrh	r3, [r3, #20]
 800b49c:	461a      	mov	r2, r3
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	8a5b      	ldrh	r3, [r3, #18]
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	da00      	bge.n	800b4aa <dhcp_t2_timeout+0x56>
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	105b      	asrs	r3, r3, #1
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800b4b2:	bf00      	nop
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
	...

0800b4bc <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4ca:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800b4d8:	4b26      	ldr	r3, [pc, #152]	@ (800b574 <dhcp_handle_ack+0xb8>)
 800b4da:	78db      	ldrb	r3, [r3, #3]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d003      	beq.n	800b4e8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800b4e0:	4b25      	ldr	r3, [pc, #148]	@ (800b578 <dhcp_handle_ack+0xbc>)
 800b4e2:	68da      	ldr	r2, [r3, #12]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800b4e8:	4b22      	ldr	r3, [pc, #136]	@ (800b574 <dhcp_handle_ack+0xb8>)
 800b4ea:	791b      	ldrb	r3, [r3, #4]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d004      	beq.n	800b4fa <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800b4f0:	4b21      	ldr	r3, [pc, #132]	@ (800b578 <dhcp_handle_ack+0xbc>)
 800b4f2:	691a      	ldr	r2, [r3, #16]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b4f8:	e004      	b.n	800b504 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4fe:	085a      	lsrs	r2, r3, #1
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800b504:	4b1b      	ldr	r3, [pc, #108]	@ (800b574 <dhcp_handle_ack+0xb8>)
 800b506:	795b      	ldrb	r3, [r3, #5]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d004      	beq.n	800b516 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800b50c:	4b1a      	ldr	r3, [pc, #104]	@ (800b578 <dhcp_handle_ack+0xbc>)
 800b50e:	695a      	ldr	r2, [r3, #20]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	631a      	str	r2, [r3, #48]	@ 0x30
 800b514:	e007      	b.n	800b526 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b51a:	4613      	mov	r3, r2
 800b51c:	00db      	lsls	r3, r3, #3
 800b51e:	1a9b      	subs	r3, r3, r2
 800b520:	08da      	lsrs	r2, r3, #3
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	691a      	ldr	r2, [r3, #16]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800b52e:	4b11      	ldr	r3, [pc, #68]	@ (800b574 <dhcp_handle_ack+0xb8>)
 800b530:	799b      	ldrb	r3, [r3, #6]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00b      	beq.n	800b54e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800b536:	4b10      	ldr	r3, [pc, #64]	@ (800b578 <dhcp_handle_ack+0xbc>)
 800b538:	699b      	ldr	r3, [r3, #24]
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7ff fc87 	bl	800ae4e <lwip_htonl>
 800b540:	4602      	mov	r2, r0
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2201      	movs	r2, #1
 800b54a:	71da      	strb	r2, [r3, #7]
 800b54c:	e002      	b.n	800b554 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800b554:	4b07      	ldr	r3, [pc, #28]	@ (800b574 <dhcp_handle_ack+0xb8>)
 800b556:	79db      	ldrb	r3, [r3, #7]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d007      	beq.n	800b56c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800b55c:	4b06      	ldr	r3, [pc, #24]	@ (800b578 <dhcp_handle_ack+0xbc>)
 800b55e:	69db      	ldr	r3, [r3, #28]
 800b560:	4618      	mov	r0, r3
 800b562:	f7ff fc74 	bl	800ae4e <lwip_htonl>
 800b566:	4602      	mov	r2, r0
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800b56c:	bf00      	nop
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	24004cc4 	.word	0x24004cc4
 800b578:	24004ca4 	.word	0x24004ca4

0800b57c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d109      	bne.n	800b59e <dhcp_start+0x22>
 800b58a:	4b37      	ldr	r3, [pc, #220]	@ (800b668 <dhcp_start+0xec>)
 800b58c:	f240 22e7 	movw	r2, #743	@ 0x2e7
 800b590:	4936      	ldr	r1, [pc, #216]	@ (800b66c <dhcp_start+0xf0>)
 800b592:	4837      	ldr	r0, [pc, #220]	@ (800b670 <dhcp_start+0xf4>)
 800b594:	f00c f8ce 	bl	8017734 <iprintf>
 800b598:	f06f 030f 	mvn.w	r3, #15
 800b59c:	e060      	b.n	800b660 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b5a4:	f003 0301 	and.w	r3, r3, #1
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d109      	bne.n	800b5c0 <dhcp_start+0x44>
 800b5ac:	4b2e      	ldr	r3, [pc, #184]	@ (800b668 <dhcp_start+0xec>)
 800b5ae:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800b5b2:	4930      	ldr	r1, [pc, #192]	@ (800b674 <dhcp_start+0xf8>)
 800b5b4:	482e      	ldr	r0, [pc, #184]	@ (800b670 <dhcp_start+0xf4>)
 800b5b6:	f00c f8bd 	bl	8017734 <iprintf>
 800b5ba:	f06f 030f 	mvn.w	r3, #15
 800b5be:	e04f      	b.n	800b660 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5c4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b5ca:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 800b5ce:	d202      	bcs.n	800b5d6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800b5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d4:	e044      	b.n	800b660 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10d      	bne.n	800b5f8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800b5dc:	2034      	movs	r0, #52	@ 0x34
 800b5de:	f004 fa1d 	bl	800fa1c <mem_malloc>
 800b5e2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d102      	bne.n	800b5f0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800b5ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ee:	e037      	b.n	800b660 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	625a      	str	r2, [r3, #36]	@ 0x24
 800b5f6:	e005      	b.n	800b604 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	791b      	ldrb	r3, [r3, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d001      	beq.n	800b604 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800b600:	f7ff fc90 	bl	800af24 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800b604:	2234      	movs	r2, #52	@ 0x34
 800b606:	2100      	movs	r1, #0
 800b608:	68f8      	ldr	r0, [r7, #12]
 800b60a:	f00c f9eb 	bl	80179e4 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800b60e:	f7ff fc37 	bl	800ae80 <dhcp_inc_pcb_refcount>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <dhcp_start+0xa2>
    return ERR_MEM;
 800b618:	f04f 33ff 	mov.w	r3, #4294967295
 800b61c:	e020      	b.n	800b660 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2201      	movs	r2, #1
 800b622:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b62a:	f003 0304 	and.w	r3, r3, #4
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d105      	bne.n	800b63e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800b632:	2102      	movs	r1, #2
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f000 fcfb 	bl	800c030 <dhcp_set_state>
    return ERR_OK;
 800b63a:	2300      	movs	r3, #0
 800b63c:	e010      	b.n	800b660 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f8f8 	bl	800b834 <dhcp_discover>
 800b644:	4603      	mov	r3, r0
 800b646:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800b648:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d005      	beq.n	800b65c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 fc53 	bl	800befc <dhcp_release_and_stop>
    return ERR_MEM;
 800b656:	f04f 33ff 	mov.w	r3, #4294967295
 800b65a:	e001      	b.n	800b660 <dhcp_start+0xe4>
  }
  return result;
 800b65c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b660:	4618      	mov	r0, r3
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	080186ec 	.word	0x080186ec
 800b66c:	08018800 	.word	0x08018800
 800b670:	0801877c 	.word	0x0801877c
 800b674:	08018844 	.word	0x08018844

0800b678 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b684:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d025      	beq.n	800b6d8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	795b      	ldrb	r3, [r3, #5]
 800b690:	2b0a      	cmp	r3, #10
 800b692:	d008      	beq.n	800b6a6 <dhcp_network_changed+0x2e>
 800b694:	2b0a      	cmp	r3, #10
 800b696:	dc0d      	bgt.n	800b6b4 <dhcp_network_changed+0x3c>
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d01f      	beq.n	800b6dc <dhcp_network_changed+0x64>
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	db09      	blt.n	800b6b4 <dhcp_network_changed+0x3c>
 800b6a0:	3b03      	subs	r3, #3
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	d806      	bhi.n	800b6b4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 fb71 	bl	800bd94 <dhcp_reboot>
      break;
 800b6b2:	e014      	b.n	800b6de <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	795b      	ldrb	r3, [r3, #5]
 800b6b8:	2b0c      	cmp	r3, #12
 800b6ba:	d906      	bls.n	800b6ca <dhcp_network_changed+0x52>
 800b6bc:	4b09      	ldr	r3, [pc, #36]	@ (800b6e4 <dhcp_network_changed+0x6c>)
 800b6be:	f240 326d 	movw	r2, #877	@ 0x36d
 800b6c2:	4909      	ldr	r1, [pc, #36]	@ (800b6e8 <dhcp_network_changed+0x70>)
 800b6c4:	4809      	ldr	r0, [pc, #36]	@ (800b6ec <dhcp_network_changed+0x74>)
 800b6c6:	f00c f835 	bl	8017734 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f8af 	bl	800b834 <dhcp_discover>
      break;
 800b6d6:	e002      	b.n	800b6de <dhcp_network_changed+0x66>
    return;
 800b6d8:	bf00      	nop
 800b6da:	e000      	b.n	800b6de <dhcp_network_changed+0x66>
      break;
 800b6dc:	bf00      	nop
  }
}
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	080186ec 	.word	0x080186ec
 800b6e8:	08018868 	.word	0x08018868
 800b6ec:	0801877c 	.word	0x0801877c

0800b6f0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d107      	bne.n	800b710 <dhcp_arp_reply+0x20>
 800b700:	4b0e      	ldr	r3, [pc, #56]	@ (800b73c <dhcp_arp_reply+0x4c>)
 800b702:	f240 328b 	movw	r2, #907	@ 0x38b
 800b706:	490e      	ldr	r1, [pc, #56]	@ (800b740 <dhcp_arp_reply+0x50>)
 800b708:	480e      	ldr	r0, [pc, #56]	@ (800b744 <dhcp_arp_reply+0x54>)
 800b70a:	f00c f813 	bl	8017734 <iprintf>
 800b70e:	e012      	b.n	800b736 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b714:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00c      	beq.n	800b736 <dhcp_arp_reply+0x46>
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	795b      	ldrb	r3, [r3, #5]
 800b720:	2b08      	cmp	r3, #8
 800b722:	d108      	bne.n	800b736 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	69db      	ldr	r3, [r3, #28]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d102      	bne.n	800b736 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 f809 	bl	800b748 <dhcp_decline>
    }
  }
}
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	080186ec 	.word	0x080186ec
 800b740:	08018800 	.word	0x08018800
 800b744:	0801877c 	.word	0x0801877c

0800b748 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800b748:	b5b0      	push	{r4, r5, r7, lr}
 800b74a:	b08a      	sub	sp, #40	@ 0x28
 800b74c:	af02      	add	r7, sp, #8
 800b74e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b754:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800b756:	210c      	movs	r1, #12
 800b758:	69b8      	ldr	r0, [r7, #24]
 800b75a:	f000 fc69 	bl	800c030 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800b75e:	f107 030c 	add.w	r3, r7, #12
 800b762:	2204      	movs	r2, #4
 800b764:	69b9      	ldr	r1, [r7, #24]
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f001 f8ee 	bl	800c948 <dhcp_create_msg>
 800b76c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d035      	beq.n	800b7e0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800b77a:	89b8      	ldrh	r0, [r7, #12]
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b782:	2304      	movs	r3, #4
 800b784:	2232      	movs	r2, #50	@ 0x32
 800b786:	f000 fc6d 	bl	800c064 <dhcp_option>
 800b78a:	4603      	mov	r3, r0
 800b78c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800b78e:	89bc      	ldrh	r4, [r7, #12]
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	69db      	ldr	r3, [r3, #28]
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7ff fb57 	bl	800ae4e <lwip_htonl>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	4629      	mov	r1, r5
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f000 fce8 	bl	800c17c <dhcp_option_long>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800b7b0:	89b8      	ldrh	r0, [r7, #12]
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	33f0      	adds	r3, #240	@ 0xf0
 800b7b6:	697a      	ldr	r2, [r7, #20]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	f001 f99b 	bl	800caf4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800b7be:	4b19      	ldr	r3, [pc, #100]	@ (800b824 <dhcp_decline+0xdc>)
 800b7c0:	6818      	ldr	r0, [r3, #0]
 800b7c2:	4b19      	ldr	r3, [pc, #100]	@ (800b828 <dhcp_decline+0xe0>)
 800b7c4:	9301      	str	r3, [sp, #4]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	9300      	str	r3, [sp, #0]
 800b7ca:	2343      	movs	r3, #67	@ 0x43
 800b7cc:	4a17      	ldr	r2, [pc, #92]	@ (800b82c <dhcp_decline+0xe4>)
 800b7ce:	6979      	ldr	r1, [r7, #20]
 800b7d0:	f00b fc2a 	bl	8017028 <udp_sendto_if_src>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800b7d8:	6978      	ldr	r0, [r7, #20]
 800b7da:	f005 f9df 	bl	8010b9c <pbuf_free>
 800b7de:	e001      	b.n	800b7e4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800b7e0:	23ff      	movs	r3, #255	@ 0xff
 800b7e2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	799b      	ldrb	r3, [r3, #6]
 800b7e8:	2bff      	cmp	r3, #255	@ 0xff
 800b7ea:	d005      	beq.n	800b7f8 <dhcp_decline+0xb0>
    dhcp->tries++;
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	799b      	ldrb	r3, [r3, #6]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	b2da      	uxtb	r2, r3
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800b7f8:	f242 7310 	movw	r3, #10000	@ 0x2710
 800b7fc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800b7fe:	89fb      	ldrh	r3, [r7, #14]
 800b800:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800b804:	4a0a      	ldr	r2, [pc, #40]	@ (800b830 <dhcp_decline+0xe8>)
 800b806:	fb82 1203 	smull	r1, r2, r2, r3
 800b80a:	1152      	asrs	r2, r2, #5
 800b80c:	17db      	asrs	r3, r3, #31
 800b80e:	1ad3      	subs	r3, r2, r3
 800b810:	b29a      	uxth	r2, r3
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800b816:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3720      	adds	r7, #32
 800b81e:	46bd      	mov	sp, r7
 800b820:	bdb0      	pop	{r4, r5, r7, pc}
 800b822:	bf00      	nop
 800b824:	24004ccc 	.word	0x24004ccc
 800b828:	0801b8b0 	.word	0x0801b8b0
 800b82c:	0801b8b4 	.word	0x0801b8b4
 800b830:	10624dd3 	.word	0x10624dd3

0800b834 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b08a      	sub	sp, #40	@ 0x28
 800b838:	af02      	add	r7, sp, #8
 800b83a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b840:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800b842:	2300      	movs	r3, #0
 800b844:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	2200      	movs	r2, #0
 800b84a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800b84c:	2106      	movs	r1, #6
 800b84e:	69b8      	ldr	r0, [r7, #24]
 800b850:	f000 fbee 	bl	800c030 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800b854:	f107 0308 	add.w	r3, r7, #8
 800b858:	2201      	movs	r2, #1
 800b85a:	69b9      	ldr	r1, [r7, #24]
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f001 f873 	bl	800c948 <dhcp_create_msg>
 800b862:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d04b      	beq.n	800b902 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800b870:	8938      	ldrh	r0, [r7, #8]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b878:	2302      	movs	r3, #2
 800b87a:	2239      	movs	r2, #57	@ 0x39
 800b87c:	f000 fbf2 	bl	800c064 <dhcp_option>
 800b880:	4603      	mov	r3, r0
 800b882:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800b884:	8938      	ldrh	r0, [r7, #8]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b890:	461a      	mov	r2, r3
 800b892:	f000 fc41 	bl	800c118 <dhcp_option_short>
 800b896:	4603      	mov	r3, r0
 800b898:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800b89a:	8938      	ldrh	r0, [r7, #8]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	2237      	movs	r2, #55	@ 0x37
 800b8a6:	f000 fbdd 	bl	800c064 <dhcp_option>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	77fb      	strb	r3, [r7, #31]
 800b8b2:	e00e      	b.n	800b8d2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800b8b4:	8938      	ldrh	r0, [r7, #8]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b8bc:	7ffb      	ldrb	r3, [r7, #31]
 800b8be:	4a29      	ldr	r2, [pc, #164]	@ (800b964 <dhcp_discover+0x130>)
 800b8c0:	5cd3      	ldrb	r3, [r2, r3]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	f000 fc02 	bl	800c0cc <dhcp_option_byte>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b8cc:	7ffb      	ldrb	r3, [r7, #31]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	77fb      	strb	r3, [r7, #31]
 800b8d2:	7ffb      	ldrb	r3, [r7, #31]
 800b8d4:	2b02      	cmp	r3, #2
 800b8d6:	d9ed      	bls.n	800b8b4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800b8d8:	8938      	ldrh	r0, [r7, #8]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	33f0      	adds	r3, #240	@ 0xf0
 800b8de:	693a      	ldr	r2, [r7, #16]
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	f001 f907 	bl	800caf4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800b8e6:	4b20      	ldr	r3, [pc, #128]	@ (800b968 <dhcp_discover+0x134>)
 800b8e8:	6818      	ldr	r0, [r3, #0]
 800b8ea:	4b20      	ldr	r3, [pc, #128]	@ (800b96c <dhcp_discover+0x138>)
 800b8ec:	9301      	str	r3, [sp, #4]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	2343      	movs	r3, #67	@ 0x43
 800b8f4:	4a1e      	ldr	r2, [pc, #120]	@ (800b970 <dhcp_discover+0x13c>)
 800b8f6:	6939      	ldr	r1, [r7, #16]
 800b8f8:	f00b fb96 	bl	8017028 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800b8fc:	6938      	ldr	r0, [r7, #16]
 800b8fe:	f005 f94d 	bl	8010b9c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	799b      	ldrb	r3, [r3, #6]
 800b906:	2bff      	cmp	r3, #255	@ 0xff
 800b908:	d005      	beq.n	800b916 <dhcp_discover+0xe2>
    dhcp->tries++;
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	799b      	ldrb	r3, [r3, #6]
 800b90e:	3301      	adds	r3, #1
 800b910:	b2da      	uxtb	r2, r3
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	799b      	ldrb	r3, [r3, #6]
 800b91a:	2b05      	cmp	r3, #5
 800b91c:	d80d      	bhi.n	800b93a <dhcp_discover+0x106>
 800b91e:	69bb      	ldr	r3, [r7, #24]
 800b920:	799b      	ldrb	r3, [r3, #6]
 800b922:	461a      	mov	r2, r3
 800b924:	2301      	movs	r3, #1
 800b926:	4093      	lsls	r3, r2
 800b928:	b29b      	uxth	r3, r3
 800b92a:	461a      	mov	r2, r3
 800b92c:	0152      	lsls	r2, r2, #5
 800b92e:	1ad2      	subs	r2, r2, r3
 800b930:	0092      	lsls	r2, r2, #2
 800b932:	4413      	add	r3, r2
 800b934:	00db      	lsls	r3, r3, #3
 800b936:	b29b      	uxth	r3, r3
 800b938:	e001      	b.n	800b93e <dhcp_discover+0x10a>
 800b93a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800b93e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800b940:	897b      	ldrh	r3, [r7, #10]
 800b942:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800b946:	4a0b      	ldr	r2, [pc, #44]	@ (800b974 <dhcp_discover+0x140>)
 800b948:	fb82 1203 	smull	r1, r2, r2, r3
 800b94c:	1152      	asrs	r2, r2, #5
 800b94e:	17db      	asrs	r3, r3, #31
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	b29a      	uxth	r2, r3
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800b958:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3720      	adds	r7, #32
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	24000044 	.word	0x24000044
 800b968:	24004ccc 	.word	0x24004ccc
 800b96c:	0801b8b0 	.word	0x0801b8b0
 800b970:	0801b8b4 	.word	0x0801b8b4
 800b974:	10624dd3 	.word	0x10624dd3

0800b978 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b088      	sub	sp, #32
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d107      	bne.n	800b996 <dhcp_bind+0x1e>
 800b986:	4b64      	ldr	r3, [pc, #400]	@ (800bb18 <dhcp_bind+0x1a0>)
 800b988:	f240 4215 	movw	r2, #1045	@ 0x415
 800b98c:	4963      	ldr	r1, [pc, #396]	@ (800bb1c <dhcp_bind+0x1a4>)
 800b98e:	4864      	ldr	r0, [pc, #400]	@ (800bb20 <dhcp_bind+0x1a8>)
 800b990:	f00b fed0 	bl	8017734 <iprintf>
 800b994:	e0bc      	b.n	800bb10 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b99a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d107      	bne.n	800b9b2 <dhcp_bind+0x3a>
 800b9a2:	4b5d      	ldr	r3, [pc, #372]	@ (800bb18 <dhcp_bind+0x1a0>)
 800b9a4:	f240 4217 	movw	r2, #1047	@ 0x417
 800b9a8:	495e      	ldr	r1, [pc, #376]	@ (800bb24 <dhcp_bind+0x1ac>)
 800b9aa:	485d      	ldr	r0, [pc, #372]	@ (800bb20 <dhcp_bind+0x1a8>)
 800b9ac:	f00b fec2 	bl	8017734 <iprintf>
 800b9b0:	e0ae      	b.n	800bb10 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c0:	d019      	beq.n	800b9f6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9c6:	331e      	adds	r3, #30
 800b9c8:	4a57      	ldr	r2, [pc, #348]	@ (800bb28 <dhcp_bind+0x1b0>)
 800b9ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ce:	095b      	lsrs	r3, r3, #5
 800b9d0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9d8:	d302      	bcc.n	800b9e0 <dhcp_bind+0x68>
      timeout = 0xffff;
 800b9da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b9de:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	8a9b      	ldrh	r3, [r3, #20]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d102      	bne.n	800b9f6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fe:	d01d      	beq.n	800ba3c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba04:	331e      	adds	r3, #30
 800ba06:	4a48      	ldr	r2, [pc, #288]	@ (800bb28 <dhcp_bind+0x1b0>)
 800ba08:	fba2 2303 	umull	r2, r3, r2, r3
 800ba0c:	095b      	lsrs	r3, r3, #5
 800ba0e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba16:	d302      	bcc.n	800ba1e <dhcp_bind+0xa6>
      timeout = 0xffff;
 800ba18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ba1c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	895b      	ldrh	r3, [r3, #10]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d102      	bne.n	800ba34 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	2201      	movs	r2, #1
 800ba32:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	895a      	ldrh	r2, [r3, #10]
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba44:	d01d      	beq.n	800ba82 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba4a:	331e      	adds	r3, #30
 800ba4c:	4a36      	ldr	r2, [pc, #216]	@ (800bb28 <dhcp_bind+0x1b0>)
 800ba4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ba52:	095b      	lsrs	r3, r3, #5
 800ba54:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba5c:	d302      	bcc.n	800ba64 <dhcp_bind+0xec>
      timeout = 0xffff;
 800ba5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ba62:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	b29a      	uxth	r2, r3
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	899b      	ldrh	r3, [r3, #12]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d102      	bne.n	800ba7a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	2201      	movs	r2, #1
 800ba78:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	899a      	ldrh	r2, [r3, #12]
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	895a      	ldrh	r2, [r3, #10]
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	899b      	ldrh	r3, [r3, #12]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d306      	bcc.n	800ba9c <dhcp_bind+0x124>
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	899b      	ldrh	r3, [r3, #12]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d002      	beq.n	800ba9c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800ba9c:	69bb      	ldr	r3, [r7, #24]
 800ba9e:	79db      	ldrb	r3, [r3, #7]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d003      	beq.n	800baac <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	6a1b      	ldr	r3, [r3, #32]
 800baa8:	613b      	str	r3, [r7, #16]
 800baaa:	e014      	b.n	800bad6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	331c      	adds	r3, #28
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800bab4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	db02      	blt.n	800bac2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800babc:	23ff      	movs	r3, #255	@ 0xff
 800babe:	613b      	str	r3, [r7, #16]
 800bac0:	e009      	b.n	800bad6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800bac2:	7dfb      	ldrb	r3, [r7, #23]
 800bac4:	2bbf      	cmp	r3, #191	@ 0xbf
 800bac6:	d903      	bls.n	800bad0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800bac8:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800bacc:	613b      	str	r3, [r7, #16]
 800bace:	e002      	b.n	800bad6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800bad0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bad4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bada:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d108      	bne.n	800baf4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	69da      	ldr	r2, [r3, #28]
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	4013      	ands	r3, r2
 800baea:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800baf2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800baf4:	210a      	movs	r1, #10
 800baf6:	69b8      	ldr	r0, [r7, #24]
 800baf8:	f000 fa9a 	bl	800c030 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800bafc:	69bb      	ldr	r3, [r7, #24]
 800bafe:	f103 011c 	add.w	r1, r3, #28
 800bb02:	f107 030c 	add.w	r3, r7, #12
 800bb06:	f107 0210 	add.w	r2, r7, #16
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f004 fb3a 	bl	8010184 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800bb10:	3720      	adds	r7, #32
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	080186ec 	.word	0x080186ec
 800bb1c:	0801887c 	.word	0x0801887c
 800bb20:	0801877c 	.word	0x0801877c
 800bb24:	08018898 	.word	0x08018898
 800bb28:	88888889 	.word	0x88888889

0800bb2c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b08a      	sub	sp, #40	@ 0x28
 800bb30:	af02      	add	r7, sp, #8
 800bb32:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb38:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800bb3a:	2105      	movs	r1, #5
 800bb3c:	69b8      	ldr	r0, [r7, #24]
 800bb3e:	f000 fa77 	bl	800c030 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800bb42:	f107 030c 	add.w	r3, r7, #12
 800bb46:	2203      	movs	r2, #3
 800bb48:	69b9      	ldr	r1, [r7, #24]
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 fefc 	bl	800c948 <dhcp_create_msg>
 800bb50:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d04e      	beq.n	800bbf6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800bb5e:	89b8      	ldrh	r0, [r7, #12]
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800bb66:	2302      	movs	r3, #2
 800bb68:	2239      	movs	r2, #57	@ 0x39
 800bb6a:	f000 fa7b 	bl	800c064 <dhcp_option>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800bb72:	89b8      	ldrh	r0, [r7, #12]
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb7e:	461a      	mov	r2, r3
 800bb80:	f000 faca 	bl	800c118 <dhcp_option_short>
 800bb84:	4603      	mov	r3, r0
 800bb86:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800bb88:	89b8      	ldrh	r0, [r7, #12]
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800bb90:	2303      	movs	r3, #3
 800bb92:	2237      	movs	r2, #55	@ 0x37
 800bb94:	f000 fa66 	bl	800c064 <dhcp_option>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	77bb      	strb	r3, [r7, #30]
 800bba0:	e00e      	b.n	800bbc0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800bba2:	89b8      	ldrh	r0, [r7, #12]
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800bbaa:	7fbb      	ldrb	r3, [r7, #30]
 800bbac:	4a29      	ldr	r2, [pc, #164]	@ (800bc54 <dhcp_renew+0x128>)
 800bbae:	5cd3      	ldrb	r3, [r2, r3]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	f000 fa8b 	bl	800c0cc <dhcp_option_byte>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800bbba:	7fbb      	ldrb	r3, [r7, #30]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	77bb      	strb	r3, [r7, #30]
 800bbc0:	7fbb      	ldrb	r3, [r7, #30]
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	d9ed      	bls.n	800bba2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800bbc6:	89b8      	ldrh	r0, [r7, #12]
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	33f0      	adds	r3, #240	@ 0xf0
 800bbcc:	697a      	ldr	r2, [r7, #20]
 800bbce:	4619      	mov	r1, r3
 800bbd0:	f000 ff90 	bl	800caf4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800bbd4:	4b20      	ldr	r3, [pc, #128]	@ (800bc58 <dhcp_renew+0x12c>)
 800bbd6:	6818      	ldr	r0, [r3, #0]
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	f103 0218 	add.w	r2, r3, #24
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	2343      	movs	r3, #67	@ 0x43
 800bbe4:	6979      	ldr	r1, [r7, #20]
 800bbe6:	f00b f9ab 	bl	8016f40 <udp_sendto_if>
 800bbea:	4603      	mov	r3, r0
 800bbec:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800bbee:	6978      	ldr	r0, [r7, #20]
 800bbf0:	f004 ffd4 	bl	8010b9c <pbuf_free>
 800bbf4:	e001      	b.n	800bbfa <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800bbf6:	23ff      	movs	r3, #255	@ 0xff
 800bbf8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	799b      	ldrb	r3, [r3, #6]
 800bbfe:	2bff      	cmp	r3, #255	@ 0xff
 800bc00:	d005      	beq.n	800bc0e <dhcp_renew+0xe2>
    dhcp->tries++;
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	799b      	ldrb	r3, [r3, #6]
 800bc06:	3301      	adds	r3, #1
 800bc08:	b2da      	uxtb	r2, r3
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	799b      	ldrb	r3, [r3, #6]
 800bc12:	2b09      	cmp	r3, #9
 800bc14:	d809      	bhi.n	800bc2a <dhcp_renew+0xfe>
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	799b      	ldrb	r3, [r3, #6]
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	0152      	lsls	r2, r2, #5
 800bc1e:	1ad2      	subs	r2, r2, r3
 800bc20:	0092      	lsls	r2, r2, #2
 800bc22:	4413      	add	r3, r2
 800bc24:	011b      	lsls	r3, r3, #4
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	e001      	b.n	800bc2e <dhcp_renew+0x102>
 800bc2a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800bc2e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800bc30:	89fb      	ldrh	r3, [r7, #14]
 800bc32:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800bc36:	4a09      	ldr	r2, [pc, #36]	@ (800bc5c <dhcp_renew+0x130>)
 800bc38:	fb82 1203 	smull	r1, r2, r2, r3
 800bc3c:	1152      	asrs	r2, r2, #5
 800bc3e:	17db      	asrs	r3, r3, #31
 800bc40:	1ad3      	subs	r3, r2, r3
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800bc48:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3720      	adds	r7, #32
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	24000044 	.word	0x24000044
 800bc58:	24004ccc 	.word	0x24004ccc
 800bc5c:	10624dd3 	.word	0x10624dd3

0800bc60 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b08a      	sub	sp, #40	@ 0x28
 800bc64:	af02      	add	r7, sp, #8
 800bc66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc6c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800bc6e:	2104      	movs	r1, #4
 800bc70:	69b8      	ldr	r0, [r7, #24]
 800bc72:	f000 f9dd 	bl	800c030 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800bc76:	f107 030c 	add.w	r3, r7, #12
 800bc7a:	2203      	movs	r2, #3
 800bc7c:	69b9      	ldr	r1, [r7, #24]
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 fe62 	bl	800c948 <dhcp_create_msg>
 800bc84:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d04c      	beq.n	800bd26 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800bc92:	89b8      	ldrh	r0, [r7, #12]
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800bc9a:	2302      	movs	r3, #2
 800bc9c:	2239      	movs	r2, #57	@ 0x39
 800bc9e:	f000 f9e1 	bl	800c064 <dhcp_option>
 800bca2:	4603      	mov	r3, r0
 800bca4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800bca6:	89b8      	ldrh	r0, [r7, #12]
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	f000 fa30 	bl	800c118 <dhcp_option_short>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800bcbc:	89b8      	ldrh	r0, [r7, #12]
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800bcc4:	2303      	movs	r3, #3
 800bcc6:	2237      	movs	r2, #55	@ 0x37
 800bcc8:	f000 f9cc 	bl	800c064 <dhcp_option>
 800bccc:	4603      	mov	r3, r0
 800bcce:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	77bb      	strb	r3, [r7, #30]
 800bcd4:	e00e      	b.n	800bcf4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800bcd6:	89b8      	ldrh	r0, [r7, #12]
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800bcde:	7fbb      	ldrb	r3, [r7, #30]
 800bce0:	4a28      	ldr	r2, [pc, #160]	@ (800bd84 <dhcp_rebind+0x124>)
 800bce2:	5cd3      	ldrb	r3, [r2, r3]
 800bce4:	461a      	mov	r2, r3
 800bce6:	f000 f9f1 	bl	800c0cc <dhcp_option_byte>
 800bcea:	4603      	mov	r3, r0
 800bcec:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800bcee:	7fbb      	ldrb	r3, [r7, #30]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	77bb      	strb	r3, [r7, #30]
 800bcf4:	7fbb      	ldrb	r3, [r7, #30]
 800bcf6:	2b02      	cmp	r3, #2
 800bcf8:	d9ed      	bls.n	800bcd6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800bcfa:	89b8      	ldrh	r0, [r7, #12]
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	33f0      	adds	r3, #240	@ 0xf0
 800bd00:	697a      	ldr	r2, [r7, #20]
 800bd02:	4619      	mov	r1, r3
 800bd04:	f000 fef6 	bl	800caf4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800bd08:	4b1f      	ldr	r3, [pc, #124]	@ (800bd88 <dhcp_rebind+0x128>)
 800bd0a:	6818      	ldr	r0, [r3, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	2343      	movs	r3, #67	@ 0x43
 800bd12:	4a1e      	ldr	r2, [pc, #120]	@ (800bd8c <dhcp_rebind+0x12c>)
 800bd14:	6979      	ldr	r1, [r7, #20]
 800bd16:	f00b f913 	bl	8016f40 <udp_sendto_if>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800bd1e:	6978      	ldr	r0, [r7, #20]
 800bd20:	f004 ff3c 	bl	8010b9c <pbuf_free>
 800bd24:	e001      	b.n	800bd2a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800bd26:	23ff      	movs	r3, #255	@ 0xff
 800bd28:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	799b      	ldrb	r3, [r3, #6]
 800bd2e:	2bff      	cmp	r3, #255	@ 0xff
 800bd30:	d005      	beq.n	800bd3e <dhcp_rebind+0xde>
    dhcp->tries++;
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	799b      	ldrb	r3, [r3, #6]
 800bd36:	3301      	adds	r3, #1
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	799b      	ldrb	r3, [r3, #6]
 800bd42:	2b09      	cmp	r3, #9
 800bd44:	d809      	bhi.n	800bd5a <dhcp_rebind+0xfa>
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	799b      	ldrb	r3, [r3, #6]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	0152      	lsls	r2, r2, #5
 800bd4e:	1ad2      	subs	r2, r2, r3
 800bd50:	0092      	lsls	r2, r2, #2
 800bd52:	4413      	add	r3, r2
 800bd54:	00db      	lsls	r3, r3, #3
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	e001      	b.n	800bd5e <dhcp_rebind+0xfe>
 800bd5a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800bd5e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800bd60:	89fb      	ldrh	r3, [r7, #14]
 800bd62:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800bd66:	4a0a      	ldr	r2, [pc, #40]	@ (800bd90 <dhcp_rebind+0x130>)
 800bd68:	fb82 1203 	smull	r1, r2, r2, r3
 800bd6c:	1152      	asrs	r2, r2, #5
 800bd6e:	17db      	asrs	r3, r3, #31
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	b29a      	uxth	r2, r3
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800bd78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3720      	adds	r7, #32
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	24000044 	.word	0x24000044
 800bd88:	24004ccc 	.word	0x24004ccc
 800bd8c:	0801b8b4 	.word	0x0801b8b4
 800bd90:	10624dd3 	.word	0x10624dd3

0800bd94 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800bd94:	b5b0      	push	{r4, r5, r7, lr}
 800bd96:	b08a      	sub	sp, #40	@ 0x28
 800bd98:	af02      	add	r7, sp, #8
 800bd9a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bda0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800bda2:	2103      	movs	r1, #3
 800bda4:	69b8      	ldr	r0, [r7, #24]
 800bda6:	f000 f943 	bl	800c030 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800bdaa:	f107 030c 	add.w	r3, r7, #12
 800bdae:	2203      	movs	r2, #3
 800bdb0:	69b9      	ldr	r1, [r7, #24]
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 fdc8 	bl	800c948 <dhcp_create_msg>
 800bdb8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d066      	beq.n	800be8e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800bdc6:	89b8      	ldrh	r0, [r7, #12]
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800bdce:	2302      	movs	r3, #2
 800bdd0:	2239      	movs	r2, #57	@ 0x39
 800bdd2:	f000 f947 	bl	800c064 <dhcp_option>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800bdda:	89b8      	ldrh	r0, [r7, #12]
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	33f0      	adds	r3, #240	@ 0xf0
 800bde0:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800bde4:	4619      	mov	r1, r3
 800bde6:	f000 f997 	bl	800c118 <dhcp_option_short>
 800bdea:	4603      	mov	r3, r0
 800bdec:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800bdee:	89b8      	ldrh	r0, [r7, #12]
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800bdf6:	2304      	movs	r3, #4
 800bdf8:	2232      	movs	r2, #50	@ 0x32
 800bdfa:	f000 f933 	bl	800c064 <dhcp_option>
 800bdfe:	4603      	mov	r3, r0
 800be00:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800be02:	89bc      	ldrh	r4, [r7, #12]
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	69db      	ldr	r3, [r3, #28]
 800be0e:	4618      	mov	r0, r3
 800be10:	f7ff f81d 	bl	800ae4e <lwip_htonl>
 800be14:	4603      	mov	r3, r0
 800be16:	461a      	mov	r2, r3
 800be18:	4629      	mov	r1, r5
 800be1a:	4620      	mov	r0, r4
 800be1c:	f000 f9ae 	bl	800c17c <dhcp_option_long>
 800be20:	4603      	mov	r3, r0
 800be22:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800be24:	89b8      	ldrh	r0, [r7, #12]
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800be2c:	2303      	movs	r3, #3
 800be2e:	2237      	movs	r2, #55	@ 0x37
 800be30:	f000 f918 	bl	800c064 <dhcp_option>
 800be34:	4603      	mov	r3, r0
 800be36:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800be38:	2300      	movs	r3, #0
 800be3a:	77bb      	strb	r3, [r7, #30]
 800be3c:	e00e      	b.n	800be5c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800be3e:	89b8      	ldrh	r0, [r7, #12]
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800be46:	7fbb      	ldrb	r3, [r7, #30]
 800be48:	4a28      	ldr	r2, [pc, #160]	@ (800beec <dhcp_reboot+0x158>)
 800be4a:	5cd3      	ldrb	r3, [r2, r3]
 800be4c:	461a      	mov	r2, r3
 800be4e:	f000 f93d 	bl	800c0cc <dhcp_option_byte>
 800be52:	4603      	mov	r3, r0
 800be54:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800be56:	7fbb      	ldrb	r3, [r7, #30]
 800be58:	3301      	adds	r3, #1
 800be5a:	77bb      	strb	r3, [r7, #30]
 800be5c:	7fbb      	ldrb	r3, [r7, #30]
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d9ed      	bls.n	800be3e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800be62:	89b8      	ldrh	r0, [r7, #12]
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	33f0      	adds	r3, #240	@ 0xf0
 800be68:	697a      	ldr	r2, [r7, #20]
 800be6a:	4619      	mov	r1, r3
 800be6c:	f000 fe42 	bl	800caf4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800be70:	4b1f      	ldr	r3, [pc, #124]	@ (800bef0 <dhcp_reboot+0x15c>)
 800be72:	6818      	ldr	r0, [r3, #0]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	2343      	movs	r3, #67	@ 0x43
 800be7a:	4a1e      	ldr	r2, [pc, #120]	@ (800bef4 <dhcp_reboot+0x160>)
 800be7c:	6979      	ldr	r1, [r7, #20]
 800be7e:	f00b f85f 	bl	8016f40 <udp_sendto_if>
 800be82:	4603      	mov	r3, r0
 800be84:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800be86:	6978      	ldr	r0, [r7, #20]
 800be88:	f004 fe88 	bl	8010b9c <pbuf_free>
 800be8c:	e001      	b.n	800be92 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800be8e:	23ff      	movs	r3, #255	@ 0xff
 800be90:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	799b      	ldrb	r3, [r3, #6]
 800be96:	2bff      	cmp	r3, #255	@ 0xff
 800be98:	d005      	beq.n	800bea6 <dhcp_reboot+0x112>
    dhcp->tries++;
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	799b      	ldrb	r3, [r3, #6]
 800be9e:	3301      	adds	r3, #1
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	799b      	ldrb	r3, [r3, #6]
 800beaa:	2b09      	cmp	r3, #9
 800beac:	d809      	bhi.n	800bec2 <dhcp_reboot+0x12e>
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	799b      	ldrb	r3, [r3, #6]
 800beb2:	461a      	mov	r2, r3
 800beb4:	0152      	lsls	r2, r2, #5
 800beb6:	1ad2      	subs	r2, r2, r3
 800beb8:	0092      	lsls	r2, r2, #2
 800beba:	4413      	add	r3, r2
 800bebc:	00db      	lsls	r3, r3, #3
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	e001      	b.n	800bec6 <dhcp_reboot+0x132>
 800bec2:	f242 7310 	movw	r3, #10000	@ 0x2710
 800bec6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800bec8:	89fb      	ldrh	r3, [r7, #14]
 800beca:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800bece:	4a0a      	ldr	r2, [pc, #40]	@ (800bef8 <dhcp_reboot+0x164>)
 800bed0:	fb82 1203 	smull	r1, r2, r2, r3
 800bed4:	1152      	asrs	r2, r2, #5
 800bed6:	17db      	asrs	r3, r3, #31
 800bed8:	1ad3      	subs	r3, r2, r3
 800beda:	b29a      	uxth	r2, r3
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800bee0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3720      	adds	r7, #32
 800bee8:	46bd      	mov	sp, r7
 800beea:	bdb0      	pop	{r4, r5, r7, pc}
 800beec:	24000044 	.word	0x24000044
 800bef0:	24004ccc 	.word	0x24004ccc
 800bef4:	0801b8b4 	.word	0x0801b8b4
 800bef8:	10624dd3 	.word	0x10624dd3

0800befc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800befc:	b5b0      	push	{r4, r5, r7, lr}
 800befe:	b08a      	sub	sp, #40	@ 0x28
 800bf00:	af02      	add	r7, sp, #8
 800bf02:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf08:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f000 8084 	beq.w	800c01a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	795b      	ldrb	r3, [r3, #5]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f000 8081 	beq.w	800c01e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	699b      	ldr	r3, [r3, #24]
 800bf20:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	2200      	movs	r2, #0
 800bf26:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	2200      	movs	r2, #0
 800bf32:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	2200      	movs	r2, #0
 800bf38:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	631a      	str	r2, [r3, #48]	@ 0x30
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	2200      	movs	r2, #0
 800bf54:	829a      	strh	r2, [r3, #20]
 800bf56:	69fb      	ldr	r3, [r7, #28]
 800bf58:	8a9a      	ldrh	r2, [r3, #20]
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	825a      	strh	r2, [r3, #18]
 800bf5e:	69fb      	ldr	r3, [r7, #28]
 800bf60:	8a5a      	ldrh	r2, [r3, #18]
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	821a      	strh	r2, [r3, #16]
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	8a1a      	ldrh	r2, [r3, #16]
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fdee 	bl	800cb50 <dhcp_supplied_address>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d03b      	beq.n	800bff2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800bf7a:	f107 030e 	add.w	r3, r7, #14
 800bf7e:	2207      	movs	r2, #7
 800bf80:	69f9      	ldr	r1, [r7, #28]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 fce0 	bl	800c948 <dhcp_create_msg>
 800bf88:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800bf8a:	69bb      	ldr	r3, [r7, #24]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d030      	beq.n	800bff2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800bf96:	89f8      	ldrh	r0, [r7, #14]
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800bf9e:	2304      	movs	r3, #4
 800bfa0:	2236      	movs	r2, #54	@ 0x36
 800bfa2:	f000 f85f 	bl	800c064 <dhcp_option>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800bfaa:	89fc      	ldrh	r4, [r7, #14]
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7fe ff4a 	bl	800ae4e <lwip_htonl>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	4629      	mov	r1, r5
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f000 f8db 	bl	800c17c <dhcp_option_long>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800bfca:	89f8      	ldrh	r0, [r7, #14]
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	33f0      	adds	r3, #240	@ 0xf0
 800bfd0:	69ba      	ldr	r2, [r7, #24]
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	f000 fd8e 	bl	800caf4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800bfd8:	4b13      	ldr	r3, [pc, #76]	@ (800c028 <dhcp_release_and_stop+0x12c>)
 800bfda:	6818      	ldr	r0, [r3, #0]
 800bfdc:	f107 0210 	add.w	r2, r7, #16
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	2343      	movs	r3, #67	@ 0x43
 800bfe6:	69b9      	ldr	r1, [r7, #24]
 800bfe8:	f00a ffaa 	bl	8016f40 <udp_sendto_if>
      pbuf_free(p_out);
 800bfec:	69b8      	ldr	r0, [r7, #24]
 800bfee:	f004 fdd5 	bl	8010b9c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800bff2:	4b0e      	ldr	r3, [pc, #56]	@ (800c02c <dhcp_release_and_stop+0x130>)
 800bff4:	4a0d      	ldr	r2, [pc, #52]	@ (800c02c <dhcp_release_and_stop+0x130>)
 800bff6:	490d      	ldr	r1, [pc, #52]	@ (800c02c <dhcp_release_and_stop+0x130>)
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f004 f8c3 	bl	8010184 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800bffe:	2100      	movs	r1, #0
 800c000:	69f8      	ldr	r0, [r7, #28]
 800c002:	f000 f815 	bl	800c030 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800c006:	69fb      	ldr	r3, [r7, #28]
 800c008:	791b      	ldrb	r3, [r3, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d008      	beq.n	800c020 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800c00e:	f7fe ff89 	bl	800af24 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	2200      	movs	r2, #0
 800c016:	711a      	strb	r2, [r3, #4]
 800c018:	e002      	b.n	800c020 <dhcp_release_and_stop+0x124>
    return;
 800c01a:	bf00      	nop
 800c01c:	e000      	b.n	800c020 <dhcp_release_and_stop+0x124>
    return;
 800c01e:	bf00      	nop
  }
}
 800c020:	3720      	adds	r7, #32
 800c022:	46bd      	mov	sp, r7
 800c024:	bdb0      	pop	{r4, r5, r7, pc}
 800c026:	bf00      	nop
 800c028:	24004ccc 	.word	0x24004ccc
 800c02c:	0801b8b0 	.word	0x0801b8b0

0800c030 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	460b      	mov	r3, r1
 800c03a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	795b      	ldrb	r3, [r3, #5]
 800c040:	78fa      	ldrb	r2, [r7, #3]
 800c042:	429a      	cmp	r2, r3
 800c044:	d008      	beq.n	800c058 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	78fa      	ldrb	r2, [r7, #3]
 800c04a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	811a      	strh	r2, [r3, #8]
  }
}
 800c058:	bf00      	nop
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6039      	str	r1, [r7, #0]
 800c06c:	4611      	mov	r1, r2
 800c06e:	461a      	mov	r2, r3
 800c070:	4603      	mov	r3, r0
 800c072:	80fb      	strh	r3, [r7, #6]
 800c074:	460b      	mov	r3, r1
 800c076:	717b      	strb	r3, [r7, #5]
 800c078:	4613      	mov	r3, r2
 800c07a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800c07c:	88fa      	ldrh	r2, [r7, #6]
 800c07e:	793b      	ldrb	r3, [r7, #4]
 800c080:	4413      	add	r3, r2
 800c082:	3302      	adds	r3, #2
 800c084:	2b44      	cmp	r3, #68	@ 0x44
 800c086:	d906      	bls.n	800c096 <dhcp_option+0x32>
 800c088:	4b0d      	ldr	r3, [pc, #52]	@ (800c0c0 <dhcp_option+0x5c>)
 800c08a:	f240 529a 	movw	r2, #1434	@ 0x59a
 800c08e:	490d      	ldr	r1, [pc, #52]	@ (800c0c4 <dhcp_option+0x60>)
 800c090:	480d      	ldr	r0, [pc, #52]	@ (800c0c8 <dhcp_option+0x64>)
 800c092:	f00b fb4f 	bl	8017734 <iprintf>
  options[options_out_len++] = option_type;
 800c096:	88fb      	ldrh	r3, [r7, #6]
 800c098:	1c5a      	adds	r2, r3, #1
 800c09a:	80fa      	strh	r2, [r7, #6]
 800c09c:	461a      	mov	r2, r3
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	797a      	ldrb	r2, [r7, #5]
 800c0a4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800c0a6:	88fb      	ldrh	r3, [r7, #6]
 800c0a8:	1c5a      	adds	r2, r3, #1
 800c0aa:	80fa      	strh	r2, [r7, #6]
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	793a      	ldrb	r2, [r7, #4]
 800c0b4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c0b6:	88fb      	ldrh	r3, [r7, #6]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3708      	adds	r7, #8
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	080186ec 	.word	0x080186ec
 800c0c4:	080188b0 	.word	0x080188b0
 800c0c8:	0801877c 	.word	0x0801877c

0800c0cc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	6039      	str	r1, [r7, #0]
 800c0d6:	80fb      	strh	r3, [r7, #6]
 800c0d8:	4613      	mov	r3, r2
 800c0da:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800c0dc:	88fb      	ldrh	r3, [r7, #6]
 800c0de:	2b43      	cmp	r3, #67	@ 0x43
 800c0e0:	d906      	bls.n	800c0f0 <dhcp_option_byte+0x24>
 800c0e2:	4b0a      	ldr	r3, [pc, #40]	@ (800c10c <dhcp_option_byte+0x40>)
 800c0e4:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 800c0e8:	4909      	ldr	r1, [pc, #36]	@ (800c110 <dhcp_option_byte+0x44>)
 800c0ea:	480a      	ldr	r0, [pc, #40]	@ (800c114 <dhcp_option_byte+0x48>)
 800c0ec:	f00b fb22 	bl	8017734 <iprintf>
  options[options_out_len++] = value;
 800c0f0:	88fb      	ldrh	r3, [r7, #6]
 800c0f2:	1c5a      	adds	r2, r3, #1
 800c0f4:	80fa      	strh	r2, [r7, #6]
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	797a      	ldrb	r2, [r7, #5]
 800c0fe:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c100:	88fb      	ldrh	r3, [r7, #6]
}
 800c102:	4618      	mov	r0, r3
 800c104:	3708      	adds	r7, #8
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	080186ec 	.word	0x080186ec
 800c110:	080188f4 	.word	0x080188f4
 800c114:	0801877c 	.word	0x0801877c

0800c118 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	4603      	mov	r3, r0
 800c120:	6039      	str	r1, [r7, #0]
 800c122:	80fb      	strh	r3, [r7, #6]
 800c124:	4613      	mov	r3, r2
 800c126:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800c128:	88fb      	ldrh	r3, [r7, #6]
 800c12a:	3302      	adds	r3, #2
 800c12c:	2b44      	cmp	r3, #68	@ 0x44
 800c12e:	d906      	bls.n	800c13e <dhcp_option_short+0x26>
 800c130:	4b0f      	ldr	r3, [pc, #60]	@ (800c170 <dhcp_option_short+0x58>)
 800c132:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 800c136:	490f      	ldr	r1, [pc, #60]	@ (800c174 <dhcp_option_short+0x5c>)
 800c138:	480f      	ldr	r0, [pc, #60]	@ (800c178 <dhcp_option_short+0x60>)
 800c13a:	f00b fafb 	bl	8017734 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800c13e:	88bb      	ldrh	r3, [r7, #4]
 800c140:	0a1b      	lsrs	r3, r3, #8
 800c142:	b29a      	uxth	r2, r3
 800c144:	88fb      	ldrh	r3, [r7, #6]
 800c146:	1c59      	adds	r1, r3, #1
 800c148:	80f9      	strh	r1, [r7, #6]
 800c14a:	4619      	mov	r1, r3
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	440b      	add	r3, r1
 800c150:	b2d2      	uxtb	r2, r2
 800c152:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800c154:	88fb      	ldrh	r3, [r7, #6]
 800c156:	1c5a      	adds	r2, r3, #1
 800c158:	80fa      	strh	r2, [r7, #6]
 800c15a:	461a      	mov	r2, r3
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	4413      	add	r3, r2
 800c160:	88ba      	ldrh	r2, [r7, #4]
 800c162:	b2d2      	uxtb	r2, r2
 800c164:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c166:	88fb      	ldrh	r3, [r7, #6]
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3708      	adds	r7, #8
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	080186ec 	.word	0x080186ec
 800c174:	0801892c 	.word	0x0801892c
 800c178:	0801877c 	.word	0x0801877c

0800c17c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	4603      	mov	r3, r0
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
 800c188:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800c18a:	89fb      	ldrh	r3, [r7, #14]
 800c18c:	3304      	adds	r3, #4
 800c18e:	2b44      	cmp	r3, #68	@ 0x44
 800c190:	d906      	bls.n	800c1a0 <dhcp_option_long+0x24>
 800c192:	4b19      	ldr	r3, [pc, #100]	@ (800c1f8 <dhcp_option_long+0x7c>)
 800c194:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 800c198:	4918      	ldr	r1, [pc, #96]	@ (800c1fc <dhcp_option_long+0x80>)
 800c19a:	4819      	ldr	r0, [pc, #100]	@ (800c200 <dhcp_option_long+0x84>)
 800c19c:	f00b faca 	bl	8017734 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	0e1a      	lsrs	r2, r3, #24
 800c1a4:	89fb      	ldrh	r3, [r7, #14]
 800c1a6:	1c59      	adds	r1, r3, #1
 800c1a8:	81f9      	strh	r1, [r7, #14]
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	440b      	add	r3, r1
 800c1b0:	b2d2      	uxtb	r2, r2
 800c1b2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	0c1a      	lsrs	r2, r3, #16
 800c1b8:	89fb      	ldrh	r3, [r7, #14]
 800c1ba:	1c59      	adds	r1, r3, #1
 800c1bc:	81f9      	strh	r1, [r7, #14]
 800c1be:	4619      	mov	r1, r3
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	440b      	add	r3, r1
 800c1c4:	b2d2      	uxtb	r2, r2
 800c1c6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	0a1a      	lsrs	r2, r3, #8
 800c1cc:	89fb      	ldrh	r3, [r7, #14]
 800c1ce:	1c59      	adds	r1, r3, #1
 800c1d0:	81f9      	strh	r1, [r7, #14]
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	440b      	add	r3, r1
 800c1d8:	b2d2      	uxtb	r2, r2
 800c1da:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800c1dc:	89fb      	ldrh	r3, [r7, #14]
 800c1de:	1c5a      	adds	r2, r3, #1
 800c1e0:	81fa      	strh	r2, [r7, #14]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	b2d2      	uxtb	r2, r2
 800c1ec:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c1ee:	89fb      	ldrh	r3, [r7, #14]
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3710      	adds	r7, #16
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	080186ec 	.word	0x080186ec
 800c1fc:	08018968 	.word	0x08018968
 800c200:	0801877c 	.word	0x0801877c

0800c204 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b090      	sub	sp, #64	@ 0x40
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800c20e:	2300      	movs	r3, #0
 800c210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 800c212:	2300      	movs	r3, #0
 800c214:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800c216:	2208      	movs	r2, #8
 800c218:	2100      	movs	r1, #0
 800c21a:	48b5      	ldr	r0, [pc, #724]	@ (800c4f0 <dhcp_parse_reply+0x2ec>)
 800c21c:	f00b fbe2 	bl	80179e4 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	895b      	ldrh	r3, [r3, #10]
 800c224:	2b2b      	cmp	r3, #43	@ 0x2b
 800c226:	d802      	bhi.n	800c22e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800c228:	f06f 0301 	mvn.w	r3, #1
 800c22c:	e2a7      	b.n	800c77e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800c234:	23f0      	movs	r3, #240	@ 0xf0
 800c236:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	891b      	ldrh	r3, [r3, #8]
 800c23c:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800c242:	e00c      	b.n	800c25e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800c244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c246:	895b      	ldrh	r3, [r3, #10]
 800c248:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c24a:	1ad3      	subs	r3, r2, r3
 800c24c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800c24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c250:	895b      	ldrh	r3, [r3, #10]
 800c252:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800c254:	1ad3      	subs	r3, r2, r3
 800c256:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 800c258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800c25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c260:	2b00      	cmp	r3, #0
 800c262:	d004      	beq.n	800c26e <dhcp_parse_reply+0x6a>
 800c264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c266:	895b      	ldrh	r3, [r3, #10]
 800c268:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d2ea      	bcs.n	800c244 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800c26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c270:	2b00      	cmp	r3, #0
 800c272:	d102      	bne.n	800c27a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800c274:	f06f 0301 	mvn.w	r3, #1
 800c278:	e281      	b.n	800c77e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800c27a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c27c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 800c27e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c280:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 800c282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800c288:	e239      	b.n	800c6fe <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800c28a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c28c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c28e:	4413      	add	r3, r2
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800c294:	2300      	movs	r3, #0
 800c296:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 800c29a:	f04f 33ff 	mov.w	r3, #4294967295
 800c29e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800c2a0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c2a2:	3302      	adds	r3, #2
 800c2a4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800c2a6:	8bfa      	ldrh	r2, [r7, #30]
 800c2a8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d202      	bcs.n	800c2b4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800c2ae:	f06f 0301 	mvn.w	r3, #1
 800c2b2:	e264      	b.n	800c77e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800c2b4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2ba:	8952      	ldrh	r2, [r2, #10]
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	da07      	bge.n	800c2d0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800c2c0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c2c6:	4413      	add	r3, r2
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c2ce:	e00b      	b.n	800c2e8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800c2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d004      	beq.n	800c2e2 <dhcp_parse_reply+0xde>
 800c2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	e000      	b.n	800c2e4 <dhcp_parse_reply+0xe0>
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800c2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c2ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 800c2f0:	7dfb      	ldrb	r3, [r7, #23]
 800c2f2:	2b3b      	cmp	r3, #59	@ 0x3b
 800c2f4:	f200 812c 	bhi.w	800c550 <dhcp_parse_reply+0x34c>
 800c2f8:	a201      	add	r2, pc, #4	@ (adr r2, 800c300 <dhcp_parse_reply+0xfc>)
 800c2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2fe:	bf00      	nop
 800c300:	0800c3f1 	.word	0x0800c3f1
 800c304:	0800c401 	.word	0x0800c401
 800c308:	0800c551 	.word	0x0800c551
 800c30c:	0800c423 	.word	0x0800c423
 800c310:	0800c551 	.word	0x0800c551
 800c314:	0800c551 	.word	0x0800c551
 800c318:	0800c551 	.word	0x0800c551
 800c31c:	0800c551 	.word	0x0800c551
 800c320:	0800c551 	.word	0x0800c551
 800c324:	0800c551 	.word	0x0800c551
 800c328:	0800c551 	.word	0x0800c551
 800c32c:	0800c551 	.word	0x0800c551
 800c330:	0800c551 	.word	0x0800c551
 800c334:	0800c551 	.word	0x0800c551
 800c338:	0800c551 	.word	0x0800c551
 800c33c:	0800c551 	.word	0x0800c551
 800c340:	0800c551 	.word	0x0800c551
 800c344:	0800c551 	.word	0x0800c551
 800c348:	0800c551 	.word	0x0800c551
 800c34c:	0800c551 	.word	0x0800c551
 800c350:	0800c551 	.word	0x0800c551
 800c354:	0800c551 	.word	0x0800c551
 800c358:	0800c551 	.word	0x0800c551
 800c35c:	0800c551 	.word	0x0800c551
 800c360:	0800c551 	.word	0x0800c551
 800c364:	0800c551 	.word	0x0800c551
 800c368:	0800c551 	.word	0x0800c551
 800c36c:	0800c551 	.word	0x0800c551
 800c370:	0800c551 	.word	0x0800c551
 800c374:	0800c551 	.word	0x0800c551
 800c378:	0800c551 	.word	0x0800c551
 800c37c:	0800c551 	.word	0x0800c551
 800c380:	0800c551 	.word	0x0800c551
 800c384:	0800c551 	.word	0x0800c551
 800c388:	0800c551 	.word	0x0800c551
 800c38c:	0800c551 	.word	0x0800c551
 800c390:	0800c551 	.word	0x0800c551
 800c394:	0800c551 	.word	0x0800c551
 800c398:	0800c551 	.word	0x0800c551
 800c39c:	0800c551 	.word	0x0800c551
 800c3a0:	0800c551 	.word	0x0800c551
 800c3a4:	0800c551 	.word	0x0800c551
 800c3a8:	0800c551 	.word	0x0800c551
 800c3ac:	0800c551 	.word	0x0800c551
 800c3b0:	0800c551 	.word	0x0800c551
 800c3b4:	0800c551 	.word	0x0800c551
 800c3b8:	0800c551 	.word	0x0800c551
 800c3bc:	0800c551 	.word	0x0800c551
 800c3c0:	0800c551 	.word	0x0800c551
 800c3c4:	0800c551 	.word	0x0800c551
 800c3c8:	0800c551 	.word	0x0800c551
 800c3cc:	0800c44f 	.word	0x0800c44f
 800c3d0:	0800c471 	.word	0x0800c471
 800c3d4:	0800c4ad 	.word	0x0800c4ad
 800c3d8:	0800c4cf 	.word	0x0800c4cf
 800c3dc:	0800c551 	.word	0x0800c551
 800c3e0:	0800c551 	.word	0x0800c551
 800c3e4:	0800c551 	.word	0x0800c551
 800c3e8:	0800c50d 	.word	0x0800c50d
 800c3ec:	0800c52f 	.word	0x0800c52f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c3f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c3fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 800c3fe:	e0ab      	b.n	800c558 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800c400:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c404:	2b04      	cmp	r3, #4
 800c406:	d009      	beq.n	800c41c <dhcp_parse_reply+0x218>
 800c408:	4b3a      	ldr	r3, [pc, #232]	@ (800c4f4 <dhcp_parse_reply+0x2f0>)
 800c40a:	f240 622e 	movw	r2, #1582	@ 0x62e
 800c40e:	493a      	ldr	r1, [pc, #232]	@ (800c4f8 <dhcp_parse_reply+0x2f4>)
 800c410:	483a      	ldr	r0, [pc, #232]	@ (800c4fc <dhcp_parse_reply+0x2f8>)
 800c412:	f00b f98f 	bl	8017734 <iprintf>
 800c416:	f06f 0305 	mvn.w	r3, #5
 800c41a:	e1b0      	b.n	800c77e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800c41c:	2306      	movs	r3, #6
 800c41e:	623b      	str	r3, [r7, #32]
        break;
 800c420:	e09a      	b.n	800c558 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800c422:	2304      	movs	r3, #4
 800c424:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800c428:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c42c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c430:	429a      	cmp	r2, r3
 800c432:	d209      	bcs.n	800c448 <dhcp_parse_reply+0x244>
 800c434:	4b2f      	ldr	r3, [pc, #188]	@ (800c4f4 <dhcp_parse_reply+0x2f0>)
 800c436:	f240 6233 	movw	r2, #1587	@ 0x633
 800c43a:	4931      	ldr	r1, [pc, #196]	@ (800c500 <dhcp_parse_reply+0x2fc>)
 800c43c:	482f      	ldr	r0, [pc, #188]	@ (800c4fc <dhcp_parse_reply+0x2f8>)
 800c43e:	f00b f979 	bl	8017734 <iprintf>
 800c442:	f06f 0305 	mvn.w	r3, #5
 800c446:	e19a      	b.n	800c77e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800c448:	2307      	movs	r3, #7
 800c44a:	623b      	str	r3, [r7, #32]
        break;
 800c44c:	e084      	b.n	800c558 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800c44e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c452:	2b04      	cmp	r3, #4
 800c454:	d009      	beq.n	800c46a <dhcp_parse_reply+0x266>
 800c456:	4b27      	ldr	r3, [pc, #156]	@ (800c4f4 <dhcp_parse_reply+0x2f0>)
 800c458:	f240 6241 	movw	r2, #1601	@ 0x641
 800c45c:	4926      	ldr	r1, [pc, #152]	@ (800c4f8 <dhcp_parse_reply+0x2f4>)
 800c45e:	4827      	ldr	r0, [pc, #156]	@ (800c4fc <dhcp_parse_reply+0x2f8>)
 800c460:	f00b f968 	bl	8017734 <iprintf>
 800c464:	f06f 0305 	mvn.w	r3, #5
 800c468:	e189      	b.n	800c77e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800c46a:	2303      	movs	r3, #3
 800c46c:	623b      	str	r3, [r7, #32]
        break;
 800c46e:	e073      	b.n	800c558 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800c470:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c474:	2b01      	cmp	r3, #1
 800c476:	d009      	beq.n	800c48c <dhcp_parse_reply+0x288>
 800c478:	4b1e      	ldr	r3, [pc, #120]	@ (800c4f4 <dhcp_parse_reply+0x2f0>)
 800c47a:	f240 624f 	movw	r2, #1615	@ 0x64f
 800c47e:	4921      	ldr	r1, [pc, #132]	@ (800c504 <dhcp_parse_reply+0x300>)
 800c480:	481e      	ldr	r0, [pc, #120]	@ (800c4fc <dhcp_parse_reply+0x2f8>)
 800c482:	f00b f957 	bl	8017734 <iprintf>
 800c486:	f06f 0305 	mvn.w	r3, #5
 800c48a:	e178      	b.n	800c77e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800c48c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c48e:	2bf0      	cmp	r3, #240	@ 0xf0
 800c490:	d009      	beq.n	800c4a6 <dhcp_parse_reply+0x2a2>
 800c492:	4b18      	ldr	r3, [pc, #96]	@ (800c4f4 <dhcp_parse_reply+0x2f0>)
 800c494:	f240 6251 	movw	r2, #1617	@ 0x651
 800c498:	491b      	ldr	r1, [pc, #108]	@ (800c508 <dhcp_parse_reply+0x304>)
 800c49a:	4818      	ldr	r0, [pc, #96]	@ (800c4fc <dhcp_parse_reply+0x2f8>)
 800c49c:	f00b f94a 	bl	8017734 <iprintf>
 800c4a0:	f06f 0305 	mvn.w	r3, #5
 800c4a4:	e16b      	b.n	800c77e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	623b      	str	r3, [r7, #32]
        break;
 800c4aa:	e055      	b.n	800c558 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800c4ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d009      	beq.n	800c4c8 <dhcp_parse_reply+0x2c4>
 800c4b4:	4b0f      	ldr	r3, [pc, #60]	@ (800c4f4 <dhcp_parse_reply+0x2f0>)
 800c4b6:	f240 6255 	movw	r2, #1621	@ 0x655
 800c4ba:	4912      	ldr	r1, [pc, #72]	@ (800c504 <dhcp_parse_reply+0x300>)
 800c4bc:	480f      	ldr	r0, [pc, #60]	@ (800c4fc <dhcp_parse_reply+0x2f8>)
 800c4be:	f00b f939 	bl	8017734 <iprintf>
 800c4c2:	f06f 0305 	mvn.w	r3, #5
 800c4c6:	e15a      	b.n	800c77e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	623b      	str	r3, [r7, #32]
        break;
 800c4cc:	e044      	b.n	800c558 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800c4ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4d2:	2b04      	cmp	r3, #4
 800c4d4:	d009      	beq.n	800c4ea <dhcp_parse_reply+0x2e6>
 800c4d6:	4b07      	ldr	r3, [pc, #28]	@ (800c4f4 <dhcp_parse_reply+0x2f0>)
 800c4d8:	f240 6259 	movw	r2, #1625	@ 0x659
 800c4dc:	4906      	ldr	r1, [pc, #24]	@ (800c4f8 <dhcp_parse_reply+0x2f4>)
 800c4de:	4807      	ldr	r0, [pc, #28]	@ (800c4fc <dhcp_parse_reply+0x2f8>)
 800c4e0:	f00b f928 	bl	8017734 <iprintf>
 800c4e4:	f06f 0305 	mvn.w	r3, #5
 800c4e8:	e149      	b.n	800c77e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800c4ea:	2302      	movs	r3, #2
 800c4ec:	623b      	str	r3, [r7, #32]
        break;
 800c4ee:	e033      	b.n	800c558 <dhcp_parse_reply+0x354>
 800c4f0:	24004cc4 	.word	0x24004cc4
 800c4f4:	080186ec 	.word	0x080186ec
 800c4f8:	080189a4 	.word	0x080189a4
 800c4fc:	0801877c 	.word	0x0801877c
 800c500:	080189b0 	.word	0x080189b0
 800c504:	080189c4 	.word	0x080189c4
 800c508:	080189d0 	.word	0x080189d0
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800c50c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c510:	2b04      	cmp	r3, #4
 800c512:	d009      	beq.n	800c528 <dhcp_parse_reply+0x324>
 800c514:	4b9c      	ldr	r3, [pc, #624]	@ (800c788 <dhcp_parse_reply+0x584>)
 800c516:	f240 625d 	movw	r2, #1629	@ 0x65d
 800c51a:	499c      	ldr	r1, [pc, #624]	@ (800c78c <dhcp_parse_reply+0x588>)
 800c51c:	489c      	ldr	r0, [pc, #624]	@ (800c790 <dhcp_parse_reply+0x58c>)
 800c51e:	f00b f909 	bl	8017734 <iprintf>
 800c522:	f06f 0305 	mvn.w	r3, #5
 800c526:	e12a      	b.n	800c77e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 800c528:	2304      	movs	r3, #4
 800c52a:	623b      	str	r3, [r7, #32]
        break;
 800c52c:	e014      	b.n	800c558 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800c52e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c532:	2b04      	cmp	r3, #4
 800c534:	d009      	beq.n	800c54a <dhcp_parse_reply+0x346>
 800c536:	4b94      	ldr	r3, [pc, #592]	@ (800c788 <dhcp_parse_reply+0x584>)
 800c538:	f240 6261 	movw	r2, #1633	@ 0x661
 800c53c:	4993      	ldr	r1, [pc, #588]	@ (800c78c <dhcp_parse_reply+0x588>)
 800c53e:	4894      	ldr	r0, [pc, #592]	@ (800c790 <dhcp_parse_reply+0x58c>)
 800c540:	f00b f8f8 	bl	8017734 <iprintf>
 800c544:	f06f 0305 	mvn.w	r3, #5
 800c548:	e119      	b.n	800c77e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 800c54a:	2305      	movs	r3, #5
 800c54c:	623b      	str	r3, [r7, #32]
        break;
 800c54e:	e003      	b.n	800c558 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 800c550:	2300      	movs	r3, #0
 800c552:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800c556:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800c558:	7dfb      	ldrb	r3, [r7, #23]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d103      	bne.n	800c566 <dhcp_parse_reply+0x362>
      offset++;
 800c55e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c560:	3301      	adds	r3, #1
 800c562:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c564:	e0a1      	b.n	800c6aa <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800c566:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c56c:	4413      	add	r3, r2
 800c56e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 800c572:	4293      	cmp	r3, r2
 800c574:	dd02      	ble.n	800c57c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 800c576:	f06f 0301 	mvn.w	r3, #1
 800c57a:	e100      	b.n	800c77e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 800c57c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c580:	b29a      	uxth	r2, r3
 800c582:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c584:	4413      	add	r3, r2
 800c586:	b29b      	uxth	r3, r3
 800c588:	3302      	adds	r3, #2
 800c58a:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 800c58c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c590:	2b00      	cmp	r3, #0
 800c592:	f000 808a 	beq.w	800c6aa <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 800c596:	2300      	movs	r3, #0
 800c598:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800c59a:	6a3b      	ldr	r3, [r7, #32]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	db02      	blt.n	800c5a6 <dhcp_parse_reply+0x3a2>
 800c5a0:	6a3b      	ldr	r3, [r7, #32]
 800c5a2:	2b07      	cmp	r3, #7
 800c5a4:	dd06      	ble.n	800c5b4 <dhcp_parse_reply+0x3b0>
 800c5a6:	4b78      	ldr	r3, [pc, #480]	@ (800c788 <dhcp_parse_reply+0x584>)
 800c5a8:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 800c5ac:	4979      	ldr	r1, [pc, #484]	@ (800c794 <dhcp_parse_reply+0x590>)
 800c5ae:	4878      	ldr	r0, [pc, #480]	@ (800c790 <dhcp_parse_reply+0x58c>)
 800c5b0:	f00b f8c0 	bl	8017734 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800c5b4:	4a78      	ldr	r2, [pc, #480]	@ (800c798 <dhcp_parse_reply+0x594>)
 800c5b6:	6a3b      	ldr	r3, [r7, #32]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d174      	bne.n	800c6aa <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 800c5c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c5c4:	2b04      	cmp	r3, #4
 800c5c6:	bf28      	it	cs
 800c5c8:	2304      	movcs	r3, #4
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800c5ce:	8bfb      	ldrh	r3, [r7, #30]
 800c5d0:	8aba      	ldrh	r2, [r7, #20]
 800c5d2:	f107 0108 	add.w	r1, r7, #8
 800c5d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5d8:	f004 fce6 	bl	8010fa8 <pbuf_copy_partial>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	461a      	mov	r2, r3
 800c5e0:	8abb      	ldrh	r3, [r7, #20]
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d002      	beq.n	800c5ec <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 800c5e6:	f06f 0301 	mvn.w	r3, #1
 800c5ea:	e0c8      	b.n	800c77e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 800c5ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c5f0:	2b04      	cmp	r3, #4
 800c5f2:	d933      	bls.n	800c65c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800c5f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c5f8:	f003 0303 	and.w	r3, r3, #3
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d009      	beq.n	800c616 <dhcp_parse_reply+0x412>
 800c602:	4b61      	ldr	r3, [pc, #388]	@ (800c788 <dhcp_parse_reply+0x584>)
 800c604:	f240 6281 	movw	r2, #1665	@ 0x681
 800c608:	4964      	ldr	r1, [pc, #400]	@ (800c79c <dhcp_parse_reply+0x598>)
 800c60a:	4861      	ldr	r0, [pc, #388]	@ (800c790 <dhcp_parse_reply+0x58c>)
 800c60c:	f00b f892 	bl	8017734 <iprintf>
 800c610:	f06f 0305 	mvn.w	r3, #5
 800c614:	e0b3      	b.n	800c77e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 800c616:	4a60      	ldr	r2, [pc, #384]	@ (800c798 <dhcp_parse_reply+0x594>)
 800c618:	6a3b      	ldr	r3, [r7, #32]
 800c61a:	4413      	add	r3, r2
 800c61c:	2201      	movs	r2, #1
 800c61e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	4618      	mov	r0, r3
 800c624:	f7fe fc13 	bl	800ae4e <lwip_htonl>
 800c628:	4602      	mov	r2, r0
 800c62a:	495d      	ldr	r1, [pc, #372]	@ (800c7a0 <dhcp_parse_reply+0x59c>)
 800c62c:	6a3b      	ldr	r3, [r7, #32]
 800c62e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800c632:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c636:	3b04      	subs	r3, #4
 800c638:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800c63c:	8bfb      	ldrh	r3, [r7, #30]
 800c63e:	3304      	adds	r3, #4
 800c640:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800c642:	8a7a      	ldrh	r2, [r7, #18]
 800c644:	8bfb      	ldrh	r3, [r7, #30]
 800c646:	429a      	cmp	r2, r3
 800c648:	d202      	bcs.n	800c650 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 800c64a:	f06f 0301 	mvn.w	r3, #1
 800c64e:	e096      	b.n	800c77e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 800c650:	8a7b      	ldrh	r3, [r7, #18]
 800c652:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800c654:	6a3b      	ldr	r3, [r7, #32]
 800c656:	3301      	adds	r3, #1
 800c658:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800c65a:	e79e      	b.n	800c59a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 800c65c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c660:	2b04      	cmp	r3, #4
 800c662:	d106      	bne.n	800c672 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	4618      	mov	r0, r3
 800c668:	f7fe fbf1 	bl	800ae4e <lwip_htonl>
 800c66c:	4603      	mov	r3, r0
 800c66e:	60bb      	str	r3, [r7, #8]
 800c670:	e011      	b.n	800c696 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800c672:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c676:	2b01      	cmp	r3, #1
 800c678:	d009      	beq.n	800c68e <dhcp_parse_reply+0x48a>
 800c67a:	4b43      	ldr	r3, [pc, #268]	@ (800c788 <dhcp_parse_reply+0x584>)
 800c67c:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 800c680:	4948      	ldr	r1, [pc, #288]	@ (800c7a4 <dhcp_parse_reply+0x5a0>)
 800c682:	4843      	ldr	r0, [pc, #268]	@ (800c790 <dhcp_parse_reply+0x58c>)
 800c684:	f00b f856 	bl	8017734 <iprintf>
 800c688:	f06f 0305 	mvn.w	r3, #5
 800c68c:	e077      	b.n	800c77e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 800c68e:	f107 0308 	add.w	r3, r7, #8
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800c696:	4a40      	ldr	r2, [pc, #256]	@ (800c798 <dhcp_parse_reply+0x594>)
 800c698:	6a3b      	ldr	r3, [r7, #32]
 800c69a:	4413      	add	r3, r2
 800c69c:	2201      	movs	r2, #1
 800c69e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800c6a0:	68ba      	ldr	r2, [r7, #8]
 800c6a2:	493f      	ldr	r1, [pc, #252]	@ (800c7a0 <dhcp_parse_reply+0x59c>)
 800c6a4:	6a3b      	ldr	r3, [r7, #32]
 800c6a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ac:	895b      	ldrh	r3, [r3, #10]
 800c6ae:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d324      	bcc.n	800c6fe <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 800c6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b6:	895b      	ldrh	r3, [r3, #10]
 800c6b8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c6ba:	1ad3      	subs	r3, r2, r3
 800c6bc:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800c6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c0:	895b      	ldrh	r3, [r3, #10]
 800c6c2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800c6c4:	1ad3      	subs	r3, r2, r3
 800c6c6:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 800c6c8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c6ca:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d213      	bcs.n	800c6f8 <dhcp_parse_reply+0x4f4>
        q = q->next;
 800c6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800c6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d109      	bne.n	800c6f0 <dhcp_parse_reply+0x4ec>
 800c6dc:	4b2a      	ldr	r3, [pc, #168]	@ (800c788 <dhcp_parse_reply+0x584>)
 800c6de:	f240 629d 	movw	r2, #1693	@ 0x69d
 800c6e2:	4931      	ldr	r1, [pc, #196]	@ (800c7a8 <dhcp_parse_reply+0x5a4>)
 800c6e4:	482a      	ldr	r0, [pc, #168]	@ (800c790 <dhcp_parse_reply+0x58c>)
 800c6e6:	f00b f825 	bl	8017734 <iprintf>
 800c6ea:	f06f 0305 	mvn.w	r3, #5
 800c6ee:	e046      	b.n	800c77e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 800c6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6f6:	e002      	b.n	800c6fe <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800c6f8:	f06f 0301 	mvn.w	r3, #1
 800c6fc:	e03f      	b.n	800c77e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800c6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c700:	2b00      	cmp	r3, #0
 800c702:	d00a      	beq.n	800c71a <dhcp_parse_reply+0x516>
 800c704:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c706:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c708:	429a      	cmp	r2, r3
 800c70a:	d206      	bcs.n	800c71a <dhcp_parse_reply+0x516>
 800c70c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c70e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c710:	4413      	add	r3, r2
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	2bff      	cmp	r3, #255	@ 0xff
 800c716:	f47f adb8 	bne.w	800c28a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800c71a:	4b1f      	ldr	r3, [pc, #124]	@ (800c798 <dhcp_parse_reply+0x594>)
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d018      	beq.n	800c754 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800c722:	4b1f      	ldr	r3, [pc, #124]	@ (800c7a0 <dhcp_parse_reply+0x59c>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800c728:	4b1b      	ldr	r3, [pc, #108]	@ (800c798 <dhcp_parse_reply+0x594>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2b01      	cmp	r3, #1
 800c732:	d102      	bne.n	800c73a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 800c734:	2301      	movs	r3, #1
 800c736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c738:	e00c      	b.n	800c754 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2b02      	cmp	r3, #2
 800c73e:	d102      	bne.n	800c746 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 800c740:	2301      	movs	r3, #1
 800c742:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c744:	e006      	b.n	800c754 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2b03      	cmp	r3, #3
 800c74a:	d103      	bne.n	800c754 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 800c74c:	2301      	movs	r3, #1
 800c74e:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 800c750:	2301      	movs	r3, #1
 800c752:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800c754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c756:	2b00      	cmp	r3, #0
 800c758:	d006      	beq.n	800c768 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800c75a:	2300      	movs	r3, #0
 800c75c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 800c75e:	236c      	movs	r3, #108	@ 0x6c
 800c760:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800c762:	23ec      	movs	r3, #236	@ 0xec
 800c764:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800c766:	e56a      	b.n	800c23e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800c768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d006      	beq.n	800c77c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 800c76e:	2300      	movs	r3, #0
 800c770:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 800c772:	232c      	movs	r3, #44	@ 0x2c
 800c774:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800c776:	236c      	movs	r3, #108	@ 0x6c
 800c778:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 800c77a:	e560      	b.n	800c23e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3740      	adds	r7, #64	@ 0x40
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	080186ec 	.word	0x080186ec
 800c78c:	080189a4 	.word	0x080189a4
 800c790:	0801877c 	.word	0x0801877c
 800c794:	080189e8 	.word	0x080189e8
 800c798:	24004cc4 	.word	0x24004cc4
 800c79c:	080189fc 	.word	0x080189fc
 800c7a0:	24004ca4 	.word	0x24004ca4
 800c7a4:	08018a14 	.word	0x08018a14
 800c7a8:	08018a28 	.word	0x08018a28

0800c7ac <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b08a      	sub	sp, #40	@ 0x28
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
 800c7b8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800c7ba:	4b60      	ldr	r3, [pc, #384]	@ (800c93c <dhcp_recv+0x190>)
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c7c0:	6a3b      	ldr	r3, [r7, #32]
 800c7c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7c4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	f000 809d 	beq.w	800c90e <dhcp_recv+0x162>
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	791b      	ldrb	r3, [r3, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f000 8098 	beq.w	800c90e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	895b      	ldrh	r3, [r3, #10]
 800c7e2:	2b2b      	cmp	r3, #43	@ 0x2b
 800c7e4:	f240 8095 	bls.w	800c912 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800c7e8:	69bb      	ldr	r3, [r7, #24]
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	2b02      	cmp	r3, #2
 800c7ee:	f040 8092 	bne.w	800c916 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c7f8:	e012      	b.n	800c820 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800c7fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7fe:	6a3a      	ldr	r2, [r7, #32]
 800c800:	4413      	add	r3, r2
 800c802:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800c806:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c80a:	69b9      	ldr	r1, [r7, #24]
 800c80c:	440b      	add	r3, r1
 800c80e:	7f1b      	ldrb	r3, [r3, #28]
 800c810:	429a      	cmp	r2, r3
 800c812:	f040 8082 	bne.w	800c91a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800c816:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c81a:	3301      	adds	r3, #1
 800c81c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c820:	6a3b      	ldr	r3, [r7, #32]
 800c822:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c826:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d203      	bcs.n	800c836 <dhcp_recv+0x8a>
 800c82e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c832:	2b05      	cmp	r3, #5
 800c834:	d9e1      	bls.n	800c7fa <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fe fb07 	bl	800ae4e <lwip_htonl>
 800c840:	4602      	mov	r2, r0
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	429a      	cmp	r2, r3
 800c848:	d169      	bne.n	800c91e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800c84a:	69f9      	ldr	r1, [r7, #28]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7ff fcd9 	bl	800c204 <dhcp_parse_reply>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d164      	bne.n	800c922 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800c858:	4b39      	ldr	r3, [pc, #228]	@ (800c940 <dhcp_recv+0x194>)
 800c85a:	785b      	ldrb	r3, [r3, #1]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d062      	beq.n	800c926 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800c866:	4b37      	ldr	r3, [pc, #220]	@ (800c944 <dhcp_recv+0x198>)
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800c86c:	7cfb      	ldrb	r3, [r7, #19]
 800c86e:	2b05      	cmp	r3, #5
 800c870:	d12a      	bne.n	800c8c8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	795b      	ldrb	r3, [r3, #5]
 800c876:	2b01      	cmp	r3, #1
 800c878:	d112      	bne.n	800c8a0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800c87a:	6979      	ldr	r1, [r7, #20]
 800c87c:	6a38      	ldr	r0, [r7, #32]
 800c87e:	f7fe fe1d 	bl	800b4bc <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800c882:	6a3b      	ldr	r3, [r7, #32]
 800c884:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c888:	f003 0308 	and.w	r3, r3, #8
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d003      	beq.n	800c898 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800c890:	6a38      	ldr	r0, [r7, #32]
 800c892:	f7fe fb8b 	bl	800afac <dhcp_check>
 800c896:	e049      	b.n	800c92c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800c898:	6a38      	ldr	r0, [r7, #32]
 800c89a:	f7ff f86d 	bl	800b978 <dhcp_bind>
 800c89e:	e045      	b.n	800c92c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	795b      	ldrb	r3, [r3, #5]
 800c8a4:	2b03      	cmp	r3, #3
 800c8a6:	d007      	beq.n	800c8b8 <dhcp_recv+0x10c>
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	795b      	ldrb	r3, [r3, #5]
 800c8ac:	2b04      	cmp	r3, #4
 800c8ae:	d003      	beq.n	800c8b8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800c8b4:	2b05      	cmp	r3, #5
 800c8b6:	d139      	bne.n	800c92c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800c8b8:	6979      	ldr	r1, [r7, #20]
 800c8ba:	6a38      	ldr	r0, [r7, #32]
 800c8bc:	f7fe fdfe 	bl	800b4bc <dhcp_handle_ack>
      dhcp_bind(netif);
 800c8c0:	6a38      	ldr	r0, [r7, #32]
 800c8c2:	f7ff f859 	bl	800b978 <dhcp_bind>
 800c8c6:	e031      	b.n	800c92c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800c8c8:	7cfb      	ldrb	r3, [r7, #19]
 800c8ca:	2b06      	cmp	r3, #6
 800c8cc:	d113      	bne.n	800c8f6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800c8d2:	2b03      	cmp	r3, #3
 800c8d4:	d00b      	beq.n	800c8ee <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	795b      	ldrb	r3, [r3, #5]
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d007      	beq.n	800c8ee <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800c8e2:	2b04      	cmp	r3, #4
 800c8e4:	d003      	beq.n	800c8ee <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800c8e6:	69fb      	ldr	r3, [r7, #28]
 800c8e8:	795b      	ldrb	r3, [r3, #5]
 800c8ea:	2b05      	cmp	r3, #5
 800c8ec:	d103      	bne.n	800c8f6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800c8ee:	6a38      	ldr	r0, [r7, #32]
 800c8f0:	f7fe fb42 	bl	800af78 <dhcp_handle_nak>
 800c8f4:	e01a      	b.n	800c92c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800c8f6:	7cfb      	ldrb	r3, [r7, #19]
 800c8f8:	2b02      	cmp	r3, #2
 800c8fa:	d116      	bne.n	800c92a <dhcp_recv+0x17e>
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	795b      	ldrb	r3, [r3, #5]
 800c900:	2b06      	cmp	r3, #6
 800c902:	d112      	bne.n	800c92a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800c904:	6979      	ldr	r1, [r7, #20]
 800c906:	6a38      	ldr	r0, [r7, #32]
 800c908:	f7fe fb84 	bl	800b014 <dhcp_handle_offer>
 800c90c:	e00e      	b.n	800c92c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800c90e:	bf00      	nop
 800c910:	e00c      	b.n	800c92c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800c912:	bf00      	nop
 800c914:	e00a      	b.n	800c92c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800c916:	bf00      	nop
 800c918:	e008      	b.n	800c92c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800c91a:	bf00      	nop
 800c91c:	e006      	b.n	800c92c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800c91e:	bf00      	nop
 800c920:	e004      	b.n	800c92c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800c922:	bf00      	nop
 800c924:	e002      	b.n	800c92c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800c926:	bf00      	nop
 800c928:	e000      	b.n	800c92c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800c92a:	bf00      	nop
  pbuf_free(p);
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f004 f935 	bl	8010b9c <pbuf_free>
}
 800c932:	bf00      	nop
 800c934:	3728      	adds	r7, #40	@ 0x28
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	24004dcc 	.word	0x24004dcc
 800c940:	24004cc4 	.word	0x24004cc4
 800c944:	24004ca4 	.word	0x24004ca4

0800c948 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b088      	sub	sp, #32
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	603b      	str	r3, [r7, #0]
 800c954:	4613      	mov	r3, r2
 800c956:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d108      	bne.n	800c970 <dhcp_create_msg+0x28>
 800c95e:	4b5f      	ldr	r3, [pc, #380]	@ (800cadc <dhcp_create_msg+0x194>)
 800c960:	f240 7269 	movw	r2, #1897	@ 0x769
 800c964:	495e      	ldr	r1, [pc, #376]	@ (800cae0 <dhcp_create_msg+0x198>)
 800c966:	485f      	ldr	r0, [pc, #380]	@ (800cae4 <dhcp_create_msg+0x19c>)
 800c968:	f00a fee4 	bl	8017734 <iprintf>
 800c96c:	2300      	movs	r3, #0
 800c96e:	e0b1      	b.n	800cad4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d108      	bne.n	800c988 <dhcp_create_msg+0x40>
 800c976:	4b59      	ldr	r3, [pc, #356]	@ (800cadc <dhcp_create_msg+0x194>)
 800c978:	f240 726a 	movw	r2, #1898	@ 0x76a
 800c97c:	495a      	ldr	r1, [pc, #360]	@ (800cae8 <dhcp_create_msg+0x1a0>)
 800c97e:	4859      	ldr	r0, [pc, #356]	@ (800cae4 <dhcp_create_msg+0x19c>)
 800c980:	f00a fed8 	bl	8017734 <iprintf>
 800c984:	2300      	movs	r3, #0
 800c986:	e0a5      	b.n	800cad4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800c988:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c98c:	f44f 719a 	mov.w	r1, #308	@ 0x134
 800c990:	2036      	movs	r0, #54	@ 0x36
 800c992:	f003 fe21 	bl	80105d8 <pbuf_alloc>
 800c996:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d101      	bne.n	800c9a2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	e098      	b.n	800cad4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	895b      	ldrh	r3, [r3, #10]
 800c9a6:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800c9aa:	d206      	bcs.n	800c9ba <dhcp_create_msg+0x72>
 800c9ac:	4b4b      	ldr	r3, [pc, #300]	@ (800cadc <dhcp_create_msg+0x194>)
 800c9ae:	f240 7271 	movw	r2, #1905	@ 0x771
 800c9b2:	494e      	ldr	r1, [pc, #312]	@ (800caec <dhcp_create_msg+0x1a4>)
 800c9b4:	484b      	ldr	r0, [pc, #300]	@ (800cae4 <dhcp_create_msg+0x19c>)
 800c9b6:	f00a febd 	bl	8017734 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800c9ba:	79fb      	ldrb	r3, [r7, #7]
 800c9bc:	2b03      	cmp	r3, #3
 800c9be:	d103      	bne.n	800c9c8 <dhcp_create_msg+0x80>
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	795b      	ldrb	r3, [r3, #5]
 800c9c4:	2b03      	cmp	r3, #3
 800c9c6:	d10d      	bne.n	800c9e4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	799b      	ldrb	r3, [r3, #6]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d105      	bne.n	800c9dc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800c9d0:	f00a fdb0 	bl	8017534 <rand>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	4b45      	ldr	r3, [pc, #276]	@ (800caf0 <dhcp_create_msg+0x1a8>)
 800c9da:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800c9dc:	4b44      	ldr	r3, [pc, #272]	@ (800caf0 <dhcp_create_msg+0x1a8>)
 800c9de:	681a      	ldr	r2, [r3, #0]
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800c9e4:	69bb      	ldr	r3, [r7, #24]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800c9ea:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800c9ee:	2100      	movs	r1, #0
 800c9f0:	6978      	ldr	r0, [r7, #20]
 800c9f2:	f00a fff7 	bl	80179e4 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	2201      	movs	r2, #1
 800ca00:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7fe fa1c 	bl	800ae4e <lwip_htonl>
 800ca16:	4602      	mov	r2, r0
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800ca1c:	79fb      	ldrb	r3, [r7, #7]
 800ca1e:	2b08      	cmp	r3, #8
 800ca20:	d010      	beq.n	800ca44 <dhcp_create_msg+0xfc>
 800ca22:	79fb      	ldrb	r3, [r7, #7]
 800ca24:	2b04      	cmp	r3, #4
 800ca26:	d00d      	beq.n	800ca44 <dhcp_create_msg+0xfc>
 800ca28:	79fb      	ldrb	r3, [r7, #7]
 800ca2a:	2b07      	cmp	r3, #7
 800ca2c:	d00a      	beq.n	800ca44 <dhcp_create_msg+0xfc>
 800ca2e:	79fb      	ldrb	r3, [r7, #7]
 800ca30:	2b03      	cmp	r3, #3
 800ca32:	d10c      	bne.n	800ca4e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800ca38:	2b05      	cmp	r3, #5
 800ca3a:	d003      	beq.n	800ca44 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	795b      	ldrb	r3, [r3, #5]
 800ca40:	2b04      	cmp	r3, #4
 800ca42:	d104      	bne.n	800ca4e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	3304      	adds	r3, #4
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ca4e:	2300      	movs	r3, #0
 800ca50:	83fb      	strh	r3, [r7, #30]
 800ca52:	e00c      	b.n	800ca6e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800ca54:	8bfa      	ldrh	r2, [r7, #30]
 800ca56:	8bfb      	ldrh	r3, [r7, #30]
 800ca58:	68f9      	ldr	r1, [r7, #12]
 800ca5a:	440a      	add	r2, r1
 800ca5c:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 800ca60:	697a      	ldr	r2, [r7, #20]
 800ca62:	4413      	add	r3, r2
 800ca64:	460a      	mov	r2, r1
 800ca66:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ca68:	8bfb      	ldrh	r3, [r7, #30]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	83fb      	strh	r3, [r7, #30]
 800ca6e:	8bfb      	ldrh	r3, [r7, #30]
 800ca70:	2b05      	cmp	r3, #5
 800ca72:	d9ef      	bls.n	800ca54 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	2200      	movs	r2, #0
 800ca78:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 800ca7c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 800ca80:	2200      	movs	r2, #0
 800ca82:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 800ca86:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 800ca90:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 800ca94:	2200      	movs	r2, #0
 800ca96:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 800ca9a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800caa4:	2301      	movs	r3, #1
 800caa6:	2235      	movs	r2, #53	@ 0x35
 800caa8:	2000      	movs	r0, #0
 800caaa:	f7ff fadb 	bl	800c064 <dhcp_option>
 800caae:	4603      	mov	r3, r0
 800cab0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800cab8:	79fa      	ldrb	r2, [r7, #7]
 800caba:	8a7b      	ldrh	r3, [r7, #18]
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7ff fb05 	bl	800c0cc <dhcp_option_byte>
 800cac2:	4603      	mov	r3, r0
 800cac4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d002      	beq.n	800cad2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	8a7a      	ldrh	r2, [r7, #18]
 800cad0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800cad2:	69bb      	ldr	r3, [r7, #24]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3720      	adds	r7, #32
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	080186ec 	.word	0x080186ec
 800cae0:	08018a3c 	.word	0x08018a3c
 800cae4:	0801877c 	.word	0x0801877c
 800cae8:	08018a5c 	.word	0x08018a5c
 800caec:	08018a7c 	.word	0x08018a7c
 800caf0:	24004cd4 	.word	0x24004cd4

0800caf4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	4603      	mov	r3, r0
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]
 800cb00:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800cb02:	89fb      	ldrh	r3, [r7, #14]
 800cb04:	1c5a      	adds	r2, r3, #1
 800cb06:	81fa      	strh	r2, [r7, #14]
 800cb08:	461a      	mov	r2, r3
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	22ff      	movs	r2, #255	@ 0xff
 800cb10:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800cb12:	e007      	b.n	800cb24 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800cb14:	89fb      	ldrh	r3, [r7, #14]
 800cb16:	1c5a      	adds	r2, r3, #1
 800cb18:	81fa      	strh	r2, [r7, #14]
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	4413      	add	r3, r2
 800cb20:	2200      	movs	r2, #0
 800cb22:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800cb24:	89fb      	ldrh	r3, [r7, #14]
 800cb26:	2b43      	cmp	r3, #67	@ 0x43
 800cb28:	d904      	bls.n	800cb34 <dhcp_option_trailer+0x40>
 800cb2a:	89fb      	ldrh	r3, [r7, #14]
 800cb2c:	f003 0303 	and.w	r3, r3, #3
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d002      	beq.n	800cb3a <dhcp_option_trailer+0x46>
 800cb34:	89fb      	ldrh	r3, [r7, #14]
 800cb36:	2b43      	cmp	r3, #67	@ 0x43
 800cb38:	d9ec      	bls.n	800cb14 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800cb3a:	89fb      	ldrh	r3, [r7, #14]
 800cb3c:	33f0      	adds	r3, #240	@ 0xf0
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	4619      	mov	r1, r3
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f003 fea6 	bl	8010894 <pbuf_realloc>
}
 800cb48:	bf00      	nop
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d017      	beq.n	800cb8e <dhcp_supplied_address+0x3e>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d013      	beq.n	800cb8e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb6a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	795b      	ldrb	r3, [r3, #5]
 800cb70:	2b0a      	cmp	r3, #10
 800cb72:	d007      	beq.n	800cb84 <dhcp_supplied_address+0x34>
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	795b      	ldrb	r3, [r3, #5]
 800cb78:	2b05      	cmp	r3, #5
 800cb7a:	d003      	beq.n	800cb84 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800cb80:	2b04      	cmp	r3, #4
 800cb82:	d101      	bne.n	800cb88 <dhcp_supplied_address+0x38>
 800cb84:	2301      	movs	r3, #1
 800cb86:	e000      	b.n	800cb8a <dhcp_supplied_address+0x3a>
 800cb88:	2300      	movs	r3, #0
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	e000      	b.n	800cb90 <dhcp_supplied_address+0x40>
  }
  return 0;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3714      	adds	r7, #20
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cba4:	4915      	ldr	r1, [pc, #84]	@ (800cbfc <etharp_free_entry+0x60>)
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	4613      	mov	r3, r2
 800cbaa:	005b      	lsls	r3, r3, #1
 800cbac:	4413      	add	r3, r2
 800cbae:	00db      	lsls	r3, r3, #3
 800cbb0:	440b      	add	r3, r1
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d013      	beq.n	800cbe0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cbb8:	4910      	ldr	r1, [pc, #64]	@ (800cbfc <etharp_free_entry+0x60>)
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	005b      	lsls	r3, r3, #1
 800cbc0:	4413      	add	r3, r2
 800cbc2:	00db      	lsls	r3, r3, #3
 800cbc4:	440b      	add	r3, r1
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f003 ffe7 	bl	8010b9c <pbuf_free>
    arp_table[i].q = NULL;
 800cbce:	490b      	ldr	r1, [pc, #44]	@ (800cbfc <etharp_free_entry+0x60>)
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	4613      	mov	r3, r2
 800cbd4:	005b      	lsls	r3, r3, #1
 800cbd6:	4413      	add	r3, r2
 800cbd8:	00db      	lsls	r3, r3, #3
 800cbda:	440b      	add	r3, r1
 800cbdc:	2200      	movs	r2, #0
 800cbde:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cbe0:	4906      	ldr	r1, [pc, #24]	@ (800cbfc <etharp_free_entry+0x60>)
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	005b      	lsls	r3, r3, #1
 800cbe8:	4413      	add	r3, r2
 800cbea:	00db      	lsls	r3, r3, #3
 800cbec:	440b      	add	r3, r1
 800cbee:	3314      	adds	r3, #20
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cbf4:	bf00      	nop
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	24004cd8 	.word	0x24004cd8

0800cc00 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc06:	2300      	movs	r3, #0
 800cc08:	607b      	str	r3, [r7, #4]
 800cc0a:	e096      	b.n	800cd3a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cc0c:	494f      	ldr	r1, [pc, #316]	@ (800cd4c <etharp_tmr+0x14c>)
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	4613      	mov	r3, r2
 800cc12:	005b      	lsls	r3, r3, #1
 800cc14:	4413      	add	r3, r2
 800cc16:	00db      	lsls	r3, r3, #3
 800cc18:	440b      	add	r3, r1
 800cc1a:	3314      	adds	r3, #20
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cc20:	78fb      	ldrb	r3, [r7, #3]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f000 8086 	beq.w	800cd34 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cc28:	4948      	ldr	r1, [pc, #288]	@ (800cd4c <etharp_tmr+0x14c>)
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	005b      	lsls	r3, r3, #1
 800cc30:	4413      	add	r3, r2
 800cc32:	00db      	lsls	r3, r3, #3
 800cc34:	440b      	add	r3, r1
 800cc36:	3312      	adds	r3, #18
 800cc38:	881b      	ldrh	r3, [r3, #0]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	b298      	uxth	r0, r3
 800cc3e:	4943      	ldr	r1, [pc, #268]	@ (800cd4c <etharp_tmr+0x14c>)
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	4613      	mov	r3, r2
 800cc44:	005b      	lsls	r3, r3, #1
 800cc46:	4413      	add	r3, r2
 800cc48:	00db      	lsls	r3, r3, #3
 800cc4a:	440b      	add	r3, r1
 800cc4c:	3312      	adds	r3, #18
 800cc4e:	4602      	mov	r2, r0
 800cc50:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cc52:	493e      	ldr	r1, [pc, #248]	@ (800cd4c <etharp_tmr+0x14c>)
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	4613      	mov	r3, r2
 800cc58:	005b      	lsls	r3, r3, #1
 800cc5a:	4413      	add	r3, r2
 800cc5c:	00db      	lsls	r3, r3, #3
 800cc5e:	440b      	add	r3, r1
 800cc60:	3312      	adds	r3, #18
 800cc62:	881b      	ldrh	r3, [r3, #0]
 800cc64:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800cc68:	d215      	bcs.n	800cc96 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cc6a:	4938      	ldr	r1, [pc, #224]	@ (800cd4c <etharp_tmr+0x14c>)
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	4613      	mov	r3, r2
 800cc70:	005b      	lsls	r3, r3, #1
 800cc72:	4413      	add	r3, r2
 800cc74:	00db      	lsls	r3, r3, #3
 800cc76:	440b      	add	r3, r1
 800cc78:	3314      	adds	r3, #20
 800cc7a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d10e      	bne.n	800cc9e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cc80:	4932      	ldr	r1, [pc, #200]	@ (800cd4c <etharp_tmr+0x14c>)
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	4613      	mov	r3, r2
 800cc86:	005b      	lsls	r3, r3, #1
 800cc88:	4413      	add	r3, r2
 800cc8a:	00db      	lsls	r3, r3, #3
 800cc8c:	440b      	add	r3, r1
 800cc8e:	3312      	adds	r3, #18
 800cc90:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cc92:	2b04      	cmp	r3, #4
 800cc94:	d903      	bls.n	800cc9e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f7ff ff80 	bl	800cb9c <etharp_free_entry>
 800cc9c:	e04a      	b.n	800cd34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cc9e:	492b      	ldr	r1, [pc, #172]	@ (800cd4c <etharp_tmr+0x14c>)
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	4613      	mov	r3, r2
 800cca4:	005b      	lsls	r3, r3, #1
 800cca6:	4413      	add	r3, r2
 800cca8:	00db      	lsls	r3, r3, #3
 800ccaa:	440b      	add	r3, r1
 800ccac:	3314      	adds	r3, #20
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	2b03      	cmp	r3, #3
 800ccb2:	d10a      	bne.n	800ccca <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ccb4:	4925      	ldr	r1, [pc, #148]	@ (800cd4c <etharp_tmr+0x14c>)
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	4613      	mov	r3, r2
 800ccba:	005b      	lsls	r3, r3, #1
 800ccbc:	4413      	add	r3, r2
 800ccbe:	00db      	lsls	r3, r3, #3
 800ccc0:	440b      	add	r3, r1
 800ccc2:	3314      	adds	r3, #20
 800ccc4:	2204      	movs	r2, #4
 800ccc6:	701a      	strb	r2, [r3, #0]
 800ccc8:	e034      	b.n	800cd34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ccca:	4920      	ldr	r1, [pc, #128]	@ (800cd4c <etharp_tmr+0x14c>)
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	4613      	mov	r3, r2
 800ccd0:	005b      	lsls	r3, r3, #1
 800ccd2:	4413      	add	r3, r2
 800ccd4:	00db      	lsls	r3, r3, #3
 800ccd6:	440b      	add	r3, r1
 800ccd8:	3314      	adds	r3, #20
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	2b04      	cmp	r3, #4
 800ccde:	d10a      	bne.n	800ccf6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cce0:	491a      	ldr	r1, [pc, #104]	@ (800cd4c <etharp_tmr+0x14c>)
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	4613      	mov	r3, r2
 800cce6:	005b      	lsls	r3, r3, #1
 800cce8:	4413      	add	r3, r2
 800ccea:	00db      	lsls	r3, r3, #3
 800ccec:	440b      	add	r3, r1
 800ccee:	3314      	adds	r3, #20
 800ccf0:	2202      	movs	r2, #2
 800ccf2:	701a      	strb	r2, [r3, #0]
 800ccf4:	e01e      	b.n	800cd34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ccf6:	4915      	ldr	r1, [pc, #84]	@ (800cd4c <etharp_tmr+0x14c>)
 800ccf8:	687a      	ldr	r2, [r7, #4]
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	005b      	lsls	r3, r3, #1
 800ccfe:	4413      	add	r3, r2
 800cd00:	00db      	lsls	r3, r3, #3
 800cd02:	440b      	add	r3, r1
 800cd04:	3314      	adds	r3, #20
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d113      	bne.n	800cd34 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cd0c:	490f      	ldr	r1, [pc, #60]	@ (800cd4c <etharp_tmr+0x14c>)
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	4613      	mov	r3, r2
 800cd12:	005b      	lsls	r3, r3, #1
 800cd14:	4413      	add	r3, r2
 800cd16:	00db      	lsls	r3, r3, #3
 800cd18:	440b      	add	r3, r1
 800cd1a:	3308      	adds	r3, #8
 800cd1c:	6818      	ldr	r0, [r3, #0]
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	4613      	mov	r3, r2
 800cd22:	005b      	lsls	r3, r3, #1
 800cd24:	4413      	add	r3, r2
 800cd26:	00db      	lsls	r3, r3, #3
 800cd28:	4a08      	ldr	r2, [pc, #32]	@ (800cd4c <etharp_tmr+0x14c>)
 800cd2a:	4413      	add	r3, r2
 800cd2c:	3304      	adds	r3, #4
 800cd2e:	4619      	mov	r1, r3
 800cd30:	f000 fe72 	bl	800da18 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	3301      	adds	r3, #1
 800cd38:	607b      	str	r3, [r7, #4]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2b09      	cmp	r3, #9
 800cd3e:	f77f af65 	ble.w	800cc0c <etharp_tmr+0xc>
      }
    }
  }
}
 800cd42:	bf00      	nop
 800cd44:	bf00      	nop
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	24004cd8 	.word	0x24004cd8

0800cd50 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b08a      	sub	sp, #40	@ 0x28
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	460b      	mov	r3, r1
 800cd5a:	607a      	str	r2, [r7, #4]
 800cd5c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cd5e:	230a      	movs	r3, #10
 800cd60:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800cd62:	230a      	movs	r3, #10
 800cd64:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cd66:	230a      	movs	r3, #10
 800cd68:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cd6e:	230a      	movs	r3, #10
 800cd70:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cd72:	2300      	movs	r3, #0
 800cd74:	83bb      	strh	r3, [r7, #28]
 800cd76:	2300      	movs	r3, #0
 800cd78:	837b      	strh	r3, [r7, #26]
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd7e:	2300      	movs	r3, #0
 800cd80:	843b      	strh	r3, [r7, #32]
 800cd82:	e0ae      	b.n	800cee2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cd84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd88:	49a6      	ldr	r1, [pc, #664]	@ (800d024 <etharp_find_entry+0x2d4>)
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	005b      	lsls	r3, r3, #1
 800cd8e:	4413      	add	r3, r2
 800cd90:	00db      	lsls	r3, r3, #3
 800cd92:	440b      	add	r3, r1
 800cd94:	3314      	adds	r3, #20
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cd9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cd9e:	2b0a      	cmp	r3, #10
 800cda0:	d105      	bne.n	800cdae <etharp_find_entry+0x5e>
 800cda2:	7dfb      	ldrb	r3, [r7, #23]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d102      	bne.n	800cdae <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cda8:	8c3b      	ldrh	r3, [r7, #32]
 800cdaa:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cdac:	e095      	b.n	800ceda <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cdae:	7dfb      	ldrb	r3, [r7, #23]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f000 8092 	beq.w	800ceda <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cdb6:	7dfb      	ldrb	r3, [r7, #23]
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d009      	beq.n	800cdd0 <etharp_find_entry+0x80>
 800cdbc:	7dfb      	ldrb	r3, [r7, #23]
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d806      	bhi.n	800cdd0 <etharp_find_entry+0x80>
 800cdc2:	4b99      	ldr	r3, [pc, #612]	@ (800d028 <etharp_find_entry+0x2d8>)
 800cdc4:	f240 1223 	movw	r2, #291	@ 0x123
 800cdc8:	4998      	ldr	r1, [pc, #608]	@ (800d02c <etharp_find_entry+0x2dc>)
 800cdca:	4899      	ldr	r0, [pc, #612]	@ (800d030 <etharp_find_entry+0x2e0>)
 800cdcc:	f00a fcb2 	bl	8017734 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d020      	beq.n	800ce18 <etharp_find_entry+0xc8>
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	6819      	ldr	r1, [r3, #0]
 800cdda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdde:	4891      	ldr	r0, [pc, #580]	@ (800d024 <etharp_find_entry+0x2d4>)
 800cde0:	4613      	mov	r3, r2
 800cde2:	005b      	lsls	r3, r3, #1
 800cde4:	4413      	add	r3, r2
 800cde6:	00db      	lsls	r3, r3, #3
 800cde8:	4403      	add	r3, r0
 800cdea:	3304      	adds	r3, #4
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4299      	cmp	r1, r3
 800cdf0:	d112      	bne.n	800ce18 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d00c      	beq.n	800ce12 <etharp_find_entry+0xc2>
 800cdf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdfc:	4989      	ldr	r1, [pc, #548]	@ (800d024 <etharp_find_entry+0x2d4>)
 800cdfe:	4613      	mov	r3, r2
 800ce00:	005b      	lsls	r3, r3, #1
 800ce02:	4413      	add	r3, r2
 800ce04:	00db      	lsls	r3, r3, #3
 800ce06:	440b      	add	r3, r1
 800ce08:	3308      	adds	r3, #8
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d102      	bne.n	800ce18 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ce12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ce16:	e100      	b.n	800d01a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ce18:	7dfb      	ldrb	r3, [r7, #23]
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d140      	bne.n	800cea0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ce1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce22:	4980      	ldr	r1, [pc, #512]	@ (800d024 <etharp_find_entry+0x2d4>)
 800ce24:	4613      	mov	r3, r2
 800ce26:	005b      	lsls	r3, r3, #1
 800ce28:	4413      	add	r3, r2
 800ce2a:	00db      	lsls	r3, r3, #3
 800ce2c:	440b      	add	r3, r1
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d01a      	beq.n	800ce6a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ce34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce38:	497a      	ldr	r1, [pc, #488]	@ (800d024 <etharp_find_entry+0x2d4>)
 800ce3a:	4613      	mov	r3, r2
 800ce3c:	005b      	lsls	r3, r3, #1
 800ce3e:	4413      	add	r3, r2
 800ce40:	00db      	lsls	r3, r3, #3
 800ce42:	440b      	add	r3, r1
 800ce44:	3312      	adds	r3, #18
 800ce46:	881b      	ldrh	r3, [r3, #0]
 800ce48:	8bba      	ldrh	r2, [r7, #28]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d845      	bhi.n	800ceda <etharp_find_entry+0x18a>
            old_queue = i;
 800ce4e:	8c3b      	ldrh	r3, [r7, #32]
 800ce50:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ce52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce56:	4973      	ldr	r1, [pc, #460]	@ (800d024 <etharp_find_entry+0x2d4>)
 800ce58:	4613      	mov	r3, r2
 800ce5a:	005b      	lsls	r3, r3, #1
 800ce5c:	4413      	add	r3, r2
 800ce5e:	00db      	lsls	r3, r3, #3
 800ce60:	440b      	add	r3, r1
 800ce62:	3312      	adds	r3, #18
 800ce64:	881b      	ldrh	r3, [r3, #0]
 800ce66:	83bb      	strh	r3, [r7, #28]
 800ce68:	e037      	b.n	800ceda <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ce6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce6e:	496d      	ldr	r1, [pc, #436]	@ (800d024 <etharp_find_entry+0x2d4>)
 800ce70:	4613      	mov	r3, r2
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	4413      	add	r3, r2
 800ce76:	00db      	lsls	r3, r3, #3
 800ce78:	440b      	add	r3, r1
 800ce7a:	3312      	adds	r3, #18
 800ce7c:	881b      	ldrh	r3, [r3, #0]
 800ce7e:	8b7a      	ldrh	r2, [r7, #26]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d82a      	bhi.n	800ceda <etharp_find_entry+0x18a>
            old_pending = i;
 800ce84:	8c3b      	ldrh	r3, [r7, #32]
 800ce86:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800ce88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce8c:	4965      	ldr	r1, [pc, #404]	@ (800d024 <etharp_find_entry+0x2d4>)
 800ce8e:	4613      	mov	r3, r2
 800ce90:	005b      	lsls	r3, r3, #1
 800ce92:	4413      	add	r3, r2
 800ce94:	00db      	lsls	r3, r3, #3
 800ce96:	440b      	add	r3, r1
 800ce98:	3312      	adds	r3, #18
 800ce9a:	881b      	ldrh	r3, [r3, #0]
 800ce9c:	837b      	strh	r3, [r7, #26]
 800ce9e:	e01c      	b.n	800ceda <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cea0:	7dfb      	ldrb	r3, [r7, #23]
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d919      	bls.n	800ceda <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cea6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ceaa:	495e      	ldr	r1, [pc, #376]	@ (800d024 <etharp_find_entry+0x2d4>)
 800ceac:	4613      	mov	r3, r2
 800ceae:	005b      	lsls	r3, r3, #1
 800ceb0:	4413      	add	r3, r2
 800ceb2:	00db      	lsls	r3, r3, #3
 800ceb4:	440b      	add	r3, r1
 800ceb6:	3312      	adds	r3, #18
 800ceb8:	881b      	ldrh	r3, [r3, #0]
 800ceba:	8b3a      	ldrh	r2, [r7, #24]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d80c      	bhi.n	800ceda <etharp_find_entry+0x18a>
            old_stable = i;
 800cec0:	8c3b      	ldrh	r3, [r7, #32]
 800cec2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800cec4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cec8:	4956      	ldr	r1, [pc, #344]	@ (800d024 <etharp_find_entry+0x2d4>)
 800ceca:	4613      	mov	r3, r2
 800cecc:	005b      	lsls	r3, r3, #1
 800cece:	4413      	add	r3, r2
 800ced0:	00db      	lsls	r3, r3, #3
 800ced2:	440b      	add	r3, r1
 800ced4:	3312      	adds	r3, #18
 800ced6:	881b      	ldrh	r3, [r3, #0]
 800ced8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ceda:	8c3b      	ldrh	r3, [r7, #32]
 800cedc:	3301      	adds	r3, #1
 800cede:	b29b      	uxth	r3, r3
 800cee0:	843b      	strh	r3, [r7, #32]
 800cee2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cee6:	2b09      	cmp	r3, #9
 800cee8:	f77f af4c 	ble.w	800cd84 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ceec:	7afb      	ldrb	r3, [r7, #11]
 800ceee:	f003 0302 	and.w	r3, r3, #2
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d108      	bne.n	800cf08 <etharp_find_entry+0x1b8>
 800cef6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cefa:	2b0a      	cmp	r3, #10
 800cefc:	d107      	bne.n	800cf0e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cefe:	7afb      	ldrb	r3, [r7, #11]
 800cf00:	f003 0301 	and.w	r3, r3, #1
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d102      	bne.n	800cf0e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cf08:	f04f 33ff 	mov.w	r3, #4294967295
 800cf0c:	e085      	b.n	800d01a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cf0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cf12:	2b09      	cmp	r3, #9
 800cf14:	dc02      	bgt.n	800cf1c <etharp_find_entry+0x1cc>
    i = empty;
 800cf16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cf18:	843b      	strh	r3, [r7, #32]
 800cf1a:	e039      	b.n	800cf90 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cf1c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800cf20:	2b09      	cmp	r3, #9
 800cf22:	dc14      	bgt.n	800cf4e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cf24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cf26:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cf28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf2c:	493d      	ldr	r1, [pc, #244]	@ (800d024 <etharp_find_entry+0x2d4>)
 800cf2e:	4613      	mov	r3, r2
 800cf30:	005b      	lsls	r3, r3, #1
 800cf32:	4413      	add	r3, r2
 800cf34:	00db      	lsls	r3, r3, #3
 800cf36:	440b      	add	r3, r1
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d018      	beq.n	800cf70 <etharp_find_entry+0x220>
 800cf3e:	4b3a      	ldr	r3, [pc, #232]	@ (800d028 <etharp_find_entry+0x2d8>)
 800cf40:	f240 126d 	movw	r2, #365	@ 0x16d
 800cf44:	493b      	ldr	r1, [pc, #236]	@ (800d034 <etharp_find_entry+0x2e4>)
 800cf46:	483a      	ldr	r0, [pc, #232]	@ (800d030 <etharp_find_entry+0x2e0>)
 800cf48:	f00a fbf4 	bl	8017734 <iprintf>
 800cf4c:	e010      	b.n	800cf70 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cf4e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800cf52:	2b09      	cmp	r3, #9
 800cf54:	dc02      	bgt.n	800cf5c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cf56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cf58:	843b      	strh	r3, [r7, #32]
 800cf5a:	e009      	b.n	800cf70 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cf5c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cf60:	2b09      	cmp	r3, #9
 800cf62:	dc02      	bgt.n	800cf6a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cf64:	8bfb      	ldrh	r3, [r7, #30]
 800cf66:	843b      	strh	r3, [r7, #32]
 800cf68:	e002      	b.n	800cf70 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cf6a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf6e:	e054      	b.n	800d01a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cf70:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf74:	2b09      	cmp	r3, #9
 800cf76:	dd06      	ble.n	800cf86 <etharp_find_entry+0x236>
 800cf78:	4b2b      	ldr	r3, [pc, #172]	@ (800d028 <etharp_find_entry+0x2d8>)
 800cf7a:	f240 127f 	movw	r2, #383	@ 0x17f
 800cf7e:	492e      	ldr	r1, [pc, #184]	@ (800d038 <etharp_find_entry+0x2e8>)
 800cf80:	482b      	ldr	r0, [pc, #172]	@ (800d030 <etharp_find_entry+0x2e0>)
 800cf82:	f00a fbd7 	bl	8017734 <iprintf>
    etharp_free_entry(i);
 800cf86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7ff fe06 	bl	800cb9c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cf90:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf94:	2b09      	cmp	r3, #9
 800cf96:	dd06      	ble.n	800cfa6 <etharp_find_entry+0x256>
 800cf98:	4b23      	ldr	r3, [pc, #140]	@ (800d028 <etharp_find_entry+0x2d8>)
 800cf9a:	f240 1283 	movw	r2, #387	@ 0x183
 800cf9e:	4926      	ldr	r1, [pc, #152]	@ (800d038 <etharp_find_entry+0x2e8>)
 800cfa0:	4823      	ldr	r0, [pc, #140]	@ (800d030 <etharp_find_entry+0x2e0>)
 800cfa2:	f00a fbc7 	bl	8017734 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cfa6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfaa:	491e      	ldr	r1, [pc, #120]	@ (800d024 <etharp_find_entry+0x2d4>)
 800cfac:	4613      	mov	r3, r2
 800cfae:	005b      	lsls	r3, r3, #1
 800cfb0:	4413      	add	r3, r2
 800cfb2:	00db      	lsls	r3, r3, #3
 800cfb4:	440b      	add	r3, r1
 800cfb6:	3314      	adds	r3, #20
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d006      	beq.n	800cfcc <etharp_find_entry+0x27c>
 800cfbe:	4b1a      	ldr	r3, [pc, #104]	@ (800d028 <etharp_find_entry+0x2d8>)
 800cfc0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800cfc4:	491d      	ldr	r1, [pc, #116]	@ (800d03c <etharp_find_entry+0x2ec>)
 800cfc6:	481a      	ldr	r0, [pc, #104]	@ (800d030 <etharp_find_entry+0x2e0>)
 800cfc8:	f00a fbb4 	bl	8017734 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00b      	beq.n	800cfea <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cfd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6819      	ldr	r1, [r3, #0]
 800cfda:	4812      	ldr	r0, [pc, #72]	@ (800d024 <etharp_find_entry+0x2d4>)
 800cfdc:	4613      	mov	r3, r2
 800cfde:	005b      	lsls	r3, r3, #1
 800cfe0:	4413      	add	r3, r2
 800cfe2:	00db      	lsls	r3, r3, #3
 800cfe4:	4403      	add	r3, r0
 800cfe6:	3304      	adds	r3, #4
 800cfe8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cfea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfee:	490d      	ldr	r1, [pc, #52]	@ (800d024 <etharp_find_entry+0x2d4>)
 800cff0:	4613      	mov	r3, r2
 800cff2:	005b      	lsls	r3, r3, #1
 800cff4:	4413      	add	r3, r2
 800cff6:	00db      	lsls	r3, r3, #3
 800cff8:	440b      	add	r3, r1
 800cffa:	3312      	adds	r3, #18
 800cffc:	2200      	movs	r2, #0
 800cffe:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d000:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d004:	4907      	ldr	r1, [pc, #28]	@ (800d024 <etharp_find_entry+0x2d4>)
 800d006:	4613      	mov	r3, r2
 800d008:	005b      	lsls	r3, r3, #1
 800d00a:	4413      	add	r3, r2
 800d00c:	00db      	lsls	r3, r3, #3
 800d00e:	440b      	add	r3, r1
 800d010:	3308      	adds	r3, #8
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d016:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3728      	adds	r7, #40	@ 0x28
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	24004cd8 	.word	0x24004cd8
 800d028:	08018abc 	.word	0x08018abc
 800d02c:	08018b28 	.word	0x08018b28
 800d030:	08018b68 	.word	0x08018b68
 800d034:	08018b90 	.word	0x08018b90
 800d038:	08018ba8 	.word	0x08018ba8
 800d03c:	08018bbc 	.word	0x08018bbc

0800d040 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b088      	sub	sp, #32
 800d044:	af02      	add	r7, sp, #8
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	607a      	str	r2, [r7, #4]
 800d04c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d054:	2b06      	cmp	r3, #6
 800d056:	d006      	beq.n	800d066 <etharp_update_arp_entry+0x26>
 800d058:	4b48      	ldr	r3, [pc, #288]	@ (800d17c <etharp_update_arp_entry+0x13c>)
 800d05a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800d05e:	4948      	ldr	r1, [pc, #288]	@ (800d180 <etharp_update_arp_entry+0x140>)
 800d060:	4848      	ldr	r0, [pc, #288]	@ (800d184 <etharp_update_arp_entry+0x144>)
 800d062:	f00a fb67 	bl	8017734 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d012      	beq.n	800d092 <etharp_update_arp_entry+0x52>
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d00e      	beq.n	800d092 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	68f9      	ldr	r1, [r7, #12]
 800d07a:	4618      	mov	r0, r3
 800d07c:	f001 faee 	bl	800e65c <ip4_addr_isbroadcast_u32>
 800d080:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d082:	2b00      	cmp	r3, #0
 800d084:	d105      	bne.n	800d092 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d08e:	2be0      	cmp	r3, #224	@ 0xe0
 800d090:	d102      	bne.n	800d098 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d092:	f06f 030f 	mvn.w	r3, #15
 800d096:	e06c      	b.n	800d172 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d098:	78fb      	ldrb	r3, [r7, #3]
 800d09a:	68fa      	ldr	r2, [r7, #12]
 800d09c:	4619      	mov	r1, r3
 800d09e:	68b8      	ldr	r0, [r7, #8]
 800d0a0:	f7ff fe56 	bl	800cd50 <etharp_find_entry>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d0a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	da02      	bge.n	800d0b6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d0b0:	8afb      	ldrh	r3, [r7, #22]
 800d0b2:	b25b      	sxtb	r3, r3
 800d0b4:	e05d      	b.n	800d172 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d0b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0ba:	4933      	ldr	r1, [pc, #204]	@ (800d188 <etharp_update_arp_entry+0x148>)
 800d0bc:	4613      	mov	r3, r2
 800d0be:	005b      	lsls	r3, r3, #1
 800d0c0:	4413      	add	r3, r2
 800d0c2:	00db      	lsls	r3, r3, #3
 800d0c4:	440b      	add	r3, r1
 800d0c6:	3314      	adds	r3, #20
 800d0c8:	2202      	movs	r2, #2
 800d0ca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d0cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0d0:	492d      	ldr	r1, [pc, #180]	@ (800d188 <etharp_update_arp_entry+0x148>)
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	005b      	lsls	r3, r3, #1
 800d0d6:	4413      	add	r3, r2
 800d0d8:	00db      	lsls	r3, r3, #3
 800d0da:	440b      	add	r3, r1
 800d0dc:	3308      	adds	r3, #8
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d0e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	005b      	lsls	r3, r3, #1
 800d0ea:	4413      	add	r3, r2
 800d0ec:	00db      	lsls	r3, r3, #3
 800d0ee:	3308      	adds	r3, #8
 800d0f0:	4a25      	ldr	r2, [pc, #148]	@ (800d188 <etharp_update_arp_entry+0x148>)
 800d0f2:	4413      	add	r3, r2
 800d0f4:	3304      	adds	r3, #4
 800d0f6:	2206      	movs	r2, #6
 800d0f8:	6879      	ldr	r1, [r7, #4]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f00a fce7 	bl	8017ace <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d100:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d104:	4920      	ldr	r1, [pc, #128]	@ (800d188 <etharp_update_arp_entry+0x148>)
 800d106:	4613      	mov	r3, r2
 800d108:	005b      	lsls	r3, r3, #1
 800d10a:	4413      	add	r3, r2
 800d10c:	00db      	lsls	r3, r3, #3
 800d10e:	440b      	add	r3, r1
 800d110:	3312      	adds	r3, #18
 800d112:	2200      	movs	r2, #0
 800d114:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d116:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d11a:	491b      	ldr	r1, [pc, #108]	@ (800d188 <etharp_update_arp_entry+0x148>)
 800d11c:	4613      	mov	r3, r2
 800d11e:	005b      	lsls	r3, r3, #1
 800d120:	4413      	add	r3, r2
 800d122:	00db      	lsls	r3, r3, #3
 800d124:	440b      	add	r3, r1
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d021      	beq.n	800d170 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d12c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d130:	4915      	ldr	r1, [pc, #84]	@ (800d188 <etharp_update_arp_entry+0x148>)
 800d132:	4613      	mov	r3, r2
 800d134:	005b      	lsls	r3, r3, #1
 800d136:	4413      	add	r3, r2
 800d138:	00db      	lsls	r3, r3, #3
 800d13a:	440b      	add	r3, r1
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d140:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d144:	4910      	ldr	r1, [pc, #64]	@ (800d188 <etharp_update_arp_entry+0x148>)
 800d146:	4613      	mov	r3, r2
 800d148:	005b      	lsls	r3, r3, #1
 800d14a:	4413      	add	r3, r2
 800d14c:	00db      	lsls	r3, r3, #3
 800d14e:	440b      	add	r3, r1
 800d150:	2200      	movs	r2, #0
 800d152:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800d15a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6939      	ldr	r1, [r7, #16]
 800d164:	68f8      	ldr	r0, [r7, #12]
 800d166:	f000 fcf7 	bl	800db58 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d16a:	6938      	ldr	r0, [r7, #16]
 800d16c:	f003 fd16 	bl	8010b9c <pbuf_free>
  }
  return ERR_OK;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3718      	adds	r7, #24
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	08018abc 	.word	0x08018abc
 800d180:	08018be8 	.word	0x08018be8
 800d184:	08018b68 	.word	0x08018b68
 800d188:	24004cd8 	.word	0x24004cd8

0800d18c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d194:	2300      	movs	r3, #0
 800d196:	60fb      	str	r3, [r7, #12]
 800d198:	e01e      	b.n	800d1d8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d19a:	4913      	ldr	r1, [pc, #76]	@ (800d1e8 <etharp_cleanup_netif+0x5c>)
 800d19c:	68fa      	ldr	r2, [r7, #12]
 800d19e:	4613      	mov	r3, r2
 800d1a0:	005b      	lsls	r3, r3, #1
 800d1a2:	4413      	add	r3, r2
 800d1a4:	00db      	lsls	r3, r3, #3
 800d1a6:	440b      	add	r3, r1
 800d1a8:	3314      	adds	r3, #20
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d1ae:	7afb      	ldrb	r3, [r7, #11]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d00e      	beq.n	800d1d2 <etharp_cleanup_netif+0x46>
 800d1b4:	490c      	ldr	r1, [pc, #48]	@ (800d1e8 <etharp_cleanup_netif+0x5c>)
 800d1b6:	68fa      	ldr	r2, [r7, #12]
 800d1b8:	4613      	mov	r3, r2
 800d1ba:	005b      	lsls	r3, r3, #1
 800d1bc:	4413      	add	r3, r2
 800d1be:	00db      	lsls	r3, r3, #3
 800d1c0:	440b      	add	r3, r1
 800d1c2:	3308      	adds	r3, #8
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d102      	bne.n	800d1d2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d1cc:	68f8      	ldr	r0, [r7, #12]
 800d1ce:	f7ff fce5 	bl	800cb9c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	60fb      	str	r3, [r7, #12]
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2b09      	cmp	r3, #9
 800d1dc:	dddd      	ble.n	800d19a <etharp_cleanup_netif+0xe>
    }
  }
}
 800d1de:	bf00      	nop
 800d1e0:	bf00      	nop
 800d1e2:	3710      	adds	r7, #16
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	24004cd8 	.word	0x24004cd8

0800d1ec <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d1ec:	b5b0      	push	{r4, r5, r7, lr}
 800d1ee:	b08a      	sub	sp, #40	@ 0x28
 800d1f0:	af04      	add	r7, sp, #16
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d107      	bne.n	800d20c <etharp_input+0x20>
 800d1fc:	4b3f      	ldr	r3, [pc, #252]	@ (800d2fc <etharp_input+0x110>)
 800d1fe:	f240 228a 	movw	r2, #650	@ 0x28a
 800d202:	493f      	ldr	r1, [pc, #252]	@ (800d300 <etharp_input+0x114>)
 800d204:	483f      	ldr	r0, [pc, #252]	@ (800d304 <etharp_input+0x118>)
 800d206:	f00a fa95 	bl	8017734 <iprintf>
 800d20a:	e074      	b.n	800d2f6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	881b      	ldrh	r3, [r3, #0]
 800d216:	b29b      	uxth	r3, r3
 800d218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d21c:	d10c      	bne.n	800d238 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d222:	2b06      	cmp	r3, #6
 800d224:	d108      	bne.n	800d238 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d22a:	2b04      	cmp	r3, #4
 800d22c:	d104      	bne.n	800d238 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	885b      	ldrh	r3, [r3, #2]
 800d232:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d234:	2b08      	cmp	r3, #8
 800d236:	d003      	beq.n	800d240 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f003 fcaf 	bl	8010b9c <pbuf_free>
    return;
 800d23e:	e05a      	b.n	800d2f6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	330e      	adds	r3, #14
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	3318      	adds	r3, #24
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	3304      	adds	r3, #4
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d102      	bne.n	800d260 <etharp_input+0x74>
    for_us = 0;
 800d25a:	2300      	movs	r3, #0
 800d25c:	75fb      	strb	r3, [r7, #23]
 800d25e:	e009      	b.n	800d274 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d260:	68ba      	ldr	r2, [r7, #8]
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	3304      	adds	r3, #4
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	429a      	cmp	r2, r3
 800d26a:	bf0c      	ite	eq
 800d26c:	2301      	moveq	r3, #1
 800d26e:	2300      	movne	r3, #0
 800d270:	b2db      	uxtb	r3, r3
 800d272:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	f103 0208 	add.w	r2, r3, #8
 800d27a:	7dfb      	ldrb	r3, [r7, #23]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d001      	beq.n	800d284 <etharp_input+0x98>
 800d280:	2301      	movs	r3, #1
 800d282:	e000      	b.n	800d286 <etharp_input+0x9a>
 800d284:	2302      	movs	r3, #2
 800d286:	f107 010c 	add.w	r1, r7, #12
 800d28a:	6838      	ldr	r0, [r7, #0]
 800d28c:	f7ff fed8 	bl	800d040 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	88db      	ldrh	r3, [r3, #6]
 800d294:	b29b      	uxth	r3, r3
 800d296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d29a:	d003      	beq.n	800d2a4 <etharp_input+0xb8>
 800d29c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2a0:	d01e      	beq.n	800d2e0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d2a2:	e025      	b.n	800d2f0 <etharp_input+0x104>
      if (for_us) {
 800d2a4:	7dfb      	ldrb	r3, [r7, #23]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d021      	beq.n	800d2ee <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d2c0:	693a      	ldr	r2, [r7, #16]
 800d2c2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d2c4:	2102      	movs	r1, #2
 800d2c6:	9103      	str	r1, [sp, #12]
 800d2c8:	f107 010c 	add.w	r1, r7, #12
 800d2cc:	9102      	str	r1, [sp, #8]
 800d2ce:	9201      	str	r2, [sp, #4]
 800d2d0:	9300      	str	r3, [sp, #0]
 800d2d2:	462b      	mov	r3, r5
 800d2d4:	4622      	mov	r2, r4
 800d2d6:	4601      	mov	r1, r0
 800d2d8:	6838      	ldr	r0, [r7, #0]
 800d2da:	f000 faef 	bl	800d8bc <etharp_raw>
      break;
 800d2de:	e006      	b.n	800d2ee <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800d2e0:	f107 030c 	add.w	r3, r7, #12
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	6838      	ldr	r0, [r7, #0]
 800d2e8:	f7fe fa02 	bl	800b6f0 <dhcp_arp_reply>
      break;
 800d2ec:	e000      	b.n	800d2f0 <etharp_input+0x104>
      break;
 800d2ee:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f003 fc53 	bl	8010b9c <pbuf_free>
}
 800d2f6:	3718      	adds	r7, #24
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bdb0      	pop	{r4, r5, r7, pc}
 800d2fc:	08018abc 	.word	0x08018abc
 800d300:	08018c40 	.word	0x08018c40
 800d304:	08018b68 	.word	0x08018b68

0800d308 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b086      	sub	sp, #24
 800d30c:	af02      	add	r7, sp, #8
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	4613      	mov	r3, r2
 800d314:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d316:	79fa      	ldrb	r2, [r7, #7]
 800d318:	4944      	ldr	r1, [pc, #272]	@ (800d42c <etharp_output_to_arp_index+0x124>)
 800d31a:	4613      	mov	r3, r2
 800d31c:	005b      	lsls	r3, r3, #1
 800d31e:	4413      	add	r3, r2
 800d320:	00db      	lsls	r3, r3, #3
 800d322:	440b      	add	r3, r1
 800d324:	3314      	adds	r3, #20
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d806      	bhi.n	800d33a <etharp_output_to_arp_index+0x32>
 800d32c:	4b40      	ldr	r3, [pc, #256]	@ (800d430 <etharp_output_to_arp_index+0x128>)
 800d32e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800d332:	4940      	ldr	r1, [pc, #256]	@ (800d434 <etharp_output_to_arp_index+0x12c>)
 800d334:	4840      	ldr	r0, [pc, #256]	@ (800d438 <etharp_output_to_arp_index+0x130>)
 800d336:	f00a f9fd 	bl	8017734 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d33a:	79fa      	ldrb	r2, [r7, #7]
 800d33c:	493b      	ldr	r1, [pc, #236]	@ (800d42c <etharp_output_to_arp_index+0x124>)
 800d33e:	4613      	mov	r3, r2
 800d340:	005b      	lsls	r3, r3, #1
 800d342:	4413      	add	r3, r2
 800d344:	00db      	lsls	r3, r3, #3
 800d346:	440b      	add	r3, r1
 800d348:	3314      	adds	r3, #20
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	2b02      	cmp	r3, #2
 800d34e:	d153      	bne.n	800d3f8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d350:	79fa      	ldrb	r2, [r7, #7]
 800d352:	4936      	ldr	r1, [pc, #216]	@ (800d42c <etharp_output_to_arp_index+0x124>)
 800d354:	4613      	mov	r3, r2
 800d356:	005b      	lsls	r3, r3, #1
 800d358:	4413      	add	r3, r2
 800d35a:	00db      	lsls	r3, r3, #3
 800d35c:	440b      	add	r3, r1
 800d35e:	3312      	adds	r3, #18
 800d360:	881b      	ldrh	r3, [r3, #0]
 800d362:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800d366:	d919      	bls.n	800d39c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d368:	79fa      	ldrb	r2, [r7, #7]
 800d36a:	4613      	mov	r3, r2
 800d36c:	005b      	lsls	r3, r3, #1
 800d36e:	4413      	add	r3, r2
 800d370:	00db      	lsls	r3, r3, #3
 800d372:	4a2e      	ldr	r2, [pc, #184]	@ (800d42c <etharp_output_to_arp_index+0x124>)
 800d374:	4413      	add	r3, r2
 800d376:	3304      	adds	r3, #4
 800d378:	4619      	mov	r1, r3
 800d37a:	68f8      	ldr	r0, [r7, #12]
 800d37c:	f000 fb4c 	bl	800da18 <etharp_request>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	d138      	bne.n	800d3f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d386:	79fa      	ldrb	r2, [r7, #7]
 800d388:	4928      	ldr	r1, [pc, #160]	@ (800d42c <etharp_output_to_arp_index+0x124>)
 800d38a:	4613      	mov	r3, r2
 800d38c:	005b      	lsls	r3, r3, #1
 800d38e:	4413      	add	r3, r2
 800d390:	00db      	lsls	r3, r3, #3
 800d392:	440b      	add	r3, r1
 800d394:	3314      	adds	r3, #20
 800d396:	2203      	movs	r2, #3
 800d398:	701a      	strb	r2, [r3, #0]
 800d39a:	e02d      	b.n	800d3f8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d39c:	79fa      	ldrb	r2, [r7, #7]
 800d39e:	4923      	ldr	r1, [pc, #140]	@ (800d42c <etharp_output_to_arp_index+0x124>)
 800d3a0:	4613      	mov	r3, r2
 800d3a2:	005b      	lsls	r3, r3, #1
 800d3a4:	4413      	add	r3, r2
 800d3a6:	00db      	lsls	r3, r3, #3
 800d3a8:	440b      	add	r3, r1
 800d3aa:	3312      	adds	r3, #18
 800d3ac:	881b      	ldrh	r3, [r3, #0]
 800d3ae:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800d3b2:	d321      	bcc.n	800d3f8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d3b4:	79fa      	ldrb	r2, [r7, #7]
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	005b      	lsls	r3, r3, #1
 800d3ba:	4413      	add	r3, r2
 800d3bc:	00db      	lsls	r3, r3, #3
 800d3be:	4a1b      	ldr	r2, [pc, #108]	@ (800d42c <etharp_output_to_arp_index+0x124>)
 800d3c0:	4413      	add	r3, r2
 800d3c2:	1d19      	adds	r1, r3, #4
 800d3c4:	79fa      	ldrb	r2, [r7, #7]
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	005b      	lsls	r3, r3, #1
 800d3ca:	4413      	add	r3, r2
 800d3cc:	00db      	lsls	r3, r3, #3
 800d3ce:	3308      	adds	r3, #8
 800d3d0:	4a16      	ldr	r2, [pc, #88]	@ (800d42c <etharp_output_to_arp_index+0x124>)
 800d3d2:	4413      	add	r3, r2
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	68f8      	ldr	r0, [r7, #12]
 800d3da:	f000 fafb 	bl	800d9d4 <etharp_request_dst>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d109      	bne.n	800d3f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d3e4:	79fa      	ldrb	r2, [r7, #7]
 800d3e6:	4911      	ldr	r1, [pc, #68]	@ (800d42c <etharp_output_to_arp_index+0x124>)
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	005b      	lsls	r3, r3, #1
 800d3ec:	4413      	add	r3, r2
 800d3ee:	00db      	lsls	r3, r3, #3
 800d3f0:	440b      	add	r3, r1
 800d3f2:	3314      	adds	r3, #20
 800d3f4:	2203      	movs	r2, #3
 800d3f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 800d3fe:	79fa      	ldrb	r2, [r7, #7]
 800d400:	4613      	mov	r3, r2
 800d402:	005b      	lsls	r3, r3, #1
 800d404:	4413      	add	r3, r2
 800d406:	00db      	lsls	r3, r3, #3
 800d408:	3308      	adds	r3, #8
 800d40a:	4a08      	ldr	r2, [pc, #32]	@ (800d42c <etharp_output_to_arp_index+0x124>)
 800d40c:	4413      	add	r3, r2
 800d40e:	3304      	adds	r3, #4
 800d410:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d414:	9200      	str	r2, [sp, #0]
 800d416:	460a      	mov	r2, r1
 800d418:	68b9      	ldr	r1, [r7, #8]
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	f000 fb9c 	bl	800db58 <ethernet_output>
 800d420:	4603      	mov	r3, r0
}
 800d422:	4618      	mov	r0, r3
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	24004cd8 	.word	0x24004cd8
 800d430:	08018abc 	.word	0x08018abc
 800d434:	08018c60 	.word	0x08018c60
 800d438:	08018b68 	.word	0x08018b68

0800d43c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b08a      	sub	sp, #40	@ 0x28
 800d440:	af02      	add	r7, sp, #8
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d106      	bne.n	800d460 <etharp_output+0x24>
 800d452:	4b73      	ldr	r3, [pc, #460]	@ (800d620 <etharp_output+0x1e4>)
 800d454:	f240 321e 	movw	r2, #798	@ 0x31e
 800d458:	4972      	ldr	r1, [pc, #456]	@ (800d624 <etharp_output+0x1e8>)
 800d45a:	4873      	ldr	r0, [pc, #460]	@ (800d628 <etharp_output+0x1ec>)
 800d45c:	f00a f96a 	bl	8017734 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d106      	bne.n	800d474 <etharp_output+0x38>
 800d466:	4b6e      	ldr	r3, [pc, #440]	@ (800d620 <etharp_output+0x1e4>)
 800d468:	f240 321f 	movw	r2, #799	@ 0x31f
 800d46c:	496f      	ldr	r1, [pc, #444]	@ (800d62c <etharp_output+0x1f0>)
 800d46e:	486e      	ldr	r0, [pc, #440]	@ (800d628 <etharp_output+0x1ec>)
 800d470:	f00a f960 	bl	8017734 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d106      	bne.n	800d488 <etharp_output+0x4c>
 800d47a:	4b69      	ldr	r3, [pc, #420]	@ (800d620 <etharp_output+0x1e4>)
 800d47c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800d480:	496b      	ldr	r1, [pc, #428]	@ (800d630 <etharp_output+0x1f4>)
 800d482:	4869      	ldr	r0, [pc, #420]	@ (800d628 <etharp_output+0x1ec>)
 800d484:	f00a f956 	bl	8017734 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	68f9      	ldr	r1, [r7, #12]
 800d48e:	4618      	mov	r0, r3
 800d490:	f001 f8e4 	bl	800e65c <ip4_addr_isbroadcast_u32>
 800d494:	4603      	mov	r3, r0
 800d496:	2b00      	cmp	r3, #0
 800d498:	d002      	beq.n	800d4a0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d49a:	4b66      	ldr	r3, [pc, #408]	@ (800d634 <etharp_output+0x1f8>)
 800d49c:	61fb      	str	r3, [r7, #28]
 800d49e:	e0af      	b.n	800d600 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d4a8:	2be0      	cmp	r3, #224	@ 0xe0
 800d4aa:	d118      	bne.n	800d4de <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d4b4:	235e      	movs	r3, #94	@ 0x5e
 800d4b6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	3302      	adds	r3, #2
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	3303      	adds	r3, #3
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d4d6:	f107 0310 	add.w	r3, r7, #16
 800d4da:	61fb      	str	r3, [r7, #28]
 800d4dc:	e090      	b.n	800d600 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	3304      	adds	r3, #4
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	405a      	eors	r2, r3
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	3308      	adds	r3, #8
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	4013      	ands	r3, r2
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d012      	beq.n	800d51c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d4fc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800d500:	4293      	cmp	r3, r2
 800d502:	d00b      	beq.n	800d51c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	330c      	adds	r3, #12
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d003      	beq.n	800d516 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	330c      	adds	r3, #12
 800d512:	61bb      	str	r3, [r7, #24]
 800d514:	e002      	b.n	800d51c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d516:	f06f 0303 	mvn.w	r3, #3
 800d51a:	e07d      	b.n	800d618 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d51c:	4b46      	ldr	r3, [pc, #280]	@ (800d638 <etharp_output+0x1fc>)
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	4619      	mov	r1, r3
 800d522:	4a46      	ldr	r2, [pc, #280]	@ (800d63c <etharp_output+0x200>)
 800d524:	460b      	mov	r3, r1
 800d526:	005b      	lsls	r3, r3, #1
 800d528:	440b      	add	r3, r1
 800d52a:	00db      	lsls	r3, r3, #3
 800d52c:	4413      	add	r3, r2
 800d52e:	3314      	adds	r3, #20
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	2b01      	cmp	r3, #1
 800d534:	d925      	bls.n	800d582 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d536:	4b40      	ldr	r3, [pc, #256]	@ (800d638 <etharp_output+0x1fc>)
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	4619      	mov	r1, r3
 800d53c:	4a3f      	ldr	r2, [pc, #252]	@ (800d63c <etharp_output+0x200>)
 800d53e:	460b      	mov	r3, r1
 800d540:	005b      	lsls	r3, r3, #1
 800d542:	440b      	add	r3, r1
 800d544:	00db      	lsls	r3, r3, #3
 800d546:	4413      	add	r3, r2
 800d548:	3308      	adds	r3, #8
 800d54a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d54c:	68fa      	ldr	r2, [r7, #12]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d117      	bne.n	800d582 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	681a      	ldr	r2, [r3, #0]
 800d556:	4b38      	ldr	r3, [pc, #224]	@ (800d638 <etharp_output+0x1fc>)
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	4618      	mov	r0, r3
 800d55c:	4937      	ldr	r1, [pc, #220]	@ (800d63c <etharp_output+0x200>)
 800d55e:	4603      	mov	r3, r0
 800d560:	005b      	lsls	r3, r3, #1
 800d562:	4403      	add	r3, r0
 800d564:	00db      	lsls	r3, r3, #3
 800d566:	440b      	add	r3, r1
 800d568:	3304      	adds	r3, #4
 800d56a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d108      	bne.n	800d582 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d570:	4b31      	ldr	r3, [pc, #196]	@ (800d638 <etharp_output+0x1fc>)
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	461a      	mov	r2, r3
 800d576:	68b9      	ldr	r1, [r7, #8]
 800d578:	68f8      	ldr	r0, [r7, #12]
 800d57a:	f7ff fec5 	bl	800d308 <etharp_output_to_arp_index>
 800d57e:	4603      	mov	r3, r0
 800d580:	e04a      	b.n	800d618 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d582:	2300      	movs	r3, #0
 800d584:	75fb      	strb	r3, [r7, #23]
 800d586:	e031      	b.n	800d5ec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d588:	7dfa      	ldrb	r2, [r7, #23]
 800d58a:	492c      	ldr	r1, [pc, #176]	@ (800d63c <etharp_output+0x200>)
 800d58c:	4613      	mov	r3, r2
 800d58e:	005b      	lsls	r3, r3, #1
 800d590:	4413      	add	r3, r2
 800d592:	00db      	lsls	r3, r3, #3
 800d594:	440b      	add	r3, r1
 800d596:	3314      	adds	r3, #20
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d923      	bls.n	800d5e6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d59e:	7dfa      	ldrb	r2, [r7, #23]
 800d5a0:	4926      	ldr	r1, [pc, #152]	@ (800d63c <etharp_output+0x200>)
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	005b      	lsls	r3, r3, #1
 800d5a6:	4413      	add	r3, r2
 800d5a8:	00db      	lsls	r3, r3, #3
 800d5aa:	440b      	add	r3, r1
 800d5ac:	3308      	adds	r3, #8
 800d5ae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d5b0:	68fa      	ldr	r2, [r7, #12]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d117      	bne.n	800d5e6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	6819      	ldr	r1, [r3, #0]
 800d5ba:	7dfa      	ldrb	r2, [r7, #23]
 800d5bc:	481f      	ldr	r0, [pc, #124]	@ (800d63c <etharp_output+0x200>)
 800d5be:	4613      	mov	r3, r2
 800d5c0:	005b      	lsls	r3, r3, #1
 800d5c2:	4413      	add	r3, r2
 800d5c4:	00db      	lsls	r3, r3, #3
 800d5c6:	4403      	add	r3, r0
 800d5c8:	3304      	adds	r3, #4
 800d5ca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d5cc:	4299      	cmp	r1, r3
 800d5ce:	d10a      	bne.n	800d5e6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d5d0:	4a19      	ldr	r2, [pc, #100]	@ (800d638 <etharp_output+0x1fc>)
 800d5d2:	7dfb      	ldrb	r3, [r7, #23]
 800d5d4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d5d6:	7dfb      	ldrb	r3, [r7, #23]
 800d5d8:	461a      	mov	r2, r3
 800d5da:	68b9      	ldr	r1, [r7, #8]
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f7ff fe93 	bl	800d308 <etharp_output_to_arp_index>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	e018      	b.n	800d618 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d5e6:	7dfb      	ldrb	r3, [r7, #23]
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	75fb      	strb	r3, [r7, #23]
 800d5ec:	7dfb      	ldrb	r3, [r7, #23]
 800d5ee:	2b09      	cmp	r3, #9
 800d5f0:	d9ca      	bls.n	800d588 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d5f2:	68ba      	ldr	r2, [r7, #8]
 800d5f4:	69b9      	ldr	r1, [r7, #24]
 800d5f6:	68f8      	ldr	r0, [r7, #12]
 800d5f8:	f000 f822 	bl	800d640 <etharp_query>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	e00b      	b.n	800d618 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800d606:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d60a:	9300      	str	r3, [sp, #0]
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	68b9      	ldr	r1, [r7, #8]
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f000 faa1 	bl	800db58 <ethernet_output>
 800d616:	4603      	mov	r3, r0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3720      	adds	r7, #32
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	08018abc 	.word	0x08018abc
 800d624:	08018c40 	.word	0x08018c40
 800d628:	08018b68 	.word	0x08018b68
 800d62c:	08018c90 	.word	0x08018c90
 800d630:	08018c30 	.word	0x08018c30
 800d634:	0801b8a0 	.word	0x0801b8a0
 800d638:	24004dc8 	.word	0x24004dc8
 800d63c:	24004cd8 	.word	0x24004cd8

0800d640 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b08c      	sub	sp, #48	@ 0x30
 800d644:	af02      	add	r7, sp, #8
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	332a      	adds	r3, #42	@ 0x2a
 800d650:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d652:	23ff      	movs	r3, #255	@ 0xff
 800d654:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800d658:	2300      	movs	r3, #0
 800d65a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	68f9      	ldr	r1, [r7, #12]
 800d662:	4618      	mov	r0, r3
 800d664:	f000 fffa 	bl	800e65c <ip4_addr_isbroadcast_u32>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d10c      	bne.n	800d688 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d676:	2be0      	cmp	r3, #224	@ 0xe0
 800d678:	d006      	beq.n	800d688 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d003      	beq.n	800d688 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d102      	bne.n	800d68e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d688:	f06f 030f 	mvn.w	r3, #15
 800d68c:	e101      	b.n	800d892 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d68e:	68fa      	ldr	r2, [r7, #12]
 800d690:	2101      	movs	r1, #1
 800d692:	68b8      	ldr	r0, [r7, #8]
 800d694:	f7ff fb5c 	bl	800cd50 <etharp_find_entry>
 800d698:	4603      	mov	r3, r0
 800d69a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d69c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	da02      	bge.n	800d6aa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d6a4:	8a7b      	ldrh	r3, [r7, #18]
 800d6a6:	b25b      	sxtb	r3, r3
 800d6a8:	e0f3      	b.n	800d892 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d6aa:	8a7b      	ldrh	r3, [r7, #18]
 800d6ac:	2b7e      	cmp	r3, #126	@ 0x7e
 800d6ae:	d906      	bls.n	800d6be <etharp_query+0x7e>
 800d6b0:	4b7a      	ldr	r3, [pc, #488]	@ (800d89c <etharp_query+0x25c>)
 800d6b2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800d6b6:	497a      	ldr	r1, [pc, #488]	@ (800d8a0 <etharp_query+0x260>)
 800d6b8:	487a      	ldr	r0, [pc, #488]	@ (800d8a4 <etharp_query+0x264>)
 800d6ba:	f00a f83b 	bl	8017734 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d6be:	8a7b      	ldrh	r3, [r7, #18]
 800d6c0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d6c2:	7c7a      	ldrb	r2, [r7, #17]
 800d6c4:	4978      	ldr	r1, [pc, #480]	@ (800d8a8 <etharp_query+0x268>)
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	4413      	add	r3, r2
 800d6cc:	00db      	lsls	r3, r3, #3
 800d6ce:	440b      	add	r3, r1
 800d6d0:	3314      	adds	r3, #20
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d115      	bne.n	800d704 <etharp_query+0xc4>
    is_new_entry = 1;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d6dc:	7c7a      	ldrb	r2, [r7, #17]
 800d6de:	4972      	ldr	r1, [pc, #456]	@ (800d8a8 <etharp_query+0x268>)
 800d6e0:	4613      	mov	r3, r2
 800d6e2:	005b      	lsls	r3, r3, #1
 800d6e4:	4413      	add	r3, r2
 800d6e6:	00db      	lsls	r3, r3, #3
 800d6e8:	440b      	add	r3, r1
 800d6ea:	3314      	adds	r3, #20
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d6f0:	7c7a      	ldrb	r2, [r7, #17]
 800d6f2:	496d      	ldr	r1, [pc, #436]	@ (800d8a8 <etharp_query+0x268>)
 800d6f4:	4613      	mov	r3, r2
 800d6f6:	005b      	lsls	r3, r3, #1
 800d6f8:	4413      	add	r3, r2
 800d6fa:	00db      	lsls	r3, r3, #3
 800d6fc:	440b      	add	r3, r1
 800d6fe:	3308      	adds	r3, #8
 800d700:	68fa      	ldr	r2, [r7, #12]
 800d702:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d704:	7c7a      	ldrb	r2, [r7, #17]
 800d706:	4968      	ldr	r1, [pc, #416]	@ (800d8a8 <etharp_query+0x268>)
 800d708:	4613      	mov	r3, r2
 800d70a:	005b      	lsls	r3, r3, #1
 800d70c:	4413      	add	r3, r2
 800d70e:	00db      	lsls	r3, r3, #3
 800d710:	440b      	add	r3, r1
 800d712:	3314      	adds	r3, #20
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	2b01      	cmp	r3, #1
 800d718:	d011      	beq.n	800d73e <etharp_query+0xfe>
 800d71a:	7c7a      	ldrb	r2, [r7, #17]
 800d71c:	4962      	ldr	r1, [pc, #392]	@ (800d8a8 <etharp_query+0x268>)
 800d71e:	4613      	mov	r3, r2
 800d720:	005b      	lsls	r3, r3, #1
 800d722:	4413      	add	r3, r2
 800d724:	00db      	lsls	r3, r3, #3
 800d726:	440b      	add	r3, r1
 800d728:	3314      	adds	r3, #20
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d806      	bhi.n	800d73e <etharp_query+0xfe>
 800d730:	4b5a      	ldr	r3, [pc, #360]	@ (800d89c <etharp_query+0x25c>)
 800d732:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800d736:	495d      	ldr	r1, [pc, #372]	@ (800d8ac <etharp_query+0x26c>)
 800d738:	485a      	ldr	r0, [pc, #360]	@ (800d8a4 <etharp_query+0x264>)
 800d73a:	f009 fffb 	bl	8017734 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d73e:	6a3b      	ldr	r3, [r7, #32]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d102      	bne.n	800d74a <etharp_query+0x10a>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d10c      	bne.n	800d764 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d74a:	68b9      	ldr	r1, [r7, #8]
 800d74c:	68f8      	ldr	r0, [r7, #12]
 800d74e:	f000 f963 	bl	800da18 <etharp_request>
 800d752:	4603      	mov	r3, r0
 800d754:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d102      	bne.n	800d764 <etharp_query+0x124>
      return result;
 800d75e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d762:	e096      	b.n	800d892 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d106      	bne.n	800d778 <etharp_query+0x138>
 800d76a:	4b4c      	ldr	r3, [pc, #304]	@ (800d89c <etharp_query+0x25c>)
 800d76c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800d770:	494f      	ldr	r1, [pc, #316]	@ (800d8b0 <etharp_query+0x270>)
 800d772:	484c      	ldr	r0, [pc, #304]	@ (800d8a4 <etharp_query+0x264>)
 800d774:	f009 ffde 	bl	8017734 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d778:	7c7a      	ldrb	r2, [r7, #17]
 800d77a:	494b      	ldr	r1, [pc, #300]	@ (800d8a8 <etharp_query+0x268>)
 800d77c:	4613      	mov	r3, r2
 800d77e:	005b      	lsls	r3, r3, #1
 800d780:	4413      	add	r3, r2
 800d782:	00db      	lsls	r3, r3, #3
 800d784:	440b      	add	r3, r1
 800d786:	3314      	adds	r3, #20
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d917      	bls.n	800d7be <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d78e:	4a49      	ldr	r2, [pc, #292]	@ (800d8b4 <etharp_query+0x274>)
 800d790:	7c7b      	ldrb	r3, [r7, #17]
 800d792:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d794:	7c7a      	ldrb	r2, [r7, #17]
 800d796:	4613      	mov	r3, r2
 800d798:	005b      	lsls	r3, r3, #1
 800d79a:	4413      	add	r3, r2
 800d79c:	00db      	lsls	r3, r3, #3
 800d79e:	3308      	adds	r3, #8
 800d7a0:	4a41      	ldr	r2, [pc, #260]	@ (800d8a8 <etharp_query+0x268>)
 800d7a2:	4413      	add	r3, r2
 800d7a4:	3304      	adds	r3, #4
 800d7a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d7aa:	9200      	str	r2, [sp, #0]
 800d7ac:	697a      	ldr	r2, [r7, #20]
 800d7ae:	6879      	ldr	r1, [r7, #4]
 800d7b0:	68f8      	ldr	r0, [r7, #12]
 800d7b2:	f000 f9d1 	bl	800db58 <ethernet_output>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d7bc:	e067      	b.n	800d88e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d7be:	7c7a      	ldrb	r2, [r7, #17]
 800d7c0:	4939      	ldr	r1, [pc, #228]	@ (800d8a8 <etharp_query+0x268>)
 800d7c2:	4613      	mov	r3, r2
 800d7c4:	005b      	lsls	r3, r3, #1
 800d7c6:	4413      	add	r3, r2
 800d7c8:	00db      	lsls	r3, r3, #3
 800d7ca:	440b      	add	r3, r1
 800d7cc:	3314      	adds	r3, #20
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d15c      	bne.n	800d88e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d7dc:	e01c      	b.n	800d818 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d7de:	69fb      	ldr	r3, [r7, #28]
 800d7e0:	895a      	ldrh	r2, [r3, #10]
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	891b      	ldrh	r3, [r3, #8]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d10a      	bne.n	800d800 <etharp_query+0x1c0>
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d006      	beq.n	800d800 <etharp_query+0x1c0>
 800d7f2:	4b2a      	ldr	r3, [pc, #168]	@ (800d89c <etharp_query+0x25c>)
 800d7f4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800d7f8:	492f      	ldr	r1, [pc, #188]	@ (800d8b8 <etharp_query+0x278>)
 800d7fa:	482a      	ldr	r0, [pc, #168]	@ (800d8a4 <etharp_query+0x264>)
 800d7fc:	f009 ff9a 	bl	8017734 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	7b1b      	ldrb	r3, [r3, #12]
 800d804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <etharp_query+0x1d2>
        copy_needed = 1;
 800d80c:	2301      	movs	r3, #1
 800d80e:	61bb      	str	r3, [r7, #24]
        break;
 800d810:	e005      	b.n	800d81e <etharp_query+0x1de>
      }
      p = p->next;
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1df      	bne.n	800d7de <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d007      	beq.n	800d834 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800d82a:	200e      	movs	r0, #14
 800d82c:	f003 fc2e 	bl	801108c <pbuf_clone>
 800d830:	61f8      	str	r0, [r7, #28]
 800d832:	e004      	b.n	800d83e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d838:	69f8      	ldr	r0, [r7, #28]
 800d83a:	f003 fa55 	bl	8010ce8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d021      	beq.n	800d888 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d844:	7c7a      	ldrb	r2, [r7, #17]
 800d846:	4918      	ldr	r1, [pc, #96]	@ (800d8a8 <etharp_query+0x268>)
 800d848:	4613      	mov	r3, r2
 800d84a:	005b      	lsls	r3, r3, #1
 800d84c:	4413      	add	r3, r2
 800d84e:	00db      	lsls	r3, r3, #3
 800d850:	440b      	add	r3, r1
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00a      	beq.n	800d86e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d858:	7c7a      	ldrb	r2, [r7, #17]
 800d85a:	4913      	ldr	r1, [pc, #76]	@ (800d8a8 <etharp_query+0x268>)
 800d85c:	4613      	mov	r3, r2
 800d85e:	005b      	lsls	r3, r3, #1
 800d860:	4413      	add	r3, r2
 800d862:	00db      	lsls	r3, r3, #3
 800d864:	440b      	add	r3, r1
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4618      	mov	r0, r3
 800d86a:	f003 f997 	bl	8010b9c <pbuf_free>
      }
      arp_table[i].q = p;
 800d86e:	7c7a      	ldrb	r2, [r7, #17]
 800d870:	490d      	ldr	r1, [pc, #52]	@ (800d8a8 <etharp_query+0x268>)
 800d872:	4613      	mov	r3, r2
 800d874:	005b      	lsls	r3, r3, #1
 800d876:	4413      	add	r3, r2
 800d878:	00db      	lsls	r3, r3, #3
 800d87a:	440b      	add	r3, r1
 800d87c:	69fa      	ldr	r2, [r7, #28]
 800d87e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d880:	2300      	movs	r3, #0
 800d882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d886:	e002      	b.n	800d88e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d888:	23ff      	movs	r3, #255	@ 0xff
 800d88a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800d88e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d892:	4618      	mov	r0, r3
 800d894:	3728      	adds	r7, #40	@ 0x28
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	08018abc 	.word	0x08018abc
 800d8a0:	08018c9c 	.word	0x08018c9c
 800d8a4:	08018b68 	.word	0x08018b68
 800d8a8:	24004cd8 	.word	0x24004cd8
 800d8ac:	08018cac 	.word	0x08018cac
 800d8b0:	08018c90 	.word	0x08018c90
 800d8b4:	24004dc8 	.word	0x24004dc8
 800d8b8:	08018cd4 	.word	0x08018cd4

0800d8bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b08a      	sub	sp, #40	@ 0x28
 800d8c0:	af02      	add	r7, sp, #8
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	607a      	str	r2, [r7, #4]
 800d8c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d106      	bne.n	800d8e2 <etharp_raw+0x26>
 800d8d4:	4b3a      	ldr	r3, [pc, #232]	@ (800d9c0 <etharp_raw+0x104>)
 800d8d6:	f240 4257 	movw	r2, #1111	@ 0x457
 800d8da:	493a      	ldr	r1, [pc, #232]	@ (800d9c4 <etharp_raw+0x108>)
 800d8dc:	483a      	ldr	r0, [pc, #232]	@ (800d9c8 <etharp_raw+0x10c>)
 800d8de:	f009 ff29 	bl	8017734 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d8e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d8e6:	211c      	movs	r1, #28
 800d8e8:	200e      	movs	r0, #14
 800d8ea:	f002 fe75 	bl	80105d8 <pbuf_alloc>
 800d8ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d8f0:	69bb      	ldr	r3, [r7, #24]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d102      	bne.n	800d8fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d8f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8fa:	e05d      	b.n	800d9b8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	895b      	ldrh	r3, [r3, #10]
 800d900:	2b1b      	cmp	r3, #27
 800d902:	d806      	bhi.n	800d912 <etharp_raw+0x56>
 800d904:	4b2e      	ldr	r3, [pc, #184]	@ (800d9c0 <etharp_raw+0x104>)
 800d906:	f240 4262 	movw	r2, #1122	@ 0x462
 800d90a:	4930      	ldr	r1, [pc, #192]	@ (800d9cc <etharp_raw+0x110>)
 800d90c:	482e      	ldr	r0, [pc, #184]	@ (800d9c8 <etharp_raw+0x10c>)
 800d90e:	f009 ff11 	bl	8017734 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d918:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fd fa82 	bl	800ae24 <lwip_htons>
 800d920:	4603      	mov	r3, r0
 800d922:	461a      	mov	r2, r3
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d92e:	2b06      	cmp	r3, #6
 800d930:	d006      	beq.n	800d940 <etharp_raw+0x84>
 800d932:	4b23      	ldr	r3, [pc, #140]	@ (800d9c0 <etharp_raw+0x104>)
 800d934:	f240 4269 	movw	r2, #1129	@ 0x469
 800d938:	4925      	ldr	r1, [pc, #148]	@ (800d9d0 <etharp_raw+0x114>)
 800d93a:	4823      	ldr	r0, [pc, #140]	@ (800d9c8 <etharp_raw+0x10c>)
 800d93c:	f009 fefa 	bl	8017734 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	3308      	adds	r3, #8
 800d944:	2206      	movs	r2, #6
 800d946:	6839      	ldr	r1, [r7, #0]
 800d948:	4618      	mov	r0, r3
 800d94a:	f00a f8c0 	bl	8017ace <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	3312      	adds	r3, #18
 800d952:	2206      	movs	r2, #6
 800d954:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d956:	4618      	mov	r0, r3
 800d958:	f00a f8b9 	bl	8017ace <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	330e      	adds	r3, #14
 800d960:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d962:	6812      	ldr	r2, [r2, #0]
 800d964:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	3318      	adds	r3, #24
 800d96a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d96c:	6812      	ldr	r2, [r2, #0]
 800d96e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	2200      	movs	r2, #0
 800d974:	701a      	strb	r2, [r3, #0]
 800d976:	2200      	movs	r2, #0
 800d978:	f042 0201 	orr.w	r2, r2, #1
 800d97c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	2200      	movs	r2, #0
 800d982:	f042 0208 	orr.w	r2, r2, #8
 800d986:	709a      	strb	r2, [r3, #2]
 800d988:	2200      	movs	r2, #0
 800d98a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	2206      	movs	r2, #6
 800d990:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	2204      	movs	r2, #4
 800d996:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d998:	f640 0306 	movw	r3, #2054	@ 0x806
 800d99c:	9300      	str	r3, [sp, #0]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	68ba      	ldr	r2, [r7, #8]
 800d9a2:	69b9      	ldr	r1, [r7, #24]
 800d9a4:	68f8      	ldr	r0, [r7, #12]
 800d9a6:	f000 f8d7 	bl	800db58 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d9aa:	69b8      	ldr	r0, [r7, #24]
 800d9ac:	f003 f8f6 	bl	8010b9c <pbuf_free>
  p = NULL;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d9b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3720      	adds	r7, #32
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	08018abc 	.word	0x08018abc
 800d9c4:	08018c40 	.word	0x08018c40
 800d9c8:	08018b68 	.word	0x08018b68
 800d9cc:	08018cf0 	.word	0x08018cf0
 800d9d0:	08018d24 	.word	0x08018d24

0800d9d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b088      	sub	sp, #32
 800d9d8:	af04      	add	r7, sp, #16
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	60b9      	str	r1, [r7, #8]
 800d9de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	9203      	str	r2, [sp, #12]
 800d9f4:	68ba      	ldr	r2, [r7, #8]
 800d9f6:	9202      	str	r2, [sp, #8]
 800d9f8:	4a06      	ldr	r2, [pc, #24]	@ (800da14 <etharp_request_dst+0x40>)
 800d9fa:	9201      	str	r2, [sp, #4]
 800d9fc:	9300      	str	r3, [sp, #0]
 800d9fe:	4603      	mov	r3, r0
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	68f8      	ldr	r0, [r7, #12]
 800da04:	f7ff ff5a 	bl	800d8bc <etharp_raw>
 800da08:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	0801b8a8 	.word	0x0801b8a8

0800da18 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800da22:	4a05      	ldr	r2, [pc, #20]	@ (800da38 <etharp_request+0x20>)
 800da24:	6839      	ldr	r1, [r7, #0]
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f7ff ffd4 	bl	800d9d4 <etharp_request_dst>
 800da2c:	4603      	mov	r3, r0
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3708      	adds	r7, #8
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	0801b8a0 	.word	0x0801b8a0

0800da3c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b086      	sub	sp, #24
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800da46:	230e      	movs	r3, #14
 800da48:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	895b      	ldrh	r3, [r3, #10]
 800da4e:	2b0e      	cmp	r3, #14
 800da50:	d96e      	bls.n	800db30 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	7bdb      	ldrb	r3, [r3, #15]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d106      	bne.n	800da68 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800da60:	3301      	adds	r3, #1
 800da62:	b2da      	uxtb	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	7b1a      	ldrb	r2, [r3, #12]
 800da72:	7b5b      	ldrb	r3, [r3, #13]
 800da74:	021b      	lsls	r3, r3, #8
 800da76:	4313      	orrs	r3, r2
 800da78:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	f003 0301 	and.w	r3, r3, #1
 800da82:	2b00      	cmp	r3, #0
 800da84:	d023      	beq.n	800dace <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d10f      	bne.n	800daae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	785b      	ldrb	r3, [r3, #1]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d11b      	bne.n	800dace <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800da9a:	2b5e      	cmp	r3, #94	@ 0x5e
 800da9c:	d117      	bne.n	800dace <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	7b5b      	ldrb	r3, [r3, #13]
 800daa2:	f043 0310 	orr.w	r3, r3, #16
 800daa6:	b2da      	uxtb	r2, r3
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	735a      	strb	r2, [r3, #13]
 800daac:	e00f      	b.n	800dace <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	2206      	movs	r2, #6
 800dab2:	4928      	ldr	r1, [pc, #160]	@ (800db54 <ethernet_input+0x118>)
 800dab4:	4618      	mov	r0, r3
 800dab6:	f009 ff85 	bl	80179c4 <memcmp>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d106      	bne.n	800dace <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	7b5b      	ldrb	r3, [r3, #13]
 800dac4:	f043 0308 	orr.w	r3, r3, #8
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800dace:	89fb      	ldrh	r3, [r7, #14]
 800dad0:	2b08      	cmp	r3, #8
 800dad2:	d003      	beq.n	800dadc <ethernet_input+0xa0>
 800dad4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800dad8:	d014      	beq.n	800db04 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800dada:	e032      	b.n	800db42 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800dae2:	f003 0308 	and.w	r3, r3, #8
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d024      	beq.n	800db34 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800daea:	8afb      	ldrh	r3, [r7, #22]
 800daec:	4619      	mov	r1, r3
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f002 ffce 	bl	8010a90 <pbuf_remove_header>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d11e      	bne.n	800db38 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800dafa:	6839      	ldr	r1, [r7, #0]
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 fb93 	bl	800e228 <ip4_input>
      break;
 800db02:	e013      	b.n	800db2c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800db0a:	f003 0308 	and.w	r3, r3, #8
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d014      	beq.n	800db3c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800db12:	8afb      	ldrh	r3, [r7, #22]
 800db14:	4619      	mov	r1, r3
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f002 ffba 	bl	8010a90 <pbuf_remove_header>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d10e      	bne.n	800db40 <ethernet_input+0x104>
        etharp_input(p, netif);
 800db22:	6839      	ldr	r1, [r7, #0]
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7ff fb61 	bl	800d1ec <etharp_input>
      break;
 800db2a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800db2c:	2300      	movs	r3, #0
 800db2e:	e00c      	b.n	800db4a <ethernet_input+0x10e>
    goto free_and_return;
 800db30:	bf00      	nop
 800db32:	e006      	b.n	800db42 <ethernet_input+0x106>
        goto free_and_return;
 800db34:	bf00      	nop
 800db36:	e004      	b.n	800db42 <ethernet_input+0x106>
        goto free_and_return;
 800db38:	bf00      	nop
 800db3a:	e002      	b.n	800db42 <ethernet_input+0x106>
        goto free_and_return;
 800db3c:	bf00      	nop
 800db3e:	e000      	b.n	800db42 <ethernet_input+0x106>
        goto free_and_return;
 800db40:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f003 f82a 	bl	8010b9c <pbuf_free>
  return ERR_OK;
 800db48:	2300      	movs	r3, #0
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3718      	adds	r7, #24
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	0801b8a0 	.word	0x0801b8a0

0800db58 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800db58:	b580      	push	{r7, lr}
 800db5a:	b086      	sub	sp, #24
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	60f8      	str	r0, [r7, #12]
 800db60:	60b9      	str	r1, [r7, #8]
 800db62:	607a      	str	r2, [r7, #4]
 800db64:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800db66:	8c3b      	ldrh	r3, [r7, #32]
 800db68:	4618      	mov	r0, r3
 800db6a:	f7fd f95b 	bl	800ae24 <lwip_htons>
 800db6e:	4603      	mov	r3, r0
 800db70:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800db72:	210e      	movs	r1, #14
 800db74:	68b8      	ldr	r0, [r7, #8]
 800db76:	f002 ff7b 	bl	8010a70 <pbuf_add_header>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d125      	bne.n	800dbcc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	8afa      	ldrh	r2, [r7, #22]
 800db8a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	2206      	movs	r2, #6
 800db90:	6839      	ldr	r1, [r7, #0]
 800db92:	4618      	mov	r0, r3
 800db94:	f009 ff9b 	bl	8017ace <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	3306      	adds	r3, #6
 800db9c:	2206      	movs	r2, #6
 800db9e:	6879      	ldr	r1, [r7, #4]
 800dba0:	4618      	mov	r0, r3
 800dba2:	f009 ff94 	bl	8017ace <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dbac:	2b06      	cmp	r3, #6
 800dbae:	d006      	beq.n	800dbbe <ethernet_output+0x66>
 800dbb0:	4b0a      	ldr	r3, [pc, #40]	@ (800dbdc <ethernet_output+0x84>)
 800dbb2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800dbb6:	490a      	ldr	r1, [pc, #40]	@ (800dbe0 <ethernet_output+0x88>)
 800dbb8:	480a      	ldr	r0, [pc, #40]	@ (800dbe4 <ethernet_output+0x8c>)
 800dbba:	f009 fdbb 	bl	8017734 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	699b      	ldr	r3, [r3, #24]
 800dbc2:	68b9      	ldr	r1, [r7, #8]
 800dbc4:	68f8      	ldr	r0, [r7, #12]
 800dbc6:	4798      	blx	r3
 800dbc8:	4603      	mov	r3, r0
 800dbca:	e002      	b.n	800dbd2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800dbcc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800dbce:	f06f 0301 	mvn.w	r3, #1
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3718      	adds	r7, #24
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	08018d68 	.word	0x08018d68
 800dbe0:	08018dd0 	.word	0x08018dd0
 800dbe4:	08018e04 	.word	0x08018e04

0800dbe8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b08e      	sub	sp, #56	@ 0x38
 800dbec:	af04      	add	r7, sp, #16
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800dbf2:	4b86      	ldr	r3, [pc, #536]	@ (800de0c <icmp_input+0x224>)
 800dbf4:	689b      	ldr	r3, [r3, #8]
 800dbf6:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 800dbf8:	6a3b      	ldr	r3, [r7, #32]
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	f003 030f 	and.w	r3, r3, #15
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	009b      	lsls	r3, r3, #2
 800dc04:	b2db      	uxtb	r3, r3
 800dc06:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 800dc08:	8bfb      	ldrh	r3, [r7, #30]
 800dc0a:	2b13      	cmp	r3, #19
 800dc0c:	f240 80ea 	bls.w	800dde4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	895b      	ldrh	r3, [r3, #10]
 800dc14:	2b03      	cmp	r3, #3
 800dc16:	f240 80e7 	bls.w	800dde8 <icmp_input+0x200>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800dc22:	7f7b      	ldrb	r3, [r7, #29]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	f000 80d6 	beq.w	800ddd6 <icmp_input+0x1ee>
 800dc2a:	2b08      	cmp	r3, #8
 800dc2c:	f040 80d6 	bne.w	800dddc <icmp_input+0x1f4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800dc30:	4b77      	ldr	r3, [pc, #476]	@ (800de10 <icmp_input+0x228>)
 800dc32:	627b      	str	r3, [r7, #36]	@ 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dc34:	4b75      	ldr	r3, [pc, #468]	@ (800de0c <icmp_input+0x224>)
 800dc36:	695b      	ldr	r3, [r3, #20]
 800dc38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dc3c:	2be0      	cmp	r3, #224	@ 0xe0
 800dc3e:	d102      	bne.n	800dc46 <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	3304      	adds	r3, #4
 800dc44:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800dc46:	4b71      	ldr	r3, [pc, #452]	@ (800de0c <icmp_input+0x224>)
 800dc48:	695b      	ldr	r3, [r3, #20]
 800dc4a:	4a70      	ldr	r2, [pc, #448]	@ (800de0c <icmp_input+0x224>)
 800dc4c:	6812      	ldr	r2, [r2, #0]
 800dc4e:	4611      	mov	r1, r2
 800dc50:	4618      	mov	r0, r3
 800dc52:	f000 fd03 	bl	800e65c <ip4_addr_isbroadcast_u32>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d002      	beq.n	800dc62 <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	3304      	adds	r3, #4
 800dc60:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	891b      	ldrh	r3, [r3, #8]
 800dc66:	2b07      	cmp	r3, #7
 800dc68:	f240 80c0 	bls.w	800ddec <icmp_input+0x204>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 f9dc 	bl	800e02a <inet_chksum_pbuf>
 800dc72:	4603      	mov	r3, r0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d003      	beq.n	800dc80 <icmp_input+0x98>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f002 ff8f 	bl	8010b9c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800dc7e:	e0c1      	b.n	800de04 <icmp_input+0x21c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dc80:	8bfb      	ldrh	r3, [r7, #30]
 800dc82:	330e      	adds	r3, #14
 800dc84:	4619      	mov	r1, r3
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f002 fef2 	bl	8010a70 <pbuf_add_header>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d04b      	beq.n	800dd2a <icmp_input+0x142>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	891a      	ldrh	r2, [r3, #8]
 800dc96:	8bfb      	ldrh	r3, [r7, #30]
 800dc98:	4413      	add	r3, r2
 800dc9a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	891b      	ldrh	r3, [r3, #8]
 800dca0:	8b7a      	ldrh	r2, [r7, #26]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	f0c0 80a7 	bcc.w	800ddf6 <icmp_input+0x20e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800dca8:	8b7b      	ldrh	r3, [r7, #26]
 800dcaa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dcae:	4619      	mov	r1, r3
 800dcb0:	200e      	movs	r0, #14
 800dcb2:	f002 fc91 	bl	80105d8 <pbuf_alloc>
 800dcb6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	f000 809d 	beq.w	800ddfa <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	895b      	ldrh	r3, [r3, #10]
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	8bfb      	ldrh	r3, [r7, #30]
 800dcc8:	3308      	adds	r3, #8
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d203      	bcs.n	800dcd6 <icmp_input+0xee>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800dcce:	6978      	ldr	r0, [r7, #20]
 800dcd0:	f002 ff64 	bl	8010b9c <pbuf_free>
          goto icmperr;
 800dcd4:	e092      	b.n	800ddfc <icmp_input+0x214>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	8bfa      	ldrh	r2, [r7, #30]
 800dcdc:	6a39      	ldr	r1, [r7, #32]
 800dcde:	4618      	mov	r0, r3
 800dce0:	f009 fef5 	bl	8017ace <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800dce4:	8bfb      	ldrh	r3, [r7, #30]
 800dce6:	4619      	mov	r1, r3
 800dce8:	6978      	ldr	r0, [r7, #20]
 800dcea:	f002 fed1 	bl	8010a90 <pbuf_remove_header>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d009      	beq.n	800dd08 <icmp_input+0x120>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800dcf4:	4b47      	ldr	r3, [pc, #284]	@ (800de14 <icmp_input+0x22c>)
 800dcf6:	22b6      	movs	r2, #182	@ 0xb6
 800dcf8:	4947      	ldr	r1, [pc, #284]	@ (800de18 <icmp_input+0x230>)
 800dcfa:	4848      	ldr	r0, [pc, #288]	@ (800de1c <icmp_input+0x234>)
 800dcfc:	f009 fd1a 	bl	8017734 <iprintf>
          pbuf_free(r);
 800dd00:	6978      	ldr	r0, [r7, #20]
 800dd02:	f002 ff4b 	bl	8010b9c <pbuf_free>
          goto icmperr;
 800dd06:	e079      	b.n	800ddfc <icmp_input+0x214>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800dd08:	6879      	ldr	r1, [r7, #4]
 800dd0a:	6978      	ldr	r0, [r7, #20]
 800dd0c:	f003 f87a 	bl	8010e04 <pbuf_copy>
 800dd10:	4603      	mov	r3, r0
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d003      	beq.n	800dd1e <icmp_input+0x136>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800dd16:	6978      	ldr	r0, [r7, #20]
 800dd18:	f002 ff40 	bl	8010b9c <pbuf_free>
          goto icmperr;
 800dd1c:	e06e      	b.n	800ddfc <icmp_input+0x214>
        }
        /* free the original p */
        pbuf_free(p);
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f002 ff3c 	bl	8010b9c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	607b      	str	r3, [r7, #4]
 800dd28:	e00f      	b.n	800dd4a <icmp_input+0x162>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dd2a:	8bfb      	ldrh	r3, [r7, #30]
 800dd2c:	330e      	adds	r3, #14
 800dd2e:	4619      	mov	r1, r3
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f002 fead 	bl	8010a90 <pbuf_remove_header>
 800dd36:	4603      	mov	r3, r0
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d006      	beq.n	800dd4a <icmp_input+0x162>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dd3c:	4b35      	ldr	r3, [pc, #212]	@ (800de14 <icmp_input+0x22c>)
 800dd3e:	22c7      	movs	r2, #199	@ 0xc7
 800dd40:	4937      	ldr	r1, [pc, #220]	@ (800de20 <icmp_input+0x238>)
 800dd42:	4836      	ldr	r0, [pc, #216]	@ (800de1c <icmp_input+0x234>)
 800dd44:	f009 fcf6 	bl	8017734 <iprintf>
          goto icmperr;
 800dd48:	e058      	b.n	800ddfc <icmp_input+0x214>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800dd50:	8bfb      	ldrh	r3, [r7, #30]
 800dd52:	4619      	mov	r1, r3
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f002 fe8b 	bl	8010a70 <pbuf_add_header>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d13c      	bne.n	800ddda <icmp_input+0x1f2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800dd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dd6e:	4b27      	ldr	r3, [pc, #156]	@ (800de0c <icmp_input+0x224>)
 800dd70:	691a      	ldr	r2, [r3, #16]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	885b      	ldrh	r3, [r3, #2]
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d907      	bls.n	800dd9a <icmp_input+0x1b2>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	885b      	ldrh	r3, [r3, #2]
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	3309      	adds	r3, #9
 800dd92:	b29a      	uxth	r2, r3
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	805a      	strh	r2, [r3, #2]
 800dd98:	e006      	b.n	800dda8 <icmp_input+0x1c0>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	885b      	ldrh	r3, [r3, #2]
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	3308      	adds	r3, #8
 800dda2:	b29a      	uxth	r2, r3
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	22ff      	movs	r2, #255	@ 0xff
 800ddac:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	729a      	strb	r2, [r3, #10]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	9302      	str	r3, [sp, #8]
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	9301      	str	r3, [sp, #4]
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	23ff      	movs	r3, #255	@ 0xff
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 fb6e 	bl	800e4ac <ip4_output_if>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ddd4:	e001      	b.n	800ddda <icmp_input+0x1f2>
      break;
 800ddd6:	bf00      	nop
 800ddd8:	e000      	b.n	800dddc <icmp_input+0x1f4>
      break;
 800ddda:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f002 fedd 	bl	8010b9c <pbuf_free>
  return;
 800dde2:	e00f      	b.n	800de04 <icmp_input+0x21c>
    goto lenerr;
 800dde4:	bf00      	nop
 800dde6:	e002      	b.n	800ddee <icmp_input+0x206>
    goto lenerr;
 800dde8:	bf00      	nop
 800ddea:	e000      	b.n	800ddee <icmp_input+0x206>
        goto lenerr;
 800ddec:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f002 fed4 	bl	8010b9c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ddf4:	e006      	b.n	800de04 <icmp_input+0x21c>
          goto icmperr;
 800ddf6:	bf00      	nop
 800ddf8:	e000      	b.n	800ddfc <icmp_input+0x214>
          goto icmperr;
 800ddfa:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f002 fecd 	bl	8010b9c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800de02:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800de04:	3728      	adds	r7, #40	@ 0x28
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	24004dcc 	.word	0x24004dcc
 800de10:	24004de0 	.word	0x24004de0
 800de14:	08018e2c 	.word	0x08018e2c
 800de18:	08018e94 	.word	0x08018e94
 800de1c:	08018ecc 	.word	0x08018ecc
 800de20:	08018ef4 	.word	0x08018ef4

0800de24 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	460b      	mov	r3, r1
 800de2e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800de30:	78fb      	ldrb	r3, [r7, #3]
 800de32:	461a      	mov	r2, r3
 800de34:	2103      	movs	r1, #3
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f000 f814 	bl	800de64 <icmp_send_response>
}
 800de3c:	bf00      	nop
 800de3e:	3708      	adds	r7, #8
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	460b      	mov	r3, r1
 800de4e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800de50:	78fb      	ldrb	r3, [r7, #3]
 800de52:	461a      	mov	r2, r3
 800de54:	210b      	movs	r1, #11
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f000 f804 	bl	800de64 <icmp_send_response>
}
 800de5c:	bf00      	nop
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b08c      	sub	sp, #48	@ 0x30
 800de68:	af04      	add	r7, sp, #16
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	460b      	mov	r3, r1
 800de6e:	70fb      	strb	r3, [r7, #3]
 800de70:	4613      	mov	r3, r2
 800de72:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800de74:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800de78:	2124      	movs	r1, #36	@ 0x24
 800de7a:	2022      	movs	r0, #34	@ 0x22
 800de7c:	f002 fbac 	bl	80105d8 <pbuf_alloc>
 800de80:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d056      	beq.n	800df36 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800de88:	69fb      	ldr	r3, [r7, #28]
 800de8a:	895b      	ldrh	r3, [r3, #10]
 800de8c:	2b23      	cmp	r3, #35	@ 0x23
 800de8e:	d806      	bhi.n	800de9e <icmp_send_response+0x3a>
 800de90:	4b2b      	ldr	r3, [pc, #172]	@ (800df40 <icmp_send_response+0xdc>)
 800de92:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800de96:	492b      	ldr	r1, [pc, #172]	@ (800df44 <icmp_send_response+0xe0>)
 800de98:	482b      	ldr	r0, [pc, #172]	@ (800df48 <icmp_send_response+0xe4>)
 800de9a:	f009 fc4b 	bl	8017734 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800dea4:	69fb      	ldr	r3, [r7, #28]
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	78fa      	ldrb	r2, [r7, #3]
 800deae:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	78ba      	ldrb	r2, [r7, #2]
 800deb4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	2200      	movs	r2, #0
 800deba:	711a      	strb	r2, [r3, #4]
 800debc:	2200      	movs	r2, #0
 800debe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	2200      	movs	r2, #0
 800dec4:	719a      	strb	r2, [r3, #6]
 800dec6:	2200      	movs	r2, #0
 800dec8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800deca:	69fb      	ldr	r3, [r7, #28]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	f103 0008 	add.w	r0, r3, #8
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	221c      	movs	r2, #28
 800ded8:	4619      	mov	r1, r3
 800deda:	f009 fdf8 	bl	8017ace <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800dede:	69bb      	ldr	r3, [r7, #24]
 800dee0:	68db      	ldr	r3, [r3, #12]
 800dee2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dee4:	f107 030c 	add.w	r3, r7, #12
 800dee8:	4618      	mov	r0, r3
 800deea:	f000 f903 	bl	800e0f4 <ip4_route>
 800deee:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d01b      	beq.n	800df2e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	2200      	movs	r2, #0
 800defa:	709a      	strb	r2, [r3, #2]
 800defc:	2200      	movs	r2, #0
 800defe:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	895b      	ldrh	r3, [r3, #10]
 800df04:	4619      	mov	r1, r3
 800df06:	6978      	ldr	r0, [r7, #20]
 800df08:	f000 f87d 	bl	800e006 <inet_chksum>
 800df0c:	4603      	mov	r3, r0
 800df0e:	461a      	mov	r2, r3
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800df14:	f107 020c 	add.w	r2, r7, #12
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	9302      	str	r3, [sp, #8]
 800df1c:	2301      	movs	r3, #1
 800df1e:	9301      	str	r3, [sp, #4]
 800df20:	2300      	movs	r3, #0
 800df22:	9300      	str	r3, [sp, #0]
 800df24:	23ff      	movs	r3, #255	@ 0xff
 800df26:	2100      	movs	r1, #0
 800df28:	69f8      	ldr	r0, [r7, #28]
 800df2a:	f000 fabf 	bl	800e4ac <ip4_output_if>
  }
  pbuf_free(q);
 800df2e:	69f8      	ldr	r0, [r7, #28]
 800df30:	f002 fe34 	bl	8010b9c <pbuf_free>
 800df34:	e000      	b.n	800df38 <icmp_send_response+0xd4>
    return;
 800df36:	bf00      	nop
}
 800df38:	3720      	adds	r7, #32
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	08018e2c 	.word	0x08018e2c
 800df44:	08018f28 	.word	0x08018f28
 800df48:	08018ecc 	.word	0x08018ecc

0800df4c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b089      	sub	sp, #36	@ 0x24
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800df5e:	2300      	movs	r3, #0
 800df60:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	f003 0301 	and.w	r3, r3, #1
 800df68:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d00d      	beq.n	800df8c <lwip_standard_chksum+0x40>
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	2b00      	cmp	r3, #0
 800df74:	dd0a      	ble.n	800df8c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800df76:	69fa      	ldr	r2, [r7, #28]
 800df78:	1c53      	adds	r3, r2, #1
 800df7a:	61fb      	str	r3, [r7, #28]
 800df7c:	f107 030e 	add.w	r3, r7, #14
 800df80:	3301      	adds	r3, #1
 800df82:	7812      	ldrb	r2, [r2, #0]
 800df84:	701a      	strb	r2, [r3, #0]
    len--;
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	3b01      	subs	r3, #1
 800df8a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800df90:	e00a      	b.n	800dfa8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800df92:	69bb      	ldr	r3, [r7, #24]
 800df94:	1c9a      	adds	r2, r3, #2
 800df96:	61ba      	str	r2, [r7, #24]
 800df98:	881b      	ldrh	r3, [r3, #0]
 800df9a:	461a      	mov	r2, r3
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	4413      	add	r3, r2
 800dfa0:	617b      	str	r3, [r7, #20]
    len -= 2;
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	3b02      	subs	r3, #2
 800dfa6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	2b01      	cmp	r3, #1
 800dfac:	dcf1      	bgt.n	800df92 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	dd04      	ble.n	800dfbe <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800dfb4:	f107 030e 	add.w	r3, r7, #14
 800dfb8:	69ba      	ldr	r2, [r7, #24]
 800dfba:	7812      	ldrb	r2, [r2, #0]
 800dfbc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800dfbe:	89fb      	ldrh	r3, [r7, #14]
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	4413      	add	r3, r2
 800dfc6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	0c1a      	lsrs	r2, r3, #16
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	4413      	add	r3, r2
 800dfd2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	0c1a      	lsrs	r2, r3, #16
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	4413      	add	r3, r2
 800dfde:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d007      	beq.n	800dff6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	021b      	lsls	r3, r3, #8
 800dfea:	b29a      	uxth	r2, r3
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	0a1b      	lsrs	r3, r3, #8
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	4313      	orrs	r3, r2
 800dff4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	b29b      	uxth	r3, r3
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3724      	adds	r7, #36	@ 0x24
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr

0800e006 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b082      	sub	sp, #8
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
 800e00e:	460b      	mov	r3, r1
 800e010:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800e012:	887b      	ldrh	r3, [r7, #2]
 800e014:	4619      	mov	r1, r3
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f7ff ff98 	bl	800df4c <lwip_standard_chksum>
 800e01c:	4603      	mov	r3, r0
 800e01e:	43db      	mvns	r3, r3
 800e020:	b29b      	uxth	r3, r3
}
 800e022:	4618      	mov	r0, r3
 800e024:	3708      	adds	r7, #8
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800e02a:	b580      	push	{r7, lr}
 800e02c:	b086      	sub	sp, #24
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800e032:	2300      	movs	r3, #0
 800e034:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800e036:	2300      	movs	r3, #0
 800e038:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	613b      	str	r3, [r7, #16]
 800e03e:	e02b      	b.n	800e098 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	685a      	ldr	r2, [r3, #4]
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	895b      	ldrh	r3, [r3, #10]
 800e048:	4619      	mov	r1, r3
 800e04a:	4610      	mov	r0, r2
 800e04c:	f7ff ff7e 	bl	800df4c <lwip_standard_chksum>
 800e050:	4603      	mov	r3, r0
 800e052:	461a      	mov	r2, r3
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	4413      	add	r3, r2
 800e058:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	0c1a      	lsrs	r2, r3, #16
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	b29b      	uxth	r3, r3
 800e062:	4413      	add	r3, r2
 800e064:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	895b      	ldrh	r3, [r3, #10]
 800e06a:	f003 0301 	and.w	r3, r3, #1
 800e06e:	b29b      	uxth	r3, r3
 800e070:	2b00      	cmp	r3, #0
 800e072:	d00e      	beq.n	800e092 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2b00      	cmp	r3, #0
 800e078:	bf0c      	ite	eq
 800e07a:	2301      	moveq	r3, #1
 800e07c:	2300      	movne	r3, #0
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	021b      	lsls	r3, r3, #8
 800e086:	b29a      	uxth	r2, r3
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	0a1b      	lsrs	r3, r3, #8
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	4313      	orrs	r3, r2
 800e090:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	613b      	str	r3, [r7, #16]
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d1d0      	bne.n	800e040 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d007      	beq.n	800e0b4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	021b      	lsls	r3, r3, #8
 800e0a8:	b29a      	uxth	r2, r3
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	0a1b      	lsrs	r3, r3, #8
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	43db      	mvns	r3, r3
 800e0ba:	b29b      	uxth	r3, r3
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3718      	adds	r7, #24
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800e0ce:	f003 f885 	bl	80111dc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800e0d2:	f001 fa87 	bl	800f5e4 <mem_init>
  memp_init();
 800e0d6:	f001 fdcf 	bl	800fc78 <memp_init>
  pbuf_init();
  netif_init();
 800e0da:	f001 fedb 	bl	800fe94 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e0de:	f008 fd6d 	bl	8016bbc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e0e2:	f003 f8f7 	bl	80112d4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800e0e6:	f008 fcaf 	bl	8016a48 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800e0ea:	bf00      	nop
 800e0ec:	3708      	adds	r7, #8
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
	...

0800e0f4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b085      	sub	sp, #20
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e0fc:	4b33      	ldr	r3, [pc, #204]	@ (800e1cc <ip4_route+0xd8>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	60fb      	str	r3, [r7, #12]
 800e102:	e036      	b.n	800e172 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e10a:	f003 0301 	and.w	r3, r3, #1
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	2b00      	cmp	r3, #0
 800e112:	d02b      	beq.n	800e16c <ip4_route+0x78>
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e11a:	089b      	lsrs	r3, r3, #2
 800e11c:	f003 0301 	and.w	r3, r3, #1
 800e120:	b2db      	uxtb	r3, r3
 800e122:	2b00      	cmp	r3, #0
 800e124:	d022      	beq.n	800e16c <ip4_route+0x78>
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	3304      	adds	r3, #4
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d01d      	beq.n	800e16c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	3304      	adds	r3, #4
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	405a      	eors	r2, r3
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	3308      	adds	r3, #8
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	4013      	ands	r3, r2
 800e144:	2b00      	cmp	r3, #0
 800e146:	d101      	bne.n	800e14c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	e038      	b.n	800e1be <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e152:	f003 0302 	and.w	r3, r3, #2
 800e156:	2b00      	cmp	r3, #0
 800e158:	d108      	bne.n	800e16c <ip4_route+0x78>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	330c      	adds	r3, #12
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	429a      	cmp	r2, r3
 800e166:	d101      	bne.n	800e16c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	e028      	b.n	800e1be <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	60fb      	str	r3, [r7, #12]
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d1c5      	bne.n	800e104 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e178:	4b15      	ldr	r3, [pc, #84]	@ (800e1d0 <ip4_route+0xdc>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d01a      	beq.n	800e1b6 <ip4_route+0xc2>
 800e180:	4b13      	ldr	r3, [pc, #76]	@ (800e1d0 <ip4_route+0xdc>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e188:	f003 0301 	and.w	r3, r3, #1
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d012      	beq.n	800e1b6 <ip4_route+0xc2>
 800e190:	4b0f      	ldr	r3, [pc, #60]	@ (800e1d0 <ip4_route+0xdc>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e198:	f003 0304 	and.w	r3, r3, #4
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d00a      	beq.n	800e1b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e1a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e1d0 <ip4_route+0xdc>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	3304      	adds	r3, #4
 800e1a6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d004      	beq.n	800e1b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	b2db      	uxtb	r3, r3
 800e1b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800e1b4:	d101      	bne.n	800e1ba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	e001      	b.n	800e1be <ip4_route+0xca>
  }

  return netif_default;
 800e1ba:	4b05      	ldr	r3, [pc, #20]	@ (800e1d0 <ip4_route+0xdc>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3714      	adds	r7, #20
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop
 800e1cc:	24007eec 	.word	0x24007eec
 800e1d0:	24007ef0 	.word	0x24007ef0

0800e1d4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e1e2:	f003 0301 	and.w	r3, r3, #1
 800e1e6:	b2db      	uxtb	r3, r3
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d016      	beq.n	800e21a <ip4_input_accept+0x46>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	3304      	adds	r3, #4
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d011      	beq.n	800e21a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e1f6:	4b0b      	ldr	r3, [pc, #44]	@ (800e224 <ip4_input_accept+0x50>)
 800e1f8:	695a      	ldr	r2, [r3, #20]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	3304      	adds	r3, #4
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	429a      	cmp	r2, r3
 800e202:	d008      	beq.n	800e216 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e204:	4b07      	ldr	r3, [pc, #28]	@ (800e224 <ip4_input_accept+0x50>)
 800e206:	695b      	ldr	r3, [r3, #20]
 800e208:	6879      	ldr	r1, [r7, #4]
 800e20a:	4618      	mov	r0, r3
 800e20c:	f000 fa26 	bl	800e65c <ip4_addr_isbroadcast_u32>
 800e210:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e212:	2b00      	cmp	r3, #0
 800e214:	d001      	beq.n	800e21a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e216:	2301      	movs	r3, #1
 800e218:	e000      	b.n	800e21c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e21a:	2300      	movs	r3, #0
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3708      	adds	r7, #8
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}
 800e224:	24004dcc 	.word	0x24004dcc

0800e228 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b088      	sub	sp, #32
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800e232:	2301      	movs	r3, #1
 800e234:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	091b      	lsrs	r3, r3, #4
 800e242:	b2db      	uxtb	r3, r3
 800e244:	2b04      	cmp	r3, #4
 800e246:	d004      	beq.n	800e252 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f002 fca7 	bl	8010b9c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e24e:	2300      	movs	r3, #0
 800e250:	e123      	b.n	800e49a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	f003 030f 	and.w	r3, r3, #15
 800e25a:	b2db      	uxtb	r3, r3
 800e25c:	009b      	lsls	r3, r3, #2
 800e25e:	b2db      	uxtb	r3, r3
 800e260:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	885b      	ldrh	r3, [r3, #2]
 800e266:	b29b      	uxth	r3, r3
 800e268:	4618      	mov	r0, r3
 800e26a:	f7fc fddb 	bl	800ae24 <lwip_htons>
 800e26e:	4603      	mov	r3, r0
 800e270:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	891b      	ldrh	r3, [r3, #8]
 800e276:	8a3a      	ldrh	r2, [r7, #16]
 800e278:	429a      	cmp	r2, r3
 800e27a:	d204      	bcs.n	800e286 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800e27c:	8a3b      	ldrh	r3, [r7, #16]
 800e27e:	4619      	mov	r1, r3
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f002 fb07 	bl	8010894 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	895b      	ldrh	r3, [r3, #10]
 800e28a:	8a7a      	ldrh	r2, [r7, #18]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d807      	bhi.n	800e2a0 <ip4_input+0x78>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	891b      	ldrh	r3, [r3, #8]
 800e294:	8a3a      	ldrh	r2, [r7, #16]
 800e296:	429a      	cmp	r2, r3
 800e298:	d802      	bhi.n	800e2a0 <ip4_input+0x78>
 800e29a:	8a7b      	ldrh	r3, [r7, #18]
 800e29c:	2b13      	cmp	r3, #19
 800e29e:	d804      	bhi.n	800e2aa <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f002 fc7b 	bl	8010b9c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	e0f7      	b.n	800e49a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	691b      	ldr	r3, [r3, #16]
 800e2ae:	4a7d      	ldr	r2, [pc, #500]	@ (800e4a4 <ip4_input+0x27c>)
 800e2b0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e2b2:	69fb      	ldr	r3, [r7, #28]
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	4a7b      	ldr	r2, [pc, #492]	@ (800e4a4 <ip4_input+0x27c>)
 800e2b8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e2ba:	4b7a      	ldr	r3, [pc, #488]	@ (800e4a4 <ip4_input+0x27c>)
 800e2bc:	695b      	ldr	r3, [r3, #20]
 800e2be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e2c2:	2be0      	cmp	r3, #224	@ 0xe0
 800e2c4:	d112      	bne.n	800e2ec <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e2cc:	f003 0301 	and.w	r3, r3, #1
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d007      	beq.n	800e2e6 <ip4_input+0xbe>
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	3304      	adds	r3, #4
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d002      	beq.n	800e2e6 <ip4_input+0xbe>
      netif = inp;
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	61bb      	str	r3, [r7, #24]
 800e2e4:	e02a      	b.n	800e33c <ip4_input+0x114>
    } else {
      netif = NULL;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	61bb      	str	r3, [r7, #24]
 800e2ea:	e027      	b.n	800e33c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e2ec:	6838      	ldr	r0, [r7, #0]
 800e2ee:	f7ff ff71 	bl	800e1d4 <ip4_input_accept>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d002      	beq.n	800e2fe <ip4_input+0xd6>
      netif = inp;
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	61bb      	str	r3, [r7, #24]
 800e2fc:	e01e      	b.n	800e33c <ip4_input+0x114>
    } else {
      netif = NULL;
 800e2fe:	2300      	movs	r3, #0
 800e300:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e302:	4b68      	ldr	r3, [pc, #416]	@ (800e4a4 <ip4_input+0x27c>)
 800e304:	695b      	ldr	r3, [r3, #20]
 800e306:	b2db      	uxtb	r3, r3
 800e308:	2b7f      	cmp	r3, #127	@ 0x7f
 800e30a:	d017      	beq.n	800e33c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e30c:	4b66      	ldr	r3, [pc, #408]	@ (800e4a8 <ip4_input+0x280>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	61bb      	str	r3, [r7, #24]
 800e312:	e00e      	b.n	800e332 <ip4_input+0x10a>
          if (netif == inp) {
 800e314:	69ba      	ldr	r2, [r7, #24]
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	429a      	cmp	r2, r3
 800e31a:	d006      	beq.n	800e32a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e31c:	69b8      	ldr	r0, [r7, #24]
 800e31e:	f7ff ff59 	bl	800e1d4 <ip4_input_accept>
 800e322:	4603      	mov	r3, r0
 800e324:	2b00      	cmp	r3, #0
 800e326:	d108      	bne.n	800e33a <ip4_input+0x112>
 800e328:	e000      	b.n	800e32c <ip4_input+0x104>
            continue;
 800e32a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e32c:	69bb      	ldr	r3, [r7, #24]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	61bb      	str	r3, [r7, #24]
 800e332:	69bb      	ldr	r3, [r7, #24]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d1ed      	bne.n	800e314 <ip4_input+0xec>
 800e338:	e000      	b.n	800e33c <ip4_input+0x114>
            break;
 800e33a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d111      	bne.n	800e366 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800e342:	69fb      	ldr	r3, [r7, #28]
 800e344:	7a5b      	ldrb	r3, [r3, #9]
 800e346:	2b11      	cmp	r3, #17
 800e348:	d10d      	bne.n	800e366 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800e34a:	8a7b      	ldrh	r3, [r7, #18]
 800e34c:	69fa      	ldr	r2, [r7, #28]
 800e34e:	4413      	add	r3, r2
 800e350:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	885b      	ldrh	r3, [r3, #2]
 800e356:	b29b      	uxth	r3, r3
 800e358:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 800e35c:	d103      	bne.n	800e366 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800e362:	2300      	movs	r3, #0
 800e364:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d017      	beq.n	800e39c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800e36c:	4b4d      	ldr	r3, [pc, #308]	@ (800e4a4 <ip4_input+0x27c>)
 800e36e:	691b      	ldr	r3, [r3, #16]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d013      	beq.n	800e39c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e374:	4b4b      	ldr	r3, [pc, #300]	@ (800e4a4 <ip4_input+0x27c>)
 800e376:	691b      	ldr	r3, [r3, #16]
 800e378:	6839      	ldr	r1, [r7, #0]
 800e37a:	4618      	mov	r0, r3
 800e37c:	f000 f96e 	bl	800e65c <ip4_addr_isbroadcast_u32>
 800e380:	4603      	mov	r3, r0
 800e382:	2b00      	cmp	r3, #0
 800e384:	d105      	bne.n	800e392 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e386:	4b47      	ldr	r3, [pc, #284]	@ (800e4a4 <ip4_input+0x27c>)
 800e388:	691b      	ldr	r3, [r3, #16]
 800e38a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e38e:	2be0      	cmp	r3, #224	@ 0xe0
 800e390:	d104      	bne.n	800e39c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f002 fc02 	bl	8010b9c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e398:	2300      	movs	r3, #0
 800e39a:	e07e      	b.n	800e49a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e39c:	69bb      	ldr	r3, [r7, #24]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d104      	bne.n	800e3ac <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f002 fbfa 	bl	8010b9c <pbuf_free>
    return ERR_OK;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	e076      	b.n	800e49a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	88db      	ldrh	r3, [r3, #6]
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800e3b8:	4013      	ands	r3, r2
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d00b      	beq.n	800e3d6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f000 fd12 	bl	800ede8 <ip4_reass>
 800e3c4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d101      	bne.n	800e3d0 <ip4_input+0x1a8>
      return ERR_OK;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	e064      	b.n	800e49a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e3d6:	4a33      	ldr	r2, [pc, #204]	@ (800e4a4 <ip4_input+0x27c>)
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e3dc:	4a31      	ldr	r2, [pc, #196]	@ (800e4a4 <ip4_input+0x27c>)
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e3e2:	4a30      	ldr	r2, [pc, #192]	@ (800e4a4 <ip4_input+0x27c>)
 800e3e4:	69fb      	ldr	r3, [r7, #28]
 800e3e6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e3e8:	69fb      	ldr	r3, [r7, #28]
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	f003 030f 	and.w	r3, r3, #15
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	b2db      	uxtb	r3, r3
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	4b2a      	ldr	r3, [pc, #168]	@ (800e4a4 <ip4_input+0x27c>)
 800e3fa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e3fc:	8a7b      	ldrh	r3, [r7, #18]
 800e3fe:	4619      	mov	r1, r3
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f002 fb45 	bl	8010a90 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	7a5b      	ldrb	r3, [r3, #9]
 800e40a:	2b11      	cmp	r3, #17
 800e40c:	d006      	beq.n	800e41c <ip4_input+0x1f4>
 800e40e:	2b11      	cmp	r3, #17
 800e410:	dc13      	bgt.n	800e43a <ip4_input+0x212>
 800e412:	2b01      	cmp	r3, #1
 800e414:	d00c      	beq.n	800e430 <ip4_input+0x208>
 800e416:	2b06      	cmp	r3, #6
 800e418:	d005      	beq.n	800e426 <ip4_input+0x1fe>
 800e41a:	e00e      	b.n	800e43a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e41c:	6839      	ldr	r1, [r7, #0]
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f008 fc7a 	bl	8016d18 <udp_input>
        break;
 800e424:	e026      	b.n	800e474 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e426:	6839      	ldr	r1, [r7, #0]
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f004 faef 	bl	8012a0c <tcp_input>
        break;
 800e42e:	e021      	b.n	800e474 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e430:	6839      	ldr	r1, [r7, #0]
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f7ff fbd8 	bl	800dbe8 <icmp_input>
        break;
 800e438:	e01c      	b.n	800e474 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e43a:	4b1a      	ldr	r3, [pc, #104]	@ (800e4a4 <ip4_input+0x27c>)
 800e43c:	695b      	ldr	r3, [r3, #20]
 800e43e:	69b9      	ldr	r1, [r7, #24]
 800e440:	4618      	mov	r0, r3
 800e442:	f000 f90b 	bl	800e65c <ip4_addr_isbroadcast_u32>
 800e446:	4603      	mov	r3, r0
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d10f      	bne.n	800e46c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e44c:	4b15      	ldr	r3, [pc, #84]	@ (800e4a4 <ip4_input+0x27c>)
 800e44e:	695b      	ldr	r3, [r3, #20]
 800e450:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e454:	2be0      	cmp	r3, #224	@ 0xe0
 800e456:	d009      	beq.n	800e46c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e458:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e45c:	4619      	mov	r1, r3
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f002 fb89 	bl	8010b76 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e464:	2102      	movs	r1, #2
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f7ff fcdc 	bl	800de24 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f002 fb95 	bl	8010b9c <pbuf_free>
        break;
 800e472:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e474:	4b0b      	ldr	r3, [pc, #44]	@ (800e4a4 <ip4_input+0x27c>)
 800e476:	2200      	movs	r2, #0
 800e478:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e47a:	4b0a      	ldr	r3, [pc, #40]	@ (800e4a4 <ip4_input+0x27c>)
 800e47c:	2200      	movs	r2, #0
 800e47e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e480:	4b08      	ldr	r3, [pc, #32]	@ (800e4a4 <ip4_input+0x27c>)
 800e482:	2200      	movs	r2, #0
 800e484:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e486:	4b07      	ldr	r3, [pc, #28]	@ (800e4a4 <ip4_input+0x27c>)
 800e488:	2200      	movs	r2, #0
 800e48a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e48c:	4b05      	ldr	r3, [pc, #20]	@ (800e4a4 <ip4_input+0x27c>)
 800e48e:	2200      	movs	r2, #0
 800e490:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e492:	4b04      	ldr	r3, [pc, #16]	@ (800e4a4 <ip4_input+0x27c>)
 800e494:	2200      	movs	r2, #0
 800e496:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e498:	2300      	movs	r3, #0
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3720      	adds	r7, #32
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	24004dcc 	.word	0x24004dcc
 800e4a8:	24007eec 	.word	0x24007eec

0800e4ac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b08a      	sub	sp, #40	@ 0x28
 800e4b0:	af04      	add	r7, sp, #16
 800e4b2:	60f8      	str	r0, [r7, #12]
 800e4b4:	60b9      	str	r1, [r7, #8]
 800e4b6:	607a      	str	r2, [r7, #4]
 800e4b8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d009      	beq.n	800e4d8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d003      	beq.n	800e4d2 <ip4_output_if+0x26>
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d102      	bne.n	800e4d8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4d4:	3304      	adds	r3, #4
 800e4d6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e4d8:	78fa      	ldrb	r2, [r7, #3]
 800e4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4dc:	9302      	str	r3, [sp, #8]
 800e4de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e4e2:	9301      	str	r3, [sp, #4]
 800e4e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e4e8:	9300      	str	r3, [sp, #0]
 800e4ea:	4613      	mov	r3, r2
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	6979      	ldr	r1, [r7, #20]
 800e4f0:	68f8      	ldr	r0, [r7, #12]
 800e4f2:	f000 f805 	bl	800e500 <ip4_output_if_src>
 800e4f6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3718      	adds	r7, #24
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b088      	sub	sp, #32
 800e504:	af00      	add	r7, sp, #0
 800e506:	60f8      	str	r0, [r7, #12]
 800e508:	60b9      	str	r1, [r7, #8]
 800e50a:	607a      	str	r2, [r7, #4]
 800e50c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	7b9b      	ldrb	r3, [r3, #14]
 800e512:	2b01      	cmp	r3, #1
 800e514:	d006      	beq.n	800e524 <ip4_output_if_src+0x24>
 800e516:	4b4b      	ldr	r3, [pc, #300]	@ (800e644 <ip4_output_if_src+0x144>)
 800e518:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800e51c:	494a      	ldr	r1, [pc, #296]	@ (800e648 <ip4_output_if_src+0x148>)
 800e51e:	484b      	ldr	r0, [pc, #300]	@ (800e64c <ip4_output_if_src+0x14c>)
 800e520:	f009 f908 	bl	8017734 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d060      	beq.n	800e5ec <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e52a:	2314      	movs	r3, #20
 800e52c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e52e:	2114      	movs	r1, #20
 800e530:	68f8      	ldr	r0, [r7, #12]
 800e532:	f002 fa9d 	bl	8010a70 <pbuf_add_header>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d002      	beq.n	800e542 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e53c:	f06f 0301 	mvn.w	r3, #1
 800e540:	e07c      	b.n	800e63c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	895b      	ldrh	r3, [r3, #10]
 800e54c:	2b13      	cmp	r3, #19
 800e54e:	d806      	bhi.n	800e55e <ip4_output_if_src+0x5e>
 800e550:	4b3c      	ldr	r3, [pc, #240]	@ (800e644 <ip4_output_if_src+0x144>)
 800e552:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800e556:	493e      	ldr	r1, [pc, #248]	@ (800e650 <ip4_output_if_src+0x150>)
 800e558:	483c      	ldr	r0, [pc, #240]	@ (800e64c <ip4_output_if_src+0x14c>)
 800e55a:	f009 f8eb 	bl	8017734 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e55e:	69fb      	ldr	r3, [r7, #28]
 800e560:	78fa      	ldrb	r2, [r7, #3]
 800e562:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e564:	69fb      	ldr	r3, [r7, #28]
 800e566:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800e56a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e574:	8b7b      	ldrh	r3, [r7, #26]
 800e576:	089b      	lsrs	r3, r3, #2
 800e578:	b29b      	uxth	r3, r3
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e580:	b2da      	uxtb	r2, r3
 800e582:	69fb      	ldr	r3, [r7, #28]
 800e584:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e586:	69fb      	ldr	r3, [r7, #28]
 800e588:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e58c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	891b      	ldrh	r3, [r3, #8]
 800e592:	4618      	mov	r0, r3
 800e594:	f7fc fc46 	bl	800ae24 <lwip_htons>
 800e598:	4603      	mov	r3, r0
 800e59a:	461a      	mov	r2, r3
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	719a      	strb	r2, [r3, #6]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e5aa:	4b2a      	ldr	r3, [pc, #168]	@ (800e654 <ip4_output_if_src+0x154>)
 800e5ac:	881b      	ldrh	r3, [r3, #0]
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fc fc38 	bl	800ae24 <lwip_htons>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	461a      	mov	r2, r3
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e5bc:	4b25      	ldr	r3, [pc, #148]	@ (800e654 <ip4_output_if_src+0x154>)
 800e5be:	881b      	ldrh	r3, [r3, #0]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	b29a      	uxth	r2, r3
 800e5c4:	4b23      	ldr	r3, [pc, #140]	@ (800e654 <ip4_output_if_src+0x154>)
 800e5c6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d104      	bne.n	800e5d8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e5ce:	4b22      	ldr	r3, [pc, #136]	@ (800e658 <ip4_output_if_src+0x158>)
 800e5d0:	681a      	ldr	r2, [r3, #0]
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	60da      	str	r2, [r3, #12]
 800e5d6:	e003      	b.n	800e5e0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	729a      	strb	r2, [r3, #10]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	72da      	strb	r2, [r3, #11]
 800e5ea:	e00f      	b.n	800e60c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	895b      	ldrh	r3, [r3, #10]
 800e5f0:	2b13      	cmp	r3, #19
 800e5f2:	d802      	bhi.n	800e5fa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e5f4:	f06f 0301 	mvn.w	r3, #1
 800e5f8:	e020      	b.n	800e63c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e600:	69fb      	ldr	r3, [r7, #28]
 800e602:	691b      	ldr	r3, [r3, #16]
 800e604:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e606:	f107 0314 	add.w	r3, r7, #20
 800e60a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e60e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e610:	2b00      	cmp	r3, #0
 800e612:	d00c      	beq.n	800e62e <ip4_output_if_src+0x12e>
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	891a      	ldrh	r2, [r3, #8]
 800e618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e61a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d906      	bls.n	800e62e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e620:	687a      	ldr	r2, [r7, #4]
 800e622:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e624:	68f8      	ldr	r0, [r7, #12]
 800e626:	f000 fdd3 	bl	800f1d0 <ip4_frag>
 800e62a:	4603      	mov	r3, r0
 800e62c:	e006      	b.n	800e63c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e630:	695b      	ldr	r3, [r3, #20]
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	68f9      	ldr	r1, [r7, #12]
 800e636:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e638:	4798      	blx	r3
 800e63a:	4603      	mov	r3, r0
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3720      	adds	r7, #32
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	08018f54 	.word	0x08018f54
 800e648:	08018fbc 	.word	0x08018fbc
 800e64c:	08018fc8 	.word	0x08018fc8
 800e650:	08018ff0 	.word	0x08018ff0
 800e654:	24004de4 	.word	0x24004de4
 800e658:	0801b8b0 	.word	0x0801b8b0

0800e65c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b085      	sub	sp, #20
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e670:	d002      	beq.n	800e678 <ip4_addr_isbroadcast_u32+0x1c>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d101      	bne.n	800e67c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e678:	2301      	movs	r3, #1
 800e67a:	e02a      	b.n	800e6d2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e682:	f003 0302 	and.w	r3, r3, #2
 800e686:	2b00      	cmp	r3, #0
 800e688:	d101      	bne.n	800e68e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e68a:	2300      	movs	r3, #0
 800e68c:	e021      	b.n	800e6d2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	3304      	adds	r3, #4
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	687a      	ldr	r2, [r7, #4]
 800e696:	429a      	cmp	r2, r3
 800e698:	d101      	bne.n	800e69e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e69a:	2300      	movs	r3, #0
 800e69c:	e019      	b.n	800e6d2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e69e:	68fa      	ldr	r2, [r7, #12]
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	3304      	adds	r3, #4
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	405a      	eors	r2, r3
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	3308      	adds	r3, #8
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	4013      	ands	r3, r2
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d10d      	bne.n	800e6d0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	3308      	adds	r3, #8
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	43da      	mvns	r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	3308      	adds	r3, #8
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d101      	bne.n	800e6d0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	e000      	b.n	800e6d2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e6d0:	2300      	movs	r3, #0
  }
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3714      	adds	r7, #20
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6dc:	4770      	bx	lr
	...

0800e6e0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b08d      	sub	sp, #52	@ 0x34
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	60b9      	str	r1, [r7, #8]
 800e6ea:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 800e6fa:	f107 0318 	add.w	r3, r7, #24
 800e6fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 800e700:	2300      	movs	r3, #0
 800e702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e706:	e058      	b.n	800e7ba <ip4addr_ntoa_r+0xda>
    i = 0;
 800e708:	2300      	movs	r3, #0
 800e70a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 800e70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e710:	781a      	ldrb	r2, [r3, #0]
 800e712:	4b32      	ldr	r3, [pc, #200]	@ (800e7dc <ip4addr_ntoa_r+0xfc>)
 800e714:	fba3 1302 	umull	r1, r3, r3, r2
 800e718:	08d9      	lsrs	r1, r3, #3
 800e71a:	460b      	mov	r3, r1
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	440b      	add	r3, r1
 800e720:	005b      	lsls	r3, r3, #1
 800e722:	1ad3      	subs	r3, r2, r3
 800e724:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800e726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	4a2c      	ldr	r2, [pc, #176]	@ (800e7dc <ip4addr_ntoa_r+0xfc>)
 800e72c:	fba2 2303 	umull	r2, r3, r2, r3
 800e730:	08db      	lsrs	r3, r3, #3
 800e732:	b2da      	uxtb	r2, r3
 800e734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e736:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800e738:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e73c:	1c5a      	adds	r2, r3, #1
 800e73e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800e742:	4619      	mov	r1, r3
 800e744:	7ffb      	ldrb	r3, [r7, #31]
 800e746:	3330      	adds	r3, #48	@ 0x30
 800e748:	b2da      	uxtb	r2, r3
 800e74a:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 800e74e:	443b      	add	r3, r7
 800e750:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800e754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d1d8      	bne.n	800e70e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800e75c:	e011      	b.n	800e782 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800e75e:	6a3b      	ldr	r3, [r7, #32]
 800e760:	1c5a      	adds	r2, r3, #1
 800e762:	623a      	str	r2, [r7, #32]
 800e764:	687a      	ldr	r2, [r7, #4]
 800e766:	429a      	cmp	r2, r3
 800e768:	dc01      	bgt.n	800e76e <ip4addr_ntoa_r+0x8e>
        return NULL;
 800e76a:	2300      	movs	r3, #0
 800e76c:	e030      	b.n	800e7d0 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800e76e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e774:	1c59      	adds	r1, r3, #1
 800e776:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800e778:	3230      	adds	r2, #48	@ 0x30
 800e77a:	443a      	add	r2, r7
 800e77c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800e780:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800e782:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e786:	1e5a      	subs	r2, r3, #1
 800e788:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d1e6      	bne.n	800e75e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800e790:	6a3b      	ldr	r3, [r7, #32]
 800e792:	1c5a      	adds	r2, r3, #1
 800e794:	623a      	str	r2, [r7, #32]
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	429a      	cmp	r2, r3
 800e79a:	dc01      	bgt.n	800e7a0 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800e79c:	2300      	movs	r3, #0
 800e79e:	e017      	b.n	800e7d0 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800e7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7a2:	1c5a      	adds	r2, r3, #1
 800e7a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e7a6:	222e      	movs	r2, #46	@ 0x2e
 800e7a8:	701a      	strb	r2, [r3, #0]
    ap++;
 800e7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 800e7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e7ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e7be:	2b03      	cmp	r3, #3
 800e7c0:	d9a2      	bls.n	800e708 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800e7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7c4:	3b01      	subs	r3, #1
 800e7c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	701a      	strb	r2, [r3, #0]
  return buf;
 800e7ce:	68bb      	ldr	r3, [r7, #8]
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3734      	adds	r7, #52	@ 0x34
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr
 800e7dc:	cccccccd 	.word	0xcccccccd

0800e7e0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e7ea:	4b12      	ldr	r3, [pc, #72]	@ (800e834 <ip_reass_tmr+0x54>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e7f0:	e018      	b.n	800e824 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	7fdb      	ldrb	r3, [r3, #31]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00b      	beq.n	800e812 <ip_reass_tmr+0x32>
      r->timer--;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	7fdb      	ldrb	r3, [r3, #31]
 800e7fe:	3b01      	subs	r3, #1
 800e800:	b2da      	uxtb	r2, r3
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	60fb      	str	r3, [r7, #12]
 800e810:	e008      	b.n	800e824 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e81c:	68b9      	ldr	r1, [r7, #8]
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 f80a 	bl	800e838 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d1e3      	bne.n	800e7f2 <ip_reass_tmr+0x12>
    }
  }
}
 800e82a:	bf00      	nop
 800e82c:	bf00      	nop
 800e82e:	3710      	adds	r7, #16
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	24004de8 	.word	0x24004de8

0800e838 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b088      	sub	sp, #32
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e842:	2300      	movs	r3, #0
 800e844:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e846:	683a      	ldr	r2, [r7, #0]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d105      	bne.n	800e85a <ip_reass_free_complete_datagram+0x22>
 800e84e:	4b45      	ldr	r3, [pc, #276]	@ (800e964 <ip_reass_free_complete_datagram+0x12c>)
 800e850:	22ab      	movs	r2, #171	@ 0xab
 800e852:	4945      	ldr	r1, [pc, #276]	@ (800e968 <ip_reass_free_complete_datagram+0x130>)
 800e854:	4845      	ldr	r0, [pc, #276]	@ (800e96c <ip_reass_free_complete_datagram+0x134>)
 800e856:	f008 ff6d 	bl	8017734 <iprintf>
  if (prev != NULL) {
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d00a      	beq.n	800e876 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	687a      	ldr	r2, [r7, #4]
 800e866:	429a      	cmp	r2, r3
 800e868:	d005      	beq.n	800e876 <ip_reass_free_complete_datagram+0x3e>
 800e86a:	4b3e      	ldr	r3, [pc, #248]	@ (800e964 <ip_reass_free_complete_datagram+0x12c>)
 800e86c:	22ad      	movs	r2, #173	@ 0xad
 800e86e:	4940      	ldr	r1, [pc, #256]	@ (800e970 <ip_reass_free_complete_datagram+0x138>)
 800e870:	483e      	ldr	r0, [pc, #248]	@ (800e96c <ip_reass_free_complete_datagram+0x134>)
 800e872:	f008 ff5f 	bl	8017734 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	889b      	ldrh	r3, [r3, #4]
 800e882:	b29b      	uxth	r3, r3
 800e884:	2b00      	cmp	r3, #0
 800e886:	d12a      	bne.n	800e8de <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e896:	69bb      	ldr	r3, [r7, #24]
 800e898:	6858      	ldr	r0, [r3, #4]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	3308      	adds	r3, #8
 800e89e:	2214      	movs	r2, #20
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	f009 f914 	bl	8017ace <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e8a6:	2101      	movs	r1, #1
 800e8a8:	69b8      	ldr	r0, [r7, #24]
 800e8aa:	f7ff facb 	bl	800de44 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e8ae:	69b8      	ldr	r0, [r7, #24]
 800e8b0:	f002 fa02 	bl	8010cb8 <pbuf_clen>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e8b8:	8bfa      	ldrh	r2, [r7, #30]
 800e8ba:	8a7b      	ldrh	r3, [r7, #18]
 800e8bc:	4413      	add	r3, r2
 800e8be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8c2:	db05      	blt.n	800e8d0 <ip_reass_free_complete_datagram+0x98>
 800e8c4:	4b27      	ldr	r3, [pc, #156]	@ (800e964 <ip_reass_free_complete_datagram+0x12c>)
 800e8c6:	22bc      	movs	r2, #188	@ 0xbc
 800e8c8:	492a      	ldr	r1, [pc, #168]	@ (800e974 <ip_reass_free_complete_datagram+0x13c>)
 800e8ca:	4828      	ldr	r0, [pc, #160]	@ (800e96c <ip_reass_free_complete_datagram+0x134>)
 800e8cc:	f008 ff32 	bl	8017734 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e8d0:	8bfa      	ldrh	r2, [r7, #30]
 800e8d2:	8a7b      	ldrh	r3, [r7, #18]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e8d8:	69b8      	ldr	r0, [r7, #24]
 800e8da:	f002 f95f 	bl	8010b9c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	685b      	ldr	r3, [r3, #4]
 800e8e2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e8e4:	e01f      	b.n	800e926 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e8e6:	69bb      	ldr	r3, [r7, #24]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e8ec:	69bb      	ldr	r3, [r7, #24]
 800e8ee:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f002 f9de 	bl	8010cb8 <pbuf_clen>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e900:	8bfa      	ldrh	r2, [r7, #30]
 800e902:	8a7b      	ldrh	r3, [r7, #18]
 800e904:	4413      	add	r3, r2
 800e906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e90a:	db05      	blt.n	800e918 <ip_reass_free_complete_datagram+0xe0>
 800e90c:	4b15      	ldr	r3, [pc, #84]	@ (800e964 <ip_reass_free_complete_datagram+0x12c>)
 800e90e:	22cc      	movs	r2, #204	@ 0xcc
 800e910:	4918      	ldr	r1, [pc, #96]	@ (800e974 <ip_reass_free_complete_datagram+0x13c>)
 800e912:	4816      	ldr	r0, [pc, #88]	@ (800e96c <ip_reass_free_complete_datagram+0x134>)
 800e914:	f008 ff0e 	bl	8017734 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e918:	8bfa      	ldrh	r2, [r7, #30]
 800e91a:	8a7b      	ldrh	r3, [r7, #18]
 800e91c:	4413      	add	r3, r2
 800e91e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	f002 f93b 	bl	8010b9c <pbuf_free>
  while (p != NULL) {
 800e926:	69bb      	ldr	r3, [r7, #24]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d1dc      	bne.n	800e8e6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e92c:	6839      	ldr	r1, [r7, #0]
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	f000 f8c2 	bl	800eab8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e934:	4b10      	ldr	r3, [pc, #64]	@ (800e978 <ip_reass_free_complete_datagram+0x140>)
 800e936:	881b      	ldrh	r3, [r3, #0]
 800e938:	8bfa      	ldrh	r2, [r7, #30]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d905      	bls.n	800e94a <ip_reass_free_complete_datagram+0x112>
 800e93e:	4b09      	ldr	r3, [pc, #36]	@ (800e964 <ip_reass_free_complete_datagram+0x12c>)
 800e940:	22d2      	movs	r2, #210	@ 0xd2
 800e942:	490e      	ldr	r1, [pc, #56]	@ (800e97c <ip_reass_free_complete_datagram+0x144>)
 800e944:	4809      	ldr	r0, [pc, #36]	@ (800e96c <ip_reass_free_complete_datagram+0x134>)
 800e946:	f008 fef5 	bl	8017734 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e94a:	4b0b      	ldr	r3, [pc, #44]	@ (800e978 <ip_reass_free_complete_datagram+0x140>)
 800e94c:	881a      	ldrh	r2, [r3, #0]
 800e94e:	8bfb      	ldrh	r3, [r7, #30]
 800e950:	1ad3      	subs	r3, r2, r3
 800e952:	b29a      	uxth	r2, r3
 800e954:	4b08      	ldr	r3, [pc, #32]	@ (800e978 <ip_reass_free_complete_datagram+0x140>)
 800e956:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e958:	8bfb      	ldrh	r3, [r7, #30]
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3720      	adds	r7, #32
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	08019020 	.word	0x08019020
 800e968:	0801908c 	.word	0x0801908c
 800e96c:	08019098 	.word	0x08019098
 800e970:	080190c0 	.word	0x080190c0
 800e974:	080190d4 	.word	0x080190d4
 800e978:	24004dec 	.word	0x24004dec
 800e97c:	080190f4 	.word	0x080190f4

0800e980 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b08a      	sub	sp, #40	@ 0x28
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e98a:	2300      	movs	r3, #0
 800e98c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e98e:	2300      	movs	r3, #0
 800e990:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e992:	2300      	movs	r3, #0
 800e994:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e996:	2300      	movs	r3, #0
 800e998:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e99a:	2300      	movs	r3, #0
 800e99c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e99e:	4b28      	ldr	r3, [pc, #160]	@ (800ea40 <ip_reass_remove_oldest_datagram+0xc0>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e9a4:	e030      	b.n	800ea08 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9a8:	695a      	ldr	r2, [r3, #20]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	68db      	ldr	r3, [r3, #12]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d10c      	bne.n	800e9cc <ip_reass_remove_oldest_datagram+0x4c>
 800e9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9b4:	699a      	ldr	r2, [r3, #24]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	691b      	ldr	r3, [r3, #16]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d106      	bne.n	800e9cc <ip_reass_remove_oldest_datagram+0x4c>
 800e9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c0:	899a      	ldrh	r2, [r3, #12]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	889b      	ldrh	r3, [r3, #4]
 800e9c6:	b29b      	uxth	r3, r3
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d014      	beq.n	800e9f6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e9d2:	6a3b      	ldr	r3, [r7, #32]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d104      	bne.n	800e9e2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9da:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	61bb      	str	r3, [r7, #24]
 800e9e0:	e009      	b.n	800e9f6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e4:	7fda      	ldrb	r2, [r3, #31]
 800e9e6:	6a3b      	ldr	r3, [r7, #32]
 800e9e8:	7fdb      	ldrb	r3, [r3, #31]
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	d803      	bhi.n	800e9f6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9f0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e9f2:	69fb      	ldr	r3, [r7, #28]
 800e9f4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d001      	beq.n	800ea02 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea00:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ea02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800ea08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d1cb      	bne.n	800e9a6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ea0e:	6a3b      	ldr	r3, [r7, #32]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d008      	beq.n	800ea26 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ea14:	69b9      	ldr	r1, [r7, #24]
 800ea16:	6a38      	ldr	r0, [r7, #32]
 800ea18:	f7ff ff0e 	bl	800e838 <ip_reass_free_complete_datagram>
 800ea1c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ea1e:	697a      	ldr	r2, [r7, #20]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	4413      	add	r3, r2
 800ea24:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ea26:	697a      	ldr	r2, [r7, #20]
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	da02      	bge.n	800ea34 <ip_reass_remove_oldest_datagram+0xb4>
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	dcac      	bgt.n	800e98e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ea34:	697b      	ldr	r3, [r7, #20]
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3728      	adds	r7, #40	@ 0x28
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	24004de8 	.word	0x24004de8

0800ea44 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b084      	sub	sp, #16
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ea4e:	2004      	movs	r0, #4
 800ea50:	f001 f980 	bl	800fd54 <memp_malloc>
 800ea54:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d110      	bne.n	800ea7e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ea5c:	6839      	ldr	r1, [r7, #0]
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f7ff ff8e 	bl	800e980 <ip_reass_remove_oldest_datagram>
 800ea64:	4602      	mov	r2, r0
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	dc03      	bgt.n	800ea74 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ea6c:	2004      	movs	r0, #4
 800ea6e:	f001 f971 	bl	800fd54 <memp_malloc>
 800ea72:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d101      	bne.n	800ea7e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	e016      	b.n	800eaac <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ea7e:	2220      	movs	r2, #32
 800ea80:	2100      	movs	r1, #0
 800ea82:	68f8      	ldr	r0, [r7, #12]
 800ea84:	f008 ffae 	bl	80179e4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	220f      	movs	r2, #15
 800ea8c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ea8e:	4b09      	ldr	r3, [pc, #36]	@ (800eab4 <ip_reass_enqueue_new_datagram+0x70>)
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ea96:	4a07      	ldr	r2, [pc, #28]	@ (800eab4 <ip_reass_enqueue_new_datagram+0x70>)
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	3308      	adds	r3, #8
 800eaa0:	2214      	movs	r2, #20
 800eaa2:	6879      	ldr	r1, [r7, #4]
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f009 f812 	bl	8017ace <memcpy>
  return ipr;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3710      	adds	r7, #16
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	24004de8 	.word	0x24004de8

0800eab8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800eac2:	4b10      	ldr	r3, [pc, #64]	@ (800eb04 <ip_reass_dequeue_datagram+0x4c>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d104      	bne.n	800ead6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	4a0c      	ldr	r2, [pc, #48]	@ (800eb04 <ip_reass_dequeue_datagram+0x4c>)
 800ead2:	6013      	str	r3, [r2, #0]
 800ead4:	e00d      	b.n	800eaf2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d106      	bne.n	800eaea <ip_reass_dequeue_datagram+0x32>
 800eadc:	4b0a      	ldr	r3, [pc, #40]	@ (800eb08 <ip_reass_dequeue_datagram+0x50>)
 800eade:	f240 1245 	movw	r2, #325	@ 0x145
 800eae2:	490a      	ldr	r1, [pc, #40]	@ (800eb0c <ip_reass_dequeue_datagram+0x54>)
 800eae4:	480a      	ldr	r0, [pc, #40]	@ (800eb10 <ip_reass_dequeue_datagram+0x58>)
 800eae6:	f008 fe25 	bl	8017734 <iprintf>
    prev->next = ipr->next;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800eaf2:	6879      	ldr	r1, [r7, #4]
 800eaf4:	2004      	movs	r0, #4
 800eaf6:	f001 f9a3 	bl	800fe40 <memp_free>
}
 800eafa:	bf00      	nop
 800eafc:	3708      	adds	r7, #8
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	24004de8 	.word	0x24004de8
 800eb08:	08019020 	.word	0x08019020
 800eb0c:	08019118 	.word	0x08019118
 800eb10:	08019098 	.word	0x08019098

0800eb14 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b08c      	sub	sp, #48	@ 0x30
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800eb20:	2300      	movs	r3, #0
 800eb22:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800eb24:	2301      	movs	r3, #1
 800eb26:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	685b      	ldr	r3, [r3, #4]
 800eb2c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	885b      	ldrh	r3, [r3, #2]
 800eb32:	b29b      	uxth	r3, r3
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7fc f975 	bl	800ae24 <lwip_htons>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800eb3e:	69fb      	ldr	r3, [r7, #28]
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	f003 030f 	and.w	r3, r3, #15
 800eb46:	b2db      	uxtb	r3, r3
 800eb48:	009b      	lsls	r3, r3, #2
 800eb4a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800eb4c:	7e7b      	ldrb	r3, [r7, #25]
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	8b7a      	ldrh	r2, [r7, #26]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d202      	bcs.n	800eb5c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eb56:	f04f 33ff 	mov.w	r3, #4294967295
 800eb5a:	e135      	b.n	800edc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800eb5c:	7e7b      	ldrb	r3, [r7, #25]
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	8b7a      	ldrh	r2, [r7, #26]
 800eb62:	1ad3      	subs	r3, r2, r3
 800eb64:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	88db      	ldrh	r3, [r3, #6]
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7fc f959 	bl	800ae24 <lwip_htons>
 800eb72:	4603      	mov	r3, r0
 800eb74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	00db      	lsls	r3, r3, #3
 800eb7c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800eb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb86:	2200      	movs	r2, #0
 800eb88:	701a      	strb	r2, [r3, #0]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	705a      	strb	r2, [r3, #1]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	709a      	strb	r2, [r3, #2]
 800eb92:	2200      	movs	r2, #0
 800eb94:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800eb96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb98:	8afa      	ldrh	r2, [r7, #22]
 800eb9a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800eb9c:	8afa      	ldrh	r2, [r7, #22]
 800eb9e:	8b7b      	ldrh	r3, [r7, #26]
 800eba0:	4413      	add	r3, r2
 800eba2:	b29a      	uxth	r2, r3
 800eba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eba6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800eba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebaa:	88db      	ldrh	r3, [r3, #6]
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	8afa      	ldrh	r2, [r7, #22]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d902      	bls.n	800ebba <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ebb4:	f04f 33ff 	mov.w	r3, #4294967295
 800ebb8:	e106      	b.n	800edc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebc0:	e068      	b.n	800ec94 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ebc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebc4:	685b      	ldr	r3, [r3, #4]
 800ebc6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ebc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebca:	889b      	ldrh	r3, [r3, #4]
 800ebcc:	b29a      	uxth	r2, r3
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	889b      	ldrh	r3, [r3, #4]
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d235      	bcs.n	800ec44 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ebd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebdc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ebde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d020      	beq.n	800ec26 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ebe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebe6:	889b      	ldrh	r3, [r3, #4]
 800ebe8:	b29a      	uxth	r2, r3
 800ebea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebec:	88db      	ldrh	r3, [r3, #6]
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d307      	bcc.n	800ec04 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800ebf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebf6:	88db      	ldrh	r3, [r3, #6]
 800ebf8:	b29a      	uxth	r2, r3
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	889b      	ldrh	r3, [r3, #4]
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d902      	bls.n	800ec0a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ec04:	f04f 33ff 	mov.w	r3, #4294967295
 800ec08:	e0de      	b.n	800edc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800ec0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec0c:	68ba      	ldr	r2, [r7, #8]
 800ec0e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800ec10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec12:	88db      	ldrh	r3, [r3, #6]
 800ec14:	b29a      	uxth	r2, r3
 800ec16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec18:	889b      	ldrh	r3, [r3, #4]
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d03d      	beq.n	800ec9c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ec20:	2300      	movs	r3, #0
 800ec22:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800ec24:	e03a      	b.n	800ec9c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800ec26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec28:	88db      	ldrh	r3, [r3, #6]
 800ec2a:	b29a      	uxth	r2, r3
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	889b      	ldrh	r3, [r3, #4]
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d902      	bls.n	800ec3c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ec36:	f04f 33ff 	mov.w	r3, #4294967295
 800ec3a:	e0c5      	b.n	800edc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	68ba      	ldr	r2, [r7, #8]
 800ec40:	605a      	str	r2, [r3, #4]
      break;
 800ec42:	e02b      	b.n	800ec9c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800ec44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec46:	889b      	ldrh	r3, [r3, #4]
 800ec48:	b29a      	uxth	r2, r3
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	889b      	ldrh	r3, [r3, #4]
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d102      	bne.n	800ec5a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ec54:	f04f 33ff 	mov.w	r3, #4294967295
 800ec58:	e0b6      	b.n	800edc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800ec5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec5c:	889b      	ldrh	r3, [r3, #4]
 800ec5e:	b29a      	uxth	r2, r3
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	88db      	ldrh	r3, [r3, #6]
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d202      	bcs.n	800ec70 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ec6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec6e:	e0ab      	b.n	800edc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800ec70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d009      	beq.n	800ec8a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800ec76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec78:	88db      	ldrh	r3, [r3, #6]
 800ec7a:	b29a      	uxth	r2, r3
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	889b      	ldrh	r3, [r3, #4]
 800ec80:	b29b      	uxth	r3, r3
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d001      	beq.n	800ec8a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ec86:	2300      	movs	r3, #0
 800ec88:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800ec94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d193      	bne.n	800ebc2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800ec9a:	e000      	b.n	800ec9e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800ec9c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800ec9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d12d      	bne.n	800ed00 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800eca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d01c      	beq.n	800ece4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800ecaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecac:	88db      	ldrh	r3, [r3, #6]
 800ecae:	b29a      	uxth	r2, r3
 800ecb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb2:	889b      	ldrh	r3, [r3, #4]
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d906      	bls.n	800ecc8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800ecba:	4b45      	ldr	r3, [pc, #276]	@ (800edd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ecbc:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800ecc0:	4944      	ldr	r1, [pc, #272]	@ (800edd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ecc2:	4845      	ldr	r0, [pc, #276]	@ (800edd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ecc4:	f008 fd36 	bl	8017734 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800ecc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecca:	68ba      	ldr	r2, [r7, #8]
 800eccc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800ecce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecd0:	88db      	ldrh	r3, [r3, #6]
 800ecd2:	b29a      	uxth	r2, r3
 800ecd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd6:	889b      	ldrh	r3, [r3, #4]
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d010      	beq.n	800ed00 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ecde:	2300      	movs	r3, #0
 800ece0:	623b      	str	r3, [r7, #32]
 800ece2:	e00d      	b.n	800ed00 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d006      	beq.n	800ecfa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ecec:	4b38      	ldr	r3, [pc, #224]	@ (800edd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ecee:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800ecf2:	493a      	ldr	r1, [pc, #232]	@ (800eddc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ecf4:	4838      	ldr	r0, [pc, #224]	@ (800edd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ecf6:	f008 fd1d 	bl	8017734 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	68ba      	ldr	r2, [r7, #8]
 800ecfe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d105      	bne.n	800ed12 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	7f9b      	ldrb	r3, [r3, #30]
 800ed0a:	f003 0301 	and.w	r3, r3, #1
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d059      	beq.n	800edc6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ed12:	6a3b      	ldr	r3, [r7, #32]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d04f      	beq.n	800edb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d006      	beq.n	800ed2e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	889b      	ldrh	r3, [r3, #4]
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d002      	beq.n	800ed34 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	623b      	str	r3, [r7, #32]
 800ed32:	e041      	b.n	800edb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ed34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed36:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800ed38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800ed3e:	e012      	b.n	800ed66 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800ed40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800ed46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed48:	88db      	ldrh	r3, [r3, #6]
 800ed4a:	b29a      	uxth	r2, r3
 800ed4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed4e:	889b      	ldrh	r3, [r3, #4]
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d002      	beq.n	800ed5c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ed56:	2300      	movs	r3, #0
 800ed58:	623b      	str	r3, [r7, #32]
            break;
 800ed5a:	e007      	b.n	800ed6c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ed5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed5e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800ed60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800ed66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d1e9      	bne.n	800ed40 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ed6c:	6a3b      	ldr	r3, [r7, #32]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d022      	beq.n	800edb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d106      	bne.n	800ed88 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800ed7a:	4b15      	ldr	r3, [pc, #84]	@ (800edd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ed7c:	f240 12df 	movw	r2, #479	@ 0x1df
 800ed80:	4917      	ldr	r1, [pc, #92]	@ (800ede0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ed82:	4815      	ldr	r0, [pc, #84]	@ (800edd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ed84:	f008 fcd6 	bl	8017734 <iprintf>
          LWIP_ASSERT("sanity check",
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d106      	bne.n	800eda2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ed94:	4b0e      	ldr	r3, [pc, #56]	@ (800edd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ed96:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ed9a:	4911      	ldr	r1, [pc, #68]	@ (800ede0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ed9c:	480e      	ldr	r0, [pc, #56]	@ (800edd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ed9e:	f008 fcc9 	bl	8017734 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800eda2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d006      	beq.n	800edb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800edaa:	4b09      	ldr	r3, [pc, #36]	@ (800edd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800edac:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800edb0:	490c      	ldr	r1, [pc, #48]	@ (800ede4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800edb2:	4809      	ldr	r0, [pc, #36]	@ (800edd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800edb4:	f008 fcbe 	bl	8017734 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800edb8:	6a3b      	ldr	r3, [r7, #32]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	bf14      	ite	ne
 800edbe:	2301      	movne	r3, #1
 800edc0:	2300      	moveq	r3, #0
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	e000      	b.n	800edc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800edc6:	2300      	movs	r3, #0
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3730      	adds	r7, #48	@ 0x30
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	08019020 	.word	0x08019020
 800edd4:	08019134 	.word	0x08019134
 800edd8:	08019098 	.word	0x08019098
 800eddc:	08019154 	.word	0x08019154
 800ede0:	0801918c 	.word	0x0801918c
 800ede4:	0801919c 	.word	0x0801919c

0800ede8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b08e      	sub	sp, #56	@ 0x38
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800edf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	f003 030f 	and.w	r3, r3, #15
 800edfe:	b2db      	uxtb	r3, r3
 800ee00:	009b      	lsls	r3, r3, #2
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	2b14      	cmp	r3, #20
 800ee06:	f040 8171 	bne.w	800f0ec <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800ee0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee0c:	88db      	ldrh	r3, [r3, #6]
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7fc f807 	bl	800ae24 <lwip_htons>
 800ee16:	4603      	mov	r3, r0
 800ee18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	00db      	lsls	r3, r3, #3
 800ee20:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ee22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee24:	885b      	ldrh	r3, [r3, #2]
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7fb fffb 	bl	800ae24 <lwip_htons>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800ee32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	f003 030f 	and.w	r3, r3, #15
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	009b      	lsls	r3, r3, #2
 800ee3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800ee42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	f0c0 8150 	bcc.w	800f0f0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800ee50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ee54:	b29b      	uxth	r3, r3
 800ee56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f001 ff2b 	bl	8010cb8 <pbuf_clen>
 800ee62:	4603      	mov	r3, r0
 800ee64:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ee66:	4b8c      	ldr	r3, [pc, #560]	@ (800f098 <ip4_reass+0x2b0>)
 800ee68:	881b      	ldrh	r3, [r3, #0]
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	8c3b      	ldrh	r3, [r7, #32]
 800ee6e:	4413      	add	r3, r2
 800ee70:	2b0a      	cmp	r3, #10
 800ee72:	dd10      	ble.n	800ee96 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ee74:	8c3b      	ldrh	r3, [r7, #32]
 800ee76:	4619      	mov	r1, r3
 800ee78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee7a:	f7ff fd81 	bl	800e980 <ip_reass_remove_oldest_datagram>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f000 8137 	beq.w	800f0f4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ee86:	4b84      	ldr	r3, [pc, #528]	@ (800f098 <ip4_reass+0x2b0>)
 800ee88:	881b      	ldrh	r3, [r3, #0]
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	8c3b      	ldrh	r3, [r7, #32]
 800ee8e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ee90:	2b0a      	cmp	r3, #10
 800ee92:	f300 812f 	bgt.w	800f0f4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ee96:	4b81      	ldr	r3, [pc, #516]	@ (800f09c <ip4_reass+0x2b4>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee9c:	e015      	b.n	800eeca <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ee9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eea0:	695a      	ldr	r2, [r3, #20]
 800eea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eea4:	68db      	ldr	r3, [r3, #12]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d10c      	bne.n	800eec4 <ip4_reass+0xdc>
 800eeaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeac:	699a      	ldr	r2, [r3, #24]
 800eeae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeb0:	691b      	ldr	r3, [r3, #16]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d106      	bne.n	800eec4 <ip4_reass+0xdc>
 800eeb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeb8:	899a      	ldrh	r2, [r3, #12]
 800eeba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eebc:	889b      	ldrh	r3, [r3, #4]
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d006      	beq.n	800eed2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800eec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	633b      	str	r3, [r7, #48]	@ 0x30
 800eeca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d1e6      	bne.n	800ee9e <ip4_reass+0xb6>
 800eed0:	e000      	b.n	800eed4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800eed2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800eed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d109      	bne.n	800eeee <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800eeda:	8c3b      	ldrh	r3, [r7, #32]
 800eedc:	4619      	mov	r1, r3
 800eede:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eee0:	f7ff fdb0 	bl	800ea44 <ip_reass_enqueue_new_datagram>
 800eee4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800eee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d11c      	bne.n	800ef26 <ip4_reass+0x13e>
      goto nullreturn;
 800eeec:	e105      	b.n	800f0fa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800eeee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eef0:	88db      	ldrh	r3, [r3, #6]
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7fb ff95 	bl	800ae24 <lwip_htons>
 800eefa:	4603      	mov	r3, r0
 800eefc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d110      	bne.n	800ef26 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ef04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef06:	89db      	ldrh	r3, [r3, #14]
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7fb ff8b 	bl	800ae24 <lwip_htons>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d006      	beq.n	800ef26 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ef18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef1a:	3308      	adds	r3, #8
 800ef1c:	2214      	movs	r2, #20
 800ef1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef20:	4618      	mov	r0, r3
 800ef22:	f008 fdd4 	bl	8017ace <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ef26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef28:	88db      	ldrh	r3, [r3, #6]
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	f003 0320 	and.w	r3, r3, #32
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	bf0c      	ite	eq
 800ef34:	2301      	moveq	r3, #1
 800ef36:	2300      	movne	r3, #0
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ef3c:	69fb      	ldr	r3, [r7, #28]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d00e      	beq.n	800ef60 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ef42:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ef44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef46:	4413      	add	r3, r2
 800ef48:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ef4a:	8b7a      	ldrh	r2, [r7, #26]
 800ef4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	f0c0 80a0 	bcc.w	800f094 <ip4_reass+0x2ac>
 800ef54:	8b7b      	ldrh	r3, [r7, #26]
 800ef56:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	f200 809a 	bhi.w	800f094 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ef60:	69fa      	ldr	r2, [r7, #28]
 800ef62:	6879      	ldr	r1, [r7, #4]
 800ef64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ef66:	f7ff fdd5 	bl	800eb14 <ip_reass_chain_frag_into_datagram_and_validate>
 800ef6a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef72:	f000 809b 	beq.w	800f0ac <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ef76:	4b48      	ldr	r3, [pc, #288]	@ (800f098 <ip4_reass+0x2b0>)
 800ef78:	881a      	ldrh	r2, [r3, #0]
 800ef7a:	8c3b      	ldrh	r3, [r7, #32]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	b29a      	uxth	r2, r3
 800ef80:	4b45      	ldr	r3, [pc, #276]	@ (800f098 <ip4_reass+0x2b0>)
 800ef82:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ef84:	69fb      	ldr	r3, [r7, #28]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00d      	beq.n	800efa6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ef8a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ef8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef8e:	4413      	add	r3, r2
 800ef90:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ef92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef94:	8a7a      	ldrh	r2, [r7, #18]
 800ef96:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ef98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef9a:	7f9b      	ldrb	r3, [r3, #30]
 800ef9c:	f043 0301 	orr.w	r3, r3, #1
 800efa0:	b2da      	uxtb	r2, r3
 800efa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efa4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d171      	bne.n	800f090 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800efac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efae:	8b9b      	ldrh	r3, [r3, #28]
 800efb0:	3314      	adds	r3, #20
 800efb2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800efb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800efbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	685b      	ldr	r3, [r3, #4]
 800efc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800efc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efc8:	3308      	adds	r3, #8
 800efca:	2214      	movs	r2, #20
 800efcc:	4619      	mov	r1, r3
 800efce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800efd0:	f008 fd7d 	bl	8017ace <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800efd4:	8a3b      	ldrh	r3, [r7, #16]
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7fb ff24 	bl	800ae24 <lwip_htons>
 800efdc:	4603      	mov	r3, r0
 800efde:	461a      	mov	r2, r3
 800efe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efe2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800efe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efe6:	2200      	movs	r2, #0
 800efe8:	719a      	strb	r2, [r3, #6]
 800efea:	2200      	movs	r2, #0
 800efec:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800efee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eff0:	2200      	movs	r2, #0
 800eff2:	729a      	strb	r2, [r3, #10]
 800eff4:	2200      	movs	r2, #0
 800eff6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800eff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800effe:	e00d      	b.n	800f01c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f006:	2114      	movs	r1, #20
 800f008:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f00a:	f001 fd41 	bl	8010a90 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f00e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f001 fe91 	bl	8010d38 <pbuf_cat>
      r = iprh->next_pbuf;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800f01c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d1ee      	bne.n	800f000 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f022:	4b1e      	ldr	r3, [pc, #120]	@ (800f09c <ip4_reass+0x2b4>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f028:	429a      	cmp	r2, r3
 800f02a:	d102      	bne.n	800f032 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f02c:	2300      	movs	r3, #0
 800f02e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f030:	e010      	b.n	800f054 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f032:	4b1a      	ldr	r3, [pc, #104]	@ (800f09c <ip4_reass+0x2b4>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f038:	e007      	b.n	800f04a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f040:	429a      	cmp	r2, r3
 800f042:	d006      	beq.n	800f052 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d1f4      	bne.n	800f03a <ip4_reass+0x252>
 800f050:	e000      	b.n	800f054 <ip4_reass+0x26c>
          break;
 800f052:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f054:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f056:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f058:	f7ff fd2e 	bl	800eab8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f001 fe2b 	bl	8010cb8 <pbuf_clen>
 800f062:	4603      	mov	r3, r0
 800f064:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f066:	4b0c      	ldr	r3, [pc, #48]	@ (800f098 <ip4_reass+0x2b0>)
 800f068:	881b      	ldrh	r3, [r3, #0]
 800f06a:	8c3a      	ldrh	r2, [r7, #32]
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d906      	bls.n	800f07e <ip4_reass+0x296>
 800f070:	4b0b      	ldr	r3, [pc, #44]	@ (800f0a0 <ip4_reass+0x2b8>)
 800f072:	f240 229b 	movw	r2, #667	@ 0x29b
 800f076:	490b      	ldr	r1, [pc, #44]	@ (800f0a4 <ip4_reass+0x2bc>)
 800f078:	480b      	ldr	r0, [pc, #44]	@ (800f0a8 <ip4_reass+0x2c0>)
 800f07a:	f008 fb5b 	bl	8017734 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f07e:	4b06      	ldr	r3, [pc, #24]	@ (800f098 <ip4_reass+0x2b0>)
 800f080:	881a      	ldrh	r2, [r3, #0]
 800f082:	8c3b      	ldrh	r3, [r7, #32]
 800f084:	1ad3      	subs	r3, r2, r3
 800f086:	b29a      	uxth	r2, r3
 800f088:	4b03      	ldr	r3, [pc, #12]	@ (800f098 <ip4_reass+0x2b0>)
 800f08a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	e038      	b.n	800f102 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f090:	2300      	movs	r3, #0
 800f092:	e036      	b.n	800f102 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f094:	bf00      	nop
 800f096:	e00a      	b.n	800f0ae <ip4_reass+0x2c6>
 800f098:	24004dec 	.word	0x24004dec
 800f09c:	24004de8 	.word	0x24004de8
 800f0a0:	08019020 	.word	0x08019020
 800f0a4:	080191c0 	.word	0x080191c0
 800f0a8:	08019098 	.word	0x08019098
    goto nullreturn_ipr;
 800f0ac:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d106      	bne.n	800f0c2 <ip4_reass+0x2da>
 800f0b4:	4b15      	ldr	r3, [pc, #84]	@ (800f10c <ip4_reass+0x324>)
 800f0b6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800f0ba:	4915      	ldr	r1, [pc, #84]	@ (800f110 <ip4_reass+0x328>)
 800f0bc:	4815      	ldr	r0, [pc, #84]	@ (800f114 <ip4_reass+0x32c>)
 800f0be:	f008 fb39 	bl	8017734 <iprintf>
  if (ipr->p == NULL) {
 800f0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d116      	bne.n	800f0f8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f0ca:	4b13      	ldr	r3, [pc, #76]	@ (800f118 <ip4_reass+0x330>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d006      	beq.n	800f0e2 <ip4_reass+0x2fa>
 800f0d4:	4b0d      	ldr	r3, [pc, #52]	@ (800f10c <ip4_reass+0x324>)
 800f0d6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800f0da:	4910      	ldr	r1, [pc, #64]	@ (800f11c <ip4_reass+0x334>)
 800f0dc:	480d      	ldr	r0, [pc, #52]	@ (800f114 <ip4_reass+0x32c>)
 800f0de:	f008 fb29 	bl	8017734 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f0e2:	2100      	movs	r1, #0
 800f0e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f0e6:	f7ff fce7 	bl	800eab8 <ip_reass_dequeue_datagram>
 800f0ea:	e006      	b.n	800f0fa <ip4_reass+0x312>
    goto nullreturn;
 800f0ec:	bf00      	nop
 800f0ee:	e004      	b.n	800f0fa <ip4_reass+0x312>
    goto nullreturn;
 800f0f0:	bf00      	nop
 800f0f2:	e002      	b.n	800f0fa <ip4_reass+0x312>
      goto nullreturn;
 800f0f4:	bf00      	nop
 800f0f6:	e000      	b.n	800f0fa <ip4_reass+0x312>
  }

nullreturn:
 800f0f8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f001 fd4e 	bl	8010b9c <pbuf_free>
  return NULL;
 800f100:	2300      	movs	r3, #0
}
 800f102:	4618      	mov	r0, r3
 800f104:	3738      	adds	r7, #56	@ 0x38
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	bf00      	nop
 800f10c:	08019020 	.word	0x08019020
 800f110:	080191dc 	.word	0x080191dc
 800f114:	08019098 	.word	0x08019098
 800f118:	24004de8 	.word	0x24004de8
 800f11c:	080191e8 	.word	0x080191e8

0800f120 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f124:	2005      	movs	r0, #5
 800f126:	f000 fe15 	bl	800fd54 <memp_malloc>
 800f12a:	4603      	mov	r3, r0
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d106      	bne.n	800f14c <ip_frag_free_pbuf_custom_ref+0x1c>
 800f13e:	4b07      	ldr	r3, [pc, #28]	@ (800f15c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f140:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800f144:	4906      	ldr	r1, [pc, #24]	@ (800f160 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f146:	4807      	ldr	r0, [pc, #28]	@ (800f164 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f148:	f008 faf4 	bl	8017734 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f14c:	6879      	ldr	r1, [r7, #4]
 800f14e:	2005      	movs	r0, #5
 800f150:	f000 fe76 	bl	800fe40 <memp_free>
}
 800f154:	bf00      	nop
 800f156:	3708      	adds	r7, #8
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}
 800f15c:	08019020 	.word	0x08019020
 800f160:	08019208 	.word	0x08019208
 800f164:	08019098 	.word	0x08019098

0800f168 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b084      	sub	sp, #16
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d106      	bne.n	800f188 <ipfrag_free_pbuf_custom+0x20>
 800f17a:	4b11      	ldr	r3, [pc, #68]	@ (800f1c0 <ipfrag_free_pbuf_custom+0x58>)
 800f17c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800f180:	4910      	ldr	r1, [pc, #64]	@ (800f1c4 <ipfrag_free_pbuf_custom+0x5c>)
 800f182:	4811      	ldr	r0, [pc, #68]	@ (800f1c8 <ipfrag_free_pbuf_custom+0x60>)
 800f184:	f008 fad6 	bl	8017734 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d006      	beq.n	800f19e <ipfrag_free_pbuf_custom+0x36>
 800f190:	4b0b      	ldr	r3, [pc, #44]	@ (800f1c0 <ipfrag_free_pbuf_custom+0x58>)
 800f192:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800f196:	490d      	ldr	r1, [pc, #52]	@ (800f1cc <ipfrag_free_pbuf_custom+0x64>)
 800f198:	480b      	ldr	r0, [pc, #44]	@ (800f1c8 <ipfrag_free_pbuf_custom+0x60>)
 800f19a:	f008 facb 	bl	8017734 <iprintf>
  if (pcr->original != NULL) {
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	695b      	ldr	r3, [r3, #20]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d004      	beq.n	800f1b0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	695b      	ldr	r3, [r3, #20]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f001 fcf6 	bl	8010b9c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f1b0:	68f8      	ldr	r0, [r7, #12]
 800f1b2:	f7ff ffbd 	bl	800f130 <ip_frag_free_pbuf_custom_ref>
}
 800f1b6:	bf00      	nop
 800f1b8:	3710      	adds	r7, #16
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	08019020 	.word	0x08019020
 800f1c4:	08019214 	.word	0x08019214
 800f1c8:	08019098 	.word	0x08019098
 800f1cc:	08019220 	.word	0x08019220

0800f1d0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b094      	sub	sp, #80	@ 0x50
 800f1d4:	af02      	add	r7, sp, #8
 800f1d6:	60f8      	str	r0, [r7, #12]
 800f1d8:	60b9      	str	r1, [r7, #8]
 800f1da:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1e6:	3b14      	subs	r3, #20
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	da00      	bge.n	800f1ee <ip4_frag+0x1e>
 800f1ec:	3307      	adds	r3, #7
 800f1ee:	10db      	asrs	r3, r3, #3
 800f1f0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f1f2:	2314      	movs	r3, #20
 800f1f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	685b      	ldr	r3, [r3, #4]
 800f1fa:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800f1fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1fe:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	f003 030f 	and.w	r3, r3, #15
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	009b      	lsls	r3, r3, #2
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	2b14      	cmp	r3, #20
 800f210:	d002      	beq.n	800f218 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f212:	f06f 0305 	mvn.w	r3, #5
 800f216:	e110      	b.n	800f43a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	895b      	ldrh	r3, [r3, #10]
 800f21c:	2b13      	cmp	r3, #19
 800f21e:	d809      	bhi.n	800f234 <ip4_frag+0x64>
 800f220:	4b88      	ldr	r3, [pc, #544]	@ (800f444 <ip4_frag+0x274>)
 800f222:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800f226:	4988      	ldr	r1, [pc, #544]	@ (800f448 <ip4_frag+0x278>)
 800f228:	4888      	ldr	r0, [pc, #544]	@ (800f44c <ip4_frag+0x27c>)
 800f22a:	f008 fa83 	bl	8017734 <iprintf>
 800f22e:	f06f 0305 	mvn.w	r3, #5
 800f232:	e102      	b.n	800f43a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f236:	88db      	ldrh	r3, [r3, #6]
 800f238:	b29b      	uxth	r3, r3
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7fb fdf2 	bl	800ae24 <lwip_htons>
 800f240:	4603      	mov	r3, r0
 800f242:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800f244:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f246:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f24a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f24e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f250:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f254:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	891b      	ldrh	r3, [r3, #8]
 800f25a:	3b14      	subs	r3, #20
 800f25c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800f260:	e0e1      	b.n	800f426 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f262:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800f264:	00db      	lsls	r3, r3, #3
 800f266:	b29b      	uxth	r3, r3
 800f268:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f26c:	4293      	cmp	r3, r2
 800f26e:	bf28      	it	cs
 800f270:	4613      	movcs	r3, r2
 800f272:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f274:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f278:	2114      	movs	r1, #20
 800f27a:	200e      	movs	r0, #14
 800f27c:	f001 f9ac 	bl	80105d8 <pbuf_alloc>
 800f280:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800f282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f284:	2b00      	cmp	r3, #0
 800f286:	f000 80d5 	beq.w	800f434 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f28c:	895b      	ldrh	r3, [r3, #10]
 800f28e:	2b13      	cmp	r3, #19
 800f290:	d806      	bhi.n	800f2a0 <ip4_frag+0xd0>
 800f292:	4b6c      	ldr	r3, [pc, #432]	@ (800f444 <ip4_frag+0x274>)
 800f294:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800f298:	496d      	ldr	r1, [pc, #436]	@ (800f450 <ip4_frag+0x280>)
 800f29a:	486c      	ldr	r0, [pc, #432]	@ (800f44c <ip4_frag+0x27c>)
 800f29c:	f008 fa4a 	bl	8017734 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	2214      	movs	r2, #20
 800f2a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f008 fc10 	bl	8017ace <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2b0:	685b      	ldr	r3, [r3, #4]
 800f2b2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800f2b4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f2b6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800f2ba:	e064      	b.n	800f386 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	895a      	ldrh	r2, [r3, #10]
 800f2c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f2c2:	1ad3      	subs	r3, r2, r3
 800f2c4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	895b      	ldrh	r3, [r3, #10]
 800f2ca:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d906      	bls.n	800f2de <ip4_frag+0x10e>
 800f2d0:	4b5c      	ldr	r3, [pc, #368]	@ (800f444 <ip4_frag+0x274>)
 800f2d2:	f240 322d 	movw	r2, #813	@ 0x32d
 800f2d6:	495f      	ldr	r1, [pc, #380]	@ (800f454 <ip4_frag+0x284>)
 800f2d8:	485c      	ldr	r0, [pc, #368]	@ (800f44c <ip4_frag+0x27c>)
 800f2da:	f008 fa2b 	bl	8017734 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f2de:	8bfa      	ldrh	r2, [r7, #30]
 800f2e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	bf28      	it	cs
 800f2e8:	4613      	movcs	r3, r2
 800f2ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f2ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d105      	bne.n	800f302 <ip4_frag+0x132>
        poff = 0;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	60fb      	str	r3, [r7, #12]
        continue;
 800f300:	e041      	b.n	800f386 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f302:	f7ff ff0d 	bl	800f120 <ip_frag_alloc_pbuf_custom_ref>
 800f306:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d103      	bne.n	800f316 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f30e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f310:	f001 fc44 	bl	8010b9c <pbuf_free>
        goto memerr;
 800f314:	e08f      	b.n	800f436 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f316:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f31c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f31e:	4413      	add	r3, r2
 800f320:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800f324:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800f328:	9201      	str	r2, [sp, #4]
 800f32a:	9300      	str	r3, [sp, #0]
 800f32c:	4603      	mov	r3, r0
 800f32e:	2241      	movs	r2, #65	@ 0x41
 800f330:	2000      	movs	r0, #0
 800f332:	f001 fa7b 	bl	801082c <pbuf_alloced_custom>
 800f336:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d106      	bne.n	800f34c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f33e:	69b8      	ldr	r0, [r7, #24]
 800f340:	f7ff fef6 	bl	800f130 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f344:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f346:	f001 fc29 	bl	8010b9c <pbuf_free>
        goto memerr;
 800f34a:	e074      	b.n	800f436 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f34c:	68f8      	ldr	r0, [r7, #12]
 800f34e:	f001 fccb 	bl	8010ce8 <pbuf_ref>
      pcr->original = p;
 800f352:	69bb      	ldr	r3, [r7, #24]
 800f354:	68fa      	ldr	r2, [r7, #12]
 800f356:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f358:	69bb      	ldr	r3, [r7, #24]
 800f35a:	4a3f      	ldr	r2, [pc, #252]	@ (800f458 <ip4_frag+0x288>)
 800f35c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f35e:	6979      	ldr	r1, [r7, #20]
 800f360:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f362:	f001 fce9 	bl	8010d38 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f366:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800f36a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f36e:	1ad3      	subs	r3, r2, r3
 800f370:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800f374:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d004      	beq.n	800f386 <ip4_frag+0x1b6>
        poff = 0;
 800f37c:	2300      	movs	r3, #0
 800f37e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f386:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d196      	bne.n	800f2bc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f38e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800f390:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f394:	4413      	add	r3, r2
 800f396:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f39c:	f1a3 0213 	sub.w	r2, r3, #19
 800f3a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	bfcc      	ite	gt
 800f3a8:	2301      	movgt	r3, #1
 800f3aa:	2300      	movle	r3, #0
 800f3ac:	b2db      	uxtb	r3, r3
 800f3ae:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f3b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800f3b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f3b8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800f3ba:	6a3b      	ldr	r3, [r7, #32]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d002      	beq.n	800f3c6 <ip4_frag+0x1f6>
 800f3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d003      	beq.n	800f3ce <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f3c6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f3c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f3cc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f3ce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7fb fd27 	bl	800ae24 <lwip_htons>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	461a      	mov	r2, r3
 800f3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3dc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f3de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f3e0:	3314      	adds	r3, #20
 800f3e2:	b29b      	uxth	r3, r3
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7fb fd1d 	bl	800ae24 <lwip_htons>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	461a      	mov	r2, r3
 800f3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3f0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	729a      	strb	r2, [r3, #10]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	695b      	ldr	r3, [r3, #20]
 800f400:	687a      	ldr	r2, [r7, #4]
 800f402:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f404:	68b8      	ldr	r0, [r7, #8]
 800f406:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f408:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f40a:	f001 fbc7 	bl	8010b9c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f40e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f412:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f414:	1ad3      	subs	r3, r2, r3
 800f416:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800f41a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800f41e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800f420:	4413      	add	r3, r2
 800f422:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800f426:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	f47f af19 	bne.w	800f262 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f430:	2300      	movs	r3, #0
 800f432:	e002      	b.n	800f43a <ip4_frag+0x26a>
      goto memerr;
 800f434:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3748      	adds	r7, #72	@ 0x48
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}
 800f442:	bf00      	nop
 800f444:	08019020 	.word	0x08019020
 800f448:	0801922c 	.word	0x0801922c
 800f44c:	08019098 	.word	0x08019098
 800f450:	08019248 	.word	0x08019248
 800f454:	08019268 	.word	0x08019268
 800f458:	0800f169 	.word	0x0800f169

0800f45c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b083      	sub	sp, #12
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800f464:	4b04      	ldr	r3, [pc, #16]	@ (800f478 <ptr_to_mem+0x1c>)
 800f466:	681a      	ldr	r2, [r3, #0]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	4413      	add	r3, r2
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	370c      	adds	r7, #12
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr
 800f478:	24004df0 	.word	0x24004df0

0800f47c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b083      	sub	sp, #12
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f484:	4b04      	ldr	r3, [pc, #16]	@ (800f498 <mem_to_ptr+0x1c>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	687a      	ldr	r2, [r7, #4]
 800f48a:	1ad3      	subs	r3, r2, r3
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	370c      	adds	r7, #12
 800f490:	46bd      	mov	sp, r7
 800f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f496:	4770      	bx	lr
 800f498:	24004df0 	.word	0x24004df0

0800f49c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f49c:	b590      	push	{r4, r7, lr}
 800f49e:	b085      	sub	sp, #20
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f4a4:	4b45      	ldr	r3, [pc, #276]	@ (800f5bc <plug_holes+0x120>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	687a      	ldr	r2, [r7, #4]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d206      	bcs.n	800f4bc <plug_holes+0x20>
 800f4ae:	4b44      	ldr	r3, [pc, #272]	@ (800f5c0 <plug_holes+0x124>)
 800f4b0:	f240 12df 	movw	r2, #479	@ 0x1df
 800f4b4:	4943      	ldr	r1, [pc, #268]	@ (800f5c4 <plug_holes+0x128>)
 800f4b6:	4844      	ldr	r0, [pc, #272]	@ (800f5c8 <plug_holes+0x12c>)
 800f4b8:	f008 f93c 	bl	8017734 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f4bc:	4b43      	ldr	r3, [pc, #268]	@ (800f5cc <plug_holes+0x130>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d306      	bcc.n	800f4d4 <plug_holes+0x38>
 800f4c6:	4b3e      	ldr	r3, [pc, #248]	@ (800f5c0 <plug_holes+0x124>)
 800f4c8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800f4cc:	4940      	ldr	r1, [pc, #256]	@ (800f5d0 <plug_holes+0x134>)
 800f4ce:	483e      	ldr	r0, [pc, #248]	@ (800f5c8 <plug_holes+0x12c>)
 800f4d0:	f008 f930 	bl	8017734 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	7a1b      	ldrb	r3, [r3, #8]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d006      	beq.n	800f4ea <plug_holes+0x4e>
 800f4dc:	4b38      	ldr	r3, [pc, #224]	@ (800f5c0 <plug_holes+0x124>)
 800f4de:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800f4e2:	493c      	ldr	r1, [pc, #240]	@ (800f5d4 <plug_holes+0x138>)
 800f4e4:	4838      	ldr	r0, [pc, #224]	@ (800f5c8 <plug_holes+0x12c>)
 800f4e6:	f008 f925 	bl	8017734 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	4a3a      	ldr	r2, [pc, #232]	@ (800f5d8 <plug_holes+0x13c>)
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d906      	bls.n	800f502 <plug_holes+0x66>
 800f4f4:	4b32      	ldr	r3, [pc, #200]	@ (800f5c0 <plug_holes+0x124>)
 800f4f6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800f4fa:	4938      	ldr	r1, [pc, #224]	@ (800f5dc <plug_holes+0x140>)
 800f4fc:	4832      	ldr	r0, [pc, #200]	@ (800f5c8 <plug_holes+0x12c>)
 800f4fe:	f008 f919 	bl	8017734 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	4618      	mov	r0, r3
 800f508:	f7ff ffa8 	bl	800f45c <ptr_to_mem>
 800f50c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	429a      	cmp	r2, r3
 800f514:	d024      	beq.n	800f560 <plug_holes+0xc4>
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	7a1b      	ldrb	r3, [r3, #8]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d120      	bne.n	800f560 <plug_holes+0xc4>
 800f51e:	4b2b      	ldr	r3, [pc, #172]	@ (800f5cc <plug_holes+0x130>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	68fa      	ldr	r2, [r7, #12]
 800f524:	429a      	cmp	r2, r3
 800f526:	d01b      	beq.n	800f560 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f528:	4b2d      	ldr	r3, [pc, #180]	@ (800f5e0 <plug_holes+0x144>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	68fa      	ldr	r2, [r7, #12]
 800f52e:	429a      	cmp	r2, r3
 800f530:	d102      	bne.n	800f538 <plug_holes+0x9c>
      lfree = mem;
 800f532:	4a2b      	ldr	r2, [pc, #172]	@ (800f5e0 <plug_holes+0x144>)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4a24      	ldr	r2, [pc, #144]	@ (800f5d8 <plug_holes+0x13c>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d00a      	beq.n	800f560 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	4618      	mov	r0, r3
 800f550:	f7ff ff84 	bl	800f45c <ptr_to_mem>
 800f554:	4604      	mov	r4, r0
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f7ff ff90 	bl	800f47c <mem_to_ptr>
 800f55c:	4603      	mov	r3, r0
 800f55e:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	685b      	ldr	r3, [r3, #4]
 800f564:	4618      	mov	r0, r3
 800f566:	f7ff ff79 	bl	800f45c <ptr_to_mem>
 800f56a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f56c:	68ba      	ldr	r2, [r7, #8]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	429a      	cmp	r2, r3
 800f572:	d01f      	beq.n	800f5b4 <plug_holes+0x118>
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	7a1b      	ldrb	r3, [r3, #8]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d11b      	bne.n	800f5b4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f57c:	4b18      	ldr	r3, [pc, #96]	@ (800f5e0 <plug_holes+0x144>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	429a      	cmp	r2, r3
 800f584:	d102      	bne.n	800f58c <plug_holes+0xf0>
      lfree = pmem;
 800f586:	4a16      	ldr	r2, [pc, #88]	@ (800f5e0 <plug_holes+0x144>)
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681a      	ldr	r2, [r3, #0]
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	4a0f      	ldr	r2, [pc, #60]	@ (800f5d8 <plug_holes+0x13c>)
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d00a      	beq.n	800f5b4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7ff ff5a 	bl	800f45c <ptr_to_mem>
 800f5a8:	4604      	mov	r4, r0
 800f5aa:	68b8      	ldr	r0, [r7, #8]
 800f5ac:	f7ff ff66 	bl	800f47c <mem_to_ptr>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	6063      	str	r3, [r4, #4]
    }
  }
}
 800f5b4:	bf00      	nop
 800f5b6:	3714      	adds	r7, #20
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd90      	pop	{r4, r7, pc}
 800f5bc:	24004df0 	.word	0x24004df0
 800f5c0:	08019278 	.word	0x08019278
 800f5c4:	080192dc 	.word	0x080192dc
 800f5c8:	080192f4 	.word	0x080192f4
 800f5cc:	24004df4 	.word	0x24004df4
 800f5d0:	0801931c 	.word	0x0801931c
 800f5d4:	08019338 	.word	0x08019338
 800f5d8:	0001ffe8 	.word	0x0001ffe8
 800f5dc:	08019354 	.word	0x08019354
 800f5e0:	24004dfc 	.word	0x24004dfc

0800f5e4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f5ea:	4b1b      	ldr	r3, [pc, #108]	@ (800f658 <mem_init+0x74>)
 800f5ec:	4a1b      	ldr	r2, [pc, #108]	@ (800f65c <mem_init+0x78>)
 800f5ee:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f5f0:	4b19      	ldr	r3, [pc, #100]	@ (800f658 <mem_init+0x74>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4a19      	ldr	r2, [pc, #100]	@ (800f660 <mem_init+0x7c>)
 800f5fa:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2200      	movs	r2, #0
 800f600:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2200      	movs	r2, #0
 800f606:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f608:	4815      	ldr	r0, [pc, #84]	@ (800f660 <mem_init+0x7c>)
 800f60a:	f7ff ff27 	bl	800f45c <ptr_to_mem>
 800f60e:	4603      	mov	r3, r0
 800f610:	4a14      	ldr	r2, [pc, #80]	@ (800f664 <mem_init+0x80>)
 800f612:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f614:	4b13      	ldr	r3, [pc, #76]	@ (800f664 <mem_init+0x80>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	2201      	movs	r2, #1
 800f61a:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f61c:	4b11      	ldr	r3, [pc, #68]	@ (800f664 <mem_init+0x80>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	4a0f      	ldr	r2, [pc, #60]	@ (800f660 <mem_init+0x7c>)
 800f622:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f624:	4b0f      	ldr	r3, [pc, #60]	@ (800f664 <mem_init+0x80>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	4a0d      	ldr	r2, [pc, #52]	@ (800f660 <mem_init+0x7c>)
 800f62a:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f62c:	4b0a      	ldr	r3, [pc, #40]	@ (800f658 <mem_init+0x74>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	4a0d      	ldr	r2, [pc, #52]	@ (800f668 <mem_init+0x84>)
 800f632:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f634:	480d      	ldr	r0, [pc, #52]	@ (800f66c <mem_init+0x88>)
 800f636:	f001 fddd 	bl	80111f4 <sys_mutex_new>
 800f63a:	4603      	mov	r3, r0
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d006      	beq.n	800f64e <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f640:	4b0b      	ldr	r3, [pc, #44]	@ (800f670 <mem_init+0x8c>)
 800f642:	f240 221f 	movw	r2, #543	@ 0x21f
 800f646:	490b      	ldr	r1, [pc, #44]	@ (800f674 <mem_init+0x90>)
 800f648:	480b      	ldr	r0, [pc, #44]	@ (800f678 <mem_init+0x94>)
 800f64a:	f008 f873 	bl	8017734 <iprintf>
  }
}
 800f64e:	bf00      	nop
 800f650:	3708      	adds	r7, #8
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	24004df0 	.word	0x24004df0
 800f65c:	30004000 	.word	0x30004000
 800f660:	0001ffe8 	.word	0x0001ffe8
 800f664:	24004df4 	.word	0x24004df4
 800f668:	24004dfc 	.word	0x24004dfc
 800f66c:	24004df8 	.word	0x24004df8
 800f670:	08019278 	.word	0x08019278
 800f674:	08019380 	.word	0x08019380
 800f678:	080192f4 	.word	0x080192f4

0800f67c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b086      	sub	sp, #24
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f7ff fef9 	bl	800f47c <mem_to_ptr>
 800f68a:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4618      	mov	r0, r3
 800f692:	f7ff fee3 	bl	800f45c <ptr_to_mem>
 800f696:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	4618      	mov	r0, r3
 800f69e:	f7ff fedd 	bl	800f45c <ptr_to_mem>
 800f6a2:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	4a11      	ldr	r2, [pc, #68]	@ (800f6f0 <mem_link_valid+0x74>)
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d818      	bhi.n	800f6e0 <mem_link_valid+0x64>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	4a0f      	ldr	r2, [pc, #60]	@ (800f6f0 <mem_link_valid+0x74>)
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d813      	bhi.n	800f6e0 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f6bc:	697a      	ldr	r2, [r7, #20]
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d004      	beq.n	800f6cc <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	697a      	ldr	r2, [r7, #20]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d109      	bne.n	800f6e0 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f6cc:	4b09      	ldr	r3, [pc, #36]	@ (800f6f4 <mem_link_valid+0x78>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f6d0:	693a      	ldr	r2, [r7, #16]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d006      	beq.n	800f6e4 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	697a      	ldr	r2, [r7, #20]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d001      	beq.n	800f6e4 <mem_link_valid+0x68>
    return 0;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	e000      	b.n	800f6e6 <mem_link_valid+0x6a>
  }
  return 1;
 800f6e4:	2301      	movs	r3, #1
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3718      	adds	r7, #24
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}
 800f6ee:	bf00      	nop
 800f6f0:	0001ffe8 	.word	0x0001ffe8
 800f6f4:	24004df4 	.word	0x24004df4

0800f6f8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b088      	sub	sp, #32
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d070      	beq.n	800f7e8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f003 0303 	and.w	r3, r3, #3
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d00d      	beq.n	800f72c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f710:	4b37      	ldr	r3, [pc, #220]	@ (800f7f0 <mem_free+0xf8>)
 800f712:	f240 2273 	movw	r2, #627	@ 0x273
 800f716:	4937      	ldr	r1, [pc, #220]	@ (800f7f4 <mem_free+0xfc>)
 800f718:	4837      	ldr	r0, [pc, #220]	@ (800f7f8 <mem_free+0x100>)
 800f71a:	f008 f80b 	bl	8017734 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f71e:	f001 fdbb 	bl	8011298 <sys_arch_protect>
 800f722:	60f8      	str	r0, [r7, #12]
 800f724:	68f8      	ldr	r0, [r7, #12]
 800f726:	f001 fdc5 	bl	80112b4 <sys_arch_unprotect>
    return;
 800f72a:	e05e      	b.n	800f7ea <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	3b0c      	subs	r3, #12
 800f730:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f732:	4b32      	ldr	r3, [pc, #200]	@ (800f7fc <mem_free+0x104>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	69fa      	ldr	r2, [r7, #28]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d306      	bcc.n	800f74a <mem_free+0x52>
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f103 020c 	add.w	r2, r3, #12
 800f742:	4b2f      	ldr	r3, [pc, #188]	@ (800f800 <mem_free+0x108>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	429a      	cmp	r2, r3
 800f748:	d90d      	bls.n	800f766 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f74a:	4b29      	ldr	r3, [pc, #164]	@ (800f7f0 <mem_free+0xf8>)
 800f74c:	f240 227f 	movw	r2, #639	@ 0x27f
 800f750:	492c      	ldr	r1, [pc, #176]	@ (800f804 <mem_free+0x10c>)
 800f752:	4829      	ldr	r0, [pc, #164]	@ (800f7f8 <mem_free+0x100>)
 800f754:	f007 ffee 	bl	8017734 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f758:	f001 fd9e 	bl	8011298 <sys_arch_protect>
 800f75c:	6138      	str	r0, [r7, #16]
 800f75e:	6938      	ldr	r0, [r7, #16]
 800f760:	f001 fda8 	bl	80112b4 <sys_arch_unprotect>
    return;
 800f764:	e041      	b.n	800f7ea <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f766:	4828      	ldr	r0, [pc, #160]	@ (800f808 <mem_free+0x110>)
 800f768:	f001 fd5a 	bl	8011220 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f76c:	69fb      	ldr	r3, [r7, #28]
 800f76e:	7a1b      	ldrb	r3, [r3, #8]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d110      	bne.n	800f796 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f774:	4b1e      	ldr	r3, [pc, #120]	@ (800f7f0 <mem_free+0xf8>)
 800f776:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800f77a:	4924      	ldr	r1, [pc, #144]	@ (800f80c <mem_free+0x114>)
 800f77c:	481e      	ldr	r0, [pc, #120]	@ (800f7f8 <mem_free+0x100>)
 800f77e:	f007 ffd9 	bl	8017734 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f782:	4821      	ldr	r0, [pc, #132]	@ (800f808 <mem_free+0x110>)
 800f784:	f001 fd5b 	bl	801123e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f788:	f001 fd86 	bl	8011298 <sys_arch_protect>
 800f78c:	6178      	str	r0, [r7, #20]
 800f78e:	6978      	ldr	r0, [r7, #20]
 800f790:	f001 fd90 	bl	80112b4 <sys_arch_unprotect>
    return;
 800f794:	e029      	b.n	800f7ea <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f796:	69f8      	ldr	r0, [r7, #28]
 800f798:	f7ff ff70 	bl	800f67c <mem_link_valid>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d110      	bne.n	800f7c4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f7a2:	4b13      	ldr	r3, [pc, #76]	@ (800f7f0 <mem_free+0xf8>)
 800f7a4:	f240 2295 	movw	r2, #661	@ 0x295
 800f7a8:	4919      	ldr	r1, [pc, #100]	@ (800f810 <mem_free+0x118>)
 800f7aa:	4813      	ldr	r0, [pc, #76]	@ (800f7f8 <mem_free+0x100>)
 800f7ac:	f007 ffc2 	bl	8017734 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f7b0:	4815      	ldr	r0, [pc, #84]	@ (800f808 <mem_free+0x110>)
 800f7b2:	f001 fd44 	bl	801123e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f7b6:	f001 fd6f 	bl	8011298 <sys_arch_protect>
 800f7ba:	61b8      	str	r0, [r7, #24]
 800f7bc:	69b8      	ldr	r0, [r7, #24]
 800f7be:	f001 fd79 	bl	80112b4 <sys_arch_unprotect>
    return;
 800f7c2:	e012      	b.n	800f7ea <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f7c4:	69fb      	ldr	r3, [r7, #28]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800f7ca:	4b12      	ldr	r3, [pc, #72]	@ (800f814 <mem_free+0x11c>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	69fa      	ldr	r2, [r7, #28]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d202      	bcs.n	800f7da <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f7d4:	4a0f      	ldr	r2, [pc, #60]	@ (800f814 <mem_free+0x11c>)
 800f7d6:	69fb      	ldr	r3, [r7, #28]
 800f7d8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f7da:	69f8      	ldr	r0, [r7, #28]
 800f7dc:	f7ff fe5e 	bl	800f49c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f7e0:	4809      	ldr	r0, [pc, #36]	@ (800f808 <mem_free+0x110>)
 800f7e2:	f001 fd2c 	bl	801123e <sys_mutex_unlock>
 800f7e6:	e000      	b.n	800f7ea <mem_free+0xf2>
    return;
 800f7e8:	bf00      	nop
}
 800f7ea:	3720      	adds	r7, #32
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}
 800f7f0:	08019278 	.word	0x08019278
 800f7f4:	0801939c 	.word	0x0801939c
 800f7f8:	080192f4 	.word	0x080192f4
 800f7fc:	24004df0 	.word	0x24004df0
 800f800:	24004df4 	.word	0x24004df4
 800f804:	080193c0 	.word	0x080193c0
 800f808:	24004df8 	.word	0x24004df8
 800f80c:	080193dc 	.word	0x080193dc
 800f810:	08019404 	.word	0x08019404
 800f814:	24004dfc 	.word	0x24004dfc

0800f818 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b08a      	sub	sp, #40	@ 0x28
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	3303      	adds	r3, #3
 800f826:	f023 0303 	bic.w	r3, r3, #3
 800f82a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800f82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f82e:	2b0b      	cmp	r3, #11
 800f830:	d801      	bhi.n	800f836 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f832:	230c      	movs	r3, #12
 800f834:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f838:	4a6e      	ldr	r2, [pc, #440]	@ (800f9f4 <mem_trim+0x1dc>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d803      	bhi.n	800f846 <mem_trim+0x2e>
 800f83e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	429a      	cmp	r2, r3
 800f844:	d201      	bcs.n	800f84a <mem_trim+0x32>
    return NULL;
 800f846:	2300      	movs	r3, #0
 800f848:	e0d0      	b.n	800f9ec <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f84a:	4b6b      	ldr	r3, [pc, #428]	@ (800f9f8 <mem_trim+0x1e0>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	687a      	ldr	r2, [r7, #4]
 800f850:	429a      	cmp	r2, r3
 800f852:	d304      	bcc.n	800f85e <mem_trim+0x46>
 800f854:	4b69      	ldr	r3, [pc, #420]	@ (800f9fc <mem_trim+0x1e4>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d306      	bcc.n	800f86c <mem_trim+0x54>
 800f85e:	4b68      	ldr	r3, [pc, #416]	@ (800fa00 <mem_trim+0x1e8>)
 800f860:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800f864:	4967      	ldr	r1, [pc, #412]	@ (800fa04 <mem_trim+0x1ec>)
 800f866:	4868      	ldr	r0, [pc, #416]	@ (800fa08 <mem_trim+0x1f0>)
 800f868:	f007 ff64 	bl	8017734 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f86c:	4b62      	ldr	r3, [pc, #392]	@ (800f9f8 <mem_trim+0x1e0>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	687a      	ldr	r2, [r7, #4]
 800f872:	429a      	cmp	r2, r3
 800f874:	d304      	bcc.n	800f880 <mem_trim+0x68>
 800f876:	4b61      	ldr	r3, [pc, #388]	@ (800f9fc <mem_trim+0x1e4>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d307      	bcc.n	800f890 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f880:	f001 fd0a 	bl	8011298 <sys_arch_protect>
 800f884:	60b8      	str	r0, [r7, #8]
 800f886:	68b8      	ldr	r0, [r7, #8]
 800f888:	f001 fd14 	bl	80112b4 <sys_arch_unprotect>
    return rmem;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	e0ad      	b.n	800f9ec <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	3b0c      	subs	r3, #12
 800f894:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f896:	6a38      	ldr	r0, [r7, #32]
 800f898:	f7ff fdf0 	bl	800f47c <mem_to_ptr>
 800f89c:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f89e:	6a3b      	ldr	r3, [r7, #32]
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	69fb      	ldr	r3, [r7, #28]
 800f8a4:	1ad3      	subs	r3, r2, r3
 800f8a6:	3b0c      	subs	r3, #12
 800f8a8:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f8aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8ac:	69bb      	ldr	r3, [r7, #24]
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d906      	bls.n	800f8c0 <mem_trim+0xa8>
 800f8b2:	4b53      	ldr	r3, [pc, #332]	@ (800fa00 <mem_trim+0x1e8>)
 800f8b4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800f8b8:	4954      	ldr	r1, [pc, #336]	@ (800fa0c <mem_trim+0x1f4>)
 800f8ba:	4853      	ldr	r0, [pc, #332]	@ (800fa08 <mem_trim+0x1f0>)
 800f8bc:	f007 ff3a 	bl	8017734 <iprintf>
  if (newsize > size) {
 800f8c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8c2:	69bb      	ldr	r3, [r7, #24]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d901      	bls.n	800f8cc <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	e08f      	b.n	800f9ec <mem_trim+0x1d4>
  }
  if (newsize == size) {
 800f8cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8ce:	69bb      	ldr	r3, [r7, #24]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d101      	bne.n	800f8d8 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	e089      	b.n	800f9ec <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f8d8:	484d      	ldr	r0, [pc, #308]	@ (800fa10 <mem_trim+0x1f8>)
 800f8da:	f001 fca1 	bl	8011220 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f8de:	6a3b      	ldr	r3, [r7, #32]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7ff fdba 	bl	800f45c <ptr_to_mem>
 800f8e8:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800f8ea:	697b      	ldr	r3, [r7, #20]
 800f8ec:	7a1b      	ldrb	r3, [r3, #8]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d13c      	bne.n	800f96c <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f8f2:	6a3b      	ldr	r3, [r7, #32]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	4a3f      	ldr	r2, [pc, #252]	@ (800f9f4 <mem_trim+0x1dc>)
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d106      	bne.n	800f90a <mem_trim+0xf2>
 800f8fc:	4b40      	ldr	r3, [pc, #256]	@ (800fa00 <mem_trim+0x1e8>)
 800f8fe:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800f902:	4944      	ldr	r1, [pc, #272]	@ (800fa14 <mem_trim+0x1fc>)
 800f904:	4840      	ldr	r0, [pc, #256]	@ (800fa08 <mem_trim+0x1f0>)
 800f906:	f007 ff15 	bl	8017734 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f910:	69fa      	ldr	r2, [r7, #28]
 800f912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f914:	4413      	add	r3, r2
 800f916:	330c      	adds	r3, #12
 800f918:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800f91a:	4b3f      	ldr	r3, [pc, #252]	@ (800fa18 <mem_trim+0x200>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	697a      	ldr	r2, [r7, #20]
 800f920:	429a      	cmp	r2, r3
 800f922:	d105      	bne.n	800f930 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 800f924:	6938      	ldr	r0, [r7, #16]
 800f926:	f7ff fd99 	bl	800f45c <ptr_to_mem>
 800f92a:	4603      	mov	r3, r0
 800f92c:	4a3a      	ldr	r2, [pc, #232]	@ (800fa18 <mem_trim+0x200>)
 800f92e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f930:	6938      	ldr	r0, [r7, #16]
 800f932:	f7ff fd93 	bl	800f45c <ptr_to_mem>
 800f936:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	2200      	movs	r2, #0
 800f93c:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	68fa      	ldr	r2, [r7, #12]
 800f942:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	69fa      	ldr	r2, [r7, #28]
 800f948:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800f94a:	6a3b      	ldr	r3, [r7, #32]
 800f94c:	693a      	ldr	r2, [r7, #16]
 800f94e:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	4a27      	ldr	r2, [pc, #156]	@ (800f9f4 <mem_trim+0x1dc>)
 800f956:	4293      	cmp	r3, r2
 800f958:	d044      	beq.n	800f9e4 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	4618      	mov	r0, r3
 800f960:	f7ff fd7c 	bl	800f45c <ptr_to_mem>
 800f964:	4602      	mov	r2, r0
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	6053      	str	r3, [r2, #4]
 800f96a:	e03b      	b.n	800f9e4 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f96e:	3318      	adds	r3, #24
 800f970:	69ba      	ldr	r2, [r7, #24]
 800f972:	429a      	cmp	r2, r3
 800f974:	d336      	bcc.n	800f9e4 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f976:	69fa      	ldr	r2, [r7, #28]
 800f978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f97a:	4413      	add	r3, r2
 800f97c:	330c      	adds	r3, #12
 800f97e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f980:	6a3b      	ldr	r3, [r7, #32]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4a1b      	ldr	r2, [pc, #108]	@ (800f9f4 <mem_trim+0x1dc>)
 800f986:	4293      	cmp	r3, r2
 800f988:	d106      	bne.n	800f998 <mem_trim+0x180>
 800f98a:	4b1d      	ldr	r3, [pc, #116]	@ (800fa00 <mem_trim+0x1e8>)
 800f98c:	f240 3216 	movw	r2, #790	@ 0x316
 800f990:	4920      	ldr	r1, [pc, #128]	@ (800fa14 <mem_trim+0x1fc>)
 800f992:	481d      	ldr	r0, [pc, #116]	@ (800fa08 <mem_trim+0x1f0>)
 800f994:	f007 fece 	bl	8017734 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f998:	6938      	ldr	r0, [r7, #16]
 800f99a:	f7ff fd5f 	bl	800f45c <ptr_to_mem>
 800f99e:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800f9a0:	4b1d      	ldr	r3, [pc, #116]	@ (800fa18 <mem_trim+0x200>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	697a      	ldr	r2, [r7, #20]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d202      	bcs.n	800f9b0 <mem_trim+0x198>
      lfree = mem2;
 800f9aa:	4a1b      	ldr	r2, [pc, #108]	@ (800fa18 <mem_trim+0x200>)
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800f9b6:	6a3b      	ldr	r3, [r7, #32]
 800f9b8:	681a      	ldr	r2, [r3, #0]
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	69fa      	ldr	r2, [r7, #28]
 800f9c2:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800f9c4:	6a3b      	ldr	r3, [r7, #32]
 800f9c6:	693a      	ldr	r2, [r7, #16]
 800f9c8:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	4a09      	ldr	r2, [pc, #36]	@ (800f9f4 <mem_trim+0x1dc>)
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d007      	beq.n	800f9e4 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f7ff fd3f 	bl	800f45c <ptr_to_mem>
 800f9de:	4602      	mov	r2, r0
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f9e4:	480a      	ldr	r0, [pc, #40]	@ (800fa10 <mem_trim+0x1f8>)
 800f9e6:	f001 fc2a 	bl	801123e <sys_mutex_unlock>
  return rmem;
 800f9ea:	687b      	ldr	r3, [r7, #4]
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3728      	adds	r7, #40	@ 0x28
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}
 800f9f4:	0001ffe8 	.word	0x0001ffe8
 800f9f8:	24004df0 	.word	0x24004df0
 800f9fc:	24004df4 	.word	0x24004df4
 800fa00:	08019278 	.word	0x08019278
 800fa04:	08019438 	.word	0x08019438
 800fa08:	080192f4 	.word	0x080192f4
 800fa0c:	08019450 	.word	0x08019450
 800fa10:	24004df8 	.word	0x24004df8
 800fa14:	08019470 	.word	0x08019470
 800fa18:	24004dfc 	.word	0x24004dfc

0800fa1c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b088      	sub	sp, #32
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d101      	bne.n	800fa2e <mem_malloc+0x12>
    return NULL;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	e0d9      	b.n	800fbe2 <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	3303      	adds	r3, #3
 800fa32:	f023 0303 	bic.w	r3, r3, #3
 800fa36:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800fa38:	69bb      	ldr	r3, [r7, #24]
 800fa3a:	2b0b      	cmp	r3, #11
 800fa3c:	d801      	bhi.n	800fa42 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800fa3e:	230c      	movs	r3, #12
 800fa40:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	4a69      	ldr	r2, [pc, #420]	@ (800fbec <mem_malloc+0x1d0>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d803      	bhi.n	800fa52 <mem_malloc+0x36>
 800fa4a:	69ba      	ldr	r2, [r7, #24]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d201      	bcs.n	800fa56 <mem_malloc+0x3a>
    return NULL;
 800fa52:	2300      	movs	r3, #0
 800fa54:	e0c5      	b.n	800fbe2 <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800fa56:	4866      	ldr	r0, [pc, #408]	@ (800fbf0 <mem_malloc+0x1d4>)
 800fa58:	f001 fbe2 	bl	8011220 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fa5c:	4b65      	ldr	r3, [pc, #404]	@ (800fbf4 <mem_malloc+0x1d8>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7ff fd0b 	bl	800f47c <mem_to_ptr>
 800fa66:	61f8      	str	r0, [r7, #28]
 800fa68:	e0b0      	b.n	800fbcc <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800fa6a:	69f8      	ldr	r0, [r7, #28]
 800fa6c:	f7ff fcf6 	bl	800f45c <ptr_to_mem>
 800fa70:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	7a1b      	ldrb	r3, [r3, #8]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	f040 80a2 	bne.w	800fbc0 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	681a      	ldr	r2, [r3, #0]
 800fa80:	69fb      	ldr	r3, [r7, #28]
 800fa82:	1ad3      	subs	r3, r2, r3
 800fa84:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800fa86:	69ba      	ldr	r2, [r7, #24]
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	f200 8099 	bhi.w	800fbc0 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	681a      	ldr	r2, [r3, #0]
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	1ad3      	subs	r3, r2, r3
 800fa96:	f1a3 020c 	sub.w	r2, r3, #12
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	3318      	adds	r3, #24
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d331      	bcc.n	800fb06 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800faa2:	69fa      	ldr	r2, [r7, #28]
 800faa4:	69bb      	ldr	r3, [r7, #24]
 800faa6:	4413      	add	r3, r2
 800faa8:	330c      	adds	r3, #12
 800faaa:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	4a4f      	ldr	r2, [pc, #316]	@ (800fbec <mem_malloc+0x1d0>)
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d106      	bne.n	800fac2 <mem_malloc+0xa6>
 800fab4:	4b50      	ldr	r3, [pc, #320]	@ (800fbf8 <mem_malloc+0x1dc>)
 800fab6:	f240 3287 	movw	r2, #903	@ 0x387
 800faba:	4950      	ldr	r1, [pc, #320]	@ (800fbfc <mem_malloc+0x1e0>)
 800fabc:	4850      	ldr	r0, [pc, #320]	@ (800fc00 <mem_malloc+0x1e4>)
 800fabe:	f007 fe39 	bl	8017734 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800fac2:	68f8      	ldr	r0, [r7, #12]
 800fac4:	f7ff fcca 	bl	800f45c <ptr_to_mem>
 800fac8:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	2200      	movs	r2, #0
 800face:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	681a      	ldr	r2, [r3, #0]
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	69fa      	ldr	r2, [r7, #28]
 800fadc:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	68fa      	ldr	r2, [r7, #12]
 800fae2:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	2201      	movs	r2, #1
 800fae8:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	4a3f      	ldr	r2, [pc, #252]	@ (800fbec <mem_malloc+0x1d0>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d00b      	beq.n	800fb0c <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7ff fcaf 	bl	800f45c <ptr_to_mem>
 800fafe:	4602      	mov	r2, r0
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	6053      	str	r3, [r2, #4]
 800fb04:	e002      	b.n	800fb0c <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	2201      	movs	r2, #1
 800fb0a:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800fb0c:	4b39      	ldr	r3, [pc, #228]	@ (800fbf4 <mem_malloc+0x1d8>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	693a      	ldr	r2, [r7, #16]
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d127      	bne.n	800fb66 <mem_malloc+0x14a>
          struct mem *cur = lfree;
 800fb16:	4b37      	ldr	r3, [pc, #220]	@ (800fbf4 <mem_malloc+0x1d8>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800fb1c:	e005      	b.n	800fb2a <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7ff fc9a 	bl	800f45c <ptr_to_mem>
 800fb28:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	7a1b      	ldrb	r3, [r3, #8]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d004      	beq.n	800fb3c <mem_malloc+0x120>
 800fb32:	4b34      	ldr	r3, [pc, #208]	@ (800fc04 <mem_malloc+0x1e8>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	697a      	ldr	r2, [r7, #20]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d1f0      	bne.n	800fb1e <mem_malloc+0x102>
          }
          lfree = cur;
 800fb3c:	4a2d      	ldr	r2, [pc, #180]	@ (800fbf4 <mem_malloc+0x1d8>)
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800fb42:	4b2c      	ldr	r3, [pc, #176]	@ (800fbf4 <mem_malloc+0x1d8>)
 800fb44:	681a      	ldr	r2, [r3, #0]
 800fb46:	4b2f      	ldr	r3, [pc, #188]	@ (800fc04 <mem_malloc+0x1e8>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	d00b      	beq.n	800fb66 <mem_malloc+0x14a>
 800fb4e:	4b29      	ldr	r3, [pc, #164]	@ (800fbf4 <mem_malloc+0x1d8>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	7a1b      	ldrb	r3, [r3, #8]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d006      	beq.n	800fb66 <mem_malloc+0x14a>
 800fb58:	4b27      	ldr	r3, [pc, #156]	@ (800fbf8 <mem_malloc+0x1dc>)
 800fb5a:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800fb5e:	492a      	ldr	r1, [pc, #168]	@ (800fc08 <mem_malloc+0x1ec>)
 800fb60:	4827      	ldr	r0, [pc, #156]	@ (800fc00 <mem_malloc+0x1e4>)
 800fb62:	f007 fde7 	bl	8017734 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800fb66:	4822      	ldr	r0, [pc, #136]	@ (800fbf0 <mem_malloc+0x1d4>)
 800fb68:	f001 fb69 	bl	801123e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800fb6c:	693a      	ldr	r2, [r7, #16]
 800fb6e:	69bb      	ldr	r3, [r7, #24]
 800fb70:	4413      	add	r3, r2
 800fb72:	330c      	adds	r3, #12
 800fb74:	4a23      	ldr	r2, [pc, #140]	@ (800fc04 <mem_malloc+0x1e8>)
 800fb76:	6812      	ldr	r2, [r2, #0]
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	d906      	bls.n	800fb8a <mem_malloc+0x16e>
 800fb7c:	4b1e      	ldr	r3, [pc, #120]	@ (800fbf8 <mem_malloc+0x1dc>)
 800fb7e:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800fb82:	4922      	ldr	r1, [pc, #136]	@ (800fc0c <mem_malloc+0x1f0>)
 800fb84:	481e      	ldr	r0, [pc, #120]	@ (800fc00 <mem_malloc+0x1e4>)
 800fb86:	f007 fdd5 	bl	8017734 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	f003 0303 	and.w	r3, r3, #3
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d006      	beq.n	800fba2 <mem_malloc+0x186>
 800fb94:	4b18      	ldr	r3, [pc, #96]	@ (800fbf8 <mem_malloc+0x1dc>)
 800fb96:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800fb9a:	491d      	ldr	r1, [pc, #116]	@ (800fc10 <mem_malloc+0x1f4>)
 800fb9c:	4818      	ldr	r0, [pc, #96]	@ (800fc00 <mem_malloc+0x1e4>)
 800fb9e:	f007 fdc9 	bl	8017734 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	f003 0303 	and.w	r3, r3, #3
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d006      	beq.n	800fbba <mem_malloc+0x19e>
 800fbac:	4b12      	ldr	r3, [pc, #72]	@ (800fbf8 <mem_malloc+0x1dc>)
 800fbae:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800fbb2:	4918      	ldr	r1, [pc, #96]	@ (800fc14 <mem_malloc+0x1f8>)
 800fbb4:	4812      	ldr	r0, [pc, #72]	@ (800fc00 <mem_malloc+0x1e4>)
 800fbb6:	f007 fdbd 	bl	8017734 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	330c      	adds	r3, #12
 800fbbe:	e010      	b.n	800fbe2 <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 800fbc0:	69f8      	ldr	r0, [r7, #28]
 800fbc2:	f7ff fc4b 	bl	800f45c <ptr_to_mem>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fbcc:	69ba      	ldr	r2, [r7, #24]
 800fbce:	4b07      	ldr	r3, [pc, #28]	@ (800fbec <mem_malloc+0x1d0>)
 800fbd0:	1a9b      	subs	r3, r3, r2
 800fbd2:	69fa      	ldr	r2, [r7, #28]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	f4ff af48 	bcc.w	800fa6a <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800fbda:	4805      	ldr	r0, [pc, #20]	@ (800fbf0 <mem_malloc+0x1d4>)
 800fbdc:	f001 fb2f 	bl	801123e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800fbe0:	2300      	movs	r3, #0
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3720      	adds	r7, #32
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	0001ffe8 	.word	0x0001ffe8
 800fbf0:	24004df8 	.word	0x24004df8
 800fbf4:	24004dfc 	.word	0x24004dfc
 800fbf8:	08019278 	.word	0x08019278
 800fbfc:	08019470 	.word	0x08019470
 800fc00:	080192f4 	.word	0x080192f4
 800fc04:	24004df4 	.word	0x24004df4
 800fc08:	08019484 	.word	0x08019484
 800fc0c:	080194a0 	.word	0x080194a0
 800fc10:	080194d0 	.word	0x080194d0
 800fc14:	08019500 	.word	0x08019500

0800fc18 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	689b      	ldr	r3, [r3, #8]
 800fc24:	2200      	movs	r2, #0
 800fc26:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	685b      	ldr	r3, [r3, #4]
 800fc2c:	3303      	adds	r3, #3
 800fc2e:	f023 0303 	bic.w	r3, r3, #3
 800fc32:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800fc34:	2300      	movs	r3, #0
 800fc36:	60fb      	str	r3, [r7, #12]
 800fc38:	e011      	b.n	800fc5e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	689b      	ldr	r3, [r3, #8]
 800fc3e:	681a      	ldr	r2, [r3, #0]
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	689b      	ldr	r3, [r3, #8]
 800fc48:	68ba      	ldr	r2, [r7, #8]
 800fc4a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	881b      	ldrh	r3, [r3, #0]
 800fc50:	461a      	mov	r2, r3
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	4413      	add	r3, r2
 800fc56:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	60fb      	str	r3, [r7, #12]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	885b      	ldrh	r3, [r3, #2]
 800fc62:	461a      	mov	r2, r3
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	4293      	cmp	r3, r2
 800fc68:	dbe7      	blt.n	800fc3a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800fc6a:	bf00      	nop
 800fc6c:	bf00      	nop
 800fc6e:	3714      	adds	r7, #20
 800fc70:	46bd      	mov	sp, r7
 800fc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc76:	4770      	bx	lr

0800fc78 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fc7e:	2300      	movs	r3, #0
 800fc80:	80fb      	strh	r3, [r7, #6]
 800fc82:	e009      	b.n	800fc98 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800fc84:	88fb      	ldrh	r3, [r7, #6]
 800fc86:	4a08      	ldr	r2, [pc, #32]	@ (800fca8 <memp_init+0x30>)
 800fc88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7ff ffc3 	bl	800fc18 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fc92:	88fb      	ldrh	r3, [r7, #6]
 800fc94:	3301      	adds	r3, #1
 800fc96:	80fb      	strh	r3, [r7, #6]
 800fc98:	88fb      	ldrh	r3, [r7, #6]
 800fc9a:	2b0c      	cmp	r3, #12
 800fc9c:	d9f2      	bls.n	800fc84 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800fc9e:	bf00      	nop
 800fca0:	bf00      	nop
 800fca2:	3708      	adds	r7, #8
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}
 800fca8:	0801b954 	.word	0x0801b954

0800fcac <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b084      	sub	sp, #16
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800fcb4:	f001 faf0 	bl	8011298 <sys_arch_protect>
 800fcb8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	689b      	ldr	r3, [r3, #8]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d015      	beq.n	800fcf4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	689b      	ldr	r3, [r3, #8]
 800fccc:	68ba      	ldr	r2, [r7, #8]
 800fcce:	6812      	ldr	r2, [r2, #0]
 800fcd0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	f003 0303 	and.w	r3, r3, #3
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d006      	beq.n	800fcea <do_memp_malloc_pool+0x3e>
 800fcdc:	4b09      	ldr	r3, [pc, #36]	@ (800fd04 <do_memp_malloc_pool+0x58>)
 800fcde:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800fce2:	4909      	ldr	r1, [pc, #36]	@ (800fd08 <do_memp_malloc_pool+0x5c>)
 800fce4:	4809      	ldr	r0, [pc, #36]	@ (800fd0c <do_memp_malloc_pool+0x60>)
 800fce6:	f007 fd25 	bl	8017734 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fcea:	68f8      	ldr	r0, [r7, #12]
 800fcec:	f001 fae2 	bl	80112b4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	e003      	b.n	800fcfc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fcf4:	68f8      	ldr	r0, [r7, #12]
 800fcf6:	f001 fadd 	bl	80112b4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800fcfa:	2300      	movs	r3, #0
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3710      	adds	r7, #16
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	08019524 	.word	0x08019524
 800fd08:	08019588 	.word	0x08019588
 800fd0c:	080195ac 	.word	0x080195ac

0800fd10 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b082      	sub	sp, #8
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d106      	bne.n	800fd2c <memp_malloc_pool+0x1c>
 800fd1e:	4b0a      	ldr	r3, [pc, #40]	@ (800fd48 <memp_malloc_pool+0x38>)
 800fd20:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800fd24:	4909      	ldr	r1, [pc, #36]	@ (800fd4c <memp_malloc_pool+0x3c>)
 800fd26:	480a      	ldr	r0, [pc, #40]	@ (800fd50 <memp_malloc_pool+0x40>)
 800fd28:	f007 fd04 	bl	8017734 <iprintf>
  if (desc == NULL) {
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d101      	bne.n	800fd36 <memp_malloc_pool+0x26>
    return NULL;
 800fd32:	2300      	movs	r3, #0
 800fd34:	e003      	b.n	800fd3e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f7ff ffb8 	bl	800fcac <do_memp_malloc_pool>
 800fd3c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	3708      	adds	r7, #8
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}
 800fd46:	bf00      	nop
 800fd48:	08019524 	.word	0x08019524
 800fd4c:	080195d4 	.word	0x080195d4
 800fd50:	080195ac 	.word	0x080195ac

0800fd54 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b084      	sub	sp, #16
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800fd5e:	79fb      	ldrb	r3, [r7, #7]
 800fd60:	2b0c      	cmp	r3, #12
 800fd62:	d908      	bls.n	800fd76 <memp_malloc+0x22>
 800fd64:	4b0a      	ldr	r3, [pc, #40]	@ (800fd90 <memp_malloc+0x3c>)
 800fd66:	f240 1257 	movw	r2, #343	@ 0x157
 800fd6a:	490a      	ldr	r1, [pc, #40]	@ (800fd94 <memp_malloc+0x40>)
 800fd6c:	480a      	ldr	r0, [pc, #40]	@ (800fd98 <memp_malloc+0x44>)
 800fd6e:	f007 fce1 	bl	8017734 <iprintf>
 800fd72:	2300      	movs	r3, #0
 800fd74:	e008      	b.n	800fd88 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800fd76:	79fb      	ldrb	r3, [r7, #7]
 800fd78:	4a08      	ldr	r2, [pc, #32]	@ (800fd9c <memp_malloc+0x48>)
 800fd7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7ff ff94 	bl	800fcac <do_memp_malloc_pool>
 800fd84:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800fd86:	68fb      	ldr	r3, [r7, #12]
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3710      	adds	r7, #16
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}
 800fd90:	08019524 	.word	0x08019524
 800fd94:	080195e8 	.word	0x080195e8
 800fd98:	080195ac 	.word	0x080195ac
 800fd9c:	0801b954 	.word	0x0801b954

0800fda0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b084      	sub	sp, #16
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	f003 0303 	and.w	r3, r3, #3
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d006      	beq.n	800fdc2 <do_memp_free_pool+0x22>
 800fdb4:	4b0d      	ldr	r3, [pc, #52]	@ (800fdec <do_memp_free_pool+0x4c>)
 800fdb6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800fdba:	490d      	ldr	r1, [pc, #52]	@ (800fdf0 <do_memp_free_pool+0x50>)
 800fdbc:	480d      	ldr	r0, [pc, #52]	@ (800fdf4 <do_memp_free_pool+0x54>)
 800fdbe:	f007 fcb9 	bl	8017734 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800fdc6:	f001 fa67 	bl	8011298 <sys_arch_protect>
 800fdca:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	689b      	ldr	r3, [r3, #8]
 800fdd0:	681a      	ldr	r2, [r3, #0]
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	689b      	ldr	r3, [r3, #8]
 800fdda:	68fa      	ldr	r2, [r7, #12]
 800fddc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800fdde:	68b8      	ldr	r0, [r7, #8]
 800fde0:	f001 fa68 	bl	80112b4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800fde4:	bf00      	nop
 800fde6:	3710      	adds	r7, #16
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}
 800fdec:	08019524 	.word	0x08019524
 800fdf0:	08019608 	.word	0x08019608
 800fdf4:	080195ac 	.word	0x080195ac

0800fdf8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b082      	sub	sp, #8
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
 800fe00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d106      	bne.n	800fe16 <memp_free_pool+0x1e>
 800fe08:	4b0a      	ldr	r3, [pc, #40]	@ (800fe34 <memp_free_pool+0x3c>)
 800fe0a:	f240 1295 	movw	r2, #405	@ 0x195
 800fe0e:	490a      	ldr	r1, [pc, #40]	@ (800fe38 <memp_free_pool+0x40>)
 800fe10:	480a      	ldr	r0, [pc, #40]	@ (800fe3c <memp_free_pool+0x44>)
 800fe12:	f007 fc8f 	bl	8017734 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d007      	beq.n	800fe2c <memp_free_pool+0x34>
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d004      	beq.n	800fe2c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800fe22:	6839      	ldr	r1, [r7, #0]
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f7ff ffbb 	bl	800fda0 <do_memp_free_pool>
 800fe2a:	e000      	b.n	800fe2e <memp_free_pool+0x36>
    return;
 800fe2c:	bf00      	nop
}
 800fe2e:	3708      	adds	r7, #8
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	08019524 	.word	0x08019524
 800fe38:	080195d4 	.word	0x080195d4
 800fe3c:	080195ac 	.word	0x080195ac

0800fe40 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	4603      	mov	r3, r0
 800fe48:	6039      	str	r1, [r7, #0]
 800fe4a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fe4c:	79fb      	ldrb	r3, [r7, #7]
 800fe4e:	2b0c      	cmp	r3, #12
 800fe50:	d907      	bls.n	800fe62 <memp_free+0x22>
 800fe52:	4b0c      	ldr	r3, [pc, #48]	@ (800fe84 <memp_free+0x44>)
 800fe54:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800fe58:	490b      	ldr	r1, [pc, #44]	@ (800fe88 <memp_free+0x48>)
 800fe5a:	480c      	ldr	r0, [pc, #48]	@ (800fe8c <memp_free+0x4c>)
 800fe5c:	f007 fc6a 	bl	8017734 <iprintf>
 800fe60:	e00c      	b.n	800fe7c <memp_free+0x3c>

  if (mem == NULL) {
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d008      	beq.n	800fe7a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fe68:	79fb      	ldrb	r3, [r7, #7]
 800fe6a:	4a09      	ldr	r2, [pc, #36]	@ (800fe90 <memp_free+0x50>)
 800fe6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe70:	6839      	ldr	r1, [r7, #0]
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7ff ff94 	bl	800fda0 <do_memp_free_pool>
 800fe78:	e000      	b.n	800fe7c <memp_free+0x3c>
    return;
 800fe7a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800fe7c:	3708      	adds	r7, #8
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}
 800fe82:	bf00      	nop
 800fe84:	08019524 	.word	0x08019524
 800fe88:	08019628 	.word	0x08019628
 800fe8c:	080195ac 	.word	0x080195ac
 800fe90:	0801b954 	.word	0x0801b954

0800fe94 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800fe94:	b480      	push	{r7}
 800fe96:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800fe98:	bf00      	nop
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea0:	4770      	bx	lr
	...

0800fea4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b086      	sub	sp, #24
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	607a      	str	r2, [r7, #4]
 800feb0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d108      	bne.n	800feca <netif_add+0x26>
 800feb8:	4b5b      	ldr	r3, [pc, #364]	@ (8010028 <netif_add+0x184>)
 800feba:	f240 1227 	movw	r2, #295	@ 0x127
 800febe:	495b      	ldr	r1, [pc, #364]	@ (801002c <netif_add+0x188>)
 800fec0:	485b      	ldr	r0, [pc, #364]	@ (8010030 <netif_add+0x18c>)
 800fec2:	f007 fc37 	bl	8017734 <iprintf>
 800fec6:	2300      	movs	r3, #0
 800fec8:	e0a9      	b.n	801001e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800feca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d108      	bne.n	800fee2 <netif_add+0x3e>
 800fed0:	4b55      	ldr	r3, [pc, #340]	@ (8010028 <netif_add+0x184>)
 800fed2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800fed6:	4957      	ldr	r1, [pc, #348]	@ (8010034 <netif_add+0x190>)
 800fed8:	4855      	ldr	r0, [pc, #340]	@ (8010030 <netif_add+0x18c>)
 800feda:	f007 fc2b 	bl	8017734 <iprintf>
 800fede:	2300      	movs	r3, #0
 800fee0:	e09d      	b.n	801001e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d101      	bne.n	800feec <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800fee8:	4b53      	ldr	r3, [pc, #332]	@ (8010038 <netif_add+0x194>)
 800feea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d101      	bne.n	800fef6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800fef2:	4b51      	ldr	r3, [pc, #324]	@ (8010038 <netif_add+0x194>)
 800fef4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d101      	bne.n	800ff00 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800fefc:	4b4e      	ldr	r3, [pc, #312]	@ (8010038 <netif_add+0x194>)
 800fefe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	2200      	movs	r2, #0
 800ff04:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	4a49      	ldr	r2, [pc, #292]	@ (801003c <netif_add+0x198>)
 800ff16:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	2200      	movs	r2, #0
 800ff22:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	3324      	adds	r3, #36	@ 0x24
 800ff2a:	2204      	movs	r2, #4
 800ff2c:	2100      	movs	r1, #0
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f007 fd58 	bl	80179e4 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	2200      	movs	r2, #0
 800ff38:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	6a3a      	ldr	r2, [r7, #32]
 800ff3e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ff40:	4b3f      	ldr	r3, [pc, #252]	@ (8010040 <netif_add+0x19c>)
 800ff42:	781a      	ldrb	r2, [r3, #0]
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff4e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	687a      	ldr	r2, [r7, #4]
 800ff54:	68b9      	ldr	r1, [r7, #8]
 800ff56:	68f8      	ldr	r0, [r7, #12]
 800ff58:	f000 f914 	bl	8010184 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ff5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff5e:	68f8      	ldr	r0, [r7, #12]
 800ff60:	4798      	blx	r3
 800ff62:	4603      	mov	r3, r0
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d001      	beq.n	800ff6c <netif_add+0xc8>
    return NULL;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	e058      	b.n	801001e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ff72:	2bff      	cmp	r3, #255	@ 0xff
 800ff74:	d103      	bne.n	800ff7e <netif_add+0xda>
        netif->num = 0;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ff82:	4b30      	ldr	r3, [pc, #192]	@ (8010044 <netif_add+0x1a0>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	617b      	str	r3, [r7, #20]
 800ff88:	e02b      	b.n	800ffe2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ff8a:	697a      	ldr	r2, [r7, #20]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d106      	bne.n	800ffa0 <netif_add+0xfc>
 800ff92:	4b25      	ldr	r3, [pc, #148]	@ (8010028 <netif_add+0x184>)
 800ff94:	f240 128b 	movw	r2, #395	@ 0x18b
 800ff98:	492b      	ldr	r1, [pc, #172]	@ (8010048 <netif_add+0x1a4>)
 800ff9a:	4825      	ldr	r0, [pc, #148]	@ (8010030 <netif_add+0x18c>)
 800ff9c:	f007 fbca 	bl	8017734 <iprintf>
        num_netifs++;
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	2bff      	cmp	r3, #255	@ 0xff
 800ffaa:	dd06      	ble.n	800ffba <netif_add+0x116>
 800ffac:	4b1e      	ldr	r3, [pc, #120]	@ (8010028 <netif_add+0x184>)
 800ffae:	f240 128d 	movw	r2, #397	@ 0x18d
 800ffb2:	4926      	ldr	r1, [pc, #152]	@ (801004c <netif_add+0x1a8>)
 800ffb4:	481e      	ldr	r0, [pc, #120]	@ (8010030 <netif_add+0x18c>)
 800ffb6:	f007 fbbd 	bl	8017734 <iprintf>
        if (netif2->num == netif->num) {
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d108      	bne.n	800ffdc <netif_add+0x138>
          netif->num++;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ffd0:	3301      	adds	r3, #1
 800ffd2:	b2da      	uxtb	r2, r3
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800ffda:	e005      	b.n	800ffe8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	617b      	str	r3, [r7, #20]
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d1d0      	bne.n	800ff8a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d1be      	bne.n	800ff6c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fff4:	2bfe      	cmp	r3, #254	@ 0xfe
 800fff6:	d103      	bne.n	8010000 <netif_add+0x15c>
    netif_num = 0;
 800fff8:	4b11      	ldr	r3, [pc, #68]	@ (8010040 <netif_add+0x19c>)
 800fffa:	2200      	movs	r2, #0
 800fffc:	701a      	strb	r2, [r3, #0]
 800fffe:	e006      	b.n	801000e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010006:	3301      	adds	r3, #1
 8010008:	b2da      	uxtb	r2, r3
 801000a:	4b0d      	ldr	r3, [pc, #52]	@ (8010040 <netif_add+0x19c>)
 801000c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801000e:	4b0d      	ldr	r3, [pc, #52]	@ (8010044 <netif_add+0x1a0>)
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010016:	4a0b      	ldr	r2, [pc, #44]	@ (8010044 <netif_add+0x1a0>)
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801001c:	68fb      	ldr	r3, [r7, #12]
}
 801001e:	4618      	mov	r0, r3
 8010020:	3718      	adds	r7, #24
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}
 8010026:	bf00      	nop
 8010028:	08019644 	.word	0x08019644
 801002c:	08019708 	.word	0x08019708
 8010030:	080196c4 	.word	0x080196c4
 8010034:	08019724 	.word	0x08019724
 8010038:	0801b8b0 	.word	0x0801b8b0
 801003c:	08010467 	.word	0x08010467
 8010040:	24007ef4 	.word	0x24007ef4
 8010044:	24007eec 	.word	0x24007eec
 8010048:	08019748 	.word	0x08019748
 801004c:	0801975c 	.word	0x0801975c

08010050 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801005a:	6839      	ldr	r1, [r7, #0]
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f002 fc83 	bl	8012968 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010062:	6839      	ldr	r1, [r7, #0]
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f007 fa35 	bl	80174d4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801006a:	bf00      	nop
 801006c:	3708      	adds	r7, #8
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}
	...

08010074 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b086      	sub	sp, #24
 8010078:	af00      	add	r7, sp, #0
 801007a:	60f8      	str	r0, [r7, #12]
 801007c:	60b9      	str	r1, [r7, #8]
 801007e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d106      	bne.n	8010094 <netif_do_set_ipaddr+0x20>
 8010086:	4b1d      	ldr	r3, [pc, #116]	@ (80100fc <netif_do_set_ipaddr+0x88>)
 8010088:	f240 12cb 	movw	r2, #459	@ 0x1cb
 801008c:	491c      	ldr	r1, [pc, #112]	@ (8010100 <netif_do_set_ipaddr+0x8c>)
 801008e:	481d      	ldr	r0, [pc, #116]	@ (8010104 <netif_do_set_ipaddr+0x90>)
 8010090:	f007 fb50 	bl	8017734 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d106      	bne.n	80100a8 <netif_do_set_ipaddr+0x34>
 801009a:	4b18      	ldr	r3, [pc, #96]	@ (80100fc <netif_do_set_ipaddr+0x88>)
 801009c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80100a0:	4917      	ldr	r1, [pc, #92]	@ (8010100 <netif_do_set_ipaddr+0x8c>)
 80100a2:	4818      	ldr	r0, [pc, #96]	@ (8010104 <netif_do_set_ipaddr+0x90>)
 80100a4:	f007 fb46 	bl	8017734 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	681a      	ldr	r2, [r3, #0]
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	3304      	adds	r3, #4
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d01c      	beq.n	80100f0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	3304      	adds	r3, #4
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80100c6:	f107 0314 	add.w	r3, r7, #20
 80100ca:	4619      	mov	r1, r3
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f7ff ffbf 	bl	8010050 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d002      	beq.n	80100de <netif_do_set_ipaddr+0x6a>
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	e000      	b.n	80100e0 <netif_do_set_ipaddr+0x6c>
 80100de:	2300      	movs	r3, #0
 80100e0:	68fa      	ldr	r2, [r7, #12]
 80100e2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80100e4:	2101      	movs	r1, #1
 80100e6:	68f8      	ldr	r0, [r7, #12]
 80100e8:	f000 f8d2 	bl	8010290 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80100ec:	2301      	movs	r3, #1
 80100ee:	e000      	b.n	80100f2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80100f0:	2300      	movs	r3, #0
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3718      	adds	r7, #24
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	bf00      	nop
 80100fc:	08019644 	.word	0x08019644
 8010100:	0801978c 	.word	0x0801978c
 8010104:	080196c4 	.word	0x080196c4

08010108 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010108:	b480      	push	{r7}
 801010a:	b085      	sub	sp, #20
 801010c:	af00      	add	r7, sp, #0
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	60b9      	str	r1, [r7, #8]
 8010112:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	681a      	ldr	r2, [r3, #0]
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	3308      	adds	r3, #8
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	429a      	cmp	r2, r3
 8010120:	d00a      	beq.n	8010138 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d002      	beq.n	801012e <netif_do_set_netmask+0x26>
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	e000      	b.n	8010130 <netif_do_set_netmask+0x28>
 801012e:	2300      	movs	r3, #0
 8010130:	68fa      	ldr	r2, [r7, #12]
 8010132:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010134:	2301      	movs	r3, #1
 8010136:	e000      	b.n	801013a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010138:	2300      	movs	r3, #0
}
 801013a:	4618      	mov	r0, r3
 801013c:	3714      	adds	r7, #20
 801013e:	46bd      	mov	sp, r7
 8010140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010144:	4770      	bx	lr

08010146 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010146:	b480      	push	{r7}
 8010148:	b085      	sub	sp, #20
 801014a:	af00      	add	r7, sp, #0
 801014c:	60f8      	str	r0, [r7, #12]
 801014e:	60b9      	str	r1, [r7, #8]
 8010150:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	681a      	ldr	r2, [r3, #0]
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	330c      	adds	r3, #12
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	429a      	cmp	r2, r3
 801015e:	d00a      	beq.n	8010176 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d002      	beq.n	801016c <netif_do_set_gw+0x26>
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	e000      	b.n	801016e <netif_do_set_gw+0x28>
 801016c:	2300      	movs	r3, #0
 801016e:	68fa      	ldr	r2, [r7, #12]
 8010170:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010172:	2301      	movs	r3, #1
 8010174:	e000      	b.n	8010178 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010176:	2300      	movs	r3, #0
}
 8010178:	4618      	mov	r0, r3
 801017a:	3714      	adds	r7, #20
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b088      	sub	sp, #32
 8010188:	af00      	add	r7, sp, #0
 801018a:	60f8      	str	r0, [r7, #12]
 801018c:	60b9      	str	r1, [r7, #8]
 801018e:	607a      	str	r2, [r7, #4]
 8010190:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010192:	2300      	movs	r3, #0
 8010194:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010196:	2300      	movs	r3, #0
 8010198:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d101      	bne.n	80101a4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80101a0:	4b1c      	ldr	r3, [pc, #112]	@ (8010214 <netif_set_addr+0x90>)
 80101a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d101      	bne.n	80101ae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80101aa:	4b1a      	ldr	r3, [pc, #104]	@ (8010214 <netif_set_addr+0x90>)
 80101ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d101      	bne.n	80101b8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80101b4:	4b17      	ldr	r3, [pc, #92]	@ (8010214 <netif_set_addr+0x90>)
 80101b6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d003      	beq.n	80101c6 <netif_set_addr+0x42>
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d101      	bne.n	80101ca <netif_set_addr+0x46>
 80101c6:	2301      	movs	r3, #1
 80101c8:	e000      	b.n	80101cc <netif_set_addr+0x48>
 80101ca:	2300      	movs	r3, #0
 80101cc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d006      	beq.n	80101e2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80101d4:	f107 0310 	add.w	r3, r7, #16
 80101d8:	461a      	mov	r2, r3
 80101da:	68b9      	ldr	r1, [r7, #8]
 80101dc:	68f8      	ldr	r0, [r7, #12]
 80101de:	f7ff ff49 	bl	8010074 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80101e2:	69fa      	ldr	r2, [r7, #28]
 80101e4:	6879      	ldr	r1, [r7, #4]
 80101e6:	68f8      	ldr	r0, [r7, #12]
 80101e8:	f7ff ff8e 	bl	8010108 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80101ec:	69ba      	ldr	r2, [r7, #24]
 80101ee:	6839      	ldr	r1, [r7, #0]
 80101f0:	68f8      	ldr	r0, [r7, #12]
 80101f2:	f7ff ffa8 	bl	8010146 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d106      	bne.n	801020a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80101fc:	f107 0310 	add.w	r3, r7, #16
 8010200:	461a      	mov	r2, r3
 8010202:	68b9      	ldr	r1, [r7, #8]
 8010204:	68f8      	ldr	r0, [r7, #12]
 8010206:	f7ff ff35 	bl	8010074 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801020a:	bf00      	nop
 801020c:	3720      	adds	r7, #32
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}
 8010212:	bf00      	nop
 8010214:	0801b8b0 	.word	0x0801b8b0

08010218 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010218:	b480      	push	{r7}
 801021a:	b083      	sub	sp, #12
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010220:	4a04      	ldr	r2, [pc, #16]	@ (8010234 <netif_set_default+0x1c>)
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010226:	bf00      	nop
 8010228:	370c      	adds	r7, #12
 801022a:	46bd      	mov	sp, r7
 801022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010230:	4770      	bx	lr
 8010232:	bf00      	nop
 8010234:	24007ef0 	.word	0x24007ef0

08010238 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d107      	bne.n	8010256 <netif_set_up+0x1e>
 8010246:	4b0f      	ldr	r3, [pc, #60]	@ (8010284 <netif_set_up+0x4c>)
 8010248:	f44f 7254 	mov.w	r2, #848	@ 0x350
 801024c:	490e      	ldr	r1, [pc, #56]	@ (8010288 <netif_set_up+0x50>)
 801024e:	480f      	ldr	r0, [pc, #60]	@ (801028c <netif_set_up+0x54>)
 8010250:	f007 fa70 	bl	8017734 <iprintf>
 8010254:	e013      	b.n	801027e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801025c:	f003 0301 	and.w	r3, r3, #1
 8010260:	2b00      	cmp	r3, #0
 8010262:	d10c      	bne.n	801027e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801026a:	f043 0301 	orr.w	r3, r3, #1
 801026e:	b2da      	uxtb	r2, r3
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010276:	2103      	movs	r1, #3
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f000 f809 	bl	8010290 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801027e:	3708      	adds	r7, #8
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}
 8010284:	08019644 	.word	0x08019644
 8010288:	080197fc 	.word	0x080197fc
 801028c:	080196c4 	.word	0x080196c4

08010290 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	460b      	mov	r3, r1
 801029a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d106      	bne.n	80102b0 <netif_issue_reports+0x20>
 80102a2:	4b18      	ldr	r3, [pc, #96]	@ (8010304 <netif_issue_reports+0x74>)
 80102a4:	f240 326d 	movw	r2, #877	@ 0x36d
 80102a8:	4917      	ldr	r1, [pc, #92]	@ (8010308 <netif_issue_reports+0x78>)
 80102aa:	4818      	ldr	r0, [pc, #96]	@ (801030c <netif_issue_reports+0x7c>)
 80102ac:	f007 fa42 	bl	8017734 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80102b6:	f003 0304 	and.w	r3, r3, #4
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d01e      	beq.n	80102fc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80102c4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d017      	beq.n	80102fc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80102cc:	78fb      	ldrb	r3, [r7, #3]
 80102ce:	f003 0301 	and.w	r3, r3, #1
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d013      	beq.n	80102fe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	3304      	adds	r3, #4
 80102da:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d00e      	beq.n	80102fe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80102e6:	f003 0308 	and.w	r3, r3, #8
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d007      	beq.n	80102fe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	3304      	adds	r3, #4
 80102f2:	4619      	mov	r1, r3
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	f7fd fb8f 	bl	800da18 <etharp_request>
 80102fa:	e000      	b.n	80102fe <netif_issue_reports+0x6e>
    return;
 80102fc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80102fe:	3708      	adds	r7, #8
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}
 8010304:	08019644 	.word	0x08019644
 8010308:	08019818 	.word	0x08019818
 801030c:	080196c4 	.word	0x080196c4

08010310 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b082      	sub	sp, #8
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d107      	bne.n	801032e <netif_set_down+0x1e>
 801031e:	4b12      	ldr	r3, [pc, #72]	@ (8010368 <netif_set_down+0x58>)
 8010320:	f240 329b 	movw	r2, #923	@ 0x39b
 8010324:	4911      	ldr	r1, [pc, #68]	@ (801036c <netif_set_down+0x5c>)
 8010326:	4812      	ldr	r0, [pc, #72]	@ (8010370 <netif_set_down+0x60>)
 8010328:	f007 fa04 	bl	8017734 <iprintf>
 801032c:	e019      	b.n	8010362 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010334:	f003 0301 	and.w	r3, r3, #1
 8010338:	2b00      	cmp	r3, #0
 801033a:	d012      	beq.n	8010362 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010342:	f023 0301 	bic.w	r3, r3, #1
 8010346:	b2da      	uxtb	r2, r3
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010354:	f003 0308 	and.w	r3, r3, #8
 8010358:	2b00      	cmp	r3, #0
 801035a:	d002      	beq.n	8010362 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f7fc ff15 	bl	800d18c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010362:	3708      	adds	r7, #8
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}
 8010368:	08019644 	.word	0x08019644
 801036c:	0801983c 	.word	0x0801983c
 8010370:	080196c4 	.word	0x080196c4

08010374 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b082      	sub	sp, #8
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d107      	bne.n	8010392 <netif_set_link_up+0x1e>
 8010382:	4b15      	ldr	r3, [pc, #84]	@ (80103d8 <netif_set_link_up+0x64>)
 8010384:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8010388:	4914      	ldr	r1, [pc, #80]	@ (80103dc <netif_set_link_up+0x68>)
 801038a:	4815      	ldr	r0, [pc, #84]	@ (80103e0 <netif_set_link_up+0x6c>)
 801038c:	f007 f9d2 	bl	8017734 <iprintf>
 8010390:	e01e      	b.n	80103d0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010398:	f003 0304 	and.w	r3, r3, #4
 801039c:	2b00      	cmp	r3, #0
 801039e:	d117      	bne.n	80103d0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80103a6:	f043 0304 	orr.w	r3, r3, #4
 80103aa:	b2da      	uxtb	r2, r3
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f7fb f960 	bl	800b678 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80103b8:	2103      	movs	r1, #3
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f7ff ff68 	bl	8010290 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	69db      	ldr	r3, [r3, #28]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d003      	beq.n	80103d0 <netif_set_link_up+0x5c>
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	69db      	ldr	r3, [r3, #28]
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80103d0:	3708      	adds	r7, #8
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	08019644 	.word	0x08019644
 80103dc:	0801985c 	.word	0x0801985c
 80103e0:	080196c4 	.word	0x080196c4

080103e4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b082      	sub	sp, #8
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d107      	bne.n	8010402 <netif_set_link_down+0x1e>
 80103f2:	4b11      	ldr	r3, [pc, #68]	@ (8010438 <netif_set_link_down+0x54>)
 80103f4:	f240 4206 	movw	r2, #1030	@ 0x406
 80103f8:	4910      	ldr	r1, [pc, #64]	@ (801043c <netif_set_link_down+0x58>)
 80103fa:	4811      	ldr	r0, [pc, #68]	@ (8010440 <netif_set_link_down+0x5c>)
 80103fc:	f007 f99a 	bl	8017734 <iprintf>
 8010400:	e017      	b.n	8010432 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010408:	f003 0304 	and.w	r3, r3, #4
 801040c:	2b00      	cmp	r3, #0
 801040e:	d010      	beq.n	8010432 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010416:	f023 0304 	bic.w	r3, r3, #4
 801041a:	b2da      	uxtb	r2, r3
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	69db      	ldr	r3, [r3, #28]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d003      	beq.n	8010432 <netif_set_link_down+0x4e>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	69db      	ldr	r3, [r3, #28]
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010432:	3708      	adds	r7, #8
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}
 8010438:	08019644 	.word	0x08019644
 801043c:	08019880 	.word	0x08019880
 8010440:	080196c4 	.word	0x080196c4

08010444 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010444:	b480      	push	{r7}
 8010446:	b083      	sub	sp, #12
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d002      	beq.n	801045a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	683a      	ldr	r2, [r7, #0]
 8010458:	61da      	str	r2, [r3, #28]
  }
}
 801045a:	bf00      	nop
 801045c:	370c      	adds	r7, #12
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr

08010466 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010466:	b480      	push	{r7}
 8010468:	b085      	sub	sp, #20
 801046a:	af00      	add	r7, sp, #0
 801046c:	60f8      	str	r0, [r7, #12]
 801046e:	60b9      	str	r1, [r7, #8]
 8010470:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010472:	f06f 030b 	mvn.w	r3, #11
}
 8010476:	4618      	mov	r0, r3
 8010478:	3714      	adds	r7, #20
 801047a:	46bd      	mov	sp, r7
 801047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010480:	4770      	bx	lr
	...

08010484 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010484:	b480      	push	{r7}
 8010486:	b085      	sub	sp, #20
 8010488:	af00      	add	r7, sp, #0
 801048a:	4603      	mov	r3, r0
 801048c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801048e:	79fb      	ldrb	r3, [r7, #7]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d013      	beq.n	80104bc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010494:	4b0d      	ldr	r3, [pc, #52]	@ (80104cc <netif_get_by_index+0x48>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	60fb      	str	r3, [r7, #12]
 801049a:	e00c      	b.n	80104b6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80104a2:	3301      	adds	r3, #1
 80104a4:	b2db      	uxtb	r3, r3
 80104a6:	79fa      	ldrb	r2, [r7, #7]
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d101      	bne.n	80104b0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	e006      	b.n	80104be <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	60fb      	str	r3, [r7, #12]
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d1ef      	bne.n	801049c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80104bc:	2300      	movs	r3, #0
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3714      	adds	r7, #20
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr
 80104ca:	bf00      	nop
 80104cc:	24007eec 	.word	0x24007eec

080104d0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80104d6:	f000 fedf 	bl	8011298 <sys_arch_protect>
 80104da:	6038      	str	r0, [r7, #0]
 80104dc:	4b0d      	ldr	r3, [pc, #52]	@ (8010514 <pbuf_free_ooseq+0x44>)
 80104de:	2200      	movs	r2, #0
 80104e0:	701a      	strb	r2, [r3, #0]
 80104e2:	6838      	ldr	r0, [r7, #0]
 80104e4:	f000 fee6 	bl	80112b4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80104e8:	4b0b      	ldr	r3, [pc, #44]	@ (8010518 <pbuf_free_ooseq+0x48>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	607b      	str	r3, [r7, #4]
 80104ee:	e00a      	b.n	8010506 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d003      	beq.n	8010500 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f002 fa73 	bl	80129e4 <tcp_free_ooseq>
      return;
 80104fe:	e005      	b.n	801050c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	68db      	ldr	r3, [r3, #12]
 8010504:	607b      	str	r3, [r7, #4]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d1f1      	bne.n	80104f0 <pbuf_free_ooseq+0x20>
    }
  }
}
 801050c:	3708      	adds	r7, #8
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	24007ef5 	.word	0x24007ef5
 8010518:	24007f0c 	.word	0x24007f0c

0801051c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010524:	f7ff ffd4 	bl	80104d0 <pbuf_free_ooseq>
}
 8010528:	bf00      	nop
 801052a:	3708      	adds	r7, #8
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}

08010530 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b082      	sub	sp, #8
 8010534:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010536:	f000 feaf 	bl	8011298 <sys_arch_protect>
 801053a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801053c:	4b0f      	ldr	r3, [pc, #60]	@ (801057c <pbuf_pool_is_empty+0x4c>)
 801053e:	781b      	ldrb	r3, [r3, #0]
 8010540:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010542:	4b0e      	ldr	r3, [pc, #56]	@ (801057c <pbuf_pool_is_empty+0x4c>)
 8010544:	2201      	movs	r2, #1
 8010546:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f000 feb3 	bl	80112b4 <sys_arch_unprotect>

  if (!queued) {
 801054e:	78fb      	ldrb	r3, [r7, #3]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d10f      	bne.n	8010574 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010554:	2100      	movs	r1, #0
 8010556:	480a      	ldr	r0, [pc, #40]	@ (8010580 <pbuf_pool_is_empty+0x50>)
 8010558:	f006 f908 	bl	801676c <tcpip_try_callback>
 801055c:	4603      	mov	r3, r0
 801055e:	2b00      	cmp	r3, #0
 8010560:	d008      	beq.n	8010574 <pbuf_pool_is_empty+0x44>
 8010562:	f000 fe99 	bl	8011298 <sys_arch_protect>
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	4b04      	ldr	r3, [pc, #16]	@ (801057c <pbuf_pool_is_empty+0x4c>)
 801056a:	2200      	movs	r2, #0
 801056c:	701a      	strb	r2, [r3, #0]
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	f000 fea0 	bl	80112b4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010574:	bf00      	nop
 8010576:	3708      	adds	r7, #8
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}
 801057c:	24007ef5 	.word	0x24007ef5
 8010580:	0801051d 	.word	0x0801051d

08010584 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010584:	b480      	push	{r7}
 8010586:	b085      	sub	sp, #20
 8010588:	af00      	add	r7, sp, #0
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	60b9      	str	r1, [r7, #8]
 801058e:	4611      	mov	r1, r2
 8010590:	461a      	mov	r2, r3
 8010592:	460b      	mov	r3, r1
 8010594:	80fb      	strh	r3, [r7, #6]
 8010596:	4613      	mov	r3, r2
 8010598:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	2200      	movs	r2, #0
 801059e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	68ba      	ldr	r2, [r7, #8]
 80105a4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	88fa      	ldrh	r2, [r7, #6]
 80105aa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	88ba      	ldrh	r2, [r7, #4]
 80105b0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80105b2:	8b3b      	ldrh	r3, [r7, #24]
 80105b4:	b2da      	uxtb	r2, r3
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	7f3a      	ldrb	r2, [r7, #28]
 80105be:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	2201      	movs	r2, #1
 80105c4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2200      	movs	r2, #0
 80105ca:	73da      	strb	r2, [r3, #15]
}
 80105cc:	bf00      	nop
 80105ce:	3714      	adds	r7, #20
 80105d0:	46bd      	mov	sp, r7
 80105d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d6:	4770      	bx	lr

080105d8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b08c      	sub	sp, #48	@ 0x30
 80105dc:	af02      	add	r7, sp, #8
 80105de:	4603      	mov	r3, r0
 80105e0:	71fb      	strb	r3, [r7, #7]
 80105e2:	460b      	mov	r3, r1
 80105e4:	80bb      	strh	r3, [r7, #4]
 80105e6:	4613      	mov	r3, r2
 80105e8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80105ea:	79fb      	ldrb	r3, [r7, #7]
 80105ec:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80105ee:	887b      	ldrh	r3, [r7, #2]
 80105f0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80105f4:	d07f      	beq.n	80106f6 <pbuf_alloc+0x11e>
 80105f6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80105fa:	f300 80c7 	bgt.w	801078c <pbuf_alloc+0x1b4>
 80105fe:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8010602:	d010      	beq.n	8010626 <pbuf_alloc+0x4e>
 8010604:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8010608:	f300 80c0 	bgt.w	801078c <pbuf_alloc+0x1b4>
 801060c:	2b01      	cmp	r3, #1
 801060e:	d002      	beq.n	8010616 <pbuf_alloc+0x3e>
 8010610:	2b41      	cmp	r3, #65	@ 0x41
 8010612:	f040 80bb 	bne.w	801078c <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010616:	887a      	ldrh	r2, [r7, #2]
 8010618:	88bb      	ldrh	r3, [r7, #4]
 801061a:	4619      	mov	r1, r3
 801061c:	2000      	movs	r0, #0
 801061e:	f000 f8d1 	bl	80107c4 <pbuf_alloc_reference>
 8010622:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8010624:	e0bc      	b.n	80107a0 <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010626:	2300      	movs	r3, #0
 8010628:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 801062a:	2300      	movs	r3, #0
 801062c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801062e:	88bb      	ldrh	r3, [r7, #4]
 8010630:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010632:	200c      	movs	r0, #12
 8010634:	f7ff fb8e 	bl	800fd54 <memp_malloc>
 8010638:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d109      	bne.n	8010654 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010640:	f7ff ff76 	bl	8010530 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010646:	2b00      	cmp	r3, #0
 8010648:	d002      	beq.n	8010650 <pbuf_alloc+0x78>
            pbuf_free(p);
 801064a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801064c:	f000 faa6 	bl	8010b9c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010650:	2300      	movs	r3, #0
 8010652:	e0a6      	b.n	80107a2 <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010654:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010656:	3303      	adds	r3, #3
 8010658:	b29b      	uxth	r3, r3
 801065a:	f023 0303 	bic.w	r3, r3, #3
 801065e:	b29b      	uxth	r3, r3
 8010660:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8010664:	b29b      	uxth	r3, r3
 8010666:	8b7a      	ldrh	r2, [r7, #26]
 8010668:	4293      	cmp	r3, r2
 801066a:	bf28      	it	cs
 801066c:	4613      	movcs	r3, r2
 801066e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010670:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010672:	3310      	adds	r3, #16
 8010674:	693a      	ldr	r2, [r7, #16]
 8010676:	4413      	add	r3, r2
 8010678:	3303      	adds	r3, #3
 801067a:	f023 0303 	bic.w	r3, r3, #3
 801067e:	4618      	mov	r0, r3
 8010680:	89f9      	ldrh	r1, [r7, #14]
 8010682:	8b7a      	ldrh	r2, [r7, #26]
 8010684:	2300      	movs	r3, #0
 8010686:	9301      	str	r3, [sp, #4]
 8010688:	887b      	ldrh	r3, [r7, #2]
 801068a:	9300      	str	r3, [sp, #0]
 801068c:	460b      	mov	r3, r1
 801068e:	4601      	mov	r1, r0
 8010690:	6938      	ldr	r0, [r7, #16]
 8010692:	f7ff ff77 	bl	8010584 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	685b      	ldr	r3, [r3, #4]
 801069a:	f003 0303 	and.w	r3, r3, #3
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d006      	beq.n	80106b0 <pbuf_alloc+0xd8>
 80106a2:	4b42      	ldr	r3, [pc, #264]	@ (80107ac <pbuf_alloc+0x1d4>)
 80106a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80106a8:	4941      	ldr	r1, [pc, #260]	@ (80107b0 <pbuf_alloc+0x1d8>)
 80106aa:	4842      	ldr	r0, [pc, #264]	@ (80107b4 <pbuf_alloc+0x1dc>)
 80106ac:	f007 f842 	bl	8017734 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80106b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80106b2:	3303      	adds	r3, #3
 80106b4:	f023 0303 	bic.w	r3, r3, #3
 80106b8:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80106bc:	d106      	bne.n	80106cc <pbuf_alloc+0xf4>
 80106be:	4b3b      	ldr	r3, [pc, #236]	@ (80107ac <pbuf_alloc+0x1d4>)
 80106c0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80106c4:	493c      	ldr	r1, [pc, #240]	@ (80107b8 <pbuf_alloc+0x1e0>)
 80106c6:	483b      	ldr	r0, [pc, #236]	@ (80107b4 <pbuf_alloc+0x1dc>)
 80106c8:	f007 f834 	bl	8017734 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80106cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d102      	bne.n	80106d8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80106d6:	e002      	b.n	80106de <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80106d8:	69fb      	ldr	r3, [r7, #28]
 80106da:	693a      	ldr	r2, [r7, #16]
 80106dc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80106e2:	8b7a      	ldrh	r2, [r7, #26]
 80106e4:	89fb      	ldrh	r3, [r7, #14]
 80106e6:	1ad3      	subs	r3, r2, r3
 80106e8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80106ea:	2300      	movs	r3, #0
 80106ec:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80106ee:	8b7b      	ldrh	r3, [r7, #26]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d19e      	bne.n	8010632 <pbuf_alloc+0x5a>
      break;
 80106f4:	e054      	b.n	80107a0 <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80106f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80106f8:	3303      	adds	r3, #3
 80106fa:	b29b      	uxth	r3, r3
 80106fc:	f023 0303 	bic.w	r3, r3, #3
 8010700:	b29a      	uxth	r2, r3
 8010702:	88bb      	ldrh	r3, [r7, #4]
 8010704:	3303      	adds	r3, #3
 8010706:	b29b      	uxth	r3, r3
 8010708:	f023 0303 	bic.w	r3, r3, #3
 801070c:	b29b      	uxth	r3, r3
 801070e:	4413      	add	r3, r2
 8010710:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010712:	8b3b      	ldrh	r3, [r7, #24]
 8010714:	3310      	adds	r3, #16
 8010716:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010718:	8b3a      	ldrh	r2, [r7, #24]
 801071a:	88bb      	ldrh	r3, [r7, #4]
 801071c:	3303      	adds	r3, #3
 801071e:	f023 0303 	bic.w	r3, r3, #3
 8010722:	429a      	cmp	r2, r3
 8010724:	d306      	bcc.n	8010734 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010726:	88bb      	ldrh	r3, [r7, #4]
 8010728:	3303      	adds	r3, #3
 801072a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801072e:	697a      	ldr	r2, [r7, #20]
 8010730:	429a      	cmp	r2, r3
 8010732:	d201      	bcs.n	8010738 <pbuf_alloc+0x160>
        return NULL;
 8010734:	2300      	movs	r3, #0
 8010736:	e034      	b.n	80107a2 <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010738:	6978      	ldr	r0, [r7, #20]
 801073a:	f7ff f96f 	bl	800fa1c <mem_malloc>
 801073e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8010740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010742:	2b00      	cmp	r3, #0
 8010744:	d101      	bne.n	801074a <pbuf_alloc+0x172>
        return NULL;
 8010746:	2300      	movs	r3, #0
 8010748:	e02b      	b.n	80107a2 <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801074a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801074c:	3310      	adds	r3, #16
 801074e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010750:	4413      	add	r3, r2
 8010752:	3303      	adds	r3, #3
 8010754:	f023 0303 	bic.w	r3, r3, #3
 8010758:	4618      	mov	r0, r3
 801075a:	88b9      	ldrh	r1, [r7, #4]
 801075c:	88ba      	ldrh	r2, [r7, #4]
 801075e:	2300      	movs	r3, #0
 8010760:	9301      	str	r3, [sp, #4]
 8010762:	887b      	ldrh	r3, [r7, #2]
 8010764:	9300      	str	r3, [sp, #0]
 8010766:	460b      	mov	r3, r1
 8010768:	4601      	mov	r1, r0
 801076a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801076c:	f7ff ff0a 	bl	8010584 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	f003 0303 	and.w	r3, r3, #3
 8010778:	2b00      	cmp	r3, #0
 801077a:	d010      	beq.n	801079e <pbuf_alloc+0x1c6>
 801077c:	4b0b      	ldr	r3, [pc, #44]	@ (80107ac <pbuf_alloc+0x1d4>)
 801077e:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8010782:	490e      	ldr	r1, [pc, #56]	@ (80107bc <pbuf_alloc+0x1e4>)
 8010784:	480b      	ldr	r0, [pc, #44]	@ (80107b4 <pbuf_alloc+0x1dc>)
 8010786:	f006 ffd5 	bl	8017734 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801078a:	e008      	b.n	801079e <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801078c:	4b07      	ldr	r3, [pc, #28]	@ (80107ac <pbuf_alloc+0x1d4>)
 801078e:	f240 1227 	movw	r2, #295	@ 0x127
 8010792:	490b      	ldr	r1, [pc, #44]	@ (80107c0 <pbuf_alloc+0x1e8>)
 8010794:	4807      	ldr	r0, [pc, #28]	@ (80107b4 <pbuf_alloc+0x1dc>)
 8010796:	f006 ffcd 	bl	8017734 <iprintf>
      return NULL;
 801079a:	2300      	movs	r3, #0
 801079c:	e001      	b.n	80107a2 <pbuf_alloc+0x1ca>
      break;
 801079e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80107a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	3728      	adds	r7, #40	@ 0x28
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}
 80107aa:	bf00      	nop
 80107ac:	080198a4 	.word	0x080198a4
 80107b0:	08019908 	.word	0x08019908
 80107b4:	08019938 	.word	0x08019938
 80107b8:	08019960 	.word	0x08019960
 80107bc:	08019994 	.word	0x08019994
 80107c0:	080199c0 	.word	0x080199c0

080107c4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b086      	sub	sp, #24
 80107c8:	af02      	add	r7, sp, #8
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	460b      	mov	r3, r1
 80107ce:	807b      	strh	r3, [r7, #2]
 80107d0:	4613      	mov	r3, r2
 80107d2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80107d4:	883b      	ldrh	r3, [r7, #0]
 80107d6:	2b41      	cmp	r3, #65	@ 0x41
 80107d8:	d009      	beq.n	80107ee <pbuf_alloc_reference+0x2a>
 80107da:	883b      	ldrh	r3, [r7, #0]
 80107dc:	2b01      	cmp	r3, #1
 80107de:	d006      	beq.n	80107ee <pbuf_alloc_reference+0x2a>
 80107e0:	4b0f      	ldr	r3, [pc, #60]	@ (8010820 <pbuf_alloc_reference+0x5c>)
 80107e2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80107e6:	490f      	ldr	r1, [pc, #60]	@ (8010824 <pbuf_alloc_reference+0x60>)
 80107e8:	480f      	ldr	r0, [pc, #60]	@ (8010828 <pbuf_alloc_reference+0x64>)
 80107ea:	f006 ffa3 	bl	8017734 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80107ee:	200b      	movs	r0, #11
 80107f0:	f7ff fab0 	bl	800fd54 <memp_malloc>
 80107f4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d101      	bne.n	8010800 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80107fc:	2300      	movs	r3, #0
 80107fe:	e00b      	b.n	8010818 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010800:	8879      	ldrh	r1, [r7, #2]
 8010802:	887a      	ldrh	r2, [r7, #2]
 8010804:	2300      	movs	r3, #0
 8010806:	9301      	str	r3, [sp, #4]
 8010808:	883b      	ldrh	r3, [r7, #0]
 801080a:	9300      	str	r3, [sp, #0]
 801080c:	460b      	mov	r3, r1
 801080e:	6879      	ldr	r1, [r7, #4]
 8010810:	68f8      	ldr	r0, [r7, #12]
 8010812:	f7ff feb7 	bl	8010584 <pbuf_init_alloced_pbuf>
  return p;
 8010816:	68fb      	ldr	r3, [r7, #12]
}
 8010818:	4618      	mov	r0, r3
 801081a:	3710      	adds	r7, #16
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}
 8010820:	080198a4 	.word	0x080198a4
 8010824:	080199dc 	.word	0x080199dc
 8010828:	08019938 	.word	0x08019938

0801082c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b088      	sub	sp, #32
 8010830:	af02      	add	r7, sp, #8
 8010832:	607b      	str	r3, [r7, #4]
 8010834:	4603      	mov	r3, r0
 8010836:	73fb      	strb	r3, [r7, #15]
 8010838:	460b      	mov	r3, r1
 801083a:	81bb      	strh	r3, [r7, #12]
 801083c:	4613      	mov	r3, r2
 801083e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010840:	7bfb      	ldrb	r3, [r7, #15]
 8010842:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010844:	8a7b      	ldrh	r3, [r7, #18]
 8010846:	3303      	adds	r3, #3
 8010848:	f023 0203 	bic.w	r2, r3, #3
 801084c:	89bb      	ldrh	r3, [r7, #12]
 801084e:	441a      	add	r2, r3
 8010850:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010852:	429a      	cmp	r2, r3
 8010854:	d901      	bls.n	801085a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010856:	2300      	movs	r3, #0
 8010858:	e018      	b.n	801088c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801085a:	6a3b      	ldr	r3, [r7, #32]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d007      	beq.n	8010870 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010860:	8a7b      	ldrh	r3, [r7, #18]
 8010862:	3303      	adds	r3, #3
 8010864:	f023 0303 	bic.w	r3, r3, #3
 8010868:	6a3a      	ldr	r2, [r7, #32]
 801086a:	4413      	add	r3, r2
 801086c:	617b      	str	r3, [r7, #20]
 801086e:	e001      	b.n	8010874 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010870:	2300      	movs	r3, #0
 8010872:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	89b9      	ldrh	r1, [r7, #12]
 8010878:	89ba      	ldrh	r2, [r7, #12]
 801087a:	2302      	movs	r3, #2
 801087c:	9301      	str	r3, [sp, #4]
 801087e:	897b      	ldrh	r3, [r7, #10]
 8010880:	9300      	str	r3, [sp, #0]
 8010882:	460b      	mov	r3, r1
 8010884:	6979      	ldr	r1, [r7, #20]
 8010886:	f7ff fe7d 	bl	8010584 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801088a:	687b      	ldr	r3, [r7, #4]
}
 801088c:	4618      	mov	r0, r3
 801088e:	3718      	adds	r7, #24
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}

08010894 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b084      	sub	sp, #16
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	460b      	mov	r3, r1
 801089e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d106      	bne.n	80108b4 <pbuf_realloc+0x20>
 80108a6:	4b39      	ldr	r3, [pc, #228]	@ (801098c <pbuf_realloc+0xf8>)
 80108a8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80108ac:	4938      	ldr	r1, [pc, #224]	@ (8010990 <pbuf_realloc+0xfc>)
 80108ae:	4839      	ldr	r0, [pc, #228]	@ (8010994 <pbuf_realloc+0x100>)
 80108b0:	f006 ff40 	bl	8017734 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	891b      	ldrh	r3, [r3, #8]
 80108b8:	887a      	ldrh	r2, [r7, #2]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d261      	bcs.n	8010982 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	891a      	ldrh	r2, [r3, #8]
 80108c2:	887b      	ldrh	r3, [r7, #2]
 80108c4:	1ad3      	subs	r3, r2, r3
 80108c6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80108c8:	887b      	ldrh	r3, [r7, #2]
 80108ca:	817b      	strh	r3, [r7, #10]
  q = p;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80108d0:	e018      	b.n	8010904 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	895b      	ldrh	r3, [r3, #10]
 80108d6:	897a      	ldrh	r2, [r7, #10]
 80108d8:	1ad3      	subs	r3, r2, r3
 80108da:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	891a      	ldrh	r2, [r3, #8]
 80108e0:	893b      	ldrh	r3, [r7, #8]
 80108e2:	1ad3      	subs	r3, r2, r3
 80108e4:	b29a      	uxth	r2, r3
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d106      	bne.n	8010904 <pbuf_realloc+0x70>
 80108f6:	4b25      	ldr	r3, [pc, #148]	@ (801098c <pbuf_realloc+0xf8>)
 80108f8:	f240 12af 	movw	r2, #431	@ 0x1af
 80108fc:	4926      	ldr	r1, [pc, #152]	@ (8010998 <pbuf_realloc+0x104>)
 80108fe:	4825      	ldr	r0, [pc, #148]	@ (8010994 <pbuf_realloc+0x100>)
 8010900:	f006 ff18 	bl	8017734 <iprintf>
  while (rem_len > q->len) {
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	895b      	ldrh	r3, [r3, #10]
 8010908:	897a      	ldrh	r2, [r7, #10]
 801090a:	429a      	cmp	r2, r3
 801090c:	d8e1      	bhi.n	80108d2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	7b1b      	ldrb	r3, [r3, #12]
 8010912:	f003 030f 	and.w	r3, r3, #15
 8010916:	2b00      	cmp	r3, #0
 8010918:	d11f      	bne.n	801095a <pbuf_realloc+0xc6>
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	895b      	ldrh	r3, [r3, #10]
 801091e:	897a      	ldrh	r2, [r7, #10]
 8010920:	429a      	cmp	r2, r3
 8010922:	d01a      	beq.n	801095a <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	7b5b      	ldrb	r3, [r3, #13]
 8010928:	f003 0302 	and.w	r3, r3, #2
 801092c:	2b00      	cmp	r3, #0
 801092e:	d114      	bne.n	801095a <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	685a      	ldr	r2, [r3, #4]
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	1ad2      	subs	r2, r2, r3
 8010938:	897b      	ldrh	r3, [r7, #10]
 801093a:	4413      	add	r3, r2
 801093c:	4619      	mov	r1, r3
 801093e:	68f8      	ldr	r0, [r7, #12]
 8010940:	f7fe ff6a 	bl	800f818 <mem_trim>
 8010944:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d106      	bne.n	801095a <pbuf_realloc+0xc6>
 801094c:	4b0f      	ldr	r3, [pc, #60]	@ (801098c <pbuf_realloc+0xf8>)
 801094e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8010952:	4912      	ldr	r1, [pc, #72]	@ (801099c <pbuf_realloc+0x108>)
 8010954:	480f      	ldr	r0, [pc, #60]	@ (8010994 <pbuf_realloc+0x100>)
 8010956:	f006 feed 	bl	8017734 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	897a      	ldrh	r2, [r7, #10]
 801095e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	895a      	ldrh	r2, [r3, #10]
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d004      	beq.n	801097a <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	4618      	mov	r0, r3
 8010976:	f000 f911 	bl	8010b9c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2200      	movs	r2, #0
 801097e:	601a      	str	r2, [r3, #0]
 8010980:	e000      	b.n	8010984 <pbuf_realloc+0xf0>
    return;
 8010982:	bf00      	nop

}
 8010984:	3710      	adds	r7, #16
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
 801098a:	bf00      	nop
 801098c:	080198a4 	.word	0x080198a4
 8010990:	080199f0 	.word	0x080199f0
 8010994:	08019938 	.word	0x08019938
 8010998:	08019a08 	.word	0x08019a08
 801099c:	08019a20 	.word	0x08019a20

080109a0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b086      	sub	sp, #24
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	60f8      	str	r0, [r7, #12]
 80109a8:	60b9      	str	r1, [r7, #8]
 80109aa:	4613      	mov	r3, r2
 80109ac:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d106      	bne.n	80109c2 <pbuf_add_header_impl+0x22>
 80109b4:	4b2b      	ldr	r3, [pc, #172]	@ (8010a64 <pbuf_add_header_impl+0xc4>)
 80109b6:	f240 12df 	movw	r2, #479	@ 0x1df
 80109ba:	492b      	ldr	r1, [pc, #172]	@ (8010a68 <pbuf_add_header_impl+0xc8>)
 80109bc:	482b      	ldr	r0, [pc, #172]	@ (8010a6c <pbuf_add_header_impl+0xcc>)
 80109be:	f006 feb9 	bl	8017734 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d003      	beq.n	80109d0 <pbuf_add_header_impl+0x30>
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80109ce:	d301      	bcc.n	80109d4 <pbuf_add_header_impl+0x34>
    return 1;
 80109d0:	2301      	movs	r3, #1
 80109d2:	e043      	b.n	8010a5c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d101      	bne.n	80109de <pbuf_add_header_impl+0x3e>
    return 0;
 80109da:	2300      	movs	r3, #0
 80109dc:	e03e      	b.n	8010a5c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	891a      	ldrh	r2, [r3, #8]
 80109e6:	8a7b      	ldrh	r3, [r7, #18]
 80109e8:	4413      	add	r3, r2
 80109ea:	b29b      	uxth	r3, r3
 80109ec:	8a7a      	ldrh	r2, [r7, #18]
 80109ee:	429a      	cmp	r2, r3
 80109f0:	d901      	bls.n	80109f6 <pbuf_add_header_impl+0x56>
    return 1;
 80109f2:	2301      	movs	r3, #1
 80109f4:	e032      	b.n	8010a5c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	7b1b      	ldrb	r3, [r3, #12]
 80109fa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80109fc:	8a3b      	ldrh	r3, [r7, #16]
 80109fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d00c      	beq.n	8010a20 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	685a      	ldr	r2, [r3, #4]
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	425b      	negs	r3, r3
 8010a0e:	4413      	add	r3, r2
 8010a10:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	3310      	adds	r3, #16
 8010a16:	697a      	ldr	r2, [r7, #20]
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d20d      	bcs.n	8010a38 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	e01d      	b.n	8010a5c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010a20:	79fb      	ldrb	r3, [r7, #7]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d006      	beq.n	8010a34 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	685a      	ldr	r2, [r3, #4]
 8010a2a:	68bb      	ldr	r3, [r7, #8]
 8010a2c:	425b      	negs	r3, r3
 8010a2e:	4413      	add	r3, r2
 8010a30:	617b      	str	r3, [r7, #20]
 8010a32:	e001      	b.n	8010a38 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010a34:	2301      	movs	r3, #1
 8010a36:	e011      	b.n	8010a5c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	697a      	ldr	r2, [r7, #20]
 8010a3c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	895a      	ldrh	r2, [r3, #10]
 8010a42:	8a7b      	ldrh	r3, [r7, #18]
 8010a44:	4413      	add	r3, r2
 8010a46:	b29a      	uxth	r2, r3
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	891a      	ldrh	r2, [r3, #8]
 8010a50:	8a7b      	ldrh	r3, [r7, #18]
 8010a52:	4413      	add	r3, r2
 8010a54:	b29a      	uxth	r2, r3
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	811a      	strh	r2, [r3, #8]


  return 0;
 8010a5a:	2300      	movs	r3, #0
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3718      	adds	r7, #24
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}
 8010a64:	080198a4 	.word	0x080198a4
 8010a68:	08019a3c 	.word	0x08019a3c
 8010a6c:	08019938 	.word	0x08019938

08010a70 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	6839      	ldr	r1, [r7, #0]
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f7ff ff8e 	bl	80109a0 <pbuf_add_header_impl>
 8010a84:	4603      	mov	r3, r0
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3708      	adds	r7, #8
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}
	...

08010a90 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b084      	sub	sp, #16
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d106      	bne.n	8010aae <pbuf_remove_header+0x1e>
 8010aa0:	4b20      	ldr	r3, [pc, #128]	@ (8010b24 <pbuf_remove_header+0x94>)
 8010aa2:	f240 224b 	movw	r2, #587	@ 0x24b
 8010aa6:	4920      	ldr	r1, [pc, #128]	@ (8010b28 <pbuf_remove_header+0x98>)
 8010aa8:	4820      	ldr	r0, [pc, #128]	@ (8010b2c <pbuf_remove_header+0x9c>)
 8010aaa:	f006 fe43 	bl	8017734 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d003      	beq.n	8010abc <pbuf_remove_header+0x2c>
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010aba:	d301      	bcc.n	8010ac0 <pbuf_remove_header+0x30>
    return 1;
 8010abc:	2301      	movs	r3, #1
 8010abe:	e02c      	b.n	8010b1a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d101      	bne.n	8010aca <pbuf_remove_header+0x3a>
    return 0;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	e027      	b.n	8010b1a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	895b      	ldrh	r3, [r3, #10]
 8010ad2:	89fa      	ldrh	r2, [r7, #14]
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d908      	bls.n	8010aea <pbuf_remove_header+0x5a>
 8010ad8:	4b12      	ldr	r3, [pc, #72]	@ (8010b24 <pbuf_remove_header+0x94>)
 8010ada:	f240 2255 	movw	r2, #597	@ 0x255
 8010ade:	4914      	ldr	r1, [pc, #80]	@ (8010b30 <pbuf_remove_header+0xa0>)
 8010ae0:	4812      	ldr	r0, [pc, #72]	@ (8010b2c <pbuf_remove_header+0x9c>)
 8010ae2:	f006 fe27 	bl	8017734 <iprintf>
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	e017      	b.n	8010b1a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	685b      	ldr	r3, [r3, #4]
 8010aee:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	685a      	ldr	r2, [r3, #4]
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	441a      	add	r2, r3
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	895a      	ldrh	r2, [r3, #10]
 8010b00:	89fb      	ldrh	r3, [r7, #14]
 8010b02:	1ad3      	subs	r3, r2, r3
 8010b04:	b29a      	uxth	r2, r3
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	891a      	ldrh	r2, [r3, #8]
 8010b0e:	89fb      	ldrh	r3, [r7, #14]
 8010b10:	1ad3      	subs	r3, r2, r3
 8010b12:	b29a      	uxth	r2, r3
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010b18:	2300      	movs	r3, #0
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3710      	adds	r7, #16
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	080198a4 	.word	0x080198a4
 8010b28:	08019a3c 	.word	0x08019a3c
 8010b2c:	08019938 	.word	0x08019938
 8010b30:	08019a48 	.word	0x08019a48

08010b34 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b082      	sub	sp, #8
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
 8010b3c:	460b      	mov	r3, r1
 8010b3e:	807b      	strh	r3, [r7, #2]
 8010b40:	4613      	mov	r3, r2
 8010b42:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010b44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	da08      	bge.n	8010b5e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010b4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010b50:	425b      	negs	r3, r3
 8010b52:	4619      	mov	r1, r3
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f7ff ff9b 	bl	8010a90 <pbuf_remove_header>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	e007      	b.n	8010b6e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010b5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010b62:	787a      	ldrb	r2, [r7, #1]
 8010b64:	4619      	mov	r1, r3
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f7ff ff1a 	bl	80109a0 <pbuf_add_header_impl>
 8010b6c:	4603      	mov	r3, r0
  }
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3708      	adds	r7, #8
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}

08010b76 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010b76:	b580      	push	{r7, lr}
 8010b78:	b082      	sub	sp, #8
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	6078      	str	r0, [r7, #4]
 8010b7e:	460b      	mov	r3, r1
 8010b80:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010b82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010b86:	2201      	movs	r2, #1
 8010b88:	4619      	mov	r1, r3
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f7ff ffd2 	bl	8010b34 <pbuf_header_impl>
 8010b90:	4603      	mov	r3, r0
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3708      	adds	r7, #8
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}
	...

08010b9c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b088      	sub	sp, #32
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d10b      	bne.n	8010bc2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d106      	bne.n	8010bbe <pbuf_free+0x22>
 8010bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8010ca0 <pbuf_free+0x104>)
 8010bb2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8010bb6:	493b      	ldr	r1, [pc, #236]	@ (8010ca4 <pbuf_free+0x108>)
 8010bb8:	483b      	ldr	r0, [pc, #236]	@ (8010ca8 <pbuf_free+0x10c>)
 8010bba:	f006 fdbb 	bl	8017734 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	e069      	b.n	8010c96 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010bc6:	e062      	b.n	8010c8e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010bc8:	f000 fb66 	bl	8011298 <sys_arch_protect>
 8010bcc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	7b9b      	ldrb	r3, [r3, #14]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d106      	bne.n	8010be4 <pbuf_free+0x48>
 8010bd6:	4b32      	ldr	r3, [pc, #200]	@ (8010ca0 <pbuf_free+0x104>)
 8010bd8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8010bdc:	4933      	ldr	r1, [pc, #204]	@ (8010cac <pbuf_free+0x110>)
 8010bde:	4832      	ldr	r0, [pc, #200]	@ (8010ca8 <pbuf_free+0x10c>)
 8010be0:	f006 fda8 	bl	8017734 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	7b9b      	ldrb	r3, [r3, #14]
 8010be8:	3b01      	subs	r3, #1
 8010bea:	b2da      	uxtb	r2, r3
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	739a      	strb	r2, [r3, #14]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	7b9b      	ldrb	r3, [r3, #14]
 8010bf4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8010bf6:	69b8      	ldr	r0, [r7, #24]
 8010bf8:	f000 fb5c 	bl	80112b4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010bfc:	7dfb      	ldrb	r3, [r7, #23]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d143      	bne.n	8010c8a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	7b1b      	ldrb	r3, [r3, #12]
 8010c0c:	f003 030f 	and.w	r3, r3, #15
 8010c10:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	7b5b      	ldrb	r3, [r3, #13]
 8010c16:	f003 0302 	and.w	r3, r3, #2
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d011      	beq.n	8010c42 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	691b      	ldr	r3, [r3, #16]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d106      	bne.n	8010c38 <pbuf_free+0x9c>
 8010c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8010ca0 <pbuf_free+0x104>)
 8010c2c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8010c30:	491f      	ldr	r1, [pc, #124]	@ (8010cb0 <pbuf_free+0x114>)
 8010c32:	481d      	ldr	r0, [pc, #116]	@ (8010ca8 <pbuf_free+0x10c>)
 8010c34:	f006 fd7e 	bl	8017734 <iprintf>
        pc->custom_free_function(p);
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	691b      	ldr	r3, [r3, #16]
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	4798      	blx	r3
 8010c40:	e01d      	b.n	8010c7e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010c42:	7bfb      	ldrb	r3, [r7, #15]
 8010c44:	2b02      	cmp	r3, #2
 8010c46:	d104      	bne.n	8010c52 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010c48:	6879      	ldr	r1, [r7, #4]
 8010c4a:	200c      	movs	r0, #12
 8010c4c:	f7ff f8f8 	bl	800fe40 <memp_free>
 8010c50:	e015      	b.n	8010c7e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010c52:	7bfb      	ldrb	r3, [r7, #15]
 8010c54:	2b01      	cmp	r3, #1
 8010c56:	d104      	bne.n	8010c62 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8010c58:	6879      	ldr	r1, [r7, #4]
 8010c5a:	200b      	movs	r0, #11
 8010c5c:	f7ff f8f0 	bl	800fe40 <memp_free>
 8010c60:	e00d      	b.n	8010c7e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010c62:	7bfb      	ldrb	r3, [r7, #15]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d103      	bne.n	8010c70 <pbuf_free+0xd4>
          mem_free(p);
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f7fe fd45 	bl	800f6f8 <mem_free>
 8010c6e:	e006      	b.n	8010c7e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010c70:	4b0b      	ldr	r3, [pc, #44]	@ (8010ca0 <pbuf_free+0x104>)
 8010c72:	f240 320f 	movw	r2, #783	@ 0x30f
 8010c76:	490f      	ldr	r1, [pc, #60]	@ (8010cb4 <pbuf_free+0x118>)
 8010c78:	480b      	ldr	r0, [pc, #44]	@ (8010ca8 <pbuf_free+0x10c>)
 8010c7a:	f006 fd5b 	bl	8017734 <iprintf>
        }
      }
      count++;
 8010c7e:	7ffb      	ldrb	r3, [r7, #31]
 8010c80:	3301      	adds	r3, #1
 8010c82:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	607b      	str	r3, [r7, #4]
 8010c88:	e001      	b.n	8010c8e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d199      	bne.n	8010bc8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010c94:	7ffb      	ldrb	r3, [r7, #31]
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	3720      	adds	r7, #32
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
 8010c9e:	bf00      	nop
 8010ca0:	080198a4 	.word	0x080198a4
 8010ca4:	08019a3c 	.word	0x08019a3c
 8010ca8:	08019938 	.word	0x08019938
 8010cac:	08019a68 	.word	0x08019a68
 8010cb0:	08019a80 	.word	0x08019a80
 8010cb4:	08019aa4 	.word	0x08019aa4

08010cb8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010cb8:	b480      	push	{r7}
 8010cba:	b085      	sub	sp, #20
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010cc4:	e005      	b.n	8010cd2 <pbuf_clen+0x1a>
    ++len;
 8010cc6:	89fb      	ldrh	r3, [r7, #14]
 8010cc8:	3301      	adds	r3, #1
 8010cca:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d1f6      	bne.n	8010cc6 <pbuf_clen+0xe>
  }
  return len;
 8010cd8:	89fb      	ldrh	r3, [r7, #14]
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3714      	adds	r7, #20
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce4:	4770      	bx	lr
	...

08010ce8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b084      	sub	sp, #16
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d016      	beq.n	8010d24 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010cf6:	f000 facf 	bl	8011298 <sys_arch_protect>
 8010cfa:	60f8      	str	r0, [r7, #12]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	7b9b      	ldrb	r3, [r3, #14]
 8010d00:	3301      	adds	r3, #1
 8010d02:	b2da      	uxtb	r2, r3
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	739a      	strb	r2, [r3, #14]
 8010d08:	68f8      	ldr	r0, [r7, #12]
 8010d0a:	f000 fad3 	bl	80112b4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	7b9b      	ldrb	r3, [r3, #14]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d106      	bne.n	8010d24 <pbuf_ref+0x3c>
 8010d16:	4b05      	ldr	r3, [pc, #20]	@ (8010d2c <pbuf_ref+0x44>)
 8010d18:	f240 3242 	movw	r2, #834	@ 0x342
 8010d1c:	4904      	ldr	r1, [pc, #16]	@ (8010d30 <pbuf_ref+0x48>)
 8010d1e:	4805      	ldr	r0, [pc, #20]	@ (8010d34 <pbuf_ref+0x4c>)
 8010d20:	f006 fd08 	bl	8017734 <iprintf>
  }
}
 8010d24:	bf00      	nop
 8010d26:	3710      	adds	r7, #16
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}
 8010d2c:	080198a4 	.word	0x080198a4
 8010d30:	08019ab8 	.word	0x08019ab8
 8010d34:	08019938 	.word	0x08019938

08010d38 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b084      	sub	sp, #16
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d002      	beq.n	8010d4e <pbuf_cat+0x16>
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d107      	bne.n	8010d5e <pbuf_cat+0x26>
 8010d4e:	4b20      	ldr	r3, [pc, #128]	@ (8010dd0 <pbuf_cat+0x98>)
 8010d50:	f240 3259 	movw	r2, #857	@ 0x359
 8010d54:	491f      	ldr	r1, [pc, #124]	@ (8010dd4 <pbuf_cat+0x9c>)
 8010d56:	4820      	ldr	r0, [pc, #128]	@ (8010dd8 <pbuf_cat+0xa0>)
 8010d58:	f006 fcec 	bl	8017734 <iprintf>
 8010d5c:	e034      	b.n	8010dc8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	60fb      	str	r3, [r7, #12]
 8010d62:	e00a      	b.n	8010d7a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	891a      	ldrh	r2, [r3, #8]
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	891b      	ldrh	r3, [r3, #8]
 8010d6c:	4413      	add	r3, r2
 8010d6e:	b29a      	uxth	r2, r3
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	60fb      	str	r3, [r7, #12]
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d1f0      	bne.n	8010d64 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	891a      	ldrh	r2, [r3, #8]
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	895b      	ldrh	r3, [r3, #10]
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d006      	beq.n	8010d9c <pbuf_cat+0x64>
 8010d8e:	4b10      	ldr	r3, [pc, #64]	@ (8010dd0 <pbuf_cat+0x98>)
 8010d90:	f240 3262 	movw	r2, #866	@ 0x362
 8010d94:	4911      	ldr	r1, [pc, #68]	@ (8010ddc <pbuf_cat+0xa4>)
 8010d96:	4810      	ldr	r0, [pc, #64]	@ (8010dd8 <pbuf_cat+0xa0>)
 8010d98:	f006 fccc 	bl	8017734 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d006      	beq.n	8010db2 <pbuf_cat+0x7a>
 8010da4:	4b0a      	ldr	r3, [pc, #40]	@ (8010dd0 <pbuf_cat+0x98>)
 8010da6:	f240 3263 	movw	r2, #867	@ 0x363
 8010daa:	490d      	ldr	r1, [pc, #52]	@ (8010de0 <pbuf_cat+0xa8>)
 8010dac:	480a      	ldr	r0, [pc, #40]	@ (8010dd8 <pbuf_cat+0xa0>)
 8010dae:	f006 fcc1 	bl	8017734 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	891a      	ldrh	r2, [r3, #8]
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	891b      	ldrh	r3, [r3, #8]
 8010dba:	4413      	add	r3, r2
 8010dbc:	b29a      	uxth	r2, r3
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	683a      	ldr	r2, [r7, #0]
 8010dc6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010dc8:	3710      	adds	r7, #16
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bd80      	pop	{r7, pc}
 8010dce:	bf00      	nop
 8010dd0:	080198a4 	.word	0x080198a4
 8010dd4:	08019acc 	.word	0x08019acc
 8010dd8:	08019938 	.word	0x08019938
 8010ddc:	08019b04 	.word	0x08019b04
 8010de0:	08019b34 	.word	0x08019b34

08010de4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b082      	sub	sp, #8
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8010dee:	6839      	ldr	r1, [r7, #0]
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f7ff ffa1 	bl	8010d38 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8010df6:	6838      	ldr	r0, [r7, #0]
 8010df8:	f7ff ff76 	bl	8010ce8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010dfc:	bf00      	nop
 8010dfe:	3708      	adds	r7, #8
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}

08010e04 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b086      	sub	sp, #24
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
 8010e0c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	617b      	str	r3, [r7, #20]
 8010e12:	2300      	movs	r3, #0
 8010e14:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d008      	beq.n	8010e2e <pbuf_copy+0x2a>
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d005      	beq.n	8010e2e <pbuf_copy+0x2a>
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	891a      	ldrh	r2, [r3, #8]
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	891b      	ldrh	r3, [r3, #8]
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d209      	bcs.n	8010e42 <pbuf_copy+0x3e>
 8010e2e:	4b57      	ldr	r3, [pc, #348]	@ (8010f8c <pbuf_copy+0x188>)
 8010e30:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8010e34:	4956      	ldr	r1, [pc, #344]	@ (8010f90 <pbuf_copy+0x18c>)
 8010e36:	4857      	ldr	r0, [pc, #348]	@ (8010f94 <pbuf_copy+0x190>)
 8010e38:	f006 fc7c 	bl	8017734 <iprintf>
 8010e3c:	f06f 030f 	mvn.w	r3, #15
 8010e40:	e09f      	b.n	8010f82 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	895b      	ldrh	r3, [r3, #10]
 8010e46:	461a      	mov	r2, r3
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	1ad2      	subs	r2, r2, r3
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	895b      	ldrh	r3, [r3, #10]
 8010e50:	4619      	mov	r1, r3
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	1acb      	subs	r3, r1, r3
 8010e56:	429a      	cmp	r2, r3
 8010e58:	d306      	bcc.n	8010e68 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	895b      	ldrh	r3, [r3, #10]
 8010e5e:	461a      	mov	r2, r3
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	1ad3      	subs	r3, r2, r3
 8010e64:	60fb      	str	r3, [r7, #12]
 8010e66:	e005      	b.n	8010e74 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	895b      	ldrh	r3, [r3, #10]
 8010e6c:	461a      	mov	r2, r3
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	1ad3      	subs	r3, r2, r3
 8010e72:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	685a      	ldr	r2, [r3, #4]
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	18d0      	adds	r0, r2, r3
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	685a      	ldr	r2, [r3, #4]
 8010e80:	693b      	ldr	r3, [r7, #16]
 8010e82:	4413      	add	r3, r2
 8010e84:	68fa      	ldr	r2, [r7, #12]
 8010e86:	4619      	mov	r1, r3
 8010e88:	f006 fe21 	bl	8017ace <memcpy>
    offset_to += len;
 8010e8c:	697a      	ldr	r2, [r7, #20]
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	4413      	add	r3, r2
 8010e92:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010e94:	693a      	ldr	r2, [r7, #16]
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	4413      	add	r3, r2
 8010e9a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	895b      	ldrh	r3, [r3, #10]
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	4293      	cmp	r3, r2
 8010ea6:	d906      	bls.n	8010eb6 <pbuf_copy+0xb2>
 8010ea8:	4b38      	ldr	r3, [pc, #224]	@ (8010f8c <pbuf_copy+0x188>)
 8010eaa:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8010eae:	493a      	ldr	r1, [pc, #232]	@ (8010f98 <pbuf_copy+0x194>)
 8010eb0:	4838      	ldr	r0, [pc, #224]	@ (8010f94 <pbuf_copy+0x190>)
 8010eb2:	f006 fc3f 	bl	8017734 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	895b      	ldrh	r3, [r3, #10]
 8010eba:	461a      	mov	r2, r3
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	4293      	cmp	r3, r2
 8010ec0:	d906      	bls.n	8010ed0 <pbuf_copy+0xcc>
 8010ec2:	4b32      	ldr	r3, [pc, #200]	@ (8010f8c <pbuf_copy+0x188>)
 8010ec4:	f240 32da 	movw	r2, #986	@ 0x3da
 8010ec8:	4934      	ldr	r1, [pc, #208]	@ (8010f9c <pbuf_copy+0x198>)
 8010eca:	4832      	ldr	r0, [pc, #200]	@ (8010f94 <pbuf_copy+0x190>)
 8010ecc:	f006 fc32 	bl	8017734 <iprintf>
    if (offset_from >= p_from->len) {
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	895b      	ldrh	r3, [r3, #10]
 8010ed4:	461a      	mov	r2, r3
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	d304      	bcc.n	8010ee6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010edc:	2300      	movs	r3, #0
 8010ede:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	895b      	ldrh	r3, [r3, #10]
 8010eea:	461a      	mov	r2, r3
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	4293      	cmp	r3, r2
 8010ef0:	d114      	bne.n	8010f1c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d10c      	bne.n	8010f1c <pbuf_copy+0x118>
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d009      	beq.n	8010f1c <pbuf_copy+0x118>
 8010f08:	4b20      	ldr	r3, [pc, #128]	@ (8010f8c <pbuf_copy+0x188>)
 8010f0a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8010f0e:	4924      	ldr	r1, [pc, #144]	@ (8010fa0 <pbuf_copy+0x19c>)
 8010f10:	4820      	ldr	r0, [pc, #128]	@ (8010f94 <pbuf_copy+0x190>)
 8010f12:	f006 fc0f 	bl	8017734 <iprintf>
 8010f16:	f06f 030f 	mvn.w	r3, #15
 8010f1a:	e032      	b.n	8010f82 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d013      	beq.n	8010f4a <pbuf_copy+0x146>
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	895a      	ldrh	r2, [r3, #10]
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	891b      	ldrh	r3, [r3, #8]
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d10d      	bne.n	8010f4a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d009      	beq.n	8010f4a <pbuf_copy+0x146>
 8010f36:	4b15      	ldr	r3, [pc, #84]	@ (8010f8c <pbuf_copy+0x188>)
 8010f38:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8010f3c:	4919      	ldr	r1, [pc, #100]	@ (8010fa4 <pbuf_copy+0x1a0>)
 8010f3e:	4815      	ldr	r0, [pc, #84]	@ (8010f94 <pbuf_copy+0x190>)
 8010f40:	f006 fbf8 	bl	8017734 <iprintf>
 8010f44:	f06f 0305 	mvn.w	r3, #5
 8010f48:	e01b      	b.n	8010f82 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d013      	beq.n	8010f78 <pbuf_copy+0x174>
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	895a      	ldrh	r2, [r3, #10]
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	891b      	ldrh	r3, [r3, #8]
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	d10d      	bne.n	8010f78 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d009      	beq.n	8010f78 <pbuf_copy+0x174>
 8010f64:	4b09      	ldr	r3, [pc, #36]	@ (8010f8c <pbuf_copy+0x188>)
 8010f66:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8010f6a:	490e      	ldr	r1, [pc, #56]	@ (8010fa4 <pbuf_copy+0x1a0>)
 8010f6c:	4809      	ldr	r0, [pc, #36]	@ (8010f94 <pbuf_copy+0x190>)
 8010f6e:	f006 fbe1 	bl	8017734 <iprintf>
 8010f72:	f06f 0305 	mvn.w	r3, #5
 8010f76:	e004      	b.n	8010f82 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	f47f af61 	bne.w	8010e42 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010f80:	2300      	movs	r3, #0
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	3718      	adds	r7, #24
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}
 8010f8a:	bf00      	nop
 8010f8c:	080198a4 	.word	0x080198a4
 8010f90:	08019b80 	.word	0x08019b80
 8010f94:	08019938 	.word	0x08019938
 8010f98:	08019bb0 	.word	0x08019bb0
 8010f9c:	08019bc8 	.word	0x08019bc8
 8010fa0:	08019be4 	.word	0x08019be4
 8010fa4:	08019bf4 	.word	0x08019bf4

08010fa8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b088      	sub	sp, #32
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	60f8      	str	r0, [r7, #12]
 8010fb0:	60b9      	str	r1, [r7, #8]
 8010fb2:	4611      	mov	r1, r2
 8010fb4:	461a      	mov	r2, r3
 8010fb6:	460b      	mov	r3, r1
 8010fb8:	80fb      	strh	r3, [r7, #6]
 8010fba:	4613      	mov	r3, r2
 8010fbc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d108      	bne.n	8010fde <pbuf_copy_partial+0x36>
 8010fcc:	4b2b      	ldr	r3, [pc, #172]	@ (801107c <pbuf_copy_partial+0xd4>)
 8010fce:	f240 420a 	movw	r2, #1034	@ 0x40a
 8010fd2:	492b      	ldr	r1, [pc, #172]	@ (8011080 <pbuf_copy_partial+0xd8>)
 8010fd4:	482b      	ldr	r0, [pc, #172]	@ (8011084 <pbuf_copy_partial+0xdc>)
 8010fd6:	f006 fbad 	bl	8017734 <iprintf>
 8010fda:	2300      	movs	r3, #0
 8010fdc:	e04a      	b.n	8011074 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d108      	bne.n	8010ff6 <pbuf_copy_partial+0x4e>
 8010fe4:	4b25      	ldr	r3, [pc, #148]	@ (801107c <pbuf_copy_partial+0xd4>)
 8010fe6:	f240 420b 	movw	r2, #1035	@ 0x40b
 8010fea:	4927      	ldr	r1, [pc, #156]	@ (8011088 <pbuf_copy_partial+0xe0>)
 8010fec:	4825      	ldr	r0, [pc, #148]	@ (8011084 <pbuf_copy_partial+0xdc>)
 8010fee:	f006 fba1 	bl	8017734 <iprintf>
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	e03e      	b.n	8011074 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	61fb      	str	r3, [r7, #28]
 8010ffa:	e034      	b.n	8011066 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010ffc:	88bb      	ldrh	r3, [r7, #4]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d00a      	beq.n	8011018 <pbuf_copy_partial+0x70>
 8011002:	69fb      	ldr	r3, [r7, #28]
 8011004:	895b      	ldrh	r3, [r3, #10]
 8011006:	88ba      	ldrh	r2, [r7, #4]
 8011008:	429a      	cmp	r2, r3
 801100a:	d305      	bcc.n	8011018 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	895b      	ldrh	r3, [r3, #10]
 8011010:	88ba      	ldrh	r2, [r7, #4]
 8011012:	1ad3      	subs	r3, r2, r3
 8011014:	80bb      	strh	r3, [r7, #4]
 8011016:	e023      	b.n	8011060 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011018:	69fb      	ldr	r3, [r7, #28]
 801101a:	895a      	ldrh	r2, [r3, #10]
 801101c:	88bb      	ldrh	r3, [r7, #4]
 801101e:	1ad3      	subs	r3, r2, r3
 8011020:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011022:	8b3a      	ldrh	r2, [r7, #24]
 8011024:	88fb      	ldrh	r3, [r7, #6]
 8011026:	429a      	cmp	r2, r3
 8011028:	d901      	bls.n	801102e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801102a:	88fb      	ldrh	r3, [r7, #6]
 801102c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801102e:	8b7b      	ldrh	r3, [r7, #26]
 8011030:	68ba      	ldr	r2, [r7, #8]
 8011032:	18d0      	adds	r0, r2, r3
 8011034:	69fb      	ldr	r3, [r7, #28]
 8011036:	685a      	ldr	r2, [r3, #4]
 8011038:	88bb      	ldrh	r3, [r7, #4]
 801103a:	4413      	add	r3, r2
 801103c:	8b3a      	ldrh	r2, [r7, #24]
 801103e:	4619      	mov	r1, r3
 8011040:	f006 fd45 	bl	8017ace <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011044:	8afa      	ldrh	r2, [r7, #22]
 8011046:	8b3b      	ldrh	r3, [r7, #24]
 8011048:	4413      	add	r3, r2
 801104a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801104c:	8b7a      	ldrh	r2, [r7, #26]
 801104e:	8b3b      	ldrh	r3, [r7, #24]
 8011050:	4413      	add	r3, r2
 8011052:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011054:	88fa      	ldrh	r2, [r7, #6]
 8011056:	8b3b      	ldrh	r3, [r7, #24]
 8011058:	1ad3      	subs	r3, r2, r3
 801105a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801105c:	2300      	movs	r3, #0
 801105e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011060:	69fb      	ldr	r3, [r7, #28]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	61fb      	str	r3, [r7, #28]
 8011066:	88fb      	ldrh	r3, [r7, #6]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d002      	beq.n	8011072 <pbuf_copy_partial+0xca>
 801106c:	69fb      	ldr	r3, [r7, #28]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d1c4      	bne.n	8010ffc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011072:	8afb      	ldrh	r3, [r7, #22]
}
 8011074:	4618      	mov	r0, r3
 8011076:	3720      	adds	r7, #32
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}
 801107c:	080198a4 	.word	0x080198a4
 8011080:	08019c20 	.word	0x08019c20
 8011084:	08019938 	.word	0x08019938
 8011088:	08019c40 	.word	0x08019c40

0801108c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b084      	sub	sp, #16
 8011090:	af00      	add	r7, sp, #0
 8011092:	4603      	mov	r3, r0
 8011094:	603a      	str	r2, [r7, #0]
 8011096:	71fb      	strb	r3, [r7, #7]
 8011098:	460b      	mov	r3, r1
 801109a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	8919      	ldrh	r1, [r3, #8]
 80110a0:	88ba      	ldrh	r2, [r7, #4]
 80110a2:	79fb      	ldrb	r3, [r7, #7]
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7ff fa97 	bl	80105d8 <pbuf_alloc>
 80110aa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d101      	bne.n	80110b6 <pbuf_clone+0x2a>
    return NULL;
 80110b2:	2300      	movs	r3, #0
 80110b4:	e011      	b.n	80110da <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80110b6:	6839      	ldr	r1, [r7, #0]
 80110b8:	68f8      	ldr	r0, [r7, #12]
 80110ba:	f7ff fea3 	bl	8010e04 <pbuf_copy>
 80110be:	4603      	mov	r3, r0
 80110c0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80110c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d006      	beq.n	80110d8 <pbuf_clone+0x4c>
 80110ca:	4b06      	ldr	r3, [pc, #24]	@ (80110e4 <pbuf_clone+0x58>)
 80110cc:	f240 5224 	movw	r2, #1316	@ 0x524
 80110d0:	4905      	ldr	r1, [pc, #20]	@ (80110e8 <pbuf_clone+0x5c>)
 80110d2:	4806      	ldr	r0, [pc, #24]	@ (80110ec <pbuf_clone+0x60>)
 80110d4:	f006 fb2e 	bl	8017734 <iprintf>
  return q;
 80110d8:	68fb      	ldr	r3, [r7, #12]
}
 80110da:	4618      	mov	r0, r3
 80110dc:	3710      	adds	r7, #16
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}
 80110e2:	bf00      	nop
 80110e4:	080198a4 	.word	0x080198a4
 80110e8:	08019d4c 	.word	0x08019d4c
 80110ec:	08019938 	.word	0x08019938

080110f0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b082      	sub	sp, #8
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	2200      	movs	r2, #0
 80110fe:	2104      	movs	r1, #4
 8011100:	4618      	mov	r0, r3
 8011102:	f7f6 fbc9 	bl	8007898 <osMessageQueueNew>
 8011106:	4602      	mov	r2, r0
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d102      	bne.n	801111a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8011114:	f04f 33ff 	mov.w	r3, #4294967295
 8011118:	e000      	b.n	801111c <sys_mbox_new+0x2c>

  return ERR_OK;
 801111a:	2300      	movs	r3, #0
}
 801111c:	4618      	mov	r0, r3
 801111e:	3708      	adds	r7, #8
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}

08011124 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b084      	sub	sp, #16
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	6818      	ldr	r0, [r3, #0]
 8011132:	4639      	mov	r1, r7
 8011134:	2300      	movs	r3, #0
 8011136:	2200      	movs	r2, #0
 8011138:	f7f6 fc22 	bl	8007980 <osMessageQueuePut>
 801113c:	4603      	mov	r3, r0
 801113e:	2b00      	cmp	r3, #0
 8011140:	d102      	bne.n	8011148 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8011142:	2300      	movs	r3, #0
 8011144:	73fb      	strb	r3, [r7, #15]
 8011146:	e001      	b.n	801114c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8011148:	23ff      	movs	r3, #255	@ 0xff
 801114a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801114c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011150:	4618      	mov	r0, r3
 8011152:	3710      	adds	r7, #16
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}

08011158 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b086      	sub	sp, #24
 801115c:	af00      	add	r7, sp, #0
 801115e:	60f8      	str	r0, [r7, #12]
 8011160:	60b9      	str	r1, [r7, #8]
 8011162:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8011164:	f7f6 f8a8 	bl	80072b8 <osKernelGetTickCount>
 8011168:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d013      	beq.n	8011198 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	6818      	ldr	r0, [r3, #0]
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2200      	movs	r2, #0
 8011178:	68b9      	ldr	r1, [r7, #8]
 801117a:	f7f6 fc61 	bl	8007a40 <osMessageQueueGet>
 801117e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d105      	bne.n	8011192 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8011186:	f7f6 f897 	bl	80072b8 <osKernelGetTickCount>
 801118a:	4602      	mov	r2, r0
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	1ad3      	subs	r3, r2, r3
 8011190:	e00f      	b.n	80111b2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8011192:	f04f 33ff 	mov.w	r3, #4294967295
 8011196:	e00c      	b.n	80111b2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	6818      	ldr	r0, [r3, #0]
 801119c:	f04f 33ff 	mov.w	r3, #4294967295
 80111a0:	2200      	movs	r2, #0
 80111a2:	68b9      	ldr	r1, [r7, #8]
 80111a4:	f7f6 fc4c 	bl	8007a40 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80111a8:	f7f6 f886 	bl	80072b8 <osKernelGetTickCount>
 80111ac:	4602      	mov	r2, r0
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3718      	adds	r7, #24
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}

080111ba <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80111ba:	b480      	push	{r7}
 80111bc:	b083      	sub	sp, #12
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d101      	bne.n	80111ce <sys_mbox_valid+0x14>
    return 0;
 80111ca:	2300      	movs	r3, #0
 80111cc:	e000      	b.n	80111d0 <sys_mbox_valid+0x16>
  else
    return 1;
 80111ce:	2301      	movs	r3, #1
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	370c      	adds	r7, #12
 80111d4:	46bd      	mov	sp, r7
 80111d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111da:	4770      	bx	lr

080111dc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80111e0:	2000      	movs	r0, #0
 80111e2:	f7f6 f92b 	bl	800743c <osMutexNew>
 80111e6:	4603      	mov	r3, r0
 80111e8:	4a01      	ldr	r2, [pc, #4]	@ (80111f0 <sys_init+0x14>)
 80111ea:	6013      	str	r3, [r2, #0]
#endif
}
 80111ec:	bf00      	nop
 80111ee:	bd80      	pop	{r7, pc}
 80111f0:	24007efc 	.word	0x24007efc

080111f4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b082      	sub	sp, #8
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80111fc:	2000      	movs	r0, #0
 80111fe:	f7f6 f91d 	bl	800743c <osMutexNew>
 8011202:	4602      	mov	r2, r0
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d102      	bne.n	8011216 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8011210:	f04f 33ff 	mov.w	r3, #4294967295
 8011214:	e000      	b.n	8011218 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8011216:	2300      	movs	r3, #0
}
 8011218:	4618      	mov	r0, r3
 801121a:	3708      	adds	r7, #8
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}

08011220 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	f04f 31ff 	mov.w	r1, #4294967295
 8011230:	4618      	mov	r0, r3
 8011232:	f7f6 f989 	bl	8007548 <osMutexAcquire>
#endif
}
 8011236:	bf00      	nop
 8011238:	3708      	adds	r7, #8
 801123a:	46bd      	mov	sp, r7
 801123c:	bd80      	pop	{r7, pc}

0801123e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801123e:	b580      	push	{r7, lr}
 8011240:	b082      	sub	sp, #8
 8011242:	af00      	add	r7, sp, #0
 8011244:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	4618      	mov	r0, r3
 801124c:	f7f6 f9c7 	bl	80075de <osMutexRelease>
}
 8011250:	bf00      	nop
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b08e      	sub	sp, #56	@ 0x38
 801125c:	af00      	add	r7, sp, #0
 801125e:	60f8      	str	r0, [r7, #12]
 8011260:	60b9      	str	r1, [r7, #8]
 8011262:	607a      	str	r2, [r7, #4]
 8011264:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8011266:	f107 0314 	add.w	r3, r7, #20
 801126a:	2224      	movs	r2, #36	@ 0x24
 801126c:	2100      	movs	r1, #0
 801126e:	4618      	mov	r0, r3
 8011270:	f006 fbb8 	bl	80179e4 <memset>
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	617b      	str	r3, [r7, #20]
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801127c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801127e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8011280:	f107 0314 	add.w	r3, r7, #20
 8011284:	461a      	mov	r2, r3
 8011286:	6879      	ldr	r1, [r7, #4]
 8011288:	68b8      	ldr	r0, [r7, #8]
 801128a:	f7f6 f82a 	bl	80072e2 <osThreadNew>
 801128e:	4603      	mov	r3, r0
#endif
}
 8011290:	4618      	mov	r0, r3
 8011292:	3738      	adds	r7, #56	@ 0x38
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}

08011298 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801129c:	4b04      	ldr	r3, [pc, #16]	@ (80112b0 <sys_arch_protect+0x18>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	f04f 31ff 	mov.w	r1, #4294967295
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7f6 f94f 	bl	8007548 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80112aa:	2301      	movs	r3, #1
}
 80112ac:	4618      	mov	r0, r3
 80112ae:	bd80      	pop	{r7, pc}
 80112b0:	24007efc 	.word	0x24007efc

080112b4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80112bc:	4b04      	ldr	r3, [pc, #16]	@ (80112d0 <sys_arch_unprotect+0x1c>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7f6 f98c 	bl	80075de <osMutexRelease>
}
 80112c6:	bf00      	nop
 80112c8:	3708      	adds	r7, #8
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}
 80112ce:	bf00      	nop
 80112d0:	24007efc 	.word	0x24007efc

080112d4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80112d8:	f006 f92c 	bl	8017534 <rand>
 80112dc:	4603      	mov	r3, r0
 80112de:	b29b      	uxth	r3, r3
 80112e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80112e4:	b29b      	uxth	r3, r3
 80112e6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80112ea:	b29a      	uxth	r2, r3
 80112ec:	4b01      	ldr	r3, [pc, #4]	@ (80112f4 <tcp_init+0x20>)
 80112ee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80112f0:	bf00      	nop
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	24000048 	.word	0x24000048

080112f8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b082      	sub	sp, #8
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	7d1b      	ldrb	r3, [r3, #20]
 8011304:	2b01      	cmp	r3, #1
 8011306:	d105      	bne.n	8011314 <tcp_free+0x1c>
 8011308:	4b06      	ldr	r3, [pc, #24]	@ (8011324 <tcp_free+0x2c>)
 801130a:	22d4      	movs	r2, #212	@ 0xd4
 801130c:	4906      	ldr	r1, [pc, #24]	@ (8011328 <tcp_free+0x30>)
 801130e:	4807      	ldr	r0, [pc, #28]	@ (801132c <tcp_free+0x34>)
 8011310:	f006 fa10 	bl	8017734 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011314:	6879      	ldr	r1, [r7, #4]
 8011316:	2001      	movs	r0, #1
 8011318:	f7fe fd92 	bl	800fe40 <memp_free>
}
 801131c:	bf00      	nop
 801131e:	3708      	adds	r7, #8
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}
 8011324:	08019dd8 	.word	0x08019dd8
 8011328:	08019e3c 	.word	0x08019e3c
 801132c:	08019e50 	.word	0x08019e50

08011330 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b082      	sub	sp, #8
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	7d1b      	ldrb	r3, [r3, #20]
 801133c:	2b01      	cmp	r3, #1
 801133e:	d105      	bne.n	801134c <tcp_free_listen+0x1c>
 8011340:	4b06      	ldr	r3, [pc, #24]	@ (801135c <tcp_free_listen+0x2c>)
 8011342:	22df      	movs	r2, #223	@ 0xdf
 8011344:	4906      	ldr	r1, [pc, #24]	@ (8011360 <tcp_free_listen+0x30>)
 8011346:	4807      	ldr	r0, [pc, #28]	@ (8011364 <tcp_free_listen+0x34>)
 8011348:	f006 f9f4 	bl	8017734 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801134c:	6879      	ldr	r1, [r7, #4]
 801134e:	2002      	movs	r0, #2
 8011350:	f7fe fd76 	bl	800fe40 <memp_free>
}
 8011354:	bf00      	nop
 8011356:	3708      	adds	r7, #8
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}
 801135c:	08019dd8 	.word	0x08019dd8
 8011360:	08019e78 	.word	0x08019e78
 8011364:	08019e50 	.word	0x08019e50

08011368 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801136c:	f000 fea4 	bl	80120b8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011370:	4b07      	ldr	r3, [pc, #28]	@ (8011390 <tcp_tmr+0x28>)
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	3301      	adds	r3, #1
 8011376:	b2da      	uxtb	r2, r3
 8011378:	4b05      	ldr	r3, [pc, #20]	@ (8011390 <tcp_tmr+0x28>)
 801137a:	701a      	strb	r2, [r3, #0]
 801137c:	4b04      	ldr	r3, [pc, #16]	@ (8011390 <tcp_tmr+0x28>)
 801137e:	781b      	ldrb	r3, [r3, #0]
 8011380:	f003 0301 	and.w	r3, r3, #1
 8011384:	2b00      	cmp	r3, #0
 8011386:	d001      	beq.n	801138c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011388:	f000 fb54 	bl	8011a34 <tcp_slowtmr>
  }
}
 801138c:	bf00      	nop
 801138e:	bd80      	pop	{r7, pc}
 8011390:	24007f15 	.word	0x24007f15

08011394 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b084      	sub	sp, #16
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
 801139c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d105      	bne.n	80113b0 <tcp_remove_listener+0x1c>
 80113a4:	4b0d      	ldr	r3, [pc, #52]	@ (80113dc <tcp_remove_listener+0x48>)
 80113a6:	22ff      	movs	r2, #255	@ 0xff
 80113a8:	490d      	ldr	r1, [pc, #52]	@ (80113e0 <tcp_remove_listener+0x4c>)
 80113aa:	480e      	ldr	r0, [pc, #56]	@ (80113e4 <tcp_remove_listener+0x50>)
 80113ac:	f006 f9c2 	bl	8017734 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	60fb      	str	r3, [r7, #12]
 80113b4:	e00a      	b.n	80113cc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80113ba:	683a      	ldr	r2, [r7, #0]
 80113bc:	429a      	cmp	r2, r3
 80113be:	d102      	bne.n	80113c6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2200      	movs	r2, #0
 80113c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	68db      	ldr	r3, [r3, #12]
 80113ca:	60fb      	str	r3, [r7, #12]
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d1f1      	bne.n	80113b6 <tcp_remove_listener+0x22>
    }
  }
}
 80113d2:	bf00      	nop
 80113d4:	bf00      	nop
 80113d6:	3710      	adds	r7, #16
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}
 80113dc:	08019dd8 	.word	0x08019dd8
 80113e0:	08019e94 	.word	0x08019e94
 80113e4:	08019e50 	.word	0x08019e50

080113e8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b084      	sub	sp, #16
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d106      	bne.n	8011404 <tcp_listen_closed+0x1c>
 80113f6:	4b14      	ldr	r3, [pc, #80]	@ (8011448 <tcp_listen_closed+0x60>)
 80113f8:	f240 1211 	movw	r2, #273	@ 0x111
 80113fc:	4913      	ldr	r1, [pc, #76]	@ (801144c <tcp_listen_closed+0x64>)
 80113fe:	4814      	ldr	r0, [pc, #80]	@ (8011450 <tcp_listen_closed+0x68>)
 8011400:	f006 f998 	bl	8017734 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	7d1b      	ldrb	r3, [r3, #20]
 8011408:	2b01      	cmp	r3, #1
 801140a:	d006      	beq.n	801141a <tcp_listen_closed+0x32>
 801140c:	4b0e      	ldr	r3, [pc, #56]	@ (8011448 <tcp_listen_closed+0x60>)
 801140e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8011412:	4910      	ldr	r1, [pc, #64]	@ (8011454 <tcp_listen_closed+0x6c>)
 8011414:	480e      	ldr	r0, [pc, #56]	@ (8011450 <tcp_listen_closed+0x68>)
 8011416:	f006 f98d 	bl	8017734 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801141a:	2301      	movs	r3, #1
 801141c:	60fb      	str	r3, [r7, #12]
 801141e:	e00b      	b.n	8011438 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011420:	4a0d      	ldr	r2, [pc, #52]	@ (8011458 <tcp_listen_closed+0x70>)
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	6879      	ldr	r1, [r7, #4]
 801142c:	4618      	mov	r0, r3
 801142e:	f7ff ffb1 	bl	8011394 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	3301      	adds	r3, #1
 8011436:	60fb      	str	r3, [r7, #12]
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	2b03      	cmp	r3, #3
 801143c:	d9f0      	bls.n	8011420 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801143e:	bf00      	nop
 8011440:	bf00      	nop
 8011442:	3710      	adds	r7, #16
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}
 8011448:	08019dd8 	.word	0x08019dd8
 801144c:	08019ebc 	.word	0x08019ebc
 8011450:	08019e50 	.word	0x08019e50
 8011454:	08019ec8 	.word	0x08019ec8
 8011458:	0801b9a0 	.word	0x0801b9a0

0801145c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801145c:	b5b0      	push	{r4, r5, r7, lr}
 801145e:	b088      	sub	sp, #32
 8011460:	af04      	add	r7, sp, #16
 8011462:	6078      	str	r0, [r7, #4]
 8011464:	460b      	mov	r3, r1
 8011466:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d106      	bne.n	801147c <tcp_close_shutdown+0x20>
 801146e:	4b63      	ldr	r3, [pc, #396]	@ (80115fc <tcp_close_shutdown+0x1a0>)
 8011470:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8011474:	4962      	ldr	r1, [pc, #392]	@ (8011600 <tcp_close_shutdown+0x1a4>)
 8011476:	4863      	ldr	r0, [pc, #396]	@ (8011604 <tcp_close_shutdown+0x1a8>)
 8011478:	f006 f95c 	bl	8017734 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801147c:	78fb      	ldrb	r3, [r7, #3]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d066      	beq.n	8011550 <tcp_close_shutdown+0xf4>
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	7d1b      	ldrb	r3, [r3, #20]
 8011486:	2b04      	cmp	r3, #4
 8011488:	d003      	beq.n	8011492 <tcp_close_shutdown+0x36>
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	7d1b      	ldrb	r3, [r3, #20]
 801148e:	2b07      	cmp	r3, #7
 8011490:	d15e      	bne.n	8011550 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011496:	2b00      	cmp	r3, #0
 8011498:	d104      	bne.n	80114a4 <tcp_close_shutdown+0x48>
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801149e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80114a2:	d055      	beq.n	8011550 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	8b5b      	ldrh	r3, [r3, #26]
 80114a8:	f003 0310 	and.w	r3, r3, #16
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d106      	bne.n	80114be <tcp_close_shutdown+0x62>
 80114b0:	4b52      	ldr	r3, [pc, #328]	@ (80115fc <tcp_close_shutdown+0x1a0>)
 80114b2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80114b6:	4954      	ldr	r1, [pc, #336]	@ (8011608 <tcp_close_shutdown+0x1ac>)
 80114b8:	4852      	ldr	r0, [pc, #328]	@ (8011604 <tcp_close_shutdown+0x1a8>)
 80114ba:	f006 f93b 	bl	8017734 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80114c6:	687d      	ldr	r5, [r7, #4]
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	3304      	adds	r3, #4
 80114cc:	687a      	ldr	r2, [r7, #4]
 80114ce:	8ad2      	ldrh	r2, [r2, #22]
 80114d0:	6879      	ldr	r1, [r7, #4]
 80114d2:	8b09      	ldrh	r1, [r1, #24]
 80114d4:	9102      	str	r1, [sp, #8]
 80114d6:	9201      	str	r2, [sp, #4]
 80114d8:	9300      	str	r3, [sp, #0]
 80114da:	462b      	mov	r3, r5
 80114dc:	4622      	mov	r2, r4
 80114de:	4601      	mov	r1, r0
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f004 fe8d 	bl	8016200 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f001 f8c8 	bl	801267c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80114ec:	4b47      	ldr	r3, [pc, #284]	@ (801160c <tcp_close_shutdown+0x1b0>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d105      	bne.n	8011502 <tcp_close_shutdown+0xa6>
 80114f6:	4b45      	ldr	r3, [pc, #276]	@ (801160c <tcp_close_shutdown+0x1b0>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	4a43      	ldr	r2, [pc, #268]	@ (801160c <tcp_close_shutdown+0x1b0>)
 80114fe:	6013      	str	r3, [r2, #0]
 8011500:	e013      	b.n	801152a <tcp_close_shutdown+0xce>
 8011502:	4b42      	ldr	r3, [pc, #264]	@ (801160c <tcp_close_shutdown+0x1b0>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	60fb      	str	r3, [r7, #12]
 8011508:	e00c      	b.n	8011524 <tcp_close_shutdown+0xc8>
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	68db      	ldr	r3, [r3, #12]
 801150e:	687a      	ldr	r2, [r7, #4]
 8011510:	429a      	cmp	r2, r3
 8011512:	d104      	bne.n	801151e <tcp_close_shutdown+0xc2>
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	68da      	ldr	r2, [r3, #12]
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	60da      	str	r2, [r3, #12]
 801151c:	e005      	b.n	801152a <tcp_close_shutdown+0xce>
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	68db      	ldr	r3, [r3, #12]
 8011522:	60fb      	str	r3, [r7, #12]
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d1ef      	bne.n	801150a <tcp_close_shutdown+0xae>
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2200      	movs	r2, #0
 801152e:	60da      	str	r2, [r3, #12]
 8011530:	4b37      	ldr	r3, [pc, #220]	@ (8011610 <tcp_close_shutdown+0x1b4>)
 8011532:	2201      	movs	r2, #1
 8011534:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011536:	4b37      	ldr	r3, [pc, #220]	@ (8011614 <tcp_close_shutdown+0x1b8>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	687a      	ldr	r2, [r7, #4]
 801153c:	429a      	cmp	r2, r3
 801153e:	d102      	bne.n	8011546 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011540:	f003 fd5c 	bl	8014ffc <tcp_trigger_input_pcb_close>
 8011544:	e002      	b.n	801154c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f7ff fed6 	bl	80112f8 <tcp_free>
      }
      return ERR_OK;
 801154c:	2300      	movs	r3, #0
 801154e:	e050      	b.n	80115f2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	7d1b      	ldrb	r3, [r3, #20]
 8011554:	2b02      	cmp	r3, #2
 8011556:	d03b      	beq.n	80115d0 <tcp_close_shutdown+0x174>
 8011558:	2b02      	cmp	r3, #2
 801155a:	dc44      	bgt.n	80115e6 <tcp_close_shutdown+0x18a>
 801155c:	2b00      	cmp	r3, #0
 801155e:	d002      	beq.n	8011566 <tcp_close_shutdown+0x10a>
 8011560:	2b01      	cmp	r3, #1
 8011562:	d02a      	beq.n	80115ba <tcp_close_shutdown+0x15e>
 8011564:	e03f      	b.n	80115e6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	8adb      	ldrh	r3, [r3, #22]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d021      	beq.n	80115b2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801156e:	4b2a      	ldr	r3, [pc, #168]	@ (8011618 <tcp_close_shutdown+0x1bc>)
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	687a      	ldr	r2, [r7, #4]
 8011574:	429a      	cmp	r2, r3
 8011576:	d105      	bne.n	8011584 <tcp_close_shutdown+0x128>
 8011578:	4b27      	ldr	r3, [pc, #156]	@ (8011618 <tcp_close_shutdown+0x1bc>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	68db      	ldr	r3, [r3, #12]
 801157e:	4a26      	ldr	r2, [pc, #152]	@ (8011618 <tcp_close_shutdown+0x1bc>)
 8011580:	6013      	str	r3, [r2, #0]
 8011582:	e013      	b.n	80115ac <tcp_close_shutdown+0x150>
 8011584:	4b24      	ldr	r3, [pc, #144]	@ (8011618 <tcp_close_shutdown+0x1bc>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	60bb      	str	r3, [r7, #8]
 801158a:	e00c      	b.n	80115a6 <tcp_close_shutdown+0x14a>
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	68db      	ldr	r3, [r3, #12]
 8011590:	687a      	ldr	r2, [r7, #4]
 8011592:	429a      	cmp	r2, r3
 8011594:	d104      	bne.n	80115a0 <tcp_close_shutdown+0x144>
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	68da      	ldr	r2, [r3, #12]
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	60da      	str	r2, [r3, #12]
 801159e:	e005      	b.n	80115ac <tcp_close_shutdown+0x150>
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	68db      	ldr	r3, [r3, #12]
 80115a4:	60bb      	str	r3, [r7, #8]
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d1ef      	bne.n	801158c <tcp_close_shutdown+0x130>
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2200      	movs	r2, #0
 80115b0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	f7ff fea0 	bl	80112f8 <tcp_free>
      break;
 80115b8:	e01a      	b.n	80115f0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f7ff ff14 	bl	80113e8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80115c0:	6879      	ldr	r1, [r7, #4]
 80115c2:	4816      	ldr	r0, [pc, #88]	@ (801161c <tcp_close_shutdown+0x1c0>)
 80115c4:	f001 f8aa 	bl	801271c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f7ff feb1 	bl	8011330 <tcp_free_listen>
      break;
 80115ce:	e00f      	b.n	80115f0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80115d0:	6879      	ldr	r1, [r7, #4]
 80115d2:	480e      	ldr	r0, [pc, #56]	@ (801160c <tcp_close_shutdown+0x1b0>)
 80115d4:	f001 f8a2 	bl	801271c <tcp_pcb_remove>
 80115d8:	4b0d      	ldr	r3, [pc, #52]	@ (8011610 <tcp_close_shutdown+0x1b4>)
 80115da:	2201      	movs	r2, #1
 80115dc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f7ff fe8a 	bl	80112f8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80115e4:	e004      	b.n	80115f0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	f000 f81a 	bl	8011620 <tcp_close_shutdown_fin>
 80115ec:	4603      	mov	r3, r0
 80115ee:	e000      	b.n	80115f2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80115f0:	2300      	movs	r3, #0
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3710      	adds	r7, #16
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bdb0      	pop	{r4, r5, r7, pc}
 80115fa:	bf00      	nop
 80115fc:	08019dd8 	.word	0x08019dd8
 8011600:	08019ee0 	.word	0x08019ee0
 8011604:	08019e50 	.word	0x08019e50
 8011608:	08019f00 	.word	0x08019f00
 801160c:	24007f0c 	.word	0x24007f0c
 8011610:	24007f14 	.word	0x24007f14
 8011614:	24007f4c 	.word	0x24007f4c
 8011618:	24007f04 	.word	0x24007f04
 801161c:	24007f08 	.word	0x24007f08

08011620 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b084      	sub	sp, #16
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d106      	bne.n	801163c <tcp_close_shutdown_fin+0x1c>
 801162e:	4b2e      	ldr	r3, [pc, #184]	@ (80116e8 <tcp_close_shutdown_fin+0xc8>)
 8011630:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8011634:	492d      	ldr	r1, [pc, #180]	@ (80116ec <tcp_close_shutdown_fin+0xcc>)
 8011636:	482e      	ldr	r0, [pc, #184]	@ (80116f0 <tcp_close_shutdown_fin+0xd0>)
 8011638:	f006 f87c 	bl	8017734 <iprintf>

  switch (pcb->state) {
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	7d1b      	ldrb	r3, [r3, #20]
 8011640:	2b07      	cmp	r3, #7
 8011642:	d020      	beq.n	8011686 <tcp_close_shutdown_fin+0x66>
 8011644:	2b07      	cmp	r3, #7
 8011646:	dc2b      	bgt.n	80116a0 <tcp_close_shutdown_fin+0x80>
 8011648:	2b03      	cmp	r3, #3
 801164a:	d002      	beq.n	8011652 <tcp_close_shutdown_fin+0x32>
 801164c:	2b04      	cmp	r3, #4
 801164e:	d00d      	beq.n	801166c <tcp_close_shutdown_fin+0x4c>
 8011650:	e026      	b.n	80116a0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011652:	6878      	ldr	r0, [r7, #4]
 8011654:	f003 fee2 	bl	801541c <tcp_send_fin>
 8011658:	4603      	mov	r3, r0
 801165a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801165c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d11f      	bne.n	80116a4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2205      	movs	r2, #5
 8011668:	751a      	strb	r2, [r3, #20]
      }
      break;
 801166a:	e01b      	b.n	80116a4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f003 fed5 	bl	801541c <tcp_send_fin>
 8011672:	4603      	mov	r3, r0
 8011674:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d114      	bne.n	80116a8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	2205      	movs	r2, #5
 8011682:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011684:	e010      	b.n	80116a8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f003 fec8 	bl	801541c <tcp_send_fin>
 801168c:	4603      	mov	r3, r0
 801168e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d109      	bne.n	80116ac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2209      	movs	r2, #9
 801169c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801169e:	e005      	b.n	80116ac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80116a0:	2300      	movs	r3, #0
 80116a2:	e01c      	b.n	80116de <tcp_close_shutdown_fin+0xbe>
      break;
 80116a4:	bf00      	nop
 80116a6:	e002      	b.n	80116ae <tcp_close_shutdown_fin+0x8e>
      break;
 80116a8:	bf00      	nop
 80116aa:	e000      	b.n	80116ae <tcp_close_shutdown_fin+0x8e>
      break;
 80116ac:	bf00      	nop
  }

  if (err == ERR_OK) {
 80116ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d103      	bne.n	80116be <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f003 ffee 	bl	8015698 <tcp_output>
 80116bc:	e00d      	b.n	80116da <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80116be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116c6:	d108      	bne.n	80116da <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	8b5b      	ldrh	r3, [r3, #26]
 80116cc:	f043 0308 	orr.w	r3, r3, #8
 80116d0:	b29a      	uxth	r2, r3
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80116d6:	2300      	movs	r3, #0
 80116d8:	e001      	b.n	80116de <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80116da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3710      	adds	r7, #16
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	08019dd8 	.word	0x08019dd8
 80116ec:	08019ebc 	.word	0x08019ebc
 80116f0:	08019e50 	.word	0x08019e50

080116f4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b082      	sub	sp, #8
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d109      	bne.n	8011716 <tcp_close+0x22>
 8011702:	4b0f      	ldr	r3, [pc, #60]	@ (8011740 <tcp_close+0x4c>)
 8011704:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8011708:	490e      	ldr	r1, [pc, #56]	@ (8011744 <tcp_close+0x50>)
 801170a:	480f      	ldr	r0, [pc, #60]	@ (8011748 <tcp_close+0x54>)
 801170c:	f006 f812 	bl	8017734 <iprintf>
 8011710:	f06f 030f 	mvn.w	r3, #15
 8011714:	e00f      	b.n	8011736 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	7d1b      	ldrb	r3, [r3, #20]
 801171a:	2b01      	cmp	r3, #1
 801171c:	d006      	beq.n	801172c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	8b5b      	ldrh	r3, [r3, #26]
 8011722:	f043 0310 	orr.w	r3, r3, #16
 8011726:	b29a      	uxth	r2, r3
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801172c:	2101      	movs	r1, #1
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f7ff fe94 	bl	801145c <tcp_close_shutdown>
 8011734:	4603      	mov	r3, r0
}
 8011736:	4618      	mov	r0, r3
 8011738:	3708      	adds	r7, #8
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
 801173e:	bf00      	nop
 8011740:	08019dd8 	.word	0x08019dd8
 8011744:	08019f1c 	.word	0x08019f1c
 8011748:	08019e50 	.word	0x08019e50

0801174c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b08e      	sub	sp, #56	@ 0x38
 8011750:	af04      	add	r7, sp, #16
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d107      	bne.n	801176c <tcp_abandon+0x20>
 801175c:	4b52      	ldr	r3, [pc, #328]	@ (80118a8 <tcp_abandon+0x15c>)
 801175e:	f240 223d 	movw	r2, #573	@ 0x23d
 8011762:	4952      	ldr	r1, [pc, #328]	@ (80118ac <tcp_abandon+0x160>)
 8011764:	4852      	ldr	r0, [pc, #328]	@ (80118b0 <tcp_abandon+0x164>)
 8011766:	f005 ffe5 	bl	8017734 <iprintf>
 801176a:	e099      	b.n	80118a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	7d1b      	ldrb	r3, [r3, #20]
 8011770:	2b01      	cmp	r3, #1
 8011772:	d106      	bne.n	8011782 <tcp_abandon+0x36>
 8011774:	4b4c      	ldr	r3, [pc, #304]	@ (80118a8 <tcp_abandon+0x15c>)
 8011776:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801177a:	494e      	ldr	r1, [pc, #312]	@ (80118b4 <tcp_abandon+0x168>)
 801177c:	484c      	ldr	r0, [pc, #304]	@ (80118b0 <tcp_abandon+0x164>)
 801177e:	f005 ffd9 	bl	8017734 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	7d1b      	ldrb	r3, [r3, #20]
 8011786:	2b0a      	cmp	r3, #10
 8011788:	d107      	bne.n	801179a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801178a:	6879      	ldr	r1, [r7, #4]
 801178c:	484a      	ldr	r0, [pc, #296]	@ (80118b8 <tcp_abandon+0x16c>)
 801178e:	f000 ffc5 	bl	801271c <tcp_pcb_remove>
    tcp_free(pcb);
 8011792:	6878      	ldr	r0, [r7, #4]
 8011794:	f7ff fdb0 	bl	80112f8 <tcp_free>
 8011798:	e082      	b.n	80118a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801179a:	2300      	movs	r3, #0
 801179c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801179e:	2300      	movs	r3, #0
 80117a0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80117a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117ac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80117b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	691b      	ldr	r3, [r3, #16]
 80117ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	7d1b      	ldrb	r3, [r3, #20]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d126      	bne.n	8011812 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	8adb      	ldrh	r3, [r3, #22]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d02e      	beq.n	801182a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80117cc:	4b3b      	ldr	r3, [pc, #236]	@ (80118bc <tcp_abandon+0x170>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	687a      	ldr	r2, [r7, #4]
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d105      	bne.n	80117e2 <tcp_abandon+0x96>
 80117d6:	4b39      	ldr	r3, [pc, #228]	@ (80118bc <tcp_abandon+0x170>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	68db      	ldr	r3, [r3, #12]
 80117dc:	4a37      	ldr	r2, [pc, #220]	@ (80118bc <tcp_abandon+0x170>)
 80117de:	6013      	str	r3, [r2, #0]
 80117e0:	e013      	b.n	801180a <tcp_abandon+0xbe>
 80117e2:	4b36      	ldr	r3, [pc, #216]	@ (80118bc <tcp_abandon+0x170>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	61fb      	str	r3, [r7, #28]
 80117e8:	e00c      	b.n	8011804 <tcp_abandon+0xb8>
 80117ea:	69fb      	ldr	r3, [r7, #28]
 80117ec:	68db      	ldr	r3, [r3, #12]
 80117ee:	687a      	ldr	r2, [r7, #4]
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d104      	bne.n	80117fe <tcp_abandon+0xb2>
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	68da      	ldr	r2, [r3, #12]
 80117f8:	69fb      	ldr	r3, [r7, #28]
 80117fa:	60da      	str	r2, [r3, #12]
 80117fc:	e005      	b.n	801180a <tcp_abandon+0xbe>
 80117fe:	69fb      	ldr	r3, [r7, #28]
 8011800:	68db      	ldr	r3, [r3, #12]
 8011802:	61fb      	str	r3, [r7, #28]
 8011804:	69fb      	ldr	r3, [r7, #28]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d1ef      	bne.n	80117ea <tcp_abandon+0x9e>
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2200      	movs	r2, #0
 801180e:	60da      	str	r2, [r3, #12]
 8011810:	e00b      	b.n	801182a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	8adb      	ldrh	r3, [r3, #22]
 801181a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801181c:	6879      	ldr	r1, [r7, #4]
 801181e:	4828      	ldr	r0, [pc, #160]	@ (80118c0 <tcp_abandon+0x174>)
 8011820:	f000 ff7c 	bl	801271c <tcp_pcb_remove>
 8011824:	4b27      	ldr	r3, [pc, #156]	@ (80118c4 <tcp_abandon+0x178>)
 8011826:	2201      	movs	r2, #1
 8011828:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801182e:	2b00      	cmp	r3, #0
 8011830:	d004      	beq.n	801183c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011836:	4618      	mov	r0, r3
 8011838:	f000 fd1e 	bl	8012278 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011840:	2b00      	cmp	r3, #0
 8011842:	d004      	beq.n	801184e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011848:	4618      	mov	r0, r3
 801184a:	f000 fd15 	bl	8012278 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011852:	2b00      	cmp	r3, #0
 8011854:	d004      	beq.n	8011860 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801185a:	4618      	mov	r0, r3
 801185c:	f000 fd0c 	bl	8012278 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011862:	2b00      	cmp	r3, #0
 8011864:	d00e      	beq.n	8011884 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011866:	6879      	ldr	r1, [r7, #4]
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	3304      	adds	r3, #4
 801186c:	687a      	ldr	r2, [r7, #4]
 801186e:	8b12      	ldrh	r2, [r2, #24]
 8011870:	9202      	str	r2, [sp, #8]
 8011872:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011874:	9201      	str	r2, [sp, #4]
 8011876:	9300      	str	r3, [sp, #0]
 8011878:	460b      	mov	r3, r1
 801187a:	697a      	ldr	r2, [r7, #20]
 801187c:	69b9      	ldr	r1, [r7, #24]
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	f004 fcbe 	bl	8016200 <tcp_rst>
    }
    last_state = pcb->state;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	7d1b      	ldrb	r3, [r3, #20]
 8011888:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801188a:	6878      	ldr	r0, [r7, #4]
 801188c:	f7ff fd34 	bl	80112f8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d004      	beq.n	80118a0 <tcp_abandon+0x154>
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	f06f 010c 	mvn.w	r1, #12
 801189c:	68f8      	ldr	r0, [r7, #12]
 801189e:	4798      	blx	r3
  }
}
 80118a0:	3728      	adds	r7, #40	@ 0x28
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}
 80118a6:	bf00      	nop
 80118a8:	08019dd8 	.word	0x08019dd8
 80118ac:	08019f50 	.word	0x08019f50
 80118b0:	08019e50 	.word	0x08019e50
 80118b4:	08019f6c 	.word	0x08019f6c
 80118b8:	24007f10 	.word	0x24007f10
 80118bc:	24007f04 	.word	0x24007f04
 80118c0:	24007f0c 	.word	0x24007f0c
 80118c4:	24007f14 	.word	0x24007f14

080118c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b082      	sub	sp, #8
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80118d0:	2101      	movs	r1, #1
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f7ff ff3a 	bl	801174c <tcp_abandon>
}
 80118d8:	bf00      	nop
 80118da:	3708      	adds	r7, #8
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}

080118e0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d106      	bne.n	80118fc <tcp_update_rcv_ann_wnd+0x1c>
 80118ee:	4b25      	ldr	r3, [pc, #148]	@ (8011984 <tcp_update_rcv_ann_wnd+0xa4>)
 80118f0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80118f4:	4924      	ldr	r1, [pc, #144]	@ (8011988 <tcp_update_rcv_ann_wnd+0xa8>)
 80118f6:	4825      	ldr	r0, [pc, #148]	@ (801198c <tcp_update_rcv_ann_wnd+0xac>)
 80118f8:	f005 ff1c 	bl	8017734 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011900:	687a      	ldr	r2, [r7, #4]
 8011902:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011904:	4413      	add	r3, r2
 8011906:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801190c:	687a      	ldr	r2, [r7, #4]
 801190e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8011910:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8011914:	bf28      	it	cs
 8011916:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801191a:	b292      	uxth	r2, r2
 801191c:	4413      	add	r3, r2
 801191e:	68fa      	ldr	r2, [r7, #12]
 8011920:	1ad3      	subs	r3, r2, r3
 8011922:	2b00      	cmp	r3, #0
 8011924:	db08      	blt.n	8011938 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011932:	68fa      	ldr	r2, [r7, #12]
 8011934:	1ad3      	subs	r3, r2, r3
 8011936:	e020      	b.n	801197a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011940:	1ad3      	subs	r3, r2, r3
 8011942:	2b00      	cmp	r3, #0
 8011944:	dd03      	ble.n	801194e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2200      	movs	r2, #0
 801194a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801194c:	e014      	b.n	8011978 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011956:	1ad3      	subs	r3, r2, r3
 8011958:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011960:	d306      	bcc.n	8011970 <tcp_update_rcv_ann_wnd+0x90>
 8011962:	4b08      	ldr	r3, [pc, #32]	@ (8011984 <tcp_update_rcv_ann_wnd+0xa4>)
 8011964:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8011968:	4909      	ldr	r1, [pc, #36]	@ (8011990 <tcp_update_rcv_ann_wnd+0xb0>)
 801196a:	4808      	ldr	r0, [pc, #32]	@ (801198c <tcp_update_rcv_ann_wnd+0xac>)
 801196c:	f005 fee2 	bl	8017734 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	b29a      	uxth	r2, r3
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8011978:	2300      	movs	r3, #0
  }
}
 801197a:	4618      	mov	r0, r3
 801197c:	3710      	adds	r7, #16
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}
 8011982:	bf00      	nop
 8011984:	08019dd8 	.word	0x08019dd8
 8011988:	0801a068 	.word	0x0801a068
 801198c:	08019e50 	.word	0x08019e50
 8011990:	0801a08c 	.word	0x0801a08c

08011994 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b084      	sub	sp, #16
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	460b      	mov	r3, r1
 801199e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d107      	bne.n	80119b6 <tcp_recved+0x22>
 80119a6:	4b1f      	ldr	r3, [pc, #124]	@ (8011a24 <tcp_recved+0x90>)
 80119a8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80119ac:	491e      	ldr	r1, [pc, #120]	@ (8011a28 <tcp_recved+0x94>)
 80119ae:	481f      	ldr	r0, [pc, #124]	@ (8011a2c <tcp_recved+0x98>)
 80119b0:	f005 fec0 	bl	8017734 <iprintf>
 80119b4:	e032      	b.n	8011a1c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	7d1b      	ldrb	r3, [r3, #20]
 80119ba:	2b01      	cmp	r3, #1
 80119bc:	d106      	bne.n	80119cc <tcp_recved+0x38>
 80119be:	4b19      	ldr	r3, [pc, #100]	@ (8011a24 <tcp_recved+0x90>)
 80119c0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80119c4:	491a      	ldr	r1, [pc, #104]	@ (8011a30 <tcp_recved+0x9c>)
 80119c6:	4819      	ldr	r0, [pc, #100]	@ (8011a2c <tcp_recved+0x98>)
 80119c8:	f005 feb4 	bl	8017734 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80119d0:	887b      	ldrh	r3, [r7, #2]
 80119d2:	4413      	add	r3, r2
 80119d4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80119d6:	89fb      	ldrh	r3, [r7, #14]
 80119d8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80119dc:	d804      	bhi.n	80119e8 <tcp_recved+0x54>
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80119e2:	89fa      	ldrh	r2, [r7, #14]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d204      	bcs.n	80119f2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80119ee:	851a      	strh	r2, [r3, #40]	@ 0x28
 80119f0:	e002      	b.n	80119f8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	89fa      	ldrh	r2, [r7, #14]
 80119f6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f7ff ff71 	bl	80118e0 <tcp_update_rcv_ann_wnd>
 80119fe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011a06:	d309      	bcc.n	8011a1c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	8b5b      	ldrh	r3, [r3, #26]
 8011a0c:	f043 0302 	orr.w	r3, r3, #2
 8011a10:	b29a      	uxth	r2, r3
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	f003 fe3e 	bl	8015698 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011a1c:	3710      	adds	r7, #16
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}
 8011a22:	bf00      	nop
 8011a24:	08019dd8 	.word	0x08019dd8
 8011a28:	0801a0a8 	.word	0x0801a0a8
 8011a2c:	08019e50 	.word	0x08019e50
 8011a30:	0801a0c0 	.word	0x0801a0c0

08011a34 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011a34:	b5b0      	push	{r4, r5, r7, lr}
 8011a36:	b090      	sub	sp, #64	@ 0x40
 8011a38:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8011a40:	4b95      	ldr	r3, [pc, #596]	@ (8011c98 <tcp_slowtmr+0x264>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	3301      	adds	r3, #1
 8011a46:	4a94      	ldr	r2, [pc, #592]	@ (8011c98 <tcp_slowtmr+0x264>)
 8011a48:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011a4a:	4b94      	ldr	r3, [pc, #592]	@ (8011c9c <tcp_slowtmr+0x268>)
 8011a4c:	781b      	ldrb	r3, [r3, #0]
 8011a4e:	3301      	adds	r3, #1
 8011a50:	b2da      	uxtb	r2, r3
 8011a52:	4b92      	ldr	r3, [pc, #584]	@ (8011c9c <tcp_slowtmr+0x268>)
 8011a54:	701a      	strb	r2, [r3, #0]
 8011a56:	e000      	b.n	8011a5a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8011a58:	bf00      	nop
  prev = NULL;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8011a5e:	4b90      	ldr	r3, [pc, #576]	@ (8011ca0 <tcp_slowtmr+0x26c>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8011a64:	e29d      	b.n	8011fa2 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a68:	7d1b      	ldrb	r3, [r3, #20]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d106      	bne.n	8011a7c <tcp_slowtmr+0x48>
 8011a6e:	4b8d      	ldr	r3, [pc, #564]	@ (8011ca4 <tcp_slowtmr+0x270>)
 8011a70:	f240 42be 	movw	r2, #1214	@ 0x4be
 8011a74:	498c      	ldr	r1, [pc, #560]	@ (8011ca8 <tcp_slowtmr+0x274>)
 8011a76:	488d      	ldr	r0, [pc, #564]	@ (8011cac <tcp_slowtmr+0x278>)
 8011a78:	f005 fe5c 	bl	8017734 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a7e:	7d1b      	ldrb	r3, [r3, #20]
 8011a80:	2b01      	cmp	r3, #1
 8011a82:	d106      	bne.n	8011a92 <tcp_slowtmr+0x5e>
 8011a84:	4b87      	ldr	r3, [pc, #540]	@ (8011ca4 <tcp_slowtmr+0x270>)
 8011a86:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8011a8a:	4989      	ldr	r1, [pc, #548]	@ (8011cb0 <tcp_slowtmr+0x27c>)
 8011a8c:	4887      	ldr	r0, [pc, #540]	@ (8011cac <tcp_slowtmr+0x278>)
 8011a8e:	f005 fe51 	bl	8017734 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a94:	7d1b      	ldrb	r3, [r3, #20]
 8011a96:	2b0a      	cmp	r3, #10
 8011a98:	d106      	bne.n	8011aa8 <tcp_slowtmr+0x74>
 8011a9a:	4b82      	ldr	r3, [pc, #520]	@ (8011ca4 <tcp_slowtmr+0x270>)
 8011a9c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8011aa0:	4984      	ldr	r1, [pc, #528]	@ (8011cb4 <tcp_slowtmr+0x280>)
 8011aa2:	4882      	ldr	r0, [pc, #520]	@ (8011cac <tcp_slowtmr+0x278>)
 8011aa4:	f005 fe46 	bl	8017734 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aaa:	7f9a      	ldrb	r2, [r3, #30]
 8011aac:	4b7b      	ldr	r3, [pc, #492]	@ (8011c9c <tcp_slowtmr+0x268>)
 8011aae:	781b      	ldrb	r3, [r3, #0]
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d105      	bne.n	8011ac0 <tcp_slowtmr+0x8c>
      prev = pcb;
 8011ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aba:	68db      	ldr	r3, [r3, #12]
 8011abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8011abe:	e270      	b.n	8011fa2 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8011ac0:	4b76      	ldr	r3, [pc, #472]	@ (8011c9c <tcp_slowtmr+0x268>)
 8011ac2:	781a      	ldrb	r2, [r3, #0]
 8011ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ac6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ad6:	7d1b      	ldrb	r3, [r3, #20]
 8011ad8:	2b02      	cmp	r3, #2
 8011ada:	d10a      	bne.n	8011af2 <tcp_slowtmr+0xbe>
 8011adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ade:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011ae2:	2b05      	cmp	r3, #5
 8011ae4:	d905      	bls.n	8011af2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8011ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011aea:	3301      	adds	r3, #1
 8011aec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011af0:	e11e      	b.n	8011d30 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011af4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011af8:	2b0b      	cmp	r3, #11
 8011afa:	d905      	bls.n	8011b08 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8011afc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011b00:	3301      	adds	r3, #1
 8011b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011b06:	e113      	b.n	8011d30 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8011b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b0a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d075      	beq.n	8011bfe <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d006      	beq.n	8011b28 <tcp_slowtmr+0xf4>
 8011b1a:	4b62      	ldr	r3, [pc, #392]	@ (8011ca4 <tcp_slowtmr+0x270>)
 8011b1c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8011b20:	4965      	ldr	r1, [pc, #404]	@ (8011cb8 <tcp_slowtmr+0x284>)
 8011b22:	4862      	ldr	r0, [pc, #392]	@ (8011cac <tcp_slowtmr+0x278>)
 8011b24:	f005 fe06 	bl	8017734 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d106      	bne.n	8011b3e <tcp_slowtmr+0x10a>
 8011b30:	4b5c      	ldr	r3, [pc, #368]	@ (8011ca4 <tcp_slowtmr+0x270>)
 8011b32:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8011b36:	4961      	ldr	r1, [pc, #388]	@ (8011cbc <tcp_slowtmr+0x288>)
 8011b38:	485c      	ldr	r0, [pc, #368]	@ (8011cac <tcp_slowtmr+0x278>)
 8011b3a:	f005 fdfb 	bl	8017734 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b40:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011b44:	2b0b      	cmp	r3, #11
 8011b46:	d905      	bls.n	8011b54 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8011b48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011b52:	e0ed      	b.n	8011d30 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b56:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011b5a:	3b01      	subs	r3, #1
 8011b5c:	4a58      	ldr	r2, [pc, #352]	@ (8011cc0 <tcp_slowtmr+0x28c>)
 8011b5e:	5cd3      	ldrb	r3, [r2, r3]
 8011b60:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b64:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8011b68:	7c7a      	ldrb	r2, [r7, #17]
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d907      	bls.n	8011b7e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8011b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b70:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8011b74:	3301      	adds	r3, #1
 8011b76:	b2da      	uxtb	r2, r3
 8011b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b7a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8011b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b80:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8011b84:	7c7a      	ldrb	r2, [r7, #17]
 8011b86:	429a      	cmp	r2, r3
 8011b88:	f200 80d2 	bhi.w	8011d30 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8011b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d108      	bne.n	8011bac <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011b9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011b9c:	f004 fc24 	bl	80163e8 <tcp_zero_window_probe>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d014      	beq.n	8011bd0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	623b      	str	r3, [r7, #32]
 8011baa:	e011      	b.n	8011bd0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011bb6:	f003 fae9 	bl	801518c <tcp_split_unsent_seg>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d107      	bne.n	8011bd0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8011bc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011bc2:	f003 fd69 	bl	8015698 <tcp_output>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d101      	bne.n	8011bd0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8011bd0:	6a3b      	ldr	r3, [r7, #32]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	f000 80ac 	beq.w	8011d30 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8011bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bda:	2200      	movs	r2, #0
 8011bdc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011be2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011be6:	2b06      	cmp	r3, #6
 8011be8:	f200 80a2 	bhi.w	8011d30 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8011bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bee:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011bf2:	3301      	adds	r3, #1
 8011bf4:	b2da      	uxtb	r2, r3
 8011bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bf8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8011bfc:	e098      	b.n	8011d30 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	db0f      	blt.n	8011c28 <tcp_slowtmr+0x1f4>
 8011c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c0a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011c0e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8011c12:	4293      	cmp	r3, r2
 8011c14:	d008      	beq.n	8011c28 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8011c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c18:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011c1c:	b29b      	uxth	r3, r3
 8011c1e:	3301      	adds	r3, #1
 8011c20:	b29b      	uxth	r3, r3
 8011c22:	b21a      	sxth	r2, r3
 8011c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c26:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8011c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c2a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8011c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c30:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011c34:	429a      	cmp	r2, r3
 8011c36:	db7b      	blt.n	8011d30 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011c38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011c3a:	f004 f821 	bl	8015c80 <tcp_rexmit_rto_prepare>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d007      	beq.n	8011c54 <tcp_slowtmr+0x220>
 8011c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d171      	bne.n	8011d30 <tcp_slowtmr+0x2fc>
 8011c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d06d      	beq.n	8011d30 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8011c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c56:	7d1b      	ldrb	r3, [r3, #20]
 8011c58:	2b02      	cmp	r3, #2
 8011c5a:	d03a      	beq.n	8011cd2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011c62:	2b0c      	cmp	r3, #12
 8011c64:	bf28      	it	cs
 8011c66:	230c      	movcs	r3, #12
 8011c68:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011c70:	10db      	asrs	r3, r3, #3
 8011c72:	b21b      	sxth	r3, r3
 8011c74:	461a      	mov	r2, r3
 8011c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c78:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011c7c:	4413      	add	r3, r2
 8011c7e:	7efa      	ldrb	r2, [r7, #27]
 8011c80:	4910      	ldr	r1, [pc, #64]	@ (8011cc4 <tcp_slowtmr+0x290>)
 8011c82:	5c8a      	ldrb	r2, [r1, r2]
 8011c84:	4093      	lsls	r3, r2
 8011c86:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8011c8e:	4293      	cmp	r3, r2
 8011c90:	dc1a      	bgt.n	8011cc8 <tcp_slowtmr+0x294>
 8011c92:	697b      	ldr	r3, [r7, #20]
 8011c94:	b21a      	sxth	r2, r3
 8011c96:	e019      	b.n	8011ccc <tcp_slowtmr+0x298>
 8011c98:	24007f00 	.word	0x24007f00
 8011c9c:	24007f16 	.word	0x24007f16
 8011ca0:	24007f0c 	.word	0x24007f0c
 8011ca4:	08019dd8 	.word	0x08019dd8
 8011ca8:	0801a150 	.word	0x0801a150
 8011cac:	08019e50 	.word	0x08019e50
 8011cb0:	0801a17c 	.word	0x0801a17c
 8011cb4:	0801a1a8 	.word	0x0801a1a8
 8011cb8:	0801a1d8 	.word	0x0801a1d8
 8011cbc:	0801a20c 	.word	0x0801a20c
 8011cc0:	0801b998 	.word	0x0801b998
 8011cc4:	0801b988 	.word	0x0801b988
 8011cc8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8011ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8011cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ce0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011ce4:	4293      	cmp	r3, r2
 8011ce6:	bf28      	it	cs
 8011ce8:	4613      	movcs	r3, r2
 8011cea:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011cec:	8a7b      	ldrh	r3, [r7, #18]
 8011cee:	085b      	lsrs	r3, r3, #1
 8011cf0:	b29a      	uxth	r2, r3
 8011cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cf4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cfa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011d02:	005b      	lsls	r3, r3, #1
 8011d04:	b29b      	uxth	r3, r3
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d206      	bcs.n	8011d18 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011d0e:	005b      	lsls	r3, r3, #1
 8011d10:	b29a      	uxth	r2, r3
 8011d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d14:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8011d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d1a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8011d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d1e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8011d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d24:	2200      	movs	r2, #0
 8011d26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8011d2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011d2c:	f004 f818 	bl	8015d60 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8011d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d32:	7d1b      	ldrb	r3, [r3, #20]
 8011d34:	2b06      	cmp	r3, #6
 8011d36:	d111      	bne.n	8011d5c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8011d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d3a:	8b5b      	ldrh	r3, [r3, #26]
 8011d3c:	f003 0310 	and.w	r3, r3, #16
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d00b      	beq.n	8011d5c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d44:	4b9c      	ldr	r3, [pc, #624]	@ (8011fb8 <tcp_slowtmr+0x584>)
 8011d46:	681a      	ldr	r2, [r3, #0]
 8011d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d4a:	6a1b      	ldr	r3, [r3, #32]
 8011d4c:	1ad3      	subs	r3, r2, r3
 8011d4e:	2b28      	cmp	r3, #40	@ 0x28
 8011d50:	d904      	bls.n	8011d5c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8011d52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d56:	3301      	adds	r3, #1
 8011d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d5e:	7a5b      	ldrb	r3, [r3, #9]
 8011d60:	f003 0308 	and.w	r3, r3, #8
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d04a      	beq.n	8011dfe <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8011d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d6a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011d6c:	2b04      	cmp	r3, #4
 8011d6e:	d003      	beq.n	8011d78 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8011d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d72:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011d74:	2b07      	cmp	r3, #7
 8011d76:	d142      	bne.n	8011dfe <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d78:	4b8f      	ldr	r3, [pc, #572]	@ (8011fb8 <tcp_slowtmr+0x584>)
 8011d7a:	681a      	ldr	r2, [r3, #0]
 8011d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d7e:	6a1b      	ldr	r3, [r3, #32]
 8011d80:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d84:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8011d88:	4b8c      	ldr	r3, [pc, #560]	@ (8011fbc <tcp_slowtmr+0x588>)
 8011d8a:	440b      	add	r3, r1
 8011d8c:	498c      	ldr	r1, [pc, #560]	@ (8011fc0 <tcp_slowtmr+0x58c>)
 8011d8e:	fba1 1303 	umull	r1, r3, r1, r3
 8011d92:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d90a      	bls.n	8011dae <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8011d98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d9c:	3301      	adds	r3, #1
 8011d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8011da2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011da6:	3301      	adds	r3, #1
 8011da8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011dac:	e027      	b.n	8011dfe <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011dae:	4b82      	ldr	r3, [pc, #520]	@ (8011fb8 <tcp_slowtmr+0x584>)
 8011db0:	681a      	ldr	r2, [r3, #0]
 8011db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011db4:	6a1b      	ldr	r3, [r3, #32]
 8011db6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dba:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8011dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dc0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	4b7f      	ldr	r3, [pc, #508]	@ (8011fc4 <tcp_slowtmr+0x590>)
 8011dc8:	fb00 f303 	mul.w	r3, r0, r3
 8011dcc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011dce:	497c      	ldr	r1, [pc, #496]	@ (8011fc0 <tcp_slowtmr+0x58c>)
 8011dd0:	fba1 1303 	umull	r1, r3, r1, r3
 8011dd4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	d911      	bls.n	8011dfe <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8011dda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011ddc:	f004 fac4 	bl	8016368 <tcp_keepalive>
 8011de0:	4603      	mov	r3, r0
 8011de2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8011de6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d107      	bne.n	8011dfe <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8011dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011df0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8011df4:	3301      	adds	r3, #1
 8011df6:	b2da      	uxtb	r2, r3
 8011df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dfa:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8011dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d011      	beq.n	8011e2a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011e06:	4b6c      	ldr	r3, [pc, #432]	@ (8011fb8 <tcp_slowtmr+0x584>)
 8011e08:	681a      	ldr	r2, [r3, #0]
 8011e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e0c:	6a1b      	ldr	r3, [r3, #32]
 8011e0e:	1ad2      	subs	r2, r2, r3
 8011e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e12:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011e16:	4619      	mov	r1, r3
 8011e18:	460b      	mov	r3, r1
 8011e1a:	005b      	lsls	r3, r3, #1
 8011e1c:	440b      	add	r3, r1
 8011e1e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011e20:	429a      	cmp	r2, r3
 8011e22:	d302      	bcc.n	8011e2a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8011e24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011e26:	f000 fddd 	bl	80129e4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8011e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e2c:	7d1b      	ldrb	r3, [r3, #20]
 8011e2e:	2b03      	cmp	r3, #3
 8011e30:	d10b      	bne.n	8011e4a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011e32:	4b61      	ldr	r3, [pc, #388]	@ (8011fb8 <tcp_slowtmr+0x584>)
 8011e34:	681a      	ldr	r2, [r3, #0]
 8011e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e38:	6a1b      	ldr	r3, [r3, #32]
 8011e3a:	1ad3      	subs	r3, r2, r3
 8011e3c:	2b28      	cmp	r3, #40	@ 0x28
 8011e3e:	d904      	bls.n	8011e4a <tcp_slowtmr+0x416>
        ++pcb_remove;
 8011e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011e44:	3301      	adds	r3, #1
 8011e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8011e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e4c:	7d1b      	ldrb	r3, [r3, #20]
 8011e4e:	2b09      	cmp	r3, #9
 8011e50:	d10b      	bne.n	8011e6a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011e52:	4b59      	ldr	r3, [pc, #356]	@ (8011fb8 <tcp_slowtmr+0x584>)
 8011e54:	681a      	ldr	r2, [r3, #0]
 8011e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e58:	6a1b      	ldr	r3, [r3, #32]
 8011e5a:	1ad3      	subs	r3, r2, r3
 8011e5c:	2bf0      	cmp	r3, #240	@ 0xf0
 8011e5e:	d904      	bls.n	8011e6a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8011e60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011e64:	3301      	adds	r3, #1
 8011e66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8011e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d060      	beq.n	8011f34 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8011e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011e78:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8011e7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011e7c:	f000 fbfe 	bl	801267c <tcp_pcb_purge>
      if (prev != NULL) {
 8011e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d010      	beq.n	8011ea8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011e86:	4b50      	ldr	r3, [pc, #320]	@ (8011fc8 <tcp_slowtmr+0x594>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	d106      	bne.n	8011e9e <tcp_slowtmr+0x46a>
 8011e90:	4b4e      	ldr	r3, [pc, #312]	@ (8011fcc <tcp_slowtmr+0x598>)
 8011e92:	f240 526d 	movw	r2, #1389	@ 0x56d
 8011e96:	494e      	ldr	r1, [pc, #312]	@ (8011fd0 <tcp_slowtmr+0x59c>)
 8011e98:	484e      	ldr	r0, [pc, #312]	@ (8011fd4 <tcp_slowtmr+0x5a0>)
 8011e9a:	f005 fc4b 	bl	8017734 <iprintf>
        prev->next = pcb->next;
 8011e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ea0:	68da      	ldr	r2, [r3, #12]
 8011ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ea4:	60da      	str	r2, [r3, #12]
 8011ea6:	e00f      	b.n	8011ec8 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011ea8:	4b47      	ldr	r3, [pc, #284]	@ (8011fc8 <tcp_slowtmr+0x594>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011eae:	429a      	cmp	r2, r3
 8011eb0:	d006      	beq.n	8011ec0 <tcp_slowtmr+0x48c>
 8011eb2:	4b46      	ldr	r3, [pc, #280]	@ (8011fcc <tcp_slowtmr+0x598>)
 8011eb4:	f240 5271 	movw	r2, #1393	@ 0x571
 8011eb8:	4947      	ldr	r1, [pc, #284]	@ (8011fd8 <tcp_slowtmr+0x5a4>)
 8011eba:	4846      	ldr	r0, [pc, #280]	@ (8011fd4 <tcp_slowtmr+0x5a0>)
 8011ebc:	f005 fc3a 	bl	8017734 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ec2:	68db      	ldr	r3, [r3, #12]
 8011ec4:	4a40      	ldr	r2, [pc, #256]	@ (8011fc8 <tcp_slowtmr+0x594>)
 8011ec6:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8011ec8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d013      	beq.n	8011ef8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ed2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8011ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ed6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011ed8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8011eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011edc:	3304      	adds	r3, #4
 8011ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ee0:	8ad2      	ldrh	r2, [r2, #22]
 8011ee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011ee4:	8b09      	ldrh	r1, [r1, #24]
 8011ee6:	9102      	str	r1, [sp, #8]
 8011ee8:	9201      	str	r2, [sp, #4]
 8011eea:	9300      	str	r3, [sp, #0]
 8011eec:	462b      	mov	r3, r5
 8011eee:	4622      	mov	r2, r4
 8011ef0:	4601      	mov	r1, r0
 8011ef2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011ef4:	f004 f984 	bl	8016200 <tcp_rst>
      err_arg = pcb->callback_arg;
 8011ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011efa:	691b      	ldr	r3, [r3, #16]
 8011efc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f00:	7d1b      	ldrb	r3, [r3, #20]
 8011f02:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f06:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f0a:	68db      	ldr	r3, [r3, #12]
 8011f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8011f0e:	6838      	ldr	r0, [r7, #0]
 8011f10:	f7ff f9f2 	bl	80112f8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8011f14:	4b31      	ldr	r3, [pc, #196]	@ (8011fdc <tcp_slowtmr+0x5a8>)
 8011f16:	2200      	movs	r2, #0
 8011f18:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d004      	beq.n	8011f2a <tcp_slowtmr+0x4f6>
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	f06f 010c 	mvn.w	r1, #12
 8011f26:	68b8      	ldr	r0, [r7, #8]
 8011f28:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8011fdc <tcp_slowtmr+0x5a8>)
 8011f2c:	781b      	ldrb	r3, [r3, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d037      	beq.n	8011fa2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8011f32:	e592      	b.n	8011a5a <tcp_slowtmr+0x26>
      prev = pcb;
 8011f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f36:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f3a:	68db      	ldr	r3, [r3, #12]
 8011f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8011f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f40:	7f1b      	ldrb	r3, [r3, #28]
 8011f42:	3301      	adds	r3, #1
 8011f44:	b2da      	uxtb	r2, r3
 8011f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f48:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f4c:	7f1a      	ldrb	r2, [r3, #28]
 8011f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f50:	7f5b      	ldrb	r3, [r3, #29]
 8011f52:	429a      	cmp	r2, r3
 8011f54:	d325      	bcc.n	8011fa2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8011f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f58:	2200      	movs	r2, #0
 8011f5a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8011f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8011fdc <tcp_slowtmr+0x5a8>)
 8011f5e:	2200      	movs	r2, #0
 8011f60:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d00b      	beq.n	8011f84 <tcp_slowtmr+0x550>
 8011f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011f72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011f74:	6912      	ldr	r2, [r2, #16]
 8011f76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011f78:	4610      	mov	r0, r2
 8011f7a:	4798      	blx	r3
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8011f82:	e002      	b.n	8011f8a <tcp_slowtmr+0x556>
 8011f84:	2300      	movs	r3, #0
 8011f86:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8011f8a:	4b14      	ldr	r3, [pc, #80]	@ (8011fdc <tcp_slowtmr+0x5a8>)
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	f47f ad62 	bne.w	8011a58 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011f94:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d102      	bne.n	8011fa2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8011f9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f9e:	f003 fb7b 	bl	8015698 <tcp_output>
  while (pcb != NULL) {
 8011fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	f47f ad5e 	bne.w	8011a66 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011faa:	2300      	movs	r3, #0
 8011fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8011fae:	4b0c      	ldr	r3, [pc, #48]	@ (8011fe0 <tcp_slowtmr+0x5ac>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8011fb4:	e069      	b.n	801208a <tcp_slowtmr+0x656>
 8011fb6:	bf00      	nop
 8011fb8:	24007f00 	.word	0x24007f00
 8011fbc:	000a4cb8 	.word	0x000a4cb8
 8011fc0:	10624dd3 	.word	0x10624dd3
 8011fc4:	000124f8 	.word	0x000124f8
 8011fc8:	24007f0c 	.word	0x24007f0c
 8011fcc:	08019dd8 	.word	0x08019dd8
 8011fd0:	0801a244 	.word	0x0801a244
 8011fd4:	08019e50 	.word	0x08019e50
 8011fd8:	0801a270 	.word	0x0801a270
 8011fdc:	24007f14 	.word	0x24007f14
 8011fe0:	24007f10 	.word	0x24007f10
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fe6:	7d1b      	ldrb	r3, [r3, #20]
 8011fe8:	2b0a      	cmp	r3, #10
 8011fea:	d006      	beq.n	8011ffa <tcp_slowtmr+0x5c6>
 8011fec:	4b2b      	ldr	r3, [pc, #172]	@ (801209c <tcp_slowtmr+0x668>)
 8011fee:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8011ff2:	492b      	ldr	r1, [pc, #172]	@ (80120a0 <tcp_slowtmr+0x66c>)
 8011ff4:	482b      	ldr	r0, [pc, #172]	@ (80120a4 <tcp_slowtmr+0x670>)
 8011ff6:	f005 fb9d 	bl	8017734 <iprintf>
    pcb_remove = 0;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012000:	4b29      	ldr	r3, [pc, #164]	@ (80120a8 <tcp_slowtmr+0x674>)
 8012002:	681a      	ldr	r2, [r3, #0]
 8012004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012006:	6a1b      	ldr	r3, [r3, #32]
 8012008:	1ad3      	subs	r3, r2, r3
 801200a:	2bf0      	cmp	r3, #240	@ 0xf0
 801200c:	d904      	bls.n	8012018 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801200e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012012:	3301      	adds	r3, #1
 8012014:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801201c:	2b00      	cmp	r3, #0
 801201e:	d02f      	beq.n	8012080 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012020:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012022:	f000 fb2b 	bl	801267c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012028:	2b00      	cmp	r3, #0
 801202a:	d010      	beq.n	801204e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801202c:	4b1f      	ldr	r3, [pc, #124]	@ (80120ac <tcp_slowtmr+0x678>)
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012032:	429a      	cmp	r2, r3
 8012034:	d106      	bne.n	8012044 <tcp_slowtmr+0x610>
 8012036:	4b19      	ldr	r3, [pc, #100]	@ (801209c <tcp_slowtmr+0x668>)
 8012038:	f240 52af 	movw	r2, #1455	@ 0x5af
 801203c:	491c      	ldr	r1, [pc, #112]	@ (80120b0 <tcp_slowtmr+0x67c>)
 801203e:	4819      	ldr	r0, [pc, #100]	@ (80120a4 <tcp_slowtmr+0x670>)
 8012040:	f005 fb78 	bl	8017734 <iprintf>
        prev->next = pcb->next;
 8012044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012046:	68da      	ldr	r2, [r3, #12]
 8012048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801204a:	60da      	str	r2, [r3, #12]
 801204c:	e00f      	b.n	801206e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801204e:	4b17      	ldr	r3, [pc, #92]	@ (80120ac <tcp_slowtmr+0x678>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012054:	429a      	cmp	r2, r3
 8012056:	d006      	beq.n	8012066 <tcp_slowtmr+0x632>
 8012058:	4b10      	ldr	r3, [pc, #64]	@ (801209c <tcp_slowtmr+0x668>)
 801205a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801205e:	4915      	ldr	r1, [pc, #84]	@ (80120b4 <tcp_slowtmr+0x680>)
 8012060:	4810      	ldr	r0, [pc, #64]	@ (80120a4 <tcp_slowtmr+0x670>)
 8012062:	f005 fb67 	bl	8017734 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012068:	68db      	ldr	r3, [r3, #12]
 801206a:	4a10      	ldr	r2, [pc, #64]	@ (80120ac <tcp_slowtmr+0x678>)
 801206c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801206e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012070:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012074:	68db      	ldr	r3, [r3, #12]
 8012076:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8012078:	69f8      	ldr	r0, [r7, #28]
 801207a:	f7ff f93d 	bl	80112f8 <tcp_free>
 801207e:	e004      	b.n	801208a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8012080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012082:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012086:	68db      	ldr	r3, [r3, #12]
 8012088:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801208a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801208c:	2b00      	cmp	r3, #0
 801208e:	d1a9      	bne.n	8011fe4 <tcp_slowtmr+0x5b0>
    }
  }
}
 8012090:	bf00      	nop
 8012092:	bf00      	nop
 8012094:	3730      	adds	r7, #48	@ 0x30
 8012096:	46bd      	mov	sp, r7
 8012098:	bdb0      	pop	{r4, r5, r7, pc}
 801209a:	bf00      	nop
 801209c:	08019dd8 	.word	0x08019dd8
 80120a0:	0801a29c 	.word	0x0801a29c
 80120a4:	08019e50 	.word	0x08019e50
 80120a8:	24007f00 	.word	0x24007f00
 80120ac:	24007f10 	.word	0x24007f10
 80120b0:	0801a2cc 	.word	0x0801a2cc
 80120b4:	0801a2f4 	.word	0x0801a2f4

080120b8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b082      	sub	sp, #8
 80120bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80120be:	4b2d      	ldr	r3, [pc, #180]	@ (8012174 <tcp_fasttmr+0xbc>)
 80120c0:	781b      	ldrb	r3, [r3, #0]
 80120c2:	3301      	adds	r3, #1
 80120c4:	b2da      	uxtb	r2, r3
 80120c6:	4b2b      	ldr	r3, [pc, #172]	@ (8012174 <tcp_fasttmr+0xbc>)
 80120c8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80120ca:	4b2b      	ldr	r3, [pc, #172]	@ (8012178 <tcp_fasttmr+0xc0>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80120d0:	e048      	b.n	8012164 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	7f9a      	ldrb	r2, [r3, #30]
 80120d6:	4b27      	ldr	r3, [pc, #156]	@ (8012174 <tcp_fasttmr+0xbc>)
 80120d8:	781b      	ldrb	r3, [r3, #0]
 80120da:	429a      	cmp	r2, r3
 80120dc:	d03f      	beq.n	801215e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80120de:	4b25      	ldr	r3, [pc, #148]	@ (8012174 <tcp_fasttmr+0xbc>)
 80120e0:	781a      	ldrb	r2, [r3, #0]
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	8b5b      	ldrh	r3, [r3, #26]
 80120ea:	f003 0301 	and.w	r3, r3, #1
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d010      	beq.n	8012114 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	8b5b      	ldrh	r3, [r3, #26]
 80120f6:	f043 0302 	orr.w	r3, r3, #2
 80120fa:	b29a      	uxth	r2, r3
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f003 fac9 	bl	8015698 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	8b5b      	ldrh	r3, [r3, #26]
 801210a:	f023 0303 	bic.w	r3, r3, #3
 801210e:	b29a      	uxth	r2, r3
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	8b5b      	ldrh	r3, [r3, #26]
 8012118:	f003 0308 	and.w	r3, r3, #8
 801211c:	2b00      	cmp	r3, #0
 801211e:	d009      	beq.n	8012134 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	8b5b      	ldrh	r3, [r3, #26]
 8012124:	f023 0308 	bic.w	r3, r3, #8
 8012128:	b29a      	uxth	r2, r3
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f7ff fa76 	bl	8011620 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	68db      	ldr	r3, [r3, #12]
 8012138:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801213e:	2b00      	cmp	r3, #0
 8012140:	d00a      	beq.n	8012158 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012142:	4b0e      	ldr	r3, [pc, #56]	@ (801217c <tcp_fasttmr+0xc4>)
 8012144:	2200      	movs	r2, #0
 8012146:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f000 f819 	bl	8012180 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801214e:	4b0b      	ldr	r3, [pc, #44]	@ (801217c <tcp_fasttmr+0xc4>)
 8012150:	781b      	ldrb	r3, [r3, #0]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d000      	beq.n	8012158 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012156:	e7b8      	b.n	80120ca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	607b      	str	r3, [r7, #4]
 801215c:	e002      	b.n	8012164 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	68db      	ldr	r3, [r3, #12]
 8012162:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d1b3      	bne.n	80120d2 <tcp_fasttmr+0x1a>
    }
  }
}
 801216a:	bf00      	nop
 801216c:	bf00      	nop
 801216e:	3708      	adds	r7, #8
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}
 8012174:	24007f16 	.word	0x24007f16
 8012178:	24007f0c 	.word	0x24007f0c
 801217c:	24007f14 	.word	0x24007f14

08012180 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012180:	b590      	push	{r4, r7, lr}
 8012182:	b085      	sub	sp, #20
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d109      	bne.n	80121a2 <tcp_process_refused_data+0x22>
 801218e:	4b37      	ldr	r3, [pc, #220]	@ (801226c <tcp_process_refused_data+0xec>)
 8012190:	f240 6209 	movw	r2, #1545	@ 0x609
 8012194:	4936      	ldr	r1, [pc, #216]	@ (8012270 <tcp_process_refused_data+0xf0>)
 8012196:	4837      	ldr	r0, [pc, #220]	@ (8012274 <tcp_process_refused_data+0xf4>)
 8012198:	f005 facc 	bl	8017734 <iprintf>
 801219c:	f06f 030f 	mvn.w	r3, #15
 80121a0:	e060      	b.n	8012264 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80121a6:	7b5b      	ldrb	r3, [r3, #13]
 80121a8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80121ae:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2200      	movs	r2, #0
 80121b4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d00b      	beq.n	80121d8 <tcp_process_refused_data+0x58>
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	6918      	ldr	r0, [r3, #16]
 80121ca:	2300      	movs	r3, #0
 80121cc:	68ba      	ldr	r2, [r7, #8]
 80121ce:	6879      	ldr	r1, [r7, #4]
 80121d0:	47a0      	blx	r4
 80121d2:	4603      	mov	r3, r0
 80121d4:	73fb      	strb	r3, [r7, #15]
 80121d6:	e007      	b.n	80121e8 <tcp_process_refused_data+0x68>
 80121d8:	2300      	movs	r3, #0
 80121da:	68ba      	ldr	r2, [r7, #8]
 80121dc:	6879      	ldr	r1, [r7, #4]
 80121de:	2000      	movs	r0, #0
 80121e0:	f000 f8a4 	bl	801232c <tcp_recv_null>
 80121e4:	4603      	mov	r3, r0
 80121e6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80121e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d12a      	bne.n	8012246 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80121f0:	7bbb      	ldrb	r3, [r7, #14]
 80121f2:	f003 0320 	and.w	r3, r3, #32
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d033      	beq.n	8012262 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80121fe:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012202:	d005      	beq.n	8012210 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012208:	3301      	adds	r3, #1
 801220a:	b29a      	uxth	r2, r3
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012216:	2b00      	cmp	r3, #0
 8012218:	d00b      	beq.n	8012232 <tcp_process_refused_data+0xb2>
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6918      	ldr	r0, [r3, #16]
 8012224:	2300      	movs	r3, #0
 8012226:	2200      	movs	r2, #0
 8012228:	6879      	ldr	r1, [r7, #4]
 801222a:	47a0      	blx	r4
 801222c:	4603      	mov	r3, r0
 801222e:	73fb      	strb	r3, [r7, #15]
 8012230:	e001      	b.n	8012236 <tcp_process_refused_data+0xb6>
 8012232:	2300      	movs	r3, #0
 8012234:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801223a:	f113 0f0d 	cmn.w	r3, #13
 801223e:	d110      	bne.n	8012262 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8012240:	f06f 030c 	mvn.w	r3, #12
 8012244:	e00e      	b.n	8012264 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801224a:	f113 0f0d 	cmn.w	r3, #13
 801224e:	d102      	bne.n	8012256 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012250:	f06f 030c 	mvn.w	r3, #12
 8012254:	e006      	b.n	8012264 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	68ba      	ldr	r2, [r7, #8]
 801225a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801225c:	f06f 0304 	mvn.w	r3, #4
 8012260:	e000      	b.n	8012264 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8012262:	2300      	movs	r3, #0
}
 8012264:	4618      	mov	r0, r3
 8012266:	3714      	adds	r7, #20
 8012268:	46bd      	mov	sp, r7
 801226a:	bd90      	pop	{r4, r7, pc}
 801226c:	08019dd8 	.word	0x08019dd8
 8012270:	0801a31c 	.word	0x0801a31c
 8012274:	08019e50 	.word	0x08019e50

08012278 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b084      	sub	sp, #16
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012280:	e007      	b.n	8012292 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f000 f80a 	bl	80122a2 <tcp_seg_free>
    seg = next;
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d1f4      	bne.n	8012282 <tcp_segs_free+0xa>
  }
}
 8012298:	bf00      	nop
 801229a:	bf00      	nop
 801229c:	3710      	adds	r7, #16
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}

080122a2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80122a2:	b580      	push	{r7, lr}
 80122a4:	b082      	sub	sp, #8
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d00c      	beq.n	80122ca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	685b      	ldr	r3, [r3, #4]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d004      	beq.n	80122c2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	685b      	ldr	r3, [r3, #4]
 80122bc:	4618      	mov	r0, r3
 80122be:	f7fe fc6d 	bl	8010b9c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80122c2:	6879      	ldr	r1, [r7, #4]
 80122c4:	2003      	movs	r0, #3
 80122c6:	f7fd fdbb 	bl	800fe40 <memp_free>
  }
}
 80122ca:	bf00      	nop
 80122cc:	3708      	adds	r7, #8
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd80      	pop	{r7, pc}
	...

080122d4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b084      	sub	sp, #16
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d106      	bne.n	80122f0 <tcp_seg_copy+0x1c>
 80122e2:	4b0f      	ldr	r3, [pc, #60]	@ (8012320 <tcp_seg_copy+0x4c>)
 80122e4:	f240 6282 	movw	r2, #1666	@ 0x682
 80122e8:	490e      	ldr	r1, [pc, #56]	@ (8012324 <tcp_seg_copy+0x50>)
 80122ea:	480f      	ldr	r0, [pc, #60]	@ (8012328 <tcp_seg_copy+0x54>)
 80122ec:	f005 fa22 	bl	8017734 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80122f0:	2003      	movs	r0, #3
 80122f2:	f7fd fd2f 	bl	800fd54 <memp_malloc>
 80122f6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d101      	bne.n	8012302 <tcp_seg_copy+0x2e>
    return NULL;
 80122fe:	2300      	movs	r3, #0
 8012300:	e00a      	b.n	8012318 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012302:	2210      	movs	r2, #16
 8012304:	6879      	ldr	r1, [r7, #4]
 8012306:	68f8      	ldr	r0, [r7, #12]
 8012308:	f005 fbe1 	bl	8017ace <memcpy>
  pbuf_ref(cseg->p);
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	685b      	ldr	r3, [r3, #4]
 8012310:	4618      	mov	r0, r3
 8012312:	f7fe fce9 	bl	8010ce8 <pbuf_ref>
  return cseg;
 8012316:	68fb      	ldr	r3, [r7, #12]
}
 8012318:	4618      	mov	r0, r3
 801231a:	3710      	adds	r7, #16
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}
 8012320:	08019dd8 	.word	0x08019dd8
 8012324:	0801a360 	.word	0x0801a360
 8012328:	08019e50 	.word	0x08019e50

0801232c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b084      	sub	sp, #16
 8012330:	af00      	add	r7, sp, #0
 8012332:	60f8      	str	r0, [r7, #12]
 8012334:	60b9      	str	r1, [r7, #8]
 8012336:	607a      	str	r2, [r7, #4]
 8012338:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d109      	bne.n	8012354 <tcp_recv_null+0x28>
 8012340:	4b12      	ldr	r3, [pc, #72]	@ (801238c <tcp_recv_null+0x60>)
 8012342:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012346:	4912      	ldr	r1, [pc, #72]	@ (8012390 <tcp_recv_null+0x64>)
 8012348:	4812      	ldr	r0, [pc, #72]	@ (8012394 <tcp_recv_null+0x68>)
 801234a:	f005 f9f3 	bl	8017734 <iprintf>
 801234e:	f06f 030f 	mvn.w	r3, #15
 8012352:	e016      	b.n	8012382 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d009      	beq.n	801236e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	891b      	ldrh	r3, [r3, #8]
 801235e:	4619      	mov	r1, r3
 8012360:	68b8      	ldr	r0, [r7, #8]
 8012362:	f7ff fb17 	bl	8011994 <tcp_recved>
    pbuf_free(p);
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f7fe fc18 	bl	8010b9c <pbuf_free>
 801236c:	e008      	b.n	8012380 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801236e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d104      	bne.n	8012380 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012376:	68b8      	ldr	r0, [r7, #8]
 8012378:	f7ff f9bc 	bl	80116f4 <tcp_close>
 801237c:	4603      	mov	r3, r0
 801237e:	e000      	b.n	8012382 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012380:	2300      	movs	r3, #0
}
 8012382:	4618      	mov	r0, r3
 8012384:	3710      	adds	r7, #16
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}
 801238a:	bf00      	nop
 801238c:	08019dd8 	.word	0x08019dd8
 8012390:	0801a37c 	.word	0x0801a37c
 8012394:	08019e50 	.word	0x08019e50

08012398 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b086      	sub	sp, #24
 801239c:	af00      	add	r7, sp, #0
 801239e:	4603      	mov	r3, r0
 80123a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80123a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	db01      	blt.n	80123ae <tcp_kill_prio+0x16>
 80123aa:	79fb      	ldrb	r3, [r7, #7]
 80123ac:	e000      	b.n	80123b0 <tcp_kill_prio+0x18>
 80123ae:	237f      	movs	r3, #127	@ 0x7f
 80123b0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80123b2:	7afb      	ldrb	r3, [r7, #11]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d034      	beq.n	8012422 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80123b8:	7afb      	ldrb	r3, [r7, #11]
 80123ba:	3b01      	subs	r3, #1
 80123bc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80123be:	2300      	movs	r3, #0
 80123c0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80123c2:	2300      	movs	r3, #0
 80123c4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80123c6:	4b19      	ldr	r3, [pc, #100]	@ (801242c <tcp_kill_prio+0x94>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	617b      	str	r3, [r7, #20]
 80123cc:	e01f      	b.n	801240e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	7d5b      	ldrb	r3, [r3, #21]
 80123d2:	7afa      	ldrb	r2, [r7, #11]
 80123d4:	429a      	cmp	r2, r3
 80123d6:	d80c      	bhi.n	80123f2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80123dc:	7afa      	ldrb	r2, [r7, #11]
 80123de:	429a      	cmp	r2, r3
 80123e0:	d112      	bne.n	8012408 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80123e2:	4b13      	ldr	r3, [pc, #76]	@ (8012430 <tcp_kill_prio+0x98>)
 80123e4:	681a      	ldr	r2, [r3, #0]
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	6a1b      	ldr	r3, [r3, #32]
 80123ea:	1ad3      	subs	r3, r2, r3
 80123ec:	68fa      	ldr	r2, [r7, #12]
 80123ee:	429a      	cmp	r2, r3
 80123f0:	d80a      	bhi.n	8012408 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80123f2:	4b0f      	ldr	r3, [pc, #60]	@ (8012430 <tcp_kill_prio+0x98>)
 80123f4:	681a      	ldr	r2, [r3, #0]
 80123f6:	697b      	ldr	r3, [r7, #20]
 80123f8:	6a1b      	ldr	r3, [r3, #32]
 80123fa:	1ad3      	subs	r3, r2, r3
 80123fc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	7d5b      	ldrb	r3, [r3, #21]
 8012406:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012408:	697b      	ldr	r3, [r7, #20]
 801240a:	68db      	ldr	r3, [r3, #12]
 801240c:	617b      	str	r3, [r7, #20]
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d1dc      	bne.n	80123ce <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012414:	693b      	ldr	r3, [r7, #16]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d004      	beq.n	8012424 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801241a:	6938      	ldr	r0, [r7, #16]
 801241c:	f7ff fa54 	bl	80118c8 <tcp_abort>
 8012420:	e000      	b.n	8012424 <tcp_kill_prio+0x8c>
    return;
 8012422:	bf00      	nop
  }
}
 8012424:	3718      	adds	r7, #24
 8012426:	46bd      	mov	sp, r7
 8012428:	bd80      	pop	{r7, pc}
 801242a:	bf00      	nop
 801242c:	24007f0c 	.word	0x24007f0c
 8012430:	24007f00 	.word	0x24007f00

08012434 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b086      	sub	sp, #24
 8012438:	af00      	add	r7, sp, #0
 801243a:	4603      	mov	r3, r0
 801243c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801243e:	79fb      	ldrb	r3, [r7, #7]
 8012440:	2b08      	cmp	r3, #8
 8012442:	d009      	beq.n	8012458 <tcp_kill_state+0x24>
 8012444:	79fb      	ldrb	r3, [r7, #7]
 8012446:	2b09      	cmp	r3, #9
 8012448:	d006      	beq.n	8012458 <tcp_kill_state+0x24>
 801244a:	4b1a      	ldr	r3, [pc, #104]	@ (80124b4 <tcp_kill_state+0x80>)
 801244c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8012450:	4919      	ldr	r1, [pc, #100]	@ (80124b8 <tcp_kill_state+0x84>)
 8012452:	481a      	ldr	r0, [pc, #104]	@ (80124bc <tcp_kill_state+0x88>)
 8012454:	f005 f96e 	bl	8017734 <iprintf>

  inactivity = 0;
 8012458:	2300      	movs	r3, #0
 801245a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801245c:	2300      	movs	r3, #0
 801245e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012460:	4b17      	ldr	r3, [pc, #92]	@ (80124c0 <tcp_kill_state+0x8c>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	617b      	str	r3, [r7, #20]
 8012466:	e017      	b.n	8012498 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012468:	697b      	ldr	r3, [r7, #20]
 801246a:	7d1b      	ldrb	r3, [r3, #20]
 801246c:	79fa      	ldrb	r2, [r7, #7]
 801246e:	429a      	cmp	r2, r3
 8012470:	d10f      	bne.n	8012492 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012472:	4b14      	ldr	r3, [pc, #80]	@ (80124c4 <tcp_kill_state+0x90>)
 8012474:	681a      	ldr	r2, [r3, #0]
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	6a1b      	ldr	r3, [r3, #32]
 801247a:	1ad3      	subs	r3, r2, r3
 801247c:	68fa      	ldr	r2, [r7, #12]
 801247e:	429a      	cmp	r2, r3
 8012480:	d807      	bhi.n	8012492 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012482:	4b10      	ldr	r3, [pc, #64]	@ (80124c4 <tcp_kill_state+0x90>)
 8012484:	681a      	ldr	r2, [r3, #0]
 8012486:	697b      	ldr	r3, [r7, #20]
 8012488:	6a1b      	ldr	r3, [r3, #32]
 801248a:	1ad3      	subs	r3, r2, r3
 801248c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012492:	697b      	ldr	r3, [r7, #20]
 8012494:	68db      	ldr	r3, [r3, #12]
 8012496:	617b      	str	r3, [r7, #20]
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d1e4      	bne.n	8012468 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d003      	beq.n	80124ac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80124a4:	2100      	movs	r1, #0
 80124a6:	6938      	ldr	r0, [r7, #16]
 80124a8:	f7ff f950 	bl	801174c <tcp_abandon>
  }
}
 80124ac:	bf00      	nop
 80124ae:	3718      	adds	r7, #24
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}
 80124b4:	08019dd8 	.word	0x08019dd8
 80124b8:	0801a398 	.word	0x0801a398
 80124bc:	08019e50 	.word	0x08019e50
 80124c0:	24007f0c 	.word	0x24007f0c
 80124c4:	24007f00 	.word	0x24007f00

080124c8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b084      	sub	sp, #16
 80124cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80124ce:	2300      	movs	r3, #0
 80124d0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80124d2:	2300      	movs	r3, #0
 80124d4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80124d6:	4b12      	ldr	r3, [pc, #72]	@ (8012520 <tcp_kill_timewait+0x58>)
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	60fb      	str	r3, [r7, #12]
 80124dc:	e012      	b.n	8012504 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80124de:	4b11      	ldr	r3, [pc, #68]	@ (8012524 <tcp_kill_timewait+0x5c>)
 80124e0:	681a      	ldr	r2, [r3, #0]
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	6a1b      	ldr	r3, [r3, #32]
 80124e6:	1ad3      	subs	r3, r2, r3
 80124e8:	687a      	ldr	r2, [r7, #4]
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d807      	bhi.n	80124fe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80124ee:	4b0d      	ldr	r3, [pc, #52]	@ (8012524 <tcp_kill_timewait+0x5c>)
 80124f0:	681a      	ldr	r2, [r3, #0]
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	6a1b      	ldr	r3, [r3, #32]
 80124f6:	1ad3      	subs	r3, r2, r3
 80124f8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	68db      	ldr	r3, [r3, #12]
 8012502:	60fb      	str	r3, [r7, #12]
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d1e9      	bne.n	80124de <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d002      	beq.n	8012516 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012510:	68b8      	ldr	r0, [r7, #8]
 8012512:	f7ff f9d9 	bl	80118c8 <tcp_abort>
  }
}
 8012516:	bf00      	nop
 8012518:	3710      	adds	r7, #16
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	24007f10 	.word	0x24007f10
 8012524:	24007f00 	.word	0x24007f00

08012528 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b082      	sub	sp, #8
 801252c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801252e:	4b10      	ldr	r3, [pc, #64]	@ (8012570 <tcp_handle_closepend+0x48>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012534:	e014      	b.n	8012560 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	68db      	ldr	r3, [r3, #12]
 801253a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	8b5b      	ldrh	r3, [r3, #26]
 8012540:	f003 0308 	and.w	r3, r3, #8
 8012544:	2b00      	cmp	r3, #0
 8012546:	d009      	beq.n	801255c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	8b5b      	ldrh	r3, [r3, #26]
 801254c:	f023 0308 	bic.w	r3, r3, #8
 8012550:	b29a      	uxth	r2, r3
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f7ff f862 	bl	8011620 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d1e7      	bne.n	8012536 <tcp_handle_closepend+0xe>
  }
}
 8012566:	bf00      	nop
 8012568:	bf00      	nop
 801256a:	3708      	adds	r7, #8
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}
 8012570:	24007f0c 	.word	0x24007f0c

08012574 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b084      	sub	sp, #16
 8012578:	af00      	add	r7, sp, #0
 801257a:	4603      	mov	r3, r0
 801257c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801257e:	2001      	movs	r0, #1
 8012580:	f7fd fbe8 	bl	800fd54 <memp_malloc>
 8012584:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d126      	bne.n	80125da <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801258c:	f7ff ffcc 	bl	8012528 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012590:	f7ff ff9a 	bl	80124c8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012594:	2001      	movs	r0, #1
 8012596:	f7fd fbdd 	bl	800fd54 <memp_malloc>
 801259a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d11b      	bne.n	80125da <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80125a2:	2009      	movs	r0, #9
 80125a4:	f7ff ff46 	bl	8012434 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80125a8:	2001      	movs	r0, #1
 80125aa:	f7fd fbd3 	bl	800fd54 <memp_malloc>
 80125ae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d111      	bne.n	80125da <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80125b6:	2008      	movs	r0, #8
 80125b8:	f7ff ff3c 	bl	8012434 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80125bc:	2001      	movs	r0, #1
 80125be:	f7fd fbc9 	bl	800fd54 <memp_malloc>
 80125c2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d107      	bne.n	80125da <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80125ca:	79fb      	ldrb	r3, [r7, #7]
 80125cc:	4618      	mov	r0, r3
 80125ce:	f7ff fee3 	bl	8012398 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80125d2:	2001      	movs	r0, #1
 80125d4:	f7fd fbbe 	bl	800fd54 <memp_malloc>
 80125d8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d03f      	beq.n	8012660 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80125e0:	229c      	movs	r2, #156	@ 0x9c
 80125e2:	2100      	movs	r1, #0
 80125e4:	68f8      	ldr	r0, [r7, #12]
 80125e6:	f005 f9fd 	bl	80179e4 <memset>
    pcb->prio = prio;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	79fa      	ldrb	r2, [r7, #7]
 80125ee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80125f6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8012600:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	22ff      	movs	r2, #255	@ 0xff
 801260e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8012616:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	2206      	movs	r2, #6
 801261c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	2206      	movs	r2, #6
 8012624:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801262c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	2201      	movs	r2, #1
 8012632:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8012636:	4b0d      	ldr	r3, [pc, #52]	@ (801266c <tcp_alloc+0xf8>)
 8012638:	681a      	ldr	r2, [r3, #0]
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801263e:	4b0c      	ldr	r3, [pc, #48]	@ (8012670 <tcp_alloc+0xfc>)
 8012640:	781a      	ldrb	r2, [r3, #0]
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801264c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	4a08      	ldr	r2, [pc, #32]	@ (8012674 <tcp_alloc+0x100>)
 8012654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	4a07      	ldr	r2, [pc, #28]	@ (8012678 <tcp_alloc+0x104>)
 801265c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012660:	68fb      	ldr	r3, [r7, #12]
}
 8012662:	4618      	mov	r0, r3
 8012664:	3710      	adds	r7, #16
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}
 801266a:	bf00      	nop
 801266c:	24007f00 	.word	0x24007f00
 8012670:	24007f16 	.word	0x24007f16
 8012674:	0801232d 	.word	0x0801232d
 8012678:	006ddd00 	.word	0x006ddd00

0801267c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b082      	sub	sp, #8
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d107      	bne.n	801269a <tcp_pcb_purge+0x1e>
 801268a:	4b21      	ldr	r3, [pc, #132]	@ (8012710 <tcp_pcb_purge+0x94>)
 801268c:	f640 0251 	movw	r2, #2129	@ 0x851
 8012690:	4920      	ldr	r1, [pc, #128]	@ (8012714 <tcp_pcb_purge+0x98>)
 8012692:	4821      	ldr	r0, [pc, #132]	@ (8012718 <tcp_pcb_purge+0x9c>)
 8012694:	f005 f84e 	bl	8017734 <iprintf>
 8012698:	e037      	b.n	801270a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	7d1b      	ldrb	r3, [r3, #20]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d033      	beq.n	801270a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80126a6:	2b0a      	cmp	r3, #10
 80126a8:	d02f      	beq.n	801270a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80126ae:	2b01      	cmp	r3, #1
 80126b0:	d02b      	beq.n	801270a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d007      	beq.n	80126ca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80126be:	4618      	mov	r0, r3
 80126c0:	f7fe fa6c 	bl	8010b9c <pbuf_free>
      pcb->refused_data = NULL;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2200      	movs	r2, #0
 80126c8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d002      	beq.n	80126d8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	f000 f986 	bl	80129e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80126de:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126e4:	4618      	mov	r0, r3
 80126e6:	f7ff fdc7 	bl	8012278 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80126ee:	4618      	mov	r0, r3
 80126f0:	f7ff fdc2 	bl	8012278 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	2200      	movs	r2, #0
 80126f8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2200      	movs	r2, #0
 8012706:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801270a:	3708      	adds	r7, #8
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}
 8012710:	08019dd8 	.word	0x08019dd8
 8012714:	0801a458 	.word	0x0801a458
 8012718:	08019e50 	.word	0x08019e50

0801271c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b084      	sub	sp, #16
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
 8012724:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d106      	bne.n	801273a <tcp_pcb_remove+0x1e>
 801272c:	4b3e      	ldr	r3, [pc, #248]	@ (8012828 <tcp_pcb_remove+0x10c>)
 801272e:	f640 0283 	movw	r2, #2179	@ 0x883
 8012732:	493e      	ldr	r1, [pc, #248]	@ (801282c <tcp_pcb_remove+0x110>)
 8012734:	483e      	ldr	r0, [pc, #248]	@ (8012830 <tcp_pcb_remove+0x114>)
 8012736:	f004 fffd 	bl	8017734 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d106      	bne.n	801274e <tcp_pcb_remove+0x32>
 8012740:	4b39      	ldr	r3, [pc, #228]	@ (8012828 <tcp_pcb_remove+0x10c>)
 8012742:	f640 0284 	movw	r2, #2180	@ 0x884
 8012746:	493b      	ldr	r1, [pc, #236]	@ (8012834 <tcp_pcb_remove+0x118>)
 8012748:	4839      	ldr	r0, [pc, #228]	@ (8012830 <tcp_pcb_remove+0x114>)
 801274a:	f004 fff3 	bl	8017734 <iprintf>

  TCP_RMV(pcblist, pcb);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	683a      	ldr	r2, [r7, #0]
 8012754:	429a      	cmp	r2, r3
 8012756:	d105      	bne.n	8012764 <tcp_pcb_remove+0x48>
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	68da      	ldr	r2, [r3, #12]
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	601a      	str	r2, [r3, #0]
 8012762:	e013      	b.n	801278c <tcp_pcb_remove+0x70>
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	60fb      	str	r3, [r7, #12]
 801276a:	e00c      	b.n	8012786 <tcp_pcb_remove+0x6a>
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	68db      	ldr	r3, [r3, #12]
 8012770:	683a      	ldr	r2, [r7, #0]
 8012772:	429a      	cmp	r2, r3
 8012774:	d104      	bne.n	8012780 <tcp_pcb_remove+0x64>
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	68da      	ldr	r2, [r3, #12]
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	60da      	str	r2, [r3, #12]
 801277e:	e005      	b.n	801278c <tcp_pcb_remove+0x70>
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	68db      	ldr	r3, [r3, #12]
 8012784:	60fb      	str	r3, [r7, #12]
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d1ef      	bne.n	801276c <tcp_pcb_remove+0x50>
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	2200      	movs	r2, #0
 8012790:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012792:	6838      	ldr	r0, [r7, #0]
 8012794:	f7ff ff72 	bl	801267c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	7d1b      	ldrb	r3, [r3, #20]
 801279c:	2b0a      	cmp	r3, #10
 801279e:	d013      	beq.n	80127c8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	d00f      	beq.n	80127c8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	8b5b      	ldrh	r3, [r3, #26]
 80127ac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d009      	beq.n	80127c8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	8b5b      	ldrh	r3, [r3, #26]
 80127b8:	f043 0302 	orr.w	r3, r3, #2
 80127bc:	b29a      	uxth	r2, r3
 80127be:	683b      	ldr	r3, [r7, #0]
 80127c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80127c2:	6838      	ldr	r0, [r7, #0]
 80127c4:	f002 ff68 	bl	8015698 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	7d1b      	ldrb	r3, [r3, #20]
 80127cc:	2b01      	cmp	r3, #1
 80127ce:	d020      	beq.n	8012812 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d006      	beq.n	80127e6 <tcp_pcb_remove+0xca>
 80127d8:	4b13      	ldr	r3, [pc, #76]	@ (8012828 <tcp_pcb_remove+0x10c>)
 80127da:	f640 0293 	movw	r2, #2195	@ 0x893
 80127de:	4916      	ldr	r1, [pc, #88]	@ (8012838 <tcp_pcb_remove+0x11c>)
 80127e0:	4813      	ldr	r0, [pc, #76]	@ (8012830 <tcp_pcb_remove+0x114>)
 80127e2:	f004 ffa7 	bl	8017734 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d006      	beq.n	80127fc <tcp_pcb_remove+0xe0>
 80127ee:	4b0e      	ldr	r3, [pc, #56]	@ (8012828 <tcp_pcb_remove+0x10c>)
 80127f0:	f640 0294 	movw	r2, #2196	@ 0x894
 80127f4:	4911      	ldr	r1, [pc, #68]	@ (801283c <tcp_pcb_remove+0x120>)
 80127f6:	480e      	ldr	r0, [pc, #56]	@ (8012830 <tcp_pcb_remove+0x114>)
 80127f8:	f004 ff9c 	bl	8017734 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012800:	2b00      	cmp	r3, #0
 8012802:	d006      	beq.n	8012812 <tcp_pcb_remove+0xf6>
 8012804:	4b08      	ldr	r3, [pc, #32]	@ (8012828 <tcp_pcb_remove+0x10c>)
 8012806:	f640 0296 	movw	r2, #2198	@ 0x896
 801280a:	490d      	ldr	r1, [pc, #52]	@ (8012840 <tcp_pcb_remove+0x124>)
 801280c:	4808      	ldr	r0, [pc, #32]	@ (8012830 <tcp_pcb_remove+0x114>)
 801280e:	f004 ff91 	bl	8017734 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	2200      	movs	r2, #0
 8012816:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	2200      	movs	r2, #0
 801281c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801281e:	bf00      	nop
 8012820:	3710      	adds	r7, #16
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}
 8012826:	bf00      	nop
 8012828:	08019dd8 	.word	0x08019dd8
 801282c:	0801a474 	.word	0x0801a474
 8012830:	08019e50 	.word	0x08019e50
 8012834:	0801a490 	.word	0x0801a490
 8012838:	0801a4b0 	.word	0x0801a4b0
 801283c:	0801a4c8 	.word	0x0801a4c8
 8012840:	0801a4e4 	.word	0x0801a4e4

08012844 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b082      	sub	sp, #8
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d106      	bne.n	8012860 <tcp_next_iss+0x1c>
 8012852:	4b0a      	ldr	r3, [pc, #40]	@ (801287c <tcp_next_iss+0x38>)
 8012854:	f640 02af 	movw	r2, #2223	@ 0x8af
 8012858:	4909      	ldr	r1, [pc, #36]	@ (8012880 <tcp_next_iss+0x3c>)
 801285a:	480a      	ldr	r0, [pc, #40]	@ (8012884 <tcp_next_iss+0x40>)
 801285c:	f004 ff6a 	bl	8017734 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012860:	4b09      	ldr	r3, [pc, #36]	@ (8012888 <tcp_next_iss+0x44>)
 8012862:	681a      	ldr	r2, [r3, #0]
 8012864:	4b09      	ldr	r3, [pc, #36]	@ (801288c <tcp_next_iss+0x48>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	4413      	add	r3, r2
 801286a:	4a07      	ldr	r2, [pc, #28]	@ (8012888 <tcp_next_iss+0x44>)
 801286c:	6013      	str	r3, [r2, #0]
  return iss;
 801286e:	4b06      	ldr	r3, [pc, #24]	@ (8012888 <tcp_next_iss+0x44>)
 8012870:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8012872:	4618      	mov	r0, r3
 8012874:	3708      	adds	r7, #8
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}
 801287a:	bf00      	nop
 801287c:	08019dd8 	.word	0x08019dd8
 8012880:	0801a4fc 	.word	0x0801a4fc
 8012884:	08019e50 	.word	0x08019e50
 8012888:	2400004c 	.word	0x2400004c
 801288c:	24007f00 	.word	0x24007f00

08012890 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b086      	sub	sp, #24
 8012894:	af00      	add	r7, sp, #0
 8012896:	4603      	mov	r3, r0
 8012898:	60b9      	str	r1, [r7, #8]
 801289a:	607a      	str	r2, [r7, #4]
 801289c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d106      	bne.n	80128b2 <tcp_eff_send_mss_netif+0x22>
 80128a4:	4b14      	ldr	r3, [pc, #80]	@ (80128f8 <tcp_eff_send_mss_netif+0x68>)
 80128a6:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80128aa:	4914      	ldr	r1, [pc, #80]	@ (80128fc <tcp_eff_send_mss_netif+0x6c>)
 80128ac:	4814      	ldr	r0, [pc, #80]	@ (8012900 <tcp_eff_send_mss_netif+0x70>)
 80128ae:	f004 ff41 	bl	8017734 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80128b2:	68bb      	ldr	r3, [r7, #8]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d101      	bne.n	80128bc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80128b8:	89fb      	ldrh	r3, [r7, #14]
 80128ba:	e019      	b.n	80128f0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80128bc:	68bb      	ldr	r3, [r7, #8]
 80128be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80128c0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80128c2:	8afb      	ldrh	r3, [r7, #22]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d012      	beq.n	80128ee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80128c8:	2328      	movs	r3, #40	@ 0x28
 80128ca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80128cc:	8afa      	ldrh	r2, [r7, #22]
 80128ce:	8abb      	ldrh	r3, [r7, #20]
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d904      	bls.n	80128de <tcp_eff_send_mss_netif+0x4e>
 80128d4:	8afa      	ldrh	r2, [r7, #22]
 80128d6:	8abb      	ldrh	r3, [r7, #20]
 80128d8:	1ad3      	subs	r3, r2, r3
 80128da:	b29b      	uxth	r3, r3
 80128dc:	e000      	b.n	80128e0 <tcp_eff_send_mss_netif+0x50>
 80128de:	2300      	movs	r3, #0
 80128e0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80128e2:	8a7a      	ldrh	r2, [r7, #18]
 80128e4:	89fb      	ldrh	r3, [r7, #14]
 80128e6:	4293      	cmp	r3, r2
 80128e8:	bf28      	it	cs
 80128ea:	4613      	movcs	r3, r2
 80128ec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80128ee:	89fb      	ldrh	r3, [r7, #14]
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3718      	adds	r7, #24
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}
 80128f8:	08019dd8 	.word	0x08019dd8
 80128fc:	0801a518 	.word	0x0801a518
 8012900:	08019e50 	.word	0x08019e50

08012904 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b084      	sub	sp, #16
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
 801290c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d119      	bne.n	801294c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012918:	4b10      	ldr	r3, [pc, #64]	@ (801295c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801291a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801291e:	4910      	ldr	r1, [pc, #64]	@ (8012960 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012920:	4810      	ldr	r0, [pc, #64]	@ (8012964 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012922:	f004 ff07 	bl	8017734 <iprintf>

  while (pcb != NULL) {
 8012926:	e011      	b.n	801294c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	681a      	ldr	r2, [r3, #0]
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	429a      	cmp	r2, r3
 8012932:	d108      	bne.n	8012946 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	68db      	ldr	r3, [r3, #12]
 8012938:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801293a:	68f8      	ldr	r0, [r7, #12]
 801293c:	f7fe ffc4 	bl	80118c8 <tcp_abort>
      pcb = next;
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	60fb      	str	r3, [r7, #12]
 8012944:	e002      	b.n	801294c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	68db      	ldr	r3, [r3, #12]
 801294a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d1ea      	bne.n	8012928 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012952:	bf00      	nop
 8012954:	bf00      	nop
 8012956:	3710      	adds	r7, #16
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}
 801295c:	08019dd8 	.word	0x08019dd8
 8012960:	0801a540 	.word	0x0801a540
 8012964:	08019e50 	.word	0x08019e50

08012968 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b084      	sub	sp, #16
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d02a      	beq.n	80129ce <tcp_netif_ip_addr_changed+0x66>
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d026      	beq.n	80129ce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012980:	4b15      	ldr	r3, [pc, #84]	@ (80129d8 <tcp_netif_ip_addr_changed+0x70>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	4619      	mov	r1, r3
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	f7ff ffbc 	bl	8012904 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801298c:	4b13      	ldr	r3, [pc, #76]	@ (80129dc <tcp_netif_ip_addr_changed+0x74>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	4619      	mov	r1, r3
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f7ff ffb6 	bl	8012904 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d017      	beq.n	80129ce <tcp_netif_ip_addr_changed+0x66>
 801299e:	683b      	ldr	r3, [r7, #0]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d013      	beq.n	80129ce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80129a6:	4b0e      	ldr	r3, [pc, #56]	@ (80129e0 <tcp_netif_ip_addr_changed+0x78>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	60fb      	str	r3, [r7, #12]
 80129ac:	e00c      	b.n	80129c8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	681a      	ldr	r2, [r3, #0]
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	429a      	cmp	r2, r3
 80129b8:	d103      	bne.n	80129c2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	681a      	ldr	r2, [r3, #0]
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	68db      	ldr	r3, [r3, #12]
 80129c6:	60fb      	str	r3, [r7, #12]
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d1ef      	bne.n	80129ae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80129ce:	bf00      	nop
 80129d0:	3710      	adds	r7, #16
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bd80      	pop	{r7, pc}
 80129d6:	bf00      	nop
 80129d8:	24007f0c 	.word	0x24007f0c
 80129dc:	24007f04 	.word	0x24007f04
 80129e0:	24007f08 	.word	0x24007f08

080129e4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b082      	sub	sp, #8
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d007      	beq.n	8012a04 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80129f8:	4618      	mov	r0, r3
 80129fa:	f7ff fc3d 	bl	8012278 <tcp_segs_free>
    pcb->ooseq = NULL;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2200      	movs	r2, #0
 8012a02:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012a04:	bf00      	nop
 8012a06:	3708      	adds	r7, #8
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}

08012a0c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012a0c:	b590      	push	{r4, r7, lr}
 8012a0e:	b08d      	sub	sp, #52	@ 0x34
 8012a10:	af04      	add	r7, sp, #16
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d105      	bne.n	8012a28 <tcp_input+0x1c>
 8012a1c:	4b9b      	ldr	r3, [pc, #620]	@ (8012c8c <tcp_input+0x280>)
 8012a1e:	2283      	movs	r2, #131	@ 0x83
 8012a20:	499b      	ldr	r1, [pc, #620]	@ (8012c90 <tcp_input+0x284>)
 8012a22:	489c      	ldr	r0, [pc, #624]	@ (8012c94 <tcp_input+0x288>)
 8012a24:	f004 fe86 	bl	8017734 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	685b      	ldr	r3, [r3, #4]
 8012a2c:	4a9a      	ldr	r2, [pc, #616]	@ (8012c98 <tcp_input+0x28c>)
 8012a2e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	895b      	ldrh	r3, [r3, #10]
 8012a34:	2b13      	cmp	r3, #19
 8012a36:	f240 83d1 	bls.w	80131dc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012a3a:	4b98      	ldr	r3, [pc, #608]	@ (8012c9c <tcp_input+0x290>)
 8012a3c:	695b      	ldr	r3, [r3, #20]
 8012a3e:	4a97      	ldr	r2, [pc, #604]	@ (8012c9c <tcp_input+0x290>)
 8012a40:	6812      	ldr	r2, [r2, #0]
 8012a42:	4611      	mov	r1, r2
 8012a44:	4618      	mov	r0, r3
 8012a46:	f7fb fe09 	bl	800e65c <ip4_addr_isbroadcast_u32>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	f040 83c7 	bne.w	80131e0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012a52:	4b92      	ldr	r3, [pc, #584]	@ (8012c9c <tcp_input+0x290>)
 8012a54:	695b      	ldr	r3, [r3, #20]
 8012a56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012a5a:	2be0      	cmp	r3, #224	@ 0xe0
 8012a5c:	f000 83c0 	beq.w	80131e0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012a60:	4b8d      	ldr	r3, [pc, #564]	@ (8012c98 <tcp_input+0x28c>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	899b      	ldrh	r3, [r3, #12]
 8012a66:	b29b      	uxth	r3, r3
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f7f8 f9db 	bl	800ae24 <lwip_htons>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	0b1b      	lsrs	r3, r3, #12
 8012a72:	b29b      	uxth	r3, r3
 8012a74:	b2db      	uxtb	r3, r3
 8012a76:	009b      	lsls	r3, r3, #2
 8012a78:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012a7a:	7cbb      	ldrb	r3, [r7, #18]
 8012a7c:	2b13      	cmp	r3, #19
 8012a7e:	f240 83b1 	bls.w	80131e4 <tcp_input+0x7d8>
 8012a82:	7cbb      	ldrb	r3, [r7, #18]
 8012a84:	b29a      	uxth	r2, r3
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	891b      	ldrh	r3, [r3, #8]
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	f200 83aa 	bhi.w	80131e4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012a90:	7cbb      	ldrb	r3, [r7, #18]
 8012a92:	b29b      	uxth	r3, r3
 8012a94:	3b14      	subs	r3, #20
 8012a96:	b29a      	uxth	r2, r3
 8012a98:	4b81      	ldr	r3, [pc, #516]	@ (8012ca0 <tcp_input+0x294>)
 8012a9a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012a9c:	4b81      	ldr	r3, [pc, #516]	@ (8012ca4 <tcp_input+0x298>)
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	895a      	ldrh	r2, [r3, #10]
 8012aa6:	7cbb      	ldrb	r3, [r7, #18]
 8012aa8:	b29b      	uxth	r3, r3
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d309      	bcc.n	8012ac2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012aae:	4b7c      	ldr	r3, [pc, #496]	@ (8012ca0 <tcp_input+0x294>)
 8012ab0:	881a      	ldrh	r2, [r3, #0]
 8012ab2:	4b7d      	ldr	r3, [pc, #500]	@ (8012ca8 <tcp_input+0x29c>)
 8012ab4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012ab6:	7cbb      	ldrb	r3, [r7, #18]
 8012ab8:	4619      	mov	r1, r3
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	f7fd ffe8 	bl	8010a90 <pbuf_remove_header>
 8012ac0:	e04e      	b.n	8012b60 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d105      	bne.n	8012ad6 <tcp_input+0xca>
 8012aca:	4b70      	ldr	r3, [pc, #448]	@ (8012c8c <tcp_input+0x280>)
 8012acc:	22c2      	movs	r2, #194	@ 0xc2
 8012ace:	4977      	ldr	r1, [pc, #476]	@ (8012cac <tcp_input+0x2a0>)
 8012ad0:	4870      	ldr	r0, [pc, #448]	@ (8012c94 <tcp_input+0x288>)
 8012ad2:	f004 fe2f 	bl	8017734 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012ad6:	2114      	movs	r1, #20
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f7fd ffd9 	bl	8010a90 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	895a      	ldrh	r2, [r3, #10]
 8012ae2:	4b71      	ldr	r3, [pc, #452]	@ (8012ca8 <tcp_input+0x29c>)
 8012ae4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012ae6:	4b6e      	ldr	r3, [pc, #440]	@ (8012ca0 <tcp_input+0x294>)
 8012ae8:	881a      	ldrh	r2, [r3, #0]
 8012aea:	4b6f      	ldr	r3, [pc, #444]	@ (8012ca8 <tcp_input+0x29c>)
 8012aec:	881b      	ldrh	r3, [r3, #0]
 8012aee:	1ad3      	subs	r3, r2, r3
 8012af0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012af2:	4b6d      	ldr	r3, [pc, #436]	@ (8012ca8 <tcp_input+0x29c>)
 8012af4:	881b      	ldrh	r3, [r3, #0]
 8012af6:	4619      	mov	r1, r3
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f7fd ffc9 	bl	8010a90 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	895b      	ldrh	r3, [r3, #10]
 8012b04:	8a3a      	ldrh	r2, [r7, #16]
 8012b06:	429a      	cmp	r2, r3
 8012b08:	f200 836e 	bhi.w	80131e8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	685b      	ldr	r3, [r3, #4]
 8012b12:	4a64      	ldr	r2, [pc, #400]	@ (8012ca4 <tcp_input+0x298>)
 8012b14:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	8a3a      	ldrh	r2, [r7, #16]
 8012b1c:	4611      	mov	r1, r2
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f7fd ffb6 	bl	8010a90 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	891a      	ldrh	r2, [r3, #8]
 8012b28:	8a3b      	ldrh	r3, [r7, #16]
 8012b2a:	1ad3      	subs	r3, r2, r3
 8012b2c:	b29a      	uxth	r2, r3
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	895b      	ldrh	r3, [r3, #10]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d005      	beq.n	8012b46 <tcp_input+0x13a>
 8012b3a:	4b54      	ldr	r3, [pc, #336]	@ (8012c8c <tcp_input+0x280>)
 8012b3c:	22df      	movs	r2, #223	@ 0xdf
 8012b3e:	495c      	ldr	r1, [pc, #368]	@ (8012cb0 <tcp_input+0x2a4>)
 8012b40:	4854      	ldr	r0, [pc, #336]	@ (8012c94 <tcp_input+0x288>)
 8012b42:	f004 fdf7 	bl	8017734 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	891a      	ldrh	r2, [r3, #8]
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	891b      	ldrh	r3, [r3, #8]
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d005      	beq.n	8012b60 <tcp_input+0x154>
 8012b54:	4b4d      	ldr	r3, [pc, #308]	@ (8012c8c <tcp_input+0x280>)
 8012b56:	22e0      	movs	r2, #224	@ 0xe0
 8012b58:	4956      	ldr	r1, [pc, #344]	@ (8012cb4 <tcp_input+0x2a8>)
 8012b5a:	484e      	ldr	r0, [pc, #312]	@ (8012c94 <tcp_input+0x288>)
 8012b5c:	f004 fdea 	bl	8017734 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012b60:	4b4d      	ldr	r3, [pc, #308]	@ (8012c98 <tcp_input+0x28c>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	881b      	ldrh	r3, [r3, #0]
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	4a4b      	ldr	r2, [pc, #300]	@ (8012c98 <tcp_input+0x28c>)
 8012b6a:	6814      	ldr	r4, [r2, #0]
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f7f8 f959 	bl	800ae24 <lwip_htons>
 8012b72:	4603      	mov	r3, r0
 8012b74:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012b76:	4b48      	ldr	r3, [pc, #288]	@ (8012c98 <tcp_input+0x28c>)
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	885b      	ldrh	r3, [r3, #2]
 8012b7c:	b29b      	uxth	r3, r3
 8012b7e:	4a46      	ldr	r2, [pc, #280]	@ (8012c98 <tcp_input+0x28c>)
 8012b80:	6814      	ldr	r4, [r2, #0]
 8012b82:	4618      	mov	r0, r3
 8012b84:	f7f8 f94e 	bl	800ae24 <lwip_htons>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012b8c:	4b42      	ldr	r3, [pc, #264]	@ (8012c98 <tcp_input+0x28c>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	685b      	ldr	r3, [r3, #4]
 8012b92:	4a41      	ldr	r2, [pc, #260]	@ (8012c98 <tcp_input+0x28c>)
 8012b94:	6814      	ldr	r4, [r2, #0]
 8012b96:	4618      	mov	r0, r3
 8012b98:	f7f8 f959 	bl	800ae4e <lwip_htonl>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	6063      	str	r3, [r4, #4]
 8012ba0:	6863      	ldr	r3, [r4, #4]
 8012ba2:	4a45      	ldr	r2, [pc, #276]	@ (8012cb8 <tcp_input+0x2ac>)
 8012ba4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012ba6:	4b3c      	ldr	r3, [pc, #240]	@ (8012c98 <tcp_input+0x28c>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	689b      	ldr	r3, [r3, #8]
 8012bac:	4a3a      	ldr	r2, [pc, #232]	@ (8012c98 <tcp_input+0x28c>)
 8012bae:	6814      	ldr	r4, [r2, #0]
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f7f8 f94c 	bl	800ae4e <lwip_htonl>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	60a3      	str	r3, [r4, #8]
 8012bba:	68a3      	ldr	r3, [r4, #8]
 8012bbc:	4a3f      	ldr	r2, [pc, #252]	@ (8012cbc <tcp_input+0x2b0>)
 8012bbe:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012bc0:	4b35      	ldr	r3, [pc, #212]	@ (8012c98 <tcp_input+0x28c>)
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	89db      	ldrh	r3, [r3, #14]
 8012bc6:	b29b      	uxth	r3, r3
 8012bc8:	4a33      	ldr	r2, [pc, #204]	@ (8012c98 <tcp_input+0x28c>)
 8012bca:	6814      	ldr	r4, [r2, #0]
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7f8 f929 	bl	800ae24 <lwip_htons>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012bd6:	4b30      	ldr	r3, [pc, #192]	@ (8012c98 <tcp_input+0x28c>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	899b      	ldrh	r3, [r3, #12]
 8012bdc:	b29b      	uxth	r3, r3
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7f8 f920 	bl	800ae24 <lwip_htons>
 8012be4:	4603      	mov	r3, r0
 8012be6:	b2db      	uxtb	r3, r3
 8012be8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012bec:	b2da      	uxtb	r2, r3
 8012bee:	4b34      	ldr	r3, [pc, #208]	@ (8012cc0 <tcp_input+0x2b4>)
 8012bf0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	891a      	ldrh	r2, [r3, #8]
 8012bf6:	4b33      	ldr	r3, [pc, #204]	@ (8012cc4 <tcp_input+0x2b8>)
 8012bf8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012bfa:	4b31      	ldr	r3, [pc, #196]	@ (8012cc0 <tcp_input+0x2b4>)
 8012bfc:	781b      	ldrb	r3, [r3, #0]
 8012bfe:	f003 0303 	and.w	r3, r3, #3
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d00c      	beq.n	8012c20 <tcp_input+0x214>
    tcplen++;
 8012c06:	4b2f      	ldr	r3, [pc, #188]	@ (8012cc4 <tcp_input+0x2b8>)
 8012c08:	881b      	ldrh	r3, [r3, #0]
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	b29a      	uxth	r2, r3
 8012c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8012cc4 <tcp_input+0x2b8>)
 8012c10:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	891a      	ldrh	r2, [r3, #8]
 8012c16:	4b2b      	ldr	r3, [pc, #172]	@ (8012cc4 <tcp_input+0x2b8>)
 8012c18:	881b      	ldrh	r3, [r3, #0]
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	f200 82e6 	bhi.w	80131ec <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012c20:	2300      	movs	r3, #0
 8012c22:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c24:	4b28      	ldr	r3, [pc, #160]	@ (8012cc8 <tcp_input+0x2bc>)
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	61fb      	str	r3, [r7, #28]
 8012c2a:	e09d      	b.n	8012d68 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012c2c:	69fb      	ldr	r3, [r7, #28]
 8012c2e:	7d1b      	ldrb	r3, [r3, #20]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d105      	bne.n	8012c40 <tcp_input+0x234>
 8012c34:	4b15      	ldr	r3, [pc, #84]	@ (8012c8c <tcp_input+0x280>)
 8012c36:	22fb      	movs	r2, #251	@ 0xfb
 8012c38:	4924      	ldr	r1, [pc, #144]	@ (8012ccc <tcp_input+0x2c0>)
 8012c3a:	4816      	ldr	r0, [pc, #88]	@ (8012c94 <tcp_input+0x288>)
 8012c3c:	f004 fd7a 	bl	8017734 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012c40:	69fb      	ldr	r3, [r7, #28]
 8012c42:	7d1b      	ldrb	r3, [r3, #20]
 8012c44:	2b0a      	cmp	r3, #10
 8012c46:	d105      	bne.n	8012c54 <tcp_input+0x248>
 8012c48:	4b10      	ldr	r3, [pc, #64]	@ (8012c8c <tcp_input+0x280>)
 8012c4a:	22fc      	movs	r2, #252	@ 0xfc
 8012c4c:	4920      	ldr	r1, [pc, #128]	@ (8012cd0 <tcp_input+0x2c4>)
 8012c4e:	4811      	ldr	r0, [pc, #68]	@ (8012c94 <tcp_input+0x288>)
 8012c50:	f004 fd70 	bl	8017734 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012c54:	69fb      	ldr	r3, [r7, #28]
 8012c56:	7d1b      	ldrb	r3, [r3, #20]
 8012c58:	2b01      	cmp	r3, #1
 8012c5a:	d105      	bne.n	8012c68 <tcp_input+0x25c>
 8012c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8012c8c <tcp_input+0x280>)
 8012c5e:	22fd      	movs	r2, #253	@ 0xfd
 8012c60:	491c      	ldr	r1, [pc, #112]	@ (8012cd4 <tcp_input+0x2c8>)
 8012c62:	480c      	ldr	r0, [pc, #48]	@ (8012c94 <tcp_input+0x288>)
 8012c64:	f004 fd66 	bl	8017734 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c68:	69fb      	ldr	r3, [r7, #28]
 8012c6a:	7a1b      	ldrb	r3, [r3, #8]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d033      	beq.n	8012cd8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012c70:	69fb      	ldr	r3, [r7, #28]
 8012c72:	7a1a      	ldrb	r2, [r3, #8]
 8012c74:	4b09      	ldr	r3, [pc, #36]	@ (8012c9c <tcp_input+0x290>)
 8012c76:	685b      	ldr	r3, [r3, #4]
 8012c78:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012c7c:	3301      	adds	r3, #1
 8012c7e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c80:	429a      	cmp	r2, r3
 8012c82:	d029      	beq.n	8012cd8 <tcp_input+0x2cc>
      prev = pcb;
 8012c84:	69fb      	ldr	r3, [r7, #28]
 8012c86:	61bb      	str	r3, [r7, #24]
      continue;
 8012c88:	e06b      	b.n	8012d62 <tcp_input+0x356>
 8012c8a:	bf00      	nop
 8012c8c:	0801a574 	.word	0x0801a574
 8012c90:	0801a5d8 	.word	0x0801a5d8
 8012c94:	0801a5f0 	.word	0x0801a5f0
 8012c98:	24007f28 	.word	0x24007f28
 8012c9c:	24004dcc 	.word	0x24004dcc
 8012ca0:	24007f2c 	.word	0x24007f2c
 8012ca4:	24007f30 	.word	0x24007f30
 8012ca8:	24007f2e 	.word	0x24007f2e
 8012cac:	0801a618 	.word	0x0801a618
 8012cb0:	0801a628 	.word	0x0801a628
 8012cb4:	0801a634 	.word	0x0801a634
 8012cb8:	24007f38 	.word	0x24007f38
 8012cbc:	24007f3c 	.word	0x24007f3c
 8012cc0:	24007f44 	.word	0x24007f44
 8012cc4:	24007f42 	.word	0x24007f42
 8012cc8:	24007f0c 	.word	0x24007f0c
 8012ccc:	0801a654 	.word	0x0801a654
 8012cd0:	0801a67c 	.word	0x0801a67c
 8012cd4:	0801a6a8 	.word	0x0801a6a8
    }

    if (pcb->remote_port == tcphdr->src &&
 8012cd8:	69fb      	ldr	r3, [r7, #28]
 8012cda:	8b1a      	ldrh	r2, [r3, #24]
 8012cdc:	4b72      	ldr	r3, [pc, #456]	@ (8012ea8 <tcp_input+0x49c>)
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	881b      	ldrh	r3, [r3, #0]
 8012ce2:	b29b      	uxth	r3, r3
 8012ce4:	429a      	cmp	r2, r3
 8012ce6:	d13a      	bne.n	8012d5e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012ce8:	69fb      	ldr	r3, [r7, #28]
 8012cea:	8ada      	ldrh	r2, [r3, #22]
 8012cec:	4b6e      	ldr	r3, [pc, #440]	@ (8012ea8 <tcp_input+0x49c>)
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	885b      	ldrh	r3, [r3, #2]
 8012cf2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d132      	bne.n	8012d5e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012cf8:	69fb      	ldr	r3, [r7, #28]
 8012cfa:	685a      	ldr	r2, [r3, #4]
 8012cfc:	4b6b      	ldr	r3, [pc, #428]	@ (8012eac <tcp_input+0x4a0>)
 8012cfe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012d00:	429a      	cmp	r2, r3
 8012d02:	d12c      	bne.n	8012d5e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012d04:	69fb      	ldr	r3, [r7, #28]
 8012d06:	681a      	ldr	r2, [r3, #0]
 8012d08:	4b68      	ldr	r3, [pc, #416]	@ (8012eac <tcp_input+0x4a0>)
 8012d0a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	d126      	bne.n	8012d5e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012d10:	69fb      	ldr	r3, [r7, #28]
 8012d12:	68db      	ldr	r3, [r3, #12]
 8012d14:	69fa      	ldr	r2, [r7, #28]
 8012d16:	429a      	cmp	r2, r3
 8012d18:	d106      	bne.n	8012d28 <tcp_input+0x31c>
 8012d1a:	4b65      	ldr	r3, [pc, #404]	@ (8012eb0 <tcp_input+0x4a4>)
 8012d1c:	f240 120d 	movw	r2, #269	@ 0x10d
 8012d20:	4964      	ldr	r1, [pc, #400]	@ (8012eb4 <tcp_input+0x4a8>)
 8012d22:	4865      	ldr	r0, [pc, #404]	@ (8012eb8 <tcp_input+0x4ac>)
 8012d24:	f004 fd06 	bl	8017734 <iprintf>
      if (prev != NULL) {
 8012d28:	69bb      	ldr	r3, [r7, #24]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d00a      	beq.n	8012d44 <tcp_input+0x338>
        prev->next = pcb->next;
 8012d2e:	69fb      	ldr	r3, [r7, #28]
 8012d30:	68da      	ldr	r2, [r3, #12]
 8012d32:	69bb      	ldr	r3, [r7, #24]
 8012d34:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012d36:	4b61      	ldr	r3, [pc, #388]	@ (8012ebc <tcp_input+0x4b0>)
 8012d38:	681a      	ldr	r2, [r3, #0]
 8012d3a:	69fb      	ldr	r3, [r7, #28]
 8012d3c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012d3e:	4a5f      	ldr	r2, [pc, #380]	@ (8012ebc <tcp_input+0x4b0>)
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012d44:	69fb      	ldr	r3, [r7, #28]
 8012d46:	68db      	ldr	r3, [r3, #12]
 8012d48:	69fa      	ldr	r2, [r7, #28]
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	d111      	bne.n	8012d72 <tcp_input+0x366>
 8012d4e:	4b58      	ldr	r3, [pc, #352]	@ (8012eb0 <tcp_input+0x4a4>)
 8012d50:	f240 1215 	movw	r2, #277	@ 0x115
 8012d54:	495a      	ldr	r1, [pc, #360]	@ (8012ec0 <tcp_input+0x4b4>)
 8012d56:	4858      	ldr	r0, [pc, #352]	@ (8012eb8 <tcp_input+0x4ac>)
 8012d58:	f004 fcec 	bl	8017734 <iprintf>
      break;
 8012d5c:	e009      	b.n	8012d72 <tcp_input+0x366>
    }
    prev = pcb;
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d62:	69fb      	ldr	r3, [r7, #28]
 8012d64:	68db      	ldr	r3, [r3, #12]
 8012d66:	61fb      	str	r3, [r7, #28]
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	f47f af5e 	bne.w	8012c2c <tcp_input+0x220>
 8012d70:	e000      	b.n	8012d74 <tcp_input+0x368>
      break;
 8012d72:	bf00      	nop
  }

  if (pcb == NULL) {
 8012d74:	69fb      	ldr	r3, [r7, #28]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	f040 80aa 	bne.w	8012ed0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d7c:	4b51      	ldr	r3, [pc, #324]	@ (8012ec4 <tcp_input+0x4b8>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	61fb      	str	r3, [r7, #28]
 8012d82:	e03f      	b.n	8012e04 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012d84:	69fb      	ldr	r3, [r7, #28]
 8012d86:	7d1b      	ldrb	r3, [r3, #20]
 8012d88:	2b0a      	cmp	r3, #10
 8012d8a:	d006      	beq.n	8012d9a <tcp_input+0x38e>
 8012d8c:	4b48      	ldr	r3, [pc, #288]	@ (8012eb0 <tcp_input+0x4a4>)
 8012d8e:	f240 121f 	movw	r2, #287	@ 0x11f
 8012d92:	494d      	ldr	r1, [pc, #308]	@ (8012ec8 <tcp_input+0x4bc>)
 8012d94:	4848      	ldr	r0, [pc, #288]	@ (8012eb8 <tcp_input+0x4ac>)
 8012d96:	f004 fccd 	bl	8017734 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d9a:	69fb      	ldr	r3, [r7, #28]
 8012d9c:	7a1b      	ldrb	r3, [r3, #8]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d009      	beq.n	8012db6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012da2:	69fb      	ldr	r3, [r7, #28]
 8012da4:	7a1a      	ldrb	r2, [r3, #8]
 8012da6:	4b41      	ldr	r3, [pc, #260]	@ (8012eac <tcp_input+0x4a0>)
 8012da8:	685b      	ldr	r3, [r3, #4]
 8012daa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012dae:	3301      	adds	r3, #1
 8012db0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012db2:	429a      	cmp	r2, r3
 8012db4:	d122      	bne.n	8012dfc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012db6:	69fb      	ldr	r3, [r7, #28]
 8012db8:	8b1a      	ldrh	r2, [r3, #24]
 8012dba:	4b3b      	ldr	r3, [pc, #236]	@ (8012ea8 <tcp_input+0x49c>)
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	881b      	ldrh	r3, [r3, #0]
 8012dc0:	b29b      	uxth	r3, r3
 8012dc2:	429a      	cmp	r2, r3
 8012dc4:	d11b      	bne.n	8012dfe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012dc6:	69fb      	ldr	r3, [r7, #28]
 8012dc8:	8ada      	ldrh	r2, [r3, #22]
 8012dca:	4b37      	ldr	r3, [pc, #220]	@ (8012ea8 <tcp_input+0x49c>)
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	885b      	ldrh	r3, [r3, #2]
 8012dd0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	d113      	bne.n	8012dfe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012dd6:	69fb      	ldr	r3, [r7, #28]
 8012dd8:	685a      	ldr	r2, [r3, #4]
 8012dda:	4b34      	ldr	r3, [pc, #208]	@ (8012eac <tcp_input+0x4a0>)
 8012ddc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012dde:	429a      	cmp	r2, r3
 8012de0:	d10d      	bne.n	8012dfe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012de2:	69fb      	ldr	r3, [r7, #28]
 8012de4:	681a      	ldr	r2, [r3, #0]
 8012de6:	4b31      	ldr	r3, [pc, #196]	@ (8012eac <tcp_input+0x4a0>)
 8012de8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012dea:	429a      	cmp	r2, r3
 8012dec:	d107      	bne.n	8012dfe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012dee:	69f8      	ldr	r0, [r7, #28]
 8012df0:	f000 fb56 	bl	80134a0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f7fd fed1 	bl	8010b9c <pbuf_free>
        return;
 8012dfa:	e1fd      	b.n	80131f8 <tcp_input+0x7ec>
        continue;
 8012dfc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012dfe:	69fb      	ldr	r3, [r7, #28]
 8012e00:	68db      	ldr	r3, [r3, #12]
 8012e02:	61fb      	str	r3, [r7, #28]
 8012e04:	69fb      	ldr	r3, [r7, #28]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d1bc      	bne.n	8012d84 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8012ecc <tcp_input+0x4c0>)
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	617b      	str	r3, [r7, #20]
 8012e14:	e02a      	b.n	8012e6c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012e16:	697b      	ldr	r3, [r7, #20]
 8012e18:	7a1b      	ldrb	r3, [r3, #8]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d00c      	beq.n	8012e38 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	7a1a      	ldrb	r2, [r3, #8]
 8012e22:	4b22      	ldr	r3, [pc, #136]	@ (8012eac <tcp_input+0x4a0>)
 8012e24:	685b      	ldr	r3, [r3, #4]
 8012e26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012e2a:	3301      	adds	r3, #1
 8012e2c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012e2e:	429a      	cmp	r2, r3
 8012e30:	d002      	beq.n	8012e38 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012e32:	697b      	ldr	r3, [r7, #20]
 8012e34:	61bb      	str	r3, [r7, #24]
        continue;
 8012e36:	e016      	b.n	8012e66 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012e38:	697b      	ldr	r3, [r7, #20]
 8012e3a:	8ada      	ldrh	r2, [r3, #22]
 8012e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8012ea8 <tcp_input+0x49c>)
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	885b      	ldrh	r3, [r3, #2]
 8012e42:	b29b      	uxth	r3, r3
 8012e44:	429a      	cmp	r2, r3
 8012e46:	d10c      	bne.n	8012e62 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012e48:	697b      	ldr	r3, [r7, #20]
 8012e4a:	681a      	ldr	r2, [r3, #0]
 8012e4c:	4b17      	ldr	r3, [pc, #92]	@ (8012eac <tcp_input+0x4a0>)
 8012e4e:	695b      	ldr	r3, [r3, #20]
 8012e50:	429a      	cmp	r2, r3
 8012e52:	d00f      	beq.n	8012e74 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012e54:	697b      	ldr	r3, [r7, #20]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d00d      	beq.n	8012e76 <tcp_input+0x46a>
 8012e5a:	697b      	ldr	r3, [r7, #20]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d009      	beq.n	8012e76 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012e62:	697b      	ldr	r3, [r7, #20]
 8012e64:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	68db      	ldr	r3, [r3, #12]
 8012e6a:	617b      	str	r3, [r7, #20]
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d1d1      	bne.n	8012e16 <tcp_input+0x40a>
 8012e72:	e000      	b.n	8012e76 <tcp_input+0x46a>
            break;
 8012e74:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d029      	beq.n	8012ed0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012e7c:	69bb      	ldr	r3, [r7, #24]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d00a      	beq.n	8012e98 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012e82:	697b      	ldr	r3, [r7, #20]
 8012e84:	68da      	ldr	r2, [r3, #12]
 8012e86:	69bb      	ldr	r3, [r7, #24]
 8012e88:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012e8a:	4b10      	ldr	r3, [pc, #64]	@ (8012ecc <tcp_input+0x4c0>)
 8012e8c:	681a      	ldr	r2, [r3, #0]
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012e92:	4a0e      	ldr	r2, [pc, #56]	@ (8012ecc <tcp_input+0x4c0>)
 8012e94:	697b      	ldr	r3, [r7, #20]
 8012e96:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012e98:	6978      	ldr	r0, [r7, #20]
 8012e9a:	f000 fa03 	bl	80132a4 <tcp_listen_input>
      }
      pbuf_free(p);
 8012e9e:	6878      	ldr	r0, [r7, #4]
 8012ea0:	f7fd fe7c 	bl	8010b9c <pbuf_free>
      return;
 8012ea4:	e1a8      	b.n	80131f8 <tcp_input+0x7ec>
 8012ea6:	bf00      	nop
 8012ea8:	24007f28 	.word	0x24007f28
 8012eac:	24004dcc 	.word	0x24004dcc
 8012eb0:	0801a574 	.word	0x0801a574
 8012eb4:	0801a6d0 	.word	0x0801a6d0
 8012eb8:	0801a5f0 	.word	0x0801a5f0
 8012ebc:	24007f0c 	.word	0x24007f0c
 8012ec0:	0801a6fc 	.word	0x0801a6fc
 8012ec4:	24007f10 	.word	0x24007f10
 8012ec8:	0801a728 	.word	0x0801a728
 8012ecc:	24007f08 	.word	0x24007f08
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012ed0:	69fb      	ldr	r3, [r7, #28]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	f000 8158 	beq.w	8013188 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012ed8:	4b95      	ldr	r3, [pc, #596]	@ (8013130 <tcp_input+0x724>)
 8012eda:	2200      	movs	r2, #0
 8012edc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	891a      	ldrh	r2, [r3, #8]
 8012ee2:	4b93      	ldr	r3, [pc, #588]	@ (8013130 <tcp_input+0x724>)
 8012ee4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012ee6:	4a92      	ldr	r2, [pc, #584]	@ (8013130 <tcp_input+0x724>)
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012eec:	4b91      	ldr	r3, [pc, #580]	@ (8013134 <tcp_input+0x728>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	4a8f      	ldr	r2, [pc, #572]	@ (8013130 <tcp_input+0x724>)
 8012ef2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012ef4:	4b90      	ldr	r3, [pc, #576]	@ (8013138 <tcp_input+0x72c>)
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012efa:	4b90      	ldr	r3, [pc, #576]	@ (801313c <tcp_input+0x730>)
 8012efc:	2200      	movs	r2, #0
 8012efe:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012f00:	4b8f      	ldr	r3, [pc, #572]	@ (8013140 <tcp_input+0x734>)
 8012f02:	2200      	movs	r2, #0
 8012f04:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012f06:	4b8f      	ldr	r3, [pc, #572]	@ (8013144 <tcp_input+0x738>)
 8012f08:	781b      	ldrb	r3, [r3, #0]
 8012f0a:	f003 0308 	and.w	r3, r3, #8
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d006      	beq.n	8012f20 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	7b5b      	ldrb	r3, [r3, #13]
 8012f16:	f043 0301 	orr.w	r3, r3, #1
 8012f1a:	b2da      	uxtb	r2, r3
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012f20:	69fb      	ldr	r3, [r7, #28]
 8012f22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d017      	beq.n	8012f58 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012f28:	69f8      	ldr	r0, [r7, #28]
 8012f2a:	f7ff f929 	bl	8012180 <tcp_process_refused_data>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	f113 0f0d 	cmn.w	r3, #13
 8012f34:	d007      	beq.n	8012f46 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012f36:	69fb      	ldr	r3, [r7, #28]
 8012f38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d00c      	beq.n	8012f58 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012f3e:	4b82      	ldr	r3, [pc, #520]	@ (8013148 <tcp_input+0x73c>)
 8012f40:	881b      	ldrh	r3, [r3, #0]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d008      	beq.n	8012f58 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012f46:	69fb      	ldr	r3, [r7, #28]
 8012f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	f040 80e3 	bne.w	8013116 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012f50:	69f8      	ldr	r0, [r7, #28]
 8012f52:	f003 f9a7 	bl	80162a4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012f56:	e0de      	b.n	8013116 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8012f58:	4a7c      	ldr	r2, [pc, #496]	@ (801314c <tcp_input+0x740>)
 8012f5a:	69fb      	ldr	r3, [r7, #28]
 8012f5c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012f5e:	69f8      	ldr	r0, [r7, #28]
 8012f60:	f000 fb18 	bl	8013594 <tcp_process>
 8012f64:	4603      	mov	r3, r0
 8012f66:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012f68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f6c:	f113 0f0d 	cmn.w	r3, #13
 8012f70:	f000 80d3 	beq.w	801311a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8012f74:	4b71      	ldr	r3, [pc, #452]	@ (801313c <tcp_input+0x730>)
 8012f76:	781b      	ldrb	r3, [r3, #0]
 8012f78:	f003 0308 	and.w	r3, r3, #8
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d015      	beq.n	8012fac <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012f80:	69fb      	ldr	r3, [r7, #28]
 8012f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d008      	beq.n	8012f9c <tcp_input+0x590>
 8012f8a:	69fb      	ldr	r3, [r7, #28]
 8012f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012f90:	69fa      	ldr	r2, [r7, #28]
 8012f92:	6912      	ldr	r2, [r2, #16]
 8012f94:	f06f 010d 	mvn.w	r1, #13
 8012f98:	4610      	mov	r0, r2
 8012f9a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012f9c:	69f9      	ldr	r1, [r7, #28]
 8012f9e:	486c      	ldr	r0, [pc, #432]	@ (8013150 <tcp_input+0x744>)
 8012fa0:	f7ff fbbc 	bl	801271c <tcp_pcb_remove>
        tcp_free(pcb);
 8012fa4:	69f8      	ldr	r0, [r7, #28]
 8012fa6:	f7fe f9a7 	bl	80112f8 <tcp_free>
 8012faa:	e0da      	b.n	8013162 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012fac:	2300      	movs	r3, #0
 8012fae:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012fb0:	4b63      	ldr	r3, [pc, #396]	@ (8013140 <tcp_input+0x734>)
 8012fb2:	881b      	ldrh	r3, [r3, #0]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d01d      	beq.n	8012ff4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012fb8:	4b61      	ldr	r3, [pc, #388]	@ (8013140 <tcp_input+0x734>)
 8012fba:	881b      	ldrh	r3, [r3, #0]
 8012fbc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012fbe:	69fb      	ldr	r3, [r7, #28]
 8012fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d00a      	beq.n	8012fde <tcp_input+0x5d2>
 8012fc8:	69fb      	ldr	r3, [r7, #28]
 8012fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012fce:	69fa      	ldr	r2, [r7, #28]
 8012fd0:	6910      	ldr	r0, [r2, #16]
 8012fd2:	89fa      	ldrh	r2, [r7, #14]
 8012fd4:	69f9      	ldr	r1, [r7, #28]
 8012fd6:	4798      	blx	r3
 8012fd8:	4603      	mov	r3, r0
 8012fda:	74fb      	strb	r3, [r7, #19]
 8012fdc:	e001      	b.n	8012fe2 <tcp_input+0x5d6>
 8012fde:	2300      	movs	r3, #0
 8012fe0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012fe2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012fe6:	f113 0f0d 	cmn.w	r3, #13
 8012fea:	f000 8098 	beq.w	801311e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012fee:	4b54      	ldr	r3, [pc, #336]	@ (8013140 <tcp_input+0x734>)
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012ff4:	69f8      	ldr	r0, [r7, #28]
 8012ff6:	f000 f915 	bl	8013224 <tcp_input_delayed_close>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	f040 8090 	bne.w	8013122 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013002:	4b4d      	ldr	r3, [pc, #308]	@ (8013138 <tcp_input+0x72c>)
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d041      	beq.n	801308e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801300a:	69fb      	ldr	r3, [r7, #28]
 801300c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801300e:	2b00      	cmp	r3, #0
 8013010:	d006      	beq.n	8013020 <tcp_input+0x614>
 8013012:	4b50      	ldr	r3, [pc, #320]	@ (8013154 <tcp_input+0x748>)
 8013014:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8013018:	494f      	ldr	r1, [pc, #316]	@ (8013158 <tcp_input+0x74c>)
 801301a:	4850      	ldr	r0, [pc, #320]	@ (801315c <tcp_input+0x750>)
 801301c:	f004 fb8a 	bl	8017734 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013020:	69fb      	ldr	r3, [r7, #28]
 8013022:	8b5b      	ldrh	r3, [r3, #26]
 8013024:	f003 0310 	and.w	r3, r3, #16
 8013028:	2b00      	cmp	r3, #0
 801302a:	d008      	beq.n	801303e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801302c:	4b42      	ldr	r3, [pc, #264]	@ (8013138 <tcp_input+0x72c>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	4618      	mov	r0, r3
 8013032:	f7fd fdb3 	bl	8010b9c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013036:	69f8      	ldr	r0, [r7, #28]
 8013038:	f7fe fc46 	bl	80118c8 <tcp_abort>
            goto aborted;
 801303c:	e091      	b.n	8013162 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801303e:	69fb      	ldr	r3, [r7, #28]
 8013040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013044:	2b00      	cmp	r3, #0
 8013046:	d00c      	beq.n	8013062 <tcp_input+0x656>
 8013048:	69fb      	ldr	r3, [r7, #28]
 801304a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	6918      	ldr	r0, [r3, #16]
 8013052:	4b39      	ldr	r3, [pc, #228]	@ (8013138 <tcp_input+0x72c>)
 8013054:	681a      	ldr	r2, [r3, #0]
 8013056:	2300      	movs	r3, #0
 8013058:	69f9      	ldr	r1, [r7, #28]
 801305a:	47a0      	blx	r4
 801305c:	4603      	mov	r3, r0
 801305e:	74fb      	strb	r3, [r7, #19]
 8013060:	e008      	b.n	8013074 <tcp_input+0x668>
 8013062:	4b35      	ldr	r3, [pc, #212]	@ (8013138 <tcp_input+0x72c>)
 8013064:	681a      	ldr	r2, [r3, #0]
 8013066:	2300      	movs	r3, #0
 8013068:	69f9      	ldr	r1, [r7, #28]
 801306a:	2000      	movs	r0, #0
 801306c:	f7ff f95e 	bl	801232c <tcp_recv_null>
 8013070:	4603      	mov	r3, r0
 8013072:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013074:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013078:	f113 0f0d 	cmn.w	r3, #13
 801307c:	d053      	beq.n	8013126 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801307e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d003      	beq.n	801308e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013086:	4b2c      	ldr	r3, [pc, #176]	@ (8013138 <tcp_input+0x72c>)
 8013088:	681a      	ldr	r2, [r3, #0]
 801308a:	69fb      	ldr	r3, [r7, #28]
 801308c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801308e:	4b2b      	ldr	r3, [pc, #172]	@ (801313c <tcp_input+0x730>)
 8013090:	781b      	ldrb	r3, [r3, #0]
 8013092:	f003 0320 	and.w	r3, r3, #32
 8013096:	2b00      	cmp	r3, #0
 8013098:	d030      	beq.n	80130fc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801309a:	69fb      	ldr	r3, [r7, #28]
 801309c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d009      	beq.n	80130b6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80130a2:	69fb      	ldr	r3, [r7, #28]
 80130a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80130a6:	7b5a      	ldrb	r2, [r3, #13]
 80130a8:	69fb      	ldr	r3, [r7, #28]
 80130aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80130ac:	f042 0220 	orr.w	r2, r2, #32
 80130b0:	b2d2      	uxtb	r2, r2
 80130b2:	735a      	strb	r2, [r3, #13]
 80130b4:	e022      	b.n	80130fc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80130b6:	69fb      	ldr	r3, [r7, #28]
 80130b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130ba:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80130be:	d005      	beq.n	80130cc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80130c0:	69fb      	ldr	r3, [r7, #28]
 80130c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130c4:	3301      	adds	r3, #1
 80130c6:	b29a      	uxth	r2, r3
 80130c8:	69fb      	ldr	r3, [r7, #28]
 80130ca:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80130cc:	69fb      	ldr	r3, [r7, #28]
 80130ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d00b      	beq.n	80130ee <tcp_input+0x6e2>
 80130d6:	69fb      	ldr	r3, [r7, #28]
 80130d8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80130dc:	69fb      	ldr	r3, [r7, #28]
 80130de:	6918      	ldr	r0, [r3, #16]
 80130e0:	2300      	movs	r3, #0
 80130e2:	2200      	movs	r2, #0
 80130e4:	69f9      	ldr	r1, [r7, #28]
 80130e6:	47a0      	blx	r4
 80130e8:	4603      	mov	r3, r0
 80130ea:	74fb      	strb	r3, [r7, #19]
 80130ec:	e001      	b.n	80130f2 <tcp_input+0x6e6>
 80130ee:	2300      	movs	r3, #0
 80130f0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80130f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80130f6:	f113 0f0d 	cmn.w	r3, #13
 80130fa:	d016      	beq.n	801312a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80130fc:	4b13      	ldr	r3, [pc, #76]	@ (801314c <tcp_input+0x740>)
 80130fe:	2200      	movs	r2, #0
 8013100:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013102:	69f8      	ldr	r0, [r7, #28]
 8013104:	f000 f88e 	bl	8013224 <tcp_input_delayed_close>
 8013108:	4603      	mov	r3, r0
 801310a:	2b00      	cmp	r3, #0
 801310c:	d128      	bne.n	8013160 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801310e:	69f8      	ldr	r0, [r7, #28]
 8013110:	f002 fac2 	bl	8015698 <tcp_output>
 8013114:	e025      	b.n	8013162 <tcp_input+0x756>
        goto aborted;
 8013116:	bf00      	nop
 8013118:	e023      	b.n	8013162 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801311a:	bf00      	nop
 801311c:	e021      	b.n	8013162 <tcp_input+0x756>
              goto aborted;
 801311e:	bf00      	nop
 8013120:	e01f      	b.n	8013162 <tcp_input+0x756>
          goto aborted;
 8013122:	bf00      	nop
 8013124:	e01d      	b.n	8013162 <tcp_input+0x756>
            goto aborted;
 8013126:	bf00      	nop
 8013128:	e01b      	b.n	8013162 <tcp_input+0x756>
              goto aborted;
 801312a:	bf00      	nop
 801312c:	e019      	b.n	8013162 <tcp_input+0x756>
 801312e:	bf00      	nop
 8013130:	24007f18 	.word	0x24007f18
 8013134:	24007f28 	.word	0x24007f28
 8013138:	24007f48 	.word	0x24007f48
 801313c:	24007f45 	.word	0x24007f45
 8013140:	24007f40 	.word	0x24007f40
 8013144:	24007f44 	.word	0x24007f44
 8013148:	24007f42 	.word	0x24007f42
 801314c:	24007f4c 	.word	0x24007f4c
 8013150:	24007f0c 	.word	0x24007f0c
 8013154:	0801a574 	.word	0x0801a574
 8013158:	0801a758 	.word	0x0801a758
 801315c:	0801a5f0 	.word	0x0801a5f0
          goto aborted;
 8013160:	bf00      	nop
    tcp_input_pcb = NULL;
 8013162:	4b27      	ldr	r3, [pc, #156]	@ (8013200 <tcp_input+0x7f4>)
 8013164:	2200      	movs	r2, #0
 8013166:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013168:	4b26      	ldr	r3, [pc, #152]	@ (8013204 <tcp_input+0x7f8>)
 801316a:	2200      	movs	r2, #0
 801316c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801316e:	4b26      	ldr	r3, [pc, #152]	@ (8013208 <tcp_input+0x7fc>)
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d03f      	beq.n	80131f6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013176:	4b24      	ldr	r3, [pc, #144]	@ (8013208 <tcp_input+0x7fc>)
 8013178:	685b      	ldr	r3, [r3, #4]
 801317a:	4618      	mov	r0, r3
 801317c:	f7fd fd0e 	bl	8010b9c <pbuf_free>
      inseg.p = NULL;
 8013180:	4b21      	ldr	r3, [pc, #132]	@ (8013208 <tcp_input+0x7fc>)
 8013182:	2200      	movs	r2, #0
 8013184:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013186:	e036      	b.n	80131f6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013188:	4b20      	ldr	r3, [pc, #128]	@ (801320c <tcp_input+0x800>)
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	899b      	ldrh	r3, [r3, #12]
 801318e:	b29b      	uxth	r3, r3
 8013190:	4618      	mov	r0, r3
 8013192:	f7f7 fe47 	bl	800ae24 <lwip_htons>
 8013196:	4603      	mov	r3, r0
 8013198:	b2db      	uxtb	r3, r3
 801319a:	f003 0304 	and.w	r3, r3, #4
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d118      	bne.n	80131d4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80131a2:	4b1b      	ldr	r3, [pc, #108]	@ (8013210 <tcp_input+0x804>)
 80131a4:	6819      	ldr	r1, [r3, #0]
 80131a6:	4b1b      	ldr	r3, [pc, #108]	@ (8013214 <tcp_input+0x808>)
 80131a8:	881b      	ldrh	r3, [r3, #0]
 80131aa:	461a      	mov	r2, r3
 80131ac:	4b1a      	ldr	r3, [pc, #104]	@ (8013218 <tcp_input+0x80c>)
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80131b2:	4b16      	ldr	r3, [pc, #88]	@ (801320c <tcp_input+0x800>)
 80131b4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80131b6:	885b      	ldrh	r3, [r3, #2]
 80131b8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80131ba:	4a14      	ldr	r2, [pc, #80]	@ (801320c <tcp_input+0x800>)
 80131bc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80131be:	8812      	ldrh	r2, [r2, #0]
 80131c0:	b292      	uxth	r2, r2
 80131c2:	9202      	str	r2, [sp, #8]
 80131c4:	9301      	str	r3, [sp, #4]
 80131c6:	4b15      	ldr	r3, [pc, #84]	@ (801321c <tcp_input+0x810>)
 80131c8:	9300      	str	r3, [sp, #0]
 80131ca:	4b15      	ldr	r3, [pc, #84]	@ (8013220 <tcp_input+0x814>)
 80131cc:	4602      	mov	r2, r0
 80131ce:	2000      	movs	r0, #0
 80131d0:	f003 f816 	bl	8016200 <tcp_rst>
    pbuf_free(p);
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	f7fd fce1 	bl	8010b9c <pbuf_free>
  return;
 80131da:	e00c      	b.n	80131f6 <tcp_input+0x7ea>
    goto dropped;
 80131dc:	bf00      	nop
 80131de:	e006      	b.n	80131ee <tcp_input+0x7e2>
    goto dropped;
 80131e0:	bf00      	nop
 80131e2:	e004      	b.n	80131ee <tcp_input+0x7e2>
    goto dropped;
 80131e4:	bf00      	nop
 80131e6:	e002      	b.n	80131ee <tcp_input+0x7e2>
      goto dropped;
 80131e8:	bf00      	nop
 80131ea:	e000      	b.n	80131ee <tcp_input+0x7e2>
      goto dropped;
 80131ec:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80131ee:	6878      	ldr	r0, [r7, #4]
 80131f0:	f7fd fcd4 	bl	8010b9c <pbuf_free>
 80131f4:	e000      	b.n	80131f8 <tcp_input+0x7ec>
  return;
 80131f6:	bf00      	nop
}
 80131f8:	3724      	adds	r7, #36	@ 0x24
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bd90      	pop	{r4, r7, pc}
 80131fe:	bf00      	nop
 8013200:	24007f4c 	.word	0x24007f4c
 8013204:	24007f48 	.word	0x24007f48
 8013208:	24007f18 	.word	0x24007f18
 801320c:	24007f28 	.word	0x24007f28
 8013210:	24007f3c 	.word	0x24007f3c
 8013214:	24007f42 	.word	0x24007f42
 8013218:	24007f38 	.word	0x24007f38
 801321c:	24004ddc 	.word	0x24004ddc
 8013220:	24004de0 	.word	0x24004de0

08013224 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b082      	sub	sp, #8
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d106      	bne.n	8013240 <tcp_input_delayed_close+0x1c>
 8013232:	4b17      	ldr	r3, [pc, #92]	@ (8013290 <tcp_input_delayed_close+0x6c>)
 8013234:	f240 225a 	movw	r2, #602	@ 0x25a
 8013238:	4916      	ldr	r1, [pc, #88]	@ (8013294 <tcp_input_delayed_close+0x70>)
 801323a:	4817      	ldr	r0, [pc, #92]	@ (8013298 <tcp_input_delayed_close+0x74>)
 801323c:	f004 fa7a 	bl	8017734 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013240:	4b16      	ldr	r3, [pc, #88]	@ (801329c <tcp_input_delayed_close+0x78>)
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	f003 0310 	and.w	r3, r3, #16
 8013248:	2b00      	cmp	r3, #0
 801324a:	d01c      	beq.n	8013286 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	8b5b      	ldrh	r3, [r3, #26]
 8013250:	f003 0310 	and.w	r3, r3, #16
 8013254:	2b00      	cmp	r3, #0
 8013256:	d10d      	bne.n	8013274 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801325e:	2b00      	cmp	r3, #0
 8013260:	d008      	beq.n	8013274 <tcp_input_delayed_close+0x50>
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013268:	687a      	ldr	r2, [r7, #4]
 801326a:	6912      	ldr	r2, [r2, #16]
 801326c:	f06f 010e 	mvn.w	r1, #14
 8013270:	4610      	mov	r0, r2
 8013272:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013274:	6879      	ldr	r1, [r7, #4]
 8013276:	480a      	ldr	r0, [pc, #40]	@ (80132a0 <tcp_input_delayed_close+0x7c>)
 8013278:	f7ff fa50 	bl	801271c <tcp_pcb_remove>
    tcp_free(pcb);
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f7fe f83b 	bl	80112f8 <tcp_free>
    return 1;
 8013282:	2301      	movs	r3, #1
 8013284:	e000      	b.n	8013288 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013286:	2300      	movs	r3, #0
}
 8013288:	4618      	mov	r0, r3
 801328a:	3708      	adds	r7, #8
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}
 8013290:	0801a574 	.word	0x0801a574
 8013294:	0801a774 	.word	0x0801a774
 8013298:	0801a5f0 	.word	0x0801a5f0
 801329c:	24007f45 	.word	0x24007f45
 80132a0:	24007f0c 	.word	0x24007f0c

080132a4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80132a4:	b590      	push	{r4, r7, lr}
 80132a6:	b08b      	sub	sp, #44	@ 0x2c
 80132a8:	af04      	add	r7, sp, #16
 80132aa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80132ac:	4b6f      	ldr	r3, [pc, #444]	@ (801346c <tcp_listen_input+0x1c8>)
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	f003 0304 	and.w	r3, r3, #4
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	f040 80d2 	bne.w	801345e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d106      	bne.n	80132ce <tcp_listen_input+0x2a>
 80132c0:	4b6b      	ldr	r3, [pc, #428]	@ (8013470 <tcp_listen_input+0x1cc>)
 80132c2:	f240 2281 	movw	r2, #641	@ 0x281
 80132c6:	496b      	ldr	r1, [pc, #428]	@ (8013474 <tcp_listen_input+0x1d0>)
 80132c8:	486b      	ldr	r0, [pc, #428]	@ (8013478 <tcp_listen_input+0x1d4>)
 80132ca:	f004 fa33 	bl	8017734 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80132ce:	4b67      	ldr	r3, [pc, #412]	@ (801346c <tcp_listen_input+0x1c8>)
 80132d0:	781b      	ldrb	r3, [r3, #0]
 80132d2:	f003 0310 	and.w	r3, r3, #16
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d019      	beq.n	801330e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132da:	4b68      	ldr	r3, [pc, #416]	@ (801347c <tcp_listen_input+0x1d8>)
 80132dc:	6819      	ldr	r1, [r3, #0]
 80132de:	4b68      	ldr	r3, [pc, #416]	@ (8013480 <tcp_listen_input+0x1dc>)
 80132e0:	881b      	ldrh	r3, [r3, #0]
 80132e2:	461a      	mov	r2, r3
 80132e4:	4b67      	ldr	r3, [pc, #412]	@ (8013484 <tcp_listen_input+0x1e0>)
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132ea:	4b67      	ldr	r3, [pc, #412]	@ (8013488 <tcp_listen_input+0x1e4>)
 80132ec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132ee:	885b      	ldrh	r3, [r3, #2]
 80132f0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132f2:	4a65      	ldr	r2, [pc, #404]	@ (8013488 <tcp_listen_input+0x1e4>)
 80132f4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132f6:	8812      	ldrh	r2, [r2, #0]
 80132f8:	b292      	uxth	r2, r2
 80132fa:	9202      	str	r2, [sp, #8]
 80132fc:	9301      	str	r3, [sp, #4]
 80132fe:	4b63      	ldr	r3, [pc, #396]	@ (801348c <tcp_listen_input+0x1e8>)
 8013300:	9300      	str	r3, [sp, #0]
 8013302:	4b63      	ldr	r3, [pc, #396]	@ (8013490 <tcp_listen_input+0x1ec>)
 8013304:	4602      	mov	r2, r0
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f002 ff7a 	bl	8016200 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801330c:	e0a9      	b.n	8013462 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801330e:	4b57      	ldr	r3, [pc, #348]	@ (801346c <tcp_listen_input+0x1c8>)
 8013310:	781b      	ldrb	r3, [r3, #0]
 8013312:	f003 0302 	and.w	r3, r3, #2
 8013316:	2b00      	cmp	r3, #0
 8013318:	f000 80a3 	beq.w	8013462 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	7d5b      	ldrb	r3, [r3, #21]
 8013320:	4618      	mov	r0, r3
 8013322:	f7ff f927 	bl	8012574 <tcp_alloc>
 8013326:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013328:	697b      	ldr	r3, [r7, #20]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d111      	bne.n	8013352 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	699b      	ldr	r3, [r3, #24]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d00a      	beq.n	801334c <tcp_listen_input+0xa8>
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	699b      	ldr	r3, [r3, #24]
 801333a:	687a      	ldr	r2, [r7, #4]
 801333c:	6910      	ldr	r0, [r2, #16]
 801333e:	f04f 32ff 	mov.w	r2, #4294967295
 8013342:	2100      	movs	r1, #0
 8013344:	4798      	blx	r3
 8013346:	4603      	mov	r3, r0
 8013348:	73bb      	strb	r3, [r7, #14]
      return;
 801334a:	e08b      	b.n	8013464 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801334c:	23f0      	movs	r3, #240	@ 0xf0
 801334e:	73bb      	strb	r3, [r7, #14]
      return;
 8013350:	e088      	b.n	8013464 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013352:	4b50      	ldr	r3, [pc, #320]	@ (8013494 <tcp_listen_input+0x1f0>)
 8013354:	695a      	ldr	r2, [r3, #20]
 8013356:	697b      	ldr	r3, [r7, #20]
 8013358:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801335a:	4b4e      	ldr	r3, [pc, #312]	@ (8013494 <tcp_listen_input+0x1f0>)
 801335c:	691a      	ldr	r2, [r3, #16]
 801335e:	697b      	ldr	r3, [r7, #20]
 8013360:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	8ada      	ldrh	r2, [r3, #22]
 8013366:	697b      	ldr	r3, [r7, #20]
 8013368:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801336a:	4b47      	ldr	r3, [pc, #284]	@ (8013488 <tcp_listen_input+0x1e4>)
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	881b      	ldrh	r3, [r3, #0]
 8013370:	b29a      	uxth	r2, r3
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	2203      	movs	r2, #3
 801337a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801337c:	4b41      	ldr	r3, [pc, #260]	@ (8013484 <tcp_listen_input+0x1e0>)
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	1c5a      	adds	r2, r3, #1
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801338e:	6978      	ldr	r0, [r7, #20]
 8013390:	f7ff fa58 	bl	8012844 <tcp_next_iss>
 8013394:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	693a      	ldr	r2, [r7, #16]
 801339a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 801339c:	697b      	ldr	r3, [r7, #20]
 801339e:	693a      	ldr	r2, [r7, #16]
 80133a0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80133a2:	697b      	ldr	r3, [r7, #20]
 80133a4:	693a      	ldr	r2, [r7, #16]
 80133a6:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80133a8:	697b      	ldr	r3, [r7, #20]
 80133aa:	693a      	ldr	r2, [r7, #16]
 80133ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80133ae:	4b35      	ldr	r3, [pc, #212]	@ (8013484 <tcp_listen_input+0x1e0>)
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	1e5a      	subs	r2, r3, #1
 80133b4:	697b      	ldr	r3, [r7, #20]
 80133b6:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	691a      	ldr	r2, [r3, #16]
 80133bc:	697b      	ldr	r3, [r7, #20]
 80133be:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	687a      	ldr	r2, [r7, #4]
 80133c4:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	7a5b      	ldrb	r3, [r3, #9]
 80133ca:	f003 030c 	and.w	r3, r3, #12
 80133ce:	b2da      	uxtb	r2, r3
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	7a1a      	ldrb	r2, [r3, #8]
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80133dc:	4b2e      	ldr	r3, [pc, #184]	@ (8013498 <tcp_listen_input+0x1f4>)
 80133de:	681a      	ldr	r2, [r3, #0]
 80133e0:	697b      	ldr	r3, [r7, #20]
 80133e2:	60da      	str	r2, [r3, #12]
 80133e4:	4a2c      	ldr	r2, [pc, #176]	@ (8013498 <tcp_listen_input+0x1f4>)
 80133e6:	697b      	ldr	r3, [r7, #20]
 80133e8:	6013      	str	r3, [r2, #0]
 80133ea:	f003 fa6d 	bl	80168c8 <tcp_timer_needed>
 80133ee:	4b2b      	ldr	r3, [pc, #172]	@ (801349c <tcp_listen_input+0x1f8>)
 80133f0:	2201      	movs	r2, #1
 80133f2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80133f4:	6978      	ldr	r0, [r7, #20]
 80133f6:	f001 fd8b 	bl	8014f10 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80133fa:	4b23      	ldr	r3, [pc, #140]	@ (8013488 <tcp_listen_input+0x1e4>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	89db      	ldrh	r3, [r3, #14]
 8013400:	b29a      	uxth	r2, r3
 8013402:	697b      	ldr	r3, [r7, #20]
 8013404:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801340e:	697b      	ldr	r3, [r7, #20]
 8013410:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	3304      	adds	r3, #4
 801341c:	4618      	mov	r0, r3
 801341e:	f7fa fe69 	bl	800e0f4 <ip4_route>
 8013422:	4601      	mov	r1, r0
 8013424:	697b      	ldr	r3, [r7, #20]
 8013426:	3304      	adds	r3, #4
 8013428:	461a      	mov	r2, r3
 801342a:	4620      	mov	r0, r4
 801342c:	f7ff fa30 	bl	8012890 <tcp_eff_send_mss_netif>
 8013430:	4603      	mov	r3, r0
 8013432:	461a      	mov	r2, r3
 8013434:	697b      	ldr	r3, [r7, #20]
 8013436:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013438:	2112      	movs	r1, #18
 801343a:	6978      	ldr	r0, [r7, #20]
 801343c:	f002 f83e 	bl	80154bc <tcp_enqueue_flags>
 8013440:	4603      	mov	r3, r0
 8013442:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d004      	beq.n	8013456 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801344c:	2100      	movs	r1, #0
 801344e:	6978      	ldr	r0, [r7, #20]
 8013450:	f7fe f97c 	bl	801174c <tcp_abandon>
      return;
 8013454:	e006      	b.n	8013464 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013456:	6978      	ldr	r0, [r7, #20]
 8013458:	f002 f91e 	bl	8015698 <tcp_output>
  return;
 801345c:	e001      	b.n	8013462 <tcp_listen_input+0x1be>
    return;
 801345e:	bf00      	nop
 8013460:	e000      	b.n	8013464 <tcp_listen_input+0x1c0>
  return;
 8013462:	bf00      	nop
}
 8013464:	371c      	adds	r7, #28
 8013466:	46bd      	mov	sp, r7
 8013468:	bd90      	pop	{r4, r7, pc}
 801346a:	bf00      	nop
 801346c:	24007f44 	.word	0x24007f44
 8013470:	0801a574 	.word	0x0801a574
 8013474:	0801a79c 	.word	0x0801a79c
 8013478:	0801a5f0 	.word	0x0801a5f0
 801347c:	24007f3c 	.word	0x24007f3c
 8013480:	24007f42 	.word	0x24007f42
 8013484:	24007f38 	.word	0x24007f38
 8013488:	24007f28 	.word	0x24007f28
 801348c:	24004ddc 	.word	0x24004ddc
 8013490:	24004de0 	.word	0x24004de0
 8013494:	24004dcc 	.word	0x24004dcc
 8013498:	24007f0c 	.word	0x24007f0c
 801349c:	24007f14 	.word	0x24007f14

080134a0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b086      	sub	sp, #24
 80134a4:	af04      	add	r7, sp, #16
 80134a6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80134a8:	4b2f      	ldr	r3, [pc, #188]	@ (8013568 <tcp_timewait_input+0xc8>)
 80134aa:	781b      	ldrb	r3, [r3, #0]
 80134ac:	f003 0304 	and.w	r3, r3, #4
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d153      	bne.n	801355c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d106      	bne.n	80134c8 <tcp_timewait_input+0x28>
 80134ba:	4b2c      	ldr	r3, [pc, #176]	@ (801356c <tcp_timewait_input+0xcc>)
 80134bc:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80134c0:	492b      	ldr	r1, [pc, #172]	@ (8013570 <tcp_timewait_input+0xd0>)
 80134c2:	482c      	ldr	r0, [pc, #176]	@ (8013574 <tcp_timewait_input+0xd4>)
 80134c4:	f004 f936 	bl	8017734 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80134c8:	4b27      	ldr	r3, [pc, #156]	@ (8013568 <tcp_timewait_input+0xc8>)
 80134ca:	781b      	ldrb	r3, [r3, #0]
 80134cc:	f003 0302 	and.w	r3, r3, #2
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d02a      	beq.n	801352a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80134d4:	4b28      	ldr	r3, [pc, #160]	@ (8013578 <tcp_timewait_input+0xd8>)
 80134d6:	681a      	ldr	r2, [r3, #0]
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134dc:	1ad3      	subs	r3, r2, r3
 80134de:	2b00      	cmp	r3, #0
 80134e0:	db2d      	blt.n	801353e <tcp_timewait_input+0x9e>
 80134e2:	4b25      	ldr	r3, [pc, #148]	@ (8013578 <tcp_timewait_input+0xd8>)
 80134e4:	681a      	ldr	r2, [r3, #0]
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134ea:	6879      	ldr	r1, [r7, #4]
 80134ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80134ee:	440b      	add	r3, r1
 80134f0:	1ad3      	subs	r3, r2, r3
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	dc23      	bgt.n	801353e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80134f6:	4b21      	ldr	r3, [pc, #132]	@ (801357c <tcp_timewait_input+0xdc>)
 80134f8:	6819      	ldr	r1, [r3, #0]
 80134fa:	4b21      	ldr	r3, [pc, #132]	@ (8013580 <tcp_timewait_input+0xe0>)
 80134fc:	881b      	ldrh	r3, [r3, #0]
 80134fe:	461a      	mov	r2, r3
 8013500:	4b1d      	ldr	r3, [pc, #116]	@ (8013578 <tcp_timewait_input+0xd8>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013506:	4b1f      	ldr	r3, [pc, #124]	@ (8013584 <tcp_timewait_input+0xe4>)
 8013508:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801350a:	885b      	ldrh	r3, [r3, #2]
 801350c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801350e:	4a1d      	ldr	r2, [pc, #116]	@ (8013584 <tcp_timewait_input+0xe4>)
 8013510:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013512:	8812      	ldrh	r2, [r2, #0]
 8013514:	b292      	uxth	r2, r2
 8013516:	9202      	str	r2, [sp, #8]
 8013518:	9301      	str	r3, [sp, #4]
 801351a:	4b1b      	ldr	r3, [pc, #108]	@ (8013588 <tcp_timewait_input+0xe8>)
 801351c:	9300      	str	r3, [sp, #0]
 801351e:	4b1b      	ldr	r3, [pc, #108]	@ (801358c <tcp_timewait_input+0xec>)
 8013520:	4602      	mov	r2, r0
 8013522:	6878      	ldr	r0, [r7, #4]
 8013524:	f002 fe6c 	bl	8016200 <tcp_rst>
      return;
 8013528:	e01b      	b.n	8013562 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801352a:	4b0f      	ldr	r3, [pc, #60]	@ (8013568 <tcp_timewait_input+0xc8>)
 801352c:	781b      	ldrb	r3, [r3, #0]
 801352e:	f003 0301 	and.w	r3, r3, #1
 8013532:	2b00      	cmp	r3, #0
 8013534:	d003      	beq.n	801353e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013536:	4b16      	ldr	r3, [pc, #88]	@ (8013590 <tcp_timewait_input+0xf0>)
 8013538:	681a      	ldr	r2, [r3, #0]
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801353e:	4b10      	ldr	r3, [pc, #64]	@ (8013580 <tcp_timewait_input+0xe0>)
 8013540:	881b      	ldrh	r3, [r3, #0]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d00c      	beq.n	8013560 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	8b5b      	ldrh	r3, [r3, #26]
 801354a:	f043 0302 	orr.w	r3, r3, #2
 801354e:	b29a      	uxth	r2, r3
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	f002 f89f 	bl	8015698 <tcp_output>
  }
  return;
 801355a:	e001      	b.n	8013560 <tcp_timewait_input+0xc0>
    return;
 801355c:	bf00      	nop
 801355e:	e000      	b.n	8013562 <tcp_timewait_input+0xc2>
  return;
 8013560:	bf00      	nop
}
 8013562:	3708      	adds	r7, #8
 8013564:	46bd      	mov	sp, r7
 8013566:	bd80      	pop	{r7, pc}
 8013568:	24007f44 	.word	0x24007f44
 801356c:	0801a574 	.word	0x0801a574
 8013570:	0801a7bc 	.word	0x0801a7bc
 8013574:	0801a5f0 	.word	0x0801a5f0
 8013578:	24007f38 	.word	0x24007f38
 801357c:	24007f3c 	.word	0x24007f3c
 8013580:	24007f42 	.word	0x24007f42
 8013584:	24007f28 	.word	0x24007f28
 8013588:	24004ddc 	.word	0x24004ddc
 801358c:	24004de0 	.word	0x24004de0
 8013590:	24007f00 	.word	0x24007f00

08013594 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013594:	b590      	push	{r4, r7, lr}
 8013596:	b08d      	sub	sp, #52	@ 0x34
 8013598:	af04      	add	r7, sp, #16
 801359a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801359c:	2300      	movs	r3, #0
 801359e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80135a0:	2300      	movs	r3, #0
 80135a2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d106      	bne.n	80135b8 <tcp_process+0x24>
 80135aa:	4b9d      	ldr	r3, [pc, #628]	@ (8013820 <tcp_process+0x28c>)
 80135ac:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80135b0:	499c      	ldr	r1, [pc, #624]	@ (8013824 <tcp_process+0x290>)
 80135b2:	489d      	ldr	r0, [pc, #628]	@ (8013828 <tcp_process+0x294>)
 80135b4:	f004 f8be 	bl	8017734 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80135b8:	4b9c      	ldr	r3, [pc, #624]	@ (801382c <tcp_process+0x298>)
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	f003 0304 	and.w	r3, r3, #4
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d04e      	beq.n	8013662 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	7d1b      	ldrb	r3, [r3, #20]
 80135c8:	2b02      	cmp	r3, #2
 80135ca:	d108      	bne.n	80135de <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80135d0:	4b97      	ldr	r3, [pc, #604]	@ (8013830 <tcp_process+0x29c>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d123      	bne.n	8013620 <tcp_process+0x8c>
        acceptable = 1;
 80135d8:	2301      	movs	r3, #1
 80135da:	76fb      	strb	r3, [r7, #27]
 80135dc:	e020      	b.n	8013620 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80135e2:	4b94      	ldr	r3, [pc, #592]	@ (8013834 <tcp_process+0x2a0>)
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d102      	bne.n	80135f0 <tcp_process+0x5c>
        acceptable = 1;
 80135ea:	2301      	movs	r3, #1
 80135ec:	76fb      	strb	r3, [r7, #27]
 80135ee:	e017      	b.n	8013620 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80135f0:	4b90      	ldr	r3, [pc, #576]	@ (8013834 <tcp_process+0x2a0>)
 80135f2:	681a      	ldr	r2, [r3, #0]
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135f8:	1ad3      	subs	r3, r2, r3
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	db10      	blt.n	8013620 <tcp_process+0x8c>
 80135fe:	4b8d      	ldr	r3, [pc, #564]	@ (8013834 <tcp_process+0x2a0>)
 8013600:	681a      	ldr	r2, [r3, #0]
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013606:	6879      	ldr	r1, [r7, #4]
 8013608:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801360a:	440b      	add	r3, r1
 801360c:	1ad3      	subs	r3, r2, r3
 801360e:	2b00      	cmp	r3, #0
 8013610:	dc06      	bgt.n	8013620 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	8b5b      	ldrh	r3, [r3, #26]
 8013616:	f043 0302 	orr.w	r3, r3, #2
 801361a:	b29a      	uxth	r2, r3
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013620:	7efb      	ldrb	r3, [r7, #27]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d01b      	beq.n	801365e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	7d1b      	ldrb	r3, [r3, #20]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d106      	bne.n	801363c <tcp_process+0xa8>
 801362e:	4b7c      	ldr	r3, [pc, #496]	@ (8013820 <tcp_process+0x28c>)
 8013630:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8013634:	4980      	ldr	r1, [pc, #512]	@ (8013838 <tcp_process+0x2a4>)
 8013636:	487c      	ldr	r0, [pc, #496]	@ (8013828 <tcp_process+0x294>)
 8013638:	f004 f87c 	bl	8017734 <iprintf>
      recv_flags |= TF_RESET;
 801363c:	4b7f      	ldr	r3, [pc, #508]	@ (801383c <tcp_process+0x2a8>)
 801363e:	781b      	ldrb	r3, [r3, #0]
 8013640:	f043 0308 	orr.w	r3, r3, #8
 8013644:	b2da      	uxtb	r2, r3
 8013646:	4b7d      	ldr	r3, [pc, #500]	@ (801383c <tcp_process+0x2a8>)
 8013648:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	8b5b      	ldrh	r3, [r3, #26]
 801364e:	f023 0301 	bic.w	r3, r3, #1
 8013652:	b29a      	uxth	r2, r3
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013658:	f06f 030d 	mvn.w	r3, #13
 801365c:	e37a      	b.n	8013d54 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801365e:	2300      	movs	r3, #0
 8013660:	e378      	b.n	8013d54 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013662:	4b72      	ldr	r3, [pc, #456]	@ (801382c <tcp_process+0x298>)
 8013664:	781b      	ldrb	r3, [r3, #0]
 8013666:	f003 0302 	and.w	r3, r3, #2
 801366a:	2b00      	cmp	r3, #0
 801366c:	d010      	beq.n	8013690 <tcp_process+0xfc>
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	7d1b      	ldrb	r3, [r3, #20]
 8013672:	2b02      	cmp	r3, #2
 8013674:	d00c      	beq.n	8013690 <tcp_process+0xfc>
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	7d1b      	ldrb	r3, [r3, #20]
 801367a:	2b03      	cmp	r3, #3
 801367c:	d008      	beq.n	8013690 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	8b5b      	ldrh	r3, [r3, #26]
 8013682:	f043 0302 	orr.w	r3, r3, #2
 8013686:	b29a      	uxth	r2, r3
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801368c:	2300      	movs	r3, #0
 801368e:	e361      	b.n	8013d54 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	8b5b      	ldrh	r3, [r3, #26]
 8013694:	f003 0310 	and.w	r3, r3, #16
 8013698:	2b00      	cmp	r3, #0
 801369a:	d103      	bne.n	80136a4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801369c:	4b68      	ldr	r3, [pc, #416]	@ (8013840 <tcp_process+0x2ac>)
 801369e:	681a      	ldr	r2, [r3, #0]
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	2200      	movs	r2, #0
 80136a8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2200      	movs	r2, #0
 80136b0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80136b4:	6878      	ldr	r0, [r7, #4]
 80136b6:	f001 fc2b 	bl	8014f10 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	7d1b      	ldrb	r3, [r3, #20]
 80136be:	3b02      	subs	r3, #2
 80136c0:	2b07      	cmp	r3, #7
 80136c2:	f200 8337 	bhi.w	8013d34 <tcp_process+0x7a0>
 80136c6:	a201      	add	r2, pc, #4	@ (adr r2, 80136cc <tcp_process+0x138>)
 80136c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136cc:	080136ed 	.word	0x080136ed
 80136d0:	0801391d 	.word	0x0801391d
 80136d4:	08013a95 	.word	0x08013a95
 80136d8:	08013abf 	.word	0x08013abf
 80136dc:	08013be3 	.word	0x08013be3
 80136e0:	08013a95 	.word	0x08013a95
 80136e4:	08013c6f 	.word	0x08013c6f
 80136e8:	08013cff 	.word	0x08013cff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80136ec:	4b4f      	ldr	r3, [pc, #316]	@ (801382c <tcp_process+0x298>)
 80136ee:	781b      	ldrb	r3, [r3, #0]
 80136f0:	f003 0310 	and.w	r3, r3, #16
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	f000 80e4 	beq.w	80138c2 <tcp_process+0x32e>
 80136fa:	4b4c      	ldr	r3, [pc, #304]	@ (801382c <tcp_process+0x298>)
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	f003 0302 	and.w	r3, r3, #2
 8013702:	2b00      	cmp	r3, #0
 8013704:	f000 80dd 	beq.w	80138c2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801370c:	1c5a      	adds	r2, r3, #1
 801370e:	4b48      	ldr	r3, [pc, #288]	@ (8013830 <tcp_process+0x29c>)
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	429a      	cmp	r2, r3
 8013714:	f040 80d5 	bne.w	80138c2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013718:	4b46      	ldr	r3, [pc, #280]	@ (8013834 <tcp_process+0x2a0>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	1c5a      	adds	r2, r3, #1
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801372a:	4b41      	ldr	r3, [pc, #260]	@ (8013830 <tcp_process+0x29c>)
 801372c:	681a      	ldr	r2, [r3, #0]
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8013732:	4b44      	ldr	r3, [pc, #272]	@ (8013844 <tcp_process+0x2b0>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	89db      	ldrh	r3, [r3, #14]
 8013738:	b29a      	uxth	r2, r3
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801374c:	4b39      	ldr	r3, [pc, #228]	@ (8013834 <tcp_process+0x2a0>)
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	1e5a      	subs	r2, r3, #1
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	2204      	movs	r2, #4
 801375a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	3304      	adds	r3, #4
 8013764:	4618      	mov	r0, r3
 8013766:	f7fa fcc5 	bl	800e0f4 <ip4_route>
 801376a:	4601      	mov	r1, r0
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	3304      	adds	r3, #4
 8013770:	461a      	mov	r2, r3
 8013772:	4620      	mov	r0, r4
 8013774:	f7ff f88c 	bl	8012890 <tcp_eff_send_mss_netif>
 8013778:	4603      	mov	r3, r0
 801377a:	461a      	mov	r2, r3
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013784:	009a      	lsls	r2, r3, #2
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801378a:	005b      	lsls	r3, r3, #1
 801378c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8013790:	428b      	cmp	r3, r1
 8013792:	bf38      	it	cc
 8013794:	460b      	movcc	r3, r1
 8013796:	429a      	cmp	r2, r3
 8013798:	d204      	bcs.n	80137a4 <tcp_process+0x210>
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801379e:	009b      	lsls	r3, r3, #2
 80137a0:	b29b      	uxth	r3, r3
 80137a2:	e00d      	b.n	80137c0 <tcp_process+0x22c>
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80137a8:	005b      	lsls	r3, r3, #1
 80137aa:	f241 121c 	movw	r2, #4380	@ 0x111c
 80137ae:	4293      	cmp	r3, r2
 80137b0:	d904      	bls.n	80137bc <tcp_process+0x228>
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80137b6:	005b      	lsls	r3, r3, #1
 80137b8:	b29b      	uxth	r3, r3
 80137ba:	e001      	b.n	80137c0 <tcp_process+0x22c>
 80137bc:	f241 131c 	movw	r3, #4380	@ 0x111c
 80137c0:	687a      	ldr	r2, [r7, #4]
 80137c2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d106      	bne.n	80137de <tcp_process+0x24a>
 80137d0:	4b13      	ldr	r3, [pc, #76]	@ (8013820 <tcp_process+0x28c>)
 80137d2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80137d6:	491c      	ldr	r1, [pc, #112]	@ (8013848 <tcp_process+0x2b4>)
 80137d8:	4813      	ldr	r0, [pc, #76]	@ (8013828 <tcp_process+0x294>)
 80137da:	f003 ffab 	bl	8017734 <iprintf>
        --pcb->snd_queuelen;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80137e4:	3b01      	subs	r3, #1
 80137e6:	b29a      	uxth	r2, r3
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80137f2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80137f4:	69fb      	ldr	r3, [r7, #28]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d12a      	bne.n	8013850 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80137fe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013800:	69fb      	ldr	r3, [r7, #28]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d106      	bne.n	8013814 <tcp_process+0x280>
 8013806:	4b06      	ldr	r3, [pc, #24]	@ (8013820 <tcp_process+0x28c>)
 8013808:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801380c:	490f      	ldr	r1, [pc, #60]	@ (801384c <tcp_process+0x2b8>)
 801380e:	4806      	ldr	r0, [pc, #24]	@ (8013828 <tcp_process+0x294>)
 8013810:	f003 ff90 	bl	8017734 <iprintf>
          pcb->unsent = rseg->next;
 8013814:	69fb      	ldr	r3, [r7, #28]
 8013816:	681a      	ldr	r2, [r3, #0]
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	66da      	str	r2, [r3, #108]	@ 0x6c
 801381c:	e01c      	b.n	8013858 <tcp_process+0x2c4>
 801381e:	bf00      	nop
 8013820:	0801a574 	.word	0x0801a574
 8013824:	0801a7dc 	.word	0x0801a7dc
 8013828:	0801a5f0 	.word	0x0801a5f0
 801382c:	24007f44 	.word	0x24007f44
 8013830:	24007f3c 	.word	0x24007f3c
 8013834:	24007f38 	.word	0x24007f38
 8013838:	0801a7f8 	.word	0x0801a7f8
 801383c:	24007f45 	.word	0x24007f45
 8013840:	24007f00 	.word	0x24007f00
 8013844:	24007f28 	.word	0x24007f28
 8013848:	0801a818 	.word	0x0801a818
 801384c:	0801a830 	.word	0x0801a830
        } else {
          pcb->unacked = rseg->next;
 8013850:	69fb      	ldr	r3, [r7, #28]
 8013852:	681a      	ldr	r2, [r3, #0]
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8013858:	69f8      	ldr	r0, [r7, #28]
 801385a:	f7fe fd22 	bl	80122a2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013862:	2b00      	cmp	r3, #0
 8013864:	d104      	bne.n	8013870 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801386c:	861a      	strh	r2, [r3, #48]	@ 0x30
 801386e:	e006      	b.n	801387e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2200      	movs	r2, #0
 8013874:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	2200      	movs	r2, #0
 801387a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013884:	2b00      	cmp	r3, #0
 8013886:	d00a      	beq.n	801389e <tcp_process+0x30a>
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801388e:	687a      	ldr	r2, [r7, #4]
 8013890:	6910      	ldr	r0, [r2, #16]
 8013892:	2200      	movs	r2, #0
 8013894:	6879      	ldr	r1, [r7, #4]
 8013896:	4798      	blx	r3
 8013898:	4603      	mov	r3, r0
 801389a:	76bb      	strb	r3, [r7, #26]
 801389c:	e001      	b.n	80138a2 <tcp_process+0x30e>
 801389e:	2300      	movs	r3, #0
 80138a0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80138a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80138a6:	f113 0f0d 	cmn.w	r3, #13
 80138aa:	d102      	bne.n	80138b2 <tcp_process+0x31e>
          return ERR_ABRT;
 80138ac:	f06f 030c 	mvn.w	r3, #12
 80138b0:	e250      	b.n	8013d54 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	8b5b      	ldrh	r3, [r3, #26]
 80138b6:	f043 0302 	orr.w	r3, r3, #2
 80138ba:	b29a      	uxth	r2, r3
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80138c0:	e23a      	b.n	8013d38 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80138c2:	4b98      	ldr	r3, [pc, #608]	@ (8013b24 <tcp_process+0x590>)
 80138c4:	781b      	ldrb	r3, [r3, #0]
 80138c6:	f003 0310 	and.w	r3, r3, #16
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	f000 8234 	beq.w	8013d38 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138d0:	4b95      	ldr	r3, [pc, #596]	@ (8013b28 <tcp_process+0x594>)
 80138d2:	6819      	ldr	r1, [r3, #0]
 80138d4:	4b95      	ldr	r3, [pc, #596]	@ (8013b2c <tcp_process+0x598>)
 80138d6:	881b      	ldrh	r3, [r3, #0]
 80138d8:	461a      	mov	r2, r3
 80138da:	4b95      	ldr	r3, [pc, #596]	@ (8013b30 <tcp_process+0x59c>)
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80138e0:	4b94      	ldr	r3, [pc, #592]	@ (8013b34 <tcp_process+0x5a0>)
 80138e2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138e4:	885b      	ldrh	r3, [r3, #2]
 80138e6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80138e8:	4a92      	ldr	r2, [pc, #584]	@ (8013b34 <tcp_process+0x5a0>)
 80138ea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138ec:	8812      	ldrh	r2, [r2, #0]
 80138ee:	b292      	uxth	r2, r2
 80138f0:	9202      	str	r2, [sp, #8]
 80138f2:	9301      	str	r3, [sp, #4]
 80138f4:	4b90      	ldr	r3, [pc, #576]	@ (8013b38 <tcp_process+0x5a4>)
 80138f6:	9300      	str	r3, [sp, #0]
 80138f8:	4b90      	ldr	r3, [pc, #576]	@ (8013b3c <tcp_process+0x5a8>)
 80138fa:	4602      	mov	r2, r0
 80138fc:	6878      	ldr	r0, [r7, #4]
 80138fe:	f002 fc7f 	bl	8016200 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013908:	2b05      	cmp	r3, #5
 801390a:	f200 8215 	bhi.w	8013d38 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	2200      	movs	r2, #0
 8013912:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	f002 fa4b 	bl	8015db0 <tcp_rexmit_rto>
      break;
 801391a:	e20d      	b.n	8013d38 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801391c:	4b81      	ldr	r3, [pc, #516]	@ (8013b24 <tcp_process+0x590>)
 801391e:	781b      	ldrb	r3, [r3, #0]
 8013920:	f003 0310 	and.w	r3, r3, #16
 8013924:	2b00      	cmp	r3, #0
 8013926:	f000 80a1 	beq.w	8013a6c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801392a:	4b7f      	ldr	r3, [pc, #508]	@ (8013b28 <tcp_process+0x594>)
 801392c:	681a      	ldr	r2, [r3, #0]
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013932:	1ad3      	subs	r3, r2, r3
 8013934:	3b01      	subs	r3, #1
 8013936:	2b00      	cmp	r3, #0
 8013938:	db7e      	blt.n	8013a38 <tcp_process+0x4a4>
 801393a:	4b7b      	ldr	r3, [pc, #492]	@ (8013b28 <tcp_process+0x594>)
 801393c:	681a      	ldr	r2, [r3, #0]
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013942:	1ad3      	subs	r3, r2, r3
 8013944:	2b00      	cmp	r3, #0
 8013946:	dc77      	bgt.n	8013a38 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2204      	movs	r2, #4
 801394c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013952:	2b00      	cmp	r3, #0
 8013954:	d102      	bne.n	801395c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013956:	23fa      	movs	r3, #250	@ 0xfa
 8013958:	76bb      	strb	r3, [r7, #26]
 801395a:	e01d      	b.n	8013998 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013960:	699b      	ldr	r3, [r3, #24]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d106      	bne.n	8013974 <tcp_process+0x3e0>
 8013966:	4b76      	ldr	r3, [pc, #472]	@ (8013b40 <tcp_process+0x5ac>)
 8013968:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801396c:	4975      	ldr	r1, [pc, #468]	@ (8013b44 <tcp_process+0x5b0>)
 801396e:	4876      	ldr	r0, [pc, #472]	@ (8013b48 <tcp_process+0x5b4>)
 8013970:	f003 fee0 	bl	8017734 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013978:	699b      	ldr	r3, [r3, #24]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d00a      	beq.n	8013994 <tcp_process+0x400>
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013982:	699b      	ldr	r3, [r3, #24]
 8013984:	687a      	ldr	r2, [r7, #4]
 8013986:	6910      	ldr	r0, [r2, #16]
 8013988:	2200      	movs	r2, #0
 801398a:	6879      	ldr	r1, [r7, #4]
 801398c:	4798      	blx	r3
 801398e:	4603      	mov	r3, r0
 8013990:	76bb      	strb	r3, [r7, #26]
 8013992:	e001      	b.n	8013998 <tcp_process+0x404>
 8013994:	23f0      	movs	r3, #240	@ 0xf0
 8013996:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013998:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d00a      	beq.n	80139b6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80139a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80139a4:	f113 0f0d 	cmn.w	r3, #13
 80139a8:	d002      	beq.n	80139b0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	f7fd ff8c 	bl	80118c8 <tcp_abort>
            }
            return ERR_ABRT;
 80139b0:	f06f 030c 	mvn.w	r3, #12
 80139b4:	e1ce      	b.n	8013d54 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f000 fae0 	bl	8013f7c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80139bc:	4b63      	ldr	r3, [pc, #396]	@ (8013b4c <tcp_process+0x5b8>)
 80139be:	881b      	ldrh	r3, [r3, #0]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d005      	beq.n	80139d0 <tcp_process+0x43c>
            recv_acked--;
 80139c4:	4b61      	ldr	r3, [pc, #388]	@ (8013b4c <tcp_process+0x5b8>)
 80139c6:	881b      	ldrh	r3, [r3, #0]
 80139c8:	3b01      	subs	r3, #1
 80139ca:	b29a      	uxth	r2, r3
 80139cc:	4b5f      	ldr	r3, [pc, #380]	@ (8013b4c <tcp_process+0x5b8>)
 80139ce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80139d4:	009a      	lsls	r2, r3, #2
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80139da:	005b      	lsls	r3, r3, #1
 80139dc:	f241 111c 	movw	r1, #4380	@ 0x111c
 80139e0:	428b      	cmp	r3, r1
 80139e2:	bf38      	it	cc
 80139e4:	460b      	movcc	r3, r1
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d204      	bcs.n	80139f4 <tcp_process+0x460>
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80139ee:	009b      	lsls	r3, r3, #2
 80139f0:	b29b      	uxth	r3, r3
 80139f2:	e00d      	b.n	8013a10 <tcp_process+0x47c>
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80139f8:	005b      	lsls	r3, r3, #1
 80139fa:	f241 121c 	movw	r2, #4380	@ 0x111c
 80139fe:	4293      	cmp	r3, r2
 8013a00:	d904      	bls.n	8013a0c <tcp_process+0x478>
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013a06:	005b      	lsls	r3, r3, #1
 8013a08:	b29b      	uxth	r3, r3
 8013a0a:	e001      	b.n	8013a10 <tcp_process+0x47c>
 8013a0c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8013a10:	687a      	ldr	r2, [r7, #4]
 8013a12:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013a16:	4b4e      	ldr	r3, [pc, #312]	@ (8013b50 <tcp_process+0x5bc>)
 8013a18:	781b      	ldrb	r3, [r3, #0]
 8013a1a:	f003 0320 	and.w	r3, r3, #32
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d037      	beq.n	8013a92 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	8b5b      	ldrh	r3, [r3, #26]
 8013a26:	f043 0302 	orr.w	r3, r3, #2
 8013a2a:	b29a      	uxth	r2, r3
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2207      	movs	r2, #7
 8013a34:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013a36:	e02c      	b.n	8013a92 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a38:	4b3b      	ldr	r3, [pc, #236]	@ (8013b28 <tcp_process+0x594>)
 8013a3a:	6819      	ldr	r1, [r3, #0]
 8013a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8013b2c <tcp_process+0x598>)
 8013a3e:	881b      	ldrh	r3, [r3, #0]
 8013a40:	461a      	mov	r2, r3
 8013a42:	4b3b      	ldr	r3, [pc, #236]	@ (8013b30 <tcp_process+0x59c>)
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a48:	4b3a      	ldr	r3, [pc, #232]	@ (8013b34 <tcp_process+0x5a0>)
 8013a4a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a4c:	885b      	ldrh	r3, [r3, #2]
 8013a4e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a50:	4a38      	ldr	r2, [pc, #224]	@ (8013b34 <tcp_process+0x5a0>)
 8013a52:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a54:	8812      	ldrh	r2, [r2, #0]
 8013a56:	b292      	uxth	r2, r2
 8013a58:	9202      	str	r2, [sp, #8]
 8013a5a:	9301      	str	r3, [sp, #4]
 8013a5c:	4b36      	ldr	r3, [pc, #216]	@ (8013b38 <tcp_process+0x5a4>)
 8013a5e:	9300      	str	r3, [sp, #0]
 8013a60:	4b36      	ldr	r3, [pc, #216]	@ (8013b3c <tcp_process+0x5a8>)
 8013a62:	4602      	mov	r2, r0
 8013a64:	6878      	ldr	r0, [r7, #4]
 8013a66:	f002 fbcb 	bl	8016200 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013a6a:	e167      	b.n	8013d3c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8013b24 <tcp_process+0x590>)
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	f003 0302 	and.w	r3, r3, #2
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	f000 8161 	beq.w	8013d3c <tcp_process+0x7a8>
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a7e:	1e5a      	subs	r2, r3, #1
 8013a80:	4b2b      	ldr	r3, [pc, #172]	@ (8013b30 <tcp_process+0x59c>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	429a      	cmp	r2, r3
 8013a86:	f040 8159 	bne.w	8013d3c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f002 f9b2 	bl	8015df4 <tcp_rexmit>
      break;
 8013a90:	e154      	b.n	8013d3c <tcp_process+0x7a8>
 8013a92:	e153      	b.n	8013d3c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f000 fa71 	bl	8013f7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8013b50 <tcp_process+0x5bc>)
 8013a9c:	781b      	ldrb	r3, [r3, #0]
 8013a9e:	f003 0320 	and.w	r3, r3, #32
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	f000 814c 	beq.w	8013d40 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	8b5b      	ldrh	r3, [r3, #26]
 8013aac:	f043 0302 	orr.w	r3, r3, #2
 8013ab0:	b29a      	uxth	r2, r3
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	2207      	movs	r2, #7
 8013aba:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013abc:	e140      	b.n	8013d40 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013abe:	6878      	ldr	r0, [r7, #4]
 8013ac0:	f000 fa5c 	bl	8013f7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013ac4:	4b22      	ldr	r3, [pc, #136]	@ (8013b50 <tcp_process+0x5bc>)
 8013ac6:	781b      	ldrb	r3, [r3, #0]
 8013ac8:	f003 0320 	and.w	r3, r3, #32
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d071      	beq.n	8013bb4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013ad0:	4b14      	ldr	r3, [pc, #80]	@ (8013b24 <tcp_process+0x590>)
 8013ad2:	781b      	ldrb	r3, [r3, #0]
 8013ad4:	f003 0310 	and.w	r3, r3, #16
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d060      	beq.n	8013b9e <tcp_process+0x60a>
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013ae0:	4b11      	ldr	r3, [pc, #68]	@ (8013b28 <tcp_process+0x594>)
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	429a      	cmp	r2, r3
 8013ae6:	d15a      	bne.n	8013b9e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d156      	bne.n	8013b9e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	8b5b      	ldrh	r3, [r3, #26]
 8013af4:	f043 0302 	orr.w	r3, r3, #2
 8013af8:	b29a      	uxth	r2, r3
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013afe:	6878      	ldr	r0, [r7, #4]
 8013b00:	f7fe fdbc 	bl	801267c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013b04:	4b13      	ldr	r3, [pc, #76]	@ (8013b54 <tcp_process+0x5c0>)
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	687a      	ldr	r2, [r7, #4]
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d105      	bne.n	8013b1a <tcp_process+0x586>
 8013b0e:	4b11      	ldr	r3, [pc, #68]	@ (8013b54 <tcp_process+0x5c0>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	68db      	ldr	r3, [r3, #12]
 8013b14:	4a0f      	ldr	r2, [pc, #60]	@ (8013b54 <tcp_process+0x5c0>)
 8013b16:	6013      	str	r3, [r2, #0]
 8013b18:	e02e      	b.n	8013b78 <tcp_process+0x5e4>
 8013b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8013b54 <tcp_process+0x5c0>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	617b      	str	r3, [r7, #20]
 8013b20:	e027      	b.n	8013b72 <tcp_process+0x5de>
 8013b22:	bf00      	nop
 8013b24:	24007f44 	.word	0x24007f44
 8013b28:	24007f3c 	.word	0x24007f3c
 8013b2c:	24007f42 	.word	0x24007f42
 8013b30:	24007f38 	.word	0x24007f38
 8013b34:	24007f28 	.word	0x24007f28
 8013b38:	24004ddc 	.word	0x24004ddc
 8013b3c:	24004de0 	.word	0x24004de0
 8013b40:	0801a574 	.word	0x0801a574
 8013b44:	0801a844 	.word	0x0801a844
 8013b48:	0801a5f0 	.word	0x0801a5f0
 8013b4c:	24007f40 	.word	0x24007f40
 8013b50:	24007f45 	.word	0x24007f45
 8013b54:	24007f0c 	.word	0x24007f0c
 8013b58:	697b      	ldr	r3, [r7, #20]
 8013b5a:	68db      	ldr	r3, [r3, #12]
 8013b5c:	687a      	ldr	r2, [r7, #4]
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d104      	bne.n	8013b6c <tcp_process+0x5d8>
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	68da      	ldr	r2, [r3, #12]
 8013b66:	697b      	ldr	r3, [r7, #20]
 8013b68:	60da      	str	r2, [r3, #12]
 8013b6a:	e005      	b.n	8013b78 <tcp_process+0x5e4>
 8013b6c:	697b      	ldr	r3, [r7, #20]
 8013b6e:	68db      	ldr	r3, [r3, #12]
 8013b70:	617b      	str	r3, [r7, #20]
 8013b72:	697b      	ldr	r3, [r7, #20]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d1ef      	bne.n	8013b58 <tcp_process+0x5c4>
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	60da      	str	r2, [r3, #12]
 8013b7e:	4b77      	ldr	r3, [pc, #476]	@ (8013d5c <tcp_process+0x7c8>)
 8013b80:	2201      	movs	r2, #1
 8013b82:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	220a      	movs	r2, #10
 8013b88:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013b8a:	4b75      	ldr	r3, [pc, #468]	@ (8013d60 <tcp_process+0x7cc>)
 8013b8c:	681a      	ldr	r2, [r3, #0]
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	60da      	str	r2, [r3, #12]
 8013b92:	4a73      	ldr	r2, [pc, #460]	@ (8013d60 <tcp_process+0x7cc>)
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	6013      	str	r3, [r2, #0]
 8013b98:	f002 fe96 	bl	80168c8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013b9c:	e0d2      	b.n	8013d44 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	8b5b      	ldrh	r3, [r3, #26]
 8013ba2:	f043 0302 	orr.w	r3, r3, #2
 8013ba6:	b29a      	uxth	r2, r3
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2208      	movs	r2, #8
 8013bb0:	751a      	strb	r2, [r3, #20]
      break;
 8013bb2:	e0c7      	b.n	8013d44 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013bb4:	4b6b      	ldr	r3, [pc, #428]	@ (8013d64 <tcp_process+0x7d0>)
 8013bb6:	781b      	ldrb	r3, [r3, #0]
 8013bb8:	f003 0310 	and.w	r3, r3, #16
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	f000 80c1 	beq.w	8013d44 <tcp_process+0x7b0>
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013bc6:	4b68      	ldr	r3, [pc, #416]	@ (8013d68 <tcp_process+0x7d4>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	429a      	cmp	r2, r3
 8013bcc:	f040 80ba 	bne.w	8013d44 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	f040 80b5 	bne.w	8013d44 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	2206      	movs	r2, #6
 8013bde:	751a      	strb	r2, [r3, #20]
      break;
 8013be0:	e0b0      	b.n	8013d44 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013be2:	6878      	ldr	r0, [r7, #4]
 8013be4:	f000 f9ca 	bl	8013f7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013be8:	4b60      	ldr	r3, [pc, #384]	@ (8013d6c <tcp_process+0x7d8>)
 8013bea:	781b      	ldrb	r3, [r3, #0]
 8013bec:	f003 0320 	and.w	r3, r3, #32
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	f000 80a9 	beq.w	8013d48 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	8b5b      	ldrh	r3, [r3, #26]
 8013bfa:	f043 0302 	orr.w	r3, r3, #2
 8013bfe:	b29a      	uxth	r2, r3
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013c04:	6878      	ldr	r0, [r7, #4]
 8013c06:	f7fe fd39 	bl	801267c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013c0a:	4b59      	ldr	r3, [pc, #356]	@ (8013d70 <tcp_process+0x7dc>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	687a      	ldr	r2, [r7, #4]
 8013c10:	429a      	cmp	r2, r3
 8013c12:	d105      	bne.n	8013c20 <tcp_process+0x68c>
 8013c14:	4b56      	ldr	r3, [pc, #344]	@ (8013d70 <tcp_process+0x7dc>)
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	68db      	ldr	r3, [r3, #12]
 8013c1a:	4a55      	ldr	r2, [pc, #340]	@ (8013d70 <tcp_process+0x7dc>)
 8013c1c:	6013      	str	r3, [r2, #0]
 8013c1e:	e013      	b.n	8013c48 <tcp_process+0x6b4>
 8013c20:	4b53      	ldr	r3, [pc, #332]	@ (8013d70 <tcp_process+0x7dc>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	613b      	str	r3, [r7, #16]
 8013c26:	e00c      	b.n	8013c42 <tcp_process+0x6ae>
 8013c28:	693b      	ldr	r3, [r7, #16]
 8013c2a:	68db      	ldr	r3, [r3, #12]
 8013c2c:	687a      	ldr	r2, [r7, #4]
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	d104      	bne.n	8013c3c <tcp_process+0x6a8>
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	68da      	ldr	r2, [r3, #12]
 8013c36:	693b      	ldr	r3, [r7, #16]
 8013c38:	60da      	str	r2, [r3, #12]
 8013c3a:	e005      	b.n	8013c48 <tcp_process+0x6b4>
 8013c3c:	693b      	ldr	r3, [r7, #16]
 8013c3e:	68db      	ldr	r3, [r3, #12]
 8013c40:	613b      	str	r3, [r7, #16]
 8013c42:	693b      	ldr	r3, [r7, #16]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d1ef      	bne.n	8013c28 <tcp_process+0x694>
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	60da      	str	r2, [r3, #12]
 8013c4e:	4b43      	ldr	r3, [pc, #268]	@ (8013d5c <tcp_process+0x7c8>)
 8013c50:	2201      	movs	r2, #1
 8013c52:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	220a      	movs	r2, #10
 8013c58:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013c5a:	4b41      	ldr	r3, [pc, #260]	@ (8013d60 <tcp_process+0x7cc>)
 8013c5c:	681a      	ldr	r2, [r3, #0]
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	60da      	str	r2, [r3, #12]
 8013c62:	4a3f      	ldr	r2, [pc, #252]	@ (8013d60 <tcp_process+0x7cc>)
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	6013      	str	r3, [r2, #0]
 8013c68:	f002 fe2e 	bl	80168c8 <tcp_timer_needed>
      }
      break;
 8013c6c:	e06c      	b.n	8013d48 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f000 f984 	bl	8013f7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013c74:	4b3b      	ldr	r3, [pc, #236]	@ (8013d64 <tcp_process+0x7d0>)
 8013c76:	781b      	ldrb	r3, [r3, #0]
 8013c78:	f003 0310 	and.w	r3, r3, #16
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d065      	beq.n	8013d4c <tcp_process+0x7b8>
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013c84:	4b38      	ldr	r3, [pc, #224]	@ (8013d68 <tcp_process+0x7d4>)
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	429a      	cmp	r2, r3
 8013c8a:	d15f      	bne.n	8013d4c <tcp_process+0x7b8>
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d15b      	bne.n	8013d4c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f7fe fcf1 	bl	801267c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013c9a:	4b35      	ldr	r3, [pc, #212]	@ (8013d70 <tcp_process+0x7dc>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	687a      	ldr	r2, [r7, #4]
 8013ca0:	429a      	cmp	r2, r3
 8013ca2:	d105      	bne.n	8013cb0 <tcp_process+0x71c>
 8013ca4:	4b32      	ldr	r3, [pc, #200]	@ (8013d70 <tcp_process+0x7dc>)
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	68db      	ldr	r3, [r3, #12]
 8013caa:	4a31      	ldr	r2, [pc, #196]	@ (8013d70 <tcp_process+0x7dc>)
 8013cac:	6013      	str	r3, [r2, #0]
 8013cae:	e013      	b.n	8013cd8 <tcp_process+0x744>
 8013cb0:	4b2f      	ldr	r3, [pc, #188]	@ (8013d70 <tcp_process+0x7dc>)
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	60fb      	str	r3, [r7, #12]
 8013cb6:	e00c      	b.n	8013cd2 <tcp_process+0x73e>
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	68db      	ldr	r3, [r3, #12]
 8013cbc:	687a      	ldr	r2, [r7, #4]
 8013cbe:	429a      	cmp	r2, r3
 8013cc0:	d104      	bne.n	8013ccc <tcp_process+0x738>
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	68da      	ldr	r2, [r3, #12]
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	60da      	str	r2, [r3, #12]
 8013cca:	e005      	b.n	8013cd8 <tcp_process+0x744>
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	68db      	ldr	r3, [r3, #12]
 8013cd0:	60fb      	str	r3, [r7, #12]
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d1ef      	bne.n	8013cb8 <tcp_process+0x724>
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	2200      	movs	r2, #0
 8013cdc:	60da      	str	r2, [r3, #12]
 8013cde:	4b1f      	ldr	r3, [pc, #124]	@ (8013d5c <tcp_process+0x7c8>)
 8013ce0:	2201      	movs	r2, #1
 8013ce2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	220a      	movs	r2, #10
 8013ce8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013cea:	4b1d      	ldr	r3, [pc, #116]	@ (8013d60 <tcp_process+0x7cc>)
 8013cec:	681a      	ldr	r2, [r3, #0]
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	60da      	str	r2, [r3, #12]
 8013cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8013d60 <tcp_process+0x7cc>)
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	6013      	str	r3, [r2, #0]
 8013cf8:	f002 fde6 	bl	80168c8 <tcp_timer_needed>
      }
      break;
 8013cfc:	e026      	b.n	8013d4c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013cfe:	6878      	ldr	r0, [r7, #4]
 8013d00:	f000 f93c 	bl	8013f7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013d04:	4b17      	ldr	r3, [pc, #92]	@ (8013d64 <tcp_process+0x7d0>)
 8013d06:	781b      	ldrb	r3, [r3, #0]
 8013d08:	f003 0310 	and.w	r3, r3, #16
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d01f      	beq.n	8013d50 <tcp_process+0x7bc>
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013d14:	4b14      	ldr	r3, [pc, #80]	@ (8013d68 <tcp_process+0x7d4>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	429a      	cmp	r2, r3
 8013d1a:	d119      	bne.n	8013d50 <tcp_process+0x7bc>
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d115      	bne.n	8013d50 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013d24:	4b11      	ldr	r3, [pc, #68]	@ (8013d6c <tcp_process+0x7d8>)
 8013d26:	781b      	ldrb	r3, [r3, #0]
 8013d28:	f043 0310 	orr.w	r3, r3, #16
 8013d2c:	b2da      	uxtb	r2, r3
 8013d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8013d6c <tcp_process+0x7d8>)
 8013d30:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013d32:	e00d      	b.n	8013d50 <tcp_process+0x7bc>
    default:
      break;
 8013d34:	bf00      	nop
 8013d36:	e00c      	b.n	8013d52 <tcp_process+0x7be>
      break;
 8013d38:	bf00      	nop
 8013d3a:	e00a      	b.n	8013d52 <tcp_process+0x7be>
      break;
 8013d3c:	bf00      	nop
 8013d3e:	e008      	b.n	8013d52 <tcp_process+0x7be>
      break;
 8013d40:	bf00      	nop
 8013d42:	e006      	b.n	8013d52 <tcp_process+0x7be>
      break;
 8013d44:	bf00      	nop
 8013d46:	e004      	b.n	8013d52 <tcp_process+0x7be>
      break;
 8013d48:	bf00      	nop
 8013d4a:	e002      	b.n	8013d52 <tcp_process+0x7be>
      break;
 8013d4c:	bf00      	nop
 8013d4e:	e000      	b.n	8013d52 <tcp_process+0x7be>
      break;
 8013d50:	bf00      	nop
  }
  return ERR_OK;
 8013d52:	2300      	movs	r3, #0
}
 8013d54:	4618      	mov	r0, r3
 8013d56:	3724      	adds	r7, #36	@ 0x24
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd90      	pop	{r4, r7, pc}
 8013d5c:	24007f14 	.word	0x24007f14
 8013d60:	24007f10 	.word	0x24007f10
 8013d64:	24007f44 	.word	0x24007f44
 8013d68:	24007f3c 	.word	0x24007f3c
 8013d6c:	24007f45 	.word	0x24007f45
 8013d70:	24007f0c 	.word	0x24007f0c

08013d74 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013d74:	b590      	push	{r4, r7, lr}
 8013d76:	b085      	sub	sp, #20
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
 8013d7c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d106      	bne.n	8013d92 <tcp_oos_insert_segment+0x1e>
 8013d84:	4b3b      	ldr	r3, [pc, #236]	@ (8013e74 <tcp_oos_insert_segment+0x100>)
 8013d86:	f240 421f 	movw	r2, #1055	@ 0x41f
 8013d8a:	493b      	ldr	r1, [pc, #236]	@ (8013e78 <tcp_oos_insert_segment+0x104>)
 8013d8c:	483b      	ldr	r0, [pc, #236]	@ (8013e7c <tcp_oos_insert_segment+0x108>)
 8013d8e:	f003 fcd1 	bl	8017734 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	68db      	ldr	r3, [r3, #12]
 8013d96:	899b      	ldrh	r3, [r3, #12]
 8013d98:	b29b      	uxth	r3, r3
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7f7 f842 	bl	800ae24 <lwip_htons>
 8013da0:	4603      	mov	r3, r0
 8013da2:	b2db      	uxtb	r3, r3
 8013da4:	f003 0301 	and.w	r3, r3, #1
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d028      	beq.n	8013dfe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013dac:	6838      	ldr	r0, [r7, #0]
 8013dae:	f7fe fa63 	bl	8012278 <tcp_segs_free>
    next = NULL;
 8013db2:	2300      	movs	r3, #0
 8013db4:	603b      	str	r3, [r7, #0]
 8013db6:	e056      	b.n	8013e66 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	68db      	ldr	r3, [r3, #12]
 8013dbc:	899b      	ldrh	r3, [r3, #12]
 8013dbe:	b29b      	uxth	r3, r3
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7f7 f82f 	bl	800ae24 <lwip_htons>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	b2db      	uxtb	r3, r3
 8013dca:	f003 0301 	and.w	r3, r3, #1
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d00d      	beq.n	8013dee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	68db      	ldr	r3, [r3, #12]
 8013dd6:	899b      	ldrh	r3, [r3, #12]
 8013dd8:	b29c      	uxth	r4, r3
 8013dda:	2001      	movs	r0, #1
 8013ddc:	f7f7 f822 	bl	800ae24 <lwip_htons>
 8013de0:	4603      	mov	r3, r0
 8013de2:	461a      	mov	r2, r3
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	68db      	ldr	r3, [r3, #12]
 8013de8:	4322      	orrs	r2, r4
 8013dea:	b292      	uxth	r2, r2
 8013dec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013dee:	683b      	ldr	r3, [r7, #0]
 8013df0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013df2:	683b      	ldr	r3, [r7, #0]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013df8:	68f8      	ldr	r0, [r7, #12]
 8013dfa:	f7fe fa52 	bl	80122a2 <tcp_seg_free>
    while (next &&
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d00e      	beq.n	8013e22 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	891b      	ldrh	r3, [r3, #8]
 8013e08:	461a      	mov	r2, r3
 8013e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8013e80 <tcp_oos_insert_segment+0x10c>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	441a      	add	r2, r3
 8013e10:	683b      	ldr	r3, [r7, #0]
 8013e12:	68db      	ldr	r3, [r3, #12]
 8013e14:	685b      	ldr	r3, [r3, #4]
 8013e16:	6839      	ldr	r1, [r7, #0]
 8013e18:	8909      	ldrh	r1, [r1, #8]
 8013e1a:	440b      	add	r3, r1
 8013e1c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	daca      	bge.n	8013db8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d01e      	beq.n	8013e66 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	891b      	ldrh	r3, [r3, #8]
 8013e2c:	461a      	mov	r2, r3
 8013e2e:	4b14      	ldr	r3, [pc, #80]	@ (8013e80 <tcp_oos_insert_segment+0x10c>)
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	441a      	add	r2, r3
 8013e34:	683b      	ldr	r3, [r7, #0]
 8013e36:	68db      	ldr	r3, [r3, #12]
 8013e38:	685b      	ldr	r3, [r3, #4]
 8013e3a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	dd12      	ble.n	8013e66 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	68db      	ldr	r3, [r3, #12]
 8013e44:	685b      	ldr	r3, [r3, #4]
 8013e46:	b29a      	uxth	r2, r3
 8013e48:	4b0d      	ldr	r3, [pc, #52]	@ (8013e80 <tcp_oos_insert_segment+0x10c>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	b29b      	uxth	r3, r3
 8013e4e:	1ad3      	subs	r3, r2, r3
 8013e50:	b29a      	uxth	r2, r3
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	685a      	ldr	r2, [r3, #4]
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	891b      	ldrh	r3, [r3, #8]
 8013e5e:	4619      	mov	r1, r3
 8013e60:	4610      	mov	r0, r2
 8013e62:	f7fc fd17 	bl	8010894 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	683a      	ldr	r2, [r7, #0]
 8013e6a:	601a      	str	r2, [r3, #0]
}
 8013e6c:	bf00      	nop
 8013e6e:	3714      	adds	r7, #20
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd90      	pop	{r4, r7, pc}
 8013e74:	0801a574 	.word	0x0801a574
 8013e78:	0801a864 	.word	0x0801a864
 8013e7c:	0801a5f0 	.word	0x0801a5f0
 8013e80:	24007f38 	.word	0x24007f38

08013e84 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013e84:	b5b0      	push	{r4, r5, r7, lr}
 8013e86:	b086      	sub	sp, #24
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	60f8      	str	r0, [r7, #12]
 8013e8c:	60b9      	str	r1, [r7, #8]
 8013e8e:	607a      	str	r2, [r7, #4]
 8013e90:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013e92:	e03e      	b.n	8013f12 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013e94:	68bb      	ldr	r3, [r7, #8]
 8013e96:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	685b      	ldr	r3, [r3, #4]
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f7fc ff08 	bl	8010cb8 <pbuf_clen>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013eb2:	8a7a      	ldrh	r2, [r7, #18]
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d906      	bls.n	8013ec6 <tcp_free_acked_segments+0x42>
 8013eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8013f64 <tcp_free_acked_segments+0xe0>)
 8013eba:	f240 4257 	movw	r2, #1111	@ 0x457
 8013ebe:	492a      	ldr	r1, [pc, #168]	@ (8013f68 <tcp_free_acked_segments+0xe4>)
 8013ec0:	482a      	ldr	r0, [pc, #168]	@ (8013f6c <tcp_free_acked_segments+0xe8>)
 8013ec2:	f003 fc37 	bl	8017734 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8013ecc:	8a7b      	ldrh	r3, [r7, #18]
 8013ece:	1ad3      	subs	r3, r2, r3
 8013ed0:	b29a      	uxth	r2, r3
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013ed8:	697b      	ldr	r3, [r7, #20]
 8013eda:	891a      	ldrh	r2, [r3, #8]
 8013edc:	4b24      	ldr	r3, [pc, #144]	@ (8013f70 <tcp_free_acked_segments+0xec>)
 8013ede:	881b      	ldrh	r3, [r3, #0]
 8013ee0:	4413      	add	r3, r2
 8013ee2:	b29a      	uxth	r2, r3
 8013ee4:	4b22      	ldr	r3, [pc, #136]	@ (8013f70 <tcp_free_acked_segments+0xec>)
 8013ee6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013ee8:	6978      	ldr	r0, [r7, #20]
 8013eea:	f7fe f9da 	bl	80122a2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d00c      	beq.n	8013f12 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013ef8:	68bb      	ldr	r3, [r7, #8]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d109      	bne.n	8013f12 <tcp_free_acked_segments+0x8e>
 8013efe:	683b      	ldr	r3, [r7, #0]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d106      	bne.n	8013f12 <tcp_free_acked_segments+0x8e>
 8013f04:	4b17      	ldr	r3, [pc, #92]	@ (8013f64 <tcp_free_acked_segments+0xe0>)
 8013f06:	f240 4261 	movw	r2, #1121	@ 0x461
 8013f0a:	491a      	ldr	r1, [pc, #104]	@ (8013f74 <tcp_free_acked_segments+0xf0>)
 8013f0c:	4817      	ldr	r0, [pc, #92]	@ (8013f6c <tcp_free_acked_segments+0xe8>)
 8013f0e:	f003 fc11 	bl	8017734 <iprintf>
  while (seg_list != NULL &&
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d020      	beq.n	8013f5a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013f18:	68bb      	ldr	r3, [r7, #8]
 8013f1a:	68db      	ldr	r3, [r3, #12]
 8013f1c:	685b      	ldr	r3, [r3, #4]
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7f6 ff95 	bl	800ae4e <lwip_htonl>
 8013f24:	4604      	mov	r4, r0
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	891b      	ldrh	r3, [r3, #8]
 8013f2a:	461d      	mov	r5, r3
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	68db      	ldr	r3, [r3, #12]
 8013f30:	899b      	ldrh	r3, [r3, #12]
 8013f32:	b29b      	uxth	r3, r3
 8013f34:	4618      	mov	r0, r3
 8013f36:	f7f6 ff75 	bl	800ae24 <lwip_htons>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	b2db      	uxtb	r3, r3
 8013f3e:	f003 0303 	and.w	r3, r3, #3
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d001      	beq.n	8013f4a <tcp_free_acked_segments+0xc6>
 8013f46:	2301      	movs	r3, #1
 8013f48:	e000      	b.n	8013f4c <tcp_free_acked_segments+0xc8>
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	442b      	add	r3, r5
 8013f4e:	18e2      	adds	r2, r4, r3
 8013f50:	4b09      	ldr	r3, [pc, #36]	@ (8013f78 <tcp_free_acked_segments+0xf4>)
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	dd9c      	ble.n	8013e94 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013f5a:	68bb      	ldr	r3, [r7, #8]
}
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	3718      	adds	r7, #24
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bdb0      	pop	{r4, r5, r7, pc}
 8013f64:	0801a574 	.word	0x0801a574
 8013f68:	0801a88c 	.word	0x0801a88c
 8013f6c:	0801a5f0 	.word	0x0801a5f0
 8013f70:	24007f40 	.word	0x24007f40
 8013f74:	0801a8b4 	.word	0x0801a8b4
 8013f78:	24007f3c 	.word	0x24007f3c

08013f7c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013f7c:	b5b0      	push	{r4, r5, r7, lr}
 8013f7e:	b094      	sub	sp, #80	@ 0x50
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013f84:	2300      	movs	r3, #0
 8013f86:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d106      	bne.n	8013f9c <tcp_receive+0x20>
 8013f8e:	4b91      	ldr	r3, [pc, #580]	@ (80141d4 <tcp_receive+0x258>)
 8013f90:	f240 427b 	movw	r2, #1147	@ 0x47b
 8013f94:	4990      	ldr	r1, [pc, #576]	@ (80141d8 <tcp_receive+0x25c>)
 8013f96:	4891      	ldr	r0, [pc, #580]	@ (80141dc <tcp_receive+0x260>)
 8013f98:	f003 fbcc 	bl	8017734 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	7d1b      	ldrb	r3, [r3, #20]
 8013fa0:	2b03      	cmp	r3, #3
 8013fa2:	d806      	bhi.n	8013fb2 <tcp_receive+0x36>
 8013fa4:	4b8b      	ldr	r3, [pc, #556]	@ (80141d4 <tcp_receive+0x258>)
 8013fa6:	f240 427c 	movw	r2, #1148	@ 0x47c
 8013faa:	498d      	ldr	r1, [pc, #564]	@ (80141e0 <tcp_receive+0x264>)
 8013fac:	488b      	ldr	r0, [pc, #556]	@ (80141dc <tcp_receive+0x260>)
 8013fae:	f003 fbc1 	bl	8017734 <iprintf>

  if (flags & TCP_ACK) {
 8013fb2:	4b8c      	ldr	r3, [pc, #560]	@ (80141e4 <tcp_receive+0x268>)
 8013fb4:	781b      	ldrb	r3, [r3, #0]
 8013fb6:	f003 0310 	and.w	r3, r3, #16
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	f000 8264 	beq.w	8014488 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013fc6:	461a      	mov	r2, r3
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013fcc:	4413      	add	r3, r2
 8013fce:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013fd4:	4b84      	ldr	r3, [pc, #528]	@ (80141e8 <tcp_receive+0x26c>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	1ad3      	subs	r3, r2, r3
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	db1b      	blt.n	8014016 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013fe2:	4b81      	ldr	r3, [pc, #516]	@ (80141e8 <tcp_receive+0x26c>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d106      	bne.n	8013ff8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013fee:	4b7f      	ldr	r3, [pc, #508]	@ (80141ec <tcp_receive+0x270>)
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	1ad3      	subs	r3, r2, r3
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	db0e      	blt.n	8014016 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013ffc:	4b7b      	ldr	r3, [pc, #492]	@ (80141ec <tcp_receive+0x270>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014000:	429a      	cmp	r2, r3
 8014002:	d125      	bne.n	8014050 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014004:	4b7a      	ldr	r3, [pc, #488]	@ (80141f0 <tcp_receive+0x274>)
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	89db      	ldrh	r3, [r3, #14]
 801400a:	b29a      	uxth	r2, r3
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014012:	429a      	cmp	r2, r3
 8014014:	d91c      	bls.n	8014050 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014016:	4b76      	ldr	r3, [pc, #472]	@ (80141f0 <tcp_receive+0x274>)
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	89db      	ldrh	r3, [r3, #14]
 801401c:	b29a      	uxth	r2, r3
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014030:	429a      	cmp	r2, r3
 8014032:	d205      	bcs.n	8014040 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8014040:	4b69      	ldr	r3, [pc, #420]	@ (80141e8 <tcp_receive+0x26c>)
 8014042:	681a      	ldr	r2, [r3, #0]
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8014048:	4b68      	ldr	r3, [pc, #416]	@ (80141ec <tcp_receive+0x270>)
 801404a:	681a      	ldr	r2, [r3, #0]
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014050:	4b66      	ldr	r3, [pc, #408]	@ (80141ec <tcp_receive+0x270>)
 8014052:	681a      	ldr	r2, [r3, #0]
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014058:	1ad3      	subs	r3, r2, r3
 801405a:	2b00      	cmp	r3, #0
 801405c:	dc58      	bgt.n	8014110 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801405e:	4b65      	ldr	r3, [pc, #404]	@ (80141f4 <tcp_receive+0x278>)
 8014060:	881b      	ldrh	r3, [r3, #0]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d14b      	bne.n	80140fe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801406a:	687a      	ldr	r2, [r7, #4]
 801406c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8014070:	4413      	add	r3, r2
 8014072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014074:	429a      	cmp	r2, r3
 8014076:	d142      	bne.n	80140fe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801407e:	2b00      	cmp	r3, #0
 8014080:	db3d      	blt.n	80140fe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014086:	4b59      	ldr	r3, [pc, #356]	@ (80141ec <tcp_receive+0x270>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	429a      	cmp	r2, r3
 801408c:	d137      	bne.n	80140fe <tcp_receive+0x182>
              found_dupack = 1;
 801408e:	2301      	movs	r3, #1
 8014090:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014098:	2bff      	cmp	r3, #255	@ 0xff
 801409a:	d007      	beq.n	80140ac <tcp_receive+0x130>
                ++pcb->dupacks;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80140a2:	3301      	adds	r3, #1
 80140a4:	b2da      	uxtb	r2, r3
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80140b2:	2b03      	cmp	r3, #3
 80140b4:	d91b      	bls.n	80140ee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80140c0:	4413      	add	r3, r2
 80140c2:	b29a      	uxth	r2, r3
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80140ca:	429a      	cmp	r2, r3
 80140cc:	d30a      	bcc.n	80140e4 <tcp_receive+0x168>
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80140d8:	4413      	add	r3, r2
 80140da:	b29a      	uxth	r2, r3
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80140e2:	e004      	b.n	80140ee <tcp_receive+0x172>
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80140ea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80140f4:	2b02      	cmp	r3, #2
 80140f6:	d902      	bls.n	80140fe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80140f8:	6878      	ldr	r0, [r7, #4]
 80140fa:	f001 fee7 	bl	8015ecc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80140fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014100:	2b00      	cmp	r3, #0
 8014102:	f040 8161 	bne.w	80143c8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2200      	movs	r2, #0
 801410a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801410e:	e15b      	b.n	80143c8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014110:	4b36      	ldr	r3, [pc, #216]	@ (80141ec <tcp_receive+0x270>)
 8014112:	681a      	ldr	r2, [r3, #0]
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014118:	1ad3      	subs	r3, r2, r3
 801411a:	3b01      	subs	r3, #1
 801411c:	2b00      	cmp	r3, #0
 801411e:	f2c0 814e 	blt.w	80143be <tcp_receive+0x442>
 8014122:	4b32      	ldr	r3, [pc, #200]	@ (80141ec <tcp_receive+0x270>)
 8014124:	681a      	ldr	r2, [r3, #0]
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801412a:	1ad3      	subs	r3, r2, r3
 801412c:	2b00      	cmp	r3, #0
 801412e:	f300 8146 	bgt.w	80143be <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	8b5b      	ldrh	r3, [r3, #26]
 8014136:	f003 0304 	and.w	r3, r3, #4
 801413a:	2b00      	cmp	r3, #0
 801413c:	d010      	beq.n	8014160 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	8b5b      	ldrh	r3, [r3, #26]
 8014142:	f023 0304 	bic.w	r3, r3, #4
 8014146:	b29a      	uxth	r2, r3
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	2200      	movs	r2, #0
 801415c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	2200      	movs	r2, #0
 8014164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801416e:	10db      	asrs	r3, r3, #3
 8014170:	b21b      	sxth	r3, r3
 8014172:	b29a      	uxth	r2, r3
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801417a:	b29b      	uxth	r3, r3
 801417c:	4413      	add	r3, r2
 801417e:	b29b      	uxth	r3, r3
 8014180:	b21a      	sxth	r2, r3
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014188:	4b18      	ldr	r3, [pc, #96]	@ (80141ec <tcp_receive+0x270>)
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	b29a      	uxth	r2, r3
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014192:	b29b      	uxth	r3, r3
 8014194:	1ad3      	subs	r3, r2, r3
 8014196:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	2200      	movs	r2, #0
 801419c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80141a0:	4b12      	ldr	r3, [pc, #72]	@ (80141ec <tcp_receive+0x270>)
 80141a2:	681a      	ldr	r2, [r3, #0]
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	7d1b      	ldrb	r3, [r3, #20]
 80141ac:	2b03      	cmp	r3, #3
 80141ae:	f240 8097 	bls.w	80142e0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80141be:	429a      	cmp	r2, r3
 80141c0:	d245      	bcs.n	801424e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	8b5b      	ldrh	r3, [r3, #26]
 80141c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d014      	beq.n	80141f8 <tcp_receive+0x27c>
 80141ce:	2301      	movs	r3, #1
 80141d0:	e013      	b.n	80141fa <tcp_receive+0x27e>
 80141d2:	bf00      	nop
 80141d4:	0801a574 	.word	0x0801a574
 80141d8:	0801a8d4 	.word	0x0801a8d4
 80141dc:	0801a5f0 	.word	0x0801a5f0
 80141e0:	0801a8f0 	.word	0x0801a8f0
 80141e4:	24007f44 	.word	0x24007f44
 80141e8:	24007f38 	.word	0x24007f38
 80141ec:	24007f3c 	.word	0x24007f3c
 80141f0:	24007f28 	.word	0x24007f28
 80141f4:	24007f42 	.word	0x24007f42
 80141f8:	2302      	movs	r3, #2
 80141fa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80141fe:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014202:	b29a      	uxth	r2, r3
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014208:	fb12 f303 	smulbb	r3, r2, r3
 801420c:	b29b      	uxth	r3, r3
 801420e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8014210:	4293      	cmp	r3, r2
 8014212:	bf28      	it	cs
 8014214:	4613      	movcs	r3, r2
 8014216:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801421e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014220:	4413      	add	r3, r2
 8014222:	b29a      	uxth	r2, r3
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801422a:	429a      	cmp	r2, r3
 801422c:	d309      	bcc.n	8014242 <tcp_receive+0x2c6>
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014234:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014236:	4413      	add	r3, r2
 8014238:	b29a      	uxth	r2, r3
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014240:	e04e      	b.n	80142e0 <tcp_receive+0x364>
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014248:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801424c:	e048      	b.n	80142e0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014254:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014256:	4413      	add	r3, r2
 8014258:	b29a      	uxth	r2, r3
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014260:	429a      	cmp	r2, r3
 8014262:	d309      	bcc.n	8014278 <tcp_receive+0x2fc>
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801426a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801426c:	4413      	add	r3, r2
 801426e:	b29a      	uxth	r2, r3
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014276:	e004      	b.n	8014282 <tcp_receive+0x306>
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801427e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801428e:	429a      	cmp	r2, r3
 8014290:	d326      	bcc.n	80142e0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801429e:	1ad3      	subs	r3, r2, r3
 80142a0:	b29a      	uxth	r2, r3
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80142b2:	4413      	add	r3, r2
 80142b4:	b29a      	uxth	r2, r3
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80142bc:	429a      	cmp	r2, r3
 80142be:	d30a      	bcc.n	80142d6 <tcp_receive+0x35a>
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80142ca:	4413      	add	r3, r2
 80142cc:	b29a      	uxth	r2, r3
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80142d4:	e004      	b.n	80142e0 <tcp_receive+0x364>
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80142dc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80142e8:	4a98      	ldr	r2, [pc, #608]	@ (801454c <tcp_receive+0x5d0>)
 80142ea:	6878      	ldr	r0, [r7, #4]
 80142ec:	f7ff fdca 	bl	8013e84 <tcp_free_acked_segments>
 80142f0:	4602      	mov	r2, r0
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80142fe:	4a94      	ldr	r2, [pc, #592]	@ (8014550 <tcp_receive+0x5d4>)
 8014300:	6878      	ldr	r0, [r7, #4]
 8014302:	f7ff fdbf 	bl	8013e84 <tcp_free_acked_segments>
 8014306:	4602      	mov	r2, r0
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014310:	2b00      	cmp	r3, #0
 8014312:	d104      	bne.n	801431e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801431a:	861a      	strh	r2, [r3, #48]	@ 0x30
 801431c:	e002      	b.n	8014324 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	2200      	movs	r2, #0
 8014322:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2200      	movs	r2, #0
 8014328:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801432e:	2b00      	cmp	r3, #0
 8014330:	d103      	bne.n	801433a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	2200      	movs	r2, #0
 8014336:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8014340:	4b84      	ldr	r3, [pc, #528]	@ (8014554 <tcp_receive+0x5d8>)
 8014342:	881b      	ldrh	r3, [r3, #0]
 8014344:	4413      	add	r3, r2
 8014346:	b29a      	uxth	r2, r3
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	8b5b      	ldrh	r3, [r3, #26]
 8014352:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014356:	2b00      	cmp	r3, #0
 8014358:	d035      	beq.n	80143c6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801435e:	2b00      	cmp	r3, #0
 8014360:	d118      	bne.n	8014394 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014366:	2b00      	cmp	r3, #0
 8014368:	d00c      	beq.n	8014384 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014372:	68db      	ldr	r3, [r3, #12]
 8014374:	685b      	ldr	r3, [r3, #4]
 8014376:	4618      	mov	r0, r3
 8014378:	f7f6 fd69 	bl	800ae4e <lwip_htonl>
 801437c:	4603      	mov	r3, r0
 801437e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014380:	2b00      	cmp	r3, #0
 8014382:	dc20      	bgt.n	80143c6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	8b5b      	ldrh	r3, [r3, #26]
 8014388:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801438c:	b29a      	uxth	r2, r3
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014392:	e018      	b.n	80143c6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801439c:	68db      	ldr	r3, [r3, #12]
 801439e:	685b      	ldr	r3, [r3, #4]
 80143a0:	4618      	mov	r0, r3
 80143a2:	f7f6 fd54 	bl	800ae4e <lwip_htonl>
 80143a6:	4603      	mov	r3, r0
 80143a8:	1ae3      	subs	r3, r4, r3
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	dc0b      	bgt.n	80143c6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	8b5b      	ldrh	r3, [r3, #26]
 80143b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80143b6:	b29a      	uxth	r2, r3
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80143bc:	e003      	b.n	80143c6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80143be:	6878      	ldr	r0, [r7, #4]
 80143c0:	f001 ff70 	bl	80162a4 <tcp_send_empty_ack>
 80143c4:	e000      	b.n	80143c8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80143c6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d05b      	beq.n	8014488 <tcp_receive+0x50c>
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80143d4:	4b60      	ldr	r3, [pc, #384]	@ (8014558 <tcp_receive+0x5dc>)
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	1ad3      	subs	r3, r2, r3
 80143da:	2b00      	cmp	r3, #0
 80143dc:	da54      	bge.n	8014488 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80143de:	4b5f      	ldr	r3, [pc, #380]	@ (801455c <tcp_receive+0x5e0>)
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	b29a      	uxth	r2, r3
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80143e8:	b29b      	uxth	r3, r3
 80143ea:	1ad3      	subs	r3, r2, r3
 80143ec:	b29b      	uxth	r3, r3
 80143ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80143f2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80143fc:	10db      	asrs	r3, r3, #3
 80143fe:	b21b      	sxth	r3, r3
 8014400:	b29b      	uxth	r3, r3
 8014402:	1ad3      	subs	r3, r2, r3
 8014404:	b29b      	uxth	r3, r3
 8014406:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014410:	b29a      	uxth	r2, r3
 8014412:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8014416:	4413      	add	r3, r2
 8014418:	b29b      	uxth	r3, r3
 801441a:	b21a      	sxth	r2, r3
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8014420:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8014424:	2b00      	cmp	r3, #0
 8014426:	da05      	bge.n	8014434 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8014428:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801442c:	425b      	negs	r3, r3
 801442e:	b29b      	uxth	r3, r3
 8014430:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014434:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801443e:	109b      	asrs	r3, r3, #2
 8014440:	b21b      	sxth	r3, r3
 8014442:	b29b      	uxth	r3, r3
 8014444:	1ad3      	subs	r3, r2, r3
 8014446:	b29b      	uxth	r3, r3
 8014448:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014452:	b29a      	uxth	r2, r3
 8014454:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8014458:	4413      	add	r3, r2
 801445a:	b29b      	uxth	r3, r3
 801445c:	b21a      	sxth	r2, r3
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014468:	10db      	asrs	r3, r3, #3
 801446a:	b21b      	sxth	r3, r3
 801446c:	b29a      	uxth	r2, r3
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014474:	b29b      	uxth	r3, r3
 8014476:	4413      	add	r3, r2
 8014478:	b29b      	uxth	r3, r3
 801447a:	b21a      	sxth	r2, r3
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	2200      	movs	r2, #0
 8014486:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014488:	4b35      	ldr	r3, [pc, #212]	@ (8014560 <tcp_receive+0x5e4>)
 801448a:	881b      	ldrh	r3, [r3, #0]
 801448c:	2b00      	cmp	r3, #0
 801448e:	f000 84df 	beq.w	8014e50 <tcp_receive+0xed4>
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	7d1b      	ldrb	r3, [r3, #20]
 8014496:	2b06      	cmp	r3, #6
 8014498:	f200 84da 	bhi.w	8014e50 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80144a0:	4b30      	ldr	r3, [pc, #192]	@ (8014564 <tcp_receive+0x5e8>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	1ad3      	subs	r3, r2, r3
 80144a6:	3b01      	subs	r3, #1
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	f2c0 808f 	blt.w	80145cc <tcp_receive+0x650>
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80144b2:	4b2b      	ldr	r3, [pc, #172]	@ (8014560 <tcp_receive+0x5e4>)
 80144b4:	881b      	ldrh	r3, [r3, #0]
 80144b6:	4619      	mov	r1, r3
 80144b8:	4b2a      	ldr	r3, [pc, #168]	@ (8014564 <tcp_receive+0x5e8>)
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	440b      	add	r3, r1
 80144be:	1ad3      	subs	r3, r2, r3
 80144c0:	3301      	adds	r3, #1
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	f300 8082 	bgt.w	80145cc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80144c8:	4b27      	ldr	r3, [pc, #156]	@ (8014568 <tcp_receive+0x5ec>)
 80144ca:	685b      	ldr	r3, [r3, #4]
 80144cc:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80144d2:	4b24      	ldr	r3, [pc, #144]	@ (8014564 <tcp_receive+0x5e8>)
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	1ad3      	subs	r3, r2, r3
 80144d8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80144da:	4b23      	ldr	r3, [pc, #140]	@ (8014568 <tcp_receive+0x5ec>)
 80144dc:	685b      	ldr	r3, [r3, #4]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d106      	bne.n	80144f0 <tcp_receive+0x574>
 80144e2:	4b22      	ldr	r3, [pc, #136]	@ (801456c <tcp_receive+0x5f0>)
 80144e4:	f240 5294 	movw	r2, #1428	@ 0x594
 80144e8:	4921      	ldr	r1, [pc, #132]	@ (8014570 <tcp_receive+0x5f4>)
 80144ea:	4822      	ldr	r0, [pc, #136]	@ (8014574 <tcp_receive+0x5f8>)
 80144ec:	f003 f922 	bl	8017734 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80144f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144f2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80144f6:	4293      	cmp	r3, r2
 80144f8:	d906      	bls.n	8014508 <tcp_receive+0x58c>
 80144fa:	4b1c      	ldr	r3, [pc, #112]	@ (801456c <tcp_receive+0x5f0>)
 80144fc:	f240 5295 	movw	r2, #1429	@ 0x595
 8014500:	491d      	ldr	r1, [pc, #116]	@ (8014578 <tcp_receive+0x5fc>)
 8014502:	481c      	ldr	r0, [pc, #112]	@ (8014574 <tcp_receive+0x5f8>)
 8014504:	f003 f916 	bl	8017734 <iprintf>
      off = (u16_t)off32;
 8014508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801450a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801450e:	4b16      	ldr	r3, [pc, #88]	@ (8014568 <tcp_receive+0x5ec>)
 8014510:	685b      	ldr	r3, [r3, #4]
 8014512:	891b      	ldrh	r3, [r3, #8]
 8014514:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014518:	429a      	cmp	r2, r3
 801451a:	d906      	bls.n	801452a <tcp_receive+0x5ae>
 801451c:	4b13      	ldr	r3, [pc, #76]	@ (801456c <tcp_receive+0x5f0>)
 801451e:	f240 5297 	movw	r2, #1431	@ 0x597
 8014522:	4916      	ldr	r1, [pc, #88]	@ (801457c <tcp_receive+0x600>)
 8014524:	4813      	ldr	r0, [pc, #76]	@ (8014574 <tcp_receive+0x5f8>)
 8014526:	f003 f905 	bl	8017734 <iprintf>
      inseg.len -= off;
 801452a:	4b0f      	ldr	r3, [pc, #60]	@ (8014568 <tcp_receive+0x5ec>)
 801452c:	891a      	ldrh	r2, [r3, #8]
 801452e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014532:	1ad3      	subs	r3, r2, r3
 8014534:	b29a      	uxth	r2, r3
 8014536:	4b0c      	ldr	r3, [pc, #48]	@ (8014568 <tcp_receive+0x5ec>)
 8014538:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801453a:	4b0b      	ldr	r3, [pc, #44]	@ (8014568 <tcp_receive+0x5ec>)
 801453c:	685b      	ldr	r3, [r3, #4]
 801453e:	891a      	ldrh	r2, [r3, #8]
 8014540:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014544:	1ad3      	subs	r3, r2, r3
 8014546:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8014548:	e02a      	b.n	80145a0 <tcp_receive+0x624>
 801454a:	bf00      	nop
 801454c:	0801a90c 	.word	0x0801a90c
 8014550:	0801a914 	.word	0x0801a914
 8014554:	24007f40 	.word	0x24007f40
 8014558:	24007f3c 	.word	0x24007f3c
 801455c:	24007f00 	.word	0x24007f00
 8014560:	24007f42 	.word	0x24007f42
 8014564:	24007f38 	.word	0x24007f38
 8014568:	24007f18 	.word	0x24007f18
 801456c:	0801a574 	.word	0x0801a574
 8014570:	0801a91c 	.word	0x0801a91c
 8014574:	0801a5f0 	.word	0x0801a5f0
 8014578:	0801a92c 	.word	0x0801a92c
 801457c:	0801a93c 	.word	0x0801a93c
        off -= p->len;
 8014580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014582:	895b      	ldrh	r3, [r3, #10]
 8014584:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014588:	1ad3      	subs	r3, r2, r3
 801458a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801458e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014590:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014592:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014596:	2200      	movs	r2, #0
 8014598:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801459a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80145a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145a2:	895b      	ldrh	r3, [r3, #10]
 80145a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80145a8:	429a      	cmp	r2, r3
 80145aa:	d8e9      	bhi.n	8014580 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80145ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80145b0:	4619      	mov	r1, r3
 80145b2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80145b4:	f7fc fa6c 	bl	8010a90 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145bc:	4a90      	ldr	r2, [pc, #576]	@ (8014800 <tcp_receive+0x884>)
 80145be:	6013      	str	r3, [r2, #0]
 80145c0:	4b90      	ldr	r3, [pc, #576]	@ (8014804 <tcp_receive+0x888>)
 80145c2:	68db      	ldr	r3, [r3, #12]
 80145c4:	4a8e      	ldr	r2, [pc, #568]	@ (8014800 <tcp_receive+0x884>)
 80145c6:	6812      	ldr	r2, [r2, #0]
 80145c8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80145ca:	e00d      	b.n	80145e8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80145cc:	4b8c      	ldr	r3, [pc, #560]	@ (8014800 <tcp_receive+0x884>)
 80145ce:	681a      	ldr	r2, [r3, #0]
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145d4:	1ad3      	subs	r3, r2, r3
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	da06      	bge.n	80145e8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	8b5b      	ldrh	r3, [r3, #26]
 80145de:	f043 0302 	orr.w	r3, r3, #2
 80145e2:	b29a      	uxth	r2, r3
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80145e8:	4b85      	ldr	r3, [pc, #532]	@ (8014800 <tcp_receive+0x884>)
 80145ea:	681a      	ldr	r2, [r3, #0]
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145f0:	1ad3      	subs	r3, r2, r3
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	f2c0 8427 	blt.w	8014e46 <tcp_receive+0xeca>
 80145f8:	4b81      	ldr	r3, [pc, #516]	@ (8014800 <tcp_receive+0x884>)
 80145fa:	681a      	ldr	r2, [r3, #0]
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014600:	6879      	ldr	r1, [r7, #4]
 8014602:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014604:	440b      	add	r3, r1
 8014606:	1ad3      	subs	r3, r2, r3
 8014608:	3301      	adds	r3, #1
 801460a:	2b00      	cmp	r3, #0
 801460c:	f300 841b 	bgt.w	8014e46 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014614:	4b7a      	ldr	r3, [pc, #488]	@ (8014800 <tcp_receive+0x884>)
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	429a      	cmp	r2, r3
 801461a:	f040 8298 	bne.w	8014b4e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801461e:	4b79      	ldr	r3, [pc, #484]	@ (8014804 <tcp_receive+0x888>)
 8014620:	891c      	ldrh	r4, [r3, #8]
 8014622:	4b78      	ldr	r3, [pc, #480]	@ (8014804 <tcp_receive+0x888>)
 8014624:	68db      	ldr	r3, [r3, #12]
 8014626:	899b      	ldrh	r3, [r3, #12]
 8014628:	b29b      	uxth	r3, r3
 801462a:	4618      	mov	r0, r3
 801462c:	f7f6 fbfa 	bl	800ae24 <lwip_htons>
 8014630:	4603      	mov	r3, r0
 8014632:	b2db      	uxtb	r3, r3
 8014634:	f003 0303 	and.w	r3, r3, #3
 8014638:	2b00      	cmp	r3, #0
 801463a:	d001      	beq.n	8014640 <tcp_receive+0x6c4>
 801463c:	2301      	movs	r3, #1
 801463e:	e000      	b.n	8014642 <tcp_receive+0x6c6>
 8014640:	2300      	movs	r3, #0
 8014642:	4423      	add	r3, r4
 8014644:	b29a      	uxth	r2, r3
 8014646:	4b70      	ldr	r3, [pc, #448]	@ (8014808 <tcp_receive+0x88c>)
 8014648:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801464e:	4b6e      	ldr	r3, [pc, #440]	@ (8014808 <tcp_receive+0x88c>)
 8014650:	881b      	ldrh	r3, [r3, #0]
 8014652:	429a      	cmp	r2, r3
 8014654:	d274      	bcs.n	8014740 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014656:	4b6b      	ldr	r3, [pc, #428]	@ (8014804 <tcp_receive+0x888>)
 8014658:	68db      	ldr	r3, [r3, #12]
 801465a:	899b      	ldrh	r3, [r3, #12]
 801465c:	b29b      	uxth	r3, r3
 801465e:	4618      	mov	r0, r3
 8014660:	f7f6 fbe0 	bl	800ae24 <lwip_htons>
 8014664:	4603      	mov	r3, r0
 8014666:	b2db      	uxtb	r3, r3
 8014668:	f003 0301 	and.w	r3, r3, #1
 801466c:	2b00      	cmp	r3, #0
 801466e:	d01e      	beq.n	80146ae <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014670:	4b64      	ldr	r3, [pc, #400]	@ (8014804 <tcp_receive+0x888>)
 8014672:	68db      	ldr	r3, [r3, #12]
 8014674:	899b      	ldrh	r3, [r3, #12]
 8014676:	b29b      	uxth	r3, r3
 8014678:	b21b      	sxth	r3, r3
 801467a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801467e:	b21c      	sxth	r4, r3
 8014680:	4b60      	ldr	r3, [pc, #384]	@ (8014804 <tcp_receive+0x888>)
 8014682:	68db      	ldr	r3, [r3, #12]
 8014684:	899b      	ldrh	r3, [r3, #12]
 8014686:	b29b      	uxth	r3, r3
 8014688:	4618      	mov	r0, r3
 801468a:	f7f6 fbcb 	bl	800ae24 <lwip_htons>
 801468e:	4603      	mov	r3, r0
 8014690:	b2db      	uxtb	r3, r3
 8014692:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8014696:	b29b      	uxth	r3, r3
 8014698:	4618      	mov	r0, r3
 801469a:	f7f6 fbc3 	bl	800ae24 <lwip_htons>
 801469e:	4603      	mov	r3, r0
 80146a0:	b21b      	sxth	r3, r3
 80146a2:	4323      	orrs	r3, r4
 80146a4:	b21a      	sxth	r2, r3
 80146a6:	4b57      	ldr	r3, [pc, #348]	@ (8014804 <tcp_receive+0x888>)
 80146a8:	68db      	ldr	r3, [r3, #12]
 80146aa:	b292      	uxth	r2, r2
 80146ac:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80146b2:	4b54      	ldr	r3, [pc, #336]	@ (8014804 <tcp_receive+0x888>)
 80146b4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80146b6:	4b53      	ldr	r3, [pc, #332]	@ (8014804 <tcp_receive+0x888>)
 80146b8:	68db      	ldr	r3, [r3, #12]
 80146ba:	899b      	ldrh	r3, [r3, #12]
 80146bc:	b29b      	uxth	r3, r3
 80146be:	4618      	mov	r0, r3
 80146c0:	f7f6 fbb0 	bl	800ae24 <lwip_htons>
 80146c4:	4603      	mov	r3, r0
 80146c6:	b2db      	uxtb	r3, r3
 80146c8:	f003 0302 	and.w	r3, r3, #2
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d005      	beq.n	80146dc <tcp_receive+0x760>
            inseg.len -= 1;
 80146d0:	4b4c      	ldr	r3, [pc, #304]	@ (8014804 <tcp_receive+0x888>)
 80146d2:	891b      	ldrh	r3, [r3, #8]
 80146d4:	3b01      	subs	r3, #1
 80146d6:	b29a      	uxth	r2, r3
 80146d8:	4b4a      	ldr	r3, [pc, #296]	@ (8014804 <tcp_receive+0x888>)
 80146da:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80146dc:	4b49      	ldr	r3, [pc, #292]	@ (8014804 <tcp_receive+0x888>)
 80146de:	685b      	ldr	r3, [r3, #4]
 80146e0:	4a48      	ldr	r2, [pc, #288]	@ (8014804 <tcp_receive+0x888>)
 80146e2:	8912      	ldrh	r2, [r2, #8]
 80146e4:	4611      	mov	r1, r2
 80146e6:	4618      	mov	r0, r3
 80146e8:	f7fc f8d4 	bl	8010894 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80146ec:	4b45      	ldr	r3, [pc, #276]	@ (8014804 <tcp_receive+0x888>)
 80146ee:	891c      	ldrh	r4, [r3, #8]
 80146f0:	4b44      	ldr	r3, [pc, #272]	@ (8014804 <tcp_receive+0x888>)
 80146f2:	68db      	ldr	r3, [r3, #12]
 80146f4:	899b      	ldrh	r3, [r3, #12]
 80146f6:	b29b      	uxth	r3, r3
 80146f8:	4618      	mov	r0, r3
 80146fa:	f7f6 fb93 	bl	800ae24 <lwip_htons>
 80146fe:	4603      	mov	r3, r0
 8014700:	b2db      	uxtb	r3, r3
 8014702:	f003 0303 	and.w	r3, r3, #3
 8014706:	2b00      	cmp	r3, #0
 8014708:	d001      	beq.n	801470e <tcp_receive+0x792>
 801470a:	2301      	movs	r3, #1
 801470c:	e000      	b.n	8014710 <tcp_receive+0x794>
 801470e:	2300      	movs	r3, #0
 8014710:	4423      	add	r3, r4
 8014712:	b29a      	uxth	r2, r3
 8014714:	4b3c      	ldr	r3, [pc, #240]	@ (8014808 <tcp_receive+0x88c>)
 8014716:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014718:	4b3b      	ldr	r3, [pc, #236]	@ (8014808 <tcp_receive+0x88c>)
 801471a:	881b      	ldrh	r3, [r3, #0]
 801471c:	461a      	mov	r2, r3
 801471e:	4b38      	ldr	r3, [pc, #224]	@ (8014800 <tcp_receive+0x884>)
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	441a      	add	r2, r3
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014728:	6879      	ldr	r1, [r7, #4]
 801472a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801472c:	440b      	add	r3, r1
 801472e:	429a      	cmp	r2, r3
 8014730:	d006      	beq.n	8014740 <tcp_receive+0x7c4>
 8014732:	4b36      	ldr	r3, [pc, #216]	@ (801480c <tcp_receive+0x890>)
 8014734:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8014738:	4935      	ldr	r1, [pc, #212]	@ (8014810 <tcp_receive+0x894>)
 801473a:	4836      	ldr	r0, [pc, #216]	@ (8014814 <tcp_receive+0x898>)
 801473c:	f002 fffa 	bl	8017734 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014744:	2b00      	cmp	r3, #0
 8014746:	f000 80e6 	beq.w	8014916 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801474a:	4b2e      	ldr	r3, [pc, #184]	@ (8014804 <tcp_receive+0x888>)
 801474c:	68db      	ldr	r3, [r3, #12]
 801474e:	899b      	ldrh	r3, [r3, #12]
 8014750:	b29b      	uxth	r3, r3
 8014752:	4618      	mov	r0, r3
 8014754:	f7f6 fb66 	bl	800ae24 <lwip_htons>
 8014758:	4603      	mov	r3, r0
 801475a:	b2db      	uxtb	r3, r3
 801475c:	f003 0301 	and.w	r3, r3, #1
 8014760:	2b00      	cmp	r3, #0
 8014762:	d010      	beq.n	8014786 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014764:	e00a      	b.n	801477c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801476a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014770:	681a      	ldr	r2, [r3, #0]
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8014776:	68f8      	ldr	r0, [r7, #12]
 8014778:	f7fd fd93 	bl	80122a2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014780:	2b00      	cmp	r3, #0
 8014782:	d1f0      	bne.n	8014766 <tcp_receive+0x7ea>
 8014784:	e0c7      	b.n	8014916 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801478a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801478c:	e051      	b.n	8014832 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801478e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014790:	68db      	ldr	r3, [r3, #12]
 8014792:	899b      	ldrh	r3, [r3, #12]
 8014794:	b29b      	uxth	r3, r3
 8014796:	4618      	mov	r0, r3
 8014798:	f7f6 fb44 	bl	800ae24 <lwip_htons>
 801479c:	4603      	mov	r3, r0
 801479e:	b2db      	uxtb	r3, r3
 80147a0:	f003 0301 	and.w	r3, r3, #1
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d03c      	beq.n	8014822 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80147a8:	4b16      	ldr	r3, [pc, #88]	@ (8014804 <tcp_receive+0x888>)
 80147aa:	68db      	ldr	r3, [r3, #12]
 80147ac:	899b      	ldrh	r3, [r3, #12]
 80147ae:	b29b      	uxth	r3, r3
 80147b0:	4618      	mov	r0, r3
 80147b2:	f7f6 fb37 	bl	800ae24 <lwip_htons>
 80147b6:	4603      	mov	r3, r0
 80147b8:	b2db      	uxtb	r3, r3
 80147ba:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d12f      	bne.n	8014822 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80147c2:	4b10      	ldr	r3, [pc, #64]	@ (8014804 <tcp_receive+0x888>)
 80147c4:	68db      	ldr	r3, [r3, #12]
 80147c6:	899b      	ldrh	r3, [r3, #12]
 80147c8:	b29c      	uxth	r4, r3
 80147ca:	2001      	movs	r0, #1
 80147cc:	f7f6 fb2a 	bl	800ae24 <lwip_htons>
 80147d0:	4603      	mov	r3, r0
 80147d2:	461a      	mov	r2, r3
 80147d4:	4b0b      	ldr	r3, [pc, #44]	@ (8014804 <tcp_receive+0x888>)
 80147d6:	68db      	ldr	r3, [r3, #12]
 80147d8:	4322      	orrs	r2, r4
 80147da:	b292      	uxth	r2, r2
 80147dc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80147de:	4b09      	ldr	r3, [pc, #36]	@ (8014804 <tcp_receive+0x888>)
 80147e0:	891c      	ldrh	r4, [r3, #8]
 80147e2:	4b08      	ldr	r3, [pc, #32]	@ (8014804 <tcp_receive+0x888>)
 80147e4:	68db      	ldr	r3, [r3, #12]
 80147e6:	899b      	ldrh	r3, [r3, #12]
 80147e8:	b29b      	uxth	r3, r3
 80147ea:	4618      	mov	r0, r3
 80147ec:	f7f6 fb1a 	bl	800ae24 <lwip_htons>
 80147f0:	4603      	mov	r3, r0
 80147f2:	b2db      	uxtb	r3, r3
 80147f4:	f003 0303 	and.w	r3, r3, #3
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d00d      	beq.n	8014818 <tcp_receive+0x89c>
 80147fc:	2301      	movs	r3, #1
 80147fe:	e00c      	b.n	801481a <tcp_receive+0x89e>
 8014800:	24007f38 	.word	0x24007f38
 8014804:	24007f18 	.word	0x24007f18
 8014808:	24007f42 	.word	0x24007f42
 801480c:	0801a574 	.word	0x0801a574
 8014810:	0801a94c 	.word	0x0801a94c
 8014814:	0801a5f0 	.word	0x0801a5f0
 8014818:	2300      	movs	r3, #0
 801481a:	4423      	add	r3, r4
 801481c:	b29a      	uxth	r2, r3
 801481e:	4b98      	ldr	r3, [pc, #608]	@ (8014a80 <tcp_receive+0xb04>)
 8014820:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014824:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801482c:	6938      	ldr	r0, [r7, #16]
 801482e:	f7fd fd38 	bl	80122a2 <tcp_seg_free>
            while (next &&
 8014832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014834:	2b00      	cmp	r3, #0
 8014836:	d00e      	beq.n	8014856 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014838:	4b91      	ldr	r3, [pc, #580]	@ (8014a80 <tcp_receive+0xb04>)
 801483a:	881b      	ldrh	r3, [r3, #0]
 801483c:	461a      	mov	r2, r3
 801483e:	4b91      	ldr	r3, [pc, #580]	@ (8014a84 <tcp_receive+0xb08>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	441a      	add	r2, r3
 8014844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014846:	68db      	ldr	r3, [r3, #12]
 8014848:	685b      	ldr	r3, [r3, #4]
 801484a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801484c:	8909      	ldrh	r1, [r1, #8]
 801484e:	440b      	add	r3, r1
 8014850:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014852:	2b00      	cmp	r3, #0
 8014854:	da9b      	bge.n	801478e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014858:	2b00      	cmp	r3, #0
 801485a:	d059      	beq.n	8014910 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801485c:	4b88      	ldr	r3, [pc, #544]	@ (8014a80 <tcp_receive+0xb04>)
 801485e:	881b      	ldrh	r3, [r3, #0]
 8014860:	461a      	mov	r2, r3
 8014862:	4b88      	ldr	r3, [pc, #544]	@ (8014a84 <tcp_receive+0xb08>)
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	441a      	add	r2, r3
 8014868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801486a:	68db      	ldr	r3, [r3, #12]
 801486c:	685b      	ldr	r3, [r3, #4]
 801486e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014870:	2b00      	cmp	r3, #0
 8014872:	dd4d      	ble.n	8014910 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014876:	68db      	ldr	r3, [r3, #12]
 8014878:	685b      	ldr	r3, [r3, #4]
 801487a:	b29a      	uxth	r2, r3
 801487c:	4b81      	ldr	r3, [pc, #516]	@ (8014a84 <tcp_receive+0xb08>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	b29b      	uxth	r3, r3
 8014882:	1ad3      	subs	r3, r2, r3
 8014884:	b29a      	uxth	r2, r3
 8014886:	4b80      	ldr	r3, [pc, #512]	@ (8014a88 <tcp_receive+0xb0c>)
 8014888:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801488a:	4b7f      	ldr	r3, [pc, #508]	@ (8014a88 <tcp_receive+0xb0c>)
 801488c:	68db      	ldr	r3, [r3, #12]
 801488e:	899b      	ldrh	r3, [r3, #12]
 8014890:	b29b      	uxth	r3, r3
 8014892:	4618      	mov	r0, r3
 8014894:	f7f6 fac6 	bl	800ae24 <lwip_htons>
 8014898:	4603      	mov	r3, r0
 801489a:	b2db      	uxtb	r3, r3
 801489c:	f003 0302 	and.w	r3, r3, #2
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d005      	beq.n	80148b0 <tcp_receive+0x934>
                inseg.len -= 1;
 80148a4:	4b78      	ldr	r3, [pc, #480]	@ (8014a88 <tcp_receive+0xb0c>)
 80148a6:	891b      	ldrh	r3, [r3, #8]
 80148a8:	3b01      	subs	r3, #1
 80148aa:	b29a      	uxth	r2, r3
 80148ac:	4b76      	ldr	r3, [pc, #472]	@ (8014a88 <tcp_receive+0xb0c>)
 80148ae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80148b0:	4b75      	ldr	r3, [pc, #468]	@ (8014a88 <tcp_receive+0xb0c>)
 80148b2:	685b      	ldr	r3, [r3, #4]
 80148b4:	4a74      	ldr	r2, [pc, #464]	@ (8014a88 <tcp_receive+0xb0c>)
 80148b6:	8912      	ldrh	r2, [r2, #8]
 80148b8:	4611      	mov	r1, r2
 80148ba:	4618      	mov	r0, r3
 80148bc:	f7fb ffea 	bl	8010894 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80148c0:	4b71      	ldr	r3, [pc, #452]	@ (8014a88 <tcp_receive+0xb0c>)
 80148c2:	891c      	ldrh	r4, [r3, #8]
 80148c4:	4b70      	ldr	r3, [pc, #448]	@ (8014a88 <tcp_receive+0xb0c>)
 80148c6:	68db      	ldr	r3, [r3, #12]
 80148c8:	899b      	ldrh	r3, [r3, #12]
 80148ca:	b29b      	uxth	r3, r3
 80148cc:	4618      	mov	r0, r3
 80148ce:	f7f6 faa9 	bl	800ae24 <lwip_htons>
 80148d2:	4603      	mov	r3, r0
 80148d4:	b2db      	uxtb	r3, r3
 80148d6:	f003 0303 	and.w	r3, r3, #3
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d001      	beq.n	80148e2 <tcp_receive+0x966>
 80148de:	2301      	movs	r3, #1
 80148e0:	e000      	b.n	80148e4 <tcp_receive+0x968>
 80148e2:	2300      	movs	r3, #0
 80148e4:	4423      	add	r3, r4
 80148e6:	b29a      	uxth	r2, r3
 80148e8:	4b65      	ldr	r3, [pc, #404]	@ (8014a80 <tcp_receive+0xb04>)
 80148ea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80148ec:	4b64      	ldr	r3, [pc, #400]	@ (8014a80 <tcp_receive+0xb04>)
 80148ee:	881b      	ldrh	r3, [r3, #0]
 80148f0:	461a      	mov	r2, r3
 80148f2:	4b64      	ldr	r3, [pc, #400]	@ (8014a84 <tcp_receive+0xb08>)
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	441a      	add	r2, r3
 80148f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80148fa:	68db      	ldr	r3, [r3, #12]
 80148fc:	685b      	ldr	r3, [r3, #4]
 80148fe:	429a      	cmp	r2, r3
 8014900:	d006      	beq.n	8014910 <tcp_receive+0x994>
 8014902:	4b62      	ldr	r3, [pc, #392]	@ (8014a8c <tcp_receive+0xb10>)
 8014904:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8014908:	4961      	ldr	r1, [pc, #388]	@ (8014a90 <tcp_receive+0xb14>)
 801490a:	4862      	ldr	r0, [pc, #392]	@ (8014a94 <tcp_receive+0xb18>)
 801490c:	f002 ff12 	bl	8017734 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014914:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014916:	4b5a      	ldr	r3, [pc, #360]	@ (8014a80 <tcp_receive+0xb04>)
 8014918:	881b      	ldrh	r3, [r3, #0]
 801491a:	461a      	mov	r2, r3
 801491c:	4b59      	ldr	r3, [pc, #356]	@ (8014a84 <tcp_receive+0xb08>)
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	441a      	add	r2, r3
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801492a:	4b55      	ldr	r3, [pc, #340]	@ (8014a80 <tcp_receive+0xb04>)
 801492c:	881b      	ldrh	r3, [r3, #0]
 801492e:	429a      	cmp	r2, r3
 8014930:	d206      	bcs.n	8014940 <tcp_receive+0x9c4>
 8014932:	4b56      	ldr	r3, [pc, #344]	@ (8014a8c <tcp_receive+0xb10>)
 8014934:	f240 6207 	movw	r2, #1543	@ 0x607
 8014938:	4957      	ldr	r1, [pc, #348]	@ (8014a98 <tcp_receive+0xb1c>)
 801493a:	4856      	ldr	r0, [pc, #344]	@ (8014a94 <tcp_receive+0xb18>)
 801493c:	f002 fefa 	bl	8017734 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014944:	4b4e      	ldr	r3, [pc, #312]	@ (8014a80 <tcp_receive+0xb04>)
 8014946:	881b      	ldrh	r3, [r3, #0]
 8014948:	1ad3      	subs	r3, r2, r3
 801494a:	b29a      	uxth	r2, r3
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014950:	6878      	ldr	r0, [r7, #4]
 8014952:	f7fc ffc5 	bl	80118e0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014956:	4b4c      	ldr	r3, [pc, #304]	@ (8014a88 <tcp_receive+0xb0c>)
 8014958:	685b      	ldr	r3, [r3, #4]
 801495a:	891b      	ldrh	r3, [r3, #8]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d006      	beq.n	801496e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8014960:	4b49      	ldr	r3, [pc, #292]	@ (8014a88 <tcp_receive+0xb0c>)
 8014962:	685b      	ldr	r3, [r3, #4]
 8014964:	4a4d      	ldr	r2, [pc, #308]	@ (8014a9c <tcp_receive+0xb20>)
 8014966:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014968:	4b47      	ldr	r3, [pc, #284]	@ (8014a88 <tcp_receive+0xb0c>)
 801496a:	2200      	movs	r2, #0
 801496c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801496e:	4b46      	ldr	r3, [pc, #280]	@ (8014a88 <tcp_receive+0xb0c>)
 8014970:	68db      	ldr	r3, [r3, #12]
 8014972:	899b      	ldrh	r3, [r3, #12]
 8014974:	b29b      	uxth	r3, r3
 8014976:	4618      	mov	r0, r3
 8014978:	f7f6 fa54 	bl	800ae24 <lwip_htons>
 801497c:	4603      	mov	r3, r0
 801497e:	b2db      	uxtb	r3, r3
 8014980:	f003 0301 	and.w	r3, r3, #1
 8014984:	2b00      	cmp	r3, #0
 8014986:	f000 80b8 	beq.w	8014afa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801498a:	4b45      	ldr	r3, [pc, #276]	@ (8014aa0 <tcp_receive+0xb24>)
 801498c:	781b      	ldrb	r3, [r3, #0]
 801498e:	f043 0320 	orr.w	r3, r3, #32
 8014992:	b2da      	uxtb	r2, r3
 8014994:	4b42      	ldr	r3, [pc, #264]	@ (8014aa0 <tcp_receive+0xb24>)
 8014996:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014998:	e0af      	b.n	8014afa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801499e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80149a4:	68db      	ldr	r3, [r3, #12]
 80149a6:	685b      	ldr	r3, [r3, #4]
 80149a8:	4a36      	ldr	r2, [pc, #216]	@ (8014a84 <tcp_receive+0xb08>)
 80149aa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80149ac:	68bb      	ldr	r3, [r7, #8]
 80149ae:	891b      	ldrh	r3, [r3, #8]
 80149b0:	461c      	mov	r4, r3
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	68db      	ldr	r3, [r3, #12]
 80149b6:	899b      	ldrh	r3, [r3, #12]
 80149b8:	b29b      	uxth	r3, r3
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7f6 fa32 	bl	800ae24 <lwip_htons>
 80149c0:	4603      	mov	r3, r0
 80149c2:	b2db      	uxtb	r3, r3
 80149c4:	f003 0303 	and.w	r3, r3, #3
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d001      	beq.n	80149d0 <tcp_receive+0xa54>
 80149cc:	2301      	movs	r3, #1
 80149ce:	e000      	b.n	80149d2 <tcp_receive+0xa56>
 80149d0:	2300      	movs	r3, #0
 80149d2:	191a      	adds	r2, r3, r4
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149d8:	441a      	add	r2, r3
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80149e2:	461c      	mov	r4, r3
 80149e4:	68bb      	ldr	r3, [r7, #8]
 80149e6:	891b      	ldrh	r3, [r3, #8]
 80149e8:	461d      	mov	r5, r3
 80149ea:	68bb      	ldr	r3, [r7, #8]
 80149ec:	68db      	ldr	r3, [r3, #12]
 80149ee:	899b      	ldrh	r3, [r3, #12]
 80149f0:	b29b      	uxth	r3, r3
 80149f2:	4618      	mov	r0, r3
 80149f4:	f7f6 fa16 	bl	800ae24 <lwip_htons>
 80149f8:	4603      	mov	r3, r0
 80149fa:	b2db      	uxtb	r3, r3
 80149fc:	f003 0303 	and.w	r3, r3, #3
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d001      	beq.n	8014a08 <tcp_receive+0xa8c>
 8014a04:	2301      	movs	r3, #1
 8014a06:	e000      	b.n	8014a0a <tcp_receive+0xa8e>
 8014a08:	2300      	movs	r3, #0
 8014a0a:	442b      	add	r3, r5
 8014a0c:	429c      	cmp	r4, r3
 8014a0e:	d206      	bcs.n	8014a1e <tcp_receive+0xaa2>
 8014a10:	4b1e      	ldr	r3, [pc, #120]	@ (8014a8c <tcp_receive+0xb10>)
 8014a12:	f240 622b 	movw	r2, #1579	@ 0x62b
 8014a16:	4923      	ldr	r1, [pc, #140]	@ (8014aa4 <tcp_receive+0xb28>)
 8014a18:	481e      	ldr	r0, [pc, #120]	@ (8014a94 <tcp_receive+0xb18>)
 8014a1a:	f002 fe8b 	bl	8017734 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014a1e:	68bb      	ldr	r3, [r7, #8]
 8014a20:	891b      	ldrh	r3, [r3, #8]
 8014a22:	461c      	mov	r4, r3
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	68db      	ldr	r3, [r3, #12]
 8014a28:	899b      	ldrh	r3, [r3, #12]
 8014a2a:	b29b      	uxth	r3, r3
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f7f6 f9f9 	bl	800ae24 <lwip_htons>
 8014a32:	4603      	mov	r3, r0
 8014a34:	b2db      	uxtb	r3, r3
 8014a36:	f003 0303 	and.w	r3, r3, #3
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d001      	beq.n	8014a42 <tcp_receive+0xac6>
 8014a3e:	2301      	movs	r3, #1
 8014a40:	e000      	b.n	8014a44 <tcp_receive+0xac8>
 8014a42:	2300      	movs	r3, #0
 8014a44:	1919      	adds	r1, r3, r4
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014a4a:	b28b      	uxth	r3, r1
 8014a4c:	1ad3      	subs	r3, r2, r3
 8014a4e:	b29a      	uxth	r2, r3
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014a54:	6878      	ldr	r0, [r7, #4]
 8014a56:	f7fc ff43 	bl	80118e0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014a5a:	68bb      	ldr	r3, [r7, #8]
 8014a5c:	685b      	ldr	r3, [r3, #4]
 8014a5e:	891b      	ldrh	r3, [r3, #8]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d028      	beq.n	8014ab6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014a64:	4b0d      	ldr	r3, [pc, #52]	@ (8014a9c <tcp_receive+0xb20>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d01d      	beq.n	8014aa8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8014a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8014a9c <tcp_receive+0xb20>)
 8014a6e:	681a      	ldr	r2, [r3, #0]
 8014a70:	68bb      	ldr	r3, [r7, #8]
 8014a72:	685b      	ldr	r3, [r3, #4]
 8014a74:	4619      	mov	r1, r3
 8014a76:	4610      	mov	r0, r2
 8014a78:	f7fc f95e 	bl	8010d38 <pbuf_cat>
 8014a7c:	e018      	b.n	8014ab0 <tcp_receive+0xb34>
 8014a7e:	bf00      	nop
 8014a80:	24007f42 	.word	0x24007f42
 8014a84:	24007f38 	.word	0x24007f38
 8014a88:	24007f18 	.word	0x24007f18
 8014a8c:	0801a574 	.word	0x0801a574
 8014a90:	0801a984 	.word	0x0801a984
 8014a94:	0801a5f0 	.word	0x0801a5f0
 8014a98:	0801a9c0 	.word	0x0801a9c0
 8014a9c:	24007f48 	.word	0x24007f48
 8014aa0:	24007f45 	.word	0x24007f45
 8014aa4:	0801a9e0 	.word	0x0801a9e0
            } else {
              recv_data = cseg->p;
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	685b      	ldr	r3, [r3, #4]
 8014aac:	4a70      	ldr	r2, [pc, #448]	@ (8014c70 <tcp_receive+0xcf4>)
 8014aae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014ab0:	68bb      	ldr	r3, [r7, #8]
 8014ab2:	2200      	movs	r2, #0
 8014ab4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014ab6:	68bb      	ldr	r3, [r7, #8]
 8014ab8:	68db      	ldr	r3, [r3, #12]
 8014aba:	899b      	ldrh	r3, [r3, #12]
 8014abc:	b29b      	uxth	r3, r3
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f7f6 f9b0 	bl	800ae24 <lwip_htons>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	b2db      	uxtb	r3, r3
 8014ac8:	f003 0301 	and.w	r3, r3, #1
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d00d      	beq.n	8014aec <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014ad0:	4b68      	ldr	r3, [pc, #416]	@ (8014c74 <tcp_receive+0xcf8>)
 8014ad2:	781b      	ldrb	r3, [r3, #0]
 8014ad4:	f043 0320 	orr.w	r3, r3, #32
 8014ad8:	b2da      	uxtb	r2, r3
 8014ada:	4b66      	ldr	r3, [pc, #408]	@ (8014c74 <tcp_receive+0xcf8>)
 8014adc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	7d1b      	ldrb	r3, [r3, #20]
 8014ae2:	2b04      	cmp	r3, #4
 8014ae4:	d102      	bne.n	8014aec <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	2207      	movs	r2, #7
 8014aea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	681a      	ldr	r2, [r3, #0]
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8014af4:	68b8      	ldr	r0, [r7, #8]
 8014af6:	f7fd fbd4 	bl	80122a2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d008      	beq.n	8014b14 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014b06:	68db      	ldr	r3, [r3, #12]
 8014b08:	685a      	ldr	r2, [r3, #4]
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8014b0e:	429a      	cmp	r2, r3
 8014b10:	f43f af43 	beq.w	801499a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	8b5b      	ldrh	r3, [r3, #26]
 8014b18:	f003 0301 	and.w	r3, r3, #1
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d00e      	beq.n	8014b3e <tcp_receive+0xbc2>
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	8b5b      	ldrh	r3, [r3, #26]
 8014b24:	f023 0301 	bic.w	r3, r3, #1
 8014b28:	b29a      	uxth	r2, r3
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	835a      	strh	r2, [r3, #26]
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	8b5b      	ldrh	r3, [r3, #26]
 8014b32:	f043 0302 	orr.w	r3, r3, #2
 8014b36:	b29a      	uxth	r2, r3
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014b3c:	e187      	b.n	8014e4e <tcp_receive+0xed2>
        tcp_ack(pcb);
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	8b5b      	ldrh	r3, [r3, #26]
 8014b42:	f043 0301 	orr.w	r3, r3, #1
 8014b46:	b29a      	uxth	r2, r3
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014b4c:	e17f      	b.n	8014e4e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d106      	bne.n	8014b64 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014b56:	4848      	ldr	r0, [pc, #288]	@ (8014c78 <tcp_receive+0xcfc>)
 8014b58:	f7fd fbbc 	bl	80122d4 <tcp_seg_copy>
 8014b5c:	4602      	mov	r2, r0
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	675a      	str	r2, [r3, #116]	@ 0x74
 8014b62:	e16c      	b.n	8014e3e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014b64:	2300      	movs	r3, #0
 8014b66:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014b6e:	e156      	b.n	8014e1e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8014b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b72:	68db      	ldr	r3, [r3, #12]
 8014b74:	685a      	ldr	r2, [r3, #4]
 8014b76:	4b41      	ldr	r3, [pc, #260]	@ (8014c7c <tcp_receive+0xd00>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	429a      	cmp	r2, r3
 8014b7c:	d11d      	bne.n	8014bba <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8014c78 <tcp_receive+0xcfc>)
 8014b80:	891a      	ldrh	r2, [r3, #8]
 8014b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b84:	891b      	ldrh	r3, [r3, #8]
 8014b86:	429a      	cmp	r2, r3
 8014b88:	f240 814e 	bls.w	8014e28 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014b8c:	483a      	ldr	r0, [pc, #232]	@ (8014c78 <tcp_receive+0xcfc>)
 8014b8e:	f7fd fba1 	bl	80122d4 <tcp_seg_copy>
 8014b92:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014b94:	697b      	ldr	r3, [r7, #20]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	f000 8148 	beq.w	8014e2c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8014b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d003      	beq.n	8014baa <tcp_receive+0xc2e>
                    prev->next = cseg;
 8014ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ba4:	697a      	ldr	r2, [r7, #20]
 8014ba6:	601a      	str	r2, [r3, #0]
 8014ba8:	e002      	b.n	8014bb0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	697a      	ldr	r2, [r7, #20]
 8014bae:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014bb0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014bb2:	6978      	ldr	r0, [r7, #20]
 8014bb4:	f7ff f8de 	bl	8013d74 <tcp_oos_insert_segment>
                }
                break;
 8014bb8:	e138      	b.n	8014e2c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d117      	bne.n	8014bf0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8014c7c <tcp_receive+0xd00>)
 8014bc2:	681a      	ldr	r2, [r3, #0]
 8014bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bc6:	68db      	ldr	r3, [r3, #12]
 8014bc8:	685b      	ldr	r3, [r3, #4]
 8014bca:	1ad3      	subs	r3, r2, r3
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	da57      	bge.n	8014c80 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014bd0:	4829      	ldr	r0, [pc, #164]	@ (8014c78 <tcp_receive+0xcfc>)
 8014bd2:	f7fd fb7f 	bl	80122d4 <tcp_seg_copy>
 8014bd6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014bd8:	69bb      	ldr	r3, [r7, #24]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	f000 8128 	beq.w	8014e30 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	69ba      	ldr	r2, [r7, #24]
 8014be4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014be6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014be8:	69b8      	ldr	r0, [r7, #24]
 8014bea:	f7ff f8c3 	bl	8013d74 <tcp_oos_insert_segment>
                  }
                  break;
 8014bee:	e11f      	b.n	8014e30 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014bf0:	4b22      	ldr	r3, [pc, #136]	@ (8014c7c <tcp_receive+0xd00>)
 8014bf2:	681a      	ldr	r2, [r3, #0]
 8014bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bf6:	68db      	ldr	r3, [r3, #12]
 8014bf8:	685b      	ldr	r3, [r3, #4]
 8014bfa:	1ad3      	subs	r3, r2, r3
 8014bfc:	3b01      	subs	r3, #1
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	db3e      	blt.n	8014c80 <tcp_receive+0xd04>
 8014c02:	4b1e      	ldr	r3, [pc, #120]	@ (8014c7c <tcp_receive+0xd00>)
 8014c04:	681a      	ldr	r2, [r3, #0]
 8014c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c08:	68db      	ldr	r3, [r3, #12]
 8014c0a:	685b      	ldr	r3, [r3, #4]
 8014c0c:	1ad3      	subs	r3, r2, r3
 8014c0e:	3301      	adds	r3, #1
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	dc35      	bgt.n	8014c80 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014c14:	4818      	ldr	r0, [pc, #96]	@ (8014c78 <tcp_receive+0xcfc>)
 8014c16:	f7fd fb5d 	bl	80122d4 <tcp_seg_copy>
 8014c1a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014c1c:	69fb      	ldr	r3, [r7, #28]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	f000 8108 	beq.w	8014e34 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c26:	68db      	ldr	r3, [r3, #12]
 8014c28:	685b      	ldr	r3, [r3, #4]
 8014c2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014c2c:	8912      	ldrh	r2, [r2, #8]
 8014c2e:	441a      	add	r2, r3
 8014c30:	4b12      	ldr	r3, [pc, #72]	@ (8014c7c <tcp_receive+0xd00>)
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	1ad3      	subs	r3, r2, r3
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	dd12      	ble.n	8014c60 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014c3a:	4b10      	ldr	r3, [pc, #64]	@ (8014c7c <tcp_receive+0xd00>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	b29a      	uxth	r2, r3
 8014c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c42:	68db      	ldr	r3, [r3, #12]
 8014c44:	685b      	ldr	r3, [r3, #4]
 8014c46:	b29b      	uxth	r3, r3
 8014c48:	1ad3      	subs	r3, r2, r3
 8014c4a:	b29a      	uxth	r2, r3
 8014c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c4e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c52:	685a      	ldr	r2, [r3, #4]
 8014c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c56:	891b      	ldrh	r3, [r3, #8]
 8014c58:	4619      	mov	r1, r3
 8014c5a:	4610      	mov	r0, r2
 8014c5c:	f7fb fe1a 	bl	8010894 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c62:	69fa      	ldr	r2, [r7, #28]
 8014c64:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014c66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014c68:	69f8      	ldr	r0, [r7, #28]
 8014c6a:	f7ff f883 	bl	8013d74 <tcp_oos_insert_segment>
                  }
                  break;
 8014c6e:	e0e1      	b.n	8014e34 <tcp_receive+0xeb8>
 8014c70:	24007f48 	.word	0x24007f48
 8014c74:	24007f45 	.word	0x24007f45
 8014c78:	24007f18 	.word	0x24007f18
 8014c7c:	24007f38 	.word	0x24007f38
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c82:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	f040 80c5 	bne.w	8014e18 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8014e8c <tcp_receive+0xf10>)
 8014c90:	681a      	ldr	r2, [r3, #0]
 8014c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c94:	68db      	ldr	r3, [r3, #12]
 8014c96:	685b      	ldr	r3, [r3, #4]
 8014c98:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	f340 80bc 	ble.w	8014e18 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ca2:	68db      	ldr	r3, [r3, #12]
 8014ca4:	899b      	ldrh	r3, [r3, #12]
 8014ca6:	b29b      	uxth	r3, r3
 8014ca8:	4618      	mov	r0, r3
 8014caa:	f7f6 f8bb 	bl	800ae24 <lwip_htons>
 8014cae:	4603      	mov	r3, r0
 8014cb0:	b2db      	uxtb	r3, r3
 8014cb2:	f003 0301 	and.w	r3, r3, #1
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	f040 80be 	bne.w	8014e38 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014cbc:	4874      	ldr	r0, [pc, #464]	@ (8014e90 <tcp_receive+0xf14>)
 8014cbe:	f7fd fb09 	bl	80122d4 <tcp_seg_copy>
 8014cc2:	4602      	mov	r2, r0
 8014cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cc6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	f000 80b5 	beq.w	8014e3c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cd4:	68db      	ldr	r3, [r3, #12]
 8014cd6:	685b      	ldr	r3, [r3, #4]
 8014cd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014cda:	8912      	ldrh	r2, [r2, #8]
 8014cdc:	441a      	add	r2, r3
 8014cde:	4b6b      	ldr	r3, [pc, #428]	@ (8014e8c <tcp_receive+0xf10>)
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	1ad3      	subs	r3, r2, r3
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	dd12      	ble.n	8014d0e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014ce8:	4b68      	ldr	r3, [pc, #416]	@ (8014e8c <tcp_receive+0xf10>)
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	b29a      	uxth	r2, r3
 8014cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cf0:	68db      	ldr	r3, [r3, #12]
 8014cf2:	685b      	ldr	r3, [r3, #4]
 8014cf4:	b29b      	uxth	r3, r3
 8014cf6:	1ad3      	subs	r3, r2, r3
 8014cf8:	b29a      	uxth	r2, r3
 8014cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cfc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d00:	685a      	ldr	r2, [r3, #4]
 8014d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d04:	891b      	ldrh	r3, [r3, #8]
 8014d06:	4619      	mov	r1, r3
 8014d08:	4610      	mov	r0, r2
 8014d0a:	f7fb fdc3 	bl	8010894 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014d0e:	4b61      	ldr	r3, [pc, #388]	@ (8014e94 <tcp_receive+0xf18>)
 8014d10:	881b      	ldrh	r3, [r3, #0]
 8014d12:	461a      	mov	r2, r3
 8014d14:	4b5d      	ldr	r3, [pc, #372]	@ (8014e8c <tcp_receive+0xf10>)
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	441a      	add	r2, r3
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d1e:	6879      	ldr	r1, [r7, #4]
 8014d20:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014d22:	440b      	add	r3, r1
 8014d24:	1ad3      	subs	r3, r2, r3
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	f340 8088 	ble.w	8014e3c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	68db      	ldr	r3, [r3, #12]
 8014d32:	899b      	ldrh	r3, [r3, #12]
 8014d34:	b29b      	uxth	r3, r3
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7f6 f874 	bl	800ae24 <lwip_htons>
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	b2db      	uxtb	r3, r3
 8014d40:	f003 0301 	and.w	r3, r3, #1
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d021      	beq.n	8014d8c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	68db      	ldr	r3, [r3, #12]
 8014d4e:	899b      	ldrh	r3, [r3, #12]
 8014d50:	b29b      	uxth	r3, r3
 8014d52:	b21b      	sxth	r3, r3
 8014d54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8014d58:	b21c      	sxth	r4, r3
 8014d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	68db      	ldr	r3, [r3, #12]
 8014d60:	899b      	ldrh	r3, [r3, #12]
 8014d62:	b29b      	uxth	r3, r3
 8014d64:	4618      	mov	r0, r3
 8014d66:	f7f6 f85d 	bl	800ae24 <lwip_htons>
 8014d6a:	4603      	mov	r3, r0
 8014d6c:	b2db      	uxtb	r3, r3
 8014d6e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8014d72:	b29b      	uxth	r3, r3
 8014d74:	4618      	mov	r0, r3
 8014d76:	f7f6 f855 	bl	800ae24 <lwip_htons>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	b21b      	sxth	r3, r3
 8014d7e:	4323      	orrs	r3, r4
 8014d80:	b21a      	sxth	r2, r3
 8014d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	68db      	ldr	r3, [r3, #12]
 8014d88:	b292      	uxth	r2, r2
 8014d8a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d90:	b29a      	uxth	r2, r3
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d96:	4413      	add	r3, r2
 8014d98:	b299      	uxth	r1, r3
 8014d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8014e8c <tcp_receive+0xf10>)
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	b29a      	uxth	r2, r3
 8014da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	1a8a      	subs	r2, r1, r2
 8014da6:	b292      	uxth	r2, r2
 8014da8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	685a      	ldr	r2, [r3, #4]
 8014db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	891b      	ldrh	r3, [r3, #8]
 8014db6:	4619      	mov	r1, r3
 8014db8:	4610      	mov	r0, r2
 8014dba:	f7fb fd6b 	bl	8010894 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	891c      	ldrh	r4, [r3, #8]
 8014dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	68db      	ldr	r3, [r3, #12]
 8014dca:	899b      	ldrh	r3, [r3, #12]
 8014dcc:	b29b      	uxth	r3, r3
 8014dce:	4618      	mov	r0, r3
 8014dd0:	f7f6 f828 	bl	800ae24 <lwip_htons>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	b2db      	uxtb	r3, r3
 8014dd8:	f003 0303 	and.w	r3, r3, #3
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d001      	beq.n	8014de4 <tcp_receive+0xe68>
 8014de0:	2301      	movs	r3, #1
 8014de2:	e000      	b.n	8014de6 <tcp_receive+0xe6a>
 8014de4:	2300      	movs	r3, #0
 8014de6:	4423      	add	r3, r4
 8014de8:	b29a      	uxth	r2, r3
 8014dea:	4b2a      	ldr	r3, [pc, #168]	@ (8014e94 <tcp_receive+0xf18>)
 8014dec:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014dee:	4b29      	ldr	r3, [pc, #164]	@ (8014e94 <tcp_receive+0xf18>)
 8014df0:	881b      	ldrh	r3, [r3, #0]
 8014df2:	461a      	mov	r2, r3
 8014df4:	4b25      	ldr	r3, [pc, #148]	@ (8014e8c <tcp_receive+0xf10>)
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	441a      	add	r2, r3
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014dfe:	6879      	ldr	r1, [r7, #4]
 8014e00:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014e02:	440b      	add	r3, r1
 8014e04:	429a      	cmp	r2, r3
 8014e06:	d019      	beq.n	8014e3c <tcp_receive+0xec0>
 8014e08:	4b23      	ldr	r3, [pc, #140]	@ (8014e98 <tcp_receive+0xf1c>)
 8014e0a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8014e0e:	4923      	ldr	r1, [pc, #140]	@ (8014e9c <tcp_receive+0xf20>)
 8014e10:	4823      	ldr	r0, [pc, #140]	@ (8014ea0 <tcp_receive+0xf24>)
 8014e12:	f002 fc8f 	bl	8017734 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014e16:	e011      	b.n	8014e3c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	f47f aea5 	bne.w	8014b70 <tcp_receive+0xbf4>
 8014e26:	e00a      	b.n	8014e3e <tcp_receive+0xec2>
                break;
 8014e28:	bf00      	nop
 8014e2a:	e008      	b.n	8014e3e <tcp_receive+0xec2>
                break;
 8014e2c:	bf00      	nop
 8014e2e:	e006      	b.n	8014e3e <tcp_receive+0xec2>
                  break;
 8014e30:	bf00      	nop
 8014e32:	e004      	b.n	8014e3e <tcp_receive+0xec2>
                  break;
 8014e34:	bf00      	nop
 8014e36:	e002      	b.n	8014e3e <tcp_receive+0xec2>
                  break;
 8014e38:	bf00      	nop
 8014e3a:	e000      	b.n	8014e3e <tcp_receive+0xec2>
                break;
 8014e3c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014e3e:	6878      	ldr	r0, [r7, #4]
 8014e40:	f001 fa30 	bl	80162a4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014e44:	e003      	b.n	8014e4e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014e46:	6878      	ldr	r0, [r7, #4]
 8014e48:	f001 fa2c 	bl	80162a4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014e4c:	e01a      	b.n	8014e84 <tcp_receive+0xf08>
 8014e4e:	e019      	b.n	8014e84 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014e50:	4b0e      	ldr	r3, [pc, #56]	@ (8014e8c <tcp_receive+0xf10>)
 8014e52:	681a      	ldr	r2, [r3, #0]
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e58:	1ad3      	subs	r3, r2, r3
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	db0a      	blt.n	8014e74 <tcp_receive+0xef8>
 8014e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8014e8c <tcp_receive+0xf10>)
 8014e60:	681a      	ldr	r2, [r3, #0]
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e66:	6879      	ldr	r1, [r7, #4]
 8014e68:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014e6a:	440b      	add	r3, r1
 8014e6c:	1ad3      	subs	r3, r2, r3
 8014e6e:	3301      	adds	r3, #1
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	dd07      	ble.n	8014e84 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	8b5b      	ldrh	r3, [r3, #26]
 8014e78:	f043 0302 	orr.w	r3, r3, #2
 8014e7c:	b29a      	uxth	r2, r3
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014e82:	e7ff      	b.n	8014e84 <tcp_receive+0xf08>
 8014e84:	bf00      	nop
 8014e86:	3750      	adds	r7, #80	@ 0x50
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8014e8c:	24007f38 	.word	0x24007f38
 8014e90:	24007f18 	.word	0x24007f18
 8014e94:	24007f42 	.word	0x24007f42
 8014e98:	0801a574 	.word	0x0801a574
 8014e9c:	0801a94c 	.word	0x0801a94c
 8014ea0:	0801a5f0 	.word	0x0801a5f0

08014ea4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014ea4:	b480      	push	{r7}
 8014ea6:	b083      	sub	sp, #12
 8014ea8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014eaa:	4b15      	ldr	r3, [pc, #84]	@ (8014f00 <tcp_get_next_optbyte+0x5c>)
 8014eac:	881b      	ldrh	r3, [r3, #0]
 8014eae:	1c5a      	adds	r2, r3, #1
 8014eb0:	b291      	uxth	r1, r2
 8014eb2:	4a13      	ldr	r2, [pc, #76]	@ (8014f00 <tcp_get_next_optbyte+0x5c>)
 8014eb4:	8011      	strh	r1, [r2, #0]
 8014eb6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014eb8:	4b12      	ldr	r3, [pc, #72]	@ (8014f04 <tcp_get_next_optbyte+0x60>)
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d004      	beq.n	8014eca <tcp_get_next_optbyte+0x26>
 8014ec0:	4b11      	ldr	r3, [pc, #68]	@ (8014f08 <tcp_get_next_optbyte+0x64>)
 8014ec2:	881b      	ldrh	r3, [r3, #0]
 8014ec4:	88fa      	ldrh	r2, [r7, #6]
 8014ec6:	429a      	cmp	r2, r3
 8014ec8:	d208      	bcs.n	8014edc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014eca:	4b10      	ldr	r3, [pc, #64]	@ (8014f0c <tcp_get_next_optbyte+0x68>)
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	3314      	adds	r3, #20
 8014ed0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014ed2:	88fb      	ldrh	r3, [r7, #6]
 8014ed4:	683a      	ldr	r2, [r7, #0]
 8014ed6:	4413      	add	r3, r2
 8014ed8:	781b      	ldrb	r3, [r3, #0]
 8014eda:	e00b      	b.n	8014ef4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014edc:	88fb      	ldrh	r3, [r7, #6]
 8014ede:	b2da      	uxtb	r2, r3
 8014ee0:	4b09      	ldr	r3, [pc, #36]	@ (8014f08 <tcp_get_next_optbyte+0x64>)
 8014ee2:	881b      	ldrh	r3, [r3, #0]
 8014ee4:	b2db      	uxtb	r3, r3
 8014ee6:	1ad3      	subs	r3, r2, r3
 8014ee8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014eea:	4b06      	ldr	r3, [pc, #24]	@ (8014f04 <tcp_get_next_optbyte+0x60>)
 8014eec:	681a      	ldr	r2, [r3, #0]
 8014eee:	797b      	ldrb	r3, [r7, #5]
 8014ef0:	4413      	add	r3, r2
 8014ef2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	370c      	adds	r7, #12
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efe:	4770      	bx	lr
 8014f00:	24007f34 	.word	0x24007f34
 8014f04:	24007f30 	.word	0x24007f30
 8014f08:	24007f2e 	.word	0x24007f2e
 8014f0c:	24007f28 	.word	0x24007f28

08014f10 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b084      	sub	sp, #16
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d106      	bne.n	8014f2c <tcp_parseopt+0x1c>
 8014f1e:	4b32      	ldr	r3, [pc, #200]	@ (8014fe8 <tcp_parseopt+0xd8>)
 8014f20:	f240 727d 	movw	r2, #1917	@ 0x77d
 8014f24:	4931      	ldr	r1, [pc, #196]	@ (8014fec <tcp_parseopt+0xdc>)
 8014f26:	4832      	ldr	r0, [pc, #200]	@ (8014ff0 <tcp_parseopt+0xe0>)
 8014f28:	f002 fc04 	bl	8017734 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014f2c:	4b31      	ldr	r3, [pc, #196]	@ (8014ff4 <tcp_parseopt+0xe4>)
 8014f2e:	881b      	ldrh	r3, [r3, #0]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d056      	beq.n	8014fe2 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014f34:	4b30      	ldr	r3, [pc, #192]	@ (8014ff8 <tcp_parseopt+0xe8>)
 8014f36:	2200      	movs	r2, #0
 8014f38:	801a      	strh	r2, [r3, #0]
 8014f3a:	e046      	b.n	8014fca <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8014f3c:	f7ff ffb2 	bl	8014ea4 <tcp_get_next_optbyte>
 8014f40:	4603      	mov	r3, r0
 8014f42:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014f44:	7bfb      	ldrb	r3, [r7, #15]
 8014f46:	2b02      	cmp	r3, #2
 8014f48:	d006      	beq.n	8014f58 <tcp_parseopt+0x48>
 8014f4a:	2b02      	cmp	r3, #2
 8014f4c:	dc2a      	bgt.n	8014fa4 <tcp_parseopt+0x94>
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d042      	beq.n	8014fd8 <tcp_parseopt+0xc8>
 8014f52:	2b01      	cmp	r3, #1
 8014f54:	d038      	beq.n	8014fc8 <tcp_parseopt+0xb8>
 8014f56:	e025      	b.n	8014fa4 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014f58:	f7ff ffa4 	bl	8014ea4 <tcp_get_next_optbyte>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	2b04      	cmp	r3, #4
 8014f60:	d13c      	bne.n	8014fdc <tcp_parseopt+0xcc>
 8014f62:	4b25      	ldr	r3, [pc, #148]	@ (8014ff8 <tcp_parseopt+0xe8>)
 8014f64:	881b      	ldrh	r3, [r3, #0]
 8014f66:	3301      	adds	r3, #1
 8014f68:	4a22      	ldr	r2, [pc, #136]	@ (8014ff4 <tcp_parseopt+0xe4>)
 8014f6a:	8812      	ldrh	r2, [r2, #0]
 8014f6c:	4293      	cmp	r3, r2
 8014f6e:	da35      	bge.n	8014fdc <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014f70:	f7ff ff98 	bl	8014ea4 <tcp_get_next_optbyte>
 8014f74:	4603      	mov	r3, r0
 8014f76:	021b      	lsls	r3, r3, #8
 8014f78:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014f7a:	f7ff ff93 	bl	8014ea4 <tcp_get_next_optbyte>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	461a      	mov	r2, r3
 8014f82:	89bb      	ldrh	r3, [r7, #12]
 8014f84:	4313      	orrs	r3, r2
 8014f86:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014f88:	89bb      	ldrh	r3, [r7, #12]
 8014f8a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8014f8e:	d804      	bhi.n	8014f9a <tcp_parseopt+0x8a>
 8014f90:	89bb      	ldrh	r3, [r7, #12]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d001      	beq.n	8014f9a <tcp_parseopt+0x8a>
 8014f96:	89ba      	ldrh	r2, [r7, #12]
 8014f98:	e001      	b.n	8014f9e <tcp_parseopt+0x8e>
 8014f9a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8014fa2:	e012      	b.n	8014fca <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014fa4:	f7ff ff7e 	bl	8014ea4 <tcp_get_next_optbyte>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014fac:	7afb      	ldrb	r3, [r7, #11]
 8014fae:	2b01      	cmp	r3, #1
 8014fb0:	d916      	bls.n	8014fe0 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014fb2:	7afb      	ldrb	r3, [r7, #11]
 8014fb4:	b29a      	uxth	r2, r3
 8014fb6:	4b10      	ldr	r3, [pc, #64]	@ (8014ff8 <tcp_parseopt+0xe8>)
 8014fb8:	881b      	ldrh	r3, [r3, #0]
 8014fba:	4413      	add	r3, r2
 8014fbc:	b29b      	uxth	r3, r3
 8014fbe:	3b02      	subs	r3, #2
 8014fc0:	b29a      	uxth	r2, r3
 8014fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8014ff8 <tcp_parseopt+0xe8>)
 8014fc4:	801a      	strh	r2, [r3, #0]
 8014fc6:	e000      	b.n	8014fca <tcp_parseopt+0xba>
          break;
 8014fc8:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014fca:	4b0b      	ldr	r3, [pc, #44]	@ (8014ff8 <tcp_parseopt+0xe8>)
 8014fcc:	881a      	ldrh	r2, [r3, #0]
 8014fce:	4b09      	ldr	r3, [pc, #36]	@ (8014ff4 <tcp_parseopt+0xe4>)
 8014fd0:	881b      	ldrh	r3, [r3, #0]
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d3b2      	bcc.n	8014f3c <tcp_parseopt+0x2c>
 8014fd6:	e004      	b.n	8014fe2 <tcp_parseopt+0xd2>
          return;
 8014fd8:	bf00      	nop
 8014fda:	e002      	b.n	8014fe2 <tcp_parseopt+0xd2>
            return;
 8014fdc:	bf00      	nop
 8014fde:	e000      	b.n	8014fe2 <tcp_parseopt+0xd2>
            return;
 8014fe0:	bf00      	nop
      }
    }
  }
}
 8014fe2:	3710      	adds	r7, #16
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}
 8014fe8:	0801a574 	.word	0x0801a574
 8014fec:	0801aa08 	.word	0x0801aa08
 8014ff0:	0801a5f0 	.word	0x0801a5f0
 8014ff4:	24007f2c 	.word	0x24007f2c
 8014ff8:	24007f34 	.word	0x24007f34

08014ffc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014ffc:	b480      	push	{r7}
 8014ffe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015000:	4b05      	ldr	r3, [pc, #20]	@ (8015018 <tcp_trigger_input_pcb_close+0x1c>)
 8015002:	781b      	ldrb	r3, [r3, #0]
 8015004:	f043 0310 	orr.w	r3, r3, #16
 8015008:	b2da      	uxtb	r2, r3
 801500a:	4b03      	ldr	r3, [pc, #12]	@ (8015018 <tcp_trigger_input_pcb_close+0x1c>)
 801500c:	701a      	strb	r2, [r3, #0]
}
 801500e:	bf00      	nop
 8015010:	46bd      	mov	sp, r7
 8015012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015016:	4770      	bx	lr
 8015018:	24007f45 	.word	0x24007f45

0801501c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b084      	sub	sp, #16
 8015020:	af00      	add	r7, sp, #0
 8015022:	60f8      	str	r0, [r7, #12]
 8015024:	60b9      	str	r1, [r7, #8]
 8015026:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d00a      	beq.n	8015044 <tcp_route+0x28>
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	7a1b      	ldrb	r3, [r3, #8]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d006      	beq.n	8015044 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	7a1b      	ldrb	r3, [r3, #8]
 801503a:	4618      	mov	r0, r3
 801503c:	f7fb fa22 	bl	8010484 <netif_get_by_index>
 8015040:	4603      	mov	r3, r0
 8015042:	e003      	b.n	801504c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015044:	6878      	ldr	r0, [r7, #4]
 8015046:	f7f9 f855 	bl	800e0f4 <ip4_route>
 801504a:	4603      	mov	r3, r0
  }
}
 801504c:	4618      	mov	r0, r3
 801504e:	3710      	adds	r7, #16
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}

08015054 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015054:	b590      	push	{r4, r7, lr}
 8015056:	b087      	sub	sp, #28
 8015058:	af00      	add	r7, sp, #0
 801505a:	60f8      	str	r0, [r7, #12]
 801505c:	60b9      	str	r1, [r7, #8]
 801505e:	603b      	str	r3, [r7, #0]
 8015060:	4613      	mov	r3, r2
 8015062:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d105      	bne.n	8015076 <tcp_create_segment+0x22>
 801506a:	4b43      	ldr	r3, [pc, #268]	@ (8015178 <tcp_create_segment+0x124>)
 801506c:	22a3      	movs	r2, #163	@ 0xa3
 801506e:	4943      	ldr	r1, [pc, #268]	@ (801517c <tcp_create_segment+0x128>)
 8015070:	4843      	ldr	r0, [pc, #268]	@ (8015180 <tcp_create_segment+0x12c>)
 8015072:	f002 fb5f 	bl	8017734 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015076:	68bb      	ldr	r3, [r7, #8]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d105      	bne.n	8015088 <tcp_create_segment+0x34>
 801507c:	4b3e      	ldr	r3, [pc, #248]	@ (8015178 <tcp_create_segment+0x124>)
 801507e:	22a4      	movs	r2, #164	@ 0xa4
 8015080:	4940      	ldr	r1, [pc, #256]	@ (8015184 <tcp_create_segment+0x130>)
 8015082:	483f      	ldr	r0, [pc, #252]	@ (8015180 <tcp_create_segment+0x12c>)
 8015084:	f002 fb56 	bl	8017734 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015088:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801508c:	009b      	lsls	r3, r3, #2
 801508e:	b2db      	uxtb	r3, r3
 8015090:	f003 0304 	and.w	r3, r3, #4
 8015094:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015096:	2003      	movs	r0, #3
 8015098:	f7fa fe5c 	bl	800fd54 <memp_malloc>
 801509c:	6138      	str	r0, [r7, #16]
 801509e:	693b      	ldr	r3, [r7, #16]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d104      	bne.n	80150ae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80150a4:	68b8      	ldr	r0, [r7, #8]
 80150a6:	f7fb fd79 	bl	8010b9c <pbuf_free>
    return NULL;
 80150aa:	2300      	movs	r3, #0
 80150ac:	e060      	b.n	8015170 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80150b4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	2200      	movs	r2, #0
 80150ba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80150bc:	693b      	ldr	r3, [r7, #16]
 80150be:	68ba      	ldr	r2, [r7, #8]
 80150c0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80150c2:	68bb      	ldr	r3, [r7, #8]
 80150c4:	891a      	ldrh	r2, [r3, #8]
 80150c6:	7dfb      	ldrb	r3, [r7, #23]
 80150c8:	b29b      	uxth	r3, r3
 80150ca:	429a      	cmp	r2, r3
 80150cc:	d205      	bcs.n	80150da <tcp_create_segment+0x86>
 80150ce:	4b2a      	ldr	r3, [pc, #168]	@ (8015178 <tcp_create_segment+0x124>)
 80150d0:	22b0      	movs	r2, #176	@ 0xb0
 80150d2:	492d      	ldr	r1, [pc, #180]	@ (8015188 <tcp_create_segment+0x134>)
 80150d4:	482a      	ldr	r0, [pc, #168]	@ (8015180 <tcp_create_segment+0x12c>)
 80150d6:	f002 fb2d 	bl	8017734 <iprintf>
  seg->len = p->tot_len - optlen;
 80150da:	68bb      	ldr	r3, [r7, #8]
 80150dc:	891a      	ldrh	r2, [r3, #8]
 80150de:	7dfb      	ldrb	r3, [r7, #23]
 80150e0:	b29b      	uxth	r3, r3
 80150e2:	1ad3      	subs	r3, r2, r3
 80150e4:	b29a      	uxth	r2, r3
 80150e6:	693b      	ldr	r3, [r7, #16]
 80150e8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80150ea:	2114      	movs	r1, #20
 80150ec:	68b8      	ldr	r0, [r7, #8]
 80150ee:	f7fb fcbf 	bl	8010a70 <pbuf_add_header>
 80150f2:	4603      	mov	r3, r0
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d004      	beq.n	8015102 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80150f8:	6938      	ldr	r0, [r7, #16]
 80150fa:	f7fd f8d2 	bl	80122a2 <tcp_seg_free>
    return NULL;
 80150fe:	2300      	movs	r3, #0
 8015100:	e036      	b.n	8015170 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015102:	693b      	ldr	r3, [r7, #16]
 8015104:	685b      	ldr	r3, [r3, #4]
 8015106:	685a      	ldr	r2, [r3, #4]
 8015108:	693b      	ldr	r3, [r7, #16]
 801510a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	8ada      	ldrh	r2, [r3, #22]
 8015110:	693b      	ldr	r3, [r7, #16]
 8015112:	68dc      	ldr	r4, [r3, #12]
 8015114:	4610      	mov	r0, r2
 8015116:	f7f5 fe85 	bl	800ae24 <lwip_htons>
 801511a:	4603      	mov	r3, r0
 801511c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	8b1a      	ldrh	r2, [r3, #24]
 8015122:	693b      	ldr	r3, [r7, #16]
 8015124:	68dc      	ldr	r4, [r3, #12]
 8015126:	4610      	mov	r0, r2
 8015128:	f7f5 fe7c 	bl	800ae24 <lwip_htons>
 801512c:	4603      	mov	r3, r0
 801512e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015130:	693b      	ldr	r3, [r7, #16]
 8015132:	68dc      	ldr	r4, [r3, #12]
 8015134:	6838      	ldr	r0, [r7, #0]
 8015136:	f7f5 fe8a 	bl	800ae4e <lwip_htonl>
 801513a:	4603      	mov	r3, r0
 801513c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801513e:	7dfb      	ldrb	r3, [r7, #23]
 8015140:	089b      	lsrs	r3, r3, #2
 8015142:	b2db      	uxtb	r3, r3
 8015144:	3305      	adds	r3, #5
 8015146:	b29b      	uxth	r3, r3
 8015148:	031b      	lsls	r3, r3, #12
 801514a:	b29a      	uxth	r2, r3
 801514c:	79fb      	ldrb	r3, [r7, #7]
 801514e:	b29b      	uxth	r3, r3
 8015150:	4313      	orrs	r3, r2
 8015152:	b29a      	uxth	r2, r3
 8015154:	693b      	ldr	r3, [r7, #16]
 8015156:	68dc      	ldr	r4, [r3, #12]
 8015158:	4610      	mov	r0, r2
 801515a:	f7f5 fe63 	bl	800ae24 <lwip_htons>
 801515e:	4603      	mov	r3, r0
 8015160:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015162:	693b      	ldr	r3, [r7, #16]
 8015164:	68db      	ldr	r3, [r3, #12]
 8015166:	2200      	movs	r2, #0
 8015168:	749a      	strb	r2, [r3, #18]
 801516a:	2200      	movs	r2, #0
 801516c:	74da      	strb	r2, [r3, #19]
  return seg;
 801516e:	693b      	ldr	r3, [r7, #16]
}
 8015170:	4618      	mov	r0, r3
 8015172:	371c      	adds	r7, #28
 8015174:	46bd      	mov	sp, r7
 8015176:	bd90      	pop	{r4, r7, pc}
 8015178:	0801aa24 	.word	0x0801aa24
 801517c:	0801aa8c 	.word	0x0801aa8c
 8015180:	0801aaac 	.word	0x0801aaac
 8015184:	0801aad4 	.word	0x0801aad4
 8015188:	0801aaf8 	.word	0x0801aaf8

0801518c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801518c:	b590      	push	{r4, r7, lr}
 801518e:	b08b      	sub	sp, #44	@ 0x2c
 8015190:	af02      	add	r7, sp, #8
 8015192:	6078      	str	r0, [r7, #4]
 8015194:	460b      	mov	r3, r1
 8015196:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015198:	2300      	movs	r3, #0
 801519a:	61fb      	str	r3, [r7, #28]
 801519c:	2300      	movs	r3, #0
 801519e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80151a0:	2300      	movs	r3, #0
 80151a2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d106      	bne.n	80151b8 <tcp_split_unsent_seg+0x2c>
 80151aa:	4b95      	ldr	r3, [pc, #596]	@ (8015400 <tcp_split_unsent_seg+0x274>)
 80151ac:	f240 324b 	movw	r2, #843	@ 0x34b
 80151b0:	4994      	ldr	r1, [pc, #592]	@ (8015404 <tcp_split_unsent_seg+0x278>)
 80151b2:	4895      	ldr	r0, [pc, #596]	@ (8015408 <tcp_split_unsent_seg+0x27c>)
 80151b4:	f002 fabe 	bl	8017734 <iprintf>

  useg = pcb->unsent;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80151bc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80151be:	697b      	ldr	r3, [r7, #20]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d102      	bne.n	80151ca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80151c4:	f04f 33ff 	mov.w	r3, #4294967295
 80151c8:	e116      	b.n	80153f8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80151ca:	887b      	ldrh	r3, [r7, #2]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d109      	bne.n	80151e4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80151d0:	4b8b      	ldr	r3, [pc, #556]	@ (8015400 <tcp_split_unsent_seg+0x274>)
 80151d2:	f240 3253 	movw	r2, #851	@ 0x353
 80151d6:	498d      	ldr	r1, [pc, #564]	@ (801540c <tcp_split_unsent_seg+0x280>)
 80151d8:	488b      	ldr	r0, [pc, #556]	@ (8015408 <tcp_split_unsent_seg+0x27c>)
 80151da:	f002 faab 	bl	8017734 <iprintf>
    return ERR_VAL;
 80151de:	f06f 0305 	mvn.w	r3, #5
 80151e2:	e109      	b.n	80153f8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80151e4:	697b      	ldr	r3, [r7, #20]
 80151e6:	891b      	ldrh	r3, [r3, #8]
 80151e8:	887a      	ldrh	r2, [r7, #2]
 80151ea:	429a      	cmp	r2, r3
 80151ec:	d301      	bcc.n	80151f2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80151ee:	2300      	movs	r3, #0
 80151f0:	e102      	b.n	80153f8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151f6:	887a      	ldrh	r2, [r7, #2]
 80151f8:	429a      	cmp	r2, r3
 80151fa:	d906      	bls.n	801520a <tcp_split_unsent_seg+0x7e>
 80151fc:	4b80      	ldr	r3, [pc, #512]	@ (8015400 <tcp_split_unsent_seg+0x274>)
 80151fe:	f240 325b 	movw	r2, #859	@ 0x35b
 8015202:	4983      	ldr	r1, [pc, #524]	@ (8015410 <tcp_split_unsent_seg+0x284>)
 8015204:	4880      	ldr	r0, [pc, #512]	@ (8015408 <tcp_split_unsent_seg+0x27c>)
 8015206:	f002 fa95 	bl	8017734 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801520a:	697b      	ldr	r3, [r7, #20]
 801520c:	891b      	ldrh	r3, [r3, #8]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d106      	bne.n	8015220 <tcp_split_unsent_seg+0x94>
 8015212:	4b7b      	ldr	r3, [pc, #492]	@ (8015400 <tcp_split_unsent_seg+0x274>)
 8015214:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8015218:	497e      	ldr	r1, [pc, #504]	@ (8015414 <tcp_split_unsent_seg+0x288>)
 801521a:	487b      	ldr	r0, [pc, #492]	@ (8015408 <tcp_split_unsent_seg+0x27c>)
 801521c:	f002 fa8a 	bl	8017734 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015220:	697b      	ldr	r3, [r7, #20]
 8015222:	7a9b      	ldrb	r3, [r3, #10]
 8015224:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015226:	7bfb      	ldrb	r3, [r7, #15]
 8015228:	009b      	lsls	r3, r3, #2
 801522a:	b2db      	uxtb	r3, r3
 801522c:	f003 0304 	and.w	r3, r3, #4
 8015230:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8015232:	697b      	ldr	r3, [r7, #20]
 8015234:	891a      	ldrh	r2, [r3, #8]
 8015236:	887b      	ldrh	r3, [r7, #2]
 8015238:	1ad3      	subs	r3, r2, r3
 801523a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801523c:	7bbb      	ldrb	r3, [r7, #14]
 801523e:	b29a      	uxth	r2, r3
 8015240:	89bb      	ldrh	r3, [r7, #12]
 8015242:	4413      	add	r3, r2
 8015244:	b29b      	uxth	r3, r3
 8015246:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801524a:	4619      	mov	r1, r3
 801524c:	2036      	movs	r0, #54	@ 0x36
 801524e:	f7fb f9c3 	bl	80105d8 <pbuf_alloc>
 8015252:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015254:	693b      	ldr	r3, [r7, #16]
 8015256:	2b00      	cmp	r3, #0
 8015258:	f000 80b7 	beq.w	80153ca <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801525c:	697b      	ldr	r3, [r7, #20]
 801525e:	685b      	ldr	r3, [r3, #4]
 8015260:	891a      	ldrh	r2, [r3, #8]
 8015262:	697b      	ldr	r3, [r7, #20]
 8015264:	891b      	ldrh	r3, [r3, #8]
 8015266:	1ad3      	subs	r3, r2, r3
 8015268:	b29a      	uxth	r2, r3
 801526a:	887b      	ldrh	r3, [r7, #2]
 801526c:	4413      	add	r3, r2
 801526e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015270:	697b      	ldr	r3, [r7, #20]
 8015272:	6858      	ldr	r0, [r3, #4]
 8015274:	693b      	ldr	r3, [r7, #16]
 8015276:	685a      	ldr	r2, [r3, #4]
 8015278:	7bbb      	ldrb	r3, [r7, #14]
 801527a:	18d1      	adds	r1, r2, r3
 801527c:	897b      	ldrh	r3, [r7, #10]
 801527e:	89ba      	ldrh	r2, [r7, #12]
 8015280:	f7fb fe92 	bl	8010fa8 <pbuf_copy_partial>
 8015284:	4603      	mov	r3, r0
 8015286:	461a      	mov	r2, r3
 8015288:	89bb      	ldrh	r3, [r7, #12]
 801528a:	4293      	cmp	r3, r2
 801528c:	f040 809f 	bne.w	80153ce <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015290:	697b      	ldr	r3, [r7, #20]
 8015292:	68db      	ldr	r3, [r3, #12]
 8015294:	899b      	ldrh	r3, [r3, #12]
 8015296:	b29b      	uxth	r3, r3
 8015298:	4618      	mov	r0, r3
 801529a:	f7f5 fdc3 	bl	800ae24 <lwip_htons>
 801529e:	4603      	mov	r3, r0
 80152a0:	b2db      	uxtb	r3, r3
 80152a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80152a6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80152a8:	2300      	movs	r3, #0
 80152aa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80152ac:	7efb      	ldrb	r3, [r7, #27]
 80152ae:	f003 0308 	and.w	r3, r3, #8
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d007      	beq.n	80152c6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80152b6:	7efb      	ldrb	r3, [r7, #27]
 80152b8:	f023 0308 	bic.w	r3, r3, #8
 80152bc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80152be:	7ebb      	ldrb	r3, [r7, #26]
 80152c0:	f043 0308 	orr.w	r3, r3, #8
 80152c4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80152c6:	7efb      	ldrb	r3, [r7, #27]
 80152c8:	f003 0301 	and.w	r3, r3, #1
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d007      	beq.n	80152e0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80152d0:	7efb      	ldrb	r3, [r7, #27]
 80152d2:	f023 0301 	bic.w	r3, r3, #1
 80152d6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80152d8:	7ebb      	ldrb	r3, [r7, #26]
 80152da:	f043 0301 	orr.w	r3, r3, #1
 80152de:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	68db      	ldr	r3, [r3, #12]
 80152e4:	685b      	ldr	r3, [r3, #4]
 80152e6:	4618      	mov	r0, r3
 80152e8:	f7f5 fdb1 	bl	800ae4e <lwip_htonl>
 80152ec:	4602      	mov	r2, r0
 80152ee:	887b      	ldrh	r3, [r7, #2]
 80152f0:	18d1      	adds	r1, r2, r3
 80152f2:	7eba      	ldrb	r2, [r7, #26]
 80152f4:	7bfb      	ldrb	r3, [r7, #15]
 80152f6:	9300      	str	r3, [sp, #0]
 80152f8:	460b      	mov	r3, r1
 80152fa:	6939      	ldr	r1, [r7, #16]
 80152fc:	6878      	ldr	r0, [r7, #4]
 80152fe:	f7ff fea9 	bl	8015054 <tcp_create_segment>
 8015302:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015304:	69fb      	ldr	r3, [r7, #28]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d063      	beq.n	80153d2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801530a:	697b      	ldr	r3, [r7, #20]
 801530c:	685b      	ldr	r3, [r3, #4]
 801530e:	4618      	mov	r0, r3
 8015310:	f7fb fcd2 	bl	8010cb8 <pbuf_clen>
 8015314:	4603      	mov	r3, r0
 8015316:	461a      	mov	r2, r3
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801531e:	1a9b      	subs	r3, r3, r2
 8015320:	b29a      	uxth	r2, r3
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015328:	697b      	ldr	r3, [r7, #20]
 801532a:	6858      	ldr	r0, [r3, #4]
 801532c:	697b      	ldr	r3, [r7, #20]
 801532e:	685b      	ldr	r3, [r3, #4]
 8015330:	891a      	ldrh	r2, [r3, #8]
 8015332:	89bb      	ldrh	r3, [r7, #12]
 8015334:	1ad3      	subs	r3, r2, r3
 8015336:	b29b      	uxth	r3, r3
 8015338:	4619      	mov	r1, r3
 801533a:	f7fb faab 	bl	8010894 <pbuf_realloc>
  useg->len -= remainder;
 801533e:	697b      	ldr	r3, [r7, #20]
 8015340:	891a      	ldrh	r2, [r3, #8]
 8015342:	89bb      	ldrh	r3, [r7, #12]
 8015344:	1ad3      	subs	r3, r2, r3
 8015346:	b29a      	uxth	r2, r3
 8015348:	697b      	ldr	r3, [r7, #20]
 801534a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801534c:	697b      	ldr	r3, [r7, #20]
 801534e:	68db      	ldr	r3, [r3, #12]
 8015350:	899b      	ldrh	r3, [r3, #12]
 8015352:	b29c      	uxth	r4, r3
 8015354:	7efb      	ldrb	r3, [r7, #27]
 8015356:	b29b      	uxth	r3, r3
 8015358:	4618      	mov	r0, r3
 801535a:	f7f5 fd63 	bl	800ae24 <lwip_htons>
 801535e:	4603      	mov	r3, r0
 8015360:	461a      	mov	r2, r3
 8015362:	697b      	ldr	r3, [r7, #20]
 8015364:	68db      	ldr	r3, [r3, #12]
 8015366:	4322      	orrs	r2, r4
 8015368:	b292      	uxth	r2, r2
 801536a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801536c:	697b      	ldr	r3, [r7, #20]
 801536e:	685b      	ldr	r3, [r3, #4]
 8015370:	4618      	mov	r0, r3
 8015372:	f7fb fca1 	bl	8010cb8 <pbuf_clen>
 8015376:	4603      	mov	r3, r0
 8015378:	461a      	mov	r2, r3
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015380:	4413      	add	r3, r2
 8015382:	b29a      	uxth	r2, r3
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801538a:	69fb      	ldr	r3, [r7, #28]
 801538c:	685b      	ldr	r3, [r3, #4]
 801538e:	4618      	mov	r0, r3
 8015390:	f7fb fc92 	bl	8010cb8 <pbuf_clen>
 8015394:	4603      	mov	r3, r0
 8015396:	461a      	mov	r2, r3
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801539e:	4413      	add	r3, r2
 80153a0:	b29a      	uxth	r2, r3
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80153a8:	697b      	ldr	r3, [r7, #20]
 80153aa:	681a      	ldr	r2, [r3, #0]
 80153ac:	69fb      	ldr	r3, [r7, #28]
 80153ae:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80153b0:	697b      	ldr	r3, [r7, #20]
 80153b2:	69fa      	ldr	r2, [r7, #28]
 80153b4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80153b6:	69fb      	ldr	r3, [r7, #28]
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d103      	bne.n	80153c6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	2200      	movs	r2, #0
 80153c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80153c6:	2300      	movs	r3, #0
 80153c8:	e016      	b.n	80153f8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80153ca:	bf00      	nop
 80153cc:	e002      	b.n	80153d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80153ce:	bf00      	nop
 80153d0:	e000      	b.n	80153d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80153d2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80153d4:	69fb      	ldr	r3, [r7, #28]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d006      	beq.n	80153e8 <tcp_split_unsent_seg+0x25c>
 80153da:	4b09      	ldr	r3, [pc, #36]	@ (8015400 <tcp_split_unsent_seg+0x274>)
 80153dc:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80153e0:	490d      	ldr	r1, [pc, #52]	@ (8015418 <tcp_split_unsent_seg+0x28c>)
 80153e2:	4809      	ldr	r0, [pc, #36]	@ (8015408 <tcp_split_unsent_seg+0x27c>)
 80153e4:	f002 f9a6 	bl	8017734 <iprintf>
  if (p != NULL) {
 80153e8:	693b      	ldr	r3, [r7, #16]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d002      	beq.n	80153f4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80153ee:	6938      	ldr	r0, [r7, #16]
 80153f0:	f7fb fbd4 	bl	8010b9c <pbuf_free>
  }

  return ERR_MEM;
 80153f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	3724      	adds	r7, #36	@ 0x24
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd90      	pop	{r4, r7, pc}
 8015400:	0801aa24 	.word	0x0801aa24
 8015404:	0801adec 	.word	0x0801adec
 8015408:	0801aaac 	.word	0x0801aaac
 801540c:	0801ae10 	.word	0x0801ae10
 8015410:	0801ae34 	.word	0x0801ae34
 8015414:	0801ae44 	.word	0x0801ae44
 8015418:	0801ae54 	.word	0x0801ae54

0801541c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801541c:	b590      	push	{r4, r7, lr}
 801541e:	b085      	sub	sp, #20
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d106      	bne.n	8015438 <tcp_send_fin+0x1c>
 801542a:	4b21      	ldr	r3, [pc, #132]	@ (80154b0 <tcp_send_fin+0x94>)
 801542c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8015430:	4920      	ldr	r1, [pc, #128]	@ (80154b4 <tcp_send_fin+0x98>)
 8015432:	4821      	ldr	r0, [pc, #132]	@ (80154b8 <tcp_send_fin+0x9c>)
 8015434:	f002 f97e 	bl	8017734 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801543c:	2b00      	cmp	r3, #0
 801543e:	d02e      	beq.n	801549e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015444:	60fb      	str	r3, [r7, #12]
 8015446:	e002      	b.n	801544e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d1f8      	bne.n	8015448 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	68db      	ldr	r3, [r3, #12]
 801545a:	899b      	ldrh	r3, [r3, #12]
 801545c:	b29b      	uxth	r3, r3
 801545e:	4618      	mov	r0, r3
 8015460:	f7f5 fce0 	bl	800ae24 <lwip_htons>
 8015464:	4603      	mov	r3, r0
 8015466:	b2db      	uxtb	r3, r3
 8015468:	f003 0307 	and.w	r3, r3, #7
 801546c:	2b00      	cmp	r3, #0
 801546e:	d116      	bne.n	801549e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	68db      	ldr	r3, [r3, #12]
 8015474:	899b      	ldrh	r3, [r3, #12]
 8015476:	b29c      	uxth	r4, r3
 8015478:	2001      	movs	r0, #1
 801547a:	f7f5 fcd3 	bl	800ae24 <lwip_htons>
 801547e:	4603      	mov	r3, r0
 8015480:	461a      	mov	r2, r3
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	68db      	ldr	r3, [r3, #12]
 8015486:	4322      	orrs	r2, r4
 8015488:	b292      	uxth	r2, r2
 801548a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	8b5b      	ldrh	r3, [r3, #26]
 8015490:	f043 0320 	orr.w	r3, r3, #32
 8015494:	b29a      	uxth	r2, r3
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801549a:	2300      	movs	r3, #0
 801549c:	e004      	b.n	80154a8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801549e:	2101      	movs	r1, #1
 80154a0:	6878      	ldr	r0, [r7, #4]
 80154a2:	f000 f80b 	bl	80154bc <tcp_enqueue_flags>
 80154a6:	4603      	mov	r3, r0
}
 80154a8:	4618      	mov	r0, r3
 80154aa:	3714      	adds	r7, #20
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd90      	pop	{r4, r7, pc}
 80154b0:	0801aa24 	.word	0x0801aa24
 80154b4:	0801ae60 	.word	0x0801ae60
 80154b8:	0801aaac 	.word	0x0801aaac

080154bc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b08a      	sub	sp, #40	@ 0x28
 80154c0:	af02      	add	r7, sp, #8
 80154c2:	6078      	str	r0, [r7, #4]
 80154c4:	460b      	mov	r3, r1
 80154c6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80154c8:	2300      	movs	r3, #0
 80154ca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80154cc:	2300      	movs	r3, #0
 80154ce:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80154d0:	78fb      	ldrb	r3, [r7, #3]
 80154d2:	f003 0303 	and.w	r3, r3, #3
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d106      	bne.n	80154e8 <tcp_enqueue_flags+0x2c>
 80154da:	4b67      	ldr	r3, [pc, #412]	@ (8015678 <tcp_enqueue_flags+0x1bc>)
 80154dc:	f240 4211 	movw	r2, #1041	@ 0x411
 80154e0:	4966      	ldr	r1, [pc, #408]	@ (801567c <tcp_enqueue_flags+0x1c0>)
 80154e2:	4867      	ldr	r0, [pc, #412]	@ (8015680 <tcp_enqueue_flags+0x1c4>)
 80154e4:	f002 f926 	bl	8017734 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d106      	bne.n	80154fc <tcp_enqueue_flags+0x40>
 80154ee:	4b62      	ldr	r3, [pc, #392]	@ (8015678 <tcp_enqueue_flags+0x1bc>)
 80154f0:	f240 4213 	movw	r2, #1043	@ 0x413
 80154f4:	4963      	ldr	r1, [pc, #396]	@ (8015684 <tcp_enqueue_flags+0x1c8>)
 80154f6:	4862      	ldr	r0, [pc, #392]	@ (8015680 <tcp_enqueue_flags+0x1c4>)
 80154f8:	f002 f91c 	bl	8017734 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80154fc:	78fb      	ldrb	r3, [r7, #3]
 80154fe:	f003 0302 	and.w	r3, r3, #2
 8015502:	2b00      	cmp	r3, #0
 8015504:	d001      	beq.n	801550a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015506:	2301      	movs	r3, #1
 8015508:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801550a:	7ffb      	ldrb	r3, [r7, #31]
 801550c:	009b      	lsls	r3, r3, #2
 801550e:	b2db      	uxtb	r3, r3
 8015510:	f003 0304 	and.w	r3, r3, #4
 8015514:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015516:	7dfb      	ldrb	r3, [r7, #23]
 8015518:	b29b      	uxth	r3, r3
 801551a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801551e:	4619      	mov	r1, r3
 8015520:	2036      	movs	r0, #54	@ 0x36
 8015522:	f7fb f859 	bl	80105d8 <pbuf_alloc>
 8015526:	6138      	str	r0, [r7, #16]
 8015528:	693b      	ldr	r3, [r7, #16]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d109      	bne.n	8015542 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	8b5b      	ldrh	r3, [r3, #26]
 8015532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015536:	b29a      	uxth	r2, r3
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801553c:	f04f 33ff 	mov.w	r3, #4294967295
 8015540:	e095      	b.n	801566e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015542:	693b      	ldr	r3, [r7, #16]
 8015544:	895a      	ldrh	r2, [r3, #10]
 8015546:	7dfb      	ldrb	r3, [r7, #23]
 8015548:	b29b      	uxth	r3, r3
 801554a:	429a      	cmp	r2, r3
 801554c:	d206      	bcs.n	801555c <tcp_enqueue_flags+0xa0>
 801554e:	4b4a      	ldr	r3, [pc, #296]	@ (8015678 <tcp_enqueue_flags+0x1bc>)
 8015550:	f240 4239 	movw	r2, #1081	@ 0x439
 8015554:	494c      	ldr	r1, [pc, #304]	@ (8015688 <tcp_enqueue_flags+0x1cc>)
 8015556:	484a      	ldr	r0, [pc, #296]	@ (8015680 <tcp_enqueue_flags+0x1c4>)
 8015558:	f002 f8ec 	bl	8017734 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8015560:	78fa      	ldrb	r2, [r7, #3]
 8015562:	7ffb      	ldrb	r3, [r7, #31]
 8015564:	9300      	str	r3, [sp, #0]
 8015566:	460b      	mov	r3, r1
 8015568:	6939      	ldr	r1, [r7, #16]
 801556a:	6878      	ldr	r0, [r7, #4]
 801556c:	f7ff fd72 	bl	8015054 <tcp_create_segment>
 8015570:	60f8      	str	r0, [r7, #12]
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d109      	bne.n	801558c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	8b5b      	ldrh	r3, [r3, #26]
 801557c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015580:	b29a      	uxth	r2, r3
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015586:	f04f 33ff 	mov.w	r3, #4294967295
 801558a:	e070      	b.n	801566e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	68db      	ldr	r3, [r3, #12]
 8015590:	f003 0303 	and.w	r3, r3, #3
 8015594:	2b00      	cmp	r3, #0
 8015596:	d006      	beq.n	80155a6 <tcp_enqueue_flags+0xea>
 8015598:	4b37      	ldr	r3, [pc, #220]	@ (8015678 <tcp_enqueue_flags+0x1bc>)
 801559a:	f240 4242 	movw	r2, #1090	@ 0x442
 801559e:	493b      	ldr	r1, [pc, #236]	@ (801568c <tcp_enqueue_flags+0x1d0>)
 80155a0:	4837      	ldr	r0, [pc, #220]	@ (8015680 <tcp_enqueue_flags+0x1c4>)
 80155a2:	f002 f8c7 	bl	8017734 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	891b      	ldrh	r3, [r3, #8]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d006      	beq.n	80155bc <tcp_enqueue_flags+0x100>
 80155ae:	4b32      	ldr	r3, [pc, #200]	@ (8015678 <tcp_enqueue_flags+0x1bc>)
 80155b0:	f240 4243 	movw	r2, #1091	@ 0x443
 80155b4:	4936      	ldr	r1, [pc, #216]	@ (8015690 <tcp_enqueue_flags+0x1d4>)
 80155b6:	4832      	ldr	r0, [pc, #200]	@ (8015680 <tcp_enqueue_flags+0x1c4>)
 80155b8:	f002 f8bc 	bl	8017734 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d103      	bne.n	80155cc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	68fa      	ldr	r2, [r7, #12]
 80155c8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80155ca:	e00d      	b.n	80155e8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80155d0:	61bb      	str	r3, [r7, #24]
 80155d2:	e002      	b.n	80155da <tcp_enqueue_flags+0x11e>
 80155d4:	69bb      	ldr	r3, [r7, #24]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	61bb      	str	r3, [r7, #24]
 80155da:	69bb      	ldr	r3, [r7, #24]
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d1f8      	bne.n	80155d4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80155e2:	69bb      	ldr	r3, [r7, #24]
 80155e4:	68fa      	ldr	r2, [r7, #12]
 80155e6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	2200      	movs	r2, #0
 80155ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80155f0:	78fb      	ldrb	r3, [r7, #3]
 80155f2:	f003 0302 	and.w	r3, r3, #2
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d104      	bne.n	8015604 <tcp_enqueue_flags+0x148>
 80155fa:	78fb      	ldrb	r3, [r7, #3]
 80155fc:	f003 0301 	and.w	r3, r3, #1
 8015600:	2b00      	cmp	r3, #0
 8015602:	d004      	beq.n	801560e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015608:	1c5a      	adds	r2, r3, #1
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801560e:	78fb      	ldrb	r3, [r7, #3]
 8015610:	f003 0301 	and.w	r3, r3, #1
 8015614:	2b00      	cmp	r3, #0
 8015616:	d006      	beq.n	8015626 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	8b5b      	ldrh	r3, [r3, #26]
 801561c:	f043 0320 	orr.w	r3, r3, #32
 8015620:	b29a      	uxth	r2, r3
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	685b      	ldr	r3, [r3, #4]
 801562a:	4618      	mov	r0, r3
 801562c:	f7fb fb44 	bl	8010cb8 <pbuf_clen>
 8015630:	4603      	mov	r3, r0
 8015632:	461a      	mov	r2, r3
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801563a:	4413      	add	r3, r2
 801563c:	b29a      	uxth	r2, r3
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801564a:	2b00      	cmp	r3, #0
 801564c:	d00e      	beq.n	801566c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015652:	2b00      	cmp	r3, #0
 8015654:	d10a      	bne.n	801566c <tcp_enqueue_flags+0x1b0>
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801565a:	2b00      	cmp	r3, #0
 801565c:	d106      	bne.n	801566c <tcp_enqueue_flags+0x1b0>
 801565e:	4b06      	ldr	r3, [pc, #24]	@ (8015678 <tcp_enqueue_flags+0x1bc>)
 8015660:	f240 4265 	movw	r2, #1125	@ 0x465
 8015664:	490b      	ldr	r1, [pc, #44]	@ (8015694 <tcp_enqueue_flags+0x1d8>)
 8015666:	4806      	ldr	r0, [pc, #24]	@ (8015680 <tcp_enqueue_flags+0x1c4>)
 8015668:	f002 f864 	bl	8017734 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801566c:	2300      	movs	r3, #0
}
 801566e:	4618      	mov	r0, r3
 8015670:	3720      	adds	r7, #32
 8015672:	46bd      	mov	sp, r7
 8015674:	bd80      	pop	{r7, pc}
 8015676:	bf00      	nop
 8015678:	0801aa24 	.word	0x0801aa24
 801567c:	0801ae7c 	.word	0x0801ae7c
 8015680:	0801aaac 	.word	0x0801aaac
 8015684:	0801aed4 	.word	0x0801aed4
 8015688:	0801aef4 	.word	0x0801aef4
 801568c:	0801af30 	.word	0x0801af30
 8015690:	0801af48 	.word	0x0801af48
 8015694:	0801af74 	.word	0x0801af74

08015698 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015698:	b5b0      	push	{r4, r5, r7, lr}
 801569a:	b08a      	sub	sp, #40	@ 0x28
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d106      	bne.n	80156b4 <tcp_output+0x1c>
 80156a6:	4b8a      	ldr	r3, [pc, #552]	@ (80158d0 <tcp_output+0x238>)
 80156a8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80156ac:	4989      	ldr	r1, [pc, #548]	@ (80158d4 <tcp_output+0x23c>)
 80156ae:	488a      	ldr	r0, [pc, #552]	@ (80158d8 <tcp_output+0x240>)
 80156b0:	f002 f840 	bl	8017734 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	7d1b      	ldrb	r3, [r3, #20]
 80156b8:	2b01      	cmp	r3, #1
 80156ba:	d106      	bne.n	80156ca <tcp_output+0x32>
 80156bc:	4b84      	ldr	r3, [pc, #528]	@ (80158d0 <tcp_output+0x238>)
 80156be:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80156c2:	4986      	ldr	r1, [pc, #536]	@ (80158dc <tcp_output+0x244>)
 80156c4:	4884      	ldr	r0, [pc, #528]	@ (80158d8 <tcp_output+0x240>)
 80156c6:	f002 f835 	bl	8017734 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80156ca:	4b85      	ldr	r3, [pc, #532]	@ (80158e0 <tcp_output+0x248>)
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	687a      	ldr	r2, [r7, #4]
 80156d0:	429a      	cmp	r2, r3
 80156d2:	d101      	bne.n	80156d8 <tcp_output+0x40>
    return ERR_OK;
 80156d4:	2300      	movs	r3, #0
 80156d6:	e1ce      	b.n	8015a76 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80156e4:	4293      	cmp	r3, r2
 80156e6:	bf28      	it	cs
 80156e8:	4613      	movcs	r3, r2
 80156ea:	b29b      	uxth	r3, r3
 80156ec:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80156f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80156f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d10b      	bne.n	8015712 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	8b5b      	ldrh	r3, [r3, #26]
 80156fe:	f003 0302 	and.w	r3, r3, #2
 8015702:	2b00      	cmp	r3, #0
 8015704:	f000 81aa 	beq.w	8015a5c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015708:	6878      	ldr	r0, [r7, #4]
 801570a:	f000 fdcb 	bl	80162a4 <tcp_send_empty_ack>
 801570e:	4603      	mov	r3, r0
 8015710:	e1b1      	b.n	8015a76 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015712:	6879      	ldr	r1, [r7, #4]
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	3304      	adds	r3, #4
 8015718:	461a      	mov	r2, r3
 801571a:	6878      	ldr	r0, [r7, #4]
 801571c:	f7ff fc7e 	bl	801501c <tcp_route>
 8015720:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015722:	697b      	ldr	r3, [r7, #20]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d102      	bne.n	801572e <tcp_output+0x96>
    return ERR_RTE;
 8015728:	f06f 0303 	mvn.w	r3, #3
 801572c:	e1a3      	b.n	8015a76 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d003      	beq.n	801573c <tcp_output+0xa4>
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d111      	bne.n	8015760 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801573c:	697b      	ldr	r3, [r7, #20]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d002      	beq.n	8015748 <tcp_output+0xb0>
 8015742:	697b      	ldr	r3, [r7, #20]
 8015744:	3304      	adds	r3, #4
 8015746:	e000      	b.n	801574a <tcp_output+0xb2>
 8015748:	2300      	movs	r3, #0
 801574a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801574c:	693b      	ldr	r3, [r7, #16]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d102      	bne.n	8015758 <tcp_output+0xc0>
      return ERR_RTE;
 8015752:	f06f 0303 	mvn.w	r3, #3
 8015756:	e18e      	b.n	8015a76 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015758:	693b      	ldr	r3, [r7, #16]
 801575a:	681a      	ldr	r2, [r3, #0]
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015762:	68db      	ldr	r3, [r3, #12]
 8015764:	685b      	ldr	r3, [r3, #4]
 8015766:	4618      	mov	r0, r3
 8015768:	f7f5 fb71 	bl	800ae4e <lwip_htonl>
 801576c:	4602      	mov	r2, r0
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015772:	1ad3      	subs	r3, r2, r3
 8015774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015776:	8912      	ldrh	r2, [r2, #8]
 8015778:	4413      	add	r3, r2
 801577a:	69ba      	ldr	r2, [r7, #24]
 801577c:	429a      	cmp	r2, r3
 801577e:	d227      	bcs.n	80157d0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015786:	461a      	mov	r2, r3
 8015788:	69bb      	ldr	r3, [r7, #24]
 801578a:	4293      	cmp	r3, r2
 801578c:	d114      	bne.n	80157b8 <tcp_output+0x120>
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015792:	2b00      	cmp	r3, #0
 8015794:	d110      	bne.n	80157b8 <tcp_output+0x120>
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801579c:	2b00      	cmp	r3, #0
 801579e:	d10b      	bne.n	80157b8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	2200      	movs	r2, #0
 80157a4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	2201      	movs	r2, #1
 80157ac:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	2200      	movs	r2, #0
 80157b4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	8b5b      	ldrh	r3, [r3, #26]
 80157bc:	f003 0302 	and.w	r3, r3, #2
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	f000 814d 	beq.w	8015a60 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80157c6:	6878      	ldr	r0, [r7, #4]
 80157c8:	f000 fd6c 	bl	80162a4 <tcp_send_empty_ack>
 80157cc:	4603      	mov	r3, r0
 80157ce:	e152      	b.n	8015a76 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	2200      	movs	r2, #0
 80157d4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80157dc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80157de:	6a3b      	ldr	r3, [r7, #32]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	f000 811c 	beq.w	8015a1e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80157e6:	e002      	b.n	80157ee <tcp_output+0x156>
 80157e8:	6a3b      	ldr	r3, [r7, #32]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	623b      	str	r3, [r7, #32]
 80157ee:	6a3b      	ldr	r3, [r7, #32]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d1f8      	bne.n	80157e8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80157f6:	e112      	b.n	8015a1e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80157f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157fa:	68db      	ldr	r3, [r3, #12]
 80157fc:	899b      	ldrh	r3, [r3, #12]
 80157fe:	b29b      	uxth	r3, r3
 8015800:	4618      	mov	r0, r3
 8015802:	f7f5 fb0f 	bl	800ae24 <lwip_htons>
 8015806:	4603      	mov	r3, r0
 8015808:	b2db      	uxtb	r3, r3
 801580a:	f003 0304 	and.w	r3, r3, #4
 801580e:	2b00      	cmp	r3, #0
 8015810:	d006      	beq.n	8015820 <tcp_output+0x188>
 8015812:	4b2f      	ldr	r3, [pc, #188]	@ (80158d0 <tcp_output+0x238>)
 8015814:	f240 5236 	movw	r2, #1334	@ 0x536
 8015818:	4932      	ldr	r1, [pc, #200]	@ (80158e4 <tcp_output+0x24c>)
 801581a:	482f      	ldr	r0, [pc, #188]	@ (80158d8 <tcp_output+0x240>)
 801581c:	f001 ff8a 	bl	8017734 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015824:	2b00      	cmp	r3, #0
 8015826:	d01f      	beq.n	8015868 <tcp_output+0x1d0>
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	8b5b      	ldrh	r3, [r3, #26]
 801582c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8015830:	2b00      	cmp	r3, #0
 8015832:	d119      	bne.n	8015868 <tcp_output+0x1d0>
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015838:	2b00      	cmp	r3, #0
 801583a:	d00b      	beq.n	8015854 <tcp_output+0x1bc>
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d110      	bne.n	8015868 <tcp_output+0x1d0>
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801584a:	891a      	ldrh	r2, [r3, #8]
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015850:	429a      	cmp	r2, r3
 8015852:	d209      	bcs.n	8015868 <tcp_output+0x1d0>
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801585a:	2b00      	cmp	r3, #0
 801585c:	d004      	beq.n	8015868 <tcp_output+0x1d0>
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015864:	2b08      	cmp	r3, #8
 8015866:	d901      	bls.n	801586c <tcp_output+0x1d4>
 8015868:	2301      	movs	r3, #1
 801586a:	e000      	b.n	801586e <tcp_output+0x1d6>
 801586c:	2300      	movs	r3, #0
 801586e:	2b00      	cmp	r3, #0
 8015870:	d106      	bne.n	8015880 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	8b5b      	ldrh	r3, [r3, #26]
 8015876:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801587a:	2b00      	cmp	r3, #0
 801587c:	f000 80e4 	beq.w	8015a48 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	7d1b      	ldrb	r3, [r3, #20]
 8015884:	2b02      	cmp	r3, #2
 8015886:	d00d      	beq.n	80158a4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801588a:	68db      	ldr	r3, [r3, #12]
 801588c:	899b      	ldrh	r3, [r3, #12]
 801588e:	b29c      	uxth	r4, r3
 8015890:	2010      	movs	r0, #16
 8015892:	f7f5 fac7 	bl	800ae24 <lwip_htons>
 8015896:	4603      	mov	r3, r0
 8015898:	461a      	mov	r2, r3
 801589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801589c:	68db      	ldr	r3, [r3, #12]
 801589e:	4322      	orrs	r2, r4
 80158a0:	b292      	uxth	r2, r2
 80158a2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80158a4:	697a      	ldr	r2, [r7, #20]
 80158a6:	6879      	ldr	r1, [r7, #4]
 80158a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80158aa:	f000 f909 	bl	8015ac0 <tcp_output_segment>
 80158ae:	4603      	mov	r3, r0
 80158b0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80158b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d016      	beq.n	80158e8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	8b5b      	ldrh	r3, [r3, #26]
 80158be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80158c2:	b29a      	uxth	r2, r3
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	835a      	strh	r2, [r3, #26]
      return err;
 80158c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158cc:	e0d3      	b.n	8015a76 <tcp_output+0x3de>
 80158ce:	bf00      	nop
 80158d0:	0801aa24 	.word	0x0801aa24
 80158d4:	0801af9c 	.word	0x0801af9c
 80158d8:	0801aaac 	.word	0x0801aaac
 80158dc:	0801afb4 	.word	0x0801afb4
 80158e0:	24007f4c 	.word	0x24007f4c
 80158e4:	0801afdc 	.word	0x0801afdc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80158e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158ea:	681a      	ldr	r2, [r3, #0]
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	7d1b      	ldrb	r3, [r3, #20]
 80158f4:	2b02      	cmp	r3, #2
 80158f6:	d006      	beq.n	8015906 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	8b5b      	ldrh	r3, [r3, #26]
 80158fc:	f023 0303 	bic.w	r3, r3, #3
 8015900:	b29a      	uxth	r2, r3
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015908:	68db      	ldr	r3, [r3, #12]
 801590a:	685b      	ldr	r3, [r3, #4]
 801590c:	4618      	mov	r0, r3
 801590e:	f7f5 fa9e 	bl	800ae4e <lwip_htonl>
 8015912:	4604      	mov	r4, r0
 8015914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015916:	891b      	ldrh	r3, [r3, #8]
 8015918:	461d      	mov	r5, r3
 801591a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801591c:	68db      	ldr	r3, [r3, #12]
 801591e:	899b      	ldrh	r3, [r3, #12]
 8015920:	b29b      	uxth	r3, r3
 8015922:	4618      	mov	r0, r3
 8015924:	f7f5 fa7e 	bl	800ae24 <lwip_htons>
 8015928:	4603      	mov	r3, r0
 801592a:	b2db      	uxtb	r3, r3
 801592c:	f003 0303 	and.w	r3, r3, #3
 8015930:	2b00      	cmp	r3, #0
 8015932:	d001      	beq.n	8015938 <tcp_output+0x2a0>
 8015934:	2301      	movs	r3, #1
 8015936:	e000      	b.n	801593a <tcp_output+0x2a2>
 8015938:	2300      	movs	r3, #0
 801593a:	442b      	add	r3, r5
 801593c:	4423      	add	r3, r4
 801593e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	1ad3      	subs	r3, r2, r3
 8015948:	2b00      	cmp	r3, #0
 801594a:	da02      	bge.n	8015952 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	68ba      	ldr	r2, [r7, #8]
 8015950:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015954:	891b      	ldrh	r3, [r3, #8]
 8015956:	461c      	mov	r4, r3
 8015958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801595a:	68db      	ldr	r3, [r3, #12]
 801595c:	899b      	ldrh	r3, [r3, #12]
 801595e:	b29b      	uxth	r3, r3
 8015960:	4618      	mov	r0, r3
 8015962:	f7f5 fa5f 	bl	800ae24 <lwip_htons>
 8015966:	4603      	mov	r3, r0
 8015968:	b2db      	uxtb	r3, r3
 801596a:	f003 0303 	and.w	r3, r3, #3
 801596e:	2b00      	cmp	r3, #0
 8015970:	d001      	beq.n	8015976 <tcp_output+0x2de>
 8015972:	2301      	movs	r3, #1
 8015974:	e000      	b.n	8015978 <tcp_output+0x2e0>
 8015976:	2300      	movs	r3, #0
 8015978:	4423      	add	r3, r4
 801597a:	2b00      	cmp	r3, #0
 801597c:	d049      	beq.n	8015a12 <tcp_output+0x37a>
      seg->next = NULL;
 801597e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015980:	2200      	movs	r2, #0
 8015982:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015988:	2b00      	cmp	r3, #0
 801598a:	d105      	bne.n	8015998 <tcp_output+0x300>
        pcb->unacked = seg;
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015990:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8015992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015994:	623b      	str	r3, [r7, #32]
 8015996:	e03f      	b.n	8015a18 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801599a:	68db      	ldr	r3, [r3, #12]
 801599c:	685b      	ldr	r3, [r3, #4]
 801599e:	4618      	mov	r0, r3
 80159a0:	f7f5 fa55 	bl	800ae4e <lwip_htonl>
 80159a4:	4604      	mov	r4, r0
 80159a6:	6a3b      	ldr	r3, [r7, #32]
 80159a8:	68db      	ldr	r3, [r3, #12]
 80159aa:	685b      	ldr	r3, [r3, #4]
 80159ac:	4618      	mov	r0, r3
 80159ae:	f7f5 fa4e 	bl	800ae4e <lwip_htonl>
 80159b2:	4603      	mov	r3, r0
 80159b4:	1ae3      	subs	r3, r4, r3
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	da24      	bge.n	8015a04 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	3370      	adds	r3, #112	@ 0x70
 80159be:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80159c0:	e002      	b.n	80159c8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80159c2:	69fb      	ldr	r3, [r7, #28]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80159c8:	69fb      	ldr	r3, [r7, #28]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d011      	beq.n	80159f4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80159d0:	69fb      	ldr	r3, [r7, #28]
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	68db      	ldr	r3, [r3, #12]
 80159d6:	685b      	ldr	r3, [r3, #4]
 80159d8:	4618      	mov	r0, r3
 80159da:	f7f5 fa38 	bl	800ae4e <lwip_htonl>
 80159de:	4604      	mov	r4, r0
 80159e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159e2:	68db      	ldr	r3, [r3, #12]
 80159e4:	685b      	ldr	r3, [r3, #4]
 80159e6:	4618      	mov	r0, r3
 80159e8:	f7f5 fa31 	bl	800ae4e <lwip_htonl>
 80159ec:	4603      	mov	r3, r0
 80159ee:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	dbe6      	blt.n	80159c2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80159f4:	69fb      	ldr	r3, [r7, #28]
 80159f6:	681a      	ldr	r2, [r3, #0]
 80159f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159fa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80159fc:	69fb      	ldr	r3, [r7, #28]
 80159fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a00:	601a      	str	r2, [r3, #0]
 8015a02:	e009      	b.n	8015a18 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015a04:	6a3b      	ldr	r3, [r7, #32]
 8015a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a08:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015a0a:	6a3b      	ldr	r3, [r7, #32]
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	623b      	str	r3, [r7, #32]
 8015a10:	e002      	b.n	8015a18 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015a12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015a14:	f7fc fc45 	bl	80122a2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8015a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d012      	beq.n	8015a4a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a26:	68db      	ldr	r3, [r3, #12]
 8015a28:	685b      	ldr	r3, [r3, #4]
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7f5 fa0f 	bl	800ae4e <lwip_htonl>
 8015a30:	4602      	mov	r2, r0
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a36:	1ad3      	subs	r3, r2, r3
 8015a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a3a:	8912      	ldrh	r2, [r2, #8]
 8015a3c:	4413      	add	r3, r2
  while (seg != NULL &&
 8015a3e:	69ba      	ldr	r2, [r7, #24]
 8015a40:	429a      	cmp	r2, r3
 8015a42:	f4bf aed9 	bcs.w	80157f8 <tcp_output+0x160>
 8015a46:	e000      	b.n	8015a4a <tcp_output+0x3b2>
      break;
 8015a48:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d108      	bne.n	8015a64 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	2200      	movs	r2, #0
 8015a56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8015a5a:	e004      	b.n	8015a66 <tcp_output+0x3ce>
    goto output_done;
 8015a5c:	bf00      	nop
 8015a5e:	e002      	b.n	8015a66 <tcp_output+0x3ce>
    goto output_done;
 8015a60:	bf00      	nop
 8015a62:	e000      	b.n	8015a66 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015a64:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	8b5b      	ldrh	r3, [r3, #26]
 8015a6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015a6e:	b29a      	uxth	r2, r3
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015a74:	2300      	movs	r3, #0
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	3728      	adds	r7, #40	@ 0x28
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8015a7e:	bf00      	nop

08015a80 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b082      	sub	sp, #8
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d106      	bne.n	8015a9c <tcp_output_segment_busy+0x1c>
 8015a8e:	4b09      	ldr	r3, [pc, #36]	@ (8015ab4 <tcp_output_segment_busy+0x34>)
 8015a90:	f240 529a 	movw	r2, #1434	@ 0x59a
 8015a94:	4908      	ldr	r1, [pc, #32]	@ (8015ab8 <tcp_output_segment_busy+0x38>)
 8015a96:	4809      	ldr	r0, [pc, #36]	@ (8015abc <tcp_output_segment_busy+0x3c>)
 8015a98:	f001 fe4c 	bl	8017734 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	685b      	ldr	r3, [r3, #4]
 8015aa0:	7b9b      	ldrb	r3, [r3, #14]
 8015aa2:	2b01      	cmp	r3, #1
 8015aa4:	d001      	beq.n	8015aaa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015aa6:	2301      	movs	r3, #1
 8015aa8:	e000      	b.n	8015aac <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015aaa:	2300      	movs	r3, #0
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	3708      	adds	r7, #8
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}
 8015ab4:	0801aa24 	.word	0x0801aa24
 8015ab8:	0801aff4 	.word	0x0801aff4
 8015abc:	0801aaac 	.word	0x0801aaac

08015ac0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015ac0:	b5b0      	push	{r4, r5, r7, lr}
 8015ac2:	b08c      	sub	sp, #48	@ 0x30
 8015ac4:	af04      	add	r7, sp, #16
 8015ac6:	60f8      	str	r0, [r7, #12]
 8015ac8:	60b9      	str	r1, [r7, #8]
 8015aca:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d106      	bne.n	8015ae0 <tcp_output_segment+0x20>
 8015ad2:	4b64      	ldr	r3, [pc, #400]	@ (8015c64 <tcp_output_segment+0x1a4>)
 8015ad4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8015ad8:	4963      	ldr	r1, [pc, #396]	@ (8015c68 <tcp_output_segment+0x1a8>)
 8015ada:	4864      	ldr	r0, [pc, #400]	@ (8015c6c <tcp_output_segment+0x1ac>)
 8015adc:	f001 fe2a 	bl	8017734 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015ae0:	68bb      	ldr	r3, [r7, #8]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d106      	bne.n	8015af4 <tcp_output_segment+0x34>
 8015ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8015c64 <tcp_output_segment+0x1a4>)
 8015ae8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8015aec:	4960      	ldr	r1, [pc, #384]	@ (8015c70 <tcp_output_segment+0x1b0>)
 8015aee:	485f      	ldr	r0, [pc, #380]	@ (8015c6c <tcp_output_segment+0x1ac>)
 8015af0:	f001 fe20 	bl	8017734 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d106      	bne.n	8015b08 <tcp_output_segment+0x48>
 8015afa:	4b5a      	ldr	r3, [pc, #360]	@ (8015c64 <tcp_output_segment+0x1a4>)
 8015afc:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8015b00:	495c      	ldr	r1, [pc, #368]	@ (8015c74 <tcp_output_segment+0x1b4>)
 8015b02:	485a      	ldr	r0, [pc, #360]	@ (8015c6c <tcp_output_segment+0x1ac>)
 8015b04:	f001 fe16 	bl	8017734 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015b08:	68f8      	ldr	r0, [r7, #12]
 8015b0a:	f7ff ffb9 	bl	8015a80 <tcp_output_segment_busy>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d001      	beq.n	8015b18 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015b14:	2300      	movs	r3, #0
 8015b16:	e0a1      	b.n	8015c5c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015b18:	68bb      	ldr	r3, [r7, #8]
 8015b1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	68dc      	ldr	r4, [r3, #12]
 8015b20:	4610      	mov	r0, r2
 8015b22:	f7f5 f994 	bl	800ae4e <lwip_htonl>
 8015b26:	4603      	mov	r3, r0
 8015b28:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015b2a:	68bb      	ldr	r3, [r7, #8]
 8015b2c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	68dc      	ldr	r4, [r3, #12]
 8015b32:	4610      	mov	r0, r2
 8015b34:	f7f5 f976 	bl	800ae24 <lwip_htons>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015b3c:	68bb      	ldr	r3, [r7, #8]
 8015b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b40:	68ba      	ldr	r2, [r7, #8]
 8015b42:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015b44:	441a      	add	r2, r3
 8015b46:	68bb      	ldr	r3, [r7, #8]
 8015b48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	68db      	ldr	r3, [r3, #12]
 8015b4e:	3314      	adds	r3, #20
 8015b50:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	7a9b      	ldrb	r3, [r3, #10]
 8015b56:	f003 0301 	and.w	r3, r3, #1
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d015      	beq.n	8015b8a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015b5e:	68bb      	ldr	r3, [r7, #8]
 8015b60:	3304      	adds	r3, #4
 8015b62:	461a      	mov	r2, r3
 8015b64:	6879      	ldr	r1, [r7, #4]
 8015b66:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8015b6a:	f7fc fe91 	bl	8012890 <tcp_eff_send_mss_netif>
 8015b6e:	4603      	mov	r3, r0
 8015b70:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015b72:	8b7b      	ldrh	r3, [r7, #26]
 8015b74:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8015b78:	4618      	mov	r0, r3
 8015b7a:	f7f5 f968 	bl	800ae4e <lwip_htonl>
 8015b7e:	4602      	mov	r2, r0
 8015b80:	69fb      	ldr	r3, [r7, #28]
 8015b82:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015b84:	69fb      	ldr	r3, [r7, #28]
 8015b86:	3304      	adds	r3, #4
 8015b88:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015b8a:	68bb      	ldr	r3, [r7, #8]
 8015b8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	da02      	bge.n	8015b9a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015b94:	68bb      	ldr	r3, [r7, #8]
 8015b96:	2200      	movs	r2, #0
 8015b98:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8015b9a:	68bb      	ldr	r3, [r7, #8]
 8015b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d10c      	bne.n	8015bbc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015ba2:	4b35      	ldr	r3, [pc, #212]	@ (8015c78 <tcp_output_segment+0x1b8>)
 8015ba4:	681a      	ldr	r2, [r3, #0]
 8015ba6:	68bb      	ldr	r3, [r7, #8]
 8015ba8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	68db      	ldr	r3, [r3, #12]
 8015bae:	685b      	ldr	r3, [r3, #4]
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f7f5 f94c 	bl	800ae4e <lwip_htonl>
 8015bb6:	4602      	mov	r2, r0
 8015bb8:	68bb      	ldr	r3, [r7, #8]
 8015bba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	68da      	ldr	r2, [r3, #12]
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	685b      	ldr	r3, [r3, #4]
 8015bc4:	685b      	ldr	r3, [r3, #4]
 8015bc6:	1ad3      	subs	r3, r2, r3
 8015bc8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	685b      	ldr	r3, [r3, #4]
 8015bce:	8959      	ldrh	r1, [r3, #10]
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	685b      	ldr	r3, [r3, #4]
 8015bd4:	8b3a      	ldrh	r2, [r7, #24]
 8015bd6:	1a8a      	subs	r2, r1, r2
 8015bd8:	b292      	uxth	r2, r2
 8015bda:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	685b      	ldr	r3, [r3, #4]
 8015be0:	8919      	ldrh	r1, [r3, #8]
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	685b      	ldr	r3, [r3, #4]
 8015be6:	8b3a      	ldrh	r2, [r7, #24]
 8015be8:	1a8a      	subs	r2, r1, r2
 8015bea:	b292      	uxth	r2, r2
 8015bec:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	685b      	ldr	r3, [r3, #4]
 8015bf2:	68fa      	ldr	r2, [r7, #12]
 8015bf4:	68d2      	ldr	r2, [r2, #12]
 8015bf6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	68db      	ldr	r3, [r3, #12]
 8015bfc:	2200      	movs	r2, #0
 8015bfe:	741a      	strb	r2, [r3, #16]
 8015c00:	2200      	movs	r2, #0
 8015c02:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	68da      	ldr	r2, [r3, #12]
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	7a9b      	ldrb	r3, [r3, #10]
 8015c0c:	f003 0301 	and.w	r3, r3, #1
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d001      	beq.n	8015c18 <tcp_output_segment+0x158>
 8015c14:	2318      	movs	r3, #24
 8015c16:	e000      	b.n	8015c1a <tcp_output_segment+0x15a>
 8015c18:	2314      	movs	r3, #20
 8015c1a:	4413      	add	r3, r2
 8015c1c:	69fa      	ldr	r2, [r7, #28]
 8015c1e:	429a      	cmp	r2, r3
 8015c20:	d006      	beq.n	8015c30 <tcp_output_segment+0x170>
 8015c22:	4b10      	ldr	r3, [pc, #64]	@ (8015c64 <tcp_output_segment+0x1a4>)
 8015c24:	f240 621c 	movw	r2, #1564	@ 0x61c
 8015c28:	4914      	ldr	r1, [pc, #80]	@ (8015c7c <tcp_output_segment+0x1bc>)
 8015c2a:	4810      	ldr	r0, [pc, #64]	@ (8015c6c <tcp_output_segment+0x1ac>)
 8015c2c:	f001 fd82 	bl	8017734 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	6858      	ldr	r0, [r3, #4]
 8015c34:	68b9      	ldr	r1, [r7, #8]
 8015c36:	68bb      	ldr	r3, [r7, #8]
 8015c38:	1d1c      	adds	r4, r3, #4
 8015c3a:	68bb      	ldr	r3, [r7, #8]
 8015c3c:	7add      	ldrb	r5, [r3, #11]
 8015c3e:	68bb      	ldr	r3, [r7, #8]
 8015c40:	7a9b      	ldrb	r3, [r3, #10]
 8015c42:	687a      	ldr	r2, [r7, #4]
 8015c44:	9202      	str	r2, [sp, #8]
 8015c46:	2206      	movs	r2, #6
 8015c48:	9201      	str	r2, [sp, #4]
 8015c4a:	9300      	str	r3, [sp, #0]
 8015c4c:	462b      	mov	r3, r5
 8015c4e:	4622      	mov	r2, r4
 8015c50:	f7f8 fc2c 	bl	800e4ac <ip4_output_if>
 8015c54:	4603      	mov	r3, r0
 8015c56:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015c58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	3720      	adds	r7, #32
 8015c60:	46bd      	mov	sp, r7
 8015c62:	bdb0      	pop	{r4, r5, r7, pc}
 8015c64:	0801aa24 	.word	0x0801aa24
 8015c68:	0801b01c 	.word	0x0801b01c
 8015c6c:	0801aaac 	.word	0x0801aaac
 8015c70:	0801b03c 	.word	0x0801b03c
 8015c74:	0801b05c 	.word	0x0801b05c
 8015c78:	24007f00 	.word	0x24007f00
 8015c7c:	0801b080 	.word	0x0801b080

08015c80 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015c80:	b5b0      	push	{r4, r5, r7, lr}
 8015c82:	b084      	sub	sp, #16
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d106      	bne.n	8015c9c <tcp_rexmit_rto_prepare+0x1c>
 8015c8e:	4b31      	ldr	r3, [pc, #196]	@ (8015d54 <tcp_rexmit_rto_prepare+0xd4>)
 8015c90:	f240 6263 	movw	r2, #1635	@ 0x663
 8015c94:	4930      	ldr	r1, [pc, #192]	@ (8015d58 <tcp_rexmit_rto_prepare+0xd8>)
 8015c96:	4831      	ldr	r0, [pc, #196]	@ (8015d5c <tcp_rexmit_rto_prepare+0xdc>)
 8015c98:	f001 fd4c 	bl	8017734 <iprintf>

  if (pcb->unacked == NULL) {
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d102      	bne.n	8015caa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015ca4:	f06f 0305 	mvn.w	r3, #5
 8015ca8:	e050      	b.n	8015d4c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015cae:	60fb      	str	r3, [r7, #12]
 8015cb0:	e00b      	b.n	8015cca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015cb2:	68f8      	ldr	r0, [r7, #12]
 8015cb4:	f7ff fee4 	bl	8015a80 <tcp_output_segment_busy>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d002      	beq.n	8015cc4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015cbe:	f06f 0305 	mvn.w	r3, #5
 8015cc2:	e043      	b.n	8015d4c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	60fb      	str	r3, [r7, #12]
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d1ef      	bne.n	8015cb2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015cd2:	68f8      	ldr	r0, [r7, #12]
 8015cd4:	f7ff fed4 	bl	8015a80 <tcp_output_segment_busy>
 8015cd8:	4603      	mov	r3, r0
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d002      	beq.n	8015ce4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015cde:	f06f 0305 	mvn.w	r3, #5
 8015ce2:	e033      	b.n	8015d4c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	8b5b      	ldrh	r3, [r3, #26]
 8015cfe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8015d02:	b29a      	uxth	r2, r3
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	68db      	ldr	r3, [r3, #12]
 8015d0c:	685b      	ldr	r3, [r3, #4]
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f7f5 f89d 	bl	800ae4e <lwip_htonl>
 8015d14:	4604      	mov	r4, r0
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	891b      	ldrh	r3, [r3, #8]
 8015d1a:	461d      	mov	r5, r3
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	68db      	ldr	r3, [r3, #12]
 8015d20:	899b      	ldrh	r3, [r3, #12]
 8015d22:	b29b      	uxth	r3, r3
 8015d24:	4618      	mov	r0, r3
 8015d26:	f7f5 f87d 	bl	800ae24 <lwip_htons>
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	b2db      	uxtb	r3, r3
 8015d2e:	f003 0303 	and.w	r3, r3, #3
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d001      	beq.n	8015d3a <tcp_rexmit_rto_prepare+0xba>
 8015d36:	2301      	movs	r3, #1
 8015d38:	e000      	b.n	8015d3c <tcp_rexmit_rto_prepare+0xbc>
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	442b      	add	r3, r5
 8015d3e:	18e2      	adds	r2, r4, r3
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	2200      	movs	r2, #0
 8015d48:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8015d4a:	2300      	movs	r3, #0
}
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	3710      	adds	r7, #16
 8015d50:	46bd      	mov	sp, r7
 8015d52:	bdb0      	pop	{r4, r5, r7, pc}
 8015d54:	0801aa24 	.word	0x0801aa24
 8015d58:	0801b094 	.word	0x0801b094
 8015d5c:	0801aaac 	.word	0x0801aaac

08015d60 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b082      	sub	sp, #8
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d106      	bne.n	8015d7c <tcp_rexmit_rto_commit+0x1c>
 8015d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8015da4 <tcp_rexmit_rto_commit+0x44>)
 8015d70:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015d74:	490c      	ldr	r1, [pc, #48]	@ (8015da8 <tcp_rexmit_rto_commit+0x48>)
 8015d76:	480d      	ldr	r0, [pc, #52]	@ (8015dac <tcp_rexmit_rto_commit+0x4c>)
 8015d78:	f001 fcdc 	bl	8017734 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015d82:	2bff      	cmp	r3, #255	@ 0xff
 8015d84:	d007      	beq.n	8015d96 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015d8c:	3301      	adds	r3, #1
 8015d8e:	b2da      	uxtb	r2, r3
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015d96:	6878      	ldr	r0, [r7, #4]
 8015d98:	f7ff fc7e 	bl	8015698 <tcp_output>
}
 8015d9c:	bf00      	nop
 8015d9e:	3708      	adds	r7, #8
 8015da0:	46bd      	mov	sp, r7
 8015da2:	bd80      	pop	{r7, pc}
 8015da4:	0801aa24 	.word	0x0801aa24
 8015da8:	0801b0b8 	.word	0x0801b0b8
 8015dac:	0801aaac 	.word	0x0801aaac

08015db0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b082      	sub	sp, #8
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d106      	bne.n	8015dcc <tcp_rexmit_rto+0x1c>
 8015dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8015de8 <tcp_rexmit_rto+0x38>)
 8015dc0:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8015dc4:	4909      	ldr	r1, [pc, #36]	@ (8015dec <tcp_rexmit_rto+0x3c>)
 8015dc6:	480a      	ldr	r0, [pc, #40]	@ (8015df0 <tcp_rexmit_rto+0x40>)
 8015dc8:	f001 fcb4 	bl	8017734 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015dcc:	6878      	ldr	r0, [r7, #4]
 8015dce:	f7ff ff57 	bl	8015c80 <tcp_rexmit_rto_prepare>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d102      	bne.n	8015dde <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015dd8:	6878      	ldr	r0, [r7, #4]
 8015dda:	f7ff ffc1 	bl	8015d60 <tcp_rexmit_rto_commit>
  }
}
 8015dde:	bf00      	nop
 8015de0:	3708      	adds	r7, #8
 8015de2:	46bd      	mov	sp, r7
 8015de4:	bd80      	pop	{r7, pc}
 8015de6:	bf00      	nop
 8015de8:	0801aa24 	.word	0x0801aa24
 8015dec:	0801b0dc 	.word	0x0801b0dc
 8015df0:	0801aaac 	.word	0x0801aaac

08015df4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015df4:	b590      	push	{r4, r7, lr}
 8015df6:	b085      	sub	sp, #20
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d106      	bne.n	8015e10 <tcp_rexmit+0x1c>
 8015e02:	4b2f      	ldr	r3, [pc, #188]	@ (8015ec0 <tcp_rexmit+0xcc>)
 8015e04:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8015e08:	492e      	ldr	r1, [pc, #184]	@ (8015ec4 <tcp_rexmit+0xd0>)
 8015e0a:	482f      	ldr	r0, [pc, #188]	@ (8015ec8 <tcp_rexmit+0xd4>)
 8015e0c:	f001 fc92 	bl	8017734 <iprintf>

  if (pcb->unacked == NULL) {
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d102      	bne.n	8015e1e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015e18:	f06f 0305 	mvn.w	r3, #5
 8015e1c:	e04c      	b.n	8015eb8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015e22:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015e24:	68b8      	ldr	r0, [r7, #8]
 8015e26:	f7ff fe2b 	bl	8015a80 <tcp_output_segment_busy>
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d002      	beq.n	8015e36 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015e30:	f06f 0305 	mvn.w	r3, #5
 8015e34:	e040      	b.n	8015eb8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015e36:	68bb      	ldr	r3, [r7, #8]
 8015e38:	681a      	ldr	r2, [r3, #0]
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	336c      	adds	r3, #108	@ 0x6c
 8015e42:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015e44:	e002      	b.n	8015e4c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d011      	beq.n	8015e78 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	68db      	ldr	r3, [r3, #12]
 8015e5a:	685b      	ldr	r3, [r3, #4]
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f7f4 fff6 	bl	800ae4e <lwip_htonl>
 8015e62:	4604      	mov	r4, r0
 8015e64:	68bb      	ldr	r3, [r7, #8]
 8015e66:	68db      	ldr	r3, [r3, #12]
 8015e68:	685b      	ldr	r3, [r3, #4]
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	f7f4 ffef 	bl	800ae4e <lwip_htonl>
 8015e70:	4603      	mov	r3, r0
 8015e72:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	dbe6      	blt.n	8015e46 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	681a      	ldr	r2, [r3, #0]
 8015e7c:	68bb      	ldr	r3, [r7, #8]
 8015e7e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	68ba      	ldr	r2, [r7, #8]
 8015e84:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015e86:	68bb      	ldr	r3, [r7, #8]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d103      	bne.n	8015e96 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2200      	movs	r2, #0
 8015e92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015e9c:	2bff      	cmp	r3, #255	@ 0xff
 8015e9e:	d007      	beq.n	8015eb0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015ea6:	3301      	adds	r3, #1
 8015ea8:	b2da      	uxtb	r2, r3
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015eb6:	2300      	movs	r3, #0
}
 8015eb8:	4618      	mov	r0, r3
 8015eba:	3714      	adds	r7, #20
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	bd90      	pop	{r4, r7, pc}
 8015ec0:	0801aa24 	.word	0x0801aa24
 8015ec4:	0801b0f8 	.word	0x0801b0f8
 8015ec8:	0801aaac 	.word	0x0801aaac

08015ecc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b082      	sub	sp, #8
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d106      	bne.n	8015ee8 <tcp_rexmit_fast+0x1c>
 8015eda:	4b2a      	ldr	r3, [pc, #168]	@ (8015f84 <tcp_rexmit_fast+0xb8>)
 8015edc:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8015ee0:	4929      	ldr	r1, [pc, #164]	@ (8015f88 <tcp_rexmit_fast+0xbc>)
 8015ee2:	482a      	ldr	r0, [pc, #168]	@ (8015f8c <tcp_rexmit_fast+0xc0>)
 8015ee4:	f001 fc26 	bl	8017734 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d045      	beq.n	8015f7c <tcp_rexmit_fast+0xb0>
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	8b5b      	ldrh	r3, [r3, #26]
 8015ef4:	f003 0304 	and.w	r3, r3, #4
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d13f      	bne.n	8015f7c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015efc:	6878      	ldr	r0, [r7, #4]
 8015efe:	f7ff ff79 	bl	8015df4 <tcp_rexmit>
 8015f02:	4603      	mov	r3, r0
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d139      	bne.n	8015f7c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015f14:	4293      	cmp	r3, r2
 8015f16:	bf28      	it	cs
 8015f18:	4613      	movcs	r3, r2
 8015f1a:	b29b      	uxth	r3, r3
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	da00      	bge.n	8015f22 <tcp_rexmit_fast+0x56>
 8015f20:	3301      	adds	r3, #1
 8015f22:	105b      	asrs	r3, r3, #1
 8015f24:	b29a      	uxth	r2, r3
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015f32:	461a      	mov	r2, r3
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015f38:	005b      	lsls	r3, r3, #1
 8015f3a:	429a      	cmp	r2, r3
 8015f3c:	d206      	bcs.n	8015f4c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015f42:	005b      	lsls	r3, r3, #1
 8015f44:	b29a      	uxth	r2, r3
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015f56:	4619      	mov	r1, r3
 8015f58:	0049      	lsls	r1, r1, #1
 8015f5a:	440b      	add	r3, r1
 8015f5c:	b29b      	uxth	r3, r3
 8015f5e:	4413      	add	r3, r2
 8015f60:	b29a      	uxth	r2, r3
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	8b5b      	ldrh	r3, [r3, #26]
 8015f6c:	f043 0304 	orr.w	r3, r3, #4
 8015f70:	b29a      	uxth	r2, r3
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	2200      	movs	r2, #0
 8015f7a:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8015f7c:	bf00      	nop
 8015f7e:	3708      	adds	r7, #8
 8015f80:	46bd      	mov	sp, r7
 8015f82:	bd80      	pop	{r7, pc}
 8015f84:	0801aa24 	.word	0x0801aa24
 8015f88:	0801b110 	.word	0x0801b110
 8015f8c:	0801aaac 	.word	0x0801aaac

08015f90 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b086      	sub	sp, #24
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	60f8      	str	r0, [r7, #12]
 8015f98:	607b      	str	r3, [r7, #4]
 8015f9a:	460b      	mov	r3, r1
 8015f9c:	817b      	strh	r3, [r7, #10]
 8015f9e:	4613      	mov	r3, r2
 8015fa0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015fa2:	897a      	ldrh	r2, [r7, #10]
 8015fa4:	893b      	ldrh	r3, [r7, #8]
 8015fa6:	4413      	add	r3, r2
 8015fa8:	b29b      	uxth	r3, r3
 8015faa:	3314      	adds	r3, #20
 8015fac:	b29b      	uxth	r3, r3
 8015fae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015fb2:	4619      	mov	r1, r3
 8015fb4:	2022      	movs	r0, #34	@ 0x22
 8015fb6:	f7fa fb0f 	bl	80105d8 <pbuf_alloc>
 8015fba:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015fbc:	697b      	ldr	r3, [r7, #20]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d04d      	beq.n	801605e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015fc2:	897b      	ldrh	r3, [r7, #10]
 8015fc4:	3313      	adds	r3, #19
 8015fc6:	697a      	ldr	r2, [r7, #20]
 8015fc8:	8952      	ldrh	r2, [r2, #10]
 8015fca:	4293      	cmp	r3, r2
 8015fcc:	db06      	blt.n	8015fdc <tcp_output_alloc_header_common+0x4c>
 8015fce:	4b26      	ldr	r3, [pc, #152]	@ (8016068 <tcp_output_alloc_header_common+0xd8>)
 8015fd0:	f240 7223 	movw	r2, #1827	@ 0x723
 8015fd4:	4925      	ldr	r1, [pc, #148]	@ (801606c <tcp_output_alloc_header_common+0xdc>)
 8015fd6:	4826      	ldr	r0, [pc, #152]	@ (8016070 <tcp_output_alloc_header_common+0xe0>)
 8015fd8:	f001 fbac 	bl	8017734 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015fdc:	697b      	ldr	r3, [r7, #20]
 8015fde:	685b      	ldr	r3, [r3, #4]
 8015fe0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015fe2:	8c3b      	ldrh	r3, [r7, #32]
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	f7f4 ff1d 	bl	800ae24 <lwip_htons>
 8015fea:	4603      	mov	r3, r0
 8015fec:	461a      	mov	r2, r3
 8015fee:	693b      	ldr	r3, [r7, #16]
 8015ff0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015ff2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	f7f4 ff15 	bl	800ae24 <lwip_htons>
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	461a      	mov	r2, r3
 8015ffe:	693b      	ldr	r3, [r7, #16]
 8016000:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8016002:	693b      	ldr	r3, [r7, #16]
 8016004:	687a      	ldr	r2, [r7, #4]
 8016006:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8016008:	68f8      	ldr	r0, [r7, #12]
 801600a:	f7f4 ff20 	bl	800ae4e <lwip_htonl>
 801600e:	4602      	mov	r2, r0
 8016010:	693b      	ldr	r3, [r7, #16]
 8016012:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016014:	897b      	ldrh	r3, [r7, #10]
 8016016:	089b      	lsrs	r3, r3, #2
 8016018:	b29b      	uxth	r3, r3
 801601a:	3305      	adds	r3, #5
 801601c:	b29b      	uxth	r3, r3
 801601e:	031b      	lsls	r3, r3, #12
 8016020:	b29a      	uxth	r2, r3
 8016022:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016026:	b29b      	uxth	r3, r3
 8016028:	4313      	orrs	r3, r2
 801602a:	b29b      	uxth	r3, r3
 801602c:	4618      	mov	r0, r3
 801602e:	f7f4 fef9 	bl	800ae24 <lwip_htons>
 8016032:	4603      	mov	r3, r0
 8016034:	461a      	mov	r2, r3
 8016036:	693b      	ldr	r3, [r7, #16]
 8016038:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801603a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801603c:	4618      	mov	r0, r3
 801603e:	f7f4 fef1 	bl	800ae24 <lwip_htons>
 8016042:	4603      	mov	r3, r0
 8016044:	461a      	mov	r2, r3
 8016046:	693b      	ldr	r3, [r7, #16]
 8016048:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801604a:	693b      	ldr	r3, [r7, #16]
 801604c:	2200      	movs	r2, #0
 801604e:	741a      	strb	r2, [r3, #16]
 8016050:	2200      	movs	r2, #0
 8016052:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016054:	693b      	ldr	r3, [r7, #16]
 8016056:	2200      	movs	r2, #0
 8016058:	749a      	strb	r2, [r3, #18]
 801605a:	2200      	movs	r2, #0
 801605c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801605e:	697b      	ldr	r3, [r7, #20]
}
 8016060:	4618      	mov	r0, r3
 8016062:	3718      	adds	r7, #24
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}
 8016068:	0801aa24 	.word	0x0801aa24
 801606c:	0801b130 	.word	0x0801b130
 8016070:	0801aaac 	.word	0x0801aaac

08016074 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016074:	b5b0      	push	{r4, r5, r7, lr}
 8016076:	b08a      	sub	sp, #40	@ 0x28
 8016078:	af04      	add	r7, sp, #16
 801607a:	60f8      	str	r0, [r7, #12]
 801607c:	607b      	str	r3, [r7, #4]
 801607e:	460b      	mov	r3, r1
 8016080:	817b      	strh	r3, [r7, #10]
 8016082:	4613      	mov	r3, r2
 8016084:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d106      	bne.n	801609a <tcp_output_alloc_header+0x26>
 801608c:	4b15      	ldr	r3, [pc, #84]	@ (80160e4 <tcp_output_alloc_header+0x70>)
 801608e:	f240 7242 	movw	r2, #1858	@ 0x742
 8016092:	4915      	ldr	r1, [pc, #84]	@ (80160e8 <tcp_output_alloc_header+0x74>)
 8016094:	4815      	ldr	r0, [pc, #84]	@ (80160ec <tcp_output_alloc_header+0x78>)
 8016096:	f001 fb4d 	bl	8017734 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	8adb      	ldrh	r3, [r3, #22]
 80160a2:	68fa      	ldr	r2, [r7, #12]
 80160a4:	8b12      	ldrh	r2, [r2, #24]
 80160a6:	68f9      	ldr	r1, [r7, #12]
 80160a8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80160aa:	893d      	ldrh	r5, [r7, #8]
 80160ac:	897c      	ldrh	r4, [r7, #10]
 80160ae:	9103      	str	r1, [sp, #12]
 80160b0:	2110      	movs	r1, #16
 80160b2:	9102      	str	r1, [sp, #8]
 80160b4:	9201      	str	r2, [sp, #4]
 80160b6:	9300      	str	r3, [sp, #0]
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	462a      	mov	r2, r5
 80160bc:	4621      	mov	r1, r4
 80160be:	f7ff ff67 	bl	8015f90 <tcp_output_alloc_header_common>
 80160c2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80160c4:	697b      	ldr	r3, [r7, #20]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d006      	beq.n	80160d8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160ce:	68fa      	ldr	r2, [r7, #12]
 80160d0:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80160d2:	441a      	add	r2, r3
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80160d8:	697b      	ldr	r3, [r7, #20]
}
 80160da:	4618      	mov	r0, r3
 80160dc:	3718      	adds	r7, #24
 80160de:	46bd      	mov	sp, r7
 80160e0:	bdb0      	pop	{r4, r5, r7, pc}
 80160e2:	bf00      	nop
 80160e4:	0801aa24 	.word	0x0801aa24
 80160e8:	0801b160 	.word	0x0801b160
 80160ec:	0801aaac 	.word	0x0801aaac

080160f0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b088      	sub	sp, #32
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	60f8      	str	r0, [r7, #12]
 80160f8:	60b9      	str	r1, [r7, #8]
 80160fa:	4611      	mov	r1, r2
 80160fc:	461a      	mov	r2, r3
 80160fe:	460b      	mov	r3, r1
 8016100:	71fb      	strb	r3, [r7, #7]
 8016102:	4613      	mov	r3, r2
 8016104:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8016106:	2300      	movs	r3, #0
 8016108:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801610a:	68bb      	ldr	r3, [r7, #8]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d106      	bne.n	801611e <tcp_output_fill_options+0x2e>
 8016110:	4b12      	ldr	r3, [pc, #72]	@ (801615c <tcp_output_fill_options+0x6c>)
 8016112:	f240 7256 	movw	r2, #1878	@ 0x756
 8016116:	4912      	ldr	r1, [pc, #72]	@ (8016160 <tcp_output_fill_options+0x70>)
 8016118:	4812      	ldr	r0, [pc, #72]	@ (8016164 <tcp_output_fill_options+0x74>)
 801611a:	f001 fb0b 	bl	8017734 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801611e:	68bb      	ldr	r3, [r7, #8]
 8016120:	685b      	ldr	r3, [r3, #4]
 8016122:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016124:	69bb      	ldr	r3, [r7, #24]
 8016126:	3314      	adds	r3, #20
 8016128:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801612a:	8bfb      	ldrh	r3, [r7, #30]
 801612c:	009b      	lsls	r3, r3, #2
 801612e:	461a      	mov	r2, r3
 8016130:	79fb      	ldrb	r3, [r7, #7]
 8016132:	009b      	lsls	r3, r3, #2
 8016134:	f003 0304 	and.w	r3, r3, #4
 8016138:	4413      	add	r3, r2
 801613a:	3314      	adds	r3, #20
 801613c:	69ba      	ldr	r2, [r7, #24]
 801613e:	4413      	add	r3, r2
 8016140:	697a      	ldr	r2, [r7, #20]
 8016142:	429a      	cmp	r2, r3
 8016144:	d006      	beq.n	8016154 <tcp_output_fill_options+0x64>
 8016146:	4b05      	ldr	r3, [pc, #20]	@ (801615c <tcp_output_fill_options+0x6c>)
 8016148:	f240 7275 	movw	r2, #1909	@ 0x775
 801614c:	4906      	ldr	r1, [pc, #24]	@ (8016168 <tcp_output_fill_options+0x78>)
 801614e:	4805      	ldr	r0, [pc, #20]	@ (8016164 <tcp_output_fill_options+0x74>)
 8016150:	f001 faf0 	bl	8017734 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016154:	bf00      	nop
 8016156:	3720      	adds	r7, #32
 8016158:	46bd      	mov	sp, r7
 801615a:	bd80      	pop	{r7, pc}
 801615c:	0801aa24 	.word	0x0801aa24
 8016160:	0801b188 	.word	0x0801b188
 8016164:	0801aaac 	.word	0x0801aaac
 8016168:	0801b080 	.word	0x0801b080

0801616c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801616c:	b580      	push	{r7, lr}
 801616e:	b08a      	sub	sp, #40	@ 0x28
 8016170:	af04      	add	r7, sp, #16
 8016172:	60f8      	str	r0, [r7, #12]
 8016174:	60b9      	str	r1, [r7, #8]
 8016176:	607a      	str	r2, [r7, #4]
 8016178:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801617a:	68bb      	ldr	r3, [r7, #8]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d106      	bne.n	801618e <tcp_output_control_segment+0x22>
 8016180:	4b1c      	ldr	r3, [pc, #112]	@ (80161f4 <tcp_output_control_segment+0x88>)
 8016182:	f240 7287 	movw	r2, #1927	@ 0x787
 8016186:	491c      	ldr	r1, [pc, #112]	@ (80161f8 <tcp_output_control_segment+0x8c>)
 8016188:	481c      	ldr	r0, [pc, #112]	@ (80161fc <tcp_output_control_segment+0x90>)
 801618a:	f001 fad3 	bl	8017734 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801618e:	683a      	ldr	r2, [r7, #0]
 8016190:	6879      	ldr	r1, [r7, #4]
 8016192:	68f8      	ldr	r0, [r7, #12]
 8016194:	f7fe ff42 	bl	801501c <tcp_route>
 8016198:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801619a:	693b      	ldr	r3, [r7, #16]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d102      	bne.n	80161a6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80161a0:	23fc      	movs	r3, #252	@ 0xfc
 80161a2:	75fb      	strb	r3, [r7, #23]
 80161a4:	e01c      	b.n	80161e0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d006      	beq.n	80161ba <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	7adb      	ldrb	r3, [r3, #11]
 80161b0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	7a9b      	ldrb	r3, [r3, #10]
 80161b6:	757b      	strb	r3, [r7, #21]
 80161b8:	e003      	b.n	80161c2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80161ba:	23ff      	movs	r3, #255	@ 0xff
 80161bc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80161be:	2300      	movs	r3, #0
 80161c0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80161c2:	7dba      	ldrb	r2, [r7, #22]
 80161c4:	693b      	ldr	r3, [r7, #16]
 80161c6:	9302      	str	r3, [sp, #8]
 80161c8:	2306      	movs	r3, #6
 80161ca:	9301      	str	r3, [sp, #4]
 80161cc:	7d7b      	ldrb	r3, [r7, #21]
 80161ce:	9300      	str	r3, [sp, #0]
 80161d0:	4613      	mov	r3, r2
 80161d2:	683a      	ldr	r2, [r7, #0]
 80161d4:	6879      	ldr	r1, [r7, #4]
 80161d6:	68b8      	ldr	r0, [r7, #8]
 80161d8:	f7f8 f968 	bl	800e4ac <ip4_output_if>
 80161dc:	4603      	mov	r3, r0
 80161de:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80161e0:	68b8      	ldr	r0, [r7, #8]
 80161e2:	f7fa fcdb 	bl	8010b9c <pbuf_free>
  return err;
 80161e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80161ea:	4618      	mov	r0, r3
 80161ec:	3718      	adds	r7, #24
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}
 80161f2:	bf00      	nop
 80161f4:	0801aa24 	.word	0x0801aa24
 80161f8:	0801b1b0 	.word	0x0801b1b0
 80161fc:	0801aaac 	.word	0x0801aaac

08016200 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016200:	b590      	push	{r4, r7, lr}
 8016202:	b08b      	sub	sp, #44	@ 0x2c
 8016204:	af04      	add	r7, sp, #16
 8016206:	60f8      	str	r0, [r7, #12]
 8016208:	60b9      	str	r1, [r7, #8]
 801620a:	607a      	str	r2, [r7, #4]
 801620c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801620e:	683b      	ldr	r3, [r7, #0]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d106      	bne.n	8016222 <tcp_rst+0x22>
 8016214:	4b1f      	ldr	r3, [pc, #124]	@ (8016294 <tcp_rst+0x94>)
 8016216:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801621a:	491f      	ldr	r1, [pc, #124]	@ (8016298 <tcp_rst+0x98>)
 801621c:	481f      	ldr	r0, [pc, #124]	@ (801629c <tcp_rst+0x9c>)
 801621e:	f001 fa89 	bl	8017734 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8016222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016224:	2b00      	cmp	r3, #0
 8016226:	d106      	bne.n	8016236 <tcp_rst+0x36>
 8016228:	4b1a      	ldr	r3, [pc, #104]	@ (8016294 <tcp_rst+0x94>)
 801622a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801622e:	491c      	ldr	r1, [pc, #112]	@ (80162a0 <tcp_rst+0xa0>)
 8016230:	481a      	ldr	r0, [pc, #104]	@ (801629c <tcp_rst+0x9c>)
 8016232:	f001 fa7f 	bl	8017734 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016236:	2300      	movs	r3, #0
 8016238:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801623a:	f246 0308 	movw	r3, #24584	@ 0x6008
 801623e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016240:	7dfb      	ldrb	r3, [r7, #23]
 8016242:	b29c      	uxth	r4, r3
 8016244:	68b8      	ldr	r0, [r7, #8]
 8016246:	f7f4 fe02 	bl	800ae4e <lwip_htonl>
 801624a:	4602      	mov	r2, r0
 801624c:	8abb      	ldrh	r3, [r7, #20]
 801624e:	9303      	str	r3, [sp, #12]
 8016250:	2314      	movs	r3, #20
 8016252:	9302      	str	r3, [sp, #8]
 8016254:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8016256:	9301      	str	r3, [sp, #4]
 8016258:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801625a:	9300      	str	r3, [sp, #0]
 801625c:	4613      	mov	r3, r2
 801625e:	2200      	movs	r2, #0
 8016260:	4621      	mov	r1, r4
 8016262:	6878      	ldr	r0, [r7, #4]
 8016264:	f7ff fe94 	bl	8015f90 <tcp_output_alloc_header_common>
 8016268:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801626a:	693b      	ldr	r3, [r7, #16]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d00c      	beq.n	801628a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016270:	7dfb      	ldrb	r3, [r7, #23]
 8016272:	2200      	movs	r2, #0
 8016274:	6939      	ldr	r1, [r7, #16]
 8016276:	68f8      	ldr	r0, [r7, #12]
 8016278:	f7ff ff3a 	bl	80160f0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801627c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801627e:	683a      	ldr	r2, [r7, #0]
 8016280:	6939      	ldr	r1, [r7, #16]
 8016282:	68f8      	ldr	r0, [r7, #12]
 8016284:	f7ff ff72 	bl	801616c <tcp_output_control_segment>
 8016288:	e000      	b.n	801628c <tcp_rst+0x8c>
    return;
 801628a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801628c:	371c      	adds	r7, #28
 801628e:	46bd      	mov	sp, r7
 8016290:	bd90      	pop	{r4, r7, pc}
 8016292:	bf00      	nop
 8016294:	0801aa24 	.word	0x0801aa24
 8016298:	0801b1dc 	.word	0x0801b1dc
 801629c:	0801aaac 	.word	0x0801aaac
 80162a0:	0801b1f8 	.word	0x0801b1f8

080162a4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80162a4:	b590      	push	{r4, r7, lr}
 80162a6:	b087      	sub	sp, #28
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80162ac:	2300      	movs	r3, #0
 80162ae:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80162b0:	2300      	movs	r3, #0
 80162b2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d106      	bne.n	80162c8 <tcp_send_empty_ack+0x24>
 80162ba:	4b28      	ldr	r3, [pc, #160]	@ (801635c <tcp_send_empty_ack+0xb8>)
 80162bc:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80162c0:	4927      	ldr	r1, [pc, #156]	@ (8016360 <tcp_send_empty_ack+0xbc>)
 80162c2:	4828      	ldr	r0, [pc, #160]	@ (8016364 <tcp_send_empty_ack+0xc0>)
 80162c4:	f001 fa36 	bl	8017734 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80162c8:	7dfb      	ldrb	r3, [r7, #23]
 80162ca:	009b      	lsls	r3, r3, #2
 80162cc:	b2db      	uxtb	r3, r3
 80162ce:	f003 0304 	and.w	r3, r3, #4
 80162d2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80162d4:	7d7b      	ldrb	r3, [r7, #21]
 80162d6:	b29c      	uxth	r4, r3
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80162dc:	4618      	mov	r0, r3
 80162de:	f7f4 fdb6 	bl	800ae4e <lwip_htonl>
 80162e2:	4603      	mov	r3, r0
 80162e4:	2200      	movs	r2, #0
 80162e6:	4621      	mov	r1, r4
 80162e8:	6878      	ldr	r0, [r7, #4]
 80162ea:	f7ff fec3 	bl	8016074 <tcp_output_alloc_header>
 80162ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80162f0:	693b      	ldr	r3, [r7, #16]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d109      	bne.n	801630a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	8b5b      	ldrh	r3, [r3, #26]
 80162fa:	f043 0303 	orr.w	r3, r3, #3
 80162fe:	b29a      	uxth	r2, r3
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016304:	f06f 0301 	mvn.w	r3, #1
 8016308:	e023      	b.n	8016352 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801630a:	7dbb      	ldrb	r3, [r7, #22]
 801630c:	7dfa      	ldrb	r2, [r7, #23]
 801630e:	6939      	ldr	r1, [r7, #16]
 8016310:	6878      	ldr	r0, [r7, #4]
 8016312:	f7ff feed 	bl	80160f0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016316:	687a      	ldr	r2, [r7, #4]
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	3304      	adds	r3, #4
 801631c:	6939      	ldr	r1, [r7, #16]
 801631e:	6878      	ldr	r0, [r7, #4]
 8016320:	f7ff ff24 	bl	801616c <tcp_output_control_segment>
 8016324:	4603      	mov	r3, r0
 8016326:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d007      	beq.n	8016340 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	8b5b      	ldrh	r3, [r3, #26]
 8016334:	f043 0303 	orr.w	r3, r3, #3
 8016338:	b29a      	uxth	r2, r3
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	835a      	strh	r2, [r3, #26]
 801633e:	e006      	b.n	801634e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	8b5b      	ldrh	r3, [r3, #26]
 8016344:	f023 0303 	bic.w	r3, r3, #3
 8016348:	b29a      	uxth	r2, r3
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801634e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016352:	4618      	mov	r0, r3
 8016354:	371c      	adds	r7, #28
 8016356:	46bd      	mov	sp, r7
 8016358:	bd90      	pop	{r4, r7, pc}
 801635a:	bf00      	nop
 801635c:	0801aa24 	.word	0x0801aa24
 8016360:	0801b214 	.word	0x0801b214
 8016364:	0801aaac 	.word	0x0801aaac

08016368 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016368:	b590      	push	{r4, r7, lr}
 801636a:	b087      	sub	sp, #28
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016370:	2300      	movs	r3, #0
 8016372:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d106      	bne.n	8016388 <tcp_keepalive+0x20>
 801637a:	4b18      	ldr	r3, [pc, #96]	@ (80163dc <tcp_keepalive+0x74>)
 801637c:	f640 0224 	movw	r2, #2084	@ 0x824
 8016380:	4917      	ldr	r1, [pc, #92]	@ (80163e0 <tcp_keepalive+0x78>)
 8016382:	4818      	ldr	r0, [pc, #96]	@ (80163e4 <tcp_keepalive+0x7c>)
 8016384:	f001 f9d6 	bl	8017734 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016388:	7dfb      	ldrb	r3, [r7, #23]
 801638a:	b29c      	uxth	r4, r3
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016390:	3b01      	subs	r3, #1
 8016392:	4618      	mov	r0, r3
 8016394:	f7f4 fd5b 	bl	800ae4e <lwip_htonl>
 8016398:	4603      	mov	r3, r0
 801639a:	2200      	movs	r2, #0
 801639c:	4621      	mov	r1, r4
 801639e:	6878      	ldr	r0, [r7, #4]
 80163a0:	f7ff fe68 	bl	8016074 <tcp_output_alloc_header>
 80163a4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80163a6:	693b      	ldr	r3, [r7, #16]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d102      	bne.n	80163b2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80163ac:	f04f 33ff 	mov.w	r3, #4294967295
 80163b0:	e010      	b.n	80163d4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80163b2:	7dfb      	ldrb	r3, [r7, #23]
 80163b4:	2200      	movs	r2, #0
 80163b6:	6939      	ldr	r1, [r7, #16]
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f7ff fe99 	bl	80160f0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80163be:	687a      	ldr	r2, [r7, #4]
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	3304      	adds	r3, #4
 80163c4:	6939      	ldr	r1, [r7, #16]
 80163c6:	6878      	ldr	r0, [r7, #4]
 80163c8:	f7ff fed0 	bl	801616c <tcp_output_control_segment>
 80163cc:	4603      	mov	r3, r0
 80163ce:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80163d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80163d4:	4618      	mov	r0, r3
 80163d6:	371c      	adds	r7, #28
 80163d8:	46bd      	mov	sp, r7
 80163da:	bd90      	pop	{r4, r7, pc}
 80163dc:	0801aa24 	.word	0x0801aa24
 80163e0:	0801b234 	.word	0x0801b234
 80163e4:	0801aaac 	.word	0x0801aaac

080163e8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80163e8:	b590      	push	{r4, r7, lr}
 80163ea:	b08b      	sub	sp, #44	@ 0x2c
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80163f0:	2300      	movs	r3, #0
 80163f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d106      	bne.n	801640a <tcp_zero_window_probe+0x22>
 80163fc:	4b4c      	ldr	r3, [pc, #304]	@ (8016530 <tcp_zero_window_probe+0x148>)
 80163fe:	f640 024f 	movw	r2, #2127	@ 0x84f
 8016402:	494c      	ldr	r1, [pc, #304]	@ (8016534 <tcp_zero_window_probe+0x14c>)
 8016404:	484c      	ldr	r0, [pc, #304]	@ (8016538 <tcp_zero_window_probe+0x150>)
 8016406:	f001 f995 	bl	8017734 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801640e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016410:	6a3b      	ldr	r3, [r7, #32]
 8016412:	2b00      	cmp	r3, #0
 8016414:	d101      	bne.n	801641a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8016416:	2300      	movs	r3, #0
 8016418:	e086      	b.n	8016528 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8016420:	2bff      	cmp	r3, #255	@ 0xff
 8016422:	d007      	beq.n	8016434 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801642a:	3301      	adds	r3, #1
 801642c:	b2da      	uxtb	r2, r3
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016434:	6a3b      	ldr	r3, [r7, #32]
 8016436:	68db      	ldr	r3, [r3, #12]
 8016438:	899b      	ldrh	r3, [r3, #12]
 801643a:	b29b      	uxth	r3, r3
 801643c:	4618      	mov	r0, r3
 801643e:	f7f4 fcf1 	bl	800ae24 <lwip_htons>
 8016442:	4603      	mov	r3, r0
 8016444:	b2db      	uxtb	r3, r3
 8016446:	f003 0301 	and.w	r3, r3, #1
 801644a:	2b00      	cmp	r3, #0
 801644c:	d005      	beq.n	801645a <tcp_zero_window_probe+0x72>
 801644e:	6a3b      	ldr	r3, [r7, #32]
 8016450:	891b      	ldrh	r3, [r3, #8]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d101      	bne.n	801645a <tcp_zero_window_probe+0x72>
 8016456:	2301      	movs	r3, #1
 8016458:	e000      	b.n	801645c <tcp_zero_window_probe+0x74>
 801645a:	2300      	movs	r3, #0
 801645c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801645e:	7ffb      	ldrb	r3, [r7, #31]
 8016460:	2b00      	cmp	r3, #0
 8016462:	bf0c      	ite	eq
 8016464:	2301      	moveq	r3, #1
 8016466:	2300      	movne	r3, #0
 8016468:	b2db      	uxtb	r3, r3
 801646a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801646c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016470:	b299      	uxth	r1, r3
 8016472:	6a3b      	ldr	r3, [r7, #32]
 8016474:	68db      	ldr	r3, [r3, #12]
 8016476:	685b      	ldr	r3, [r3, #4]
 8016478:	8bba      	ldrh	r2, [r7, #28]
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	f7ff fdfa 	bl	8016074 <tcp_output_alloc_header>
 8016480:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016482:	69bb      	ldr	r3, [r7, #24]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d102      	bne.n	801648e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016488:	f04f 33ff 	mov.w	r3, #4294967295
 801648c:	e04c      	b.n	8016528 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801648e:	69bb      	ldr	r3, [r7, #24]
 8016490:	685b      	ldr	r3, [r3, #4]
 8016492:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016494:	7ffb      	ldrb	r3, [r7, #31]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d011      	beq.n	80164be <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801649a:	697b      	ldr	r3, [r7, #20]
 801649c:	899b      	ldrh	r3, [r3, #12]
 801649e:	b29b      	uxth	r3, r3
 80164a0:	b21b      	sxth	r3, r3
 80164a2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80164a6:	b21c      	sxth	r4, r3
 80164a8:	2011      	movs	r0, #17
 80164aa:	f7f4 fcbb 	bl	800ae24 <lwip_htons>
 80164ae:	4603      	mov	r3, r0
 80164b0:	b21b      	sxth	r3, r3
 80164b2:	4323      	orrs	r3, r4
 80164b4:	b21b      	sxth	r3, r3
 80164b6:	b29a      	uxth	r2, r3
 80164b8:	697b      	ldr	r3, [r7, #20]
 80164ba:	819a      	strh	r2, [r3, #12]
 80164bc:	e010      	b.n	80164e0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80164be:	69bb      	ldr	r3, [r7, #24]
 80164c0:	685b      	ldr	r3, [r3, #4]
 80164c2:	3314      	adds	r3, #20
 80164c4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80164c6:	6a3b      	ldr	r3, [r7, #32]
 80164c8:	6858      	ldr	r0, [r3, #4]
 80164ca:	6a3b      	ldr	r3, [r7, #32]
 80164cc:	685b      	ldr	r3, [r3, #4]
 80164ce:	891a      	ldrh	r2, [r3, #8]
 80164d0:	6a3b      	ldr	r3, [r7, #32]
 80164d2:	891b      	ldrh	r3, [r3, #8]
 80164d4:	1ad3      	subs	r3, r2, r3
 80164d6:	b29b      	uxth	r3, r3
 80164d8:	2201      	movs	r2, #1
 80164da:	6939      	ldr	r1, [r7, #16]
 80164dc:	f7fa fd64 	bl	8010fa8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80164e0:	6a3b      	ldr	r3, [r7, #32]
 80164e2:	68db      	ldr	r3, [r3, #12]
 80164e4:	685b      	ldr	r3, [r3, #4]
 80164e6:	4618      	mov	r0, r3
 80164e8:	f7f4 fcb1 	bl	800ae4e <lwip_htonl>
 80164ec:	4603      	mov	r3, r0
 80164ee:	3301      	adds	r3, #1
 80164f0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	1ad3      	subs	r3, r2, r3
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	da02      	bge.n	8016504 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	68fa      	ldr	r2, [r7, #12]
 8016502:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016508:	2200      	movs	r2, #0
 801650a:	69b9      	ldr	r1, [r7, #24]
 801650c:	6878      	ldr	r0, [r7, #4]
 801650e:	f7ff fdef 	bl	80160f0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016512:	687a      	ldr	r2, [r7, #4]
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	3304      	adds	r3, #4
 8016518:	69b9      	ldr	r1, [r7, #24]
 801651a:	6878      	ldr	r0, [r7, #4]
 801651c:	f7ff fe26 	bl	801616c <tcp_output_control_segment>
 8016520:	4603      	mov	r3, r0
 8016522:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016524:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016528:	4618      	mov	r0, r3
 801652a:	372c      	adds	r7, #44	@ 0x2c
 801652c:	46bd      	mov	sp, r7
 801652e:	bd90      	pop	{r4, r7, pc}
 8016530:	0801aa24 	.word	0x0801aa24
 8016534:	0801b250 	.word	0x0801b250
 8016538:	0801aaac 	.word	0x0801aaac

0801653c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b084      	sub	sp, #16
 8016540:	af00      	add	r7, sp, #0
 8016542:	6078      	str	r0, [r7, #4]
 8016544:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8016546:	f000 fb01 	bl	8016b4c <sys_timeouts_sleeptime>
 801654a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016552:	d10b      	bne.n	801656c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8016554:	4813      	ldr	r0, [pc, #76]	@ (80165a4 <tcpip_timeouts_mbox_fetch+0x68>)
 8016556:	f7fa fe72 	bl	801123e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801655a:	2200      	movs	r2, #0
 801655c:	6839      	ldr	r1, [r7, #0]
 801655e:	6878      	ldr	r0, [r7, #4]
 8016560:	f7fa fdfa 	bl	8011158 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8016564:	480f      	ldr	r0, [pc, #60]	@ (80165a4 <tcpip_timeouts_mbox_fetch+0x68>)
 8016566:	f7fa fe5b 	bl	8011220 <sys_mutex_lock>
    return;
 801656a:	e018      	b.n	801659e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d102      	bne.n	8016578 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8016572:	f000 fab1 	bl	8016ad8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016576:	e7e6      	b.n	8016546 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8016578:	480a      	ldr	r0, [pc, #40]	@ (80165a4 <tcpip_timeouts_mbox_fetch+0x68>)
 801657a:	f7fa fe60 	bl	801123e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801657e:	68fa      	ldr	r2, [r7, #12]
 8016580:	6839      	ldr	r1, [r7, #0]
 8016582:	6878      	ldr	r0, [r7, #4]
 8016584:	f7fa fde8 	bl	8011158 <sys_arch_mbox_fetch>
 8016588:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801658a:	4806      	ldr	r0, [pc, #24]	@ (80165a4 <tcpip_timeouts_mbox_fetch+0x68>)
 801658c:	f7fa fe48 	bl	8011220 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8016590:	68bb      	ldr	r3, [r7, #8]
 8016592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016596:	d102      	bne.n	801659e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8016598:	f000 fa9e 	bl	8016ad8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801659c:	e7d3      	b.n	8016546 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801659e:	3710      	adds	r7, #16
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd80      	pop	{r7, pc}
 80165a4:	24007f5c 	.word	0x24007f5c

080165a8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b084      	sub	sp, #16
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80165b0:	4810      	ldr	r0, [pc, #64]	@ (80165f4 <tcpip_thread+0x4c>)
 80165b2:	f7fa fe35 	bl	8011220 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80165b6:	4b10      	ldr	r3, [pc, #64]	@ (80165f8 <tcpip_thread+0x50>)
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d005      	beq.n	80165ca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80165be:	4b0e      	ldr	r3, [pc, #56]	@ (80165f8 <tcpip_thread+0x50>)
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	4a0e      	ldr	r2, [pc, #56]	@ (80165fc <tcpip_thread+0x54>)
 80165c4:	6812      	ldr	r2, [r2, #0]
 80165c6:	4610      	mov	r0, r2
 80165c8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80165ca:	f107 030c 	add.w	r3, r7, #12
 80165ce:	4619      	mov	r1, r3
 80165d0:	480b      	ldr	r0, [pc, #44]	@ (8016600 <tcpip_thread+0x58>)
 80165d2:	f7ff ffb3 	bl	801653c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d106      	bne.n	80165ea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80165dc:	4b09      	ldr	r3, [pc, #36]	@ (8016604 <tcpip_thread+0x5c>)
 80165de:	2291      	movs	r2, #145	@ 0x91
 80165e0:	4909      	ldr	r1, [pc, #36]	@ (8016608 <tcpip_thread+0x60>)
 80165e2:	480a      	ldr	r0, [pc, #40]	@ (801660c <tcpip_thread+0x64>)
 80165e4:	f001 f8a6 	bl	8017734 <iprintf>
      continue;
 80165e8:	e003      	b.n	80165f2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	4618      	mov	r0, r3
 80165ee:	f000 f80f 	bl	8016610 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80165f2:	e7ea      	b.n	80165ca <tcpip_thread+0x22>
 80165f4:	24007f5c 	.word	0x24007f5c
 80165f8:	24007f50 	.word	0x24007f50
 80165fc:	24007f54 	.word	0x24007f54
 8016600:	24007f58 	.word	0x24007f58
 8016604:	0801b274 	.word	0x0801b274
 8016608:	0801b2d8 	.word	0x0801b2d8
 801660c:	0801b2f8 	.word	0x0801b2f8

08016610 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b082      	sub	sp, #8
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	781b      	ldrb	r3, [r3, #0]
 801661c:	2b02      	cmp	r3, #2
 801661e:	d026      	beq.n	801666e <tcpip_thread_handle_msg+0x5e>
 8016620:	2b02      	cmp	r3, #2
 8016622:	dc2b      	bgt.n	801667c <tcpip_thread_handle_msg+0x6c>
 8016624:	2b00      	cmp	r3, #0
 8016626:	d002      	beq.n	801662e <tcpip_thread_handle_msg+0x1e>
 8016628:	2b01      	cmp	r3, #1
 801662a:	d015      	beq.n	8016658 <tcpip_thread_handle_msg+0x48>
 801662c:	e026      	b.n	801667c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	68db      	ldr	r3, [r3, #12]
 8016632:	687a      	ldr	r2, [r7, #4]
 8016634:	6850      	ldr	r0, [r2, #4]
 8016636:	687a      	ldr	r2, [r7, #4]
 8016638:	6892      	ldr	r2, [r2, #8]
 801663a:	4611      	mov	r1, r2
 801663c:	4798      	blx	r3
 801663e:	4603      	mov	r3, r0
 8016640:	2b00      	cmp	r3, #0
 8016642:	d004      	beq.n	801664e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	685b      	ldr	r3, [r3, #4]
 8016648:	4618      	mov	r0, r3
 801664a:	f7fa faa7 	bl	8010b9c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801664e:	6879      	ldr	r1, [r7, #4]
 8016650:	2009      	movs	r0, #9
 8016652:	f7f9 fbf5 	bl	800fe40 <memp_free>
      break;
 8016656:	e018      	b.n	801668a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	685b      	ldr	r3, [r3, #4]
 801665c:	687a      	ldr	r2, [r7, #4]
 801665e:	6892      	ldr	r2, [r2, #8]
 8016660:	4610      	mov	r0, r2
 8016662:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8016664:	6879      	ldr	r1, [r7, #4]
 8016666:	2008      	movs	r0, #8
 8016668:	f7f9 fbea 	bl	800fe40 <memp_free>
      break;
 801666c:	e00d      	b.n	801668a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	685b      	ldr	r3, [r3, #4]
 8016672:	687a      	ldr	r2, [r7, #4]
 8016674:	6892      	ldr	r2, [r2, #8]
 8016676:	4610      	mov	r0, r2
 8016678:	4798      	blx	r3
      break;
 801667a:	e006      	b.n	801668a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801667c:	4b05      	ldr	r3, [pc, #20]	@ (8016694 <tcpip_thread_handle_msg+0x84>)
 801667e:	22cf      	movs	r2, #207	@ 0xcf
 8016680:	4905      	ldr	r1, [pc, #20]	@ (8016698 <tcpip_thread_handle_msg+0x88>)
 8016682:	4806      	ldr	r0, [pc, #24]	@ (801669c <tcpip_thread_handle_msg+0x8c>)
 8016684:	f001 f856 	bl	8017734 <iprintf>
      break;
 8016688:	bf00      	nop
  }
}
 801668a:	bf00      	nop
 801668c:	3708      	adds	r7, #8
 801668e:	46bd      	mov	sp, r7
 8016690:	bd80      	pop	{r7, pc}
 8016692:	bf00      	nop
 8016694:	0801b274 	.word	0x0801b274
 8016698:	0801b2d8 	.word	0x0801b2d8
 801669c:	0801b2f8 	.word	0x0801b2f8

080166a0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80166a0:	b580      	push	{r7, lr}
 80166a2:	b086      	sub	sp, #24
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	60f8      	str	r0, [r7, #12]
 80166a8:	60b9      	str	r1, [r7, #8]
 80166aa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80166ac:	481a      	ldr	r0, [pc, #104]	@ (8016718 <tcpip_inpkt+0x78>)
 80166ae:	f7fa fd84 	bl	80111ba <sys_mbox_valid>
 80166b2:	4603      	mov	r3, r0
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d105      	bne.n	80166c4 <tcpip_inpkt+0x24>
 80166b8:	4b18      	ldr	r3, [pc, #96]	@ (801671c <tcpip_inpkt+0x7c>)
 80166ba:	22fc      	movs	r2, #252	@ 0xfc
 80166bc:	4918      	ldr	r1, [pc, #96]	@ (8016720 <tcpip_inpkt+0x80>)
 80166be:	4819      	ldr	r0, [pc, #100]	@ (8016724 <tcpip_inpkt+0x84>)
 80166c0:	f001 f838 	bl	8017734 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80166c4:	2009      	movs	r0, #9
 80166c6:	f7f9 fb45 	bl	800fd54 <memp_malloc>
 80166ca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80166cc:	697b      	ldr	r3, [r7, #20]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d102      	bne.n	80166d8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80166d2:	f04f 33ff 	mov.w	r3, #4294967295
 80166d6:	e01a      	b.n	801670e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80166d8:	697b      	ldr	r3, [r7, #20]
 80166da:	2200      	movs	r2, #0
 80166dc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80166de:	697b      	ldr	r3, [r7, #20]
 80166e0:	68fa      	ldr	r2, [r7, #12]
 80166e2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80166e4:	697b      	ldr	r3, [r7, #20]
 80166e6:	68ba      	ldr	r2, [r7, #8]
 80166e8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80166ea:	697b      	ldr	r3, [r7, #20]
 80166ec:	687a      	ldr	r2, [r7, #4]
 80166ee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80166f0:	6979      	ldr	r1, [r7, #20]
 80166f2:	4809      	ldr	r0, [pc, #36]	@ (8016718 <tcpip_inpkt+0x78>)
 80166f4:	f7fa fd16 	bl	8011124 <sys_mbox_trypost>
 80166f8:	4603      	mov	r3, r0
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d006      	beq.n	801670c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80166fe:	6979      	ldr	r1, [r7, #20]
 8016700:	2009      	movs	r0, #9
 8016702:	f7f9 fb9d 	bl	800fe40 <memp_free>
    return ERR_MEM;
 8016706:	f04f 33ff 	mov.w	r3, #4294967295
 801670a:	e000      	b.n	801670e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801670c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801670e:	4618      	mov	r0, r3
 8016710:	3718      	adds	r7, #24
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}
 8016716:	bf00      	nop
 8016718:	24007f58 	.word	0x24007f58
 801671c:	0801b274 	.word	0x0801b274
 8016720:	0801b320 	.word	0x0801b320
 8016724:	0801b2f8 	.word	0x0801b2f8

08016728 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b082      	sub	sp, #8
 801672c:	af00      	add	r7, sp, #0
 801672e:	6078      	str	r0, [r7, #4]
 8016730:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016738:	f003 0318 	and.w	r3, r3, #24
 801673c:	2b00      	cmp	r3, #0
 801673e:	d006      	beq.n	801674e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8016740:	4a08      	ldr	r2, [pc, #32]	@ (8016764 <tcpip_input+0x3c>)
 8016742:	6839      	ldr	r1, [r7, #0]
 8016744:	6878      	ldr	r0, [r7, #4]
 8016746:	f7ff ffab 	bl	80166a0 <tcpip_inpkt>
 801674a:	4603      	mov	r3, r0
 801674c:	e005      	b.n	801675a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801674e:	4a06      	ldr	r2, [pc, #24]	@ (8016768 <tcpip_input+0x40>)
 8016750:	6839      	ldr	r1, [r7, #0]
 8016752:	6878      	ldr	r0, [r7, #4]
 8016754:	f7ff ffa4 	bl	80166a0 <tcpip_inpkt>
 8016758:	4603      	mov	r3, r0
}
 801675a:	4618      	mov	r0, r3
 801675c:	3708      	adds	r7, #8
 801675e:	46bd      	mov	sp, r7
 8016760:	bd80      	pop	{r7, pc}
 8016762:	bf00      	nop
 8016764:	0800da3d 	.word	0x0800da3d
 8016768:	0800e229 	.word	0x0800e229

0801676c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801676c:	b580      	push	{r7, lr}
 801676e:	b084      	sub	sp, #16
 8016770:	af00      	add	r7, sp, #0
 8016772:	6078      	str	r0, [r7, #4]
 8016774:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016776:	4819      	ldr	r0, [pc, #100]	@ (80167dc <tcpip_try_callback+0x70>)
 8016778:	f7fa fd1f 	bl	80111ba <sys_mbox_valid>
 801677c:	4603      	mov	r3, r0
 801677e:	2b00      	cmp	r3, #0
 8016780:	d106      	bne.n	8016790 <tcpip_try_callback+0x24>
 8016782:	4b17      	ldr	r3, [pc, #92]	@ (80167e0 <tcpip_try_callback+0x74>)
 8016784:	f240 125d 	movw	r2, #349	@ 0x15d
 8016788:	4916      	ldr	r1, [pc, #88]	@ (80167e4 <tcpip_try_callback+0x78>)
 801678a:	4817      	ldr	r0, [pc, #92]	@ (80167e8 <tcpip_try_callback+0x7c>)
 801678c:	f000 ffd2 	bl	8017734 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8016790:	2008      	movs	r0, #8
 8016792:	f7f9 fadf 	bl	800fd54 <memp_malloc>
 8016796:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d102      	bne.n	80167a4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801679e:	f04f 33ff 	mov.w	r3, #4294967295
 80167a2:	e017      	b.n	80167d4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	2201      	movs	r2, #1
 80167a8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	687a      	ldr	r2, [r7, #4]
 80167ae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	683a      	ldr	r2, [r7, #0]
 80167b4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80167b6:	68f9      	ldr	r1, [r7, #12]
 80167b8:	4808      	ldr	r0, [pc, #32]	@ (80167dc <tcpip_try_callback+0x70>)
 80167ba:	f7fa fcb3 	bl	8011124 <sys_mbox_trypost>
 80167be:	4603      	mov	r3, r0
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d006      	beq.n	80167d2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80167c4:	68f9      	ldr	r1, [r7, #12]
 80167c6:	2008      	movs	r0, #8
 80167c8:	f7f9 fb3a 	bl	800fe40 <memp_free>
    return ERR_MEM;
 80167cc:	f04f 33ff 	mov.w	r3, #4294967295
 80167d0:	e000      	b.n	80167d4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80167d2:	2300      	movs	r3, #0
}
 80167d4:	4618      	mov	r0, r3
 80167d6:	3710      	adds	r7, #16
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}
 80167dc:	24007f58 	.word	0x24007f58
 80167e0:	0801b274 	.word	0x0801b274
 80167e4:	0801b320 	.word	0x0801b320
 80167e8:	0801b2f8 	.word	0x0801b2f8

080167ec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80167ec:	b580      	push	{r7, lr}
 80167ee:	b084      	sub	sp, #16
 80167f0:	af02      	add	r7, sp, #8
 80167f2:	6078      	str	r0, [r7, #4]
 80167f4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80167f6:	f7f7 fc65 	bl	800e0c4 <lwip_init>

  tcpip_init_done = initfunc;
 80167fa:	4a17      	ldr	r2, [pc, #92]	@ (8016858 <tcpip_init+0x6c>)
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8016800:	4a16      	ldr	r2, [pc, #88]	@ (801685c <tcpip_init+0x70>)
 8016802:	683b      	ldr	r3, [r7, #0]
 8016804:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8016806:	2106      	movs	r1, #6
 8016808:	4815      	ldr	r0, [pc, #84]	@ (8016860 <tcpip_init+0x74>)
 801680a:	f7fa fc71 	bl	80110f0 <sys_mbox_new>
 801680e:	4603      	mov	r3, r0
 8016810:	2b00      	cmp	r3, #0
 8016812:	d006      	beq.n	8016822 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8016814:	4b13      	ldr	r3, [pc, #76]	@ (8016864 <tcpip_init+0x78>)
 8016816:	f240 2261 	movw	r2, #609	@ 0x261
 801681a:	4913      	ldr	r1, [pc, #76]	@ (8016868 <tcpip_init+0x7c>)
 801681c:	4813      	ldr	r0, [pc, #76]	@ (801686c <tcpip_init+0x80>)
 801681e:	f000 ff89 	bl	8017734 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8016822:	4813      	ldr	r0, [pc, #76]	@ (8016870 <tcpip_init+0x84>)
 8016824:	f7fa fce6 	bl	80111f4 <sys_mutex_new>
 8016828:	4603      	mov	r3, r0
 801682a:	2b00      	cmp	r3, #0
 801682c:	d006      	beq.n	801683c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801682e:	4b0d      	ldr	r3, [pc, #52]	@ (8016864 <tcpip_init+0x78>)
 8016830:	f240 2265 	movw	r2, #613	@ 0x265
 8016834:	490f      	ldr	r1, [pc, #60]	@ (8016874 <tcpip_init+0x88>)
 8016836:	480d      	ldr	r0, [pc, #52]	@ (801686c <tcpip_init+0x80>)
 8016838:	f000 ff7c 	bl	8017734 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801683c:	2318      	movs	r3, #24
 801683e:	9300      	str	r3, [sp, #0]
 8016840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016844:	2200      	movs	r2, #0
 8016846:	490c      	ldr	r1, [pc, #48]	@ (8016878 <tcpip_init+0x8c>)
 8016848:	480c      	ldr	r0, [pc, #48]	@ (801687c <tcpip_init+0x90>)
 801684a:	f7fa fd05 	bl	8011258 <sys_thread_new>
}
 801684e:	bf00      	nop
 8016850:	3708      	adds	r7, #8
 8016852:	46bd      	mov	sp, r7
 8016854:	bd80      	pop	{r7, pc}
 8016856:	bf00      	nop
 8016858:	24007f50 	.word	0x24007f50
 801685c:	24007f54 	.word	0x24007f54
 8016860:	24007f58 	.word	0x24007f58
 8016864:	0801b274 	.word	0x0801b274
 8016868:	0801b330 	.word	0x0801b330
 801686c:	0801b2f8 	.word	0x0801b2f8
 8016870:	24007f5c 	.word	0x24007f5c
 8016874:	0801b354 	.word	0x0801b354
 8016878:	080165a9 	.word	0x080165a9
 801687c:	0801b378 	.word	0x0801b378

08016880 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016880:	b580      	push	{r7, lr}
 8016882:	b082      	sub	sp, #8
 8016884:	af00      	add	r7, sp, #0
 8016886:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016888:	f7fa fd6e 	bl	8011368 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801688c:	4b0a      	ldr	r3, [pc, #40]	@ (80168b8 <tcpip_tcp_timer+0x38>)
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d103      	bne.n	801689c <tcpip_tcp_timer+0x1c>
 8016894:	4b09      	ldr	r3, [pc, #36]	@ (80168bc <tcpip_tcp_timer+0x3c>)
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d005      	beq.n	80168a8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801689c:	2200      	movs	r2, #0
 801689e:	4908      	ldr	r1, [pc, #32]	@ (80168c0 <tcpip_tcp_timer+0x40>)
 80168a0:	20fa      	movs	r0, #250	@ 0xfa
 80168a2:	f000 f8f3 	bl	8016a8c <sys_timeout>
 80168a6:	e003      	b.n	80168b0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80168a8:	4b06      	ldr	r3, [pc, #24]	@ (80168c4 <tcpip_tcp_timer+0x44>)
 80168aa:	2200      	movs	r2, #0
 80168ac:	601a      	str	r2, [r3, #0]
  }
}
 80168ae:	bf00      	nop
 80168b0:	bf00      	nop
 80168b2:	3708      	adds	r7, #8
 80168b4:	46bd      	mov	sp, r7
 80168b6:	bd80      	pop	{r7, pc}
 80168b8:	24007f0c 	.word	0x24007f0c
 80168bc:	24007f10 	.word	0x24007f10
 80168c0:	08016881 	.word	0x08016881
 80168c4:	24007f68 	.word	0x24007f68

080168c8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80168cc:	4b0a      	ldr	r3, [pc, #40]	@ (80168f8 <tcp_timer_needed+0x30>)
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d10f      	bne.n	80168f4 <tcp_timer_needed+0x2c>
 80168d4:	4b09      	ldr	r3, [pc, #36]	@ (80168fc <tcp_timer_needed+0x34>)
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d103      	bne.n	80168e4 <tcp_timer_needed+0x1c>
 80168dc:	4b08      	ldr	r3, [pc, #32]	@ (8016900 <tcp_timer_needed+0x38>)
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d007      	beq.n	80168f4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80168e4:	4b04      	ldr	r3, [pc, #16]	@ (80168f8 <tcp_timer_needed+0x30>)
 80168e6:	2201      	movs	r2, #1
 80168e8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80168ea:	2200      	movs	r2, #0
 80168ec:	4905      	ldr	r1, [pc, #20]	@ (8016904 <tcp_timer_needed+0x3c>)
 80168ee:	20fa      	movs	r0, #250	@ 0xfa
 80168f0:	f000 f8cc 	bl	8016a8c <sys_timeout>
  }
}
 80168f4:	bf00      	nop
 80168f6:	bd80      	pop	{r7, pc}
 80168f8:	24007f68 	.word	0x24007f68
 80168fc:	24007f0c 	.word	0x24007f0c
 8016900:	24007f10 	.word	0x24007f10
 8016904:	08016881 	.word	0x08016881

08016908 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016908:	b580      	push	{r7, lr}
 801690a:	b086      	sub	sp, #24
 801690c:	af00      	add	r7, sp, #0
 801690e:	60f8      	str	r0, [r7, #12]
 8016910:	60b9      	str	r1, [r7, #8]
 8016912:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016914:	200a      	movs	r0, #10
 8016916:	f7f9 fa1d 	bl	800fd54 <memp_malloc>
 801691a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801691c:	693b      	ldr	r3, [r7, #16]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d109      	bne.n	8016936 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016922:	693b      	ldr	r3, [r7, #16]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d151      	bne.n	80169cc <sys_timeout_abs+0xc4>
 8016928:	4b2a      	ldr	r3, [pc, #168]	@ (80169d4 <sys_timeout_abs+0xcc>)
 801692a:	22be      	movs	r2, #190	@ 0xbe
 801692c:	492a      	ldr	r1, [pc, #168]	@ (80169d8 <sys_timeout_abs+0xd0>)
 801692e:	482b      	ldr	r0, [pc, #172]	@ (80169dc <sys_timeout_abs+0xd4>)
 8016930:	f000 ff00 	bl	8017734 <iprintf>
    return;
 8016934:	e04a      	b.n	80169cc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016936:	693b      	ldr	r3, [r7, #16]
 8016938:	2200      	movs	r2, #0
 801693a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801693c:	693b      	ldr	r3, [r7, #16]
 801693e:	68ba      	ldr	r2, [r7, #8]
 8016940:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016942:	693b      	ldr	r3, [r7, #16]
 8016944:	687a      	ldr	r2, [r7, #4]
 8016946:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016948:	693b      	ldr	r3, [r7, #16]
 801694a:	68fa      	ldr	r2, [r7, #12]
 801694c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801694e:	4b24      	ldr	r3, [pc, #144]	@ (80169e0 <sys_timeout_abs+0xd8>)
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d103      	bne.n	801695e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016956:	4a22      	ldr	r2, [pc, #136]	@ (80169e0 <sys_timeout_abs+0xd8>)
 8016958:	693b      	ldr	r3, [r7, #16]
 801695a:	6013      	str	r3, [r2, #0]
    return;
 801695c:	e037      	b.n	80169ce <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801695e:	693b      	ldr	r3, [r7, #16]
 8016960:	685a      	ldr	r2, [r3, #4]
 8016962:	4b1f      	ldr	r3, [pc, #124]	@ (80169e0 <sys_timeout_abs+0xd8>)
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	685b      	ldr	r3, [r3, #4]
 8016968:	1ad3      	subs	r3, r2, r3
 801696a:	0fdb      	lsrs	r3, r3, #31
 801696c:	f003 0301 	and.w	r3, r3, #1
 8016970:	b2db      	uxtb	r3, r3
 8016972:	2b00      	cmp	r3, #0
 8016974:	d007      	beq.n	8016986 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016976:	4b1a      	ldr	r3, [pc, #104]	@ (80169e0 <sys_timeout_abs+0xd8>)
 8016978:	681a      	ldr	r2, [r3, #0]
 801697a:	693b      	ldr	r3, [r7, #16]
 801697c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801697e:	4a18      	ldr	r2, [pc, #96]	@ (80169e0 <sys_timeout_abs+0xd8>)
 8016980:	693b      	ldr	r3, [r7, #16]
 8016982:	6013      	str	r3, [r2, #0]
 8016984:	e023      	b.n	80169ce <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016986:	4b16      	ldr	r3, [pc, #88]	@ (80169e0 <sys_timeout_abs+0xd8>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	617b      	str	r3, [r7, #20]
 801698c:	e01a      	b.n	80169c4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801698e:	697b      	ldr	r3, [r7, #20]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d00b      	beq.n	80169ae <sys_timeout_abs+0xa6>
 8016996:	693b      	ldr	r3, [r7, #16]
 8016998:	685a      	ldr	r2, [r3, #4]
 801699a:	697b      	ldr	r3, [r7, #20]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	685b      	ldr	r3, [r3, #4]
 80169a0:	1ad3      	subs	r3, r2, r3
 80169a2:	0fdb      	lsrs	r3, r3, #31
 80169a4:	f003 0301 	and.w	r3, r3, #1
 80169a8:	b2db      	uxtb	r3, r3
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d007      	beq.n	80169be <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80169ae:	697b      	ldr	r3, [r7, #20]
 80169b0:	681a      	ldr	r2, [r3, #0]
 80169b2:	693b      	ldr	r3, [r7, #16]
 80169b4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80169b6:	697b      	ldr	r3, [r7, #20]
 80169b8:	693a      	ldr	r2, [r7, #16]
 80169ba:	601a      	str	r2, [r3, #0]
        break;
 80169bc:	e007      	b.n	80169ce <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80169be:	697b      	ldr	r3, [r7, #20]
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	617b      	str	r3, [r7, #20]
 80169c4:	697b      	ldr	r3, [r7, #20]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d1e1      	bne.n	801698e <sys_timeout_abs+0x86>
 80169ca:	e000      	b.n	80169ce <sys_timeout_abs+0xc6>
    return;
 80169cc:	bf00      	nop
      }
    }
  }
}
 80169ce:	3718      	adds	r7, #24
 80169d0:	46bd      	mov	sp, r7
 80169d2:	bd80      	pop	{r7, pc}
 80169d4:	0801b388 	.word	0x0801b388
 80169d8:	0801b3f0 	.word	0x0801b3f0
 80169dc:	0801b430 	.word	0x0801b430
 80169e0:	24007f60 	.word	0x24007f60

080169e4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b086      	sub	sp, #24
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80169f0:	697b      	ldr	r3, [r7, #20]
 80169f2:	685b      	ldr	r3, [r3, #4]
 80169f4:	4798      	blx	r3

  now = sys_now();
 80169f6:	f7f0 f973 	bl	8006ce0 <sys_now>
 80169fa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80169fc:	697b      	ldr	r3, [r7, #20]
 80169fe:	681a      	ldr	r2, [r3, #0]
 8016a00:	4b0f      	ldr	r3, [pc, #60]	@ (8016a40 <lwip_cyclic_timer+0x5c>)
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	4413      	add	r3, r2
 8016a06:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016a08:	68fa      	ldr	r2, [r7, #12]
 8016a0a:	693b      	ldr	r3, [r7, #16]
 8016a0c:	1ad3      	subs	r3, r2, r3
 8016a0e:	0fdb      	lsrs	r3, r3, #31
 8016a10:	f003 0301 	and.w	r3, r3, #1
 8016a14:	b2db      	uxtb	r3, r3
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d009      	beq.n	8016a2e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016a1a:	697b      	ldr	r3, [r7, #20]
 8016a1c:	681a      	ldr	r2, [r3, #0]
 8016a1e:	693b      	ldr	r3, [r7, #16]
 8016a20:	4413      	add	r3, r2
 8016a22:	687a      	ldr	r2, [r7, #4]
 8016a24:	4907      	ldr	r1, [pc, #28]	@ (8016a44 <lwip_cyclic_timer+0x60>)
 8016a26:	4618      	mov	r0, r3
 8016a28:	f7ff ff6e 	bl	8016908 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016a2c:	e004      	b.n	8016a38 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016a2e:	687a      	ldr	r2, [r7, #4]
 8016a30:	4904      	ldr	r1, [pc, #16]	@ (8016a44 <lwip_cyclic_timer+0x60>)
 8016a32:	68f8      	ldr	r0, [r7, #12]
 8016a34:	f7ff ff68 	bl	8016908 <sys_timeout_abs>
}
 8016a38:	bf00      	nop
 8016a3a:	3718      	adds	r7, #24
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	bd80      	pop	{r7, pc}
 8016a40:	24007f64 	.word	0x24007f64
 8016a44:	080169e5 	.word	0x080169e5

08016a48 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b082      	sub	sp, #8
 8016a4c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016a4e:	2301      	movs	r3, #1
 8016a50:	607b      	str	r3, [r7, #4]
 8016a52:	e00e      	b.n	8016a72 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016a54:	4a0b      	ldr	r2, [pc, #44]	@ (8016a84 <sys_timeouts_init+0x3c>)
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	00db      	lsls	r3, r3, #3
 8016a60:	4a08      	ldr	r2, [pc, #32]	@ (8016a84 <sys_timeouts_init+0x3c>)
 8016a62:	4413      	add	r3, r2
 8016a64:	461a      	mov	r2, r3
 8016a66:	4908      	ldr	r1, [pc, #32]	@ (8016a88 <sys_timeouts_init+0x40>)
 8016a68:	f000 f810 	bl	8016a8c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	3301      	adds	r3, #1
 8016a70:	607b      	str	r3, [r7, #4]
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	2b04      	cmp	r3, #4
 8016a76:	d9ed      	bls.n	8016a54 <sys_timeouts_init+0xc>
  }
}
 8016a78:	bf00      	nop
 8016a7a:	bf00      	nop
 8016a7c:	3708      	adds	r7, #8
 8016a7e:	46bd      	mov	sp, r7
 8016a80:	bd80      	pop	{r7, pc}
 8016a82:	bf00      	nop
 8016a84:	0801b9b0 	.word	0x0801b9b0
 8016a88:	080169e5 	.word	0x080169e5

08016a8c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b086      	sub	sp, #24
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	60f8      	str	r0, [r7, #12]
 8016a94:	60b9      	str	r1, [r7, #8]
 8016a96:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016a9e:	d306      	bcc.n	8016aae <sys_timeout+0x22>
 8016aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8016acc <sys_timeout+0x40>)
 8016aa2:	f240 1229 	movw	r2, #297	@ 0x129
 8016aa6:	490a      	ldr	r1, [pc, #40]	@ (8016ad0 <sys_timeout+0x44>)
 8016aa8:	480a      	ldr	r0, [pc, #40]	@ (8016ad4 <sys_timeout+0x48>)
 8016aaa:	f000 fe43 	bl	8017734 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8016aae:	f7f0 f917 	bl	8006ce0 <sys_now>
 8016ab2:	4602      	mov	r2, r0
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	4413      	add	r3, r2
 8016ab8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8016aba:	687a      	ldr	r2, [r7, #4]
 8016abc:	68b9      	ldr	r1, [r7, #8]
 8016abe:	6978      	ldr	r0, [r7, #20]
 8016ac0:	f7ff ff22 	bl	8016908 <sys_timeout_abs>
#endif
}
 8016ac4:	bf00      	nop
 8016ac6:	3718      	adds	r7, #24
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	bd80      	pop	{r7, pc}
 8016acc:	0801b388 	.word	0x0801b388
 8016ad0:	0801b458 	.word	0x0801b458
 8016ad4:	0801b430 	.word	0x0801b430

08016ad8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b084      	sub	sp, #16
 8016adc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8016ade:	f7f0 f8ff 	bl	8006ce0 <sys_now>
 8016ae2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016ae4:	4b17      	ldr	r3, [pc, #92]	@ (8016b44 <sys_check_timeouts+0x6c>)
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8016aea:	68bb      	ldr	r3, [r7, #8]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d022      	beq.n	8016b36 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8016af0:	68bb      	ldr	r3, [r7, #8]
 8016af2:	685b      	ldr	r3, [r3, #4]
 8016af4:	68fa      	ldr	r2, [r7, #12]
 8016af6:	1ad3      	subs	r3, r2, r3
 8016af8:	0fdb      	lsrs	r3, r3, #31
 8016afa:	f003 0301 	and.w	r3, r3, #1
 8016afe:	b2db      	uxtb	r3, r3
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d11a      	bne.n	8016b3a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016b04:	68bb      	ldr	r3, [r7, #8]
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	4a0e      	ldr	r2, [pc, #56]	@ (8016b44 <sys_check_timeouts+0x6c>)
 8016b0a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	689b      	ldr	r3, [r3, #8]
 8016b10:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8016b12:	68bb      	ldr	r3, [r7, #8]
 8016b14:	68db      	ldr	r3, [r3, #12]
 8016b16:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016b18:	68bb      	ldr	r3, [r7, #8]
 8016b1a:	685b      	ldr	r3, [r3, #4]
 8016b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8016b48 <sys_check_timeouts+0x70>)
 8016b1e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016b20:	68b9      	ldr	r1, [r7, #8]
 8016b22:	200a      	movs	r0, #10
 8016b24:	f7f9 f98c 	bl	800fe40 <memp_free>
    if (handler != NULL) {
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d0da      	beq.n	8016ae4 <sys_check_timeouts+0xc>
      handler(arg);
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	6838      	ldr	r0, [r7, #0]
 8016b32:	4798      	blx	r3
  do {
 8016b34:	e7d6      	b.n	8016ae4 <sys_check_timeouts+0xc>
      return;
 8016b36:	bf00      	nop
 8016b38:	e000      	b.n	8016b3c <sys_check_timeouts+0x64>
      return;
 8016b3a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016b3c:	3710      	adds	r7, #16
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}
 8016b42:	bf00      	nop
 8016b44:	24007f60 	.word	0x24007f60
 8016b48:	24007f64 	.word	0x24007f64

08016b4c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b082      	sub	sp, #8
 8016b50:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016b52:	4b16      	ldr	r3, [pc, #88]	@ (8016bac <sys_timeouts_sleeptime+0x60>)
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d102      	bne.n	8016b60 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8016b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8016b5e:	e020      	b.n	8016ba2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016b60:	f7f0 f8be 	bl	8006ce0 <sys_now>
 8016b64:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016b66:	4b11      	ldr	r3, [pc, #68]	@ (8016bac <sys_timeouts_sleeptime+0x60>)
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	685a      	ldr	r2, [r3, #4]
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	1ad3      	subs	r3, r2, r3
 8016b70:	0fdb      	lsrs	r3, r3, #31
 8016b72:	f003 0301 	and.w	r3, r3, #1
 8016b76:	b2db      	uxtb	r3, r3
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d001      	beq.n	8016b80 <sys_timeouts_sleeptime+0x34>
    return 0;
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	e010      	b.n	8016ba2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016b80:	4b0a      	ldr	r3, [pc, #40]	@ (8016bac <sys_timeouts_sleeptime+0x60>)
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	685a      	ldr	r2, [r3, #4]
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	1ad3      	subs	r3, r2, r3
 8016b8a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016b8c:	683b      	ldr	r3, [r7, #0]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	da06      	bge.n	8016ba0 <sys_timeouts_sleeptime+0x54>
 8016b92:	4b07      	ldr	r3, [pc, #28]	@ (8016bb0 <sys_timeouts_sleeptime+0x64>)
 8016b94:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8016b98:	4906      	ldr	r1, [pc, #24]	@ (8016bb4 <sys_timeouts_sleeptime+0x68>)
 8016b9a:	4807      	ldr	r0, [pc, #28]	@ (8016bb8 <sys_timeouts_sleeptime+0x6c>)
 8016b9c:	f000 fdca 	bl	8017734 <iprintf>
    return ret;
 8016ba0:	683b      	ldr	r3, [r7, #0]
  }
}
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	3708      	adds	r7, #8
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	bd80      	pop	{r7, pc}
 8016baa:	bf00      	nop
 8016bac:	24007f60 	.word	0x24007f60
 8016bb0:	0801b388 	.word	0x0801b388
 8016bb4:	0801b490 	.word	0x0801b490
 8016bb8:	0801b430 	.word	0x0801b430

08016bbc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016bc0:	f000 fcb8 	bl	8017534 <rand>
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	b29b      	uxth	r3, r3
 8016bc8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016bcc:	b29b      	uxth	r3, r3
 8016bce:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8016bd2:	b29a      	uxth	r2, r3
 8016bd4:	4b01      	ldr	r3, [pc, #4]	@ (8016bdc <udp_init+0x20>)
 8016bd6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016bd8:	bf00      	nop
 8016bda:	bd80      	pop	{r7, pc}
 8016bdc:	24000050 	.word	0x24000050

08016be0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016be0:	b480      	push	{r7}
 8016be2:	b083      	sub	sp, #12
 8016be4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016be6:	2300      	movs	r3, #0
 8016be8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8016bea:	4b17      	ldr	r3, [pc, #92]	@ (8016c48 <udp_new_port+0x68>)
 8016bec:	881b      	ldrh	r3, [r3, #0]
 8016bee:	1c5a      	adds	r2, r3, #1
 8016bf0:	b291      	uxth	r1, r2
 8016bf2:	4a15      	ldr	r2, [pc, #84]	@ (8016c48 <udp_new_port+0x68>)
 8016bf4:	8011      	strh	r1, [r2, #0]
 8016bf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016bfa:	4293      	cmp	r3, r2
 8016bfc:	d103      	bne.n	8016c06 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8016bfe:	4b12      	ldr	r3, [pc, #72]	@ (8016c48 <udp_new_port+0x68>)
 8016c00:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8016c04:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016c06:	4b11      	ldr	r3, [pc, #68]	@ (8016c4c <udp_new_port+0x6c>)
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	603b      	str	r3, [r7, #0]
 8016c0c:	e011      	b.n	8016c32 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8016c0e:	683b      	ldr	r3, [r7, #0]
 8016c10:	8a5a      	ldrh	r2, [r3, #18]
 8016c12:	4b0d      	ldr	r3, [pc, #52]	@ (8016c48 <udp_new_port+0x68>)
 8016c14:	881b      	ldrh	r3, [r3, #0]
 8016c16:	429a      	cmp	r2, r3
 8016c18:	d108      	bne.n	8016c2c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8016c1a:	88fb      	ldrh	r3, [r7, #6]
 8016c1c:	3301      	adds	r3, #1
 8016c1e:	80fb      	strh	r3, [r7, #6]
 8016c20:	88fb      	ldrh	r3, [r7, #6]
 8016c22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016c26:	d3e0      	bcc.n	8016bea <udp_new_port+0xa>
        return 0;
 8016c28:	2300      	movs	r3, #0
 8016c2a:	e007      	b.n	8016c3c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016c2c:	683b      	ldr	r3, [r7, #0]
 8016c2e:	68db      	ldr	r3, [r3, #12]
 8016c30:	603b      	str	r3, [r7, #0]
 8016c32:	683b      	ldr	r3, [r7, #0]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d1ea      	bne.n	8016c0e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016c38:	4b03      	ldr	r3, [pc, #12]	@ (8016c48 <udp_new_port+0x68>)
 8016c3a:	881b      	ldrh	r3, [r3, #0]
}
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	370c      	adds	r7, #12
 8016c40:	46bd      	mov	sp, r7
 8016c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c46:	4770      	bx	lr
 8016c48:	24000050 	.word	0x24000050
 8016c4c:	24007f6c 	.word	0x24007f6c

08016c50 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b084      	sub	sp, #16
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	60f8      	str	r0, [r7, #12]
 8016c58:	60b9      	str	r1, [r7, #8]
 8016c5a:	4613      	mov	r3, r2
 8016c5c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d105      	bne.n	8016c70 <udp_input_local_match+0x20>
 8016c64:	4b27      	ldr	r3, [pc, #156]	@ (8016d04 <udp_input_local_match+0xb4>)
 8016c66:	2287      	movs	r2, #135	@ 0x87
 8016c68:	4927      	ldr	r1, [pc, #156]	@ (8016d08 <udp_input_local_match+0xb8>)
 8016c6a:	4828      	ldr	r0, [pc, #160]	@ (8016d0c <udp_input_local_match+0xbc>)
 8016c6c:	f000 fd62 	bl	8017734 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016c70:	68bb      	ldr	r3, [r7, #8]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d105      	bne.n	8016c82 <udp_input_local_match+0x32>
 8016c76:	4b23      	ldr	r3, [pc, #140]	@ (8016d04 <udp_input_local_match+0xb4>)
 8016c78:	2288      	movs	r2, #136	@ 0x88
 8016c7a:	4925      	ldr	r1, [pc, #148]	@ (8016d10 <udp_input_local_match+0xc0>)
 8016c7c:	4823      	ldr	r0, [pc, #140]	@ (8016d0c <udp_input_local_match+0xbc>)
 8016c7e:	f000 fd59 	bl	8017734 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	7a1b      	ldrb	r3, [r3, #8]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d00b      	beq.n	8016ca2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	7a1a      	ldrb	r2, [r3, #8]
 8016c8e:	4b21      	ldr	r3, [pc, #132]	@ (8016d14 <udp_input_local_match+0xc4>)
 8016c90:	685b      	ldr	r3, [r3, #4]
 8016c92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8016c96:	3301      	adds	r3, #1
 8016c98:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016c9a:	429a      	cmp	r2, r3
 8016c9c:	d001      	beq.n	8016ca2 <udp_input_local_match+0x52>
    return 0;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	e02b      	b.n	8016cfa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016ca2:	79fb      	ldrb	r3, [r7, #7]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d018      	beq.n	8016cda <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d013      	beq.n	8016cd6 <udp_input_local_match+0x86>
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d00f      	beq.n	8016cd6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016cb6:	4b17      	ldr	r3, [pc, #92]	@ (8016d14 <udp_input_local_match+0xc4>)
 8016cb8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cbe:	d00a      	beq.n	8016cd6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	681a      	ldr	r2, [r3, #0]
 8016cc4:	4b13      	ldr	r3, [pc, #76]	@ (8016d14 <udp_input_local_match+0xc4>)
 8016cc6:	695b      	ldr	r3, [r3, #20]
 8016cc8:	405a      	eors	r2, r3
 8016cca:	68bb      	ldr	r3, [r7, #8]
 8016ccc:	3308      	adds	r3, #8
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d110      	bne.n	8016cf8 <udp_input_local_match+0xa8>
          return 1;
 8016cd6:	2301      	movs	r3, #1
 8016cd8:	e00f      	b.n	8016cfa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d009      	beq.n	8016cf4 <udp_input_local_match+0xa4>
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d005      	beq.n	8016cf4 <udp_input_local_match+0xa4>
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	681a      	ldr	r2, [r3, #0]
 8016cec:	4b09      	ldr	r3, [pc, #36]	@ (8016d14 <udp_input_local_match+0xc4>)
 8016cee:	695b      	ldr	r3, [r3, #20]
 8016cf0:	429a      	cmp	r2, r3
 8016cf2:	d101      	bne.n	8016cf8 <udp_input_local_match+0xa8>
        return 1;
 8016cf4:	2301      	movs	r3, #1
 8016cf6:	e000      	b.n	8016cfa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016cf8:	2300      	movs	r3, #0
}
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	3710      	adds	r7, #16
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	bd80      	pop	{r7, pc}
 8016d02:	bf00      	nop
 8016d04:	0801b4a4 	.word	0x0801b4a4
 8016d08:	0801b508 	.word	0x0801b508
 8016d0c:	0801b52c 	.word	0x0801b52c
 8016d10:	0801b554 	.word	0x0801b554
 8016d14:	24004dcc 	.word	0x24004dcc

08016d18 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016d18:	b590      	push	{r4, r7, lr}
 8016d1a:	b08d      	sub	sp, #52	@ 0x34
 8016d1c:	af02      	add	r7, sp, #8
 8016d1e:	6078      	str	r0, [r7, #4]
 8016d20:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016d22:	2300      	movs	r3, #0
 8016d24:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d105      	bne.n	8016d38 <udp_input+0x20>
 8016d2c:	4b7c      	ldr	r3, [pc, #496]	@ (8016f20 <udp_input+0x208>)
 8016d2e:	22cf      	movs	r2, #207	@ 0xcf
 8016d30:	497c      	ldr	r1, [pc, #496]	@ (8016f24 <udp_input+0x20c>)
 8016d32:	487d      	ldr	r0, [pc, #500]	@ (8016f28 <udp_input+0x210>)
 8016d34:	f000 fcfe 	bl	8017734 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016d38:	683b      	ldr	r3, [r7, #0]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d105      	bne.n	8016d4a <udp_input+0x32>
 8016d3e:	4b78      	ldr	r3, [pc, #480]	@ (8016f20 <udp_input+0x208>)
 8016d40:	22d0      	movs	r2, #208	@ 0xd0
 8016d42:	497a      	ldr	r1, [pc, #488]	@ (8016f2c <udp_input+0x214>)
 8016d44:	4878      	ldr	r0, [pc, #480]	@ (8016f28 <udp_input+0x210>)
 8016d46:	f000 fcf5 	bl	8017734 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	895b      	ldrh	r3, [r3, #10]
 8016d4e:	2b07      	cmp	r3, #7
 8016d50:	d803      	bhi.n	8016d5a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016d52:	6878      	ldr	r0, [r7, #4]
 8016d54:	f7f9 ff22 	bl	8010b9c <pbuf_free>
    goto end;
 8016d58:	e0de      	b.n	8016f18 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	685b      	ldr	r3, [r3, #4]
 8016d5e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016d60:	4b73      	ldr	r3, [pc, #460]	@ (8016f30 <udp_input+0x218>)
 8016d62:	695b      	ldr	r3, [r3, #20]
 8016d64:	4a72      	ldr	r2, [pc, #456]	@ (8016f30 <udp_input+0x218>)
 8016d66:	6812      	ldr	r2, [r2, #0]
 8016d68:	4611      	mov	r1, r2
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f7f7 fc76 	bl	800e65c <ip4_addr_isbroadcast_u32>
 8016d70:	4603      	mov	r3, r0
 8016d72:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016d74:	697b      	ldr	r3, [r7, #20]
 8016d76:	881b      	ldrh	r3, [r3, #0]
 8016d78:	b29b      	uxth	r3, r3
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	f7f4 f852 	bl	800ae24 <lwip_htons>
 8016d80:	4603      	mov	r3, r0
 8016d82:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016d84:	697b      	ldr	r3, [r7, #20]
 8016d86:	885b      	ldrh	r3, [r3, #2]
 8016d88:	b29b      	uxth	r3, r3
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	f7f4 f84a 	bl	800ae24 <lwip_htons>
 8016d90:	4603      	mov	r3, r0
 8016d92:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016d94:	2300      	movs	r3, #0
 8016d96:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8016d98:	2300      	movs	r3, #0
 8016d9a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016da0:	4b64      	ldr	r3, [pc, #400]	@ (8016f34 <udp_input+0x21c>)
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8016da6:	e054      	b.n	8016e52 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016daa:	8a5b      	ldrh	r3, [r3, #18]
 8016dac:	89fa      	ldrh	r2, [r7, #14]
 8016dae:	429a      	cmp	r2, r3
 8016db0:	d14a      	bne.n	8016e48 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016db2:	7cfb      	ldrb	r3, [r7, #19]
 8016db4:	461a      	mov	r2, r3
 8016db6:	6839      	ldr	r1, [r7, #0]
 8016db8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016dba:	f7ff ff49 	bl	8016c50 <udp_input_local_match>
 8016dbe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d041      	beq.n	8016e48 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dc6:	7c1b      	ldrb	r3, [r3, #16]
 8016dc8:	f003 0304 	and.w	r3, r3, #4
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d11d      	bne.n	8016e0c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016dd0:	69fb      	ldr	r3, [r7, #28]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d102      	bne.n	8016ddc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dd8:	61fb      	str	r3, [r7, #28]
 8016dda:	e017      	b.n	8016e0c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016ddc:	7cfb      	ldrb	r3, [r7, #19]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d014      	beq.n	8016e0c <udp_input+0xf4>
 8016de2:	4b53      	ldr	r3, [pc, #332]	@ (8016f30 <udp_input+0x218>)
 8016de4:	695b      	ldr	r3, [r3, #20]
 8016de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dea:	d10f      	bne.n	8016e0c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016dec:	69fb      	ldr	r3, [r7, #28]
 8016dee:	681a      	ldr	r2, [r3, #0]
 8016df0:	683b      	ldr	r3, [r7, #0]
 8016df2:	3304      	adds	r3, #4
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	429a      	cmp	r2, r3
 8016df8:	d008      	beq.n	8016e0c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dfc:	681a      	ldr	r2, [r3, #0]
 8016dfe:	683b      	ldr	r3, [r7, #0]
 8016e00:	3304      	adds	r3, #4
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	429a      	cmp	r2, r3
 8016e06:	d101      	bne.n	8016e0c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e0a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e0e:	8a9b      	ldrh	r3, [r3, #20]
 8016e10:	8a3a      	ldrh	r2, [r7, #16]
 8016e12:	429a      	cmp	r2, r3
 8016e14:	d118      	bne.n	8016e48 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e18:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d005      	beq.n	8016e2a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e20:	685a      	ldr	r2, [r3, #4]
 8016e22:	4b43      	ldr	r3, [pc, #268]	@ (8016f30 <udp_input+0x218>)
 8016e24:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016e26:	429a      	cmp	r2, r3
 8016e28:	d10e      	bne.n	8016e48 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016e2a:	6a3b      	ldr	r3, [r7, #32]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d014      	beq.n	8016e5a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e32:	68da      	ldr	r2, [r3, #12]
 8016e34:	6a3b      	ldr	r3, [r7, #32]
 8016e36:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016e38:	4b3e      	ldr	r3, [pc, #248]	@ (8016f34 <udp_input+0x21c>)
 8016e3a:	681a      	ldr	r2, [r3, #0]
 8016e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e3e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016e40:	4a3c      	ldr	r2, [pc, #240]	@ (8016f34 <udp_input+0x21c>)
 8016e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e44:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016e46:	e008      	b.n	8016e5a <udp_input+0x142>
      }
    }

    prev = pcb;
 8016e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e4a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e4e:	68db      	ldr	r3, [r3, #12]
 8016e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8016e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d1a7      	bne.n	8016da8 <udp_input+0x90>
 8016e58:	e000      	b.n	8016e5c <udp_input+0x144>
        break;
 8016e5a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d101      	bne.n	8016e66 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016e62:	69fb      	ldr	r3, [r7, #28]
 8016e64:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d002      	beq.n	8016e72 <udp_input+0x15a>
    for_us = 1;
 8016e6c:	2301      	movs	r3, #1
 8016e6e:	76fb      	strb	r3, [r7, #27]
 8016e70:	e00a      	b.n	8016e88 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016e72:	683b      	ldr	r3, [r7, #0]
 8016e74:	3304      	adds	r3, #4
 8016e76:	681a      	ldr	r2, [r3, #0]
 8016e78:	4b2d      	ldr	r3, [pc, #180]	@ (8016f30 <udp_input+0x218>)
 8016e7a:	695b      	ldr	r3, [r3, #20]
 8016e7c:	429a      	cmp	r2, r3
 8016e7e:	bf0c      	ite	eq
 8016e80:	2301      	moveq	r3, #1
 8016e82:	2300      	movne	r3, #0
 8016e84:	b2db      	uxtb	r3, r3
 8016e86:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016e88:	7efb      	ldrb	r3, [r7, #27]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d041      	beq.n	8016f12 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016e8e:	2108      	movs	r1, #8
 8016e90:	6878      	ldr	r0, [r7, #4]
 8016e92:	f7f9 fdfd 	bl	8010a90 <pbuf_remove_header>
 8016e96:	4603      	mov	r3, r0
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d00a      	beq.n	8016eb2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016e9c:	4b20      	ldr	r3, [pc, #128]	@ (8016f20 <udp_input+0x208>)
 8016e9e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8016ea2:	4925      	ldr	r1, [pc, #148]	@ (8016f38 <udp_input+0x220>)
 8016ea4:	4820      	ldr	r0, [pc, #128]	@ (8016f28 <udp_input+0x210>)
 8016ea6:	f000 fc45 	bl	8017734 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016eaa:	6878      	ldr	r0, [r7, #4]
 8016eac:	f7f9 fe76 	bl	8010b9c <pbuf_free>
      goto end;
 8016eb0:	e032      	b.n	8016f18 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d012      	beq.n	8016ede <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eba:	699b      	ldr	r3, [r3, #24]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d00a      	beq.n	8016ed6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ec2:	699c      	ldr	r4, [r3, #24]
 8016ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ec6:	69d8      	ldr	r0, [r3, #28]
 8016ec8:	8a3b      	ldrh	r3, [r7, #16]
 8016eca:	9300      	str	r3, [sp, #0]
 8016ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8016f3c <udp_input+0x224>)
 8016ece:	687a      	ldr	r2, [r7, #4]
 8016ed0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016ed2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016ed4:	e021      	b.n	8016f1a <udp_input+0x202>
        pbuf_free(p);
 8016ed6:	6878      	ldr	r0, [r7, #4]
 8016ed8:	f7f9 fe60 	bl	8010b9c <pbuf_free>
        goto end;
 8016edc:	e01c      	b.n	8016f18 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016ede:	7cfb      	ldrb	r3, [r7, #19]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d112      	bne.n	8016f0a <udp_input+0x1f2>
 8016ee4:	4b12      	ldr	r3, [pc, #72]	@ (8016f30 <udp_input+0x218>)
 8016ee6:	695b      	ldr	r3, [r3, #20]
 8016ee8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016eec:	2be0      	cmp	r3, #224	@ 0xe0
 8016eee:	d00c      	beq.n	8016f0a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8016f30 <udp_input+0x218>)
 8016ef2:	899b      	ldrh	r3, [r3, #12]
 8016ef4:	3308      	adds	r3, #8
 8016ef6:	b29b      	uxth	r3, r3
 8016ef8:	b21b      	sxth	r3, r3
 8016efa:	4619      	mov	r1, r3
 8016efc:	6878      	ldr	r0, [r7, #4]
 8016efe:	f7f9 fe3a 	bl	8010b76 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016f02:	2103      	movs	r1, #3
 8016f04:	6878      	ldr	r0, [r7, #4]
 8016f06:	f7f6 ff8d 	bl	800de24 <icmp_dest_unreach>
      pbuf_free(p);
 8016f0a:	6878      	ldr	r0, [r7, #4]
 8016f0c:	f7f9 fe46 	bl	8010b9c <pbuf_free>
  return;
 8016f10:	e003      	b.n	8016f1a <udp_input+0x202>
    pbuf_free(p);
 8016f12:	6878      	ldr	r0, [r7, #4]
 8016f14:	f7f9 fe42 	bl	8010b9c <pbuf_free>
  return;
 8016f18:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016f1a:	372c      	adds	r7, #44	@ 0x2c
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	bd90      	pop	{r4, r7, pc}
 8016f20:	0801b4a4 	.word	0x0801b4a4
 8016f24:	0801b57c 	.word	0x0801b57c
 8016f28:	0801b52c 	.word	0x0801b52c
 8016f2c:	0801b594 	.word	0x0801b594
 8016f30:	24004dcc 	.word	0x24004dcc
 8016f34:	24007f6c 	.word	0x24007f6c
 8016f38:	0801b5b0 	.word	0x0801b5b0
 8016f3c:	24004ddc 	.word	0x24004ddc

08016f40 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b088      	sub	sp, #32
 8016f44:	af02      	add	r7, sp, #8
 8016f46:	60f8      	str	r0, [r7, #12]
 8016f48:	60b9      	str	r1, [r7, #8]
 8016f4a:	607a      	str	r2, [r7, #4]
 8016f4c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d109      	bne.n	8016f68 <udp_sendto_if+0x28>
 8016f54:	4b2e      	ldr	r3, [pc, #184]	@ (8017010 <udp_sendto_if+0xd0>)
 8016f56:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016f5a:	492e      	ldr	r1, [pc, #184]	@ (8017014 <udp_sendto_if+0xd4>)
 8016f5c:	482e      	ldr	r0, [pc, #184]	@ (8017018 <udp_sendto_if+0xd8>)
 8016f5e:	f000 fbe9 	bl	8017734 <iprintf>
 8016f62:	f06f 030f 	mvn.w	r3, #15
 8016f66:	e04f      	b.n	8017008 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016f68:	68bb      	ldr	r3, [r7, #8]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d109      	bne.n	8016f82 <udp_sendto_if+0x42>
 8016f6e:	4b28      	ldr	r3, [pc, #160]	@ (8017010 <udp_sendto_if+0xd0>)
 8016f70:	f240 2281 	movw	r2, #641	@ 0x281
 8016f74:	4929      	ldr	r1, [pc, #164]	@ (801701c <udp_sendto_if+0xdc>)
 8016f76:	4828      	ldr	r0, [pc, #160]	@ (8017018 <udp_sendto_if+0xd8>)
 8016f78:	f000 fbdc 	bl	8017734 <iprintf>
 8016f7c:	f06f 030f 	mvn.w	r3, #15
 8016f80:	e042      	b.n	8017008 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d109      	bne.n	8016f9c <udp_sendto_if+0x5c>
 8016f88:	4b21      	ldr	r3, [pc, #132]	@ (8017010 <udp_sendto_if+0xd0>)
 8016f8a:	f240 2282 	movw	r2, #642	@ 0x282
 8016f8e:	4924      	ldr	r1, [pc, #144]	@ (8017020 <udp_sendto_if+0xe0>)
 8016f90:	4821      	ldr	r0, [pc, #132]	@ (8017018 <udp_sendto_if+0xd8>)
 8016f92:	f000 fbcf 	bl	8017734 <iprintf>
 8016f96:	f06f 030f 	mvn.w	r3, #15
 8016f9a:	e035      	b.n	8017008 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8016f9c:	6a3b      	ldr	r3, [r7, #32]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d109      	bne.n	8016fb6 <udp_sendto_if+0x76>
 8016fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8017010 <udp_sendto_if+0xd0>)
 8016fa4:	f240 2283 	movw	r2, #643	@ 0x283
 8016fa8:	491e      	ldr	r1, [pc, #120]	@ (8017024 <udp_sendto_if+0xe4>)
 8016faa:	481b      	ldr	r0, [pc, #108]	@ (8017018 <udp_sendto_if+0xd8>)
 8016fac:	f000 fbc2 	bl	8017734 <iprintf>
 8016fb0:	f06f 030f 	mvn.w	r3, #15
 8016fb4:	e028      	b.n	8017008 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d009      	beq.n	8016fd0 <udp_sendto_if+0x90>
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d005      	beq.n	8016fd0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016fcc:	2be0      	cmp	r3, #224	@ 0xe0
 8016fce:	d103      	bne.n	8016fd8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8016fd0:	6a3b      	ldr	r3, [r7, #32]
 8016fd2:	3304      	adds	r3, #4
 8016fd4:	617b      	str	r3, [r7, #20]
 8016fd6:	e00b      	b.n	8016ff0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	681a      	ldr	r2, [r3, #0]
 8016fdc:	6a3b      	ldr	r3, [r7, #32]
 8016fde:	3304      	adds	r3, #4
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	429a      	cmp	r2, r3
 8016fe4:	d002      	beq.n	8016fec <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016fe6:	f06f 0303 	mvn.w	r3, #3
 8016fea:	e00d      	b.n	8017008 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016ff0:	887a      	ldrh	r2, [r7, #2]
 8016ff2:	697b      	ldr	r3, [r7, #20]
 8016ff4:	9301      	str	r3, [sp, #4]
 8016ff6:	6a3b      	ldr	r3, [r7, #32]
 8016ff8:	9300      	str	r3, [sp, #0]
 8016ffa:	4613      	mov	r3, r2
 8016ffc:	687a      	ldr	r2, [r7, #4]
 8016ffe:	68b9      	ldr	r1, [r7, #8]
 8017000:	68f8      	ldr	r0, [r7, #12]
 8017002:	f000 f811 	bl	8017028 <udp_sendto_if_src>
 8017006:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017008:	4618      	mov	r0, r3
 801700a:	3718      	adds	r7, #24
 801700c:	46bd      	mov	sp, r7
 801700e:	bd80      	pop	{r7, pc}
 8017010:	0801b4a4 	.word	0x0801b4a4
 8017014:	0801b64c 	.word	0x0801b64c
 8017018:	0801b52c 	.word	0x0801b52c
 801701c:	0801b668 	.word	0x0801b668
 8017020:	0801b684 	.word	0x0801b684
 8017024:	0801b6a4 	.word	0x0801b6a4

08017028 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b08c      	sub	sp, #48	@ 0x30
 801702c:	af04      	add	r7, sp, #16
 801702e:	60f8      	str	r0, [r7, #12]
 8017030:	60b9      	str	r1, [r7, #8]
 8017032:	607a      	str	r2, [r7, #4]
 8017034:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d109      	bne.n	8017050 <udp_sendto_if_src+0x28>
 801703c:	4b65      	ldr	r3, [pc, #404]	@ (80171d4 <udp_sendto_if_src+0x1ac>)
 801703e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8017042:	4965      	ldr	r1, [pc, #404]	@ (80171d8 <udp_sendto_if_src+0x1b0>)
 8017044:	4865      	ldr	r0, [pc, #404]	@ (80171dc <udp_sendto_if_src+0x1b4>)
 8017046:	f000 fb75 	bl	8017734 <iprintf>
 801704a:	f06f 030f 	mvn.w	r3, #15
 801704e:	e0bc      	b.n	80171ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8017050:	68bb      	ldr	r3, [r7, #8]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d109      	bne.n	801706a <udp_sendto_if_src+0x42>
 8017056:	4b5f      	ldr	r3, [pc, #380]	@ (80171d4 <udp_sendto_if_src+0x1ac>)
 8017058:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801705c:	4960      	ldr	r1, [pc, #384]	@ (80171e0 <udp_sendto_if_src+0x1b8>)
 801705e:	485f      	ldr	r0, [pc, #380]	@ (80171dc <udp_sendto_if_src+0x1b4>)
 8017060:	f000 fb68 	bl	8017734 <iprintf>
 8017064:	f06f 030f 	mvn.w	r3, #15
 8017068:	e0af      	b.n	80171ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d109      	bne.n	8017084 <udp_sendto_if_src+0x5c>
 8017070:	4b58      	ldr	r3, [pc, #352]	@ (80171d4 <udp_sendto_if_src+0x1ac>)
 8017072:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8017076:	495b      	ldr	r1, [pc, #364]	@ (80171e4 <udp_sendto_if_src+0x1bc>)
 8017078:	4858      	ldr	r0, [pc, #352]	@ (80171dc <udp_sendto_if_src+0x1b4>)
 801707a:	f000 fb5b 	bl	8017734 <iprintf>
 801707e:	f06f 030f 	mvn.w	r3, #15
 8017082:	e0a2      	b.n	80171ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8017084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017086:	2b00      	cmp	r3, #0
 8017088:	d109      	bne.n	801709e <udp_sendto_if_src+0x76>
 801708a:	4b52      	ldr	r3, [pc, #328]	@ (80171d4 <udp_sendto_if_src+0x1ac>)
 801708c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8017090:	4955      	ldr	r1, [pc, #340]	@ (80171e8 <udp_sendto_if_src+0x1c0>)
 8017092:	4852      	ldr	r0, [pc, #328]	@ (80171dc <udp_sendto_if_src+0x1b4>)
 8017094:	f000 fb4e 	bl	8017734 <iprintf>
 8017098:	f06f 030f 	mvn.w	r3, #15
 801709c:	e095      	b.n	80171ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801709e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d109      	bne.n	80170b8 <udp_sendto_if_src+0x90>
 80170a4:	4b4b      	ldr	r3, [pc, #300]	@ (80171d4 <udp_sendto_if_src+0x1ac>)
 80170a6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80170aa:	4950      	ldr	r1, [pc, #320]	@ (80171ec <udp_sendto_if_src+0x1c4>)
 80170ac:	484b      	ldr	r0, [pc, #300]	@ (80171dc <udp_sendto_if_src+0x1b4>)
 80170ae:	f000 fb41 	bl	8017734 <iprintf>
 80170b2:	f06f 030f 	mvn.w	r3, #15
 80170b6:	e088      	b.n	80171ca <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	8a5b      	ldrh	r3, [r3, #18]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d10f      	bne.n	80170e0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80170c0:	68f9      	ldr	r1, [r7, #12]
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	8a5b      	ldrh	r3, [r3, #18]
 80170c6:	461a      	mov	r2, r3
 80170c8:	68f8      	ldr	r0, [r7, #12]
 80170ca:	f000 f893 	bl	80171f4 <udp_bind>
 80170ce:	4603      	mov	r3, r0
 80170d0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80170d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d002      	beq.n	80170e0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80170da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80170de:	e074      	b.n	80171ca <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80170e0:	68bb      	ldr	r3, [r7, #8]
 80170e2:	891b      	ldrh	r3, [r3, #8]
 80170e4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80170e8:	4293      	cmp	r3, r2
 80170ea:	d902      	bls.n	80170f2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80170ec:	f04f 33ff 	mov.w	r3, #4294967295
 80170f0:	e06b      	b.n	80171ca <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80170f2:	2108      	movs	r1, #8
 80170f4:	68b8      	ldr	r0, [r7, #8]
 80170f6:	f7f9 fcbb 	bl	8010a70 <pbuf_add_header>
 80170fa:	4603      	mov	r3, r0
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d015      	beq.n	801712c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8017100:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017104:	2108      	movs	r1, #8
 8017106:	2022      	movs	r0, #34	@ 0x22
 8017108:	f7f9 fa66 	bl	80105d8 <pbuf_alloc>
 801710c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801710e:	69fb      	ldr	r3, [r7, #28]
 8017110:	2b00      	cmp	r3, #0
 8017112:	d102      	bne.n	801711a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8017114:	f04f 33ff 	mov.w	r3, #4294967295
 8017118:	e057      	b.n	80171ca <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801711a:	68bb      	ldr	r3, [r7, #8]
 801711c:	891b      	ldrh	r3, [r3, #8]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d006      	beq.n	8017130 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8017122:	68b9      	ldr	r1, [r7, #8]
 8017124:	69f8      	ldr	r0, [r7, #28]
 8017126:	f7f9 fe5d 	bl	8010de4 <pbuf_chain>
 801712a:	e001      	b.n	8017130 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801712c:	68bb      	ldr	r3, [r7, #8]
 801712e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8017130:	69fb      	ldr	r3, [r7, #28]
 8017132:	895b      	ldrh	r3, [r3, #10]
 8017134:	2b07      	cmp	r3, #7
 8017136:	d806      	bhi.n	8017146 <udp_sendto_if_src+0x11e>
 8017138:	4b26      	ldr	r3, [pc, #152]	@ (80171d4 <udp_sendto_if_src+0x1ac>)
 801713a:	f240 320d 	movw	r2, #781	@ 0x30d
 801713e:	492c      	ldr	r1, [pc, #176]	@ (80171f0 <udp_sendto_if_src+0x1c8>)
 8017140:	4826      	ldr	r0, [pc, #152]	@ (80171dc <udp_sendto_if_src+0x1b4>)
 8017142:	f000 faf7 	bl	8017734 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8017146:	69fb      	ldr	r3, [r7, #28]
 8017148:	685b      	ldr	r3, [r3, #4]
 801714a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	8a5b      	ldrh	r3, [r3, #18]
 8017150:	4618      	mov	r0, r3
 8017152:	f7f3 fe67 	bl	800ae24 <lwip_htons>
 8017156:	4603      	mov	r3, r0
 8017158:	461a      	mov	r2, r3
 801715a:	697b      	ldr	r3, [r7, #20]
 801715c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801715e:	887b      	ldrh	r3, [r7, #2]
 8017160:	4618      	mov	r0, r3
 8017162:	f7f3 fe5f 	bl	800ae24 <lwip_htons>
 8017166:	4603      	mov	r3, r0
 8017168:	461a      	mov	r2, r3
 801716a:	697b      	ldr	r3, [r7, #20]
 801716c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801716e:	697b      	ldr	r3, [r7, #20]
 8017170:	2200      	movs	r2, #0
 8017172:	719a      	strb	r2, [r3, #6]
 8017174:	2200      	movs	r2, #0
 8017176:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8017178:	69fb      	ldr	r3, [r7, #28]
 801717a:	891b      	ldrh	r3, [r3, #8]
 801717c:	4618      	mov	r0, r3
 801717e:	f7f3 fe51 	bl	800ae24 <lwip_htons>
 8017182:	4603      	mov	r3, r0
 8017184:	461a      	mov	r2, r3
 8017186:	697b      	ldr	r3, [r7, #20]
 8017188:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801718a:	2311      	movs	r3, #17
 801718c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	7adb      	ldrb	r3, [r3, #11]
 8017192:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	7a9b      	ldrb	r3, [r3, #10]
 8017198:	7cb9      	ldrb	r1, [r7, #18]
 801719a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801719c:	9202      	str	r2, [sp, #8]
 801719e:	7cfa      	ldrb	r2, [r7, #19]
 80171a0:	9201      	str	r2, [sp, #4]
 80171a2:	9300      	str	r3, [sp, #0]
 80171a4:	460b      	mov	r3, r1
 80171a6:	687a      	ldr	r2, [r7, #4]
 80171a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80171aa:	69f8      	ldr	r0, [r7, #28]
 80171ac:	f7f7 f9a8 	bl	800e500 <ip4_output_if_src>
 80171b0:	4603      	mov	r3, r0
 80171b2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80171b4:	69fa      	ldr	r2, [r7, #28]
 80171b6:	68bb      	ldr	r3, [r7, #8]
 80171b8:	429a      	cmp	r2, r3
 80171ba:	d004      	beq.n	80171c6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80171bc:	69f8      	ldr	r0, [r7, #28]
 80171be:	f7f9 fced 	bl	8010b9c <pbuf_free>
    q = NULL;
 80171c2:	2300      	movs	r3, #0
 80171c4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80171c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80171ca:	4618      	mov	r0, r3
 80171cc:	3720      	adds	r7, #32
 80171ce:	46bd      	mov	sp, r7
 80171d0:	bd80      	pop	{r7, pc}
 80171d2:	bf00      	nop
 80171d4:	0801b4a4 	.word	0x0801b4a4
 80171d8:	0801b6c4 	.word	0x0801b6c4
 80171dc:	0801b52c 	.word	0x0801b52c
 80171e0:	0801b6e4 	.word	0x0801b6e4
 80171e4:	0801b704 	.word	0x0801b704
 80171e8:	0801b728 	.word	0x0801b728
 80171ec:	0801b74c 	.word	0x0801b74c
 80171f0:	0801b770 	.word	0x0801b770

080171f4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b086      	sub	sp, #24
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	60f8      	str	r0, [r7, #12]
 80171fc:	60b9      	str	r1, [r7, #8]
 80171fe:	4613      	mov	r3, r2
 8017200:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017202:	68bb      	ldr	r3, [r7, #8]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d101      	bne.n	801720c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8017208:	4b39      	ldr	r3, [pc, #228]	@ (80172f0 <udp_bind+0xfc>)
 801720a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d109      	bne.n	8017226 <udp_bind+0x32>
 8017212:	4b38      	ldr	r3, [pc, #224]	@ (80172f4 <udp_bind+0x100>)
 8017214:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8017218:	4937      	ldr	r1, [pc, #220]	@ (80172f8 <udp_bind+0x104>)
 801721a:	4838      	ldr	r0, [pc, #224]	@ (80172fc <udp_bind+0x108>)
 801721c:	f000 fa8a 	bl	8017734 <iprintf>
 8017220:	f06f 030f 	mvn.w	r3, #15
 8017224:	e060      	b.n	80172e8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8017226:	2300      	movs	r3, #0
 8017228:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801722a:	4b35      	ldr	r3, [pc, #212]	@ (8017300 <udp_bind+0x10c>)
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	617b      	str	r3, [r7, #20]
 8017230:	e009      	b.n	8017246 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8017232:	68fa      	ldr	r2, [r7, #12]
 8017234:	697b      	ldr	r3, [r7, #20]
 8017236:	429a      	cmp	r2, r3
 8017238:	d102      	bne.n	8017240 <udp_bind+0x4c>
      rebind = 1;
 801723a:	2301      	movs	r3, #1
 801723c:	74fb      	strb	r3, [r7, #19]
      break;
 801723e:	e005      	b.n	801724c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017240:	697b      	ldr	r3, [r7, #20]
 8017242:	68db      	ldr	r3, [r3, #12]
 8017244:	617b      	str	r3, [r7, #20]
 8017246:	697b      	ldr	r3, [r7, #20]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d1f2      	bne.n	8017232 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801724c:	88fb      	ldrh	r3, [r7, #6]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d109      	bne.n	8017266 <udp_bind+0x72>
    port = udp_new_port();
 8017252:	f7ff fcc5 	bl	8016be0 <udp_new_port>
 8017256:	4603      	mov	r3, r0
 8017258:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801725a:	88fb      	ldrh	r3, [r7, #6]
 801725c:	2b00      	cmp	r3, #0
 801725e:	d12c      	bne.n	80172ba <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017260:	f06f 0307 	mvn.w	r3, #7
 8017264:	e040      	b.n	80172e8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017266:	4b26      	ldr	r3, [pc, #152]	@ (8017300 <udp_bind+0x10c>)
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	617b      	str	r3, [r7, #20]
 801726c:	e022      	b.n	80172b4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801726e:	68fa      	ldr	r2, [r7, #12]
 8017270:	697b      	ldr	r3, [r7, #20]
 8017272:	429a      	cmp	r2, r3
 8017274:	d01b      	beq.n	80172ae <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8017276:	697b      	ldr	r3, [r7, #20]
 8017278:	8a5b      	ldrh	r3, [r3, #18]
 801727a:	88fa      	ldrh	r2, [r7, #6]
 801727c:	429a      	cmp	r2, r3
 801727e:	d116      	bne.n	80172ae <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017280:	697b      	ldr	r3, [r7, #20]
 8017282:	681a      	ldr	r2, [r3, #0]
 8017284:	68bb      	ldr	r3, [r7, #8]
 8017286:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017288:	429a      	cmp	r2, r3
 801728a:	d00d      	beq.n	80172a8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801728c:	68bb      	ldr	r3, [r7, #8]
 801728e:	2b00      	cmp	r3, #0
 8017290:	d00a      	beq.n	80172a8 <udp_bind+0xb4>
 8017292:	68bb      	ldr	r3, [r7, #8]
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d006      	beq.n	80172a8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801729a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801729c:	2b00      	cmp	r3, #0
 801729e:	d003      	beq.n	80172a8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80172a0:	697b      	ldr	r3, [r7, #20]
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d102      	bne.n	80172ae <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80172a8:	f06f 0307 	mvn.w	r3, #7
 80172ac:	e01c      	b.n	80172e8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80172ae:	697b      	ldr	r3, [r7, #20]
 80172b0:	68db      	ldr	r3, [r3, #12]
 80172b2:	617b      	str	r3, [r7, #20]
 80172b4:	697b      	ldr	r3, [r7, #20]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d1d9      	bne.n	801726e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80172ba:	68bb      	ldr	r3, [r7, #8]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d002      	beq.n	80172c6 <udp_bind+0xd2>
 80172c0:	68bb      	ldr	r3, [r7, #8]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	e000      	b.n	80172c8 <udp_bind+0xd4>
 80172c6:	2300      	movs	r3, #0
 80172c8:	68fa      	ldr	r2, [r7, #12]
 80172ca:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	88fa      	ldrh	r2, [r7, #6]
 80172d0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80172d2:	7cfb      	ldrb	r3, [r7, #19]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d106      	bne.n	80172e6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80172d8:	4b09      	ldr	r3, [pc, #36]	@ (8017300 <udp_bind+0x10c>)
 80172da:	681a      	ldr	r2, [r3, #0]
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80172e0:	4a07      	ldr	r2, [pc, #28]	@ (8017300 <udp_bind+0x10c>)
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80172e6:	2300      	movs	r3, #0
}
 80172e8:	4618      	mov	r0, r3
 80172ea:	3718      	adds	r7, #24
 80172ec:	46bd      	mov	sp, r7
 80172ee:	bd80      	pop	{r7, pc}
 80172f0:	0801b8b0 	.word	0x0801b8b0
 80172f4:	0801b4a4 	.word	0x0801b4a4
 80172f8:	0801b7a0 	.word	0x0801b7a0
 80172fc:	0801b52c 	.word	0x0801b52c
 8017300:	24007f6c 	.word	0x24007f6c

08017304 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b086      	sub	sp, #24
 8017308:	af00      	add	r7, sp, #0
 801730a:	60f8      	str	r0, [r7, #12]
 801730c:	60b9      	str	r1, [r7, #8]
 801730e:	4613      	mov	r3, r2
 8017310:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d109      	bne.n	801732c <udp_connect+0x28>
 8017318:	4b2c      	ldr	r3, [pc, #176]	@ (80173cc <udp_connect+0xc8>)
 801731a:	f240 4235 	movw	r2, #1077	@ 0x435
 801731e:	492c      	ldr	r1, [pc, #176]	@ (80173d0 <udp_connect+0xcc>)
 8017320:	482c      	ldr	r0, [pc, #176]	@ (80173d4 <udp_connect+0xd0>)
 8017322:	f000 fa07 	bl	8017734 <iprintf>
 8017326:	f06f 030f 	mvn.w	r3, #15
 801732a:	e04b      	b.n	80173c4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801732c:	68bb      	ldr	r3, [r7, #8]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d109      	bne.n	8017346 <udp_connect+0x42>
 8017332:	4b26      	ldr	r3, [pc, #152]	@ (80173cc <udp_connect+0xc8>)
 8017334:	f240 4236 	movw	r2, #1078	@ 0x436
 8017338:	4927      	ldr	r1, [pc, #156]	@ (80173d8 <udp_connect+0xd4>)
 801733a:	4826      	ldr	r0, [pc, #152]	@ (80173d4 <udp_connect+0xd0>)
 801733c:	f000 f9fa 	bl	8017734 <iprintf>
 8017340:	f06f 030f 	mvn.w	r3, #15
 8017344:	e03e      	b.n	80173c4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	8a5b      	ldrh	r3, [r3, #18]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d10f      	bne.n	801736e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801734e:	68f9      	ldr	r1, [r7, #12]
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	8a5b      	ldrh	r3, [r3, #18]
 8017354:	461a      	mov	r2, r3
 8017356:	68f8      	ldr	r0, [r7, #12]
 8017358:	f7ff ff4c 	bl	80171f4 <udp_bind>
 801735c:	4603      	mov	r3, r0
 801735e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8017360:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d002      	beq.n	801736e <udp_connect+0x6a>
      return err;
 8017368:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801736c:	e02a      	b.n	80173c4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801736e:	68bb      	ldr	r3, [r7, #8]
 8017370:	2b00      	cmp	r3, #0
 8017372:	d002      	beq.n	801737a <udp_connect+0x76>
 8017374:	68bb      	ldr	r3, [r7, #8]
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	e000      	b.n	801737c <udp_connect+0x78>
 801737a:	2300      	movs	r3, #0
 801737c:	68fa      	ldr	r2, [r7, #12]
 801737e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	88fa      	ldrh	r2, [r7, #6]
 8017384:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	7c1b      	ldrb	r3, [r3, #16]
 801738a:	f043 0304 	orr.w	r3, r3, #4
 801738e:	b2da      	uxtb	r2, r3
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017394:	4b11      	ldr	r3, [pc, #68]	@ (80173dc <udp_connect+0xd8>)
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	617b      	str	r3, [r7, #20]
 801739a:	e008      	b.n	80173ae <udp_connect+0xaa>
    if (pcb == ipcb) {
 801739c:	68fa      	ldr	r2, [r7, #12]
 801739e:	697b      	ldr	r3, [r7, #20]
 80173a0:	429a      	cmp	r2, r3
 80173a2:	d101      	bne.n	80173a8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80173a4:	2300      	movs	r3, #0
 80173a6:	e00d      	b.n	80173c4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80173a8:	697b      	ldr	r3, [r7, #20]
 80173aa:	68db      	ldr	r3, [r3, #12]
 80173ac:	617b      	str	r3, [r7, #20]
 80173ae:	697b      	ldr	r3, [r7, #20]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d1f3      	bne.n	801739c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80173b4:	4b09      	ldr	r3, [pc, #36]	@ (80173dc <udp_connect+0xd8>)
 80173b6:	681a      	ldr	r2, [r3, #0]
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80173bc:	4a07      	ldr	r2, [pc, #28]	@ (80173dc <udp_connect+0xd8>)
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80173c2:	2300      	movs	r3, #0
}
 80173c4:	4618      	mov	r0, r3
 80173c6:	3718      	adds	r7, #24
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}
 80173cc:	0801b4a4 	.word	0x0801b4a4
 80173d0:	0801b7b8 	.word	0x0801b7b8
 80173d4:	0801b52c 	.word	0x0801b52c
 80173d8:	0801b7d4 	.word	0x0801b7d4
 80173dc:	24007f6c 	.word	0x24007f6c

080173e0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b084      	sub	sp, #16
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	60f8      	str	r0, [r7, #12]
 80173e8:	60b9      	str	r1, [r7, #8]
 80173ea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d107      	bne.n	8017402 <udp_recv+0x22>
 80173f2:	4b08      	ldr	r3, [pc, #32]	@ (8017414 <udp_recv+0x34>)
 80173f4:	f240 428a 	movw	r2, #1162	@ 0x48a
 80173f8:	4907      	ldr	r1, [pc, #28]	@ (8017418 <udp_recv+0x38>)
 80173fa:	4808      	ldr	r0, [pc, #32]	@ (801741c <udp_recv+0x3c>)
 80173fc:	f000 f99a 	bl	8017734 <iprintf>
 8017400:	e005      	b.n	801740e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	68ba      	ldr	r2, [r7, #8]
 8017406:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	687a      	ldr	r2, [r7, #4]
 801740c:	61da      	str	r2, [r3, #28]
}
 801740e:	3710      	adds	r7, #16
 8017410:	46bd      	mov	sp, r7
 8017412:	bd80      	pop	{r7, pc}
 8017414:	0801b4a4 	.word	0x0801b4a4
 8017418:	0801b80c 	.word	0x0801b80c
 801741c:	0801b52c 	.word	0x0801b52c

08017420 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8017420:	b580      	push	{r7, lr}
 8017422:	b084      	sub	sp, #16
 8017424:	af00      	add	r7, sp, #0
 8017426:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d107      	bne.n	801743e <udp_remove+0x1e>
 801742e:	4b19      	ldr	r3, [pc, #100]	@ (8017494 <udp_remove+0x74>)
 8017430:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8017434:	4918      	ldr	r1, [pc, #96]	@ (8017498 <udp_remove+0x78>)
 8017436:	4819      	ldr	r0, [pc, #100]	@ (801749c <udp_remove+0x7c>)
 8017438:	f000 f97c 	bl	8017734 <iprintf>
 801743c:	e026      	b.n	801748c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801743e:	4b18      	ldr	r3, [pc, #96]	@ (80174a0 <udp_remove+0x80>)
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	687a      	ldr	r2, [r7, #4]
 8017444:	429a      	cmp	r2, r3
 8017446:	d105      	bne.n	8017454 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8017448:	4b15      	ldr	r3, [pc, #84]	@ (80174a0 <udp_remove+0x80>)
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	68db      	ldr	r3, [r3, #12]
 801744e:	4a14      	ldr	r2, [pc, #80]	@ (80174a0 <udp_remove+0x80>)
 8017450:	6013      	str	r3, [r2, #0]
 8017452:	e017      	b.n	8017484 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017454:	4b12      	ldr	r3, [pc, #72]	@ (80174a0 <udp_remove+0x80>)
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	60fb      	str	r3, [r7, #12]
 801745a:	e010      	b.n	801747e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	68db      	ldr	r3, [r3, #12]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d009      	beq.n	8017478 <udp_remove+0x58>
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	68db      	ldr	r3, [r3, #12]
 8017468:	687a      	ldr	r2, [r7, #4]
 801746a:	429a      	cmp	r2, r3
 801746c:	d104      	bne.n	8017478 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	68da      	ldr	r2, [r3, #12]
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	60da      	str	r2, [r3, #12]
        break;
 8017476:	e005      	b.n	8017484 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	68db      	ldr	r3, [r3, #12]
 801747c:	60fb      	str	r3, [r7, #12]
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d1eb      	bne.n	801745c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8017484:	6879      	ldr	r1, [r7, #4]
 8017486:	2000      	movs	r0, #0
 8017488:	f7f8 fcda 	bl	800fe40 <memp_free>
}
 801748c:	3710      	adds	r7, #16
 801748e:	46bd      	mov	sp, r7
 8017490:	bd80      	pop	{r7, pc}
 8017492:	bf00      	nop
 8017494:	0801b4a4 	.word	0x0801b4a4
 8017498:	0801b824 	.word	0x0801b824
 801749c:	0801b52c 	.word	0x0801b52c
 80174a0:	24007f6c 	.word	0x24007f6c

080174a4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b082      	sub	sp, #8
 80174a8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80174aa:	2000      	movs	r0, #0
 80174ac:	f7f8 fc52 	bl	800fd54 <memp_malloc>
 80174b0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d007      	beq.n	80174c8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80174b8:	2220      	movs	r2, #32
 80174ba:	2100      	movs	r1, #0
 80174bc:	6878      	ldr	r0, [r7, #4]
 80174be:	f000 fa91 	bl	80179e4 <memset>
    pcb->ttl = UDP_TTL;
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	22ff      	movs	r2, #255	@ 0xff
 80174c6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80174c8:	687b      	ldr	r3, [r7, #4]
}
 80174ca:	4618      	mov	r0, r3
 80174cc:	3708      	adds	r7, #8
 80174ce:	46bd      	mov	sp, r7
 80174d0:	bd80      	pop	{r7, pc}
	...

080174d4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80174d4:	b480      	push	{r7}
 80174d6:	b085      	sub	sp, #20
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
 80174dc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d01e      	beq.n	8017522 <udp_netif_ip_addr_changed+0x4e>
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d01a      	beq.n	8017522 <udp_netif_ip_addr_changed+0x4e>
 80174ec:	683b      	ldr	r3, [r7, #0]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d017      	beq.n	8017522 <udp_netif_ip_addr_changed+0x4e>
 80174f2:	683b      	ldr	r3, [r7, #0]
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d013      	beq.n	8017522 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80174fa:	4b0d      	ldr	r3, [pc, #52]	@ (8017530 <udp_netif_ip_addr_changed+0x5c>)
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	60fb      	str	r3, [r7, #12]
 8017500:	e00c      	b.n	801751c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	681a      	ldr	r2, [r3, #0]
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	429a      	cmp	r2, r3
 801750c:	d103      	bne.n	8017516 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801750e:	683b      	ldr	r3, [r7, #0]
 8017510:	681a      	ldr	r2, [r3, #0]
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	68db      	ldr	r3, [r3, #12]
 801751a:	60fb      	str	r3, [r7, #12]
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d1ef      	bne.n	8017502 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8017522:	bf00      	nop
 8017524:	3714      	adds	r7, #20
 8017526:	46bd      	mov	sp, r7
 8017528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801752c:	4770      	bx	lr
 801752e:	bf00      	nop
 8017530:	24007f6c 	.word	0x24007f6c

08017534 <rand>:
 8017534:	4b16      	ldr	r3, [pc, #88]	@ (8017590 <rand+0x5c>)
 8017536:	b510      	push	{r4, lr}
 8017538:	681c      	ldr	r4, [r3, #0]
 801753a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801753c:	b9b3      	cbnz	r3, 801756c <rand+0x38>
 801753e:	2018      	movs	r0, #24
 8017540:	f000 fb3c 	bl	8017bbc <malloc>
 8017544:	4602      	mov	r2, r0
 8017546:	6320      	str	r0, [r4, #48]	@ 0x30
 8017548:	b920      	cbnz	r0, 8017554 <rand+0x20>
 801754a:	4b12      	ldr	r3, [pc, #72]	@ (8017594 <rand+0x60>)
 801754c:	4812      	ldr	r0, [pc, #72]	@ (8017598 <rand+0x64>)
 801754e:	2152      	movs	r1, #82	@ 0x52
 8017550:	f000 facc 	bl	8017aec <__assert_func>
 8017554:	4911      	ldr	r1, [pc, #68]	@ (801759c <rand+0x68>)
 8017556:	4b12      	ldr	r3, [pc, #72]	@ (80175a0 <rand+0x6c>)
 8017558:	e9c0 1300 	strd	r1, r3, [r0]
 801755c:	4b11      	ldr	r3, [pc, #68]	@ (80175a4 <rand+0x70>)
 801755e:	6083      	str	r3, [r0, #8]
 8017560:	230b      	movs	r3, #11
 8017562:	8183      	strh	r3, [r0, #12]
 8017564:	2100      	movs	r1, #0
 8017566:	2001      	movs	r0, #1
 8017568:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801756c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801756e:	480e      	ldr	r0, [pc, #56]	@ (80175a8 <rand+0x74>)
 8017570:	690b      	ldr	r3, [r1, #16]
 8017572:	694c      	ldr	r4, [r1, #20]
 8017574:	4a0d      	ldr	r2, [pc, #52]	@ (80175ac <rand+0x78>)
 8017576:	4358      	muls	r0, r3
 8017578:	fb02 0004 	mla	r0, r2, r4, r0
 801757c:	fba3 3202 	umull	r3, r2, r3, r2
 8017580:	3301      	adds	r3, #1
 8017582:	eb40 0002 	adc.w	r0, r0, r2
 8017586:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801758a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801758e:	bd10      	pop	{r4, pc}
 8017590:	24000060 	.word	0x24000060
 8017594:	0801b9d8 	.word	0x0801b9d8
 8017598:	0801b9ef 	.word	0x0801b9ef
 801759c:	abcd330e 	.word	0xabcd330e
 80175a0:	e66d1234 	.word	0xe66d1234
 80175a4:	0005deec 	.word	0x0005deec
 80175a8:	5851f42d 	.word	0x5851f42d
 80175ac:	4c957f2d 	.word	0x4c957f2d

080175b0 <std>:
 80175b0:	2300      	movs	r3, #0
 80175b2:	b510      	push	{r4, lr}
 80175b4:	4604      	mov	r4, r0
 80175b6:	e9c0 3300 	strd	r3, r3, [r0]
 80175ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80175be:	6083      	str	r3, [r0, #8]
 80175c0:	8181      	strh	r1, [r0, #12]
 80175c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80175c4:	81c2      	strh	r2, [r0, #14]
 80175c6:	6183      	str	r3, [r0, #24]
 80175c8:	4619      	mov	r1, r3
 80175ca:	2208      	movs	r2, #8
 80175cc:	305c      	adds	r0, #92	@ 0x5c
 80175ce:	f000 fa09 	bl	80179e4 <memset>
 80175d2:	4b0d      	ldr	r3, [pc, #52]	@ (8017608 <std+0x58>)
 80175d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80175d6:	4b0d      	ldr	r3, [pc, #52]	@ (801760c <std+0x5c>)
 80175d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80175da:	4b0d      	ldr	r3, [pc, #52]	@ (8017610 <std+0x60>)
 80175dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80175de:	4b0d      	ldr	r3, [pc, #52]	@ (8017614 <std+0x64>)
 80175e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80175e2:	4b0d      	ldr	r3, [pc, #52]	@ (8017618 <std+0x68>)
 80175e4:	6224      	str	r4, [r4, #32]
 80175e6:	429c      	cmp	r4, r3
 80175e8:	d006      	beq.n	80175f8 <std+0x48>
 80175ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80175ee:	4294      	cmp	r4, r2
 80175f0:	d002      	beq.n	80175f8 <std+0x48>
 80175f2:	33d0      	adds	r3, #208	@ 0xd0
 80175f4:	429c      	cmp	r4, r3
 80175f6:	d105      	bne.n	8017604 <std+0x54>
 80175f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80175fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017600:	f000 ba62 	b.w	8017ac8 <__retarget_lock_init_recursive>
 8017604:	bd10      	pop	{r4, pc}
 8017606:	bf00      	nop
 8017608:	08017815 	.word	0x08017815
 801760c:	08017837 	.word	0x08017837
 8017610:	0801786f 	.word	0x0801786f
 8017614:	08017893 	.word	0x08017893
 8017618:	24007f70 	.word	0x24007f70

0801761c <stdio_exit_handler>:
 801761c:	4a02      	ldr	r2, [pc, #8]	@ (8017628 <stdio_exit_handler+0xc>)
 801761e:	4903      	ldr	r1, [pc, #12]	@ (801762c <stdio_exit_handler+0x10>)
 8017620:	4803      	ldr	r0, [pc, #12]	@ (8017630 <stdio_exit_handler+0x14>)
 8017622:	f000 b869 	b.w	80176f8 <_fwalk_sglue>
 8017626:	bf00      	nop
 8017628:	24000054 	.word	0x24000054
 801762c:	080183d1 	.word	0x080183d1
 8017630:	24000064 	.word	0x24000064

08017634 <cleanup_stdio>:
 8017634:	6841      	ldr	r1, [r0, #4]
 8017636:	4b0c      	ldr	r3, [pc, #48]	@ (8017668 <cleanup_stdio+0x34>)
 8017638:	4299      	cmp	r1, r3
 801763a:	b510      	push	{r4, lr}
 801763c:	4604      	mov	r4, r0
 801763e:	d001      	beq.n	8017644 <cleanup_stdio+0x10>
 8017640:	f000 fec6 	bl	80183d0 <_fflush_r>
 8017644:	68a1      	ldr	r1, [r4, #8]
 8017646:	4b09      	ldr	r3, [pc, #36]	@ (801766c <cleanup_stdio+0x38>)
 8017648:	4299      	cmp	r1, r3
 801764a:	d002      	beq.n	8017652 <cleanup_stdio+0x1e>
 801764c:	4620      	mov	r0, r4
 801764e:	f000 febf 	bl	80183d0 <_fflush_r>
 8017652:	68e1      	ldr	r1, [r4, #12]
 8017654:	4b06      	ldr	r3, [pc, #24]	@ (8017670 <cleanup_stdio+0x3c>)
 8017656:	4299      	cmp	r1, r3
 8017658:	d004      	beq.n	8017664 <cleanup_stdio+0x30>
 801765a:	4620      	mov	r0, r4
 801765c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017660:	f000 beb6 	b.w	80183d0 <_fflush_r>
 8017664:	bd10      	pop	{r4, pc}
 8017666:	bf00      	nop
 8017668:	24007f70 	.word	0x24007f70
 801766c:	24007fd8 	.word	0x24007fd8
 8017670:	24008040 	.word	0x24008040

08017674 <global_stdio_init.part.0>:
 8017674:	b510      	push	{r4, lr}
 8017676:	4b0b      	ldr	r3, [pc, #44]	@ (80176a4 <global_stdio_init.part.0+0x30>)
 8017678:	4c0b      	ldr	r4, [pc, #44]	@ (80176a8 <global_stdio_init.part.0+0x34>)
 801767a:	4a0c      	ldr	r2, [pc, #48]	@ (80176ac <global_stdio_init.part.0+0x38>)
 801767c:	601a      	str	r2, [r3, #0]
 801767e:	4620      	mov	r0, r4
 8017680:	2200      	movs	r2, #0
 8017682:	2104      	movs	r1, #4
 8017684:	f7ff ff94 	bl	80175b0 <std>
 8017688:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801768c:	2201      	movs	r2, #1
 801768e:	2109      	movs	r1, #9
 8017690:	f7ff ff8e 	bl	80175b0 <std>
 8017694:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017698:	2202      	movs	r2, #2
 801769a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801769e:	2112      	movs	r1, #18
 80176a0:	f7ff bf86 	b.w	80175b0 <std>
 80176a4:	240080a8 	.word	0x240080a8
 80176a8:	24007f70 	.word	0x24007f70
 80176ac:	0801761d 	.word	0x0801761d

080176b0 <__sfp_lock_acquire>:
 80176b0:	4801      	ldr	r0, [pc, #4]	@ (80176b8 <__sfp_lock_acquire+0x8>)
 80176b2:	f000 ba0a 	b.w	8017aca <__retarget_lock_acquire_recursive>
 80176b6:	bf00      	nop
 80176b8:	240080ad 	.word	0x240080ad

080176bc <__sfp_lock_release>:
 80176bc:	4801      	ldr	r0, [pc, #4]	@ (80176c4 <__sfp_lock_release+0x8>)
 80176be:	f000 ba05 	b.w	8017acc <__retarget_lock_release_recursive>
 80176c2:	bf00      	nop
 80176c4:	240080ad 	.word	0x240080ad

080176c8 <__sinit>:
 80176c8:	b510      	push	{r4, lr}
 80176ca:	4604      	mov	r4, r0
 80176cc:	f7ff fff0 	bl	80176b0 <__sfp_lock_acquire>
 80176d0:	6a23      	ldr	r3, [r4, #32]
 80176d2:	b11b      	cbz	r3, 80176dc <__sinit+0x14>
 80176d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176d8:	f7ff bff0 	b.w	80176bc <__sfp_lock_release>
 80176dc:	4b04      	ldr	r3, [pc, #16]	@ (80176f0 <__sinit+0x28>)
 80176de:	6223      	str	r3, [r4, #32]
 80176e0:	4b04      	ldr	r3, [pc, #16]	@ (80176f4 <__sinit+0x2c>)
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d1f5      	bne.n	80176d4 <__sinit+0xc>
 80176e8:	f7ff ffc4 	bl	8017674 <global_stdio_init.part.0>
 80176ec:	e7f2      	b.n	80176d4 <__sinit+0xc>
 80176ee:	bf00      	nop
 80176f0:	08017635 	.word	0x08017635
 80176f4:	240080a8 	.word	0x240080a8

080176f8 <_fwalk_sglue>:
 80176f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176fc:	4607      	mov	r7, r0
 80176fe:	4688      	mov	r8, r1
 8017700:	4614      	mov	r4, r2
 8017702:	2600      	movs	r6, #0
 8017704:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017708:	f1b9 0901 	subs.w	r9, r9, #1
 801770c:	d505      	bpl.n	801771a <_fwalk_sglue+0x22>
 801770e:	6824      	ldr	r4, [r4, #0]
 8017710:	2c00      	cmp	r4, #0
 8017712:	d1f7      	bne.n	8017704 <_fwalk_sglue+0xc>
 8017714:	4630      	mov	r0, r6
 8017716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801771a:	89ab      	ldrh	r3, [r5, #12]
 801771c:	2b01      	cmp	r3, #1
 801771e:	d907      	bls.n	8017730 <_fwalk_sglue+0x38>
 8017720:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017724:	3301      	adds	r3, #1
 8017726:	d003      	beq.n	8017730 <_fwalk_sglue+0x38>
 8017728:	4629      	mov	r1, r5
 801772a:	4638      	mov	r0, r7
 801772c:	47c0      	blx	r8
 801772e:	4306      	orrs	r6, r0
 8017730:	3568      	adds	r5, #104	@ 0x68
 8017732:	e7e9      	b.n	8017708 <_fwalk_sglue+0x10>

08017734 <iprintf>:
 8017734:	b40f      	push	{r0, r1, r2, r3}
 8017736:	b507      	push	{r0, r1, r2, lr}
 8017738:	4906      	ldr	r1, [pc, #24]	@ (8017754 <iprintf+0x20>)
 801773a:	ab04      	add	r3, sp, #16
 801773c:	6808      	ldr	r0, [r1, #0]
 801773e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017742:	6881      	ldr	r1, [r0, #8]
 8017744:	9301      	str	r3, [sp, #4]
 8017746:	f000 fb19 	bl	8017d7c <_vfiprintf_r>
 801774a:	b003      	add	sp, #12
 801774c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017750:	b004      	add	sp, #16
 8017752:	4770      	bx	lr
 8017754:	24000060 	.word	0x24000060

08017758 <_puts_r>:
 8017758:	6a03      	ldr	r3, [r0, #32]
 801775a:	b570      	push	{r4, r5, r6, lr}
 801775c:	6884      	ldr	r4, [r0, #8]
 801775e:	4605      	mov	r5, r0
 8017760:	460e      	mov	r6, r1
 8017762:	b90b      	cbnz	r3, 8017768 <_puts_r+0x10>
 8017764:	f7ff ffb0 	bl	80176c8 <__sinit>
 8017768:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801776a:	07db      	lsls	r3, r3, #31
 801776c:	d405      	bmi.n	801777a <_puts_r+0x22>
 801776e:	89a3      	ldrh	r3, [r4, #12]
 8017770:	0598      	lsls	r0, r3, #22
 8017772:	d402      	bmi.n	801777a <_puts_r+0x22>
 8017774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017776:	f000 f9a8 	bl	8017aca <__retarget_lock_acquire_recursive>
 801777a:	89a3      	ldrh	r3, [r4, #12]
 801777c:	0719      	lsls	r1, r3, #28
 801777e:	d502      	bpl.n	8017786 <_puts_r+0x2e>
 8017780:	6923      	ldr	r3, [r4, #16]
 8017782:	2b00      	cmp	r3, #0
 8017784:	d135      	bne.n	80177f2 <_puts_r+0x9a>
 8017786:	4621      	mov	r1, r4
 8017788:	4628      	mov	r0, r5
 801778a:	f000 f8c5 	bl	8017918 <__swsetup_r>
 801778e:	b380      	cbz	r0, 80177f2 <_puts_r+0x9a>
 8017790:	f04f 35ff 	mov.w	r5, #4294967295
 8017794:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017796:	07da      	lsls	r2, r3, #31
 8017798:	d405      	bmi.n	80177a6 <_puts_r+0x4e>
 801779a:	89a3      	ldrh	r3, [r4, #12]
 801779c:	059b      	lsls	r3, r3, #22
 801779e:	d402      	bmi.n	80177a6 <_puts_r+0x4e>
 80177a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80177a2:	f000 f993 	bl	8017acc <__retarget_lock_release_recursive>
 80177a6:	4628      	mov	r0, r5
 80177a8:	bd70      	pop	{r4, r5, r6, pc}
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	da04      	bge.n	80177b8 <_puts_r+0x60>
 80177ae:	69a2      	ldr	r2, [r4, #24]
 80177b0:	429a      	cmp	r2, r3
 80177b2:	dc17      	bgt.n	80177e4 <_puts_r+0x8c>
 80177b4:	290a      	cmp	r1, #10
 80177b6:	d015      	beq.n	80177e4 <_puts_r+0x8c>
 80177b8:	6823      	ldr	r3, [r4, #0]
 80177ba:	1c5a      	adds	r2, r3, #1
 80177bc:	6022      	str	r2, [r4, #0]
 80177be:	7019      	strb	r1, [r3, #0]
 80177c0:	68a3      	ldr	r3, [r4, #8]
 80177c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80177c6:	3b01      	subs	r3, #1
 80177c8:	60a3      	str	r3, [r4, #8]
 80177ca:	2900      	cmp	r1, #0
 80177cc:	d1ed      	bne.n	80177aa <_puts_r+0x52>
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	da11      	bge.n	80177f6 <_puts_r+0x9e>
 80177d2:	4622      	mov	r2, r4
 80177d4:	210a      	movs	r1, #10
 80177d6:	4628      	mov	r0, r5
 80177d8:	f000 f85f 	bl	801789a <__swbuf_r>
 80177dc:	3001      	adds	r0, #1
 80177de:	d0d7      	beq.n	8017790 <_puts_r+0x38>
 80177e0:	250a      	movs	r5, #10
 80177e2:	e7d7      	b.n	8017794 <_puts_r+0x3c>
 80177e4:	4622      	mov	r2, r4
 80177e6:	4628      	mov	r0, r5
 80177e8:	f000 f857 	bl	801789a <__swbuf_r>
 80177ec:	3001      	adds	r0, #1
 80177ee:	d1e7      	bne.n	80177c0 <_puts_r+0x68>
 80177f0:	e7ce      	b.n	8017790 <_puts_r+0x38>
 80177f2:	3e01      	subs	r6, #1
 80177f4:	e7e4      	b.n	80177c0 <_puts_r+0x68>
 80177f6:	6823      	ldr	r3, [r4, #0]
 80177f8:	1c5a      	adds	r2, r3, #1
 80177fa:	6022      	str	r2, [r4, #0]
 80177fc:	220a      	movs	r2, #10
 80177fe:	701a      	strb	r2, [r3, #0]
 8017800:	e7ee      	b.n	80177e0 <_puts_r+0x88>
	...

08017804 <puts>:
 8017804:	4b02      	ldr	r3, [pc, #8]	@ (8017810 <puts+0xc>)
 8017806:	4601      	mov	r1, r0
 8017808:	6818      	ldr	r0, [r3, #0]
 801780a:	f7ff bfa5 	b.w	8017758 <_puts_r>
 801780e:	bf00      	nop
 8017810:	24000060 	.word	0x24000060

08017814 <__sread>:
 8017814:	b510      	push	{r4, lr}
 8017816:	460c      	mov	r4, r1
 8017818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801781c:	f000 f90c 	bl	8017a38 <_read_r>
 8017820:	2800      	cmp	r0, #0
 8017822:	bfab      	itete	ge
 8017824:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017826:	89a3      	ldrhlt	r3, [r4, #12]
 8017828:	181b      	addge	r3, r3, r0
 801782a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801782e:	bfac      	ite	ge
 8017830:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017832:	81a3      	strhlt	r3, [r4, #12]
 8017834:	bd10      	pop	{r4, pc}

08017836 <__swrite>:
 8017836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801783a:	461f      	mov	r7, r3
 801783c:	898b      	ldrh	r3, [r1, #12]
 801783e:	05db      	lsls	r3, r3, #23
 8017840:	4605      	mov	r5, r0
 8017842:	460c      	mov	r4, r1
 8017844:	4616      	mov	r6, r2
 8017846:	d505      	bpl.n	8017854 <__swrite+0x1e>
 8017848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801784c:	2302      	movs	r3, #2
 801784e:	2200      	movs	r2, #0
 8017850:	f000 f8e0 	bl	8017a14 <_lseek_r>
 8017854:	89a3      	ldrh	r3, [r4, #12]
 8017856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801785a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801785e:	81a3      	strh	r3, [r4, #12]
 8017860:	4632      	mov	r2, r6
 8017862:	463b      	mov	r3, r7
 8017864:	4628      	mov	r0, r5
 8017866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801786a:	f000 b8f7 	b.w	8017a5c <_write_r>

0801786e <__sseek>:
 801786e:	b510      	push	{r4, lr}
 8017870:	460c      	mov	r4, r1
 8017872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017876:	f000 f8cd 	bl	8017a14 <_lseek_r>
 801787a:	1c43      	adds	r3, r0, #1
 801787c:	89a3      	ldrh	r3, [r4, #12]
 801787e:	bf15      	itete	ne
 8017880:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017882:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017886:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801788a:	81a3      	strheq	r3, [r4, #12]
 801788c:	bf18      	it	ne
 801788e:	81a3      	strhne	r3, [r4, #12]
 8017890:	bd10      	pop	{r4, pc}

08017892 <__sclose>:
 8017892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017896:	f000 b8ad 	b.w	80179f4 <_close_r>

0801789a <__swbuf_r>:
 801789a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801789c:	460e      	mov	r6, r1
 801789e:	4614      	mov	r4, r2
 80178a0:	4605      	mov	r5, r0
 80178a2:	b118      	cbz	r0, 80178ac <__swbuf_r+0x12>
 80178a4:	6a03      	ldr	r3, [r0, #32]
 80178a6:	b90b      	cbnz	r3, 80178ac <__swbuf_r+0x12>
 80178a8:	f7ff ff0e 	bl	80176c8 <__sinit>
 80178ac:	69a3      	ldr	r3, [r4, #24]
 80178ae:	60a3      	str	r3, [r4, #8]
 80178b0:	89a3      	ldrh	r3, [r4, #12]
 80178b2:	071a      	lsls	r2, r3, #28
 80178b4:	d501      	bpl.n	80178ba <__swbuf_r+0x20>
 80178b6:	6923      	ldr	r3, [r4, #16]
 80178b8:	b943      	cbnz	r3, 80178cc <__swbuf_r+0x32>
 80178ba:	4621      	mov	r1, r4
 80178bc:	4628      	mov	r0, r5
 80178be:	f000 f82b 	bl	8017918 <__swsetup_r>
 80178c2:	b118      	cbz	r0, 80178cc <__swbuf_r+0x32>
 80178c4:	f04f 37ff 	mov.w	r7, #4294967295
 80178c8:	4638      	mov	r0, r7
 80178ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178cc:	6823      	ldr	r3, [r4, #0]
 80178ce:	6922      	ldr	r2, [r4, #16]
 80178d0:	1a98      	subs	r0, r3, r2
 80178d2:	6963      	ldr	r3, [r4, #20]
 80178d4:	b2f6      	uxtb	r6, r6
 80178d6:	4283      	cmp	r3, r0
 80178d8:	4637      	mov	r7, r6
 80178da:	dc05      	bgt.n	80178e8 <__swbuf_r+0x4e>
 80178dc:	4621      	mov	r1, r4
 80178de:	4628      	mov	r0, r5
 80178e0:	f000 fd76 	bl	80183d0 <_fflush_r>
 80178e4:	2800      	cmp	r0, #0
 80178e6:	d1ed      	bne.n	80178c4 <__swbuf_r+0x2a>
 80178e8:	68a3      	ldr	r3, [r4, #8]
 80178ea:	3b01      	subs	r3, #1
 80178ec:	60a3      	str	r3, [r4, #8]
 80178ee:	6823      	ldr	r3, [r4, #0]
 80178f0:	1c5a      	adds	r2, r3, #1
 80178f2:	6022      	str	r2, [r4, #0]
 80178f4:	701e      	strb	r6, [r3, #0]
 80178f6:	6962      	ldr	r2, [r4, #20]
 80178f8:	1c43      	adds	r3, r0, #1
 80178fa:	429a      	cmp	r2, r3
 80178fc:	d004      	beq.n	8017908 <__swbuf_r+0x6e>
 80178fe:	89a3      	ldrh	r3, [r4, #12]
 8017900:	07db      	lsls	r3, r3, #31
 8017902:	d5e1      	bpl.n	80178c8 <__swbuf_r+0x2e>
 8017904:	2e0a      	cmp	r6, #10
 8017906:	d1df      	bne.n	80178c8 <__swbuf_r+0x2e>
 8017908:	4621      	mov	r1, r4
 801790a:	4628      	mov	r0, r5
 801790c:	f000 fd60 	bl	80183d0 <_fflush_r>
 8017910:	2800      	cmp	r0, #0
 8017912:	d0d9      	beq.n	80178c8 <__swbuf_r+0x2e>
 8017914:	e7d6      	b.n	80178c4 <__swbuf_r+0x2a>
	...

08017918 <__swsetup_r>:
 8017918:	b538      	push	{r3, r4, r5, lr}
 801791a:	4b29      	ldr	r3, [pc, #164]	@ (80179c0 <__swsetup_r+0xa8>)
 801791c:	4605      	mov	r5, r0
 801791e:	6818      	ldr	r0, [r3, #0]
 8017920:	460c      	mov	r4, r1
 8017922:	b118      	cbz	r0, 801792c <__swsetup_r+0x14>
 8017924:	6a03      	ldr	r3, [r0, #32]
 8017926:	b90b      	cbnz	r3, 801792c <__swsetup_r+0x14>
 8017928:	f7ff fece 	bl	80176c8 <__sinit>
 801792c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017930:	0719      	lsls	r1, r3, #28
 8017932:	d422      	bmi.n	801797a <__swsetup_r+0x62>
 8017934:	06da      	lsls	r2, r3, #27
 8017936:	d407      	bmi.n	8017948 <__swsetup_r+0x30>
 8017938:	2209      	movs	r2, #9
 801793a:	602a      	str	r2, [r5, #0]
 801793c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017940:	81a3      	strh	r3, [r4, #12]
 8017942:	f04f 30ff 	mov.w	r0, #4294967295
 8017946:	e033      	b.n	80179b0 <__swsetup_r+0x98>
 8017948:	0758      	lsls	r0, r3, #29
 801794a:	d512      	bpl.n	8017972 <__swsetup_r+0x5a>
 801794c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801794e:	b141      	cbz	r1, 8017962 <__swsetup_r+0x4a>
 8017950:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017954:	4299      	cmp	r1, r3
 8017956:	d002      	beq.n	801795e <__swsetup_r+0x46>
 8017958:	4628      	mov	r0, r5
 801795a:	f000 f8e5 	bl	8017b28 <_free_r>
 801795e:	2300      	movs	r3, #0
 8017960:	6363      	str	r3, [r4, #52]	@ 0x34
 8017962:	89a3      	ldrh	r3, [r4, #12]
 8017964:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017968:	81a3      	strh	r3, [r4, #12]
 801796a:	2300      	movs	r3, #0
 801796c:	6063      	str	r3, [r4, #4]
 801796e:	6923      	ldr	r3, [r4, #16]
 8017970:	6023      	str	r3, [r4, #0]
 8017972:	89a3      	ldrh	r3, [r4, #12]
 8017974:	f043 0308 	orr.w	r3, r3, #8
 8017978:	81a3      	strh	r3, [r4, #12]
 801797a:	6923      	ldr	r3, [r4, #16]
 801797c:	b94b      	cbnz	r3, 8017992 <__swsetup_r+0x7a>
 801797e:	89a3      	ldrh	r3, [r4, #12]
 8017980:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017988:	d003      	beq.n	8017992 <__swsetup_r+0x7a>
 801798a:	4621      	mov	r1, r4
 801798c:	4628      	mov	r0, r5
 801798e:	f000 fd7f 	bl	8018490 <__smakebuf_r>
 8017992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017996:	f013 0201 	ands.w	r2, r3, #1
 801799a:	d00a      	beq.n	80179b2 <__swsetup_r+0x9a>
 801799c:	2200      	movs	r2, #0
 801799e:	60a2      	str	r2, [r4, #8]
 80179a0:	6962      	ldr	r2, [r4, #20]
 80179a2:	4252      	negs	r2, r2
 80179a4:	61a2      	str	r2, [r4, #24]
 80179a6:	6922      	ldr	r2, [r4, #16]
 80179a8:	b942      	cbnz	r2, 80179bc <__swsetup_r+0xa4>
 80179aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80179ae:	d1c5      	bne.n	801793c <__swsetup_r+0x24>
 80179b0:	bd38      	pop	{r3, r4, r5, pc}
 80179b2:	0799      	lsls	r1, r3, #30
 80179b4:	bf58      	it	pl
 80179b6:	6962      	ldrpl	r2, [r4, #20]
 80179b8:	60a2      	str	r2, [r4, #8]
 80179ba:	e7f4      	b.n	80179a6 <__swsetup_r+0x8e>
 80179bc:	2000      	movs	r0, #0
 80179be:	e7f7      	b.n	80179b0 <__swsetup_r+0x98>
 80179c0:	24000060 	.word	0x24000060

080179c4 <memcmp>:
 80179c4:	b510      	push	{r4, lr}
 80179c6:	3901      	subs	r1, #1
 80179c8:	4402      	add	r2, r0
 80179ca:	4290      	cmp	r0, r2
 80179cc:	d101      	bne.n	80179d2 <memcmp+0xe>
 80179ce:	2000      	movs	r0, #0
 80179d0:	e005      	b.n	80179de <memcmp+0x1a>
 80179d2:	7803      	ldrb	r3, [r0, #0]
 80179d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80179d8:	42a3      	cmp	r3, r4
 80179da:	d001      	beq.n	80179e0 <memcmp+0x1c>
 80179dc:	1b18      	subs	r0, r3, r4
 80179de:	bd10      	pop	{r4, pc}
 80179e0:	3001      	adds	r0, #1
 80179e2:	e7f2      	b.n	80179ca <memcmp+0x6>

080179e4 <memset>:
 80179e4:	4402      	add	r2, r0
 80179e6:	4603      	mov	r3, r0
 80179e8:	4293      	cmp	r3, r2
 80179ea:	d100      	bne.n	80179ee <memset+0xa>
 80179ec:	4770      	bx	lr
 80179ee:	f803 1b01 	strb.w	r1, [r3], #1
 80179f2:	e7f9      	b.n	80179e8 <memset+0x4>

080179f4 <_close_r>:
 80179f4:	b538      	push	{r3, r4, r5, lr}
 80179f6:	4d06      	ldr	r5, [pc, #24]	@ (8017a10 <_close_r+0x1c>)
 80179f8:	2300      	movs	r3, #0
 80179fa:	4604      	mov	r4, r0
 80179fc:	4608      	mov	r0, r1
 80179fe:	602b      	str	r3, [r5, #0]
 8017a00:	f7e9 fa90 	bl	8000f24 <_close>
 8017a04:	1c43      	adds	r3, r0, #1
 8017a06:	d102      	bne.n	8017a0e <_close_r+0x1a>
 8017a08:	682b      	ldr	r3, [r5, #0]
 8017a0a:	b103      	cbz	r3, 8017a0e <_close_r+0x1a>
 8017a0c:	6023      	str	r3, [r4, #0]
 8017a0e:	bd38      	pop	{r3, r4, r5, pc}
 8017a10:	24007ef8 	.word	0x24007ef8

08017a14 <_lseek_r>:
 8017a14:	b538      	push	{r3, r4, r5, lr}
 8017a16:	4d07      	ldr	r5, [pc, #28]	@ (8017a34 <_lseek_r+0x20>)
 8017a18:	4604      	mov	r4, r0
 8017a1a:	4608      	mov	r0, r1
 8017a1c:	4611      	mov	r1, r2
 8017a1e:	2200      	movs	r2, #0
 8017a20:	602a      	str	r2, [r5, #0]
 8017a22:	461a      	mov	r2, r3
 8017a24:	f7e9 faa5 	bl	8000f72 <_lseek>
 8017a28:	1c43      	adds	r3, r0, #1
 8017a2a:	d102      	bne.n	8017a32 <_lseek_r+0x1e>
 8017a2c:	682b      	ldr	r3, [r5, #0]
 8017a2e:	b103      	cbz	r3, 8017a32 <_lseek_r+0x1e>
 8017a30:	6023      	str	r3, [r4, #0]
 8017a32:	bd38      	pop	{r3, r4, r5, pc}
 8017a34:	24007ef8 	.word	0x24007ef8

08017a38 <_read_r>:
 8017a38:	b538      	push	{r3, r4, r5, lr}
 8017a3a:	4d07      	ldr	r5, [pc, #28]	@ (8017a58 <_read_r+0x20>)
 8017a3c:	4604      	mov	r4, r0
 8017a3e:	4608      	mov	r0, r1
 8017a40:	4611      	mov	r1, r2
 8017a42:	2200      	movs	r2, #0
 8017a44:	602a      	str	r2, [r5, #0]
 8017a46:	461a      	mov	r2, r3
 8017a48:	f7e9 fa33 	bl	8000eb2 <_read>
 8017a4c:	1c43      	adds	r3, r0, #1
 8017a4e:	d102      	bne.n	8017a56 <_read_r+0x1e>
 8017a50:	682b      	ldr	r3, [r5, #0]
 8017a52:	b103      	cbz	r3, 8017a56 <_read_r+0x1e>
 8017a54:	6023      	str	r3, [r4, #0]
 8017a56:	bd38      	pop	{r3, r4, r5, pc}
 8017a58:	24007ef8 	.word	0x24007ef8

08017a5c <_write_r>:
 8017a5c:	b538      	push	{r3, r4, r5, lr}
 8017a5e:	4d07      	ldr	r5, [pc, #28]	@ (8017a7c <_write_r+0x20>)
 8017a60:	4604      	mov	r4, r0
 8017a62:	4608      	mov	r0, r1
 8017a64:	4611      	mov	r1, r2
 8017a66:	2200      	movs	r2, #0
 8017a68:	602a      	str	r2, [r5, #0]
 8017a6a:	461a      	mov	r2, r3
 8017a6c:	f7e9 fa3e 	bl	8000eec <_write>
 8017a70:	1c43      	adds	r3, r0, #1
 8017a72:	d102      	bne.n	8017a7a <_write_r+0x1e>
 8017a74:	682b      	ldr	r3, [r5, #0]
 8017a76:	b103      	cbz	r3, 8017a7a <_write_r+0x1e>
 8017a78:	6023      	str	r3, [r4, #0]
 8017a7a:	bd38      	pop	{r3, r4, r5, pc}
 8017a7c:	24007ef8 	.word	0x24007ef8

08017a80 <__libc_init_array>:
 8017a80:	b570      	push	{r4, r5, r6, lr}
 8017a82:	4d0d      	ldr	r5, [pc, #52]	@ (8017ab8 <__libc_init_array+0x38>)
 8017a84:	4c0d      	ldr	r4, [pc, #52]	@ (8017abc <__libc_init_array+0x3c>)
 8017a86:	1b64      	subs	r4, r4, r5
 8017a88:	10a4      	asrs	r4, r4, #2
 8017a8a:	2600      	movs	r6, #0
 8017a8c:	42a6      	cmp	r6, r4
 8017a8e:	d109      	bne.n	8017aa4 <__libc_init_array+0x24>
 8017a90:	4d0b      	ldr	r5, [pc, #44]	@ (8017ac0 <__libc_init_array+0x40>)
 8017a92:	4c0c      	ldr	r4, [pc, #48]	@ (8017ac4 <__libc_init_array+0x44>)
 8017a94:	f000 fdb6 	bl	8018604 <_init>
 8017a98:	1b64      	subs	r4, r4, r5
 8017a9a:	10a4      	asrs	r4, r4, #2
 8017a9c:	2600      	movs	r6, #0
 8017a9e:	42a6      	cmp	r6, r4
 8017aa0:	d105      	bne.n	8017aae <__libc_init_array+0x2e>
 8017aa2:	bd70      	pop	{r4, r5, r6, pc}
 8017aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8017aa8:	4798      	blx	r3
 8017aaa:	3601      	adds	r6, #1
 8017aac:	e7ee      	b.n	8017a8c <__libc_init_array+0xc>
 8017aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ab2:	4798      	blx	r3
 8017ab4:	3601      	adds	r6, #1
 8017ab6:	e7f2      	b.n	8017a9e <__libc_init_array+0x1e>
 8017ab8:	0801bac0 	.word	0x0801bac0
 8017abc:	0801bac0 	.word	0x0801bac0
 8017ac0:	0801bac0 	.word	0x0801bac0
 8017ac4:	0801bac4 	.word	0x0801bac4

08017ac8 <__retarget_lock_init_recursive>:
 8017ac8:	4770      	bx	lr

08017aca <__retarget_lock_acquire_recursive>:
 8017aca:	4770      	bx	lr

08017acc <__retarget_lock_release_recursive>:
 8017acc:	4770      	bx	lr

08017ace <memcpy>:
 8017ace:	440a      	add	r2, r1
 8017ad0:	4291      	cmp	r1, r2
 8017ad2:	f100 33ff 	add.w	r3, r0, #4294967295
 8017ad6:	d100      	bne.n	8017ada <memcpy+0xc>
 8017ad8:	4770      	bx	lr
 8017ada:	b510      	push	{r4, lr}
 8017adc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ae0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017ae4:	4291      	cmp	r1, r2
 8017ae6:	d1f9      	bne.n	8017adc <memcpy+0xe>
 8017ae8:	bd10      	pop	{r4, pc}
	...

08017aec <__assert_func>:
 8017aec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017aee:	4614      	mov	r4, r2
 8017af0:	461a      	mov	r2, r3
 8017af2:	4b09      	ldr	r3, [pc, #36]	@ (8017b18 <__assert_func+0x2c>)
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	4605      	mov	r5, r0
 8017af8:	68d8      	ldr	r0, [r3, #12]
 8017afa:	b954      	cbnz	r4, 8017b12 <__assert_func+0x26>
 8017afc:	4b07      	ldr	r3, [pc, #28]	@ (8017b1c <__assert_func+0x30>)
 8017afe:	461c      	mov	r4, r3
 8017b00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017b04:	9100      	str	r1, [sp, #0]
 8017b06:	462b      	mov	r3, r5
 8017b08:	4905      	ldr	r1, [pc, #20]	@ (8017b20 <__assert_func+0x34>)
 8017b0a:	f000 fc89 	bl	8018420 <fiprintf>
 8017b0e:	f000 fd2d 	bl	801856c <abort>
 8017b12:	4b04      	ldr	r3, [pc, #16]	@ (8017b24 <__assert_func+0x38>)
 8017b14:	e7f4      	b.n	8017b00 <__assert_func+0x14>
 8017b16:	bf00      	nop
 8017b18:	24000060 	.word	0x24000060
 8017b1c:	0801ba82 	.word	0x0801ba82
 8017b20:	0801ba54 	.word	0x0801ba54
 8017b24:	0801ba47 	.word	0x0801ba47

08017b28 <_free_r>:
 8017b28:	b538      	push	{r3, r4, r5, lr}
 8017b2a:	4605      	mov	r5, r0
 8017b2c:	2900      	cmp	r1, #0
 8017b2e:	d041      	beq.n	8017bb4 <_free_r+0x8c>
 8017b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b34:	1f0c      	subs	r4, r1, #4
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	bfb8      	it	lt
 8017b3a:	18e4      	addlt	r4, r4, r3
 8017b3c:	f000 f8e8 	bl	8017d10 <__malloc_lock>
 8017b40:	4a1d      	ldr	r2, [pc, #116]	@ (8017bb8 <_free_r+0x90>)
 8017b42:	6813      	ldr	r3, [r2, #0]
 8017b44:	b933      	cbnz	r3, 8017b54 <_free_r+0x2c>
 8017b46:	6063      	str	r3, [r4, #4]
 8017b48:	6014      	str	r4, [r2, #0]
 8017b4a:	4628      	mov	r0, r5
 8017b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b50:	f000 b8e4 	b.w	8017d1c <__malloc_unlock>
 8017b54:	42a3      	cmp	r3, r4
 8017b56:	d908      	bls.n	8017b6a <_free_r+0x42>
 8017b58:	6820      	ldr	r0, [r4, #0]
 8017b5a:	1821      	adds	r1, r4, r0
 8017b5c:	428b      	cmp	r3, r1
 8017b5e:	bf01      	itttt	eq
 8017b60:	6819      	ldreq	r1, [r3, #0]
 8017b62:	685b      	ldreq	r3, [r3, #4]
 8017b64:	1809      	addeq	r1, r1, r0
 8017b66:	6021      	streq	r1, [r4, #0]
 8017b68:	e7ed      	b.n	8017b46 <_free_r+0x1e>
 8017b6a:	461a      	mov	r2, r3
 8017b6c:	685b      	ldr	r3, [r3, #4]
 8017b6e:	b10b      	cbz	r3, 8017b74 <_free_r+0x4c>
 8017b70:	42a3      	cmp	r3, r4
 8017b72:	d9fa      	bls.n	8017b6a <_free_r+0x42>
 8017b74:	6811      	ldr	r1, [r2, #0]
 8017b76:	1850      	adds	r0, r2, r1
 8017b78:	42a0      	cmp	r0, r4
 8017b7a:	d10b      	bne.n	8017b94 <_free_r+0x6c>
 8017b7c:	6820      	ldr	r0, [r4, #0]
 8017b7e:	4401      	add	r1, r0
 8017b80:	1850      	adds	r0, r2, r1
 8017b82:	4283      	cmp	r3, r0
 8017b84:	6011      	str	r1, [r2, #0]
 8017b86:	d1e0      	bne.n	8017b4a <_free_r+0x22>
 8017b88:	6818      	ldr	r0, [r3, #0]
 8017b8a:	685b      	ldr	r3, [r3, #4]
 8017b8c:	6053      	str	r3, [r2, #4]
 8017b8e:	4408      	add	r0, r1
 8017b90:	6010      	str	r0, [r2, #0]
 8017b92:	e7da      	b.n	8017b4a <_free_r+0x22>
 8017b94:	d902      	bls.n	8017b9c <_free_r+0x74>
 8017b96:	230c      	movs	r3, #12
 8017b98:	602b      	str	r3, [r5, #0]
 8017b9a:	e7d6      	b.n	8017b4a <_free_r+0x22>
 8017b9c:	6820      	ldr	r0, [r4, #0]
 8017b9e:	1821      	adds	r1, r4, r0
 8017ba0:	428b      	cmp	r3, r1
 8017ba2:	bf04      	itt	eq
 8017ba4:	6819      	ldreq	r1, [r3, #0]
 8017ba6:	685b      	ldreq	r3, [r3, #4]
 8017ba8:	6063      	str	r3, [r4, #4]
 8017baa:	bf04      	itt	eq
 8017bac:	1809      	addeq	r1, r1, r0
 8017bae:	6021      	streq	r1, [r4, #0]
 8017bb0:	6054      	str	r4, [r2, #4]
 8017bb2:	e7ca      	b.n	8017b4a <_free_r+0x22>
 8017bb4:	bd38      	pop	{r3, r4, r5, pc}
 8017bb6:	bf00      	nop
 8017bb8:	240080b4 	.word	0x240080b4

08017bbc <malloc>:
 8017bbc:	4b02      	ldr	r3, [pc, #8]	@ (8017bc8 <malloc+0xc>)
 8017bbe:	4601      	mov	r1, r0
 8017bc0:	6818      	ldr	r0, [r3, #0]
 8017bc2:	f000 b825 	b.w	8017c10 <_malloc_r>
 8017bc6:	bf00      	nop
 8017bc8:	24000060 	.word	0x24000060

08017bcc <sbrk_aligned>:
 8017bcc:	b570      	push	{r4, r5, r6, lr}
 8017bce:	4e0f      	ldr	r6, [pc, #60]	@ (8017c0c <sbrk_aligned+0x40>)
 8017bd0:	460c      	mov	r4, r1
 8017bd2:	6831      	ldr	r1, [r6, #0]
 8017bd4:	4605      	mov	r5, r0
 8017bd6:	b911      	cbnz	r1, 8017bde <sbrk_aligned+0x12>
 8017bd8:	f000 fcb8 	bl	801854c <_sbrk_r>
 8017bdc:	6030      	str	r0, [r6, #0]
 8017bde:	4621      	mov	r1, r4
 8017be0:	4628      	mov	r0, r5
 8017be2:	f000 fcb3 	bl	801854c <_sbrk_r>
 8017be6:	1c43      	adds	r3, r0, #1
 8017be8:	d103      	bne.n	8017bf2 <sbrk_aligned+0x26>
 8017bea:	f04f 34ff 	mov.w	r4, #4294967295
 8017bee:	4620      	mov	r0, r4
 8017bf0:	bd70      	pop	{r4, r5, r6, pc}
 8017bf2:	1cc4      	adds	r4, r0, #3
 8017bf4:	f024 0403 	bic.w	r4, r4, #3
 8017bf8:	42a0      	cmp	r0, r4
 8017bfa:	d0f8      	beq.n	8017bee <sbrk_aligned+0x22>
 8017bfc:	1a21      	subs	r1, r4, r0
 8017bfe:	4628      	mov	r0, r5
 8017c00:	f000 fca4 	bl	801854c <_sbrk_r>
 8017c04:	3001      	adds	r0, #1
 8017c06:	d1f2      	bne.n	8017bee <sbrk_aligned+0x22>
 8017c08:	e7ef      	b.n	8017bea <sbrk_aligned+0x1e>
 8017c0a:	bf00      	nop
 8017c0c:	240080b0 	.word	0x240080b0

08017c10 <_malloc_r>:
 8017c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c14:	1ccd      	adds	r5, r1, #3
 8017c16:	f025 0503 	bic.w	r5, r5, #3
 8017c1a:	3508      	adds	r5, #8
 8017c1c:	2d0c      	cmp	r5, #12
 8017c1e:	bf38      	it	cc
 8017c20:	250c      	movcc	r5, #12
 8017c22:	2d00      	cmp	r5, #0
 8017c24:	4606      	mov	r6, r0
 8017c26:	db01      	blt.n	8017c2c <_malloc_r+0x1c>
 8017c28:	42a9      	cmp	r1, r5
 8017c2a:	d904      	bls.n	8017c36 <_malloc_r+0x26>
 8017c2c:	230c      	movs	r3, #12
 8017c2e:	6033      	str	r3, [r6, #0]
 8017c30:	2000      	movs	r0, #0
 8017c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017d0c <_malloc_r+0xfc>
 8017c3a:	f000 f869 	bl	8017d10 <__malloc_lock>
 8017c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8017c42:	461c      	mov	r4, r3
 8017c44:	bb44      	cbnz	r4, 8017c98 <_malloc_r+0x88>
 8017c46:	4629      	mov	r1, r5
 8017c48:	4630      	mov	r0, r6
 8017c4a:	f7ff ffbf 	bl	8017bcc <sbrk_aligned>
 8017c4e:	1c43      	adds	r3, r0, #1
 8017c50:	4604      	mov	r4, r0
 8017c52:	d158      	bne.n	8017d06 <_malloc_r+0xf6>
 8017c54:	f8d8 4000 	ldr.w	r4, [r8]
 8017c58:	4627      	mov	r7, r4
 8017c5a:	2f00      	cmp	r7, #0
 8017c5c:	d143      	bne.n	8017ce6 <_malloc_r+0xd6>
 8017c5e:	2c00      	cmp	r4, #0
 8017c60:	d04b      	beq.n	8017cfa <_malloc_r+0xea>
 8017c62:	6823      	ldr	r3, [r4, #0]
 8017c64:	4639      	mov	r1, r7
 8017c66:	4630      	mov	r0, r6
 8017c68:	eb04 0903 	add.w	r9, r4, r3
 8017c6c:	f000 fc6e 	bl	801854c <_sbrk_r>
 8017c70:	4581      	cmp	r9, r0
 8017c72:	d142      	bne.n	8017cfa <_malloc_r+0xea>
 8017c74:	6821      	ldr	r1, [r4, #0]
 8017c76:	1a6d      	subs	r5, r5, r1
 8017c78:	4629      	mov	r1, r5
 8017c7a:	4630      	mov	r0, r6
 8017c7c:	f7ff ffa6 	bl	8017bcc <sbrk_aligned>
 8017c80:	3001      	adds	r0, #1
 8017c82:	d03a      	beq.n	8017cfa <_malloc_r+0xea>
 8017c84:	6823      	ldr	r3, [r4, #0]
 8017c86:	442b      	add	r3, r5
 8017c88:	6023      	str	r3, [r4, #0]
 8017c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8017c8e:	685a      	ldr	r2, [r3, #4]
 8017c90:	bb62      	cbnz	r2, 8017cec <_malloc_r+0xdc>
 8017c92:	f8c8 7000 	str.w	r7, [r8]
 8017c96:	e00f      	b.n	8017cb8 <_malloc_r+0xa8>
 8017c98:	6822      	ldr	r2, [r4, #0]
 8017c9a:	1b52      	subs	r2, r2, r5
 8017c9c:	d420      	bmi.n	8017ce0 <_malloc_r+0xd0>
 8017c9e:	2a0b      	cmp	r2, #11
 8017ca0:	d917      	bls.n	8017cd2 <_malloc_r+0xc2>
 8017ca2:	1961      	adds	r1, r4, r5
 8017ca4:	42a3      	cmp	r3, r4
 8017ca6:	6025      	str	r5, [r4, #0]
 8017ca8:	bf18      	it	ne
 8017caa:	6059      	strne	r1, [r3, #4]
 8017cac:	6863      	ldr	r3, [r4, #4]
 8017cae:	bf08      	it	eq
 8017cb0:	f8c8 1000 	streq.w	r1, [r8]
 8017cb4:	5162      	str	r2, [r4, r5]
 8017cb6:	604b      	str	r3, [r1, #4]
 8017cb8:	4630      	mov	r0, r6
 8017cba:	f000 f82f 	bl	8017d1c <__malloc_unlock>
 8017cbe:	f104 000b 	add.w	r0, r4, #11
 8017cc2:	1d23      	adds	r3, r4, #4
 8017cc4:	f020 0007 	bic.w	r0, r0, #7
 8017cc8:	1ac2      	subs	r2, r0, r3
 8017cca:	bf1c      	itt	ne
 8017ccc:	1a1b      	subne	r3, r3, r0
 8017cce:	50a3      	strne	r3, [r4, r2]
 8017cd0:	e7af      	b.n	8017c32 <_malloc_r+0x22>
 8017cd2:	6862      	ldr	r2, [r4, #4]
 8017cd4:	42a3      	cmp	r3, r4
 8017cd6:	bf0c      	ite	eq
 8017cd8:	f8c8 2000 	streq.w	r2, [r8]
 8017cdc:	605a      	strne	r2, [r3, #4]
 8017cde:	e7eb      	b.n	8017cb8 <_malloc_r+0xa8>
 8017ce0:	4623      	mov	r3, r4
 8017ce2:	6864      	ldr	r4, [r4, #4]
 8017ce4:	e7ae      	b.n	8017c44 <_malloc_r+0x34>
 8017ce6:	463c      	mov	r4, r7
 8017ce8:	687f      	ldr	r7, [r7, #4]
 8017cea:	e7b6      	b.n	8017c5a <_malloc_r+0x4a>
 8017cec:	461a      	mov	r2, r3
 8017cee:	685b      	ldr	r3, [r3, #4]
 8017cf0:	42a3      	cmp	r3, r4
 8017cf2:	d1fb      	bne.n	8017cec <_malloc_r+0xdc>
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	6053      	str	r3, [r2, #4]
 8017cf8:	e7de      	b.n	8017cb8 <_malloc_r+0xa8>
 8017cfa:	230c      	movs	r3, #12
 8017cfc:	6033      	str	r3, [r6, #0]
 8017cfe:	4630      	mov	r0, r6
 8017d00:	f000 f80c 	bl	8017d1c <__malloc_unlock>
 8017d04:	e794      	b.n	8017c30 <_malloc_r+0x20>
 8017d06:	6005      	str	r5, [r0, #0]
 8017d08:	e7d6      	b.n	8017cb8 <_malloc_r+0xa8>
 8017d0a:	bf00      	nop
 8017d0c:	240080b4 	.word	0x240080b4

08017d10 <__malloc_lock>:
 8017d10:	4801      	ldr	r0, [pc, #4]	@ (8017d18 <__malloc_lock+0x8>)
 8017d12:	f7ff beda 	b.w	8017aca <__retarget_lock_acquire_recursive>
 8017d16:	bf00      	nop
 8017d18:	240080ac 	.word	0x240080ac

08017d1c <__malloc_unlock>:
 8017d1c:	4801      	ldr	r0, [pc, #4]	@ (8017d24 <__malloc_unlock+0x8>)
 8017d1e:	f7ff bed5 	b.w	8017acc <__retarget_lock_release_recursive>
 8017d22:	bf00      	nop
 8017d24:	240080ac 	.word	0x240080ac

08017d28 <__sfputc_r>:
 8017d28:	6893      	ldr	r3, [r2, #8]
 8017d2a:	3b01      	subs	r3, #1
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	b410      	push	{r4}
 8017d30:	6093      	str	r3, [r2, #8]
 8017d32:	da08      	bge.n	8017d46 <__sfputc_r+0x1e>
 8017d34:	6994      	ldr	r4, [r2, #24]
 8017d36:	42a3      	cmp	r3, r4
 8017d38:	db01      	blt.n	8017d3e <__sfputc_r+0x16>
 8017d3a:	290a      	cmp	r1, #10
 8017d3c:	d103      	bne.n	8017d46 <__sfputc_r+0x1e>
 8017d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d42:	f7ff bdaa 	b.w	801789a <__swbuf_r>
 8017d46:	6813      	ldr	r3, [r2, #0]
 8017d48:	1c58      	adds	r0, r3, #1
 8017d4a:	6010      	str	r0, [r2, #0]
 8017d4c:	7019      	strb	r1, [r3, #0]
 8017d4e:	4608      	mov	r0, r1
 8017d50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d54:	4770      	bx	lr

08017d56 <__sfputs_r>:
 8017d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d58:	4606      	mov	r6, r0
 8017d5a:	460f      	mov	r7, r1
 8017d5c:	4614      	mov	r4, r2
 8017d5e:	18d5      	adds	r5, r2, r3
 8017d60:	42ac      	cmp	r4, r5
 8017d62:	d101      	bne.n	8017d68 <__sfputs_r+0x12>
 8017d64:	2000      	movs	r0, #0
 8017d66:	e007      	b.n	8017d78 <__sfputs_r+0x22>
 8017d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d6c:	463a      	mov	r2, r7
 8017d6e:	4630      	mov	r0, r6
 8017d70:	f7ff ffda 	bl	8017d28 <__sfputc_r>
 8017d74:	1c43      	adds	r3, r0, #1
 8017d76:	d1f3      	bne.n	8017d60 <__sfputs_r+0xa>
 8017d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017d7c <_vfiprintf_r>:
 8017d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d80:	460d      	mov	r5, r1
 8017d82:	b09d      	sub	sp, #116	@ 0x74
 8017d84:	4614      	mov	r4, r2
 8017d86:	4698      	mov	r8, r3
 8017d88:	4606      	mov	r6, r0
 8017d8a:	b118      	cbz	r0, 8017d94 <_vfiprintf_r+0x18>
 8017d8c:	6a03      	ldr	r3, [r0, #32]
 8017d8e:	b90b      	cbnz	r3, 8017d94 <_vfiprintf_r+0x18>
 8017d90:	f7ff fc9a 	bl	80176c8 <__sinit>
 8017d94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017d96:	07d9      	lsls	r1, r3, #31
 8017d98:	d405      	bmi.n	8017da6 <_vfiprintf_r+0x2a>
 8017d9a:	89ab      	ldrh	r3, [r5, #12]
 8017d9c:	059a      	lsls	r2, r3, #22
 8017d9e:	d402      	bmi.n	8017da6 <_vfiprintf_r+0x2a>
 8017da0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017da2:	f7ff fe92 	bl	8017aca <__retarget_lock_acquire_recursive>
 8017da6:	89ab      	ldrh	r3, [r5, #12]
 8017da8:	071b      	lsls	r3, r3, #28
 8017daa:	d501      	bpl.n	8017db0 <_vfiprintf_r+0x34>
 8017dac:	692b      	ldr	r3, [r5, #16]
 8017dae:	b99b      	cbnz	r3, 8017dd8 <_vfiprintf_r+0x5c>
 8017db0:	4629      	mov	r1, r5
 8017db2:	4630      	mov	r0, r6
 8017db4:	f7ff fdb0 	bl	8017918 <__swsetup_r>
 8017db8:	b170      	cbz	r0, 8017dd8 <_vfiprintf_r+0x5c>
 8017dba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017dbc:	07dc      	lsls	r4, r3, #31
 8017dbe:	d504      	bpl.n	8017dca <_vfiprintf_r+0x4e>
 8017dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8017dc4:	b01d      	add	sp, #116	@ 0x74
 8017dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dca:	89ab      	ldrh	r3, [r5, #12]
 8017dcc:	0598      	lsls	r0, r3, #22
 8017dce:	d4f7      	bmi.n	8017dc0 <_vfiprintf_r+0x44>
 8017dd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017dd2:	f7ff fe7b 	bl	8017acc <__retarget_lock_release_recursive>
 8017dd6:	e7f3      	b.n	8017dc0 <_vfiprintf_r+0x44>
 8017dd8:	2300      	movs	r3, #0
 8017dda:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ddc:	2320      	movs	r3, #32
 8017dde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8017de6:	2330      	movs	r3, #48	@ 0x30
 8017de8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017f98 <_vfiprintf_r+0x21c>
 8017dec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017df0:	f04f 0901 	mov.w	r9, #1
 8017df4:	4623      	mov	r3, r4
 8017df6:	469a      	mov	sl, r3
 8017df8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017dfc:	b10a      	cbz	r2, 8017e02 <_vfiprintf_r+0x86>
 8017dfe:	2a25      	cmp	r2, #37	@ 0x25
 8017e00:	d1f9      	bne.n	8017df6 <_vfiprintf_r+0x7a>
 8017e02:	ebba 0b04 	subs.w	fp, sl, r4
 8017e06:	d00b      	beq.n	8017e20 <_vfiprintf_r+0xa4>
 8017e08:	465b      	mov	r3, fp
 8017e0a:	4622      	mov	r2, r4
 8017e0c:	4629      	mov	r1, r5
 8017e0e:	4630      	mov	r0, r6
 8017e10:	f7ff ffa1 	bl	8017d56 <__sfputs_r>
 8017e14:	3001      	adds	r0, #1
 8017e16:	f000 80a7 	beq.w	8017f68 <_vfiprintf_r+0x1ec>
 8017e1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017e1c:	445a      	add	r2, fp
 8017e1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8017e20:	f89a 3000 	ldrb.w	r3, [sl]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	f000 809f 	beq.w	8017f68 <_vfiprintf_r+0x1ec>
 8017e2a:	2300      	movs	r3, #0
 8017e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8017e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e34:	f10a 0a01 	add.w	sl, sl, #1
 8017e38:	9304      	str	r3, [sp, #16]
 8017e3a:	9307      	str	r3, [sp, #28]
 8017e3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017e40:	931a      	str	r3, [sp, #104]	@ 0x68
 8017e42:	4654      	mov	r4, sl
 8017e44:	2205      	movs	r2, #5
 8017e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e4a:	4853      	ldr	r0, [pc, #332]	@ (8017f98 <_vfiprintf_r+0x21c>)
 8017e4c:	f7e8 fa48 	bl	80002e0 <memchr>
 8017e50:	9a04      	ldr	r2, [sp, #16]
 8017e52:	b9d8      	cbnz	r0, 8017e8c <_vfiprintf_r+0x110>
 8017e54:	06d1      	lsls	r1, r2, #27
 8017e56:	bf44      	itt	mi
 8017e58:	2320      	movmi	r3, #32
 8017e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017e5e:	0713      	lsls	r3, r2, #28
 8017e60:	bf44      	itt	mi
 8017e62:	232b      	movmi	r3, #43	@ 0x2b
 8017e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017e68:	f89a 3000 	ldrb.w	r3, [sl]
 8017e6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8017e6e:	d015      	beq.n	8017e9c <_vfiprintf_r+0x120>
 8017e70:	9a07      	ldr	r2, [sp, #28]
 8017e72:	4654      	mov	r4, sl
 8017e74:	2000      	movs	r0, #0
 8017e76:	f04f 0c0a 	mov.w	ip, #10
 8017e7a:	4621      	mov	r1, r4
 8017e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e80:	3b30      	subs	r3, #48	@ 0x30
 8017e82:	2b09      	cmp	r3, #9
 8017e84:	d94b      	bls.n	8017f1e <_vfiprintf_r+0x1a2>
 8017e86:	b1b0      	cbz	r0, 8017eb6 <_vfiprintf_r+0x13a>
 8017e88:	9207      	str	r2, [sp, #28]
 8017e8a:	e014      	b.n	8017eb6 <_vfiprintf_r+0x13a>
 8017e8c:	eba0 0308 	sub.w	r3, r0, r8
 8017e90:	fa09 f303 	lsl.w	r3, r9, r3
 8017e94:	4313      	orrs	r3, r2
 8017e96:	9304      	str	r3, [sp, #16]
 8017e98:	46a2      	mov	sl, r4
 8017e9a:	e7d2      	b.n	8017e42 <_vfiprintf_r+0xc6>
 8017e9c:	9b03      	ldr	r3, [sp, #12]
 8017e9e:	1d19      	adds	r1, r3, #4
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	9103      	str	r1, [sp, #12]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	bfbb      	ittet	lt
 8017ea8:	425b      	neglt	r3, r3
 8017eaa:	f042 0202 	orrlt.w	r2, r2, #2
 8017eae:	9307      	strge	r3, [sp, #28]
 8017eb0:	9307      	strlt	r3, [sp, #28]
 8017eb2:	bfb8      	it	lt
 8017eb4:	9204      	strlt	r2, [sp, #16]
 8017eb6:	7823      	ldrb	r3, [r4, #0]
 8017eb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8017eba:	d10a      	bne.n	8017ed2 <_vfiprintf_r+0x156>
 8017ebc:	7863      	ldrb	r3, [r4, #1]
 8017ebe:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ec0:	d132      	bne.n	8017f28 <_vfiprintf_r+0x1ac>
 8017ec2:	9b03      	ldr	r3, [sp, #12]
 8017ec4:	1d1a      	adds	r2, r3, #4
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	9203      	str	r2, [sp, #12]
 8017eca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017ece:	3402      	adds	r4, #2
 8017ed0:	9305      	str	r3, [sp, #20]
 8017ed2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017fa8 <_vfiprintf_r+0x22c>
 8017ed6:	7821      	ldrb	r1, [r4, #0]
 8017ed8:	2203      	movs	r2, #3
 8017eda:	4650      	mov	r0, sl
 8017edc:	f7e8 fa00 	bl	80002e0 <memchr>
 8017ee0:	b138      	cbz	r0, 8017ef2 <_vfiprintf_r+0x176>
 8017ee2:	9b04      	ldr	r3, [sp, #16]
 8017ee4:	eba0 000a 	sub.w	r0, r0, sl
 8017ee8:	2240      	movs	r2, #64	@ 0x40
 8017eea:	4082      	lsls	r2, r0
 8017eec:	4313      	orrs	r3, r2
 8017eee:	3401      	adds	r4, #1
 8017ef0:	9304      	str	r3, [sp, #16]
 8017ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ef6:	4829      	ldr	r0, [pc, #164]	@ (8017f9c <_vfiprintf_r+0x220>)
 8017ef8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017efc:	2206      	movs	r2, #6
 8017efe:	f7e8 f9ef 	bl	80002e0 <memchr>
 8017f02:	2800      	cmp	r0, #0
 8017f04:	d03f      	beq.n	8017f86 <_vfiprintf_r+0x20a>
 8017f06:	4b26      	ldr	r3, [pc, #152]	@ (8017fa0 <_vfiprintf_r+0x224>)
 8017f08:	bb1b      	cbnz	r3, 8017f52 <_vfiprintf_r+0x1d6>
 8017f0a:	9b03      	ldr	r3, [sp, #12]
 8017f0c:	3307      	adds	r3, #7
 8017f0e:	f023 0307 	bic.w	r3, r3, #7
 8017f12:	3308      	adds	r3, #8
 8017f14:	9303      	str	r3, [sp, #12]
 8017f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f18:	443b      	add	r3, r7
 8017f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f1c:	e76a      	b.n	8017df4 <_vfiprintf_r+0x78>
 8017f1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f22:	460c      	mov	r4, r1
 8017f24:	2001      	movs	r0, #1
 8017f26:	e7a8      	b.n	8017e7a <_vfiprintf_r+0xfe>
 8017f28:	2300      	movs	r3, #0
 8017f2a:	3401      	adds	r4, #1
 8017f2c:	9305      	str	r3, [sp, #20]
 8017f2e:	4619      	mov	r1, r3
 8017f30:	f04f 0c0a 	mov.w	ip, #10
 8017f34:	4620      	mov	r0, r4
 8017f36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f3a:	3a30      	subs	r2, #48	@ 0x30
 8017f3c:	2a09      	cmp	r2, #9
 8017f3e:	d903      	bls.n	8017f48 <_vfiprintf_r+0x1cc>
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d0c6      	beq.n	8017ed2 <_vfiprintf_r+0x156>
 8017f44:	9105      	str	r1, [sp, #20]
 8017f46:	e7c4      	b.n	8017ed2 <_vfiprintf_r+0x156>
 8017f48:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f4c:	4604      	mov	r4, r0
 8017f4e:	2301      	movs	r3, #1
 8017f50:	e7f0      	b.n	8017f34 <_vfiprintf_r+0x1b8>
 8017f52:	ab03      	add	r3, sp, #12
 8017f54:	9300      	str	r3, [sp, #0]
 8017f56:	462a      	mov	r2, r5
 8017f58:	4b12      	ldr	r3, [pc, #72]	@ (8017fa4 <_vfiprintf_r+0x228>)
 8017f5a:	a904      	add	r1, sp, #16
 8017f5c:	4630      	mov	r0, r6
 8017f5e:	f3af 8000 	nop.w
 8017f62:	4607      	mov	r7, r0
 8017f64:	1c78      	adds	r0, r7, #1
 8017f66:	d1d6      	bne.n	8017f16 <_vfiprintf_r+0x19a>
 8017f68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017f6a:	07d9      	lsls	r1, r3, #31
 8017f6c:	d405      	bmi.n	8017f7a <_vfiprintf_r+0x1fe>
 8017f6e:	89ab      	ldrh	r3, [r5, #12]
 8017f70:	059a      	lsls	r2, r3, #22
 8017f72:	d402      	bmi.n	8017f7a <_vfiprintf_r+0x1fe>
 8017f74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017f76:	f7ff fda9 	bl	8017acc <__retarget_lock_release_recursive>
 8017f7a:	89ab      	ldrh	r3, [r5, #12]
 8017f7c:	065b      	lsls	r3, r3, #25
 8017f7e:	f53f af1f 	bmi.w	8017dc0 <_vfiprintf_r+0x44>
 8017f82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f84:	e71e      	b.n	8017dc4 <_vfiprintf_r+0x48>
 8017f86:	ab03      	add	r3, sp, #12
 8017f88:	9300      	str	r3, [sp, #0]
 8017f8a:	462a      	mov	r2, r5
 8017f8c:	4b05      	ldr	r3, [pc, #20]	@ (8017fa4 <_vfiprintf_r+0x228>)
 8017f8e:	a904      	add	r1, sp, #16
 8017f90:	4630      	mov	r0, r6
 8017f92:	f000 f879 	bl	8018088 <_printf_i>
 8017f96:	e7e4      	b.n	8017f62 <_vfiprintf_r+0x1e6>
 8017f98:	0801ba83 	.word	0x0801ba83
 8017f9c:	0801ba8d 	.word	0x0801ba8d
 8017fa0:	00000000 	.word	0x00000000
 8017fa4:	08017d57 	.word	0x08017d57
 8017fa8:	0801ba89 	.word	0x0801ba89

08017fac <_printf_common>:
 8017fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fb0:	4616      	mov	r6, r2
 8017fb2:	4698      	mov	r8, r3
 8017fb4:	688a      	ldr	r2, [r1, #8]
 8017fb6:	690b      	ldr	r3, [r1, #16]
 8017fb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017fbc:	4293      	cmp	r3, r2
 8017fbe:	bfb8      	it	lt
 8017fc0:	4613      	movlt	r3, r2
 8017fc2:	6033      	str	r3, [r6, #0]
 8017fc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017fc8:	4607      	mov	r7, r0
 8017fca:	460c      	mov	r4, r1
 8017fcc:	b10a      	cbz	r2, 8017fd2 <_printf_common+0x26>
 8017fce:	3301      	adds	r3, #1
 8017fd0:	6033      	str	r3, [r6, #0]
 8017fd2:	6823      	ldr	r3, [r4, #0]
 8017fd4:	0699      	lsls	r1, r3, #26
 8017fd6:	bf42      	ittt	mi
 8017fd8:	6833      	ldrmi	r3, [r6, #0]
 8017fda:	3302      	addmi	r3, #2
 8017fdc:	6033      	strmi	r3, [r6, #0]
 8017fde:	6825      	ldr	r5, [r4, #0]
 8017fe0:	f015 0506 	ands.w	r5, r5, #6
 8017fe4:	d106      	bne.n	8017ff4 <_printf_common+0x48>
 8017fe6:	f104 0a19 	add.w	sl, r4, #25
 8017fea:	68e3      	ldr	r3, [r4, #12]
 8017fec:	6832      	ldr	r2, [r6, #0]
 8017fee:	1a9b      	subs	r3, r3, r2
 8017ff0:	42ab      	cmp	r3, r5
 8017ff2:	dc26      	bgt.n	8018042 <_printf_common+0x96>
 8017ff4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017ff8:	6822      	ldr	r2, [r4, #0]
 8017ffa:	3b00      	subs	r3, #0
 8017ffc:	bf18      	it	ne
 8017ffe:	2301      	movne	r3, #1
 8018000:	0692      	lsls	r2, r2, #26
 8018002:	d42b      	bmi.n	801805c <_printf_common+0xb0>
 8018004:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018008:	4641      	mov	r1, r8
 801800a:	4638      	mov	r0, r7
 801800c:	47c8      	blx	r9
 801800e:	3001      	adds	r0, #1
 8018010:	d01e      	beq.n	8018050 <_printf_common+0xa4>
 8018012:	6823      	ldr	r3, [r4, #0]
 8018014:	6922      	ldr	r2, [r4, #16]
 8018016:	f003 0306 	and.w	r3, r3, #6
 801801a:	2b04      	cmp	r3, #4
 801801c:	bf02      	ittt	eq
 801801e:	68e5      	ldreq	r5, [r4, #12]
 8018020:	6833      	ldreq	r3, [r6, #0]
 8018022:	1aed      	subeq	r5, r5, r3
 8018024:	68a3      	ldr	r3, [r4, #8]
 8018026:	bf0c      	ite	eq
 8018028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801802c:	2500      	movne	r5, #0
 801802e:	4293      	cmp	r3, r2
 8018030:	bfc4      	itt	gt
 8018032:	1a9b      	subgt	r3, r3, r2
 8018034:	18ed      	addgt	r5, r5, r3
 8018036:	2600      	movs	r6, #0
 8018038:	341a      	adds	r4, #26
 801803a:	42b5      	cmp	r5, r6
 801803c:	d11a      	bne.n	8018074 <_printf_common+0xc8>
 801803e:	2000      	movs	r0, #0
 8018040:	e008      	b.n	8018054 <_printf_common+0xa8>
 8018042:	2301      	movs	r3, #1
 8018044:	4652      	mov	r2, sl
 8018046:	4641      	mov	r1, r8
 8018048:	4638      	mov	r0, r7
 801804a:	47c8      	blx	r9
 801804c:	3001      	adds	r0, #1
 801804e:	d103      	bne.n	8018058 <_printf_common+0xac>
 8018050:	f04f 30ff 	mov.w	r0, #4294967295
 8018054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018058:	3501      	adds	r5, #1
 801805a:	e7c6      	b.n	8017fea <_printf_common+0x3e>
 801805c:	18e1      	adds	r1, r4, r3
 801805e:	1c5a      	adds	r2, r3, #1
 8018060:	2030      	movs	r0, #48	@ 0x30
 8018062:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018066:	4422      	add	r2, r4
 8018068:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801806c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018070:	3302      	adds	r3, #2
 8018072:	e7c7      	b.n	8018004 <_printf_common+0x58>
 8018074:	2301      	movs	r3, #1
 8018076:	4622      	mov	r2, r4
 8018078:	4641      	mov	r1, r8
 801807a:	4638      	mov	r0, r7
 801807c:	47c8      	blx	r9
 801807e:	3001      	adds	r0, #1
 8018080:	d0e6      	beq.n	8018050 <_printf_common+0xa4>
 8018082:	3601      	adds	r6, #1
 8018084:	e7d9      	b.n	801803a <_printf_common+0x8e>
	...

08018088 <_printf_i>:
 8018088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801808c:	7e0f      	ldrb	r7, [r1, #24]
 801808e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018090:	2f78      	cmp	r7, #120	@ 0x78
 8018092:	4691      	mov	r9, r2
 8018094:	4680      	mov	r8, r0
 8018096:	460c      	mov	r4, r1
 8018098:	469a      	mov	sl, r3
 801809a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801809e:	d807      	bhi.n	80180b0 <_printf_i+0x28>
 80180a0:	2f62      	cmp	r7, #98	@ 0x62
 80180a2:	d80a      	bhi.n	80180ba <_printf_i+0x32>
 80180a4:	2f00      	cmp	r7, #0
 80180a6:	f000 80d2 	beq.w	801824e <_printf_i+0x1c6>
 80180aa:	2f58      	cmp	r7, #88	@ 0x58
 80180ac:	f000 80b9 	beq.w	8018222 <_printf_i+0x19a>
 80180b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80180b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80180b8:	e03a      	b.n	8018130 <_printf_i+0xa8>
 80180ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80180be:	2b15      	cmp	r3, #21
 80180c0:	d8f6      	bhi.n	80180b0 <_printf_i+0x28>
 80180c2:	a101      	add	r1, pc, #4	@ (adr r1, 80180c8 <_printf_i+0x40>)
 80180c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80180c8:	08018121 	.word	0x08018121
 80180cc:	08018135 	.word	0x08018135
 80180d0:	080180b1 	.word	0x080180b1
 80180d4:	080180b1 	.word	0x080180b1
 80180d8:	080180b1 	.word	0x080180b1
 80180dc:	080180b1 	.word	0x080180b1
 80180e0:	08018135 	.word	0x08018135
 80180e4:	080180b1 	.word	0x080180b1
 80180e8:	080180b1 	.word	0x080180b1
 80180ec:	080180b1 	.word	0x080180b1
 80180f0:	080180b1 	.word	0x080180b1
 80180f4:	08018235 	.word	0x08018235
 80180f8:	0801815f 	.word	0x0801815f
 80180fc:	080181ef 	.word	0x080181ef
 8018100:	080180b1 	.word	0x080180b1
 8018104:	080180b1 	.word	0x080180b1
 8018108:	08018257 	.word	0x08018257
 801810c:	080180b1 	.word	0x080180b1
 8018110:	0801815f 	.word	0x0801815f
 8018114:	080180b1 	.word	0x080180b1
 8018118:	080180b1 	.word	0x080180b1
 801811c:	080181f7 	.word	0x080181f7
 8018120:	6833      	ldr	r3, [r6, #0]
 8018122:	1d1a      	adds	r2, r3, #4
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	6032      	str	r2, [r6, #0]
 8018128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801812c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018130:	2301      	movs	r3, #1
 8018132:	e09d      	b.n	8018270 <_printf_i+0x1e8>
 8018134:	6833      	ldr	r3, [r6, #0]
 8018136:	6820      	ldr	r0, [r4, #0]
 8018138:	1d19      	adds	r1, r3, #4
 801813a:	6031      	str	r1, [r6, #0]
 801813c:	0606      	lsls	r6, r0, #24
 801813e:	d501      	bpl.n	8018144 <_printf_i+0xbc>
 8018140:	681d      	ldr	r5, [r3, #0]
 8018142:	e003      	b.n	801814c <_printf_i+0xc4>
 8018144:	0645      	lsls	r5, r0, #25
 8018146:	d5fb      	bpl.n	8018140 <_printf_i+0xb8>
 8018148:	f9b3 5000 	ldrsh.w	r5, [r3]
 801814c:	2d00      	cmp	r5, #0
 801814e:	da03      	bge.n	8018158 <_printf_i+0xd0>
 8018150:	232d      	movs	r3, #45	@ 0x2d
 8018152:	426d      	negs	r5, r5
 8018154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018158:	4859      	ldr	r0, [pc, #356]	@ (80182c0 <_printf_i+0x238>)
 801815a:	230a      	movs	r3, #10
 801815c:	e011      	b.n	8018182 <_printf_i+0xfa>
 801815e:	6821      	ldr	r1, [r4, #0]
 8018160:	6833      	ldr	r3, [r6, #0]
 8018162:	0608      	lsls	r0, r1, #24
 8018164:	f853 5b04 	ldr.w	r5, [r3], #4
 8018168:	d402      	bmi.n	8018170 <_printf_i+0xe8>
 801816a:	0649      	lsls	r1, r1, #25
 801816c:	bf48      	it	mi
 801816e:	b2ad      	uxthmi	r5, r5
 8018170:	2f6f      	cmp	r7, #111	@ 0x6f
 8018172:	4853      	ldr	r0, [pc, #332]	@ (80182c0 <_printf_i+0x238>)
 8018174:	6033      	str	r3, [r6, #0]
 8018176:	bf14      	ite	ne
 8018178:	230a      	movne	r3, #10
 801817a:	2308      	moveq	r3, #8
 801817c:	2100      	movs	r1, #0
 801817e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018182:	6866      	ldr	r6, [r4, #4]
 8018184:	60a6      	str	r6, [r4, #8]
 8018186:	2e00      	cmp	r6, #0
 8018188:	bfa2      	ittt	ge
 801818a:	6821      	ldrge	r1, [r4, #0]
 801818c:	f021 0104 	bicge.w	r1, r1, #4
 8018190:	6021      	strge	r1, [r4, #0]
 8018192:	b90d      	cbnz	r5, 8018198 <_printf_i+0x110>
 8018194:	2e00      	cmp	r6, #0
 8018196:	d04b      	beq.n	8018230 <_printf_i+0x1a8>
 8018198:	4616      	mov	r6, r2
 801819a:	fbb5 f1f3 	udiv	r1, r5, r3
 801819e:	fb03 5711 	mls	r7, r3, r1, r5
 80181a2:	5dc7      	ldrb	r7, [r0, r7]
 80181a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80181a8:	462f      	mov	r7, r5
 80181aa:	42bb      	cmp	r3, r7
 80181ac:	460d      	mov	r5, r1
 80181ae:	d9f4      	bls.n	801819a <_printf_i+0x112>
 80181b0:	2b08      	cmp	r3, #8
 80181b2:	d10b      	bne.n	80181cc <_printf_i+0x144>
 80181b4:	6823      	ldr	r3, [r4, #0]
 80181b6:	07df      	lsls	r7, r3, #31
 80181b8:	d508      	bpl.n	80181cc <_printf_i+0x144>
 80181ba:	6923      	ldr	r3, [r4, #16]
 80181bc:	6861      	ldr	r1, [r4, #4]
 80181be:	4299      	cmp	r1, r3
 80181c0:	bfde      	ittt	le
 80181c2:	2330      	movle	r3, #48	@ 0x30
 80181c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80181c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80181cc:	1b92      	subs	r2, r2, r6
 80181ce:	6122      	str	r2, [r4, #16]
 80181d0:	f8cd a000 	str.w	sl, [sp]
 80181d4:	464b      	mov	r3, r9
 80181d6:	aa03      	add	r2, sp, #12
 80181d8:	4621      	mov	r1, r4
 80181da:	4640      	mov	r0, r8
 80181dc:	f7ff fee6 	bl	8017fac <_printf_common>
 80181e0:	3001      	adds	r0, #1
 80181e2:	d14a      	bne.n	801827a <_printf_i+0x1f2>
 80181e4:	f04f 30ff 	mov.w	r0, #4294967295
 80181e8:	b004      	add	sp, #16
 80181ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181ee:	6823      	ldr	r3, [r4, #0]
 80181f0:	f043 0320 	orr.w	r3, r3, #32
 80181f4:	6023      	str	r3, [r4, #0]
 80181f6:	4833      	ldr	r0, [pc, #204]	@ (80182c4 <_printf_i+0x23c>)
 80181f8:	2778      	movs	r7, #120	@ 0x78
 80181fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80181fe:	6823      	ldr	r3, [r4, #0]
 8018200:	6831      	ldr	r1, [r6, #0]
 8018202:	061f      	lsls	r7, r3, #24
 8018204:	f851 5b04 	ldr.w	r5, [r1], #4
 8018208:	d402      	bmi.n	8018210 <_printf_i+0x188>
 801820a:	065f      	lsls	r7, r3, #25
 801820c:	bf48      	it	mi
 801820e:	b2ad      	uxthmi	r5, r5
 8018210:	6031      	str	r1, [r6, #0]
 8018212:	07d9      	lsls	r1, r3, #31
 8018214:	bf44      	itt	mi
 8018216:	f043 0320 	orrmi.w	r3, r3, #32
 801821a:	6023      	strmi	r3, [r4, #0]
 801821c:	b11d      	cbz	r5, 8018226 <_printf_i+0x19e>
 801821e:	2310      	movs	r3, #16
 8018220:	e7ac      	b.n	801817c <_printf_i+0xf4>
 8018222:	4827      	ldr	r0, [pc, #156]	@ (80182c0 <_printf_i+0x238>)
 8018224:	e7e9      	b.n	80181fa <_printf_i+0x172>
 8018226:	6823      	ldr	r3, [r4, #0]
 8018228:	f023 0320 	bic.w	r3, r3, #32
 801822c:	6023      	str	r3, [r4, #0]
 801822e:	e7f6      	b.n	801821e <_printf_i+0x196>
 8018230:	4616      	mov	r6, r2
 8018232:	e7bd      	b.n	80181b0 <_printf_i+0x128>
 8018234:	6833      	ldr	r3, [r6, #0]
 8018236:	6825      	ldr	r5, [r4, #0]
 8018238:	6961      	ldr	r1, [r4, #20]
 801823a:	1d18      	adds	r0, r3, #4
 801823c:	6030      	str	r0, [r6, #0]
 801823e:	062e      	lsls	r6, r5, #24
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	d501      	bpl.n	8018248 <_printf_i+0x1c0>
 8018244:	6019      	str	r1, [r3, #0]
 8018246:	e002      	b.n	801824e <_printf_i+0x1c6>
 8018248:	0668      	lsls	r0, r5, #25
 801824a:	d5fb      	bpl.n	8018244 <_printf_i+0x1bc>
 801824c:	8019      	strh	r1, [r3, #0]
 801824e:	2300      	movs	r3, #0
 8018250:	6123      	str	r3, [r4, #16]
 8018252:	4616      	mov	r6, r2
 8018254:	e7bc      	b.n	80181d0 <_printf_i+0x148>
 8018256:	6833      	ldr	r3, [r6, #0]
 8018258:	1d1a      	adds	r2, r3, #4
 801825a:	6032      	str	r2, [r6, #0]
 801825c:	681e      	ldr	r6, [r3, #0]
 801825e:	6862      	ldr	r2, [r4, #4]
 8018260:	2100      	movs	r1, #0
 8018262:	4630      	mov	r0, r6
 8018264:	f7e8 f83c 	bl	80002e0 <memchr>
 8018268:	b108      	cbz	r0, 801826e <_printf_i+0x1e6>
 801826a:	1b80      	subs	r0, r0, r6
 801826c:	6060      	str	r0, [r4, #4]
 801826e:	6863      	ldr	r3, [r4, #4]
 8018270:	6123      	str	r3, [r4, #16]
 8018272:	2300      	movs	r3, #0
 8018274:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018278:	e7aa      	b.n	80181d0 <_printf_i+0x148>
 801827a:	6923      	ldr	r3, [r4, #16]
 801827c:	4632      	mov	r2, r6
 801827e:	4649      	mov	r1, r9
 8018280:	4640      	mov	r0, r8
 8018282:	47d0      	blx	sl
 8018284:	3001      	adds	r0, #1
 8018286:	d0ad      	beq.n	80181e4 <_printf_i+0x15c>
 8018288:	6823      	ldr	r3, [r4, #0]
 801828a:	079b      	lsls	r3, r3, #30
 801828c:	d413      	bmi.n	80182b6 <_printf_i+0x22e>
 801828e:	68e0      	ldr	r0, [r4, #12]
 8018290:	9b03      	ldr	r3, [sp, #12]
 8018292:	4298      	cmp	r0, r3
 8018294:	bfb8      	it	lt
 8018296:	4618      	movlt	r0, r3
 8018298:	e7a6      	b.n	80181e8 <_printf_i+0x160>
 801829a:	2301      	movs	r3, #1
 801829c:	4632      	mov	r2, r6
 801829e:	4649      	mov	r1, r9
 80182a0:	4640      	mov	r0, r8
 80182a2:	47d0      	blx	sl
 80182a4:	3001      	adds	r0, #1
 80182a6:	d09d      	beq.n	80181e4 <_printf_i+0x15c>
 80182a8:	3501      	adds	r5, #1
 80182aa:	68e3      	ldr	r3, [r4, #12]
 80182ac:	9903      	ldr	r1, [sp, #12]
 80182ae:	1a5b      	subs	r3, r3, r1
 80182b0:	42ab      	cmp	r3, r5
 80182b2:	dcf2      	bgt.n	801829a <_printf_i+0x212>
 80182b4:	e7eb      	b.n	801828e <_printf_i+0x206>
 80182b6:	2500      	movs	r5, #0
 80182b8:	f104 0619 	add.w	r6, r4, #25
 80182bc:	e7f5      	b.n	80182aa <_printf_i+0x222>
 80182be:	bf00      	nop
 80182c0:	0801ba94 	.word	0x0801ba94
 80182c4:	0801baa5 	.word	0x0801baa5

080182c8 <__sflush_r>:
 80182c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80182cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182d0:	0716      	lsls	r6, r2, #28
 80182d2:	4605      	mov	r5, r0
 80182d4:	460c      	mov	r4, r1
 80182d6:	d454      	bmi.n	8018382 <__sflush_r+0xba>
 80182d8:	684b      	ldr	r3, [r1, #4]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	dc02      	bgt.n	80182e4 <__sflush_r+0x1c>
 80182de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	dd48      	ble.n	8018376 <__sflush_r+0xae>
 80182e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80182e6:	2e00      	cmp	r6, #0
 80182e8:	d045      	beq.n	8018376 <__sflush_r+0xae>
 80182ea:	2300      	movs	r3, #0
 80182ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80182f0:	682f      	ldr	r7, [r5, #0]
 80182f2:	6a21      	ldr	r1, [r4, #32]
 80182f4:	602b      	str	r3, [r5, #0]
 80182f6:	d030      	beq.n	801835a <__sflush_r+0x92>
 80182f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80182fa:	89a3      	ldrh	r3, [r4, #12]
 80182fc:	0759      	lsls	r1, r3, #29
 80182fe:	d505      	bpl.n	801830c <__sflush_r+0x44>
 8018300:	6863      	ldr	r3, [r4, #4]
 8018302:	1ad2      	subs	r2, r2, r3
 8018304:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018306:	b10b      	cbz	r3, 801830c <__sflush_r+0x44>
 8018308:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801830a:	1ad2      	subs	r2, r2, r3
 801830c:	2300      	movs	r3, #0
 801830e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018310:	6a21      	ldr	r1, [r4, #32]
 8018312:	4628      	mov	r0, r5
 8018314:	47b0      	blx	r6
 8018316:	1c43      	adds	r3, r0, #1
 8018318:	89a3      	ldrh	r3, [r4, #12]
 801831a:	d106      	bne.n	801832a <__sflush_r+0x62>
 801831c:	6829      	ldr	r1, [r5, #0]
 801831e:	291d      	cmp	r1, #29
 8018320:	d82b      	bhi.n	801837a <__sflush_r+0xb2>
 8018322:	4a2a      	ldr	r2, [pc, #168]	@ (80183cc <__sflush_r+0x104>)
 8018324:	410a      	asrs	r2, r1
 8018326:	07d6      	lsls	r6, r2, #31
 8018328:	d427      	bmi.n	801837a <__sflush_r+0xb2>
 801832a:	2200      	movs	r2, #0
 801832c:	6062      	str	r2, [r4, #4]
 801832e:	04d9      	lsls	r1, r3, #19
 8018330:	6922      	ldr	r2, [r4, #16]
 8018332:	6022      	str	r2, [r4, #0]
 8018334:	d504      	bpl.n	8018340 <__sflush_r+0x78>
 8018336:	1c42      	adds	r2, r0, #1
 8018338:	d101      	bne.n	801833e <__sflush_r+0x76>
 801833a:	682b      	ldr	r3, [r5, #0]
 801833c:	b903      	cbnz	r3, 8018340 <__sflush_r+0x78>
 801833e:	6560      	str	r0, [r4, #84]	@ 0x54
 8018340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018342:	602f      	str	r7, [r5, #0]
 8018344:	b1b9      	cbz	r1, 8018376 <__sflush_r+0xae>
 8018346:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801834a:	4299      	cmp	r1, r3
 801834c:	d002      	beq.n	8018354 <__sflush_r+0x8c>
 801834e:	4628      	mov	r0, r5
 8018350:	f7ff fbea 	bl	8017b28 <_free_r>
 8018354:	2300      	movs	r3, #0
 8018356:	6363      	str	r3, [r4, #52]	@ 0x34
 8018358:	e00d      	b.n	8018376 <__sflush_r+0xae>
 801835a:	2301      	movs	r3, #1
 801835c:	4628      	mov	r0, r5
 801835e:	47b0      	blx	r6
 8018360:	4602      	mov	r2, r0
 8018362:	1c50      	adds	r0, r2, #1
 8018364:	d1c9      	bne.n	80182fa <__sflush_r+0x32>
 8018366:	682b      	ldr	r3, [r5, #0]
 8018368:	2b00      	cmp	r3, #0
 801836a:	d0c6      	beq.n	80182fa <__sflush_r+0x32>
 801836c:	2b1d      	cmp	r3, #29
 801836e:	d001      	beq.n	8018374 <__sflush_r+0xac>
 8018370:	2b16      	cmp	r3, #22
 8018372:	d11e      	bne.n	80183b2 <__sflush_r+0xea>
 8018374:	602f      	str	r7, [r5, #0]
 8018376:	2000      	movs	r0, #0
 8018378:	e022      	b.n	80183c0 <__sflush_r+0xf8>
 801837a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801837e:	b21b      	sxth	r3, r3
 8018380:	e01b      	b.n	80183ba <__sflush_r+0xf2>
 8018382:	690f      	ldr	r7, [r1, #16]
 8018384:	2f00      	cmp	r7, #0
 8018386:	d0f6      	beq.n	8018376 <__sflush_r+0xae>
 8018388:	0793      	lsls	r3, r2, #30
 801838a:	680e      	ldr	r6, [r1, #0]
 801838c:	bf08      	it	eq
 801838e:	694b      	ldreq	r3, [r1, #20]
 8018390:	600f      	str	r7, [r1, #0]
 8018392:	bf18      	it	ne
 8018394:	2300      	movne	r3, #0
 8018396:	eba6 0807 	sub.w	r8, r6, r7
 801839a:	608b      	str	r3, [r1, #8]
 801839c:	f1b8 0f00 	cmp.w	r8, #0
 80183a0:	dde9      	ble.n	8018376 <__sflush_r+0xae>
 80183a2:	6a21      	ldr	r1, [r4, #32]
 80183a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80183a6:	4643      	mov	r3, r8
 80183a8:	463a      	mov	r2, r7
 80183aa:	4628      	mov	r0, r5
 80183ac:	47b0      	blx	r6
 80183ae:	2800      	cmp	r0, #0
 80183b0:	dc08      	bgt.n	80183c4 <__sflush_r+0xfc>
 80183b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80183ba:	81a3      	strh	r3, [r4, #12]
 80183bc:	f04f 30ff 	mov.w	r0, #4294967295
 80183c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183c4:	4407      	add	r7, r0
 80183c6:	eba8 0800 	sub.w	r8, r8, r0
 80183ca:	e7e7      	b.n	801839c <__sflush_r+0xd4>
 80183cc:	dfbffffe 	.word	0xdfbffffe

080183d0 <_fflush_r>:
 80183d0:	b538      	push	{r3, r4, r5, lr}
 80183d2:	690b      	ldr	r3, [r1, #16]
 80183d4:	4605      	mov	r5, r0
 80183d6:	460c      	mov	r4, r1
 80183d8:	b913      	cbnz	r3, 80183e0 <_fflush_r+0x10>
 80183da:	2500      	movs	r5, #0
 80183dc:	4628      	mov	r0, r5
 80183de:	bd38      	pop	{r3, r4, r5, pc}
 80183e0:	b118      	cbz	r0, 80183ea <_fflush_r+0x1a>
 80183e2:	6a03      	ldr	r3, [r0, #32]
 80183e4:	b90b      	cbnz	r3, 80183ea <_fflush_r+0x1a>
 80183e6:	f7ff f96f 	bl	80176c8 <__sinit>
 80183ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d0f3      	beq.n	80183da <_fflush_r+0xa>
 80183f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80183f4:	07d0      	lsls	r0, r2, #31
 80183f6:	d404      	bmi.n	8018402 <_fflush_r+0x32>
 80183f8:	0599      	lsls	r1, r3, #22
 80183fa:	d402      	bmi.n	8018402 <_fflush_r+0x32>
 80183fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80183fe:	f7ff fb64 	bl	8017aca <__retarget_lock_acquire_recursive>
 8018402:	4628      	mov	r0, r5
 8018404:	4621      	mov	r1, r4
 8018406:	f7ff ff5f 	bl	80182c8 <__sflush_r>
 801840a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801840c:	07da      	lsls	r2, r3, #31
 801840e:	4605      	mov	r5, r0
 8018410:	d4e4      	bmi.n	80183dc <_fflush_r+0xc>
 8018412:	89a3      	ldrh	r3, [r4, #12]
 8018414:	059b      	lsls	r3, r3, #22
 8018416:	d4e1      	bmi.n	80183dc <_fflush_r+0xc>
 8018418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801841a:	f7ff fb57 	bl	8017acc <__retarget_lock_release_recursive>
 801841e:	e7dd      	b.n	80183dc <_fflush_r+0xc>

08018420 <fiprintf>:
 8018420:	b40e      	push	{r1, r2, r3}
 8018422:	b503      	push	{r0, r1, lr}
 8018424:	4601      	mov	r1, r0
 8018426:	ab03      	add	r3, sp, #12
 8018428:	4805      	ldr	r0, [pc, #20]	@ (8018440 <fiprintf+0x20>)
 801842a:	f853 2b04 	ldr.w	r2, [r3], #4
 801842e:	6800      	ldr	r0, [r0, #0]
 8018430:	9301      	str	r3, [sp, #4]
 8018432:	f7ff fca3 	bl	8017d7c <_vfiprintf_r>
 8018436:	b002      	add	sp, #8
 8018438:	f85d eb04 	ldr.w	lr, [sp], #4
 801843c:	b003      	add	sp, #12
 801843e:	4770      	bx	lr
 8018440:	24000060 	.word	0x24000060

08018444 <__swhatbuf_r>:
 8018444:	b570      	push	{r4, r5, r6, lr}
 8018446:	460c      	mov	r4, r1
 8018448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801844c:	2900      	cmp	r1, #0
 801844e:	b096      	sub	sp, #88	@ 0x58
 8018450:	4615      	mov	r5, r2
 8018452:	461e      	mov	r6, r3
 8018454:	da0d      	bge.n	8018472 <__swhatbuf_r+0x2e>
 8018456:	89a3      	ldrh	r3, [r4, #12]
 8018458:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801845c:	f04f 0100 	mov.w	r1, #0
 8018460:	bf14      	ite	ne
 8018462:	2340      	movne	r3, #64	@ 0x40
 8018464:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018468:	2000      	movs	r0, #0
 801846a:	6031      	str	r1, [r6, #0]
 801846c:	602b      	str	r3, [r5, #0]
 801846e:	b016      	add	sp, #88	@ 0x58
 8018470:	bd70      	pop	{r4, r5, r6, pc}
 8018472:	466a      	mov	r2, sp
 8018474:	f000 f848 	bl	8018508 <_fstat_r>
 8018478:	2800      	cmp	r0, #0
 801847a:	dbec      	blt.n	8018456 <__swhatbuf_r+0x12>
 801847c:	9901      	ldr	r1, [sp, #4]
 801847e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018482:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018486:	4259      	negs	r1, r3
 8018488:	4159      	adcs	r1, r3
 801848a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801848e:	e7eb      	b.n	8018468 <__swhatbuf_r+0x24>

08018490 <__smakebuf_r>:
 8018490:	898b      	ldrh	r3, [r1, #12]
 8018492:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018494:	079d      	lsls	r5, r3, #30
 8018496:	4606      	mov	r6, r0
 8018498:	460c      	mov	r4, r1
 801849a:	d507      	bpl.n	80184ac <__smakebuf_r+0x1c>
 801849c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80184a0:	6023      	str	r3, [r4, #0]
 80184a2:	6123      	str	r3, [r4, #16]
 80184a4:	2301      	movs	r3, #1
 80184a6:	6163      	str	r3, [r4, #20]
 80184a8:	b003      	add	sp, #12
 80184aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184ac:	ab01      	add	r3, sp, #4
 80184ae:	466a      	mov	r2, sp
 80184b0:	f7ff ffc8 	bl	8018444 <__swhatbuf_r>
 80184b4:	9f00      	ldr	r7, [sp, #0]
 80184b6:	4605      	mov	r5, r0
 80184b8:	4639      	mov	r1, r7
 80184ba:	4630      	mov	r0, r6
 80184bc:	f7ff fba8 	bl	8017c10 <_malloc_r>
 80184c0:	b948      	cbnz	r0, 80184d6 <__smakebuf_r+0x46>
 80184c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184c6:	059a      	lsls	r2, r3, #22
 80184c8:	d4ee      	bmi.n	80184a8 <__smakebuf_r+0x18>
 80184ca:	f023 0303 	bic.w	r3, r3, #3
 80184ce:	f043 0302 	orr.w	r3, r3, #2
 80184d2:	81a3      	strh	r3, [r4, #12]
 80184d4:	e7e2      	b.n	801849c <__smakebuf_r+0xc>
 80184d6:	89a3      	ldrh	r3, [r4, #12]
 80184d8:	6020      	str	r0, [r4, #0]
 80184da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80184de:	81a3      	strh	r3, [r4, #12]
 80184e0:	9b01      	ldr	r3, [sp, #4]
 80184e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80184e6:	b15b      	cbz	r3, 8018500 <__smakebuf_r+0x70>
 80184e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80184ec:	4630      	mov	r0, r6
 80184ee:	f000 f81d 	bl	801852c <_isatty_r>
 80184f2:	b128      	cbz	r0, 8018500 <__smakebuf_r+0x70>
 80184f4:	89a3      	ldrh	r3, [r4, #12]
 80184f6:	f023 0303 	bic.w	r3, r3, #3
 80184fa:	f043 0301 	orr.w	r3, r3, #1
 80184fe:	81a3      	strh	r3, [r4, #12]
 8018500:	89a3      	ldrh	r3, [r4, #12]
 8018502:	431d      	orrs	r5, r3
 8018504:	81a5      	strh	r5, [r4, #12]
 8018506:	e7cf      	b.n	80184a8 <__smakebuf_r+0x18>

08018508 <_fstat_r>:
 8018508:	b538      	push	{r3, r4, r5, lr}
 801850a:	4d07      	ldr	r5, [pc, #28]	@ (8018528 <_fstat_r+0x20>)
 801850c:	2300      	movs	r3, #0
 801850e:	4604      	mov	r4, r0
 8018510:	4608      	mov	r0, r1
 8018512:	4611      	mov	r1, r2
 8018514:	602b      	str	r3, [r5, #0]
 8018516:	f7e8 fd11 	bl	8000f3c <_fstat>
 801851a:	1c43      	adds	r3, r0, #1
 801851c:	d102      	bne.n	8018524 <_fstat_r+0x1c>
 801851e:	682b      	ldr	r3, [r5, #0]
 8018520:	b103      	cbz	r3, 8018524 <_fstat_r+0x1c>
 8018522:	6023      	str	r3, [r4, #0]
 8018524:	bd38      	pop	{r3, r4, r5, pc}
 8018526:	bf00      	nop
 8018528:	24007ef8 	.word	0x24007ef8

0801852c <_isatty_r>:
 801852c:	b538      	push	{r3, r4, r5, lr}
 801852e:	4d06      	ldr	r5, [pc, #24]	@ (8018548 <_isatty_r+0x1c>)
 8018530:	2300      	movs	r3, #0
 8018532:	4604      	mov	r4, r0
 8018534:	4608      	mov	r0, r1
 8018536:	602b      	str	r3, [r5, #0]
 8018538:	f7e8 fd10 	bl	8000f5c <_isatty>
 801853c:	1c43      	adds	r3, r0, #1
 801853e:	d102      	bne.n	8018546 <_isatty_r+0x1a>
 8018540:	682b      	ldr	r3, [r5, #0]
 8018542:	b103      	cbz	r3, 8018546 <_isatty_r+0x1a>
 8018544:	6023      	str	r3, [r4, #0]
 8018546:	bd38      	pop	{r3, r4, r5, pc}
 8018548:	24007ef8 	.word	0x24007ef8

0801854c <_sbrk_r>:
 801854c:	b538      	push	{r3, r4, r5, lr}
 801854e:	4d06      	ldr	r5, [pc, #24]	@ (8018568 <_sbrk_r+0x1c>)
 8018550:	2300      	movs	r3, #0
 8018552:	4604      	mov	r4, r0
 8018554:	4608      	mov	r0, r1
 8018556:	602b      	str	r3, [r5, #0]
 8018558:	f7e8 fd18 	bl	8000f8c <_sbrk>
 801855c:	1c43      	adds	r3, r0, #1
 801855e:	d102      	bne.n	8018566 <_sbrk_r+0x1a>
 8018560:	682b      	ldr	r3, [r5, #0]
 8018562:	b103      	cbz	r3, 8018566 <_sbrk_r+0x1a>
 8018564:	6023      	str	r3, [r4, #0]
 8018566:	bd38      	pop	{r3, r4, r5, pc}
 8018568:	24007ef8 	.word	0x24007ef8

0801856c <abort>:
 801856c:	b508      	push	{r3, lr}
 801856e:	2006      	movs	r0, #6
 8018570:	f000 f82c 	bl	80185cc <raise>
 8018574:	2001      	movs	r0, #1
 8018576:	f7e8 fc91 	bl	8000e9c <_exit>

0801857a <_raise_r>:
 801857a:	291f      	cmp	r1, #31
 801857c:	b538      	push	{r3, r4, r5, lr}
 801857e:	4605      	mov	r5, r0
 8018580:	460c      	mov	r4, r1
 8018582:	d904      	bls.n	801858e <_raise_r+0x14>
 8018584:	2316      	movs	r3, #22
 8018586:	6003      	str	r3, [r0, #0]
 8018588:	f04f 30ff 	mov.w	r0, #4294967295
 801858c:	bd38      	pop	{r3, r4, r5, pc}
 801858e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018590:	b112      	cbz	r2, 8018598 <_raise_r+0x1e>
 8018592:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018596:	b94b      	cbnz	r3, 80185ac <_raise_r+0x32>
 8018598:	4628      	mov	r0, r5
 801859a:	f000 f831 	bl	8018600 <_getpid_r>
 801859e:	4622      	mov	r2, r4
 80185a0:	4601      	mov	r1, r0
 80185a2:	4628      	mov	r0, r5
 80185a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80185a8:	f000 b818 	b.w	80185dc <_kill_r>
 80185ac:	2b01      	cmp	r3, #1
 80185ae:	d00a      	beq.n	80185c6 <_raise_r+0x4c>
 80185b0:	1c59      	adds	r1, r3, #1
 80185b2:	d103      	bne.n	80185bc <_raise_r+0x42>
 80185b4:	2316      	movs	r3, #22
 80185b6:	6003      	str	r3, [r0, #0]
 80185b8:	2001      	movs	r0, #1
 80185ba:	e7e7      	b.n	801858c <_raise_r+0x12>
 80185bc:	2100      	movs	r1, #0
 80185be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80185c2:	4620      	mov	r0, r4
 80185c4:	4798      	blx	r3
 80185c6:	2000      	movs	r0, #0
 80185c8:	e7e0      	b.n	801858c <_raise_r+0x12>
	...

080185cc <raise>:
 80185cc:	4b02      	ldr	r3, [pc, #8]	@ (80185d8 <raise+0xc>)
 80185ce:	4601      	mov	r1, r0
 80185d0:	6818      	ldr	r0, [r3, #0]
 80185d2:	f7ff bfd2 	b.w	801857a <_raise_r>
 80185d6:	bf00      	nop
 80185d8:	24000060 	.word	0x24000060

080185dc <_kill_r>:
 80185dc:	b538      	push	{r3, r4, r5, lr}
 80185de:	4d07      	ldr	r5, [pc, #28]	@ (80185fc <_kill_r+0x20>)
 80185e0:	2300      	movs	r3, #0
 80185e2:	4604      	mov	r4, r0
 80185e4:	4608      	mov	r0, r1
 80185e6:	4611      	mov	r1, r2
 80185e8:	602b      	str	r3, [r5, #0]
 80185ea:	f7e8 fc45 	bl	8000e78 <_kill>
 80185ee:	1c43      	adds	r3, r0, #1
 80185f0:	d102      	bne.n	80185f8 <_kill_r+0x1c>
 80185f2:	682b      	ldr	r3, [r5, #0]
 80185f4:	b103      	cbz	r3, 80185f8 <_kill_r+0x1c>
 80185f6:	6023      	str	r3, [r4, #0]
 80185f8:	bd38      	pop	{r3, r4, r5, pc}
 80185fa:	bf00      	nop
 80185fc:	24007ef8 	.word	0x24007ef8

08018600 <_getpid_r>:
 8018600:	f7e8 bc32 	b.w	8000e68 <_getpid>

08018604 <_init>:
 8018604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018606:	bf00      	nop
 8018608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801860a:	bc08      	pop	{r3}
 801860c:	469e      	mov	lr, r3
 801860e:	4770      	bx	lr

08018610 <_fini>:
 8018610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018612:	bf00      	nop
 8018614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018616:	bc08      	pop	{r3}
 8018618:	469e      	mov	lr, r3
 801861a:	4770      	bx	lr
