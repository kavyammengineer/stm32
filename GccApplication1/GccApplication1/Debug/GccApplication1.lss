
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  00001720  000017b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001720  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  008001b8  008001b8  0000186c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d77  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000921  00000000  00000000  000026f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000724  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  0000373c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000579  00000000  00000000  000038e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000077f  00000000  00000000  00003e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000045dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_24>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e0 e2       	ldi	r30, 0x20	; 32
     17e:	f7 e1       	ldi	r31, 0x17	; 23
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a8 3b       	cpi	r26, 0xB8	; 184
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	a8 eb       	ldi	r26, 0xB8	; 184
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a2 3e       	cpi	r26, 0xE2	; 226
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 2b 03 	call	0x656	; 0x656 <main>
     1a0:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <init_pins>:

}

void init_pins() {

	for (int i = 0; i < 8; i++){
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	37 c0       	rjmp	.+110    	; 0x21c <init_pins+0x74>
		if (i < 5) {
     1ae:	85 30       	cpi	r24, 0x05	; 5
     1b0:	91 05       	cpc	r25, r1
     1b2:	d4 f4       	brge	.+52     	; 0x1e8 <init_pins+0x40>
			DDRD |= (1 << pins[i]);
     1b4:	6a b1       	in	r22, 0x0a	; 10
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	fc 01       	movw	r30, r24
     1bc:	e1 5f       	subi	r30, 0xF1	; 241
     1be:	fe 4f       	sbci	r31, 0xFE	; 254
     1c0:	a9 01       	movw	r20, r18
     1c2:	00 80       	ld	r0, Z
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <init_pins+0x22>
     1c6:	44 0f       	add	r20, r20
     1c8:	55 1f       	adc	r21, r21
     1ca:	0a 94       	dec	r0
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <init_pins+0x1e>
     1ce:	46 2b       	or	r20, r22
     1d0:	4a b9       	out	0x0a, r20	; 10
				PORTD &= ~(1 << pins[i]);
     1d2:	4b b1       	in	r20, 0x0b	; 11
     1d4:	00 80       	ld	r0, Z
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <init_pins+0x34>
     1d8:	22 0f       	add	r18, r18
     1da:	33 1f       	adc	r19, r19
     1dc:	0a 94       	dec	r0
     1de:	e2 f7       	brpl	.-8      	; 0x1d8 <init_pins+0x30>
     1e0:	20 95       	com	r18
     1e2:	24 23       	and	r18, r20
     1e4:	2b b9       	out	0x0b, r18	; 11
     1e6:	19 c0       	rjmp	.+50     	; 0x21a <init_pins+0x72>
			}
			 else {
			DDRB |= (1 << pins[i]);
     1e8:	64 b1       	in	r22, 0x04	; 4
     1ea:	21 e0       	ldi	r18, 0x01	; 1
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	fc 01       	movw	r30, r24
     1f0:	e1 5f       	subi	r30, 0xF1	; 241
     1f2:	fe 4f       	sbci	r31, 0xFE	; 254
     1f4:	a9 01       	movw	r20, r18
     1f6:	00 80       	ld	r0, Z
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <init_pins+0x56>
     1fa:	44 0f       	add	r20, r20
     1fc:	55 1f       	adc	r21, r21
     1fe:	0a 94       	dec	r0
     200:	e2 f7       	brpl	.-8      	; 0x1fa <init_pins+0x52>
     202:	46 2b       	or	r20, r22
     204:	44 b9       	out	0x04, r20	; 4
				PORTB &= ~(1 << pins[i]);
     206:	45 b1       	in	r20, 0x05	; 5
     208:	00 80       	ld	r0, Z
     20a:	02 c0       	rjmp	.+4      	; 0x210 <init_pins+0x68>
     20c:	22 0f       	add	r18, r18
     20e:	33 1f       	adc	r19, r19
     210:	0a 94       	dec	r0
     212:	e2 f7       	brpl	.-8      	; 0x20c <init_pins+0x64>
     214:	20 95       	com	r18
     216:	24 23       	and	r18, r20
     218:	25 b9       	out	0x05, r18	; 5

}

void init_pins() {

	for (int i = 0; i < 8; i++){
     21a:	01 96       	adiw	r24, 0x01	; 1
     21c:	88 30       	cpi	r24, 0x08	; 8
     21e:	91 05       	cpc	r25, r1
     220:	34 f2       	brlt	.-116    	; 0x1ae <init_pins+0x6>
			 else {
			DDRB |= (1 << pins[i]);
				PORTB &= ~(1 << pins[i]);
			}
		}
}
     222:	08 95       	ret

00000224 <SPI_init>:


// SPI Initialization

void SPI_init(void) {
	SPI_DDR |= (1 << SPI_MOSI) | (1 << SPI_SCK);				// MOSI, SCK, and CS as output
     224:	84 b1       	in	r24, 0x04	; 4
     226:	88 62       	ori	r24, 0x28	; 40
     228:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~(1 << SPI_MISO);                                // MISO as input
     22a:	84 b1       	in	r24, 0x04	; 4
     22c:	8f 7e       	andi	r24, 0xEF	; 239
     22e:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << SPI_CS1);	                                    // set as output
     230:	8a b1       	in	r24, 0x0a	; 10
     232:	84 60       	ori	r24, 0x04	; 4
     234:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << SPI_CS2);										// Set CS as output on Port D
     236:	8a b1       	in	r24, 0x0a	; 10
     238:	88 60       	ori	r24, 0x08	; 8
     23a:	8a b9       	out	0x0a, r24	; 10
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);              // Enable SPI, set as Master
     23c:	81 e5       	ldi	r24, 0x51	; 81
     23e:	8c bd       	out	0x2c, r24	; 44
	PORTD |= (1 << SPI_CS1);                                // set cs high
     240:	8b b1       	in	r24, 0x0b	; 11
     242:	84 60       	ori	r24, 0x04	; 4
     244:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << SPI_CS2);                                  // Set CS high
     246:	8b b1       	in	r24, 0x0b	; 11
     248:	88 60       	ori	r24, 0x08	; 8
     24a:	8b b9       	out	0x0b, r24	; 11
     24c:	08 95       	ret

0000024e <MCP3208_read>:
}

// MCP3208 Read function

uint16_t MCP3208_read(uint8_t ADC_select,uint8_t ch) {
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	00 d0       	rcall	.+0      	; 0x254 <MCP3208_read+0x6>
     254:	00 d0       	rcall	.+0      	; 0x256 <MCP3208_read+0x8>
     256:	00 d0       	rcall	.+0      	; 0x258 <MCP3208_read+0xa>
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
	uint8_t reg[3] = {0b00000100, 0x00, 0x00}; // MCP3208 command format
     25c:	1b 82       	std	Y+3, r1	; 0x03
	reg[0] |= (0b00000001 & (ch >> 2));  // Set the channel in the first byte
     25e:	62 fb       	bst	r22, 2
     260:	99 27       	eor	r25, r25
     262:	90 f9       	bld	r25, 0
     264:	94 60       	ori	r25, 0x04	; 4
     266:	99 83       	std	Y+1, r25	; 0x01
	reg[1] = 0b11000000 & (ch << 6);     // Set the channel in the second byte
     268:	90 e4       	ldi	r25, 0x40	; 64
     26a:	69 9f       	mul	r22, r25
     26c:	b0 01       	movw	r22, r0
     26e:	11 24       	eor	r1, r1
     270:	6a 83       	std	Y+2, r22	; 0x02
	uint8_t buf[3] = {0}; // Buffer to store received data
     272:	1c 82       	std	Y+4, r1	; 0x04
     274:	1d 82       	std	Y+5, r1	; 0x05
     276:	1e 82       	std	Y+6, r1	; 0x06
		if(ADC_select==1){
     278:	81 30       	cpi	r24, 0x01	; 1
     27a:	09 f0       	breq	.+2      	; 0x27e <MCP3208_read+0x30>
     27c:	40 c0       	rjmp	.+128    	; 0x2fe <MCP3208_read+0xb0>
			PORTD &= ~(1 << SPI_CS1); // Pull CS low
     27e:	8b b1       	in	r24, 0x0b	; 11
     280:	8b 7f       	andi	r24, 0xFB	; 251
     282:	8b b9       	out	0x0b, r24	; 11
			// SPI transmission: Send command bytes and receive data in response

			for (uint8_t i = 0; i < 3; i++) {
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	2e c0       	rjmp	.+92     	; 0x2e4 <MCP3208_read+0x96>
				SPDR = reg[i]; // Load data to be sent into SPDR
     288:	24 2f       	mov	r18, r20
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	e1 e0       	ldi	r30, 0x01	; 1
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	ec 0f       	add	r30, r28
     292:	fd 1f       	adc	r31, r29
     294:	e2 0f       	add	r30, r18
     296:	f3 1f       	adc	r31, r19
     298:	80 81       	ld	r24, Z
     29a:	8e bd       	out	0x2e, r24	; 46

				// while (!(SPSR & (1 << SPIF))); // Wait for transmission to complete
				uint16_t timeout = 1000;
     29c:	88 ee       	ldi	r24, 0xE8	; 232
     29e:	93 e0       	ldi	r25, 0x03	; 3
				while (!(SPSR & (1 << SPIF)) && --timeout);
     2a0:	0d b4       	in	r0, 0x2d	; 45
     2a2:	07 fc       	sbrc	r0, 7
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <MCP3208_read+0x5c>
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	d9 f7       	brne	.-10     	; 0x2a0 <MCP3208_read+0x52>
				if (timeout == 0) {
     2aa:	89 2b       	or	r24, r25
     2ac:	91 f4       	brne	.+36     	; 0x2d2 <MCP3208_read+0x84>
					printf("SPI timeout at byte %d\n", i);
     2ae:	3f 93       	push	r19
     2b0:	2f 93       	push	r18
     2b2:	87 e1       	ldi	r24, 0x17	; 23
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	9f 93       	push	r25
     2b8:	8f 93       	push	r24
     2ba:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <printf>
					PORTD |= (1 << SPI_CS1); // Pull CS high
     2be:	8b b1       	in	r24, 0x0b	; 11
     2c0:	84 60       	ori	r24, 0x04	; 4
     2c2:	8b b9       	out	0x0b, r24	; 11
					return 0;
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	55 c0       	rjmp	.+170    	; 0x37c <MCP3208_read+0x12e>

				}
				buf[i] = SPDR; // Read received data
     2d2:	8e b5       	in	r24, 0x2e	; 46
     2d4:	e4 e0       	ldi	r30, 0x04	; 4
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	ec 0f       	add	r30, r28
     2da:	fd 1f       	adc	r31, r29
     2dc:	e2 0f       	add	r30, r18
     2de:	f3 1f       	adc	r31, r19
     2e0:	80 83       	st	Z, r24
	uint8_t buf[3] = {0}; // Buffer to store received data
		if(ADC_select==1){
			PORTD &= ~(1 << SPI_CS1); // Pull CS low
			// SPI transmission: Send command bytes and receive data in response

			for (uint8_t i = 0; i < 3; i++) {
     2e2:	4f 5f       	subi	r20, 0xFF	; 255
     2e4:	43 30       	cpi	r20, 0x03	; 3
     2e6:	80 f2       	brcs	.-96     	; 0x288 <MCP3208_read+0x3a>

				}
				buf[i] = SPDR; // Read received data
			}
			
			PORTD |= (1 << SPI_CS1); // Pull CS high
     2e8:	8b b1       	in	r24, 0x0b	; 11
     2ea:	84 60       	ori	r24, 0x04	; 4
     2ec:	8b b9       	out	0x0b, r24	; 11
			// printf("raw value: %d\n", ((buf[1] & 0b00001111) << 8) | buf[2]);
			// Combine the two received bytes into a 12-bit value (the MCP3208's 12-bit result)
			return ((buf[1] & 0b00001111) << 8) | buf[2];
     2ee:	8d 81       	ldd	r24, Y+5	; 0x05
     2f0:	8f 70       	andi	r24, 0x0F	; 15
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	98 2f       	mov	r25, r24
     2f6:	88 27       	eor	r24, r24
     2f8:	2e 81       	ldd	r18, Y+6	; 0x06
     2fa:	82 2b       	or	r24, r18
     2fc:	3f c0       	rjmp	.+126    	; 0x37c <MCP3208_read+0x12e>
			
		}
		else{
	       PORTD &= ~(1 << SPI_CS2); // Pull CS low
     2fe:	8b b1       	in	r24, 0x0b	; 11
     300:	87 7f       	andi	r24, 0xF7	; 247
     302:	8b b9       	out	0x0b, r24	; 11
	// SPI transmission: Send command bytes and receive data in response

	       for (uint8_t i = 0; i < 3; i++) {
     304:	40 e0       	ldi	r20, 0x00	; 0
     306:	2e c0       	rjmp	.+92     	; 0x364 <MCP3208_read+0x116>
		SPDR = reg[i]; // Load data to be sent into SPDR
     308:	24 2f       	mov	r18, r20
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	e1 e0       	ldi	r30, 0x01	; 1
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	ec 0f       	add	r30, r28
     312:	fd 1f       	adc	r31, r29
     314:	e2 0f       	add	r30, r18
     316:	f3 1f       	adc	r31, r19
     318:	80 81       	ld	r24, Z
     31a:	8e bd       	out	0x2e, r24	; 46

		// while (!(SPSR & (1 << SPIF))); // Wait for transmission to complete
		uint16_t timeout = 1000;
     31c:	88 ee       	ldi	r24, 0xE8	; 232
     31e:	93 e0       	ldi	r25, 0x03	; 3
		while (!(SPSR & (1 << SPIF)) && --timeout);
     320:	0d b4       	in	r0, 0x2d	; 45
     322:	07 fc       	sbrc	r0, 7
     324:	02 c0       	rjmp	.+4      	; 0x32a <MCP3208_read+0xdc>
     326:	01 97       	sbiw	r24, 0x01	; 1
     328:	d9 f7       	brne	.-10     	; 0x320 <MCP3208_read+0xd2>
		if (timeout == 0) {
     32a:	89 2b       	or	r24, r25
     32c:	91 f4       	brne	.+36     	; 0x352 <MCP3208_read+0x104>
			printf("SPI timeout at byte %d\n", i);
     32e:	3f 93       	push	r19
     330:	2f 93       	push	r18
     332:	87 e1       	ldi	r24, 0x17	; 23
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	9f 93       	push	r25
     338:	8f 93       	push	r24
     33a:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <printf>
			PORTD |= (1 << SPI_CS2); // Pull CS high
     33e:	8b b1       	in	r24, 0x0b	; 11
     340:	88 60       	ori	r24, 0x08	; 8
     342:	8b b9       	out	0x0b, r24	; 11
			return 0;
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	15 c0       	rjmp	.+42     	; 0x37c <MCP3208_read+0x12e>

		}
		buf[i] = SPDR; // Read received data
     352:	8e b5       	in	r24, 0x2e	; 46
     354:	e4 e0       	ldi	r30, 0x04	; 4
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	ec 0f       	add	r30, r28
     35a:	fd 1f       	adc	r31, r29
     35c:	e2 0f       	add	r30, r18
     35e:	f3 1f       	adc	r31, r19
     360:	80 83       	st	Z, r24
		}
		else{
	       PORTD &= ~(1 << SPI_CS2); // Pull CS low
	// SPI transmission: Send command bytes and receive data in response

	       for (uint8_t i = 0; i < 3; i++) {
     362:	4f 5f       	subi	r20, 0xFF	; 255
     364:	43 30       	cpi	r20, 0x03	; 3
     366:	80 f2       	brcs	.-96     	; 0x308 <MCP3208_read+0xba>

		}
		buf[i] = SPDR; // Read received data
	}
	
	PORTD |= (1 << SPI_CS2); // Pull CS high
     368:	8b b1       	in	r24, 0x0b	; 11
     36a:	88 60       	ori	r24, 0x08	; 8
     36c:	8b b9       	out	0x0b, r24	; 11
	// printf("raw value: %d\n", ((buf[1] & 0b00001111) << 8) | buf[2]);
	// Combine the two received bytes into a 12-bit value (the MCP3208's 12-bit result)
	return ((buf[1] & 0b00001111) << 8) | buf[2]; // Combine the high and low bytes
     36e:	8d 81       	ldd	r24, Y+5	; 0x05
     370:	8f 70       	andi	r24, 0x0F	; 15
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	98 2f       	mov	r25, r24
     376:	88 27       	eor	r24, r24
     378:	2e 81       	ldd	r18, Y+6	; 0x06
     37a:	82 2b       	or	r24, r18
		}

}
     37c:	26 96       	adiw	r28, 0x06	; 6
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <calculate_rms_current>:

// Function to calculate RMS current

float calculate_rms_current(uint8_t ADC_select,uint8_t channel) {
     38e:	cf 92       	push	r12
     390:	df 92       	push	r13
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	18 2f       	mov	r17, r24
     39e:	d6 2f       	mov	r29, r22
	float sum_of_squares = 0;
	printf("calculate_rms before for\n");
     3a0:	8f e2       	ldi	r24, 0x2F	; 47
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	0e 94 00 0b 	call	0x1600	; 0x1600 <puts>
	for (uint8_t i = 0; i < SAMPLES; i++) {
     3a8:	c0 e0       	ldi	r28, 0x00	; 0
}

// Function to calculate RMS current

float calculate_rms_current(uint8_t ADC_select,uint8_t channel) {
	float sum_of_squares = 0;
     3aa:	c1 2c       	mov	r12, r1
     3ac:	d1 2c       	mov	r13, r1
     3ae:	76 01       	movw	r14, r12
	printf("calculate_rms before for\n");
	for (uint8_t i = 0; i < SAMPLES; i++) {
     3b0:	2e c0       	rjmp	.+92     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		uint16_t adc_value = MCP3208_read(ADC_select,channel);
     3b2:	6d 2f       	mov	r22, r29
     3b4:	81 2f       	mov	r24, r17
     3b6:	0e 94 27 01 	call	0x24e	; 0x24e <MCP3208_read>
		//printf( " the raw value %d",adc_value);
		float v_adc = ((float)(adc_value * VREF) /(float) ADC_MAX);  // Convert ADC to voltage
     3ba:	bc 01       	movw	r22, r24
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 b6 04 	call	0x96c	; 0x96c <__floatunsisf>
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	40 ea       	ldi	r20, 0xA0	; 160
     3ca:	50 e4       	ldi	r21, 0x40	; 64
     3cc:	0e 94 44 05 	call	0xa88	; 0xa88 <__mulsf3>
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 e8       	ldi	r20, 0x80	; 128
     3d6:	59 e3       	ldi	r21, 0x39	; 57
     3d8:	0e 94 44 05 	call	0xa88	; 0xa88 <__mulsf3>
		//printf( " the VADC value %F", v_adc);
		float irms_Rb=v_adc/BURDEN_RES;
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	4b ee       	ldi	r20, 0xEB	; 235
     3e2:	53 e4       	ldi	r21, 0x43	; 67
     3e4:	0e 94 15 04 	call	0x82a	; 0x82a <__divsf3>
		//printf("v_adc[%d]: %.4f", i, v_adc);
		sum_of_squares += irms_Rb*irms_Rb ;
     3e8:	9b 01       	movw	r18, r22
     3ea:	ac 01       	movw	r20, r24
     3ec:	0e 94 44 05 	call	0xa88	; 0xa88 <__mulsf3>
     3f0:	9b 01       	movw	r18, r22
     3f2:	ac 01       	movw	r20, r24
     3f4:	c7 01       	movw	r24, r14
     3f6:	b6 01       	movw	r22, r12
     3f8:	0e 94 a9 03 	call	0x752	; 0x752 <__addsf3>
     3fc:	6b 01       	movw	r12, r22
     3fe:	7c 01       	movw	r14, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     400:	8f e8       	ldi	r24, 0x8F	; 143
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     408:	00 c0       	rjmp	.+0      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     40a:	00 00       	nop
// Function to calculate RMS current

float calculate_rms_current(uint8_t ADC_select,uint8_t channel) {
	float sum_of_squares = 0;
	printf("calculate_rms before for\n");
	for (uint8_t i = 0; i < SAMPLES; i++) {
     40c:	cf 5f       	subi	r28, 0xFF	; 255
     40e:	c4 36       	cpi	r28, 0x64	; 100
     410:	80 f2       	brcs	.-96     	; 0x3b2 <calculate_rms_current+0x24>
		sum_of_squares += irms_Rb*irms_Rb ;
		//printf("sumof_square %f\n",sum_of_squares);
		_delay_ms(SAMPLE_DELAY);                      // Sampling delay
	}

	float irms_A=sqrt(sum_of_squares / SAMPLES);
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	48 ec       	ldi	r20, 0xC8	; 200
     418:	52 e4       	ldi	r21, 0x42	; 66
     41a:	c7 01       	movw	r24, r14
     41c:	b6 01       	movw	r22, r12
     41e:	0e 94 15 04 	call	0x82a	; 0x82a <__divsf3>
     422:	0e 94 b7 05 	call	0xb6e	; 0xb6e <sqrt>
     426:	f6 2e       	mov	r15, r22
     428:	17 2f       	mov	r17, r23
     42a:	d8 2f       	mov	r29, r24
     42c:	c9 2f       	mov	r28, r25
	printf(" irms %f\n",irms_A);
     42e:	9f 93       	push	r25
     430:	8f 93       	push	r24
     432:	7f 93       	push	r23
     434:	6f 93       	push	r22
     436:	88 e4       	ldi	r24, 0x48	; 72
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	9f 93       	push	r25
     43c:	8f 93       	push	r24
     43e:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <printf>
	float Actual_current =irms_A*1500;
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e8       	ldi	r19, 0x80	; 128
     446:	4b eb       	ldi	r20, 0xBB	; 187
     448:	54 e4       	ldi	r21, 0x44	; 68
     44a:	6f 2d       	mov	r22, r15
     44c:	71 2f       	mov	r23, r17
     44e:	8d 2f       	mov	r24, r29
     450:	9c 2f       	mov	r25, r28
     452:	0e 94 44 05 	call	0xa88	; 0xa88 <__mulsf3>
	// return irms_A;
	return Actual_current;
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
}
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	1f 91       	pop	r17
     468:	ff 90       	pop	r15
     46a:	ef 90       	pop	r14
     46c:	df 90       	pop	r13
     46e:	cf 90       	pop	r12
     470:	08 95       	ret

00000472 <I2C_store_data>:

void I2C_store_data(uint8_t channel, float rms_current) {
     472:	cf 92       	push	r12
     474:	df 92       	push	r13
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	c8 2f       	mov	r28, r24
     480:	6a 01       	movw	r12, r20
     482:	7b 01       	movw	r14, r22
	printf("I2C_store_data begin\n");
     484:	82 e5       	ldi	r24, 0x52	; 82
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	0e 94 00 0b 	call	0x1600	; 0x1600 <puts>
	uint8_t offset = channel * 2;											// Each channel uses 2 bytes and offset mainly give the position of storeing data into buffer
     48c:	cc 0f       	add	r28, r28
	i2c_buffer[offset] = (uint8_t)((uint16_t)(rms_current * 100) & 0xFF);       // LSB store into buffer
     48e:	d0 e0       	ldi	r29, 0x00	; 0
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	48 ec       	ldi	r20, 0xC8	; 200
     496:	52 e4       	ldi	r21, 0x42	; 66
     498:	c7 01       	movw	r24, r14
     49a:	b6 01       	movw	r22, r12
     49c:	0e 94 44 05 	call	0xa88	; 0xa88 <__mulsf3>
     4a0:	0e 94 87 04 	call	0x90e	; 0x90e <__fixunssfsi>
     4a4:	fe 01       	movw	r30, r28
     4a6:	e4 53       	subi	r30, 0x34	; 52
     4a8:	fe 4f       	sbci	r31, 0xFE	; 254
     4aa:	60 83       	st	Z, r22
	i2c_buffer[offset + 1] = (uint8_t)((uint16_t)(rms_current * 100) >> 8);		// MSB store into buffer
     4ac:	c3 53       	subi	r28, 0x33	; 51
     4ae:	de 4f       	sbci	r29, 0xFE	; 254
     4b0:	78 83       	st	Y, r23
	//printf("I2C_store_data done\n");
}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	ff 90       	pop	r15
     4b8:	ef 90       	pop	r14
     4ba:	df 90       	pop	r13
     4bc:	cf 90       	pop	r12
     4be:	08 95       	ret

000004c0 <i2c_dynamic_address>:

//i2c interrupt communication
void i2c_dynamic_address(void)
{
	DDRC &= ~((1<<PINC2) | (1<<PINC3));// pin set as input  (for address setting in i2c)
     4c0:	87 b1       	in	r24, 0x07	; 7
     4c2:	83 7f       	andi	r24, 0xF3	; 243
     4c4:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PINC2) | (1 << PINC3);// pull up
     4c6:	88 b1       	in	r24, 0x08	; 8
     4c8:	8c 60       	ori	r24, 0x0C	; 12
     4ca:	88 b9       	out	0x08, r24	; 8

	uint8_t jumper_state = ((PINC & (1 << PINC2)) >> PINC2) << 1;  // Read PC2
     4cc:	86 b1       	in	r24, 0x06	; 6
     4ce:	84 70       	andi	r24, 0x04	; 4
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	95 95       	asr	r25
     4d4:	87 95       	ror	r24
     4d6:	95 95       	asr	r25
     4d8:	87 95       	ror	r24
     4da:	28 2f       	mov	r18, r24
     4dc:	22 0f       	add	r18, r18
	jumper_state |= (PINC & (1 << PINC3)) >> PINC3;                // Read PC3
     4de:	96 b1       	in	r25, 0x06	; 6
     4e0:	98 70       	andi	r25, 0x08	; 8
     4e2:	89 2f       	mov	r24, r25
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	95 95       	asr	r25
     4e8:	87 95       	ror	r24
     4ea:	95 95       	asr	r25
     4ec:	87 95       	ror	r24
     4ee:	95 95       	asr	r25
     4f0:	87 95       	ror	r24
     4f2:	82 2b       	or	r24, r18
	
	//uint8_t dip_switch = ((PINC & (1<<PINC2)) >> PINC2) | ((PINC & (1<<PINC3)) >> (PINC3 - 1));

	uint8_t slave_address = BASE_ADDRESS + jumper_state;
     4f4:	80 5e       	subi	r24, 0xE0	; 224
	//printf("slave addr: %d", slave_address);
	TWAR =(slave_address)<<1;
     4f6:	88 0f       	add	r24, r24
     4f8:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
     4fc:	08 95       	ret

000004fe <I2C_init>:
}


void I2C_init(void)
{
	i2c_dynamic_address();
     4fe:	0e 94 60 02 	call	0x4c0	; 0x4c0 <i2c_dynamic_address>
	TWCR = (1 << TWEN) |			// Enable TWI (I2C)
     502:	85 e4       	ldi	r24, 0x45	; 69
     504:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	(1 << TWEA) |			// Enable acknowledgment
	(1 << TWIE);				// Enable interrupt
	sei();							// Enable global interrupts
     508:	78 94       	sei
     50a:	08 95       	ret

0000050c <__vector_24>:
}


ISR(TWI_vect) {
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	2f 93       	push	r18
     518:	3f 93       	push	r19
     51a:	8f 93       	push	r24
     51c:	9f 93       	push	r25
     51e:	ef 93       	push	r30
     520:	ff 93       	push	r31
	static uint8_t response_buffer[16]; // Buffer for all 16 bytes
	static uint8_t byte_index = 0; // Tracks the byte being sent
	static uint8_t bytes_to_send = 2; // Default number of bytes to send
	
	switch (TWSR & 0xF8)
     522:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     526:	88 7f       	andi	r24, 0xF8	; 248
     528:	88 3a       	cpi	r24, 0xA8	; 168
     52a:	69 f1       	breq	.+90     	; 0x586 <__vector_24+0x7a>
     52c:	40 f4       	brcc	.+16     	; 0x53e <__vector_24+0x32>
     52e:	88 36       	cpi	r24, 0x68	; 104
     530:	81 f0       	breq	.+32     	; 0x552 <__vector_24+0x46>
     532:	80 38       	cpi	r24, 0x80	; 128
     534:	a1 f0       	breq	.+40     	; 0x55e <__vector_24+0x52>
     536:	80 36       	cpi	r24, 0x60	; 96
     538:	09 f0       	breq	.+2      	; 0x53c <__vector_24+0x30>
     53a:	74 c0       	rjmp	.+232    	; 0x624 <__vector_24+0x118>
     53c:	0a c0       	rjmp	.+20     	; 0x552 <__vector_24+0x46>
     53e:	80 3c       	cpi	r24, 0xC0	; 192
     540:	09 f4       	brne	.+2      	; 0x544 <__vector_24+0x38>
     542:	6a c0       	rjmp	.+212    	; 0x618 <__vector_24+0x10c>
     544:	88 3c       	cpi	r24, 0xC8	; 200
     546:	09 f4       	brne	.+2      	; 0x54a <__vector_24+0x3e>
     548:	67 c0       	rjmp	.+206    	; 0x618 <__vector_24+0x10c>
     54a:	88 3b       	cpi	r24, 0xB8	; 184
     54c:	09 f4       	brne	.+2      	; 0x550 <__vector_24+0x44>
     54e:	4c c0       	rjmp	.+152    	; 0x5e8 <__vector_24+0xdc>
     550:	69 c0       	rjmp	.+210    	; 0x624 <__vector_24+0x118>
	{
		case 0x60: // Own SLA+W received, ACK returned
		case 0x68: // Arbitration lost, SLA+W received
		byte_count = 0;
     552:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <byte_count>
		TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT) | (1 << TWIE);
     556:	85 ec       	ldi	r24, 0xC5	; 197
     558:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
     55c:	66 c0       	rjmp	.+204    	; 0x62a <__vector_24+0x11e>
		
		case 0x80: // Data byte received, ACK returned
		if (byte_count == 0)
     55e:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <byte_count>
     562:	81 11       	cpse	r24, r1
     564:	07 c0       	rjmp	.+14     	; 0x574 <__vector_24+0x68>
		{
			data_ready = 1;
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <data_ready>
			received_command = TWDR;
     56c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     570:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <received_command>
		}
		byte_count++;
     574:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <byte_count>
     578:	8f 5f       	subi	r24, 0xFF	; 255
     57a:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <byte_count>
		TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT) | (1 << TWIE);
     57e:	85 ec       	ldi	r24, 0xC5	; 197
     580:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
     584:	52 c0       	rjmp	.+164    	; 0x62a <__vector_24+0x11e>
		
		case 0xA8: // SLA+R received, ACK returned
		if (data_ready==1)
     586:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <data_ready>
     58a:	81 30       	cpi	r24, 0x01	; 1
     58c:	31 f5       	brne	.+76     	; 0x5da <__vector_24+0xce>
		{
			switch (received_command)
     58e:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <received_command>
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	69 f0       	breq	.+26     	; 0x5b0 <__vector_24+0xa4>
     596:	13 c0       	rjmp	.+38     	; 0x5be <__vector_24+0xb2>
			{
				case 0x01: // Send all 16 bytes
				for (uint8_t i = 0; i < 16; i++)
				{
					response_buffer[i] = i2c_buffer[i];
     598:	82 2f       	mov	r24, r18
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	fc 01       	movw	r30, r24
     59e:	e4 53       	subi	r30, 0x34	; 52
     5a0:	fe 4f       	sbci	r31, 0xFE	; 254
     5a2:	30 81       	ld	r19, Z
     5a4:	fc 01       	movw	r30, r24
     5a6:	e7 54       	subi	r30, 0x47	; 71
     5a8:	fe 4f       	sbci	r31, 0xFE	; 254
     5aa:	30 83       	st	Z, r19
		if (data_ready==1)
		{
			switch (received_command)
			{
				case 0x01: // Send all 16 bytes
				for (uint8_t i = 0; i < 16; i++)
     5ac:	2f 5f       	subi	r18, 0xFF	; 255
     5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <__vector_24+0xa6>
		break;
		
		case 0xA8: // SLA+R received, ACK returned
		if (data_ready==1)
		{
			switch (received_command)
     5b0:	20 e0       	ldi	r18, 0x00	; 0
			{
				case 0x01: // Send all 16 bytes
				for (uint8_t i = 0; i < 16; i++)
     5b2:	20 31       	cpi	r18, 0x10	; 16
     5b4:	88 f3       	brcs	.-30     	; 0x598 <__vector_24+0x8c>
				{
					response_buffer[i] = i2c_buffer[i];
				}
				bytes_to_send = 16;
     5b6:	80 e1       	ldi	r24, 0x10	; 16
     5b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
     5bc:	06 c0       	rjmp	.+12     	; 0x5ca <__vector_24+0xbe>

				default: // Unknown command
				response_buffer[0] = 0xFF;
     5be:	8f ef       	ldi	r24, 0xFF	; 255
     5c0:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <response_buffer.2197>
				bytes_to_send = 1;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
			}

			byte_index = 0;
			TWDR = response_buffer[byte_index++]; // Send first byte
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <__data_end>
     5d0:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <response_buffer.2197>
     5d4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <__vector_24+0xd4>
		}
		else
		{
			TWDR = 0xFF; // If no valid data, send default response
     5da:	8f ef       	ldi	r24, 0xFF	; 255
     5dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		}
		TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT) | (1 << TWIE);
     5e0:	85 ec       	ldi	r24, 0xC5	; 197
     5e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
     5e6:	21 c0       	rjmp	.+66     	; 0x62a <__vector_24+0x11e>

		case 0xB8: // Data byte transmitted, ACK received (Master wants more data)
		if (byte_index < bytes_to_send)
     5e8:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <__data_end>
     5ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5f0:	e8 17       	cp	r30, r24
     5f2:	58 f4       	brcc	.+22     	; 0x60a <__vector_24+0xfe>
		{
			TWDR = response_buffer[byte_index++]; // Send next byte
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	8e 0f       	add	r24, r30
     5f8:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <__data_end>
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	e7 54       	subi	r30, 0x47	; 71
     600:	fe 4f       	sbci	r31, 0xFE	; 254
     602:	80 81       	ld	r24, Z
     604:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     608:	03 c0       	rjmp	.+6      	; 0x610 <__vector_24+0x104>
		}
		else
		{
			TWDR = 0xFF; // If master requests extra bytes, send default
     60a:	8f ef       	ldi	r24, 0xFF	; 255
     60c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		}
		TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT) | (1 << TWIE);
     610:	85 ec       	ldi	r24, 0xC5	; 197
     612:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
     616:	09 c0       	rjmp	.+18     	; 0x62a <__vector_24+0x11e>

		case 0xC0: // Data transmitted, NACK received (Master does not want more data)
		case 0xC8: // Last data byte transmitted, ACK received
		data_ready = 0; // Reset data_ready flag after transmission
     618:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <data_ready>
		TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT) | (1 << TWIE);
     61c:	85 ec       	ldi	r24, 0xC5	; 197
     61e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
     622:	03 c0       	rjmp	.+6      	; 0x62a <__vector_24+0x11e>

		default: // Handle unexpected states
		// printf("Unexpected I2C status: 0x%02X\n", TWSR & 0xF8);
		TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT) | (1 << TWIE);
     624:	85 ec       	ldi	r24, 0xC5	; 197
     626:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
	}
}
     62a:	ff 91       	pop	r31
     62c:	ef 91       	pop	r30
     62e:	9f 91       	pop	r25
     630:	8f 91       	pop	r24
     632:	3f 91       	pop	r19
     634:	2f 91       	pop	r18
     636:	0f 90       	pop	r0
     638:	0f be       	out	0x3f, r0	; 63
     63a:	0f 90       	pop	r0
     63c:	1f 90       	pop	r1
     63e:	18 95       	reti

00000640 <USART_Init>:
// Initialize USART for communication

void USART_Init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);  // Set high byte of UBRR
     640:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;         // Set low byte of UBRR
     644:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// Enable transmitter
	UCSR0B = (1 << TXEN0);
     648:	88 e0       	ldi	r24, 0x08	; 8
     64a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Set frame format: 8 data bits, 1 stop bit
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     64e:	86 e0       	ldi	r24, 0x06	; 6
     650:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     654:	08 95       	ret

00000656 <main>:

// Main Function

int main(void) {
	unsigned int ubrr = MY_UBRR;
	USART_Init(ubrr);		// Initialize USART
     656:	87 e6       	ldi	r24, 0x67	; 103
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 20 03 	call	0x640	; 0x640 <USART_Init>
	stdout = &mystdout;		// Redirect printf to USART
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <__iob+0x3>
     666:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__iob+0x2>
	init_pins();  
     66a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <init_pins>
	I2C_init();               
     66e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <I2C_init>
	SPI_init();
     672:	0e 94 12 01 	call	0x224	; 0x224 <SPI_init>
	printf("SPI initialized\n");
     676:	87 e6       	ldi	r24, 0x67	; 103
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	0e 94 00 0b 	call	0x1600	; 0x1600 <puts>
// 		float rms_current = calculate_rms_current(0);
// 		//rms_current_values[channel] = rms_current;
// 		printf("RMS Current: %.6f A\n", rms_current);
		//_delay_ms(1000); // Delay for stability
		uint8_t index=0;
		for(uint8_t channel=0; channel<8;channel=channel+2)
     67e:	d0 e0       	ldi	r29, 0x00	; 0

// 		float rms_current = calculate_rms_current(0);
// 		//rms_current_values[channel] = rms_current;
// 		printf("RMS Current: %.6f A\n", rms_current);
		//_delay_ms(1000); // Delay for stability
		uint8_t index=0;
     680:	c0 e0       	ldi	r28, 0x00	; 0
		for(uint8_t channel=0; channel<8;channel=channel+2)
     682:	25 c0       	rjmp	.+74     	; 0x6ce <main+0x78>
		{
			float Actual_current= calculate_rms_current(1,channel);
     684:	6d 2f       	mov	r22, r29
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	0e 94 c7 01 	call	0x38e	; 0x38e <calculate_rms_current>
     68c:	e6 2e       	mov	r14, r22
     68e:	f7 2e       	mov	r15, r23
     690:	08 2f       	mov	r16, r24
     692:	19 2f       	mov	r17, r25
			printf("adc1_current_channel[%d]: %.6f\n",index,Actual_current);
     694:	9f 93       	push	r25
     696:	8f 93       	push	r24
     698:	7f 93       	push	r23
     69a:	6f 93       	push	r22
     69c:	1f 92       	push	r1
     69e:	cf 93       	push	r28
     6a0:	87 e7       	ldi	r24, 0x77	; 119
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	9f 93       	push	r25
     6a6:	8f 93       	push	r24
     6a8:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <printf>
			I2C_store_data(index, Actual_current);
     6ac:	4e 2d       	mov	r20, r14
     6ae:	5f 2d       	mov	r21, r15
     6b0:	60 2f       	mov	r22, r16
     6b2:	71 2f       	mov	r23, r17
     6b4:	8c 2f       	mov	r24, r28
     6b6:	0e 94 39 02 	call	0x472	; 0x472 <I2C_store_data>
			index++;
     6ba:	cf 5f       	subi	r28, 0xFF	; 255
// 		float rms_current = calculate_rms_current(0);
// 		//rms_current_values[channel] = rms_current;
// 		printf("RMS Current: %.6f A\n", rms_current);
		//_delay_ms(1000); // Delay for stability
		uint8_t index=0;
		for(uint8_t channel=0; channel<8;channel=channel+2)
     6bc:	de 5f       	subi	r29, 0xFE	; 254
     6be:	8d b7       	in	r24, 0x3d	; 61
     6c0:	9e b7       	in	r25, 0x3e	; 62
     6c2:	08 96       	adiw	r24, 0x08	; 8
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	9e bf       	out	0x3e, r25	; 62
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	8d bf       	out	0x3d, r24	; 61
     6ce:	d8 30       	cpi	r29, 0x08	; 8
     6d0:	c8 f2       	brcs	.-78     	; 0x684 <main+0x2e>
     6d2:	d0 e0       	ldi	r29, 0x00	; 0
     6d4:	25 c0       	rjmp	.+74     	; 0x720 <main+0xca>
			index++;
		}
		
		 for(uint8_t channel=0; channel<8;channel=channel+2)
		 {
			 float Actual_current= calculate_rms_current(2,channel);
     6d6:	6d 2f       	mov	r22, r29
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	0e 94 c7 01 	call	0x38e	; 0x38e <calculate_rms_current>
     6de:	e6 2e       	mov	r14, r22
     6e0:	f7 2e       	mov	r15, r23
     6e2:	08 2f       	mov	r16, r24
     6e4:	19 2f       	mov	r17, r25
			 printf("adc2_current_channel[%d]: %.6f\n",index,Actual_current);
     6e6:	9f 93       	push	r25
     6e8:	8f 93       	push	r24
     6ea:	7f 93       	push	r23
     6ec:	6f 93       	push	r22
     6ee:	1f 92       	push	r1
     6f0:	cf 93       	push	r28
     6f2:	87 e9       	ldi	r24, 0x97	; 151
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	9f 93       	push	r25
     6f8:	8f 93       	push	r24
     6fa:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <printf>
			 I2C_store_data(index, Actual_current);
     6fe:	4e 2d       	mov	r20, r14
     700:	5f 2d       	mov	r21, r15
     702:	60 2f       	mov	r22, r16
     704:	71 2f       	mov	r23, r17
     706:	8c 2f       	mov	r24, r28
     708:	0e 94 39 02 	call	0x472	; 0x472 <I2C_store_data>
			 index++;
     70c:	cf 5f       	subi	r28, 0xFF	; 255
			printf("adc1_current_channel[%d]: %.6f\n",index,Actual_current);
			I2C_store_data(index, Actual_current);
			index++;
		}
		
		 for(uint8_t channel=0; channel<8;channel=channel+2)
     70e:	de 5f       	subi	r29, 0xFE	; 254
     710:	8d b7       	in	r24, 0x3d	; 61
     712:	9e b7       	in	r25, 0x3e	; 62
     714:	08 96       	adiw	r24, 0x08	; 8
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	9e bf       	out	0x3e, r25	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	8d bf       	out	0x3d, r24	; 61
     720:	d8 30       	cpi	r29, 0x08	; 8
     722:	c8 f2       	brcs	.-78     	; 0x6d6 <main+0x80>
     724:	ac cf       	rjmp	.-168    	; 0x67e <main+0x28>

00000726 <USART_Transmit>:
}

// Function to transmit data via USART

void USART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));  // Wait for the transmit buffer to be empty
     726:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     72a:	95 ff       	sbrs	r25, 5
     72c:	fc cf       	rjmp	.-8      	; 0x726 <USART_Transmit>
	UDR0 = data;  // Put data into the transmit buffer, sending the data
     72e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     732:	08 95       	ret

00000734 <USART_putchar>:
}

// Redirect printf to USART

int USART_putchar(char c, FILE *stream) {
     734:	cf 93       	push	r28
     736:	c8 2f       	mov	r28, r24
	if (c == '\n') {
     738:	8a 30       	cpi	r24, 0x0A	; 10
     73a:	19 f4       	brne	.+6      	; 0x742 <USART_putchar+0xe>
		USART_Transmit('\r');  // Send a carriage return before newline
     73c:	8d e0       	ldi	r24, 0x0D	; 13
     73e:	0e 94 93 03 	call	0x726	; 0x726 <USART_Transmit>
	}

	USART_Transmit(c);  // Send the character
     742:	8c 2f       	mov	r24, r28
     744:	0e 94 93 03 	call	0x726	; 0x726 <USART_Transmit>
	return 0;
}
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <__subsf3>:
     750:	50 58       	subi	r21, 0x80	; 128

00000752 <__addsf3>:
     752:	bb 27       	eor	r27, r27
     754:	aa 27       	eor	r26, r26
     756:	0e 94 c0 03 	call	0x780	; 0x780 <__addsf3x>
     75a:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_round>
     75e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fp_pscA>
     762:	38 f0       	brcs	.+14     	; 0x772 <__addsf3+0x20>
     764:	0e 94 03 05 	call	0xa06	; 0xa06 <__fp_pscB>
     768:	20 f0       	brcs	.+8      	; 0x772 <__addsf3+0x20>
     76a:	39 f4       	brne	.+14     	; 0x77a <__addsf3+0x28>
     76c:	9f 3f       	cpi	r25, 0xFF	; 255
     76e:	19 f4       	brne	.+6      	; 0x776 <__addsf3+0x24>
     770:	26 f4       	brtc	.+8      	; 0x77a <__addsf3+0x28>
     772:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__fp_nan>
     776:	0e f4       	brtc	.+2      	; 0x77a <__addsf3+0x28>
     778:	e0 95       	com	r30
     77a:	e7 fb       	bst	r30, 7
     77c:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__fp_inf>

00000780 <__addsf3x>:
     780:	e9 2f       	mov	r30, r25
     782:	0e 94 1b 05 	call	0xa36	; 0xa36 <__fp_split3>
     786:	58 f3       	brcs	.-42     	; 0x75e <__addsf3+0xc>
     788:	ba 17       	cp	r27, r26
     78a:	62 07       	cpc	r22, r18
     78c:	73 07       	cpc	r23, r19
     78e:	84 07       	cpc	r24, r20
     790:	95 07       	cpc	r25, r21
     792:	20 f0       	brcs	.+8      	; 0x79c <__addsf3x+0x1c>
     794:	79 f4       	brne	.+30     	; 0x7b4 <__addsf3x+0x34>
     796:	a6 f5       	brtc	.+104    	; 0x800 <__DATA_REGION_LENGTH__>
     798:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_zero>
     79c:	0e f4       	brtc	.+2      	; 0x7a0 <__addsf3x+0x20>
     79e:	e0 95       	com	r30
     7a0:	0b 2e       	mov	r0, r27
     7a2:	ba 2f       	mov	r27, r26
     7a4:	a0 2d       	mov	r26, r0
     7a6:	0b 01       	movw	r0, r22
     7a8:	b9 01       	movw	r22, r18
     7aa:	90 01       	movw	r18, r0
     7ac:	0c 01       	movw	r0, r24
     7ae:	ca 01       	movw	r24, r20
     7b0:	a0 01       	movw	r20, r0
     7b2:	11 24       	eor	r1, r1
     7b4:	ff 27       	eor	r31, r31
     7b6:	59 1b       	sub	r21, r25
     7b8:	99 f0       	breq	.+38     	; 0x7e0 <__addsf3x+0x60>
     7ba:	59 3f       	cpi	r21, 0xF9	; 249
     7bc:	50 f4       	brcc	.+20     	; 0x7d2 <__addsf3x+0x52>
     7be:	50 3e       	cpi	r21, 0xE0	; 224
     7c0:	68 f1       	brcs	.+90     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     7c2:	1a 16       	cp	r1, r26
     7c4:	f0 40       	sbci	r31, 0x00	; 0
     7c6:	a2 2f       	mov	r26, r18
     7c8:	23 2f       	mov	r18, r19
     7ca:	34 2f       	mov	r19, r20
     7cc:	44 27       	eor	r20, r20
     7ce:	58 5f       	subi	r21, 0xF8	; 248
     7d0:	f3 cf       	rjmp	.-26     	; 0x7b8 <__addsf3x+0x38>
     7d2:	46 95       	lsr	r20
     7d4:	37 95       	ror	r19
     7d6:	27 95       	ror	r18
     7d8:	a7 95       	ror	r26
     7da:	f0 40       	sbci	r31, 0x00	; 0
     7dc:	53 95       	inc	r21
     7de:	c9 f7       	brne	.-14     	; 0x7d2 <__addsf3x+0x52>
     7e0:	7e f4       	brtc	.+30     	; 0x800 <__DATA_REGION_LENGTH__>
     7e2:	1f 16       	cp	r1, r31
     7e4:	ba 0b       	sbc	r27, r26
     7e6:	62 0b       	sbc	r22, r18
     7e8:	73 0b       	sbc	r23, r19
     7ea:	84 0b       	sbc	r24, r20
     7ec:	ba f0       	brmi	.+46     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     7ee:	91 50       	subi	r25, 0x01	; 1
     7f0:	a1 f0       	breq	.+40     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     7f2:	ff 0f       	add	r31, r31
     7f4:	bb 1f       	adc	r27, r27
     7f6:	66 1f       	adc	r22, r22
     7f8:	77 1f       	adc	r23, r23
     7fa:	88 1f       	adc	r24, r24
     7fc:	c2 f7       	brpl	.-16     	; 0x7ee <__addsf3x+0x6e>
     7fe:	0e c0       	rjmp	.+28     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     800:	ba 0f       	add	r27, r26
     802:	62 1f       	adc	r22, r18
     804:	73 1f       	adc	r23, r19
     806:	84 1f       	adc	r24, r20
     808:	48 f4       	brcc	.+18     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     80a:	87 95       	ror	r24
     80c:	77 95       	ror	r23
     80e:	67 95       	ror	r22
     810:	b7 95       	ror	r27
     812:	f7 95       	ror	r31
     814:	9e 3f       	cpi	r25, 0xFE	; 254
     816:	08 f0       	brcs	.+2      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     818:	b0 cf       	rjmp	.-160    	; 0x77a <__addsf3+0x28>
     81a:	93 95       	inc	r25
     81c:	88 0f       	add	r24, r24
     81e:	08 f0       	brcs	.+2      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     820:	99 27       	eor	r25, r25
     822:	ee 0f       	add	r30, r30
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	08 95       	ret

0000082a <__divsf3>:
     82a:	0e 94 29 04 	call	0x852	; 0x852 <__divsf3x>
     82e:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_round>
     832:	0e 94 03 05 	call	0xa06	; 0xa06 <__fp_pscB>
     836:	58 f0       	brcs	.+22     	; 0x84e <__divsf3+0x24>
     838:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fp_pscA>
     83c:	40 f0       	brcs	.+16     	; 0x84e <__divsf3+0x24>
     83e:	29 f4       	brne	.+10     	; 0x84a <__divsf3+0x20>
     840:	5f 3f       	cpi	r21, 0xFF	; 255
     842:	29 f0       	breq	.+10     	; 0x84e <__divsf3+0x24>
     844:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__fp_inf>
     848:	51 11       	cpse	r21, r1
     84a:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_szero>
     84e:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__fp_nan>

00000852 <__divsf3x>:
     852:	0e 94 1b 05 	call	0xa36	; 0xa36 <__fp_split3>
     856:	68 f3       	brcs	.-38     	; 0x832 <__divsf3+0x8>

00000858 <__divsf3_pse>:
     858:	99 23       	and	r25, r25
     85a:	b1 f3       	breq	.-20     	; 0x848 <__divsf3+0x1e>
     85c:	55 23       	and	r21, r21
     85e:	91 f3       	breq	.-28     	; 0x844 <__divsf3+0x1a>
     860:	95 1b       	sub	r25, r21
     862:	55 0b       	sbc	r21, r21
     864:	bb 27       	eor	r27, r27
     866:	aa 27       	eor	r26, r26
     868:	62 17       	cp	r22, r18
     86a:	73 07       	cpc	r23, r19
     86c:	84 07       	cpc	r24, r20
     86e:	38 f0       	brcs	.+14     	; 0x87e <__divsf3_pse+0x26>
     870:	9f 5f       	subi	r25, 0xFF	; 255
     872:	5f 4f       	sbci	r21, 0xFF	; 255
     874:	22 0f       	add	r18, r18
     876:	33 1f       	adc	r19, r19
     878:	44 1f       	adc	r20, r20
     87a:	aa 1f       	adc	r26, r26
     87c:	a9 f3       	breq	.-22     	; 0x868 <__divsf3_pse+0x10>
     87e:	35 d0       	rcall	.+106    	; 0x8ea <__divsf3_pse+0x92>
     880:	0e 2e       	mov	r0, r30
     882:	3a f0       	brmi	.+14     	; 0x892 <__divsf3_pse+0x3a>
     884:	e0 e8       	ldi	r30, 0x80	; 128
     886:	32 d0       	rcall	.+100    	; 0x8ec <__divsf3_pse+0x94>
     888:	91 50       	subi	r25, 0x01	; 1
     88a:	50 40       	sbci	r21, 0x00	; 0
     88c:	e6 95       	lsr	r30
     88e:	00 1c       	adc	r0, r0
     890:	ca f7       	brpl	.-14     	; 0x884 <__divsf3_pse+0x2c>
     892:	2b d0       	rcall	.+86     	; 0x8ea <__divsf3_pse+0x92>
     894:	fe 2f       	mov	r31, r30
     896:	29 d0       	rcall	.+82     	; 0x8ea <__divsf3_pse+0x92>
     898:	66 0f       	add	r22, r22
     89a:	77 1f       	adc	r23, r23
     89c:	88 1f       	adc	r24, r24
     89e:	bb 1f       	adc	r27, r27
     8a0:	26 17       	cp	r18, r22
     8a2:	37 07       	cpc	r19, r23
     8a4:	48 07       	cpc	r20, r24
     8a6:	ab 07       	cpc	r26, r27
     8a8:	b0 e8       	ldi	r27, 0x80	; 128
     8aa:	09 f0       	breq	.+2      	; 0x8ae <__divsf3_pse+0x56>
     8ac:	bb 0b       	sbc	r27, r27
     8ae:	80 2d       	mov	r24, r0
     8b0:	bf 01       	movw	r22, r30
     8b2:	ff 27       	eor	r31, r31
     8b4:	93 58       	subi	r25, 0x83	; 131
     8b6:	5f 4f       	sbci	r21, 0xFF	; 255
     8b8:	3a f0       	brmi	.+14     	; 0x8c8 <__divsf3_pse+0x70>
     8ba:	9e 3f       	cpi	r25, 0xFE	; 254
     8bc:	51 05       	cpc	r21, r1
     8be:	78 f0       	brcs	.+30     	; 0x8de <__divsf3_pse+0x86>
     8c0:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__fp_inf>
     8c4:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_szero>
     8c8:	5f 3f       	cpi	r21, 0xFF	; 255
     8ca:	e4 f3       	brlt	.-8      	; 0x8c4 <__divsf3_pse+0x6c>
     8cc:	98 3e       	cpi	r25, 0xE8	; 232
     8ce:	d4 f3       	brlt	.-12     	; 0x8c4 <__divsf3_pse+0x6c>
     8d0:	86 95       	lsr	r24
     8d2:	77 95       	ror	r23
     8d4:	67 95       	ror	r22
     8d6:	b7 95       	ror	r27
     8d8:	f7 95       	ror	r31
     8da:	9f 5f       	subi	r25, 0xFF	; 255
     8dc:	c9 f7       	brne	.-14     	; 0x8d0 <__divsf3_pse+0x78>
     8de:	88 0f       	add	r24, r24
     8e0:	91 1d       	adc	r25, r1
     8e2:	96 95       	lsr	r25
     8e4:	87 95       	ror	r24
     8e6:	97 f9       	bld	r25, 7
     8e8:	08 95       	ret
     8ea:	e1 e0       	ldi	r30, 0x01	; 1
     8ec:	66 0f       	add	r22, r22
     8ee:	77 1f       	adc	r23, r23
     8f0:	88 1f       	adc	r24, r24
     8f2:	bb 1f       	adc	r27, r27
     8f4:	62 17       	cp	r22, r18
     8f6:	73 07       	cpc	r23, r19
     8f8:	84 07       	cpc	r24, r20
     8fa:	ba 07       	cpc	r27, r26
     8fc:	20 f0       	brcs	.+8      	; 0x906 <__stack+0x7>
     8fe:	62 1b       	sub	r22, r18
     900:	73 0b       	sbc	r23, r19
     902:	84 0b       	sbc	r24, r20
     904:	ba 0b       	sbc	r27, r26
     906:	ee 1f       	adc	r30, r30
     908:	88 f7       	brcc	.-30     	; 0x8ec <__divsf3_pse+0x94>
     90a:	e0 95       	com	r30
     90c:	08 95       	ret

0000090e <__fixunssfsi>:
     90e:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_splitA>
     912:	88 f0       	brcs	.+34     	; 0x936 <__fixunssfsi+0x28>
     914:	9f 57       	subi	r25, 0x7F	; 127
     916:	98 f0       	brcs	.+38     	; 0x93e <__fixunssfsi+0x30>
     918:	b9 2f       	mov	r27, r25
     91a:	99 27       	eor	r25, r25
     91c:	b7 51       	subi	r27, 0x17	; 23
     91e:	b0 f0       	brcs	.+44     	; 0x94c <__fixunssfsi+0x3e>
     920:	e1 f0       	breq	.+56     	; 0x95a <__fixunssfsi+0x4c>
     922:	66 0f       	add	r22, r22
     924:	77 1f       	adc	r23, r23
     926:	88 1f       	adc	r24, r24
     928:	99 1f       	adc	r25, r25
     92a:	1a f0       	brmi	.+6      	; 0x932 <__fixunssfsi+0x24>
     92c:	ba 95       	dec	r27
     92e:	c9 f7       	brne	.-14     	; 0x922 <__fixunssfsi+0x14>
     930:	14 c0       	rjmp	.+40     	; 0x95a <__fixunssfsi+0x4c>
     932:	b1 30       	cpi	r27, 0x01	; 1
     934:	91 f0       	breq	.+36     	; 0x95a <__fixunssfsi+0x4c>
     936:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fp_zero>
     93a:	b1 e0       	ldi	r27, 0x01	; 1
     93c:	08 95       	ret
     93e:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_zero>
     942:	67 2f       	mov	r22, r23
     944:	78 2f       	mov	r23, r24
     946:	88 27       	eor	r24, r24
     948:	b8 5f       	subi	r27, 0xF8	; 248
     94a:	39 f0       	breq	.+14     	; 0x95a <__fixunssfsi+0x4c>
     94c:	b9 3f       	cpi	r27, 0xF9	; 249
     94e:	cc f3       	brlt	.-14     	; 0x942 <__fixunssfsi+0x34>
     950:	86 95       	lsr	r24
     952:	77 95       	ror	r23
     954:	67 95       	ror	r22
     956:	b3 95       	inc	r27
     958:	d9 f7       	brne	.-10     	; 0x950 <__fixunssfsi+0x42>
     95a:	3e f4       	brtc	.+14     	; 0x96a <__fixunssfsi+0x5c>
     95c:	90 95       	com	r25
     95e:	80 95       	com	r24
     960:	70 95       	com	r23
     962:	61 95       	neg	r22
     964:	7f 4f       	sbci	r23, 0xFF	; 255
     966:	8f 4f       	sbci	r24, 0xFF	; 255
     968:	9f 4f       	sbci	r25, 0xFF	; 255
     96a:	08 95       	ret

0000096c <__floatunsisf>:
     96c:	e8 94       	clt
     96e:	09 c0       	rjmp	.+18     	; 0x982 <__floatsisf+0x12>

00000970 <__floatsisf>:
     970:	97 fb       	bst	r25, 7
     972:	3e f4       	brtc	.+14     	; 0x982 <__floatsisf+0x12>
     974:	90 95       	com	r25
     976:	80 95       	com	r24
     978:	70 95       	com	r23
     97a:	61 95       	neg	r22
     97c:	7f 4f       	sbci	r23, 0xFF	; 255
     97e:	8f 4f       	sbci	r24, 0xFF	; 255
     980:	9f 4f       	sbci	r25, 0xFF	; 255
     982:	99 23       	and	r25, r25
     984:	a9 f0       	breq	.+42     	; 0x9b0 <__floatsisf+0x40>
     986:	f9 2f       	mov	r31, r25
     988:	96 e9       	ldi	r25, 0x96	; 150
     98a:	bb 27       	eor	r27, r27
     98c:	93 95       	inc	r25
     98e:	f6 95       	lsr	r31
     990:	87 95       	ror	r24
     992:	77 95       	ror	r23
     994:	67 95       	ror	r22
     996:	b7 95       	ror	r27
     998:	f1 11       	cpse	r31, r1
     99a:	f8 cf       	rjmp	.-16     	; 0x98c <__floatsisf+0x1c>
     99c:	fa f4       	brpl	.+62     	; 0x9dc <__floatsisf+0x6c>
     99e:	bb 0f       	add	r27, r27
     9a0:	11 f4       	brne	.+4      	; 0x9a6 <__floatsisf+0x36>
     9a2:	60 ff       	sbrs	r22, 0
     9a4:	1b c0       	rjmp	.+54     	; 0x9dc <__floatsisf+0x6c>
     9a6:	6f 5f       	subi	r22, 0xFF	; 255
     9a8:	7f 4f       	sbci	r23, 0xFF	; 255
     9aa:	8f 4f       	sbci	r24, 0xFF	; 255
     9ac:	9f 4f       	sbci	r25, 0xFF	; 255
     9ae:	16 c0       	rjmp	.+44     	; 0x9dc <__floatsisf+0x6c>
     9b0:	88 23       	and	r24, r24
     9b2:	11 f0       	breq	.+4      	; 0x9b8 <__floatsisf+0x48>
     9b4:	96 e9       	ldi	r25, 0x96	; 150
     9b6:	11 c0       	rjmp	.+34     	; 0x9da <__floatsisf+0x6a>
     9b8:	77 23       	and	r23, r23
     9ba:	21 f0       	breq	.+8      	; 0x9c4 <__floatsisf+0x54>
     9bc:	9e e8       	ldi	r25, 0x8E	; 142
     9be:	87 2f       	mov	r24, r23
     9c0:	76 2f       	mov	r23, r22
     9c2:	05 c0       	rjmp	.+10     	; 0x9ce <__floatsisf+0x5e>
     9c4:	66 23       	and	r22, r22
     9c6:	71 f0       	breq	.+28     	; 0x9e4 <__floatsisf+0x74>
     9c8:	96 e8       	ldi	r25, 0x86	; 134
     9ca:	86 2f       	mov	r24, r22
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	2a f0       	brmi	.+10     	; 0x9dc <__floatsisf+0x6c>
     9d2:	9a 95       	dec	r25
     9d4:	66 0f       	add	r22, r22
     9d6:	77 1f       	adc	r23, r23
     9d8:	88 1f       	adc	r24, r24
     9da:	da f7       	brpl	.-10     	; 0x9d2 <__floatsisf+0x62>
     9dc:	88 0f       	add	r24, r24
     9de:	96 95       	lsr	r25
     9e0:	87 95       	ror	r24
     9e2:	97 f9       	bld	r25, 7
     9e4:	08 95       	ret

000009e6 <__fp_inf>:
     9e6:	97 f9       	bld	r25, 7
     9e8:	9f 67       	ori	r25, 0x7F	; 127
     9ea:	80 e8       	ldi	r24, 0x80	; 128
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	08 95       	ret

000009f2 <__fp_nan>:
     9f2:	9f ef       	ldi	r25, 0xFF	; 255
     9f4:	80 ec       	ldi	r24, 0xC0	; 192
     9f6:	08 95       	ret

000009f8 <__fp_pscA>:
     9f8:	00 24       	eor	r0, r0
     9fa:	0a 94       	dec	r0
     9fc:	16 16       	cp	r1, r22
     9fe:	17 06       	cpc	r1, r23
     a00:	18 06       	cpc	r1, r24
     a02:	09 06       	cpc	r0, r25
     a04:	08 95       	ret

00000a06 <__fp_pscB>:
     a06:	00 24       	eor	r0, r0
     a08:	0a 94       	dec	r0
     a0a:	12 16       	cp	r1, r18
     a0c:	13 06       	cpc	r1, r19
     a0e:	14 06       	cpc	r1, r20
     a10:	05 06       	cpc	r0, r21
     a12:	08 95       	ret

00000a14 <__fp_round>:
     a14:	09 2e       	mov	r0, r25
     a16:	03 94       	inc	r0
     a18:	00 0c       	add	r0, r0
     a1a:	11 f4       	brne	.+4      	; 0xa20 <__fp_round+0xc>
     a1c:	88 23       	and	r24, r24
     a1e:	52 f0       	brmi	.+20     	; 0xa34 <__fp_round+0x20>
     a20:	bb 0f       	add	r27, r27
     a22:	40 f4       	brcc	.+16     	; 0xa34 <__fp_round+0x20>
     a24:	bf 2b       	or	r27, r31
     a26:	11 f4       	brne	.+4      	; 0xa2c <__fp_round+0x18>
     a28:	60 ff       	sbrs	r22, 0
     a2a:	04 c0       	rjmp	.+8      	; 0xa34 <__fp_round+0x20>
     a2c:	6f 5f       	subi	r22, 0xFF	; 255
     a2e:	7f 4f       	sbci	r23, 0xFF	; 255
     a30:	8f 4f       	sbci	r24, 0xFF	; 255
     a32:	9f 4f       	sbci	r25, 0xFF	; 255
     a34:	08 95       	ret

00000a36 <__fp_split3>:
     a36:	57 fd       	sbrc	r21, 7
     a38:	90 58       	subi	r25, 0x80	; 128
     a3a:	44 0f       	add	r20, r20
     a3c:	55 1f       	adc	r21, r21
     a3e:	59 f0       	breq	.+22     	; 0xa56 <__fp_splitA+0x10>
     a40:	5f 3f       	cpi	r21, 0xFF	; 255
     a42:	71 f0       	breq	.+28     	; 0xa60 <__fp_splitA+0x1a>
     a44:	47 95       	ror	r20

00000a46 <__fp_splitA>:
     a46:	88 0f       	add	r24, r24
     a48:	97 fb       	bst	r25, 7
     a4a:	99 1f       	adc	r25, r25
     a4c:	61 f0       	breq	.+24     	; 0xa66 <__fp_splitA+0x20>
     a4e:	9f 3f       	cpi	r25, 0xFF	; 255
     a50:	79 f0       	breq	.+30     	; 0xa70 <__fp_splitA+0x2a>
     a52:	87 95       	ror	r24
     a54:	08 95       	ret
     a56:	12 16       	cp	r1, r18
     a58:	13 06       	cpc	r1, r19
     a5a:	14 06       	cpc	r1, r20
     a5c:	55 1f       	adc	r21, r21
     a5e:	f2 cf       	rjmp	.-28     	; 0xa44 <__fp_split3+0xe>
     a60:	46 95       	lsr	r20
     a62:	f1 df       	rcall	.-30     	; 0xa46 <__fp_splitA>
     a64:	08 c0       	rjmp	.+16     	; 0xa76 <__fp_splitA+0x30>
     a66:	16 16       	cp	r1, r22
     a68:	17 06       	cpc	r1, r23
     a6a:	18 06       	cpc	r1, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	f1 cf       	rjmp	.-30     	; 0xa52 <__fp_splitA+0xc>
     a70:	86 95       	lsr	r24
     a72:	71 05       	cpc	r23, r1
     a74:	61 05       	cpc	r22, r1
     a76:	08 94       	sec
     a78:	08 95       	ret

00000a7a <__fp_zero>:
     a7a:	e8 94       	clt

00000a7c <__fp_szero>:
     a7c:	bb 27       	eor	r27, r27
     a7e:	66 27       	eor	r22, r22
     a80:	77 27       	eor	r23, r23
     a82:	cb 01       	movw	r24, r22
     a84:	97 f9       	bld	r25, 7
     a86:	08 95       	ret

00000a88 <__mulsf3>:
     a88:	0e 94 57 05 	call	0xaae	; 0xaae <__mulsf3x>
     a8c:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_round>
     a90:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fp_pscA>
     a94:	38 f0       	brcs	.+14     	; 0xaa4 <__mulsf3+0x1c>
     a96:	0e 94 03 05 	call	0xa06	; 0xa06 <__fp_pscB>
     a9a:	20 f0       	brcs	.+8      	; 0xaa4 <__mulsf3+0x1c>
     a9c:	95 23       	and	r25, r21
     a9e:	11 f0       	breq	.+4      	; 0xaa4 <__mulsf3+0x1c>
     aa0:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__fp_inf>
     aa4:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__fp_nan>
     aa8:	11 24       	eor	r1, r1
     aaa:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_szero>

00000aae <__mulsf3x>:
     aae:	0e 94 1b 05 	call	0xa36	; 0xa36 <__fp_split3>
     ab2:	70 f3       	brcs	.-36     	; 0xa90 <__mulsf3+0x8>

00000ab4 <__mulsf3_pse>:
     ab4:	95 9f       	mul	r25, r21
     ab6:	c1 f3       	breq	.-16     	; 0xaa8 <__mulsf3+0x20>
     ab8:	95 0f       	add	r25, r21
     aba:	50 e0       	ldi	r21, 0x00	; 0
     abc:	55 1f       	adc	r21, r21
     abe:	62 9f       	mul	r22, r18
     ac0:	f0 01       	movw	r30, r0
     ac2:	72 9f       	mul	r23, r18
     ac4:	bb 27       	eor	r27, r27
     ac6:	f0 0d       	add	r31, r0
     ac8:	b1 1d       	adc	r27, r1
     aca:	63 9f       	mul	r22, r19
     acc:	aa 27       	eor	r26, r26
     ace:	f0 0d       	add	r31, r0
     ad0:	b1 1d       	adc	r27, r1
     ad2:	aa 1f       	adc	r26, r26
     ad4:	64 9f       	mul	r22, r20
     ad6:	66 27       	eor	r22, r22
     ad8:	b0 0d       	add	r27, r0
     ada:	a1 1d       	adc	r26, r1
     adc:	66 1f       	adc	r22, r22
     ade:	82 9f       	mul	r24, r18
     ae0:	22 27       	eor	r18, r18
     ae2:	b0 0d       	add	r27, r0
     ae4:	a1 1d       	adc	r26, r1
     ae6:	62 1f       	adc	r22, r18
     ae8:	73 9f       	mul	r23, r19
     aea:	b0 0d       	add	r27, r0
     aec:	a1 1d       	adc	r26, r1
     aee:	62 1f       	adc	r22, r18
     af0:	83 9f       	mul	r24, r19
     af2:	a0 0d       	add	r26, r0
     af4:	61 1d       	adc	r22, r1
     af6:	22 1f       	adc	r18, r18
     af8:	74 9f       	mul	r23, r20
     afa:	33 27       	eor	r19, r19
     afc:	a0 0d       	add	r26, r0
     afe:	61 1d       	adc	r22, r1
     b00:	23 1f       	adc	r18, r19
     b02:	84 9f       	mul	r24, r20
     b04:	60 0d       	add	r22, r0
     b06:	21 1d       	adc	r18, r1
     b08:	82 2f       	mov	r24, r18
     b0a:	76 2f       	mov	r23, r22
     b0c:	6a 2f       	mov	r22, r26
     b0e:	11 24       	eor	r1, r1
     b10:	9f 57       	subi	r25, 0x7F	; 127
     b12:	50 40       	sbci	r21, 0x00	; 0
     b14:	9a f0       	brmi	.+38     	; 0xb3c <__mulsf3_pse+0x88>
     b16:	f1 f0       	breq	.+60     	; 0xb54 <__mulsf3_pse+0xa0>
     b18:	88 23       	and	r24, r24
     b1a:	4a f0       	brmi	.+18     	; 0xb2e <__mulsf3_pse+0x7a>
     b1c:	ee 0f       	add	r30, r30
     b1e:	ff 1f       	adc	r31, r31
     b20:	bb 1f       	adc	r27, r27
     b22:	66 1f       	adc	r22, r22
     b24:	77 1f       	adc	r23, r23
     b26:	88 1f       	adc	r24, r24
     b28:	91 50       	subi	r25, 0x01	; 1
     b2a:	50 40       	sbci	r21, 0x00	; 0
     b2c:	a9 f7       	brne	.-22     	; 0xb18 <__mulsf3_pse+0x64>
     b2e:	9e 3f       	cpi	r25, 0xFE	; 254
     b30:	51 05       	cpc	r21, r1
     b32:	80 f0       	brcs	.+32     	; 0xb54 <__mulsf3_pse+0xa0>
     b34:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__fp_inf>
     b38:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_szero>
     b3c:	5f 3f       	cpi	r21, 0xFF	; 255
     b3e:	e4 f3       	brlt	.-8      	; 0xb38 <__mulsf3_pse+0x84>
     b40:	98 3e       	cpi	r25, 0xE8	; 232
     b42:	d4 f3       	brlt	.-12     	; 0xb38 <__mulsf3_pse+0x84>
     b44:	86 95       	lsr	r24
     b46:	77 95       	ror	r23
     b48:	67 95       	ror	r22
     b4a:	b7 95       	ror	r27
     b4c:	f7 95       	ror	r31
     b4e:	e7 95       	ror	r30
     b50:	9f 5f       	subi	r25, 0xFF	; 255
     b52:	c1 f7       	brne	.-16     	; 0xb44 <__mulsf3_pse+0x90>
     b54:	fe 2b       	or	r31, r30
     b56:	88 0f       	add	r24, r24
     b58:	91 1d       	adc	r25, r1
     b5a:	96 95       	lsr	r25
     b5c:	87 95       	ror	r24
     b5e:	97 f9       	bld	r25, 7
     b60:	08 95       	ret
     b62:	19 f4       	brne	.+6      	; 0xb6a <__mulsf3_pse+0xb6>
     b64:	16 f4       	brtc	.+4      	; 0xb6a <__mulsf3_pse+0xb6>
     b66:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__fp_nan>
     b6a:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_mpack>

00000b6e <sqrt>:
     b6e:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_splitA>
     b72:	b8 f3       	brcs	.-18     	; 0xb62 <__mulsf3_pse+0xae>
     b74:	99 23       	and	r25, r25
     b76:	c9 f3       	breq	.-14     	; 0xb6a <__mulsf3_pse+0xb6>
     b78:	b6 f3       	brts	.-20     	; 0xb66 <__mulsf3_pse+0xb2>
     b7a:	9f 57       	subi	r25, 0x7F	; 127
     b7c:	55 0b       	sbc	r21, r21
     b7e:	87 ff       	sbrs	r24, 7
     b80:	0e 94 05 06 	call	0xc0a	; 0xc0a <__fp_norm2>
     b84:	00 24       	eor	r0, r0
     b86:	a0 e6       	ldi	r26, 0x60	; 96
     b88:	40 ea       	ldi	r20, 0xA0	; 160
     b8a:	90 01       	movw	r18, r0
     b8c:	80 58       	subi	r24, 0x80	; 128
     b8e:	56 95       	lsr	r21
     b90:	97 95       	ror	r25
     b92:	28 f4       	brcc	.+10     	; 0xb9e <sqrt+0x30>
     b94:	80 5c       	subi	r24, 0xC0	; 192
     b96:	66 0f       	add	r22, r22
     b98:	77 1f       	adc	r23, r23
     b9a:	88 1f       	adc	r24, r24
     b9c:	20 f0       	brcs	.+8      	; 0xba6 <sqrt+0x38>
     b9e:	26 17       	cp	r18, r22
     ba0:	37 07       	cpc	r19, r23
     ba2:	48 07       	cpc	r20, r24
     ba4:	30 f4       	brcc	.+12     	; 0xbb2 <sqrt+0x44>
     ba6:	62 1b       	sub	r22, r18
     ba8:	73 0b       	sbc	r23, r19
     baa:	84 0b       	sbc	r24, r20
     bac:	20 29       	or	r18, r0
     bae:	31 29       	or	r19, r1
     bb0:	4a 2b       	or	r20, r26
     bb2:	a6 95       	lsr	r26
     bb4:	17 94       	ror	r1
     bb6:	07 94       	ror	r0
     bb8:	20 25       	eor	r18, r0
     bba:	31 25       	eor	r19, r1
     bbc:	4a 27       	eor	r20, r26
     bbe:	58 f7       	brcc	.-42     	; 0xb96 <sqrt+0x28>
     bc0:	66 0f       	add	r22, r22
     bc2:	77 1f       	adc	r23, r23
     bc4:	88 1f       	adc	r24, r24
     bc6:	20 f0       	brcs	.+8      	; 0xbd0 <sqrt+0x62>
     bc8:	26 17       	cp	r18, r22
     bca:	37 07       	cpc	r19, r23
     bcc:	48 07       	cpc	r20, r24
     bce:	30 f4       	brcc	.+12     	; 0xbdc <sqrt+0x6e>
     bd0:	62 0b       	sbc	r22, r18
     bd2:	73 0b       	sbc	r23, r19
     bd4:	84 0b       	sbc	r24, r20
     bd6:	20 0d       	add	r18, r0
     bd8:	31 1d       	adc	r19, r1
     bda:	41 1d       	adc	r20, r1
     bdc:	a0 95       	com	r26
     bde:	81 f7       	brne	.-32     	; 0xbc0 <sqrt+0x52>
     be0:	b9 01       	movw	r22, r18
     be2:	84 2f       	mov	r24, r20
     be4:	91 58       	subi	r25, 0x81	; 129
     be6:	88 0f       	add	r24, r24
     be8:	96 95       	lsr	r25
     bea:	87 95       	ror	r24
     bec:	08 95       	ret

00000bee <__fp_mpack>:
     bee:	9f 3f       	cpi	r25, 0xFF	; 255
     bf0:	31 f0       	breq	.+12     	; 0xbfe <__fp_mpack_finite+0xc>

00000bf2 <__fp_mpack_finite>:
     bf2:	91 50       	subi	r25, 0x01	; 1
     bf4:	20 f4       	brcc	.+8      	; 0xbfe <__fp_mpack_finite+0xc>
     bf6:	87 95       	ror	r24
     bf8:	77 95       	ror	r23
     bfa:	67 95       	ror	r22
     bfc:	b7 95       	ror	r27
     bfe:	88 0f       	add	r24, r24
     c00:	91 1d       	adc	r25, r1
     c02:	96 95       	lsr	r25
     c04:	87 95       	ror	r24
     c06:	97 f9       	bld	r25, 7
     c08:	08 95       	ret

00000c0a <__fp_norm2>:
     c0a:	91 50       	subi	r25, 0x01	; 1
     c0c:	50 40       	sbci	r21, 0x00	; 0
     c0e:	66 0f       	add	r22, r22
     c10:	77 1f       	adc	r23, r23
     c12:	88 1f       	adc	r24, r24
     c14:	d2 f7       	brpl	.-12     	; 0xc0a <__fp_norm2>
     c16:	08 95       	ret

00000c18 <vfprintf>:
     c18:	a0 e1       	ldi	r26, 0x10	; 16
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e2 e1       	ldi	r30, 0x12	; 18
     c1e:	f6 e0       	ldi	r31, 0x06	; 6
     c20:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__prologue_saves__>
     c24:	7c 01       	movw	r14, r24
     c26:	1b 01       	movw	r2, r22
     c28:	6a 01       	movw	r12, r20
     c2a:	fc 01       	movw	r30, r24
     c2c:	17 82       	std	Z+7, r1	; 0x07
     c2e:	16 82       	std	Z+6, r1	; 0x06
     c30:	83 81       	ldd	r24, Z+3	; 0x03
     c32:	81 ff       	sbrs	r24, 1
     c34:	44 c3       	rjmp	.+1672   	; 0x12be <vfprintf+0x6a6>
     c36:	9e 01       	movw	r18, r28
     c38:	2f 5f       	subi	r18, 0xFF	; 255
     c3a:	3f 4f       	sbci	r19, 0xFF	; 255
     c3c:	39 01       	movw	r6, r18
     c3e:	f7 01       	movw	r30, r14
     c40:	93 81       	ldd	r25, Z+3	; 0x03
     c42:	f1 01       	movw	r30, r2
     c44:	93 fd       	sbrc	r25, 3
     c46:	85 91       	lpm	r24, Z+
     c48:	93 ff       	sbrs	r25, 3
     c4a:	81 91       	ld	r24, Z+
     c4c:	1f 01       	movw	r2, r30
     c4e:	88 23       	and	r24, r24
     c50:	09 f4       	brne	.+2      	; 0xc54 <vfprintf+0x3c>
     c52:	31 c3       	rjmp	.+1634   	; 0x12b6 <vfprintf+0x69e>
     c54:	85 32       	cpi	r24, 0x25	; 37
     c56:	39 f4       	brne	.+14     	; 0xc66 <vfprintf+0x4e>
     c58:	93 fd       	sbrc	r25, 3
     c5a:	85 91       	lpm	r24, Z+
     c5c:	93 ff       	sbrs	r25, 3
     c5e:	81 91       	ld	r24, Z+
     c60:	1f 01       	movw	r2, r30
     c62:	85 32       	cpi	r24, 0x25	; 37
     c64:	39 f4       	brne	.+14     	; 0xc74 <vfprintf+0x5c>
     c66:	b7 01       	movw	r22, r14
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
     c6e:	56 01       	movw	r10, r12
     c70:	65 01       	movw	r12, r10
     c72:	e5 cf       	rjmp	.-54     	; 0xc3e <vfprintf+0x26>
     c74:	10 e0       	ldi	r17, 0x00	; 0
     c76:	51 2c       	mov	r5, r1
     c78:	91 2c       	mov	r9, r1
     c7a:	ff e1       	ldi	r31, 0x1F	; 31
     c7c:	f9 15       	cp	r31, r9
     c7e:	d8 f0       	brcs	.+54     	; 0xcb6 <vfprintf+0x9e>
     c80:	8b 32       	cpi	r24, 0x2B	; 43
     c82:	79 f0       	breq	.+30     	; 0xca2 <vfprintf+0x8a>
     c84:	38 f4       	brcc	.+14     	; 0xc94 <vfprintf+0x7c>
     c86:	80 32       	cpi	r24, 0x20	; 32
     c88:	79 f0       	breq	.+30     	; 0xca8 <vfprintf+0x90>
     c8a:	83 32       	cpi	r24, 0x23	; 35
     c8c:	a1 f4       	brne	.+40     	; 0xcb6 <vfprintf+0x9e>
     c8e:	f9 2d       	mov	r31, r9
     c90:	f0 61       	ori	r31, 0x10	; 16
     c92:	2e c0       	rjmp	.+92     	; 0xcf0 <vfprintf+0xd8>
     c94:	8d 32       	cpi	r24, 0x2D	; 45
     c96:	61 f0       	breq	.+24     	; 0xcb0 <vfprintf+0x98>
     c98:	80 33       	cpi	r24, 0x30	; 48
     c9a:	69 f4       	brne	.+26     	; 0xcb6 <vfprintf+0x9e>
     c9c:	29 2d       	mov	r18, r9
     c9e:	21 60       	ori	r18, 0x01	; 1
     ca0:	2d c0       	rjmp	.+90     	; 0xcfc <vfprintf+0xe4>
     ca2:	39 2d       	mov	r19, r9
     ca4:	32 60       	ori	r19, 0x02	; 2
     ca6:	93 2e       	mov	r9, r19
     ca8:	89 2d       	mov	r24, r9
     caa:	84 60       	ori	r24, 0x04	; 4
     cac:	98 2e       	mov	r9, r24
     cae:	2a c0       	rjmp	.+84     	; 0xd04 <vfprintf+0xec>
     cb0:	e9 2d       	mov	r30, r9
     cb2:	e8 60       	ori	r30, 0x08	; 8
     cb4:	15 c0       	rjmp	.+42     	; 0xce0 <vfprintf+0xc8>
     cb6:	97 fc       	sbrc	r9, 7
     cb8:	2d c0       	rjmp	.+90     	; 0xd14 <vfprintf+0xfc>
     cba:	20 ed       	ldi	r18, 0xD0	; 208
     cbc:	28 0f       	add	r18, r24
     cbe:	2a 30       	cpi	r18, 0x0A	; 10
     cc0:	88 f4       	brcc	.+34     	; 0xce4 <vfprintf+0xcc>
     cc2:	96 fe       	sbrs	r9, 6
     cc4:	06 c0       	rjmp	.+12     	; 0xcd2 <vfprintf+0xba>
     cc6:	3a e0       	ldi	r19, 0x0A	; 10
     cc8:	13 9f       	mul	r17, r19
     cca:	20 0d       	add	r18, r0
     ccc:	11 24       	eor	r1, r1
     cce:	12 2f       	mov	r17, r18
     cd0:	19 c0       	rjmp	.+50     	; 0xd04 <vfprintf+0xec>
     cd2:	8a e0       	ldi	r24, 0x0A	; 10
     cd4:	58 9e       	mul	r5, r24
     cd6:	20 0d       	add	r18, r0
     cd8:	11 24       	eor	r1, r1
     cda:	52 2e       	mov	r5, r18
     cdc:	e9 2d       	mov	r30, r9
     cde:	e0 62       	ori	r30, 0x20	; 32
     ce0:	9e 2e       	mov	r9, r30
     ce2:	10 c0       	rjmp	.+32     	; 0xd04 <vfprintf+0xec>
     ce4:	8e 32       	cpi	r24, 0x2E	; 46
     ce6:	31 f4       	brne	.+12     	; 0xcf4 <vfprintf+0xdc>
     ce8:	96 fc       	sbrc	r9, 6
     cea:	e5 c2       	rjmp	.+1482   	; 0x12b6 <vfprintf+0x69e>
     cec:	f9 2d       	mov	r31, r9
     cee:	f0 64       	ori	r31, 0x40	; 64
     cf0:	9f 2e       	mov	r9, r31
     cf2:	08 c0       	rjmp	.+16     	; 0xd04 <vfprintf+0xec>
     cf4:	8c 36       	cpi	r24, 0x6C	; 108
     cf6:	21 f4       	brne	.+8      	; 0xd00 <vfprintf+0xe8>
     cf8:	29 2d       	mov	r18, r9
     cfa:	20 68       	ori	r18, 0x80	; 128
     cfc:	92 2e       	mov	r9, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <vfprintf+0xec>
     d00:	88 36       	cpi	r24, 0x68	; 104
     d02:	41 f4       	brne	.+16     	; 0xd14 <vfprintf+0xfc>
     d04:	f1 01       	movw	r30, r2
     d06:	93 fd       	sbrc	r25, 3
     d08:	85 91       	lpm	r24, Z+
     d0a:	93 ff       	sbrs	r25, 3
     d0c:	81 91       	ld	r24, Z+
     d0e:	1f 01       	movw	r2, r30
     d10:	81 11       	cpse	r24, r1
     d12:	b3 cf       	rjmp	.-154    	; 0xc7a <vfprintf+0x62>
     d14:	9b eb       	ldi	r25, 0xBB	; 187
     d16:	98 0f       	add	r25, r24
     d18:	93 30       	cpi	r25, 0x03	; 3
     d1a:	20 f4       	brcc	.+8      	; 0xd24 <vfprintf+0x10c>
     d1c:	99 2d       	mov	r25, r9
     d1e:	90 61       	ori	r25, 0x10	; 16
     d20:	80 5e       	subi	r24, 0xE0	; 224
     d22:	07 c0       	rjmp	.+14     	; 0xd32 <vfprintf+0x11a>
     d24:	9b e9       	ldi	r25, 0x9B	; 155
     d26:	98 0f       	add	r25, r24
     d28:	93 30       	cpi	r25, 0x03	; 3
     d2a:	08 f0       	brcs	.+2      	; 0xd2e <vfprintf+0x116>
     d2c:	66 c1       	rjmp	.+716    	; 0xffa <vfprintf+0x3e2>
     d2e:	99 2d       	mov	r25, r9
     d30:	9f 7e       	andi	r25, 0xEF	; 239
     d32:	96 ff       	sbrs	r25, 6
     d34:	16 e0       	ldi	r17, 0x06	; 6
     d36:	9f 73       	andi	r25, 0x3F	; 63
     d38:	99 2e       	mov	r9, r25
     d3a:	85 36       	cpi	r24, 0x65	; 101
     d3c:	19 f4       	brne	.+6      	; 0xd44 <vfprintf+0x12c>
     d3e:	90 64       	ori	r25, 0x40	; 64
     d40:	99 2e       	mov	r9, r25
     d42:	08 c0       	rjmp	.+16     	; 0xd54 <vfprintf+0x13c>
     d44:	86 36       	cpi	r24, 0x66	; 102
     d46:	21 f4       	brne	.+8      	; 0xd50 <vfprintf+0x138>
     d48:	39 2f       	mov	r19, r25
     d4a:	30 68       	ori	r19, 0x80	; 128
     d4c:	93 2e       	mov	r9, r19
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <vfprintf+0x13c>
     d50:	11 11       	cpse	r17, r1
     d52:	11 50       	subi	r17, 0x01	; 1
     d54:	97 fe       	sbrs	r9, 7
     d56:	07 c0       	rjmp	.+14     	; 0xd66 <vfprintf+0x14e>
     d58:	1c 33       	cpi	r17, 0x3C	; 60
     d5a:	50 f4       	brcc	.+20     	; 0xd70 <vfprintf+0x158>
     d5c:	44 24       	eor	r4, r4
     d5e:	43 94       	inc	r4
     d60:	41 0e       	add	r4, r17
     d62:	27 e0       	ldi	r18, 0x07	; 7
     d64:	0b c0       	rjmp	.+22     	; 0xd7c <vfprintf+0x164>
     d66:	18 30       	cpi	r17, 0x08	; 8
     d68:	38 f0       	brcs	.+14     	; 0xd78 <vfprintf+0x160>
     d6a:	27 e0       	ldi	r18, 0x07	; 7
     d6c:	17 e0       	ldi	r17, 0x07	; 7
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <vfprintf+0x162>
     d70:	27 e0       	ldi	r18, 0x07	; 7
     d72:	9c e3       	ldi	r25, 0x3C	; 60
     d74:	49 2e       	mov	r4, r25
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <vfprintf+0x164>
     d78:	21 2f       	mov	r18, r17
     d7a:	41 2c       	mov	r4, r1
     d7c:	56 01       	movw	r10, r12
     d7e:	84 e0       	ldi	r24, 0x04	; 4
     d80:	a8 0e       	add	r10, r24
     d82:	b1 1c       	adc	r11, r1
     d84:	f6 01       	movw	r30, r12
     d86:	60 81       	ld	r22, Z
     d88:	71 81       	ldd	r23, Z+1	; 0x01
     d8a:	82 81       	ldd	r24, Z+2	; 0x02
     d8c:	93 81       	ldd	r25, Z+3	; 0x03
     d8e:	04 2d       	mov	r16, r4
     d90:	a3 01       	movw	r20, r6
     d92:	0e 94 c0 09 	call	0x1380	; 0x1380 <__ftoa_engine>
     d96:	6c 01       	movw	r12, r24
     d98:	f9 81       	ldd	r31, Y+1	; 0x01
     d9a:	fc 87       	std	Y+12, r31	; 0x0c
     d9c:	f0 ff       	sbrs	r31, 0
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <vfprintf+0x18c>
     da0:	f3 ff       	sbrs	r31, 3
     da2:	06 c0       	rjmp	.+12     	; 0xdb0 <vfprintf+0x198>
     da4:	91 fc       	sbrc	r9, 1
     da6:	06 c0       	rjmp	.+12     	; 0xdb4 <vfprintf+0x19c>
     da8:	92 fe       	sbrs	r9, 2
     daa:	06 c0       	rjmp	.+12     	; 0xdb8 <vfprintf+0x1a0>
     dac:	00 e2       	ldi	r16, 0x20	; 32
     dae:	05 c0       	rjmp	.+10     	; 0xdba <vfprintf+0x1a2>
     db0:	0d e2       	ldi	r16, 0x2D	; 45
     db2:	03 c0       	rjmp	.+6      	; 0xdba <vfprintf+0x1a2>
     db4:	0b e2       	ldi	r16, 0x2B	; 43
     db6:	01 c0       	rjmp	.+2      	; 0xdba <vfprintf+0x1a2>
     db8:	00 e0       	ldi	r16, 0x00	; 0
     dba:	8c 85       	ldd	r24, Y+12	; 0x0c
     dbc:	8c 70       	andi	r24, 0x0C	; 12
     dbe:	19 f0       	breq	.+6      	; 0xdc6 <vfprintf+0x1ae>
     dc0:	01 11       	cpse	r16, r1
     dc2:	5a c2       	rjmp	.+1204   	; 0x1278 <vfprintf+0x660>
     dc4:	9b c2       	rjmp	.+1334   	; 0x12fc <vfprintf+0x6e4>
     dc6:	97 fe       	sbrs	r9, 7
     dc8:	10 c0       	rjmp	.+32     	; 0xdea <vfprintf+0x1d2>
     dca:	4c 0c       	add	r4, r12
     dcc:	fc 85       	ldd	r31, Y+12	; 0x0c
     dce:	f4 ff       	sbrs	r31, 4
     dd0:	04 c0       	rjmp	.+8      	; 0xdda <vfprintf+0x1c2>
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	81 33       	cpi	r24, 0x31	; 49
     dd6:	09 f4       	brne	.+2      	; 0xdda <vfprintf+0x1c2>
     dd8:	4a 94       	dec	r4
     dda:	14 14       	cp	r1, r4
     ddc:	74 f5       	brge	.+92     	; 0xe3a <vfprintf+0x222>
     dde:	28 e0       	ldi	r18, 0x08	; 8
     de0:	24 15       	cp	r18, r4
     de2:	78 f5       	brcc	.+94     	; 0xe42 <vfprintf+0x22a>
     de4:	88 e0       	ldi	r24, 0x08	; 8
     de6:	48 2e       	mov	r4, r24
     de8:	2c c0       	rjmp	.+88     	; 0xe42 <vfprintf+0x22a>
     dea:	96 fc       	sbrc	r9, 6
     dec:	2a c0       	rjmp	.+84     	; 0xe42 <vfprintf+0x22a>
     dee:	81 2f       	mov	r24, r17
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	8c 15       	cp	r24, r12
     df4:	9d 05       	cpc	r25, r13
     df6:	9c f0       	brlt	.+38     	; 0xe1e <vfprintf+0x206>
     df8:	3c ef       	ldi	r19, 0xFC	; 252
     dfa:	c3 16       	cp	r12, r19
     dfc:	3f ef       	ldi	r19, 0xFF	; 255
     dfe:	d3 06       	cpc	r13, r19
     e00:	74 f0       	brlt	.+28     	; 0xe1e <vfprintf+0x206>
     e02:	89 2d       	mov	r24, r9
     e04:	80 68       	ori	r24, 0x80	; 128
     e06:	98 2e       	mov	r9, r24
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <vfprintf+0x206>
     e0a:	e2 e0       	ldi	r30, 0x02	; 2
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	ec 0f       	add	r30, r28
     e10:	fd 1f       	adc	r31, r29
     e12:	e1 0f       	add	r30, r17
     e14:	f1 1d       	adc	r31, r1
     e16:	80 81       	ld	r24, Z
     e18:	80 33       	cpi	r24, 0x30	; 48
     e1a:	19 f4       	brne	.+6      	; 0xe22 <vfprintf+0x20a>
     e1c:	11 50       	subi	r17, 0x01	; 1
     e1e:	11 11       	cpse	r17, r1
     e20:	f4 cf       	rjmp	.-24     	; 0xe0a <vfprintf+0x1f2>
     e22:	97 fe       	sbrs	r9, 7
     e24:	0e c0       	rjmp	.+28     	; 0xe42 <vfprintf+0x22a>
     e26:	44 24       	eor	r4, r4
     e28:	43 94       	inc	r4
     e2a:	41 0e       	add	r4, r17
     e2c:	81 2f       	mov	r24, r17
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	c8 16       	cp	r12, r24
     e32:	d9 06       	cpc	r13, r25
     e34:	2c f4       	brge	.+10     	; 0xe40 <vfprintf+0x228>
     e36:	1c 19       	sub	r17, r12
     e38:	04 c0       	rjmp	.+8      	; 0xe42 <vfprintf+0x22a>
     e3a:	44 24       	eor	r4, r4
     e3c:	43 94       	inc	r4
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <vfprintf+0x22a>
     e40:	10 e0       	ldi	r17, 0x00	; 0
     e42:	97 fe       	sbrs	r9, 7
     e44:	06 c0       	rjmp	.+12     	; 0xe52 <vfprintf+0x23a>
     e46:	1c 14       	cp	r1, r12
     e48:	1d 04       	cpc	r1, r13
     e4a:	34 f4       	brge	.+12     	; 0xe58 <vfprintf+0x240>
     e4c:	c6 01       	movw	r24, r12
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	05 c0       	rjmp	.+10     	; 0xe5c <vfprintf+0x244>
     e52:	85 e0       	ldi	r24, 0x05	; 5
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <vfprintf+0x244>
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	01 11       	cpse	r16, r1
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	11 23       	and	r17, r17
     e62:	31 f0       	breq	.+12     	; 0xe70 <vfprintf+0x258>
     e64:	21 2f       	mov	r18, r17
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	2f 5f       	subi	r18, 0xFF	; 255
     e6a:	3f 4f       	sbci	r19, 0xFF	; 255
     e6c:	82 0f       	add	r24, r18
     e6e:	93 1f       	adc	r25, r19
     e70:	25 2d       	mov	r18, r5
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	82 17       	cp	r24, r18
     e76:	93 07       	cpc	r25, r19
     e78:	14 f4       	brge	.+4      	; 0xe7e <vfprintf+0x266>
     e7a:	58 1a       	sub	r5, r24
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <vfprintf+0x268>
     e7e:	51 2c       	mov	r5, r1
     e80:	89 2d       	mov	r24, r9
     e82:	89 70       	andi	r24, 0x09	; 9
     e84:	49 f4       	brne	.+18     	; 0xe98 <vfprintf+0x280>
     e86:	55 20       	and	r5, r5
     e88:	39 f0       	breq	.+14     	; 0xe98 <vfprintf+0x280>
     e8a:	b7 01       	movw	r22, r14
     e8c:	80 e2       	ldi	r24, 0x20	; 32
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
     e94:	5a 94       	dec	r5
     e96:	f7 cf       	rjmp	.-18     	; 0xe86 <vfprintf+0x26e>
     e98:	00 23       	and	r16, r16
     e9a:	29 f0       	breq	.+10     	; 0xea6 <vfprintf+0x28e>
     e9c:	b7 01       	movw	r22, r14
     e9e:	80 2f       	mov	r24, r16
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
     ea6:	93 fc       	sbrc	r9, 3
     ea8:	09 c0       	rjmp	.+18     	; 0xebc <vfprintf+0x2a4>
     eaa:	55 20       	and	r5, r5
     eac:	39 f0       	breq	.+14     	; 0xebc <vfprintf+0x2a4>
     eae:	b7 01       	movw	r22, r14
     eb0:	80 e3       	ldi	r24, 0x30	; 48
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
     eb8:	5a 94       	dec	r5
     eba:	f7 cf       	rjmp	.-18     	; 0xeaa <vfprintf+0x292>
     ebc:	97 fe       	sbrs	r9, 7
     ebe:	4c c0       	rjmp	.+152    	; 0xf58 <vfprintf+0x340>
     ec0:	46 01       	movw	r8, r12
     ec2:	d7 fe       	sbrs	r13, 7
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <vfprintf+0x2b2>
     ec6:	81 2c       	mov	r8, r1
     ec8:	91 2c       	mov	r9, r1
     eca:	c6 01       	movw	r24, r12
     ecc:	88 19       	sub	r24, r8
     ece:	99 09       	sbc	r25, r9
     ed0:	f3 01       	movw	r30, r6
     ed2:	e8 0f       	add	r30, r24
     ed4:	f9 1f       	adc	r31, r25
     ed6:	fe 87       	std	Y+14, r31	; 0x0e
     ed8:	ed 87       	std	Y+13, r30	; 0x0d
     eda:	96 01       	movw	r18, r12
     edc:	24 19       	sub	r18, r4
     ede:	31 09       	sbc	r19, r1
     ee0:	38 8b       	std	Y+16, r19	; 0x10
     ee2:	2f 87       	std	Y+15, r18	; 0x0f
     ee4:	01 2f       	mov	r16, r17
     ee6:	10 e0       	ldi	r17, 0x00	; 0
     ee8:	11 95       	neg	r17
     eea:	01 95       	neg	r16
     eec:	11 09       	sbc	r17, r1
     eee:	3f ef       	ldi	r19, 0xFF	; 255
     ef0:	83 16       	cp	r8, r19
     ef2:	93 06       	cpc	r9, r19
     ef4:	29 f4       	brne	.+10     	; 0xf00 <vfprintf+0x2e8>
     ef6:	b7 01       	movw	r22, r14
     ef8:	8e e2       	ldi	r24, 0x2E	; 46
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
     f00:	c8 14       	cp	r12, r8
     f02:	d9 04       	cpc	r13, r9
     f04:	4c f0       	brlt	.+18     	; 0xf18 <vfprintf+0x300>
     f06:	8f 85       	ldd	r24, Y+15	; 0x0f
     f08:	98 89       	ldd	r25, Y+16	; 0x10
     f0a:	88 15       	cp	r24, r8
     f0c:	99 05       	cpc	r25, r9
     f0e:	24 f4       	brge	.+8      	; 0xf18 <vfprintf+0x300>
     f10:	ed 85       	ldd	r30, Y+13	; 0x0d
     f12:	fe 85       	ldd	r31, Y+14	; 0x0e
     f14:	81 81       	ldd	r24, Z+1	; 0x01
     f16:	01 c0       	rjmp	.+2      	; 0xf1a <vfprintf+0x302>
     f18:	80 e3       	ldi	r24, 0x30	; 48
     f1a:	f1 e0       	ldi	r31, 0x01	; 1
     f1c:	8f 1a       	sub	r8, r31
     f1e:	91 08       	sbc	r9, r1
     f20:	2d 85       	ldd	r18, Y+13	; 0x0d
     f22:	3e 85       	ldd	r19, Y+14	; 0x0e
     f24:	2f 5f       	subi	r18, 0xFF	; 255
     f26:	3f 4f       	sbci	r19, 0xFF	; 255
     f28:	3e 87       	std	Y+14, r19	; 0x0e
     f2a:	2d 87       	std	Y+13, r18	; 0x0d
     f2c:	80 16       	cp	r8, r16
     f2e:	91 06       	cpc	r9, r17
     f30:	2c f0       	brlt	.+10     	; 0xf3c <vfprintf+0x324>
     f32:	b7 01       	movw	r22, r14
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
     f3a:	d9 cf       	rjmp	.-78     	; 0xeee <vfprintf+0x2d6>
     f3c:	c8 14       	cp	r12, r8
     f3e:	d9 04       	cpc	r13, r9
     f40:	41 f4       	brne	.+16     	; 0xf52 <vfprintf+0x33a>
     f42:	9a 81       	ldd	r25, Y+2	; 0x02
     f44:	96 33       	cpi	r25, 0x36	; 54
     f46:	20 f4       	brcc	.+8      	; 0xf50 <vfprintf+0x338>
     f48:	95 33       	cpi	r25, 0x35	; 53
     f4a:	19 f4       	brne	.+6      	; 0xf52 <vfprintf+0x33a>
     f4c:	3c 85       	ldd	r19, Y+12	; 0x0c
     f4e:	34 ff       	sbrs	r19, 4
     f50:	81 e3       	ldi	r24, 0x31	; 49
     f52:	b7 01       	movw	r22, r14
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	4e c0       	rjmp	.+156    	; 0xff4 <vfprintf+0x3dc>
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	81 33       	cpi	r24, 0x31	; 49
     f5c:	19 f0       	breq	.+6      	; 0xf64 <vfprintf+0x34c>
     f5e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f60:	9f 7e       	andi	r25, 0xEF	; 239
     f62:	9c 87       	std	Y+12, r25	; 0x0c
     f64:	b7 01       	movw	r22, r14
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
     f6c:	11 11       	cpse	r17, r1
     f6e:	05 c0       	rjmp	.+10     	; 0xf7a <vfprintf+0x362>
     f70:	94 fc       	sbrc	r9, 4
     f72:	18 c0       	rjmp	.+48     	; 0xfa4 <vfprintf+0x38c>
     f74:	85 e6       	ldi	r24, 0x65	; 101
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	17 c0       	rjmp	.+46     	; 0xfa8 <vfprintf+0x390>
     f7a:	b7 01       	movw	r22, r14
     f7c:	8e e2       	ldi	r24, 0x2E	; 46
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
     f84:	1e 5f       	subi	r17, 0xFE	; 254
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	01 e0       	ldi	r16, 0x01	; 1
     f8a:	08 0f       	add	r16, r24
     f8c:	f3 01       	movw	r30, r6
     f8e:	e8 0f       	add	r30, r24
     f90:	f1 1d       	adc	r31, r1
     f92:	80 81       	ld	r24, Z
     f94:	b7 01       	movw	r22, r14
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
     f9c:	80 2f       	mov	r24, r16
     f9e:	01 13       	cpse	r16, r17
     fa0:	f3 cf       	rjmp	.-26     	; 0xf88 <vfprintf+0x370>
     fa2:	e6 cf       	rjmp	.-52     	; 0xf70 <vfprintf+0x358>
     fa4:	85 e4       	ldi	r24, 0x45	; 69
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	b7 01       	movw	r22, r14
     faa:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
     fae:	d7 fc       	sbrc	r13, 7
     fb0:	06 c0       	rjmp	.+12     	; 0xfbe <vfprintf+0x3a6>
     fb2:	c1 14       	cp	r12, r1
     fb4:	d1 04       	cpc	r13, r1
     fb6:	41 f4       	brne	.+16     	; 0xfc8 <vfprintf+0x3b0>
     fb8:	ec 85       	ldd	r30, Y+12	; 0x0c
     fba:	e4 ff       	sbrs	r30, 4
     fbc:	05 c0       	rjmp	.+10     	; 0xfc8 <vfprintf+0x3b0>
     fbe:	d1 94       	neg	r13
     fc0:	c1 94       	neg	r12
     fc2:	d1 08       	sbc	r13, r1
     fc4:	8d e2       	ldi	r24, 0x2D	; 45
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <vfprintf+0x3b2>
     fc8:	8b e2       	ldi	r24, 0x2B	; 43
     fca:	b7 01       	movw	r22, r14
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
     fd2:	80 e3       	ldi	r24, 0x30	; 48
     fd4:	2a e0       	ldi	r18, 0x0A	; 10
     fd6:	c2 16       	cp	r12, r18
     fd8:	d1 04       	cpc	r13, r1
     fda:	2c f0       	brlt	.+10     	; 0xfe6 <vfprintf+0x3ce>
     fdc:	8f 5f       	subi	r24, 0xFF	; 255
     fde:	fa e0       	ldi	r31, 0x0A	; 10
     fe0:	cf 1a       	sub	r12, r31
     fe2:	d1 08       	sbc	r13, r1
     fe4:	f7 cf       	rjmp	.-18     	; 0xfd4 <vfprintf+0x3bc>
     fe6:	b7 01       	movw	r22, r14
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
     fee:	b7 01       	movw	r22, r14
     ff0:	c6 01       	movw	r24, r12
     ff2:	c0 96       	adiw	r24, 0x30	; 48
     ff4:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
     ff8:	54 c1       	rjmp	.+680    	; 0x12a2 <vfprintf+0x68a>
     ffa:	83 36       	cpi	r24, 0x63	; 99
     ffc:	31 f0       	breq	.+12     	; 0x100a <vfprintf+0x3f2>
     ffe:	83 37       	cpi	r24, 0x73	; 115
    1000:	79 f0       	breq	.+30     	; 0x1020 <vfprintf+0x408>
    1002:	83 35       	cpi	r24, 0x53	; 83
    1004:	09 f0       	breq	.+2      	; 0x1008 <vfprintf+0x3f0>
    1006:	56 c0       	rjmp	.+172    	; 0x10b4 <vfprintf+0x49c>
    1008:	20 c0       	rjmp	.+64     	; 0x104a <vfprintf+0x432>
    100a:	56 01       	movw	r10, r12
    100c:	32 e0       	ldi	r19, 0x02	; 2
    100e:	a3 0e       	add	r10, r19
    1010:	b1 1c       	adc	r11, r1
    1012:	f6 01       	movw	r30, r12
    1014:	80 81       	ld	r24, Z
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	01 e0       	ldi	r16, 0x01	; 1
    101a:	10 e0       	ldi	r17, 0x00	; 0
    101c:	63 01       	movw	r12, r6
    101e:	12 c0       	rjmp	.+36     	; 0x1044 <vfprintf+0x42c>
    1020:	56 01       	movw	r10, r12
    1022:	f2 e0       	ldi	r31, 0x02	; 2
    1024:	af 0e       	add	r10, r31
    1026:	b1 1c       	adc	r11, r1
    1028:	f6 01       	movw	r30, r12
    102a:	c0 80       	ld	r12, Z
    102c:	d1 80       	ldd	r13, Z+1	; 0x01
    102e:	96 fe       	sbrs	r9, 6
    1030:	03 c0       	rjmp	.+6      	; 0x1038 <vfprintf+0x420>
    1032:	61 2f       	mov	r22, r17
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	02 c0       	rjmp	.+4      	; 0x103c <vfprintf+0x424>
    1038:	6f ef       	ldi	r22, 0xFF	; 255
    103a:	7f ef       	ldi	r23, 0xFF	; 255
    103c:	c6 01       	movw	r24, r12
    103e:	0e 94 a3 0a 	call	0x1546	; 0x1546 <strnlen>
    1042:	8c 01       	movw	r16, r24
    1044:	f9 2d       	mov	r31, r9
    1046:	ff 77       	andi	r31, 0x7F	; 127
    1048:	14 c0       	rjmp	.+40     	; 0x1072 <vfprintf+0x45a>
    104a:	56 01       	movw	r10, r12
    104c:	22 e0       	ldi	r18, 0x02	; 2
    104e:	a2 0e       	add	r10, r18
    1050:	b1 1c       	adc	r11, r1
    1052:	f6 01       	movw	r30, r12
    1054:	c0 80       	ld	r12, Z
    1056:	d1 80       	ldd	r13, Z+1	; 0x01
    1058:	96 fe       	sbrs	r9, 6
    105a:	03 c0       	rjmp	.+6      	; 0x1062 <vfprintf+0x44a>
    105c:	61 2f       	mov	r22, r17
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <vfprintf+0x44e>
    1062:	6f ef       	ldi	r22, 0xFF	; 255
    1064:	7f ef       	ldi	r23, 0xFF	; 255
    1066:	c6 01       	movw	r24, r12
    1068:	0e 94 98 0a 	call	0x1530	; 0x1530 <strnlen_P>
    106c:	8c 01       	movw	r16, r24
    106e:	f9 2d       	mov	r31, r9
    1070:	f0 68       	ori	r31, 0x80	; 128
    1072:	9f 2e       	mov	r9, r31
    1074:	f3 fd       	sbrc	r31, 3
    1076:	1a c0       	rjmp	.+52     	; 0x10ac <vfprintf+0x494>
    1078:	85 2d       	mov	r24, r5
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	08 17       	cp	r16, r24
    107e:	19 07       	cpc	r17, r25
    1080:	a8 f4       	brcc	.+42     	; 0x10ac <vfprintf+0x494>
    1082:	b7 01       	movw	r22, r14
    1084:	80 e2       	ldi	r24, 0x20	; 32
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
    108c:	5a 94       	dec	r5
    108e:	f4 cf       	rjmp	.-24     	; 0x1078 <vfprintf+0x460>
    1090:	f6 01       	movw	r30, r12
    1092:	97 fc       	sbrc	r9, 7
    1094:	85 91       	lpm	r24, Z+
    1096:	97 fe       	sbrs	r9, 7
    1098:	81 91       	ld	r24, Z+
    109a:	6f 01       	movw	r12, r30
    109c:	b7 01       	movw	r22, r14
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
    10a4:	51 10       	cpse	r5, r1
    10a6:	5a 94       	dec	r5
    10a8:	01 50       	subi	r16, 0x01	; 1
    10aa:	11 09       	sbc	r17, r1
    10ac:	01 15       	cp	r16, r1
    10ae:	11 05       	cpc	r17, r1
    10b0:	79 f7       	brne	.-34     	; 0x1090 <vfprintf+0x478>
    10b2:	f7 c0       	rjmp	.+494    	; 0x12a2 <vfprintf+0x68a>
    10b4:	84 36       	cpi	r24, 0x64	; 100
    10b6:	11 f0       	breq	.+4      	; 0x10bc <vfprintf+0x4a4>
    10b8:	89 36       	cpi	r24, 0x69	; 105
    10ba:	61 f5       	brne	.+88     	; 0x1114 <vfprintf+0x4fc>
    10bc:	56 01       	movw	r10, r12
    10be:	97 fe       	sbrs	r9, 7
    10c0:	09 c0       	rjmp	.+18     	; 0x10d4 <vfprintf+0x4bc>
    10c2:	24 e0       	ldi	r18, 0x04	; 4
    10c4:	a2 0e       	add	r10, r18
    10c6:	b1 1c       	adc	r11, r1
    10c8:	f6 01       	movw	r30, r12
    10ca:	60 81       	ld	r22, Z
    10cc:	71 81       	ldd	r23, Z+1	; 0x01
    10ce:	82 81       	ldd	r24, Z+2	; 0x02
    10d0:	93 81       	ldd	r25, Z+3	; 0x03
    10d2:	0a c0       	rjmp	.+20     	; 0x10e8 <vfprintf+0x4d0>
    10d4:	f2 e0       	ldi	r31, 0x02	; 2
    10d6:	af 0e       	add	r10, r31
    10d8:	b1 1c       	adc	r11, r1
    10da:	f6 01       	movw	r30, r12
    10dc:	60 81       	ld	r22, Z
    10de:	71 81       	ldd	r23, Z+1	; 0x01
    10e0:	07 2e       	mov	r0, r23
    10e2:	00 0c       	add	r0, r0
    10e4:	88 0b       	sbc	r24, r24
    10e6:	99 0b       	sbc	r25, r25
    10e8:	f9 2d       	mov	r31, r9
    10ea:	ff 76       	andi	r31, 0x6F	; 111
    10ec:	9f 2e       	mov	r9, r31
    10ee:	97 ff       	sbrs	r25, 7
    10f0:	09 c0       	rjmp	.+18     	; 0x1104 <vfprintf+0x4ec>
    10f2:	90 95       	com	r25
    10f4:	80 95       	com	r24
    10f6:	70 95       	com	r23
    10f8:	61 95       	neg	r22
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	8f 4f       	sbci	r24, 0xFF	; 255
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	f0 68       	ori	r31, 0x80	; 128
    1102:	9f 2e       	mov	r9, r31
    1104:	2a e0       	ldi	r18, 0x0A	; 10
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	a3 01       	movw	r20, r6
    110a:	0e 94 30 0b 	call	0x1660	; 0x1660 <__ultoa_invert>
    110e:	c8 2e       	mov	r12, r24
    1110:	c6 18       	sub	r12, r6
    1112:	3f c0       	rjmp	.+126    	; 0x1192 <vfprintf+0x57a>
    1114:	09 2d       	mov	r16, r9
    1116:	85 37       	cpi	r24, 0x75	; 117
    1118:	21 f4       	brne	.+8      	; 0x1122 <vfprintf+0x50a>
    111a:	0f 7e       	andi	r16, 0xEF	; 239
    111c:	2a e0       	ldi	r18, 0x0A	; 10
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	1d c0       	rjmp	.+58     	; 0x115c <vfprintf+0x544>
    1122:	09 7f       	andi	r16, 0xF9	; 249
    1124:	8f 36       	cpi	r24, 0x6F	; 111
    1126:	91 f0       	breq	.+36     	; 0x114c <vfprintf+0x534>
    1128:	18 f4       	brcc	.+6      	; 0x1130 <vfprintf+0x518>
    112a:	88 35       	cpi	r24, 0x58	; 88
    112c:	59 f0       	breq	.+22     	; 0x1144 <vfprintf+0x52c>
    112e:	c3 c0       	rjmp	.+390    	; 0x12b6 <vfprintf+0x69e>
    1130:	80 37       	cpi	r24, 0x70	; 112
    1132:	19 f0       	breq	.+6      	; 0x113a <vfprintf+0x522>
    1134:	88 37       	cpi	r24, 0x78	; 120
    1136:	11 f0       	breq	.+4      	; 0x113c <vfprintf+0x524>
    1138:	be c0       	rjmp	.+380    	; 0x12b6 <vfprintf+0x69e>
    113a:	00 61       	ori	r16, 0x10	; 16
    113c:	04 ff       	sbrs	r16, 4
    113e:	09 c0       	rjmp	.+18     	; 0x1152 <vfprintf+0x53a>
    1140:	04 60       	ori	r16, 0x04	; 4
    1142:	07 c0       	rjmp	.+14     	; 0x1152 <vfprintf+0x53a>
    1144:	94 fe       	sbrs	r9, 4
    1146:	08 c0       	rjmp	.+16     	; 0x1158 <vfprintf+0x540>
    1148:	06 60       	ori	r16, 0x06	; 6
    114a:	06 c0       	rjmp	.+12     	; 0x1158 <vfprintf+0x540>
    114c:	28 e0       	ldi	r18, 0x08	; 8
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	05 c0       	rjmp	.+10     	; 0x115c <vfprintf+0x544>
    1152:	20 e1       	ldi	r18, 0x10	; 16
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	02 c0       	rjmp	.+4      	; 0x115c <vfprintf+0x544>
    1158:	20 e1       	ldi	r18, 0x10	; 16
    115a:	32 e0       	ldi	r19, 0x02	; 2
    115c:	56 01       	movw	r10, r12
    115e:	07 ff       	sbrs	r16, 7
    1160:	09 c0       	rjmp	.+18     	; 0x1174 <vfprintf+0x55c>
    1162:	84 e0       	ldi	r24, 0x04	; 4
    1164:	a8 0e       	add	r10, r24
    1166:	b1 1c       	adc	r11, r1
    1168:	f6 01       	movw	r30, r12
    116a:	60 81       	ld	r22, Z
    116c:	71 81       	ldd	r23, Z+1	; 0x01
    116e:	82 81       	ldd	r24, Z+2	; 0x02
    1170:	93 81       	ldd	r25, Z+3	; 0x03
    1172:	08 c0       	rjmp	.+16     	; 0x1184 <vfprintf+0x56c>
    1174:	f2 e0       	ldi	r31, 0x02	; 2
    1176:	af 0e       	add	r10, r31
    1178:	b1 1c       	adc	r11, r1
    117a:	f6 01       	movw	r30, r12
    117c:	60 81       	ld	r22, Z
    117e:	71 81       	ldd	r23, Z+1	; 0x01
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	a3 01       	movw	r20, r6
    1186:	0e 94 30 0b 	call	0x1660	; 0x1660 <__ultoa_invert>
    118a:	c8 2e       	mov	r12, r24
    118c:	c6 18       	sub	r12, r6
    118e:	0f 77       	andi	r16, 0x7F	; 127
    1190:	90 2e       	mov	r9, r16
    1192:	96 fe       	sbrs	r9, 6
    1194:	0b c0       	rjmp	.+22     	; 0x11ac <vfprintf+0x594>
    1196:	09 2d       	mov	r16, r9
    1198:	0e 7f       	andi	r16, 0xFE	; 254
    119a:	c1 16       	cp	r12, r17
    119c:	50 f4       	brcc	.+20     	; 0x11b2 <vfprintf+0x59a>
    119e:	94 fe       	sbrs	r9, 4
    11a0:	0a c0       	rjmp	.+20     	; 0x11b6 <vfprintf+0x59e>
    11a2:	92 fc       	sbrc	r9, 2
    11a4:	08 c0       	rjmp	.+16     	; 0x11b6 <vfprintf+0x59e>
    11a6:	09 2d       	mov	r16, r9
    11a8:	0e 7e       	andi	r16, 0xEE	; 238
    11aa:	05 c0       	rjmp	.+10     	; 0x11b6 <vfprintf+0x59e>
    11ac:	dc 2c       	mov	r13, r12
    11ae:	09 2d       	mov	r16, r9
    11b0:	03 c0       	rjmp	.+6      	; 0x11b8 <vfprintf+0x5a0>
    11b2:	dc 2c       	mov	r13, r12
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <vfprintf+0x5a0>
    11b6:	d1 2e       	mov	r13, r17
    11b8:	04 ff       	sbrs	r16, 4
    11ba:	0d c0       	rjmp	.+26     	; 0x11d6 <vfprintf+0x5be>
    11bc:	fe 01       	movw	r30, r28
    11be:	ec 0d       	add	r30, r12
    11c0:	f1 1d       	adc	r31, r1
    11c2:	80 81       	ld	r24, Z
    11c4:	80 33       	cpi	r24, 0x30	; 48
    11c6:	11 f4       	brne	.+4      	; 0x11cc <vfprintf+0x5b4>
    11c8:	09 7e       	andi	r16, 0xE9	; 233
    11ca:	09 c0       	rjmp	.+18     	; 0x11de <vfprintf+0x5c6>
    11cc:	02 ff       	sbrs	r16, 2
    11ce:	06 c0       	rjmp	.+12     	; 0x11dc <vfprintf+0x5c4>
    11d0:	d3 94       	inc	r13
    11d2:	d3 94       	inc	r13
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <vfprintf+0x5c6>
    11d6:	80 2f       	mov	r24, r16
    11d8:	86 78       	andi	r24, 0x86	; 134
    11da:	09 f0       	breq	.+2      	; 0x11de <vfprintf+0x5c6>
    11dc:	d3 94       	inc	r13
    11de:	03 fd       	sbrc	r16, 3
    11e0:	11 c0       	rjmp	.+34     	; 0x1204 <vfprintf+0x5ec>
    11e2:	00 ff       	sbrs	r16, 0
    11e4:	06 c0       	rjmp	.+12     	; 0x11f2 <vfprintf+0x5da>
    11e6:	1c 2d       	mov	r17, r12
    11e8:	d5 14       	cp	r13, r5
    11ea:	80 f4       	brcc	.+32     	; 0x120c <vfprintf+0x5f4>
    11ec:	15 0d       	add	r17, r5
    11ee:	1d 19       	sub	r17, r13
    11f0:	0d c0       	rjmp	.+26     	; 0x120c <vfprintf+0x5f4>
    11f2:	d5 14       	cp	r13, r5
    11f4:	58 f4       	brcc	.+22     	; 0x120c <vfprintf+0x5f4>
    11f6:	b7 01       	movw	r22, r14
    11f8:	80 e2       	ldi	r24, 0x20	; 32
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
    1200:	d3 94       	inc	r13
    1202:	f7 cf       	rjmp	.-18     	; 0x11f2 <vfprintf+0x5da>
    1204:	d5 14       	cp	r13, r5
    1206:	10 f4       	brcc	.+4      	; 0x120c <vfprintf+0x5f4>
    1208:	5d 18       	sub	r5, r13
    120a:	01 c0       	rjmp	.+2      	; 0x120e <vfprintf+0x5f6>
    120c:	51 2c       	mov	r5, r1
    120e:	04 ff       	sbrs	r16, 4
    1210:	10 c0       	rjmp	.+32     	; 0x1232 <vfprintf+0x61a>
    1212:	b7 01       	movw	r22, r14
    1214:	80 e3       	ldi	r24, 0x30	; 48
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
    121c:	02 ff       	sbrs	r16, 2
    121e:	17 c0       	rjmp	.+46     	; 0x124e <vfprintf+0x636>
    1220:	01 fd       	sbrc	r16, 1
    1222:	03 c0       	rjmp	.+6      	; 0x122a <vfprintf+0x612>
    1224:	88 e7       	ldi	r24, 0x78	; 120
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 c0       	rjmp	.+4      	; 0x122e <vfprintf+0x616>
    122a:	88 e5       	ldi	r24, 0x58	; 88
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	b7 01       	movw	r22, r14
    1230:	0c c0       	rjmp	.+24     	; 0x124a <vfprintf+0x632>
    1232:	80 2f       	mov	r24, r16
    1234:	86 78       	andi	r24, 0x86	; 134
    1236:	59 f0       	breq	.+22     	; 0x124e <vfprintf+0x636>
    1238:	01 ff       	sbrs	r16, 1
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <vfprintf+0x628>
    123c:	8b e2       	ldi	r24, 0x2B	; 43
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <vfprintf+0x62a>
    1240:	80 e2       	ldi	r24, 0x20	; 32
    1242:	07 fd       	sbrc	r16, 7
    1244:	8d e2       	ldi	r24, 0x2D	; 45
    1246:	b7 01       	movw	r22, r14
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
    124e:	c1 16       	cp	r12, r17
    1250:	38 f4       	brcc	.+14     	; 0x1260 <vfprintf+0x648>
    1252:	b7 01       	movw	r22, r14
    1254:	80 e3       	ldi	r24, 0x30	; 48
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
    125c:	11 50       	subi	r17, 0x01	; 1
    125e:	f7 cf       	rjmp	.-18     	; 0x124e <vfprintf+0x636>
    1260:	ca 94       	dec	r12
    1262:	f3 01       	movw	r30, r6
    1264:	ec 0d       	add	r30, r12
    1266:	f1 1d       	adc	r31, r1
    1268:	80 81       	ld	r24, Z
    126a:	b7 01       	movw	r22, r14
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
    1272:	c1 10       	cpse	r12, r1
    1274:	f5 cf       	rjmp	.-22     	; 0x1260 <vfprintf+0x648>
    1276:	15 c0       	rjmp	.+42     	; 0x12a2 <vfprintf+0x68a>
    1278:	f4 e0       	ldi	r31, 0x04	; 4
    127a:	f5 15       	cp	r31, r5
    127c:	60 f5       	brcc	.+88     	; 0x12d6 <vfprintf+0x6be>
    127e:	84 e0       	ldi	r24, 0x04	; 4
    1280:	58 1a       	sub	r5, r24
    1282:	93 fe       	sbrs	r9, 3
    1284:	1f c0       	rjmp	.+62     	; 0x12c4 <vfprintf+0x6ac>
    1286:	01 11       	cpse	r16, r1
    1288:	27 c0       	rjmp	.+78     	; 0x12d8 <vfprintf+0x6c0>
    128a:	2c 85       	ldd	r18, Y+12	; 0x0c
    128c:	23 ff       	sbrs	r18, 3
    128e:	2a c0       	rjmp	.+84     	; 0x12e4 <vfprintf+0x6cc>
    1290:	08 e6       	ldi	r16, 0x68	; 104
    1292:	10 e0       	ldi	r17, 0x00	; 0
    1294:	39 2d       	mov	r19, r9
    1296:	30 71       	andi	r19, 0x10	; 16
    1298:	93 2e       	mov	r9, r19
    129a:	f8 01       	movw	r30, r16
    129c:	84 91       	lpm	r24, Z
    129e:	81 11       	cpse	r24, r1
    12a0:	24 c0       	rjmp	.+72     	; 0x12ea <vfprintf+0x6d2>
    12a2:	55 20       	and	r5, r5
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <vfprintf+0x690>
    12a6:	e4 cc       	rjmp	.-1592   	; 0xc70 <vfprintf+0x58>
    12a8:	b7 01       	movw	r22, r14
    12aa:	80 e2       	ldi	r24, 0x20	; 32
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
    12b2:	5a 94       	dec	r5
    12b4:	f6 cf       	rjmp	.-20     	; 0x12a2 <vfprintf+0x68a>
    12b6:	f7 01       	movw	r30, r14
    12b8:	86 81       	ldd	r24, Z+6	; 0x06
    12ba:	97 81       	ldd	r25, Z+7	; 0x07
    12bc:	26 c0       	rjmp	.+76     	; 0x130a <vfprintf+0x6f2>
    12be:	8f ef       	ldi	r24, 0xFF	; 255
    12c0:	9f ef       	ldi	r25, 0xFF	; 255
    12c2:	23 c0       	rjmp	.+70     	; 0x130a <vfprintf+0x6f2>
    12c4:	b7 01       	movw	r22, r14
    12c6:	80 e2       	ldi	r24, 0x20	; 32
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
    12ce:	5a 94       	dec	r5
    12d0:	51 10       	cpse	r5, r1
    12d2:	f8 cf       	rjmp	.-16     	; 0x12c4 <vfprintf+0x6ac>
    12d4:	d8 cf       	rjmp	.-80     	; 0x1286 <vfprintf+0x66e>
    12d6:	51 2c       	mov	r5, r1
    12d8:	b7 01       	movw	r22, r14
    12da:	80 2f       	mov	r24, r16
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
    12e2:	d3 cf       	rjmp	.-90     	; 0x128a <vfprintf+0x672>
    12e4:	0c e6       	ldi	r16, 0x6C	; 108
    12e6:	10 e0       	ldi	r17, 0x00	; 0
    12e8:	d5 cf       	rjmp	.-86     	; 0x1294 <vfprintf+0x67c>
    12ea:	91 10       	cpse	r9, r1
    12ec:	80 52       	subi	r24, 0x20	; 32
    12ee:	b7 01       	movw	r22, r14
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0e 94 ae 0a 	call	0x155c	; 0x155c <fputc>
    12f6:	0f 5f       	subi	r16, 0xFF	; 255
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    12fa:	cf cf       	rjmp	.-98     	; 0x129a <vfprintf+0x682>
    12fc:	23 e0       	ldi	r18, 0x03	; 3
    12fe:	25 15       	cp	r18, r5
    1300:	10 f4       	brcc	.+4      	; 0x1306 <vfprintf+0x6ee>
    1302:	83 e0       	ldi	r24, 0x03	; 3
    1304:	bd cf       	rjmp	.-134    	; 0x1280 <vfprintf+0x668>
    1306:	51 2c       	mov	r5, r1
    1308:	c0 cf       	rjmp	.-128    	; 0x128a <vfprintf+0x672>
    130a:	60 96       	adiw	r28, 0x10	; 16
    130c:	e2 e1       	ldi	r30, 0x12	; 18
    130e:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__epilogue_restores__>

00001312 <__prologue_saves__>:
    1312:	2f 92       	push	r2
    1314:	3f 92       	push	r3
    1316:	4f 92       	push	r4
    1318:	5f 92       	push	r5
    131a:	6f 92       	push	r6
    131c:	7f 92       	push	r7
    131e:	8f 92       	push	r8
    1320:	9f 92       	push	r9
    1322:	af 92       	push	r10
    1324:	bf 92       	push	r11
    1326:	cf 92       	push	r12
    1328:	df 92       	push	r13
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	ca 1b       	sub	r28, r26
    133c:	db 0b       	sbc	r29, r27
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	09 94       	ijmp

0000134a <__epilogue_restores__>:
    134a:	2a 88       	ldd	r2, Y+18	; 0x12
    134c:	39 88       	ldd	r3, Y+17	; 0x11
    134e:	48 88       	ldd	r4, Y+16	; 0x10
    1350:	5f 84       	ldd	r5, Y+15	; 0x0f
    1352:	6e 84       	ldd	r6, Y+14	; 0x0e
    1354:	7d 84       	ldd	r7, Y+13	; 0x0d
    1356:	8c 84       	ldd	r8, Y+12	; 0x0c
    1358:	9b 84       	ldd	r9, Y+11	; 0x0b
    135a:	aa 84       	ldd	r10, Y+10	; 0x0a
    135c:	b9 84       	ldd	r11, Y+9	; 0x09
    135e:	c8 84       	ldd	r12, Y+8	; 0x08
    1360:	df 80       	ldd	r13, Y+7	; 0x07
    1362:	ee 80       	ldd	r14, Y+6	; 0x06
    1364:	fd 80       	ldd	r15, Y+5	; 0x05
    1366:	0c 81       	ldd	r16, Y+4	; 0x04
    1368:	1b 81       	ldd	r17, Y+3	; 0x03
    136a:	aa 81       	ldd	r26, Y+2	; 0x02
    136c:	b9 81       	ldd	r27, Y+1	; 0x01
    136e:	ce 0f       	add	r28, r30
    1370:	d1 1d       	adc	r29, r1
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	ed 01       	movw	r28, r26
    137e:	08 95       	ret

00001380 <__ftoa_engine>:
    1380:	28 30       	cpi	r18, 0x08	; 8
    1382:	08 f0       	brcs	.+2      	; 0x1386 <__ftoa_engine+0x6>
    1384:	27 e0       	ldi	r18, 0x07	; 7
    1386:	33 27       	eor	r19, r19
    1388:	da 01       	movw	r26, r20
    138a:	99 0f       	add	r25, r25
    138c:	31 1d       	adc	r19, r1
    138e:	87 fd       	sbrc	r24, 7
    1390:	91 60       	ori	r25, 0x01	; 1
    1392:	00 96       	adiw	r24, 0x00	; 0
    1394:	61 05       	cpc	r22, r1
    1396:	71 05       	cpc	r23, r1
    1398:	39 f4       	brne	.+14     	; 0x13a8 <__ftoa_engine+0x28>
    139a:	32 60       	ori	r19, 0x02	; 2
    139c:	2e 5f       	subi	r18, 0xFE	; 254
    139e:	3d 93       	st	X+, r19
    13a0:	30 e3       	ldi	r19, 0x30	; 48
    13a2:	2a 95       	dec	r18
    13a4:	e1 f7       	brne	.-8      	; 0x139e <__ftoa_engine+0x1e>
    13a6:	08 95       	ret
    13a8:	9f 3f       	cpi	r25, 0xFF	; 255
    13aa:	30 f0       	brcs	.+12     	; 0x13b8 <__ftoa_engine+0x38>
    13ac:	80 38       	cpi	r24, 0x80	; 128
    13ae:	71 05       	cpc	r23, r1
    13b0:	61 05       	cpc	r22, r1
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <__ftoa_engine+0x36>
    13b4:	3c 5f       	subi	r19, 0xFC	; 252
    13b6:	3c 5f       	subi	r19, 0xFC	; 252
    13b8:	3d 93       	st	X+, r19
    13ba:	91 30       	cpi	r25, 0x01	; 1
    13bc:	08 f0       	brcs	.+2      	; 0x13c0 <__ftoa_engine+0x40>
    13be:	80 68       	ori	r24, 0x80	; 128
    13c0:	91 1d       	adc	r25, r1
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	1f 93       	push	r17
    13c8:	0f 93       	push	r16
    13ca:	ff 92       	push	r15
    13cc:	ef 92       	push	r14
    13ce:	19 2f       	mov	r17, r25
    13d0:	98 7f       	andi	r25, 0xF8	; 248
    13d2:	96 95       	lsr	r25
    13d4:	e9 2f       	mov	r30, r25
    13d6:	96 95       	lsr	r25
    13d8:	96 95       	lsr	r25
    13da:	e9 0f       	add	r30, r25
    13dc:	ff 27       	eor	r31, r31
    13de:	e6 53       	subi	r30, 0x36	; 54
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	99 27       	eor	r25, r25
    13e4:	33 27       	eor	r19, r19
    13e6:	ee 24       	eor	r14, r14
    13e8:	ff 24       	eor	r15, r15
    13ea:	a7 01       	movw	r20, r14
    13ec:	e7 01       	movw	r28, r14
    13ee:	05 90       	lpm	r0, Z+
    13f0:	08 94       	sec
    13f2:	07 94       	ror	r0
    13f4:	28 f4       	brcc	.+10     	; 0x1400 <__ftoa_engine+0x80>
    13f6:	36 0f       	add	r19, r22
    13f8:	e7 1e       	adc	r14, r23
    13fa:	f8 1e       	adc	r15, r24
    13fc:	49 1f       	adc	r20, r25
    13fe:	51 1d       	adc	r21, r1
    1400:	66 0f       	add	r22, r22
    1402:	77 1f       	adc	r23, r23
    1404:	88 1f       	adc	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	06 94       	lsr	r0
    140a:	a1 f7       	brne	.-24     	; 0x13f4 <__ftoa_engine+0x74>
    140c:	05 90       	lpm	r0, Z+
    140e:	07 94       	ror	r0
    1410:	28 f4       	brcc	.+10     	; 0x141c <__ftoa_engine+0x9c>
    1412:	e7 0e       	add	r14, r23
    1414:	f8 1e       	adc	r15, r24
    1416:	49 1f       	adc	r20, r25
    1418:	56 1f       	adc	r21, r22
    141a:	c1 1d       	adc	r28, r1
    141c:	77 0f       	add	r23, r23
    141e:	88 1f       	adc	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	66 1f       	adc	r22, r22
    1424:	06 94       	lsr	r0
    1426:	a1 f7       	brne	.-24     	; 0x1410 <__ftoa_engine+0x90>
    1428:	05 90       	lpm	r0, Z+
    142a:	07 94       	ror	r0
    142c:	28 f4       	brcc	.+10     	; 0x1438 <__ftoa_engine+0xb8>
    142e:	f8 0e       	add	r15, r24
    1430:	49 1f       	adc	r20, r25
    1432:	56 1f       	adc	r21, r22
    1434:	c7 1f       	adc	r28, r23
    1436:	d1 1d       	adc	r29, r1
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	66 1f       	adc	r22, r22
    143e:	77 1f       	adc	r23, r23
    1440:	06 94       	lsr	r0
    1442:	a1 f7       	brne	.-24     	; 0x142c <__ftoa_engine+0xac>
    1444:	05 90       	lpm	r0, Z+
    1446:	07 94       	ror	r0
    1448:	20 f4       	brcc	.+8      	; 0x1452 <__ftoa_engine+0xd2>
    144a:	49 0f       	add	r20, r25
    144c:	56 1f       	adc	r21, r22
    144e:	c7 1f       	adc	r28, r23
    1450:	d8 1f       	adc	r29, r24
    1452:	99 0f       	add	r25, r25
    1454:	66 1f       	adc	r22, r22
    1456:	77 1f       	adc	r23, r23
    1458:	88 1f       	adc	r24, r24
    145a:	06 94       	lsr	r0
    145c:	a9 f7       	brne	.-22     	; 0x1448 <__ftoa_engine+0xc8>
    145e:	84 91       	lpm	r24, Z
    1460:	10 95       	com	r17
    1462:	17 70       	andi	r17, 0x07	; 7
    1464:	41 f0       	breq	.+16     	; 0x1476 <__ftoa_engine+0xf6>
    1466:	d6 95       	lsr	r29
    1468:	c7 95       	ror	r28
    146a:	57 95       	ror	r21
    146c:	47 95       	ror	r20
    146e:	f7 94       	ror	r15
    1470:	e7 94       	ror	r14
    1472:	1a 95       	dec	r17
    1474:	c1 f7       	brne	.-16     	; 0x1466 <__ftoa_engine+0xe6>
    1476:	e0 e7       	ldi	r30, 0x70	; 112
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	68 94       	set
    147c:	15 90       	lpm	r1, Z+
    147e:	15 91       	lpm	r17, Z+
    1480:	35 91       	lpm	r19, Z+
    1482:	65 91       	lpm	r22, Z+
    1484:	95 91       	lpm	r25, Z+
    1486:	05 90       	lpm	r0, Z+
    1488:	7f e2       	ldi	r23, 0x2F	; 47
    148a:	73 95       	inc	r23
    148c:	e1 18       	sub	r14, r1
    148e:	f1 0a       	sbc	r15, r17
    1490:	43 0b       	sbc	r20, r19
    1492:	56 0b       	sbc	r21, r22
    1494:	c9 0b       	sbc	r28, r25
    1496:	d0 09       	sbc	r29, r0
    1498:	c0 f7       	brcc	.-16     	; 0x148a <__ftoa_engine+0x10a>
    149a:	e1 0c       	add	r14, r1
    149c:	f1 1e       	adc	r15, r17
    149e:	43 1f       	adc	r20, r19
    14a0:	56 1f       	adc	r21, r22
    14a2:	c9 1f       	adc	r28, r25
    14a4:	d0 1d       	adc	r29, r0
    14a6:	7e f4       	brtc	.+30     	; 0x14c6 <__ftoa_engine+0x146>
    14a8:	70 33       	cpi	r23, 0x30	; 48
    14aa:	11 f4       	brne	.+4      	; 0x14b0 <__ftoa_engine+0x130>
    14ac:	8a 95       	dec	r24
    14ae:	e6 cf       	rjmp	.-52     	; 0x147c <__ftoa_engine+0xfc>
    14b0:	e8 94       	clt
    14b2:	01 50       	subi	r16, 0x01	; 1
    14b4:	30 f0       	brcs	.+12     	; 0x14c2 <__ftoa_engine+0x142>
    14b6:	08 0f       	add	r16, r24
    14b8:	0a f4       	brpl	.+2      	; 0x14bc <__ftoa_engine+0x13c>
    14ba:	00 27       	eor	r16, r16
    14bc:	02 17       	cp	r16, r18
    14be:	08 f4       	brcc	.+2      	; 0x14c2 <__ftoa_engine+0x142>
    14c0:	20 2f       	mov	r18, r16
    14c2:	23 95       	inc	r18
    14c4:	02 2f       	mov	r16, r18
    14c6:	7a 33       	cpi	r23, 0x3A	; 58
    14c8:	28 f0       	brcs	.+10     	; 0x14d4 <__ftoa_engine+0x154>
    14ca:	79 e3       	ldi	r23, 0x39	; 57
    14cc:	7d 93       	st	X+, r23
    14ce:	2a 95       	dec	r18
    14d0:	e9 f7       	brne	.-6      	; 0x14cc <__ftoa_engine+0x14c>
    14d2:	10 c0       	rjmp	.+32     	; 0x14f4 <__ftoa_engine+0x174>
    14d4:	7d 93       	st	X+, r23
    14d6:	2a 95       	dec	r18
    14d8:	89 f6       	brne	.-94     	; 0x147c <__ftoa_engine+0xfc>
    14da:	06 94       	lsr	r0
    14dc:	97 95       	ror	r25
    14de:	67 95       	ror	r22
    14e0:	37 95       	ror	r19
    14e2:	17 95       	ror	r17
    14e4:	17 94       	ror	r1
    14e6:	e1 18       	sub	r14, r1
    14e8:	f1 0a       	sbc	r15, r17
    14ea:	43 0b       	sbc	r20, r19
    14ec:	56 0b       	sbc	r21, r22
    14ee:	c9 0b       	sbc	r28, r25
    14f0:	d0 09       	sbc	r29, r0
    14f2:	98 f0       	brcs	.+38     	; 0x151a <__ftoa_engine+0x19a>
    14f4:	23 95       	inc	r18
    14f6:	7e 91       	ld	r23, -X
    14f8:	73 95       	inc	r23
    14fa:	7a 33       	cpi	r23, 0x3A	; 58
    14fc:	08 f0       	brcs	.+2      	; 0x1500 <__ftoa_engine+0x180>
    14fe:	70 e3       	ldi	r23, 0x30	; 48
    1500:	7c 93       	st	X, r23
    1502:	20 13       	cpse	r18, r16
    1504:	b8 f7       	brcc	.-18     	; 0x14f4 <__ftoa_engine+0x174>
    1506:	7e 91       	ld	r23, -X
    1508:	70 61       	ori	r23, 0x10	; 16
    150a:	7d 93       	st	X+, r23
    150c:	30 f0       	brcs	.+12     	; 0x151a <__ftoa_engine+0x19a>
    150e:	83 95       	inc	r24
    1510:	71 e3       	ldi	r23, 0x31	; 49
    1512:	7d 93       	st	X+, r23
    1514:	70 e3       	ldi	r23, 0x30	; 48
    1516:	2a 95       	dec	r18
    1518:	e1 f7       	brne	.-8      	; 0x1512 <__ftoa_engine+0x192>
    151a:	11 24       	eor	r1, r1
    151c:	ef 90       	pop	r14
    151e:	ff 90       	pop	r15
    1520:	0f 91       	pop	r16
    1522:	1f 91       	pop	r17
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	99 27       	eor	r25, r25
    152a:	87 fd       	sbrc	r24, 7
    152c:	90 95       	com	r25
    152e:	08 95       	ret

00001530 <strnlen_P>:
    1530:	fc 01       	movw	r30, r24
    1532:	05 90       	lpm	r0, Z+
    1534:	61 50       	subi	r22, 0x01	; 1
    1536:	70 40       	sbci	r23, 0x00	; 0
    1538:	01 10       	cpse	r0, r1
    153a:	d8 f7       	brcc	.-10     	; 0x1532 <strnlen_P+0x2>
    153c:	80 95       	com	r24
    153e:	90 95       	com	r25
    1540:	8e 0f       	add	r24, r30
    1542:	9f 1f       	adc	r25, r31
    1544:	08 95       	ret

00001546 <strnlen>:
    1546:	fc 01       	movw	r30, r24
    1548:	61 50       	subi	r22, 0x01	; 1
    154a:	70 40       	sbci	r23, 0x00	; 0
    154c:	01 90       	ld	r0, Z+
    154e:	01 10       	cpse	r0, r1
    1550:	d8 f7       	brcc	.-10     	; 0x1548 <strnlen+0x2>
    1552:	80 95       	com	r24
    1554:	90 95       	com	r25
    1556:	8e 0f       	add	r24, r30
    1558:	9f 1f       	adc	r25, r31
    155a:	08 95       	ret

0000155c <fputc>:
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	fb 01       	movw	r30, r22
    1566:	23 81       	ldd	r18, Z+3	; 0x03
    1568:	21 fd       	sbrc	r18, 1
    156a:	03 c0       	rjmp	.+6      	; 0x1572 <fputc+0x16>
    156c:	8f ef       	ldi	r24, 0xFF	; 255
    156e:	9f ef       	ldi	r25, 0xFF	; 255
    1570:	2c c0       	rjmp	.+88     	; 0x15ca <fputc+0x6e>
    1572:	22 ff       	sbrs	r18, 2
    1574:	16 c0       	rjmp	.+44     	; 0x15a2 <fputc+0x46>
    1576:	46 81       	ldd	r20, Z+6	; 0x06
    1578:	57 81       	ldd	r21, Z+7	; 0x07
    157a:	24 81       	ldd	r18, Z+4	; 0x04
    157c:	35 81       	ldd	r19, Z+5	; 0x05
    157e:	42 17       	cp	r20, r18
    1580:	53 07       	cpc	r21, r19
    1582:	44 f4       	brge	.+16     	; 0x1594 <fputc+0x38>
    1584:	a0 81       	ld	r26, Z
    1586:	b1 81       	ldd	r27, Z+1	; 0x01
    1588:	9d 01       	movw	r18, r26
    158a:	2f 5f       	subi	r18, 0xFF	; 255
    158c:	3f 4f       	sbci	r19, 0xFF	; 255
    158e:	31 83       	std	Z+1, r19	; 0x01
    1590:	20 83       	st	Z, r18
    1592:	8c 93       	st	X, r24
    1594:	26 81       	ldd	r18, Z+6	; 0x06
    1596:	37 81       	ldd	r19, Z+7	; 0x07
    1598:	2f 5f       	subi	r18, 0xFF	; 255
    159a:	3f 4f       	sbci	r19, 0xFF	; 255
    159c:	37 83       	std	Z+7, r19	; 0x07
    159e:	26 83       	std	Z+6, r18	; 0x06
    15a0:	14 c0       	rjmp	.+40     	; 0x15ca <fputc+0x6e>
    15a2:	8b 01       	movw	r16, r22
    15a4:	ec 01       	movw	r28, r24
    15a6:	fb 01       	movw	r30, r22
    15a8:	00 84       	ldd	r0, Z+8	; 0x08
    15aa:	f1 85       	ldd	r31, Z+9	; 0x09
    15ac:	e0 2d       	mov	r30, r0
    15ae:	09 95       	icall
    15b0:	89 2b       	or	r24, r25
    15b2:	e1 f6       	brne	.-72     	; 0x156c <fputc+0x10>
    15b4:	d8 01       	movw	r26, r16
    15b6:	16 96       	adiw	r26, 0x06	; 6
    15b8:	8d 91       	ld	r24, X+
    15ba:	9c 91       	ld	r25, X
    15bc:	17 97       	sbiw	r26, 0x07	; 7
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	17 96       	adiw	r26, 0x07	; 7
    15c2:	9c 93       	st	X, r25
    15c4:	8e 93       	st	-X, r24
    15c6:	16 97       	sbiw	r26, 0x06	; 6
    15c8:	ce 01       	movw	r24, r28
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	08 95       	ret

000015d4 <printf>:
    15d4:	a0 e0       	ldi	r26, 0x00	; 0
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e0 ef       	ldi	r30, 0xF0	; 240
    15da:	fa e0       	ldi	r31, 0x0A	; 10
    15dc:	0c 94 99 09 	jmp	0x1332	; 0x1332 <__prologue_saves__+0x20>
    15e0:	ae 01       	movw	r20, r28
    15e2:	4b 5f       	subi	r20, 0xFB	; 251
    15e4:	5f 4f       	sbci	r21, 0xFF	; 255
    15e6:	fa 01       	movw	r30, r20
    15e8:	61 91       	ld	r22, Z+
    15ea:	71 91       	ld	r23, Z+
    15ec:	af 01       	movw	r20, r30
    15ee:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__iob+0x2>
    15f2:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <__iob+0x3>
    15f6:	0e 94 0c 06 	call	0xc18	; 0xc18 <vfprintf>
    15fa:	e2 e0       	ldi	r30, 0x02	; 2
    15fc:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__epilogue_restores__+0x20>

00001600 <puts>:
    1600:	0f 93       	push	r16
    1602:	1f 93       	push	r17
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <__iob+0x2>
    160c:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <__iob+0x3>
    1610:	23 81       	ldd	r18, Z+3	; 0x03
    1612:	21 ff       	sbrs	r18, 1
    1614:	1b c0       	rjmp	.+54     	; 0x164c <puts+0x4c>
    1616:	8c 01       	movw	r16, r24
    1618:	d0 e0       	ldi	r29, 0x00	; 0
    161a:	c0 e0       	ldi	r28, 0x00	; 0
    161c:	f8 01       	movw	r30, r16
    161e:	81 91       	ld	r24, Z+
    1620:	8f 01       	movw	r16, r30
    1622:	60 91 de 01 	lds	r22, 0x01DE	; 0x8001de <__iob+0x2>
    1626:	70 91 df 01 	lds	r23, 0x01DF	; 0x8001df <__iob+0x3>
    162a:	db 01       	movw	r26, r22
    162c:	18 96       	adiw	r26, 0x08	; 8
    162e:	ed 91       	ld	r30, X+
    1630:	fc 91       	ld	r31, X
    1632:	19 97       	sbiw	r26, 0x09	; 9
    1634:	88 23       	and	r24, r24
    1636:	31 f0       	breq	.+12     	; 0x1644 <puts+0x44>
    1638:	09 95       	icall
    163a:	89 2b       	or	r24, r25
    163c:	79 f3       	breq	.-34     	; 0x161c <puts+0x1c>
    163e:	df ef       	ldi	r29, 0xFF	; 255
    1640:	cf ef       	ldi	r28, 0xFF	; 255
    1642:	ec cf       	rjmp	.-40     	; 0x161c <puts+0x1c>
    1644:	8a e0       	ldi	r24, 0x0A	; 10
    1646:	09 95       	icall
    1648:	89 2b       	or	r24, r25
    164a:	19 f0       	breq	.+6      	; 0x1652 <puts+0x52>
    164c:	8f ef       	ldi	r24, 0xFF	; 255
    164e:	9f ef       	ldi	r25, 0xFF	; 255
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <puts+0x56>
    1652:	8d 2f       	mov	r24, r29
    1654:	9c 2f       	mov	r25, r28
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	08 95       	ret

00001660 <__ultoa_invert>:
    1660:	fa 01       	movw	r30, r20
    1662:	aa 27       	eor	r26, r26
    1664:	28 30       	cpi	r18, 0x08	; 8
    1666:	51 f1       	breq	.+84     	; 0x16bc <__ultoa_invert+0x5c>
    1668:	20 31       	cpi	r18, 0x10	; 16
    166a:	81 f1       	breq	.+96     	; 0x16cc <__ultoa_invert+0x6c>
    166c:	e8 94       	clt
    166e:	6f 93       	push	r22
    1670:	6e 7f       	andi	r22, 0xFE	; 254
    1672:	6e 5f       	subi	r22, 0xFE	; 254
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	8f 4f       	sbci	r24, 0xFF	; 255
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	af 4f       	sbci	r26, 0xFF	; 255
    167c:	b1 e0       	ldi	r27, 0x01	; 1
    167e:	3e d0       	rcall	.+124    	; 0x16fc <__ultoa_invert+0x9c>
    1680:	b4 e0       	ldi	r27, 0x04	; 4
    1682:	3c d0       	rcall	.+120    	; 0x16fc <__ultoa_invert+0x9c>
    1684:	67 0f       	add	r22, r23
    1686:	78 1f       	adc	r23, r24
    1688:	89 1f       	adc	r24, r25
    168a:	9a 1f       	adc	r25, r26
    168c:	a1 1d       	adc	r26, r1
    168e:	68 0f       	add	r22, r24
    1690:	79 1f       	adc	r23, r25
    1692:	8a 1f       	adc	r24, r26
    1694:	91 1d       	adc	r25, r1
    1696:	a1 1d       	adc	r26, r1
    1698:	6a 0f       	add	r22, r26
    169a:	71 1d       	adc	r23, r1
    169c:	81 1d       	adc	r24, r1
    169e:	91 1d       	adc	r25, r1
    16a0:	a1 1d       	adc	r26, r1
    16a2:	20 d0       	rcall	.+64     	; 0x16e4 <__ultoa_invert+0x84>
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <__ultoa_invert+0x48>
    16a6:	68 94       	set
    16a8:	3f 91       	pop	r19
    16aa:	2a e0       	ldi	r18, 0x0A	; 10
    16ac:	26 9f       	mul	r18, r22
    16ae:	11 24       	eor	r1, r1
    16b0:	30 19       	sub	r19, r0
    16b2:	30 5d       	subi	r19, 0xD0	; 208
    16b4:	31 93       	st	Z+, r19
    16b6:	de f6       	brtc	.-74     	; 0x166e <__ultoa_invert+0xe>
    16b8:	cf 01       	movw	r24, r30
    16ba:	08 95       	ret
    16bc:	46 2f       	mov	r20, r22
    16be:	47 70       	andi	r20, 0x07	; 7
    16c0:	40 5d       	subi	r20, 0xD0	; 208
    16c2:	41 93       	st	Z+, r20
    16c4:	b3 e0       	ldi	r27, 0x03	; 3
    16c6:	0f d0       	rcall	.+30     	; 0x16e6 <__ultoa_invert+0x86>
    16c8:	c9 f7       	brne	.-14     	; 0x16bc <__ultoa_invert+0x5c>
    16ca:	f6 cf       	rjmp	.-20     	; 0x16b8 <__ultoa_invert+0x58>
    16cc:	46 2f       	mov	r20, r22
    16ce:	4f 70       	andi	r20, 0x0F	; 15
    16d0:	40 5d       	subi	r20, 0xD0	; 208
    16d2:	4a 33       	cpi	r20, 0x3A	; 58
    16d4:	18 f0       	brcs	.+6      	; 0x16dc <__ultoa_invert+0x7c>
    16d6:	49 5d       	subi	r20, 0xD9	; 217
    16d8:	31 fd       	sbrc	r19, 1
    16da:	40 52       	subi	r20, 0x20	; 32
    16dc:	41 93       	st	Z+, r20
    16de:	02 d0       	rcall	.+4      	; 0x16e4 <__ultoa_invert+0x84>
    16e0:	a9 f7       	brne	.-22     	; 0x16cc <__ultoa_invert+0x6c>
    16e2:	ea cf       	rjmp	.-44     	; 0x16b8 <__ultoa_invert+0x58>
    16e4:	b4 e0       	ldi	r27, 0x04	; 4
    16e6:	a6 95       	lsr	r26
    16e8:	97 95       	ror	r25
    16ea:	87 95       	ror	r24
    16ec:	77 95       	ror	r23
    16ee:	67 95       	ror	r22
    16f0:	ba 95       	dec	r27
    16f2:	c9 f7       	brne	.-14     	; 0x16e6 <__ultoa_invert+0x86>
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	61 05       	cpc	r22, r1
    16f8:	71 05       	cpc	r23, r1
    16fa:	08 95       	ret
    16fc:	9b 01       	movw	r18, r22
    16fe:	ac 01       	movw	r20, r24
    1700:	0a 2e       	mov	r0, r26
    1702:	06 94       	lsr	r0
    1704:	57 95       	ror	r21
    1706:	47 95       	ror	r20
    1708:	37 95       	ror	r19
    170a:	27 95       	ror	r18
    170c:	ba 95       	dec	r27
    170e:	c9 f7       	brne	.-14     	; 0x1702 <__ultoa_invert+0xa2>
    1710:	62 0f       	add	r22, r18
    1712:	73 1f       	adc	r23, r19
    1714:	84 1f       	adc	r24, r20
    1716:	95 1f       	adc	r25, r21
    1718:	a0 1d       	adc	r26, r0
    171a:	08 95       	ret

0000171c <_exit>:
    171c:	f8 94       	cli

0000171e <__stop_program>:
    171e:	ff cf       	rjmp	.-2      	; 0x171e <__stop_program>
